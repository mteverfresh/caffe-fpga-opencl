// (C) 1992-2016 Intel Corporation.                            
// Intel, the Intel logo, Intel, MegaCore, NIOS II, Quartus and TalkBack words    
// and logos are trademarks of Intel Corporation or its subsidiaries in the U.S.  
// and/or other countries. Other marks and brands may be claimed as the property  
// of others. See Trademarks on intel.com for full list of Intel trademarks or    
// the Trademarks & Brands Names Database (if Intel) or See www.Intel.com/legal (if Altera) 
// Your use of Intel Corporation's design tools, logic functions and other        
// software and tools, and its AMPP partner logic functions, and any output       
// files any of the foregoing (including device programming or simulation         
// files), and any associated documentation or information are expressly subject  
// to the terms and conditions of the Altera Program License Subscription         
// Agreement, Intel MegaCore Function License Agreement, or other applicable      
// license agreement, including, without limitation, that your use is for the     
// sole purpose of programming logic devices manufactured by Intel and sold by    
// Intel or its authorized distributors.  Please refer to the applicable          
// agreement for further details.                                                 
    

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module dataLayer_basic_block_0
	(
		input 		clock,
		input 		resetn,
		input 		start,
		input [63:0] 		input_param,
		input [31:0] 		input_global_size_2,
		input [31:0] 		input_global_size_1,
		input [31:0] 		input_global_size_0,
		input 		valid_in,
		output 		stall_out,
		input [31:0] 		input_global_id_0,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out,
		input 		stall_in,
		output [31:0] 		lvb_bb0_ld_,
		output [63:0] 		lvb_bb0_scale,
		output [31:0] 		lvb_bb0_mul17,
		output [31:0] 		lvb_input_global_id_0,
		output [31:0] 		lvb_input_global_id_1,
		output [31:0] 		lvb_input_global_id_2,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		output 		avm_local_bb0_ld__enable,
		input [511:0] 		avm_local_bb0_ld__readdata,
		input 		avm_local_bb0_ld__readdatavalid,
		input 		avm_local_bb0_ld__waitrequest,
		output [31:0] 		avm_local_bb0_ld__address,
		output 		avm_local_bb0_ld__read,
		output 		avm_local_bb0_ld__write,
		input 		avm_local_bb0_ld__writeack,
		output [511:0] 		avm_local_bb0_ld__writedata,
		output [63:0] 		avm_local_bb0_ld__byteenable,
		output [4:0] 		avm_local_bb0_ld__burstcount,
		output 		local_bb0_ld__active,
		input 		clock2x
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_node_stall_in_4;
 reg merge_node_valid_out_4_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_0_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG) | (merge_node_stall_in_4 & merge_node_valid_out_4_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_global_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_global_id_0_staging_reg_NO_SHIFT_REG <= input_global_id_0;
				input_global_id_1_staging_reg_NO_SHIFT_REG <= input_global_id_1;
				input_global_id_2_staging_reg_NO_SHIFT_REG <= input_global_id_2;
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_4_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_4))
			begin
				merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements a registered operation.
// 
wire local_bb0_inputTotalDataNum_inputs_ready;
 reg local_bb0_inputTotalDataNum_wii_reg_NO_SHIFT_REG;
 reg local_bb0_inputTotalDataNum_valid_out_NO_SHIFT_REG;
wire local_bb0_inputTotalDataNum_stall_in;
wire local_bb0_inputTotalDataNum_output_regs_ready;
 reg [63:0] local_bb0_inputTotalDataNum_NO_SHIFT_REG;
wire [63:0] local_bb0_inputTotalDataNum_op_wire;
wire local_bb0_inputTotalDataNum_causedstall;

assign local_bb0_inputTotalDataNum_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb0_inputTotalDataNum_output_regs_ready = (~(local_bb0_inputTotalDataNum_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_inputTotalDataNum_valid_out_NO_SHIFT_REG) | ~(local_bb0_inputTotalDataNum_stall_in))));
assign local_bb0_inputTotalDataNum_op_wire = ((input_param & 64'hFFFFFFFFFFFFFC00) + 64'h2C);
assign merge_node_stall_in_0 = (~(local_bb0_inputTotalDataNum_wii_reg_NO_SHIFT_REG) & (~(local_bb0_inputTotalDataNum_output_regs_ready) | ~(local_bb0_inputTotalDataNum_inputs_ready)));
assign local_bb0_inputTotalDataNum_causedstall = (local_bb0_inputTotalDataNum_inputs_ready && (~(local_bb0_inputTotalDataNum_output_regs_ready) && !(~(local_bb0_inputTotalDataNum_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_inputTotalDataNum_NO_SHIFT_REG <= 'x;
		local_bb0_inputTotalDataNum_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_inputTotalDataNum_NO_SHIFT_REG <= 'x;
			local_bb0_inputTotalDataNum_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_inputTotalDataNum_output_regs_ready)
			begin
				local_bb0_inputTotalDataNum_NO_SHIFT_REG <= local_bb0_inputTotalDataNum_op_wire;
				local_bb0_inputTotalDataNum_valid_out_NO_SHIFT_REG <= local_bb0_inputTotalDataNum_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_inputTotalDataNum_stall_in))
				begin
					local_bb0_inputTotalDataNum_valid_out_NO_SHIFT_REG <= local_bb0_inputTotalDataNum_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_inputTotalDataNum_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_inputTotalDataNum_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_inputTotalDataNum_inputs_ready)
			begin
				local_bb0_inputTotalDataNum_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_scale_inputs_ready;
 reg local_bb0_scale_wii_reg_NO_SHIFT_REG;
 reg local_bb0_scale_valid_out_NO_SHIFT_REG;
wire local_bb0_scale_stall_in;
wire local_bb0_scale_output_regs_ready;
 reg [63:0] local_bb0_scale_NO_SHIFT_REG;
wire [63:0] local_bb0_scale_op_wire;
wire local_bb0_scale_causedstall;

assign local_bb0_scale_inputs_ready = merge_node_valid_out_1_NO_SHIFT_REG;
assign local_bb0_scale_output_regs_ready = (~(local_bb0_scale_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_scale_valid_out_NO_SHIFT_REG) | ~(local_bb0_scale_stall_in))));
assign local_bb0_scale_op_wire = (input_param & 64'hFFFFFFFFFFFFFC00);
assign merge_node_stall_in_1 = (~(local_bb0_scale_wii_reg_NO_SHIFT_REG) & (~(local_bb0_scale_output_regs_ready) | ~(local_bb0_scale_inputs_ready)));
assign local_bb0_scale_causedstall = (local_bb0_scale_inputs_ready && (~(local_bb0_scale_output_regs_ready) && !(~(local_bb0_scale_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_scale_NO_SHIFT_REG <= 'x;
		local_bb0_scale_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_scale_NO_SHIFT_REG <= 'x;
			local_bb0_scale_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_scale_output_regs_ready)
			begin
				local_bb0_scale_NO_SHIFT_REG <= local_bb0_scale_op_wire;
				local_bb0_scale_valid_out_NO_SHIFT_REG <= local_bb0_scale_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_scale_stall_in))
				begin
					local_bb0_scale_valid_out_NO_SHIFT_REG <= local_bb0_scale_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_scale_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_scale_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_scale_inputs_ready)
			begin
				local_bb0_scale_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_mul15_inputs_ready;
 reg local_bb0_mul15_wii_reg_NO_SHIFT_REG;
 reg local_bb0_mul15_valid_out_NO_SHIFT_REG;
wire local_bb0_mul15_stall_in;
wire local_bb0_mul15_output_regs_ready;
wire [31:0] local_bb0_mul15;
 reg local_bb0_mul15_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb0_mul15_valid_pipe_1_NO_SHIFT_REG;
wire local_bb0_mul15_causedstall;

acl_int_mult int_module_local_bb0_mul15 (
	.clock(clock),
	.dataa(input_global_size_2),
	.datab(input_global_size_1),
	.enable(local_bb0_mul15_output_regs_ready),
	.result(local_bb0_mul15)
);

defparam int_module_local_bb0_mul15.INPUT1_WIDTH = 32;
defparam int_module_local_bb0_mul15.INPUT2_WIDTH = 32;
defparam int_module_local_bb0_mul15.OUTPUT_WIDTH = 32;
defparam int_module_local_bb0_mul15.LATENCY = 3;
defparam int_module_local_bb0_mul15.SIGNED = 0;

assign local_bb0_mul15_inputs_ready = merge_node_valid_out_2_NO_SHIFT_REG;
assign local_bb0_mul15_output_regs_ready = (~(local_bb0_mul15_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_mul15_valid_out_NO_SHIFT_REG) | ~(local_bb0_mul15_stall_in))));
assign merge_node_stall_in_2 = (~(local_bb0_mul15_wii_reg_NO_SHIFT_REG) & (~(local_bb0_mul15_output_regs_ready) | ~(local_bb0_mul15_inputs_ready)));
assign local_bb0_mul15_causedstall = (local_bb0_mul15_inputs_ready && (~(local_bb0_mul15_output_regs_ready) && !(~(local_bb0_mul15_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_mul15_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb0_mul15_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_mul15_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
			local_bb0_mul15_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_mul15_output_regs_ready)
			begin
				local_bb0_mul15_valid_pipe_0_NO_SHIFT_REG <= local_bb0_mul15_inputs_ready;
				local_bb0_mul15_valid_pipe_1_NO_SHIFT_REG <= local_bb0_mul15_valid_pipe_0_NO_SHIFT_REG;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_mul15_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_mul15_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_mul15_output_regs_ready)
			begin
				local_bb0_mul15_valid_out_NO_SHIFT_REG <= local_bb0_mul15_valid_pipe_1_NO_SHIFT_REG;
			end
			else
			begin
				if (~(local_bb0_mul15_stall_in))
				begin
					local_bb0_mul15_valid_out_NO_SHIFT_REG <= local_bb0_mul15_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_mul15_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_mul15_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_mul15_valid_pipe_1_NO_SHIFT_REG)
			begin
				local_bb0_mul15_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_6to6_bb0_inputTotalDataNum_valid_out;
wire rstag_6to6_bb0_inputTotalDataNum_stall_in;
wire rstag_6to6_bb0_inputTotalDataNum_inputs_ready;
wire rstag_6to6_bb0_inputTotalDataNum_stall_local;
 reg rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG;
wire rstag_6to6_bb0_inputTotalDataNum_combined_valid;
 reg [63:0] rstag_6to6_bb0_inputTotalDataNum_staging_reg_NO_SHIFT_REG;
wire [63:0] rstag_6to6_bb0_inputTotalDataNum;

assign rstag_6to6_bb0_inputTotalDataNum_inputs_ready = local_bb0_inputTotalDataNum_valid_out_NO_SHIFT_REG;
assign rstag_6to6_bb0_inputTotalDataNum = (rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG ? rstag_6to6_bb0_inputTotalDataNum_staging_reg_NO_SHIFT_REG : ((local_bb0_inputTotalDataNum_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFC2C) | 64'h2C));
assign rstag_6to6_bb0_inputTotalDataNum_combined_valid = (rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG | rstag_6to6_bb0_inputTotalDataNum_inputs_ready);
assign rstag_6to6_bb0_inputTotalDataNum_valid_out = rstag_6to6_bb0_inputTotalDataNum_combined_valid;
assign rstag_6to6_bb0_inputTotalDataNum_stall_local = rstag_6to6_bb0_inputTotalDataNum_stall_in;
assign local_bb0_inputTotalDataNum_stall_in = (|rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_6to6_bb0_inputTotalDataNum_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (start)
		begin
			rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (rstag_6to6_bb0_inputTotalDataNum_stall_local)
			begin
				if (~(rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG))
				begin
					rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG <= rstag_6to6_bb0_inputTotalDataNum_inputs_ready;
				end
			end
			else
			begin
				rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG <= 1'b0;
			end
		end
		if (~(rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG))
		begin
			rstag_6to6_bb0_inputTotalDataNum_staging_reg_NO_SHIFT_REG <= ((local_bb0_inputTotalDataNum_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFC2C) | 64'h2C);
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_mul17_inputs_ready;
 reg local_bb0_mul17_wii_reg_NO_SHIFT_REG;
 reg local_bb0_mul17_valid_out_NO_SHIFT_REG;
wire local_bb0_mul17_stall_in;
wire local_bb0_mul17_output_regs_ready;
wire [31:0] local_bb0_mul17;
 reg local_bb0_mul17_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb0_mul17_valid_pipe_1_NO_SHIFT_REG;
wire local_bb0_mul17_causedstall;

acl_int_mult int_module_local_bb0_mul17 (
	.clock(clock),
	.dataa(local_bb0_mul15),
	.datab(input_global_size_0),
	.enable(local_bb0_mul17_output_regs_ready),
	.result(local_bb0_mul17)
);

defparam int_module_local_bb0_mul17.INPUT1_WIDTH = 32;
defparam int_module_local_bb0_mul17.INPUT2_WIDTH = 32;
defparam int_module_local_bb0_mul17.OUTPUT_WIDTH = 32;
defparam int_module_local_bb0_mul17.LATENCY = 3;
defparam int_module_local_bb0_mul17.SIGNED = 0;

assign local_bb0_mul17_inputs_ready = (local_bb0_mul15_valid_out_NO_SHIFT_REG & merge_node_valid_out_3_NO_SHIFT_REG);
assign local_bb0_mul17_output_regs_ready = (~(local_bb0_mul17_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_mul17_valid_out_NO_SHIFT_REG) | ~(local_bb0_mul17_stall_in))));
assign local_bb0_mul15_stall_in = (~(local_bb0_mul17_wii_reg_NO_SHIFT_REG) & (~(local_bb0_mul17_output_regs_ready) | ~(local_bb0_mul17_inputs_ready)));
assign merge_node_stall_in_3 = (~(local_bb0_mul17_wii_reg_NO_SHIFT_REG) & (~(local_bb0_mul17_output_regs_ready) | ~(local_bb0_mul17_inputs_ready)));
assign local_bb0_mul17_causedstall = (local_bb0_mul17_inputs_ready && (~(local_bb0_mul17_output_regs_ready) && !(~(local_bb0_mul17_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_mul17_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb0_mul17_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_mul17_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
			local_bb0_mul17_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_mul17_output_regs_ready)
			begin
				local_bb0_mul17_valid_pipe_0_NO_SHIFT_REG <= local_bb0_mul17_inputs_ready;
				local_bb0_mul17_valid_pipe_1_NO_SHIFT_REG <= local_bb0_mul17_valid_pipe_0_NO_SHIFT_REG;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_mul17_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_mul17_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_mul17_output_regs_ready)
			begin
				local_bb0_mul17_valid_out_NO_SHIFT_REG <= local_bb0_mul17_valid_pipe_1_NO_SHIFT_REG;
			end
			else
			begin
				if (~(local_bb0_mul17_stall_in))
				begin
					local_bb0_mul17_valid_out_NO_SHIFT_REG <= local_bb0_mul17_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_mul17_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_mul17_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_mul17_valid_pipe_1_NO_SHIFT_REG)
			begin
				local_bb0_mul17_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_ld__inputs_ready;
 reg local_bb0_ld__wii_reg_NO_SHIFT_REG;
 reg local_bb0_ld__valid_out_NO_SHIFT_REG;
wire local_bb0_ld__stall_in;
wire local_bb0_ld__output_regs_ready;
wire local_bb0_ld__fu_stall_out;
wire local_bb0_ld__fu_valid_out;
wire [31:0] local_bb0_ld__lsu_dataout;
 reg [31:0] local_bb0_ld__NO_SHIFT_REG;
wire local_bb0_ld__causedstall;

lsu_top lsu_local_bb0_ld_ (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb0_ld__fu_stall_out),
	.i_valid((~(local_bb0_ld__wii_reg_NO_SHIFT_REG) & local_bb0_ld__inputs_ready)),
	.i_address(((rstag_6to6_bb0_inputTotalDataNum & 64'hFFFFFFFFFFFFFC2C) | 64'h2C)),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(1'b0),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb0_ld__output_regs_ready)),
	.o_valid(local_bb0_ld__fu_valid_out),
	.o_readdata(local_bb0_ld__lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb0_ld__active),
	.avm_address(avm_local_bb0_ld__address),
	.avm_read(avm_local_bb0_ld__read),
	.avm_enable(avm_local_bb0_ld__enable),
	.avm_readdata(avm_local_bb0_ld__readdata),
	.avm_write(avm_local_bb0_ld__write),
	.avm_writeack(avm_local_bb0_ld__writeack),
	.avm_burstcount(avm_local_bb0_ld__burstcount),
	.avm_writedata(avm_local_bb0_ld__writedata),
	.avm_byteenable(avm_local_bb0_ld__byteenable),
	.avm_waitrequest(avm_local_bb0_ld__waitrequest),
	.avm_readdatavalid(avm_local_bb0_ld__readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb0_ld_.AWIDTH = 32;
defparam lsu_local_bb0_ld_.WIDTH_BYTES = 4;
defparam lsu_local_bb0_ld_.MWIDTH_BYTES = 64;
defparam lsu_local_bb0_ld_.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb0_ld_.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb0_ld_.READ = 1;
defparam lsu_local_bb0_ld_.ATOMIC = 0;
defparam lsu_local_bb0_ld_.WIDTH = 32;
defparam lsu_local_bb0_ld_.MWIDTH = 512;
defparam lsu_local_bb0_ld_.ATOMIC_WIDTH = 3;
defparam lsu_local_bb0_ld_.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb0_ld_.KERNEL_SIDE_MEM_LATENCY = 1;
defparam lsu_local_bb0_ld_.MEMORY_SIDE_MEM_LATENCY = 0;
defparam lsu_local_bb0_ld_.USE_WRITE_ACK = 0;
defparam lsu_local_bb0_ld_.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb0_ld_.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb0_ld_.NUMBER_BANKS = 1;
defparam lsu_local_bb0_ld_.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb0_ld_.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb0_ld_.USEINPUTFIFO = 0;
defparam lsu_local_bb0_ld_.USECACHING = 0;
defparam lsu_local_bb0_ld_.USEOUTPUTFIFO = 1;
defparam lsu_local_bb0_ld_.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb0_ld_.ADDRSPACE = 1;
defparam lsu_local_bb0_ld_.STYLE = "SIMPLE";

assign local_bb0_ld__inputs_ready = rstag_6to6_bb0_inputTotalDataNum_valid_out;
assign local_bb0_ld__output_regs_ready = (~(local_bb0_ld__wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_ld__valid_out_NO_SHIFT_REG) | ~(local_bb0_ld__stall_in))));
assign rstag_6to6_bb0_inputTotalDataNum_stall_in = (~(local_bb0_ld__wii_reg_NO_SHIFT_REG) & (local_bb0_ld__fu_stall_out | ~((~(local_bb0_ld__wii_reg_NO_SHIFT_REG) & local_bb0_ld__inputs_ready))));
assign local_bb0_ld__causedstall = ((~(local_bb0_ld__wii_reg_NO_SHIFT_REG) & local_bb0_ld__inputs_ready) && (local_bb0_ld__fu_stall_out && !(~(local_bb0_ld__output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_ld__NO_SHIFT_REG <= 'x;
		local_bb0_ld__valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_ld__NO_SHIFT_REG <= 'x;
			local_bb0_ld__valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_ld__output_regs_ready)
			begin
				local_bb0_ld__NO_SHIFT_REG <= local_bb0_ld__lsu_dataout;
				local_bb0_ld__valid_out_NO_SHIFT_REG <= local_bb0_ld__fu_valid_out;
			end
			else
			begin
				if (~(local_bb0_ld__stall_in))
				begin
					local_bb0_ld__valid_out_NO_SHIFT_REG <= local_bb0_ld__wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_ld__wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_ld__wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_ld__fu_valid_out)
			begin
				local_bb0_ld__wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_7to7_bb0_ld__valid_out;
wire rstag_7to7_bb0_ld__stall_in;
wire rstag_7to7_bb0_ld__inputs_ready;
wire rstag_7to7_bb0_ld__stall_local;
 reg rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG;
wire rstag_7to7_bb0_ld__combined_valid;
 reg [31:0] rstag_7to7_bb0_ld__staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_7to7_bb0_ld_;

assign rstag_7to7_bb0_ld__inputs_ready = local_bb0_ld__valid_out_NO_SHIFT_REG;
assign rstag_7to7_bb0_ld_ = (rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG ? rstag_7to7_bb0_ld__staging_reg_NO_SHIFT_REG : local_bb0_ld__NO_SHIFT_REG);
assign rstag_7to7_bb0_ld__combined_valid = (rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG | rstag_7to7_bb0_ld__inputs_ready);
assign rstag_7to7_bb0_ld__valid_out = rstag_7to7_bb0_ld__combined_valid;
assign rstag_7to7_bb0_ld__stall_local = rstag_7to7_bb0_ld__stall_in;
assign local_bb0_ld__stall_in = (|rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_7to7_bb0_ld__staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (start)
		begin
			rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (rstag_7to7_bb0_ld__stall_local)
			begin
				if (~(rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG))
				begin
					rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG <= rstag_7to7_bb0_ld__inputs_ready;
				end
			end
			else
			begin
				rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
			end
		end
		if (~(rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG))
		begin
			rstag_7to7_bb0_ld__staging_reg_NO_SHIFT_REG <= local_bb0_ld__NO_SHIFT_REG;
		end
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg [31:0] lvb_bb0_ld__reg_NO_SHIFT_REG;
 reg [63:0] lvb_bb0_scale_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb0_mul17_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (merge_node_valid_out_4_NO_SHIFT_REG & local_bb0_mul17_valid_out_NO_SHIFT_REG & local_bb0_scale_valid_out_NO_SHIFT_REG & rstag_7to7_bb0_ld__valid_out);
assign branch_var__output_regs_ready = (~(stall_in) | ~(branch_node_valid_out_NO_SHIFT_REG));
assign merge_node_stall_in_4 = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb0_mul17_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb0_scale_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rstag_7to7_bb0_ld__stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_bb0_ld_ = lvb_bb0_ld__reg_NO_SHIFT_REG;
assign lvb_bb0_scale = lvb_bb0_scale_reg_NO_SHIFT_REG;
assign lvb_bb0_mul17 = lvb_bb0_mul17_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0 = lvb_input_global_id_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1 = lvb_input_global_id_1_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2 = lvb_input_global_id_2_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id = lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;
assign combined_branch_stall_in_signal = stall_in;
assign valid_out = branch_node_valid_out_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
		lvb_bb0_ld__reg_NO_SHIFT_REG <= 'x;
		lvb_bb0_scale_reg_NO_SHIFT_REG <= 'x;
		lvb_bb0_mul17_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_bb0_ld__reg_NO_SHIFT_REG <= rstag_7to7_bb0_ld_;
			lvb_bb0_scale_reg_NO_SHIFT_REG <= (local_bb0_scale_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFC00);
			lvb_bb0_mul17_reg_NO_SHIFT_REG <= local_bb0_mul17;
			lvb_input_global_id_0_reg_NO_SHIFT_REG <= local_lvm_input_global_id_0_NO_SHIFT_REG;
			lvb_input_global_id_1_reg_NO_SHIFT_REG <= local_lvm_input_global_id_1_NO_SHIFT_REG;
			lvb_input_global_id_2_reg_NO_SHIFT_REG <= local_lvm_input_global_id_2_NO_SHIFT_REG;
			lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module dataLayer_basic_block_1
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_global_size_1,
		input [31:0] 		input_global_size_2,
		input [31:0] 		input_wii_ld_,
		input [63:0] 		input_wii_scale,
		input [31:0] 		input_wii_mul17,
		input 		valid_in,
		output 		stall_out,
		input [31:0] 		input_global_id_0,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out,
		input 		stall_in,
		output [31:0] 		lvb_bb1_c4_exe1,
		output 		lvb_bb1_c4_exe2,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		input 		start
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_0_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_global_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_global_id_0_staging_reg_NO_SHIFT_REG <= input_global_id_0;
				input_global_id_1_staging_reg_NO_SHIFT_REG <= input_global_id_1;
				input_global_id_2_staging_reg_NO_SHIFT_REG <= input_global_id_2;
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(*)
begin
	merge_node_valid_out_1_NO_SHIFT_REG = merge_node_valid_out_0_NO_SHIFT_REG;
	merge_node_valid_out_2_NO_SHIFT_REG = merge_node_valid_out_0_NO_SHIFT_REG;
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1_c1_eni1_stall_local;
wire [127:0] local_bb1_c1_eni1;

assign local_bb1_c1_eni1[31:0] = 32'bx;
assign local_bb1_c1_eni1[63:32] = local_lvm_input_global_id_0_NO_SHIFT_REG;
assign local_bb1_c1_eni1[127:64] = 64'bx;

// Register node:
//  * latency = 8
//  * capacity = 8
 logic rnode_1to9_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to9_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to9_input_acl_hw_wg_id_0_NO_SHIFT_REG;
 logic rnode_1to9_input_acl_hw_wg_id_0_reg_9_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to9_input_acl_hw_wg_id_0_reg_9_NO_SHIFT_REG;
 logic rnode_1to9_input_acl_hw_wg_id_0_valid_out_reg_9_NO_SHIFT_REG;
 logic rnode_1to9_input_acl_hw_wg_id_0_stall_in_reg_9_NO_SHIFT_REG;
 logic rnode_1to9_input_acl_hw_wg_id_0_stall_out_reg_9_NO_SHIFT_REG;

acl_data_fifo rnode_1to9_input_acl_hw_wg_id_0_reg_9_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to9_input_acl_hw_wg_id_0_reg_9_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to9_input_acl_hw_wg_id_0_stall_in_reg_9_NO_SHIFT_REG),
	.valid_out(rnode_1to9_input_acl_hw_wg_id_0_valid_out_reg_9_NO_SHIFT_REG),
	.stall_out(rnode_1to9_input_acl_hw_wg_id_0_stall_out_reg_9_NO_SHIFT_REG),
	.data_in(local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG),
	.data_out(rnode_1to9_input_acl_hw_wg_id_0_reg_9_NO_SHIFT_REG)
);

defparam rnode_1to9_input_acl_hw_wg_id_0_reg_9_fifo.DEPTH = 9;
defparam rnode_1to9_input_acl_hw_wg_id_0_reg_9_fifo.DATA_WIDTH = 32;
defparam rnode_1to9_input_acl_hw_wg_id_0_reg_9_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to9_input_acl_hw_wg_id_0_reg_9_fifo.IMPL = "ram_plus_reg";

assign rnode_1to9_input_acl_hw_wg_id_0_reg_9_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_3_NO_SHIFT_REG;
assign merge_node_stall_in_3 = rnode_1to9_input_acl_hw_wg_id_0_stall_out_reg_9_NO_SHIFT_REG;
assign rnode_1to9_input_acl_hw_wg_id_0_NO_SHIFT_REG = rnode_1to9_input_acl_hw_wg_id_0_reg_9_NO_SHIFT_REG;
assign rnode_1to9_input_acl_hw_wg_id_0_stall_in_reg_9_NO_SHIFT_REG = rnode_1to9_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG;
assign rnode_1to9_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG = rnode_1to9_input_acl_hw_wg_id_0_valid_out_reg_9_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb1_c1_eni2_stall_local;
wire [127:0] local_bb1_c1_eni2;

assign local_bb1_c1_eni2[63:0] = local_bb1_c1_eni1[63:0];
assign local_bb1_c1_eni2[95:64] = local_lvm_input_global_id_1_NO_SHIFT_REG;
assign local_bb1_c1_eni2[127:96] = local_bb1_c1_eni1[127:96];

// This section implements an unregistered operation.
// 
wire local_bb1_c1_eni3_valid_out;
wire local_bb1_c1_eni3_stall_in;
wire local_bb1_c1_eni3_inputs_ready;
wire local_bb1_c1_eni3_stall_local;
wire [127:0] local_bb1_c1_eni3;

assign local_bb1_c1_eni3_inputs_ready = (merge_node_valid_out_0_NO_SHIFT_REG & merge_node_valid_out_1_NO_SHIFT_REG & merge_node_valid_out_2_NO_SHIFT_REG);
assign local_bb1_c1_eni3[95:0] = local_bb1_c1_eni2[95:0];
assign local_bb1_c1_eni3[127:96] = local_lvm_input_global_id_2_NO_SHIFT_REG;
assign local_bb1_c1_eni3_valid_out = local_bb1_c1_eni3_inputs_ready;
assign local_bb1_c1_eni3_stall_local = local_bb1_c1_eni3_stall_in;
assign merge_node_stall_in_0 = (local_bb1_c1_eni3_stall_local | ~(local_bb1_c1_eni3_inputs_ready));
assign merge_node_stall_in_1 = (local_bb1_c1_eni3_stall_local | ~(local_bb1_c1_eni3_inputs_ready));
assign merge_node_stall_in_2 = (local_bb1_c1_eni3_stall_local | ~(local_bb1_c1_eni3_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb1_c1_enter_c1_eni3_valid_out_0;
wire local_bb1_c1_enter_c1_eni3_stall_in_0;
wire local_bb1_c1_enter_c1_eni3_valid_out_1;
wire local_bb1_c1_enter_c1_eni3_stall_in_1;
wire local_bb1_c1_enter_c1_eni3_valid_out_2;
wire local_bb1_c1_enter_c1_eni3_stall_in_2;
wire local_bb1_c1_enter_c1_eni3_valid_out_3;
wire local_bb1_c1_enter_c1_eni3_stall_in_3;
wire local_bb1_c1_enter_c1_eni3_inputs_ready;
wire local_bb1_c1_enter_c1_eni3_stall_local;
wire local_bb1_c1_enter_c1_eni3_input_accepted;
wire [127:0] local_bb1_c1_enter_c1_eni3;
wire local_bb1_c1_exit_c1_exi3_enable;
wire local_bb1_c1_exit_c1_exi3_entry_stall;
wire local_bb1_c1_enter_c1_eni3_valid_bit;
wire local_bb1_c1_exit_c1_exi3_output_regs_ready;
wire local_bb1_c1_exit_c1_exi3_valid_in;
wire local_bb1_c1_exit_c1_exi3_phases;
wire local_bb1_c1_enter_c1_eni3_inc_pipelined_thread;
wire local_bb1_c1_enter_c1_eni3_dec_pipelined_thread;
wire local_bb1_c1_enter_c1_eni3_fu_stall_out;

assign local_bb1_c1_enter_c1_eni3_inputs_ready = local_bb1_c1_eni3_valid_out;
assign local_bb1_c1_enter_c1_eni3 = local_bb1_c1_eni3;
assign local_bb1_c1_enter_c1_eni3_input_accepted = (local_bb1_c1_enter_c1_eni3_inputs_ready && !(local_bb1_c1_exit_c1_exi3_entry_stall));
assign local_bb1_c1_enter_c1_eni3_valid_bit = local_bb1_c1_enter_c1_eni3_input_accepted;
assign local_bb1_c1_enter_c1_eni3_inc_pipelined_thread = 1'b1;
assign local_bb1_c1_enter_c1_eni3_dec_pipelined_thread = ~(1'b0);
assign local_bb1_c1_enter_c1_eni3_fu_stall_out = (~(local_bb1_c1_enter_c1_eni3_inputs_ready) | local_bb1_c1_exit_c1_exi3_entry_stall);
assign local_bb1_c1_enter_c1_eni3_stall_local = (local_bb1_c1_enter_c1_eni3_stall_in_0 | local_bb1_c1_enter_c1_eni3_stall_in_1 | local_bb1_c1_enter_c1_eni3_stall_in_2 | local_bb1_c1_enter_c1_eni3_stall_in_3);
assign local_bb1_c1_enter_c1_eni3_valid_out_0 = local_bb1_c1_enter_c1_eni3_inputs_ready;
assign local_bb1_c1_enter_c1_eni3_valid_out_1 = local_bb1_c1_enter_c1_eni3_inputs_ready;
assign local_bb1_c1_enter_c1_eni3_valid_out_2 = local_bb1_c1_enter_c1_eni3_inputs_ready;
assign local_bb1_c1_enter_c1_eni3_valid_out_3 = local_bb1_c1_enter_c1_eni3_inputs_ready;
assign local_bb1_c1_eni3_stall_in = (|local_bb1_c1_enter_c1_eni3_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb1_c1_ene1_valid_out;
wire local_bb1_c1_ene1_stall_in;
wire local_bb1_c1_ene1_inputs_ready;
wire local_bb1_c1_ene1_stall_local;
wire [31:0] local_bb1_c1_ene1;

assign local_bb1_c1_ene1_inputs_ready = local_bb1_c1_enter_c1_eni3_valid_out_0;
assign local_bb1_c1_ene1[31:0] = local_bb1_c1_enter_c1_eni3[63:32];
assign local_bb1_c1_ene1_valid_out = 1'b1;
assign local_bb1_c1_enter_c1_eni3_stall_in_0 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c1_ene2_valid_out;
wire local_bb1_c1_ene2_stall_in;
wire local_bb1_c1_ene2_inputs_ready;
wire local_bb1_c1_ene2_stall_local;
wire [31:0] local_bb1_c1_ene2;

assign local_bb1_c1_ene2_inputs_ready = local_bb1_c1_enter_c1_eni3_valid_out_1;
assign local_bb1_c1_ene2[31:0] = local_bb1_c1_enter_c1_eni3[95:64];
assign local_bb1_c1_ene2_valid_out = 1'b1;
assign local_bb1_c1_enter_c1_eni3_stall_in_1 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c1_ene3_valid_out;
wire local_bb1_c1_ene3_stall_in;
wire local_bb1_c1_ene3_inputs_ready;
wire local_bb1_c1_ene3_stall_local;
wire [31:0] local_bb1_c1_ene3;

assign local_bb1_c1_ene3_inputs_ready = local_bb1_c1_enter_c1_eni3_valid_out_2;
assign local_bb1_c1_ene3[31:0] = local_bb1_c1_enter_c1_eni3[127:96];
assign local_bb1_c1_ene3_valid_out = 1'b1;
assign local_bb1_c1_enter_c1_eni3_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire SFC_1_VALID_1_1_0_valid_out;
wire SFC_1_VALID_1_1_0_stall_in;
wire SFC_1_VALID_1_1_0_inputs_ready;
wire SFC_1_VALID_1_1_0_stall_local;
wire SFC_1_VALID_1_1_0;

assign SFC_1_VALID_1_1_0_inputs_ready = local_bb1_c1_enter_c1_eni3_valid_out_3;
assign SFC_1_VALID_1_1_0 = local_bb1_c1_enter_c1_eni3_valid_bit;
assign SFC_1_VALID_1_1_0_valid_out = 1'b1;
assign local_bb1_c1_enter_c1_eni3_stall_in_3 = 1'b0;

// This section implements a registered operation.
// 
wire local_bb1_var__inputs_ready;
 reg local_bb1_var__valid_out_NO_SHIFT_REG;
wire local_bb1_var__stall_in;
wire local_bb1_var__output_regs_ready;
wire [31:0] local_bb1_var_;
 reg local_bb1_var__valid_pipe_0_NO_SHIFT_REG;
 reg local_bb1_var__valid_pipe_1_NO_SHIFT_REG;
wire local_bb1_var__causedstall;

acl_int_mult int_module_local_bb1_var_ (
	.clock(clock),
	.dataa(local_bb1_c1_ene1),
	.datab(input_global_size_1),
	.enable(local_bb1_var__output_regs_ready),
	.result(local_bb1_var_)
);

defparam int_module_local_bb1_var_.INPUT1_WIDTH = 32;
defparam int_module_local_bb1_var_.INPUT2_WIDTH = 32;
defparam int_module_local_bb1_var_.OUTPUT_WIDTH = 32;
defparam int_module_local_bb1_var_.LATENCY = 3;
defparam int_module_local_bb1_var_.SIGNED = 0;

assign local_bb1_var__inputs_ready = 1'b1;
assign local_bb1_var__output_regs_ready = local_bb1_c1_exit_c1_exi3_enable;
assign local_bb1_c1_ene1_stall_in = 1'b0;
assign local_bb1_var__causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c1_exit_c1_exi3_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb1_var__valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb1_var__valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb1_var__output_regs_ready)
		begin
			local_bb1_var__valid_pipe_0_NO_SHIFT_REG <= 1'b1;
			local_bb1_var__valid_pipe_1_NO_SHIFT_REG <= local_bb1_var__valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb1_var__valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb1_var__output_regs_ready)
		begin
			local_bb1_var__valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb1_var__stall_in))
			begin
				local_bb1_var__valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb1_c1_ene2_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene2_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb1_c1_ene2_0_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene2_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb1_c1_ene2_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene2_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene2_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene2_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb1_c1_ene2_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb1_c1_ene2_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb1_c1_ene2_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb1_c1_ene2_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb1_c1_ene2_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb1_c1_ene2),
	.data_out(rnode_1to2_bb1_c1_ene2_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb1_c1_ene2_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb1_c1_ene2_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb1_c1_ene2_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb1_c1_ene2_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb1_c1_ene2_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb1_c1_ene2_stall_in = 1'b0;
assign rnode_1to2_bb1_c1_ene2_0_NO_SHIFT_REG = rnode_1to2_bb1_c1_ene2_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb1_c1_ene2_0_stall_in_reg_2_NO_SHIFT_REG = ~(local_bb1_c1_exit_c1_exi3_enable);
assign rnode_1to2_bb1_c1_ene2_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb1_c1_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb1_c1_ene3_0_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene3_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb1_c1_ene3_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene3_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene3_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene3_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb1_c1_ene3_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb1_c1_ene3_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb1_c1_ene3_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb1_c1_ene3_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb1_c1_ene3_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb1_c1_ene3),
	.data_out(rnode_1to2_bb1_c1_ene3_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb1_c1_ene3_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb1_c1_ene3_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb1_c1_ene3_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb1_c1_ene3_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb1_c1_ene3_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb1_c1_ene3_stall_in = 1'b0;
assign rnode_1to2_bb1_c1_ene3_0_NO_SHIFT_REG = rnode_1to2_bb1_c1_ene3_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb1_c1_ene3_0_stall_in_reg_2_NO_SHIFT_REG = ~(local_bb1_c1_exit_c1_exi3_enable);
assign rnode_1to2_bb1_c1_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_1_VALID_1_2_0_inputs_ready;
 reg SFC_1_VALID_1_2_0_valid_out_NO_SHIFT_REG;
wire SFC_1_VALID_1_2_0_stall_in;
wire SFC_1_VALID_1_2_0_output_regs_ready;
 reg SFC_1_VALID_1_2_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_1_VALID_1_2_0_causedstall;

assign SFC_1_VALID_1_2_0_inputs_ready = 1'b1;
assign SFC_1_VALID_1_2_0_output_regs_ready = local_bb1_c1_exit_c1_exi3_enable;
assign SFC_1_VALID_1_1_0_stall_in = 1'b0;
assign SFC_1_VALID_1_2_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c1_exit_c1_exi3_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_1_VALID_1_2_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_1_VALID_1_2_0_output_regs_ready)
		begin
			SFC_1_VALID_1_2_0_NO_SHIFT_REG <= SFC_1_VALID_1_1_0;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1_c1_exi1_stall_local;
wire [127:0] local_bb1_c1_exi1;

assign local_bb1_c1_exi1[31:0] = 32'bx;
assign local_bb1_c1_exi1[63:32] = local_bb1_var_;
assign local_bb1_c1_exi1[127:64] = 64'bx;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb1_c1_ene2_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene2_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb1_c1_ene2_0_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene2_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb1_c1_ene2_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene2_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene2_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene2_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb1_c1_ene2_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb1_c1_ene2_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb1_c1_ene2_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb1_c1_ene2_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb1_c1_ene2_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb1_c1_ene2_0_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb1_c1_ene2_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb1_c1_ene2_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb1_c1_ene2_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb1_c1_ene2_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb1_c1_ene2_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb1_c1_ene2_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb1_c1_ene2_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb1_c1_ene2_0_NO_SHIFT_REG = rnode_2to3_bb1_c1_ene2_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb1_c1_ene2_0_stall_in_reg_3_NO_SHIFT_REG = ~(local_bb1_c1_exit_c1_exi3_enable);
assign rnode_2to3_bb1_c1_ene2_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb1_c1_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb1_c1_ene3_0_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene3_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb1_c1_ene3_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene3_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene3_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene3_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb1_c1_ene3_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb1_c1_ene3_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb1_c1_ene3_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb1_c1_ene3_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb1_c1_ene3_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb1_c1_ene3_0_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb1_c1_ene3_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb1_c1_ene3_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb1_c1_ene3_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb1_c1_ene3_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb1_c1_ene3_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb1_c1_ene3_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb1_c1_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb1_c1_ene3_0_NO_SHIFT_REG = rnode_2to3_bb1_c1_ene3_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb1_c1_ene3_0_stall_in_reg_3_NO_SHIFT_REG = ~(local_bb1_c1_exit_c1_exi3_enable);
assign rnode_2to3_bb1_c1_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_1_VALID_2_3_0_inputs_ready;
 reg SFC_1_VALID_2_3_0_valid_out_NO_SHIFT_REG;
wire SFC_1_VALID_2_3_0_stall_in;
wire SFC_1_VALID_2_3_0_output_regs_ready;
 reg SFC_1_VALID_2_3_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_1_VALID_2_3_0_causedstall;

assign SFC_1_VALID_2_3_0_inputs_ready = 1'b1;
assign SFC_1_VALID_2_3_0_output_regs_ready = local_bb1_c1_exit_c1_exi3_enable;
assign SFC_1_VALID_1_2_0_stall_in = 1'b0;
assign SFC_1_VALID_2_3_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c1_exit_c1_exi3_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_1_VALID_2_3_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_1_VALID_2_3_0_output_regs_ready)
		begin
			SFC_1_VALID_2_3_0_NO_SHIFT_REG <= SFC_1_VALID_1_2_0_NO_SHIFT_REG;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb1_c1_ene2_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene2_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb1_c1_ene2_0_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene2_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb1_c1_ene2_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene2_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene2_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene2_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb1_c1_ene2_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb1_c1_ene2_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb1_c1_ene2_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb1_c1_ene2_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb1_c1_ene2_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb1_c1_ene2_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb1_c1_ene2_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb1_c1_ene2_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb1_c1_ene2_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb1_c1_ene2_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb1_c1_ene2_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb1_c1_ene2_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb1_c1_ene2_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb1_c1_ene2_0_NO_SHIFT_REG = rnode_3to4_bb1_c1_ene2_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb1_c1_ene2_0_stall_in_reg_4_NO_SHIFT_REG = ~(local_bb1_c1_exit_c1_exi3_enable);
assign rnode_3to4_bb1_c1_ene2_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb1_c1_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb1_c1_ene3_0_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene3_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb1_c1_ene3_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene3_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene3_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene3_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb1_c1_ene3_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb1_c1_ene3_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb1_c1_ene3_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb1_c1_ene3_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb1_c1_ene3_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb1_c1_ene3_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb1_c1_ene3_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb1_c1_ene3_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb1_c1_ene3_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb1_c1_ene3_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb1_c1_ene3_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb1_c1_ene3_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb1_c1_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb1_c1_ene3_0_NO_SHIFT_REG = rnode_3to4_bb1_c1_ene3_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb1_c1_ene3_0_stall_in_reg_4_NO_SHIFT_REG = ~(local_bb1_c1_exit_c1_exi3_enable);
assign rnode_3to4_bb1_c1_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_1_VALID_3_4_0_inputs_ready;
 reg SFC_1_VALID_3_4_0_valid_out_NO_SHIFT_REG;
wire SFC_1_VALID_3_4_0_stall_in;
wire SFC_1_VALID_3_4_0_output_regs_ready;
 reg SFC_1_VALID_3_4_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_1_VALID_3_4_0_causedstall;

assign SFC_1_VALID_3_4_0_inputs_ready = 1'b1;
assign SFC_1_VALID_3_4_0_output_regs_ready = local_bb1_c1_exit_c1_exi3_enable;
assign SFC_1_VALID_2_3_0_stall_in = 1'b0;
assign SFC_1_VALID_3_4_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c1_exit_c1_exi3_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_1_VALID_3_4_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_1_VALID_3_4_0_output_regs_ready)
		begin
			SFC_1_VALID_3_4_0_NO_SHIFT_REG <= SFC_1_VALID_2_3_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1_c1_exi2_stall_local;
wire [127:0] local_bb1_c1_exi2;

assign local_bb1_c1_exi2[63:0] = local_bb1_c1_exi1[63:0];
assign local_bb1_c1_exi2[95:64] = rnode_3to4_bb1_c1_ene2_0_NO_SHIFT_REG;
assign local_bb1_c1_exi2[127:96] = local_bb1_c1_exi1[127:96];

// This section implements an unregistered operation.
// 
wire local_bb1_c1_exi3_valid_out;
wire local_bb1_c1_exi3_stall_in;
wire local_bb1_c1_exi3_inputs_ready;
wire local_bb1_c1_exi3_stall_local;
wire [127:0] local_bb1_c1_exi3;

assign local_bb1_c1_exi3_inputs_ready = (local_bb1_var__valid_out_NO_SHIFT_REG & rnode_3to4_bb1_c1_ene2_0_valid_out_NO_SHIFT_REG & rnode_3to4_bb1_c1_ene3_0_valid_out_NO_SHIFT_REG);
assign local_bb1_c1_exi3[95:0] = local_bb1_c1_exi2[95:0];
assign local_bb1_c1_exi3[127:96] = rnode_3to4_bb1_c1_ene3_0_NO_SHIFT_REG;
assign local_bb1_c1_exi3_valid_out = 1'b1;
assign local_bb1_var__stall_in = 1'b0;
assign rnode_3to4_bb1_c1_ene2_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb1_c1_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c1_exit_c1_exi3_valid_out;
wire local_bb1_c1_exit_c1_exi3_stall_in;
wire local_bb1_c1_exit_c1_exi3_inputs_ready;
wire local_bb1_c1_exit_c1_exi3_stall_local;
wire [127:0] local_bb1_c1_exit_c1_exi3;
wire local_bb1_c1_exit_c1_exi3_valid;
wire local_bb1_c1_exit_c1_exi3_fu_stall_out;

acl_enable_sink local_bb1_c1_exit_c1_exi3_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb1_c1_exi3),
	.data_out(local_bb1_c1_exit_c1_exi3),
	.input_accepted(local_bb1_c1_enter_c1_eni3_input_accepted),
	.valid_out(local_bb1_c1_exit_c1_exi3_valid),
	.stall_in(local_bb1_c1_exit_c1_exi3_stall_local),
	.enable(local_bb1_c1_exit_c1_exi3_enable),
	.valid_in(local_bb1_c1_exit_c1_exi3_valid_in),
	.stall_entry(local_bb1_c1_exit_c1_exi3_entry_stall),
	.inc_pipelined_thread(local_bb1_c1_enter_c1_eni3_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb1_c1_enter_c1_eni3_dec_pipelined_thread)
);

defparam local_bb1_c1_exit_c1_exi3_instance.DATA_WIDTH = 128;
defparam local_bb1_c1_exit_c1_exi3_instance.PIPELINE_DEPTH = 3;
defparam local_bb1_c1_exit_c1_exi3_instance.SCHEDULEII = 1;
defparam local_bb1_c1_exit_c1_exi3_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb1_c1_exit_c1_exi3_inputs_ready = (local_bb1_c1_exi3_valid_out & SFC_1_VALID_3_4_0_valid_out_NO_SHIFT_REG);
assign local_bb1_c1_exit_c1_exi3_valid_in = SFC_1_VALID_3_4_0_NO_SHIFT_REG;
assign local_bb1_c1_exit_c1_exi3_fu_stall_out = ~(local_bb1_c1_exit_c1_exi3_enable);
assign local_bb1_c1_exit_c1_exi3_valid_out = local_bb1_c1_exit_c1_exi3_valid;
assign local_bb1_c1_exit_c1_exi3_stall_local = local_bb1_c1_exit_c1_exi3_stall_in;
assign local_bb1_c1_exi3_stall_in = 1'b0;
assign SFC_1_VALID_3_4_0_stall_in = 1'b0;

// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_0_NO_SHIFT_REG;
 logic [127:0] rnode_4to4_bb1_c1_exit_c1_exi3_0_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_1_NO_SHIFT_REG;
 logic [127:0] rnode_4to4_bb1_c1_exit_c1_exi3_1_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_2_NO_SHIFT_REG;
 logic [127:0] rnode_4to4_bb1_c1_exit_c1_exi3_2_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [127:0] rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_0_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_0_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_0_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_0_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb1_c1_exit_c1_exi3),
	.data_out(rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_fifo.DEPTH = 3;
defparam rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_fifo.DATA_WIDTH = 128;
defparam rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_fifo.IMPL = "zl_reg";

assign rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_inputs_ready_NO_SHIFT_REG = local_bb1_c1_exit_c1_exi3_valid_out;
assign local_bb1_c1_exit_c1_exi3_stall_in = rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_out_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_0_reg_4_NO_SHIFT_REG = (rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_0_NO_SHIFT_REG | rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_1_NO_SHIFT_REG | rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_2_NO_SHIFT_REG);
assign rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_0_NO_SHIFT_REG = rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_1_NO_SHIFT_REG = rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_2_NO_SHIFT_REG = rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb1_c1_exit_c1_exi3_0_NO_SHIFT_REG = rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb1_c1_exit_c1_exi3_1_NO_SHIFT_REG = rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb1_c1_exit_c1_exi3_2_NO_SHIFT_REG = rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb1_c1_exe3_stall_local;
wire [31:0] local_bb1_c1_exe3;

assign local_bb1_c1_exe3[31:0] = rnode_4to4_bb1_c1_exit_c1_exi3_0_NO_SHIFT_REG[127:96];

// This section implements an unregistered operation.
// 
wire local_bb1_c1_exe2_stall_local;
wire [31:0] local_bb1_c1_exe2;

assign local_bb1_c1_exe2[31:0] = rnode_4to4_bb1_c1_exit_c1_exi3_1_NO_SHIFT_REG[95:64];

// This section implements an unregistered operation.
// 
wire local_bb1_c1_exe1_stall_local;
wire [31:0] local_bb1_c1_exe1;

assign local_bb1_c1_exe1[31:0] = rnode_4to4_bb1_c1_exit_c1_exi3_2_NO_SHIFT_REG[63:32];

// This section implements an unregistered operation.
// 
wire local_bb1_c2_eni1_stall_local;
wire [127:0] local_bb1_c2_eni1;

assign local_bb1_c2_eni1[31:0] = 32'bx;
assign local_bb1_c2_eni1[63:32] = local_bb1_c1_exe1;
assign local_bb1_c2_eni1[127:64] = 64'bx;

// This section implements an unregistered operation.
// 
wire local_bb1_c2_eni2_stall_local;
wire [127:0] local_bb1_c2_eni2;

assign local_bb1_c2_eni2[63:0] = local_bb1_c2_eni1[63:0];
assign local_bb1_c2_eni2[95:64] = local_bb1_c1_exe2;
assign local_bb1_c2_eni2[127:96] = local_bb1_c2_eni1[127:96];

// This section implements an unregistered operation.
// 
wire local_bb1_c2_eni3_valid_out;
wire local_bb1_c2_eni3_stall_in;
wire local_bb1_c2_eni3_inputs_ready;
wire local_bb1_c2_eni3_stall_local;
wire [127:0] local_bb1_c2_eni3;

assign local_bb1_c2_eni3_inputs_ready = (rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_0_NO_SHIFT_REG & rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_1_NO_SHIFT_REG & rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_2_NO_SHIFT_REG);
assign local_bb1_c2_eni3[95:0] = local_bb1_c2_eni2[95:0];
assign local_bb1_c2_eni3[127:96] = local_bb1_c1_exe3;
assign local_bb1_c2_eni3_valid_out = local_bb1_c2_eni3_inputs_ready;
assign local_bb1_c2_eni3_stall_local = local_bb1_c2_eni3_stall_in;
assign rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_0_NO_SHIFT_REG = (local_bb1_c2_eni3_stall_local | ~(local_bb1_c2_eni3_inputs_ready));
assign rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_1_NO_SHIFT_REG = (local_bb1_c2_eni3_stall_local | ~(local_bb1_c2_eni3_inputs_ready));
assign rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_2_NO_SHIFT_REG = (local_bb1_c2_eni3_stall_local | ~(local_bb1_c2_eni3_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb1_c2_enter_c2_eni3_valid_out_0;
wire local_bb1_c2_enter_c2_eni3_stall_in_0;
wire local_bb1_c2_enter_c2_eni3_valid_out_1;
wire local_bb1_c2_enter_c2_eni3_stall_in_1;
wire local_bb1_c2_enter_c2_eni3_valid_out_2;
wire local_bb1_c2_enter_c2_eni3_stall_in_2;
wire local_bb1_c2_enter_c2_eni3_valid_out_3;
wire local_bb1_c2_enter_c2_eni3_stall_in_3;
wire local_bb1_c2_enter_c2_eni3_inputs_ready;
wire local_bb1_c2_enter_c2_eni3_stall_local;
wire local_bb1_c2_enter_c2_eni3_input_accepted;
wire [127:0] local_bb1_c2_enter_c2_eni3;
wire local_bb1_c2_exit_c2_exi2_enable;
wire local_bb1_c2_exit_c2_exi2_entry_stall;
wire local_bb1_c2_enter_c2_eni3_valid_bit;
wire local_bb1_c2_exit_c2_exi2_output_regs_ready;
wire local_bb1_c2_exit_c2_exi2_valid_in;
wire local_bb1_c2_exit_c2_exi2_phases;
wire local_bb1_c2_enter_c2_eni3_inc_pipelined_thread;
wire local_bb1_c2_enter_c2_eni3_dec_pipelined_thread;
wire local_bb1_c2_enter_c2_eni3_fu_stall_out;

assign local_bb1_c2_enter_c2_eni3_inputs_ready = local_bb1_c2_eni3_valid_out;
assign local_bb1_c2_enter_c2_eni3 = local_bb1_c2_eni3;
assign local_bb1_c2_enter_c2_eni3_input_accepted = (local_bb1_c2_enter_c2_eni3_inputs_ready && !(local_bb1_c2_exit_c2_exi2_entry_stall));
assign local_bb1_c2_enter_c2_eni3_valid_bit = local_bb1_c2_enter_c2_eni3_input_accepted;
assign local_bb1_c2_enter_c2_eni3_inc_pipelined_thread = 1'b1;
assign local_bb1_c2_enter_c2_eni3_dec_pipelined_thread = ~(1'b0);
assign local_bb1_c2_enter_c2_eni3_fu_stall_out = (~(local_bb1_c2_enter_c2_eni3_inputs_ready) | local_bb1_c2_exit_c2_exi2_entry_stall);
assign local_bb1_c2_enter_c2_eni3_stall_local = (local_bb1_c2_enter_c2_eni3_stall_in_0 | local_bb1_c2_enter_c2_eni3_stall_in_1 | local_bb1_c2_enter_c2_eni3_stall_in_2 | local_bb1_c2_enter_c2_eni3_stall_in_3);
assign local_bb1_c2_enter_c2_eni3_valid_out_0 = local_bb1_c2_enter_c2_eni3_inputs_ready;
assign local_bb1_c2_enter_c2_eni3_valid_out_1 = local_bb1_c2_enter_c2_eni3_inputs_ready;
assign local_bb1_c2_enter_c2_eni3_valid_out_2 = local_bb1_c2_enter_c2_eni3_inputs_ready;
assign local_bb1_c2_enter_c2_eni3_valid_out_3 = local_bb1_c2_enter_c2_eni3_inputs_ready;
assign local_bb1_c2_eni3_stall_in = (|local_bb1_c2_enter_c2_eni3_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb1_c2_ene1_stall_local;
wire [31:0] local_bb1_c2_ene1;

assign local_bb1_c2_ene1[31:0] = local_bb1_c2_enter_c2_eni3[63:32];

// This section implements an unregistered operation.
// 
wire local_bb1_c2_ene2_stall_local;
wire [31:0] local_bb1_c2_ene2;

assign local_bb1_c2_ene2[31:0] = local_bb1_c2_enter_c2_eni3[95:64];

// This section implements an unregistered operation.
// 
wire local_bb1_c2_ene3_valid_out;
wire local_bb1_c2_ene3_stall_in;
wire local_bb1_c2_ene3_inputs_ready;
wire local_bb1_c2_ene3_stall_local;
wire [31:0] local_bb1_c2_ene3;

assign local_bb1_c2_ene3_inputs_ready = local_bb1_c2_enter_c2_eni3_valid_out_2;
assign local_bb1_c2_ene3[31:0] = local_bb1_c2_enter_c2_eni3[127:96];
assign local_bb1_c2_ene3_valid_out = 1'b1;
assign local_bb1_c2_enter_c2_eni3_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire SFC_2_VALID_4_4_0_valid_out;
wire SFC_2_VALID_4_4_0_stall_in;
wire SFC_2_VALID_4_4_0_inputs_ready;
wire SFC_2_VALID_4_4_0_stall_local;
wire SFC_2_VALID_4_4_0;

assign SFC_2_VALID_4_4_0_inputs_ready = local_bb1_c2_enter_c2_eni3_valid_out_3;
assign SFC_2_VALID_4_4_0 = local_bb1_c2_enter_c2_eni3_valid_bit;
assign SFC_2_VALID_4_4_0_valid_out = 1'b1;
assign local_bb1_c2_enter_c2_eni3_stall_in_3 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_var__u0_valid_out;
wire local_bb1_var__u0_stall_in;
wire local_bb1_var__u0_inputs_ready;
wire local_bb1_var__u0_stall_local;
wire [31:0] local_bb1_var__u0;

assign local_bb1_var__u0_inputs_ready = (local_bb1_c2_enter_c2_eni3_valid_out_0 & local_bb1_c2_enter_c2_eni3_valid_out_1);
assign local_bb1_var__u0 = (local_bb1_c2_ene1 + local_bb1_c2_ene2);
assign local_bb1_var__u0_valid_out = 1'b1;
assign local_bb1_c2_enter_c2_eni3_stall_in_0 = 1'b0;
assign local_bb1_c2_enter_c2_eni3_stall_in_1 = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb1_c2_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb1_c2_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb1_c2_ene3_0_NO_SHIFT_REG;
 logic rnode_4to5_bb1_c2_ene3_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb1_c2_ene3_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb1_c2_ene3_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb1_c2_ene3_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb1_c2_ene3_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb1_c2_ene3_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb1_c2_ene3_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb1_c2_ene3_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb1_c2_ene3_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb1_c2_ene3_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb1_c2_ene3),
	.data_out(rnode_4to5_bb1_c2_ene3_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb1_c2_ene3_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb1_c2_ene3_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_4to5_bb1_c2_ene3_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb1_c2_ene3_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb1_c2_ene3_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb1_c2_ene3_stall_in = 1'b0;
assign rnode_4to5_bb1_c2_ene3_0_NO_SHIFT_REG = rnode_4to5_bb1_c2_ene3_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb1_c2_ene3_0_stall_in_reg_5_NO_SHIFT_REG = ~(local_bb1_c2_exit_c2_exi2_enable);
assign rnode_4to5_bb1_c2_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_2_VALID_4_5_0_inputs_ready;
 reg SFC_2_VALID_4_5_0_valid_out_NO_SHIFT_REG;
wire SFC_2_VALID_4_5_0_stall_in;
wire SFC_2_VALID_4_5_0_output_regs_ready;
 reg SFC_2_VALID_4_5_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_2_VALID_4_5_0_causedstall;

assign SFC_2_VALID_4_5_0_inputs_ready = 1'b1;
assign SFC_2_VALID_4_5_0_output_regs_ready = local_bb1_c2_exit_c2_exi2_enable;
assign SFC_2_VALID_4_4_0_stall_in = 1'b0;
assign SFC_2_VALID_4_5_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c2_exit_c2_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_2_VALID_4_5_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_2_VALID_4_5_0_output_regs_ready)
		begin
			SFC_2_VALID_4_5_0_NO_SHIFT_REG <= SFC_2_VALID_4_4_0;
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb1_var__u1_inputs_ready;
 reg local_bb1_var__u1_valid_out_NO_SHIFT_REG;
wire local_bb1_var__u1_stall_in;
wire local_bb1_var__u1_output_regs_ready;
wire [31:0] local_bb1_var__u1;
 reg local_bb1_var__u1_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb1_var__u1_valid_pipe_1_NO_SHIFT_REG;
wire local_bb1_var__u1_causedstall;

acl_int_mult int_module_local_bb1_var__u1 (
	.clock(clock),
	.dataa(local_bb1_var__u0),
	.datab(input_global_size_2),
	.enable(local_bb1_var__u1_output_regs_ready),
	.result(local_bb1_var__u1)
);

defparam int_module_local_bb1_var__u1.INPUT1_WIDTH = 32;
defparam int_module_local_bb1_var__u1.INPUT2_WIDTH = 32;
defparam int_module_local_bb1_var__u1.OUTPUT_WIDTH = 32;
defparam int_module_local_bb1_var__u1.LATENCY = 3;
defparam int_module_local_bb1_var__u1.SIGNED = 0;

assign local_bb1_var__u1_inputs_ready = 1'b1;
assign local_bb1_var__u1_output_regs_ready = local_bb1_c2_exit_c2_exi2_enable;
assign local_bb1_var__u0_stall_in = 1'b0;
assign local_bb1_var__u1_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c2_exit_c2_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb1_var__u1_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb1_var__u1_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb1_var__u1_output_regs_ready)
		begin
			local_bb1_var__u1_valid_pipe_0_NO_SHIFT_REG <= 1'b1;
			local_bb1_var__u1_valid_pipe_1_NO_SHIFT_REG <= local_bb1_var__u1_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb1_var__u1_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb1_var__u1_output_regs_ready)
		begin
			local_bb1_var__u1_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb1_var__u1_stall_in))
			begin
				local_bb1_var__u1_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_5to6_bb1_c2_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_5to6_bb1_c2_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_5to6_bb1_c2_ene3_0_NO_SHIFT_REG;
 logic rnode_5to6_bb1_c2_ene3_0_reg_6_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_5to6_bb1_c2_ene3_0_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb1_c2_ene3_0_valid_out_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb1_c2_ene3_0_stall_in_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb1_c2_ene3_0_stall_out_reg_6_NO_SHIFT_REG;

acl_data_fifo rnode_5to6_bb1_c2_ene3_0_reg_6_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_5to6_bb1_c2_ene3_0_reg_6_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_5to6_bb1_c2_ene3_0_stall_in_reg_6_NO_SHIFT_REG),
	.valid_out(rnode_5to6_bb1_c2_ene3_0_valid_out_reg_6_NO_SHIFT_REG),
	.stall_out(rnode_5to6_bb1_c2_ene3_0_stall_out_reg_6_NO_SHIFT_REG),
	.data_in(rnode_4to5_bb1_c2_ene3_0_NO_SHIFT_REG),
	.data_out(rnode_5to6_bb1_c2_ene3_0_reg_6_NO_SHIFT_REG)
);

defparam rnode_5to6_bb1_c2_ene3_0_reg_6_fifo.DEPTH = 1;
defparam rnode_5to6_bb1_c2_ene3_0_reg_6_fifo.DATA_WIDTH = 32;
defparam rnode_5to6_bb1_c2_ene3_0_reg_6_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_5to6_bb1_c2_ene3_0_reg_6_fifo.IMPL = "shift_reg";

assign rnode_5to6_bb1_c2_ene3_0_reg_6_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to5_bb1_c2_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_5to6_bb1_c2_ene3_0_NO_SHIFT_REG = rnode_5to6_bb1_c2_ene3_0_reg_6_NO_SHIFT_REG;
assign rnode_5to6_bb1_c2_ene3_0_stall_in_reg_6_NO_SHIFT_REG = ~(local_bb1_c2_exit_c2_exi2_enable);
assign rnode_5to6_bb1_c2_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_2_VALID_5_6_0_inputs_ready;
 reg SFC_2_VALID_5_6_0_valid_out_NO_SHIFT_REG;
wire SFC_2_VALID_5_6_0_stall_in;
wire SFC_2_VALID_5_6_0_output_regs_ready;
 reg SFC_2_VALID_5_6_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_2_VALID_5_6_0_causedstall;

assign SFC_2_VALID_5_6_0_inputs_ready = 1'b1;
assign SFC_2_VALID_5_6_0_output_regs_ready = local_bb1_c2_exit_c2_exi2_enable;
assign SFC_2_VALID_4_5_0_stall_in = 1'b0;
assign SFC_2_VALID_5_6_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c2_exit_c2_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_2_VALID_5_6_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_2_VALID_5_6_0_output_regs_ready)
		begin
			SFC_2_VALID_5_6_0_NO_SHIFT_REG <= SFC_2_VALID_4_5_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1_c2_exi1_stall_local;
wire [95:0] local_bb1_c2_exi1;

assign local_bb1_c2_exi1[31:0] = 32'bx;
assign local_bb1_c2_exi1[63:32] = local_bb1_var__u1;
assign local_bb1_c2_exi1[95:64] = 32'bx;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_6to7_bb1_c2_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_6to7_bb1_c2_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_6to7_bb1_c2_ene3_0_NO_SHIFT_REG;
 logic rnode_6to7_bb1_c2_ene3_0_reg_7_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_6to7_bb1_c2_ene3_0_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb1_c2_ene3_0_valid_out_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb1_c2_ene3_0_stall_in_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb1_c2_ene3_0_stall_out_reg_7_NO_SHIFT_REG;

acl_data_fifo rnode_6to7_bb1_c2_ene3_0_reg_7_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_6to7_bb1_c2_ene3_0_reg_7_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_6to7_bb1_c2_ene3_0_stall_in_reg_7_NO_SHIFT_REG),
	.valid_out(rnode_6to7_bb1_c2_ene3_0_valid_out_reg_7_NO_SHIFT_REG),
	.stall_out(rnode_6to7_bb1_c2_ene3_0_stall_out_reg_7_NO_SHIFT_REG),
	.data_in(rnode_5to6_bb1_c2_ene3_0_NO_SHIFT_REG),
	.data_out(rnode_6to7_bb1_c2_ene3_0_reg_7_NO_SHIFT_REG)
);

defparam rnode_6to7_bb1_c2_ene3_0_reg_7_fifo.DEPTH = 1;
defparam rnode_6to7_bb1_c2_ene3_0_reg_7_fifo.DATA_WIDTH = 32;
defparam rnode_6to7_bb1_c2_ene3_0_reg_7_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_6to7_bb1_c2_ene3_0_reg_7_fifo.IMPL = "shift_reg";

assign rnode_6to7_bb1_c2_ene3_0_reg_7_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_5to6_bb1_c2_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_6to7_bb1_c2_ene3_0_NO_SHIFT_REG = rnode_6to7_bb1_c2_ene3_0_reg_7_NO_SHIFT_REG;
assign rnode_6to7_bb1_c2_ene3_0_stall_in_reg_7_NO_SHIFT_REG = ~(local_bb1_c2_exit_c2_exi2_enable);
assign rnode_6to7_bb1_c2_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_2_VALID_6_7_0_inputs_ready;
 reg SFC_2_VALID_6_7_0_valid_out_NO_SHIFT_REG;
wire SFC_2_VALID_6_7_0_stall_in;
wire SFC_2_VALID_6_7_0_output_regs_ready;
 reg SFC_2_VALID_6_7_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_2_VALID_6_7_0_causedstall;

assign SFC_2_VALID_6_7_0_inputs_ready = 1'b1;
assign SFC_2_VALID_6_7_0_output_regs_ready = local_bb1_c2_exit_c2_exi2_enable;
assign SFC_2_VALID_5_6_0_stall_in = 1'b0;
assign SFC_2_VALID_6_7_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c2_exit_c2_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_2_VALID_6_7_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_2_VALID_6_7_0_output_regs_ready)
		begin
			SFC_2_VALID_6_7_0_NO_SHIFT_REG <= SFC_2_VALID_5_6_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1_c2_exi2_valid_out;
wire local_bb1_c2_exi2_stall_in;
wire local_bb1_c2_exi2_inputs_ready;
wire local_bb1_c2_exi2_stall_local;
wire [95:0] local_bb1_c2_exi2;

assign local_bb1_c2_exi2_inputs_ready = (local_bb1_var__u1_valid_out_NO_SHIFT_REG & rnode_6to7_bb1_c2_ene3_0_valid_out_NO_SHIFT_REG);
assign local_bb1_c2_exi2[63:0] = local_bb1_c2_exi1[63:0];
assign local_bb1_c2_exi2[95:64] = rnode_6to7_bb1_c2_ene3_0_NO_SHIFT_REG;
assign local_bb1_c2_exi2_valid_out = 1'b1;
assign local_bb1_var__u1_stall_in = 1'b0;
assign rnode_6to7_bb1_c2_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c2_exit_c2_exi2_valid_out;
wire local_bb1_c2_exit_c2_exi2_stall_in;
wire local_bb1_c2_exit_c2_exi2_inputs_ready;
wire local_bb1_c2_exit_c2_exi2_stall_local;
wire [95:0] local_bb1_c2_exit_c2_exi2;
wire local_bb1_c2_exit_c2_exi2_valid;
wire local_bb1_c2_exit_c2_exi2_fu_stall_out;

acl_enable_sink local_bb1_c2_exit_c2_exi2_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb1_c2_exi2),
	.data_out(local_bb1_c2_exit_c2_exi2),
	.input_accepted(local_bb1_c2_enter_c2_eni3_input_accepted),
	.valid_out(local_bb1_c2_exit_c2_exi2_valid),
	.stall_in(local_bb1_c2_exit_c2_exi2_stall_local),
	.enable(local_bb1_c2_exit_c2_exi2_enable),
	.valid_in(local_bb1_c2_exit_c2_exi2_valid_in),
	.stall_entry(local_bb1_c2_exit_c2_exi2_entry_stall),
	.inc_pipelined_thread(local_bb1_c2_enter_c2_eni3_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb1_c2_enter_c2_eni3_dec_pipelined_thread)
);

defparam local_bb1_c2_exit_c2_exi2_instance.DATA_WIDTH = 96;
defparam local_bb1_c2_exit_c2_exi2_instance.PIPELINE_DEPTH = 3;
defparam local_bb1_c2_exit_c2_exi2_instance.SCHEDULEII = 1;
defparam local_bb1_c2_exit_c2_exi2_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb1_c2_exit_c2_exi2_inputs_ready = (local_bb1_c2_exi2_valid_out & SFC_2_VALID_6_7_0_valid_out_NO_SHIFT_REG);
assign local_bb1_c2_exit_c2_exi2_valid_in = SFC_2_VALID_6_7_0_NO_SHIFT_REG;
assign local_bb1_c2_exit_c2_exi2_fu_stall_out = ~(local_bb1_c2_exit_c2_exi2_enable);
assign local_bb1_c2_exit_c2_exi2_valid_out = local_bb1_c2_exit_c2_exi2_valid;
assign local_bb1_c2_exit_c2_exi2_stall_local = local_bb1_c2_exit_c2_exi2_stall_in;
assign local_bb1_c2_exi2_stall_in = 1'b0;
assign SFC_2_VALID_6_7_0_stall_in = 1'b0;

// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_0_NO_SHIFT_REG;
 logic [95:0] rnode_7to7_bb1_c2_exit_c2_exi2_0_NO_SHIFT_REG;
 logic rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_1_NO_SHIFT_REG;
 logic [95:0] rnode_7to7_bb1_c2_exit_c2_exi2_1_NO_SHIFT_REG;
 logic rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_inputs_ready_NO_SHIFT_REG;
 logic [95:0] rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_NO_SHIFT_REG;
 logic rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_0_reg_7_NO_SHIFT_REG;
 logic rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_0_reg_7_NO_SHIFT_REG;
 logic rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_out_reg_7_NO_SHIFT_REG;

acl_data_fifo rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_0_reg_7_NO_SHIFT_REG),
	.valid_out(rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_0_reg_7_NO_SHIFT_REG),
	.stall_out(rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_out_reg_7_NO_SHIFT_REG),
	.data_in(local_bb1_c2_exit_c2_exi2),
	.data_out(rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_NO_SHIFT_REG)
);

defparam rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_fifo.DEPTH = 3;
defparam rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_fifo.DATA_WIDTH = 96;
defparam rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_fifo.IMPL = "zl_reg";

assign rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_inputs_ready_NO_SHIFT_REG = local_bb1_c2_exit_c2_exi2_valid_out;
assign local_bb1_c2_exit_c2_exi2_stall_in = rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_out_reg_7_NO_SHIFT_REG;
assign rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_0_reg_7_NO_SHIFT_REG = (rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_0_NO_SHIFT_REG | rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_1_NO_SHIFT_REG);
assign rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_0_NO_SHIFT_REG = rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_0_reg_7_NO_SHIFT_REG;
assign rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_1_NO_SHIFT_REG = rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_0_reg_7_NO_SHIFT_REG;
assign rnode_7to7_bb1_c2_exit_c2_exi2_0_NO_SHIFT_REG = rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_NO_SHIFT_REG;
assign rnode_7to7_bb1_c2_exit_c2_exi2_1_NO_SHIFT_REG = rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb1_c2_exe2_stall_local;
wire [31:0] local_bb1_c2_exe2;

assign local_bb1_c2_exe2[31:0] = rnode_7to7_bb1_c2_exit_c2_exi2_0_NO_SHIFT_REG[95:64];

// This section implements an unregistered operation.
// 
wire local_bb1_c2_exe1_stall_local;
wire [31:0] local_bb1_c2_exe1;

assign local_bb1_c2_exe1[31:0] = rnode_7to7_bb1_c2_exit_c2_exi2_1_NO_SHIFT_REG[63:32];

// This section implements an unregistered operation.
// 
wire local_bb1_c3_eni1_stall_local;
wire [95:0] local_bb1_c3_eni1;

assign local_bb1_c3_eni1[31:0] = 32'bx;
assign local_bb1_c3_eni1[63:32] = local_bb1_c2_exe1;
assign local_bb1_c3_eni1[95:64] = 32'bx;

// This section implements an unregistered operation.
// 
wire local_bb1_c3_eni2_valid_out;
wire local_bb1_c3_eni2_stall_in;
wire local_bb1_c3_eni2_inputs_ready;
wire local_bb1_c3_eni2_stall_local;
wire [95:0] local_bb1_c3_eni2;

assign local_bb1_c3_eni2_inputs_ready = (rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_0_NO_SHIFT_REG & rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_1_NO_SHIFT_REG);
assign local_bb1_c3_eni2[63:0] = local_bb1_c3_eni1[63:0];
assign local_bb1_c3_eni2[95:64] = local_bb1_c2_exe2;
assign local_bb1_c3_eni2_valid_out = local_bb1_c3_eni2_inputs_ready;
assign local_bb1_c3_eni2_stall_local = local_bb1_c3_eni2_stall_in;
assign rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_0_NO_SHIFT_REG = (local_bb1_c3_eni2_stall_local | ~(local_bb1_c3_eni2_inputs_ready));
assign rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_1_NO_SHIFT_REG = (local_bb1_c3_eni2_stall_local | ~(local_bb1_c3_eni2_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb1_c3_enter_c3_eni2_valid_out_0;
wire local_bb1_c3_enter_c3_eni2_stall_in_0;
wire local_bb1_c3_enter_c3_eni2_valid_out_1;
wire local_bb1_c3_enter_c3_eni2_stall_in_1;
wire local_bb1_c3_enter_c3_eni2_valid_out_2;
wire local_bb1_c3_enter_c3_eni2_stall_in_2;
wire local_bb1_c3_enter_c3_eni2_inputs_ready;
wire local_bb1_c3_enter_c3_eni2_stall_local;
wire local_bb1_c3_enter_c3_eni2_input_accepted;
wire [95:0] local_bb1_c3_enter_c3_eni2;
wire local_bb1_c3_exit_c3_exi1_enable;
wire local_bb1_c3_exit_c3_exi1_entry_stall;
wire local_bb1_c3_enter_c3_eni2_valid_bit;
wire local_bb1_c3_exit_c3_exi1_output_regs_ready;
wire local_bb1_c3_exit_c3_exi1_valid_in;
wire local_bb1_c3_exit_c3_exi1_phases;
wire local_bb1_c3_enter_c3_eni2_inc_pipelined_thread;
wire local_bb1_c3_enter_c3_eni2_dec_pipelined_thread;
wire local_bb1_c3_enter_c3_eni2_fu_stall_out;

assign local_bb1_c3_enter_c3_eni2_inputs_ready = local_bb1_c3_eni2_valid_out;
assign local_bb1_c3_enter_c3_eni2 = local_bb1_c3_eni2;
assign local_bb1_c3_enter_c3_eni2_input_accepted = (local_bb1_c3_enter_c3_eni2_inputs_ready && !(local_bb1_c3_exit_c3_exi1_entry_stall));
assign local_bb1_c3_enter_c3_eni2_valid_bit = local_bb1_c3_enter_c3_eni2_input_accepted;
assign local_bb1_c3_enter_c3_eni2_inc_pipelined_thread = 1'b1;
assign local_bb1_c3_enter_c3_eni2_dec_pipelined_thread = ~(1'b0);
assign local_bb1_c3_enter_c3_eni2_fu_stall_out = (~(local_bb1_c3_enter_c3_eni2_inputs_ready) | local_bb1_c3_exit_c3_exi1_entry_stall);
assign local_bb1_c3_enter_c3_eni2_stall_local = (local_bb1_c3_enter_c3_eni2_stall_in_0 | local_bb1_c3_enter_c3_eni2_stall_in_1 | local_bb1_c3_enter_c3_eni2_stall_in_2);
assign local_bb1_c3_enter_c3_eni2_valid_out_0 = local_bb1_c3_enter_c3_eni2_inputs_ready;
assign local_bb1_c3_enter_c3_eni2_valid_out_1 = local_bb1_c3_enter_c3_eni2_inputs_ready;
assign local_bb1_c3_enter_c3_eni2_valid_out_2 = local_bb1_c3_enter_c3_eni2_inputs_ready;
assign local_bb1_c3_eni2_stall_in = (|local_bb1_c3_enter_c3_eni2_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb1_c3_ene1_stall_local;
wire [31:0] local_bb1_c3_ene1;

assign local_bb1_c3_ene1[31:0] = local_bb1_c3_enter_c3_eni2[63:32];

// This section implements an unregistered operation.
// 
wire local_bb1_c3_ene2_stall_local;
wire [31:0] local_bb1_c3_ene2;

assign local_bb1_c3_ene2[31:0] = local_bb1_c3_enter_c3_eni2[95:64];

// This section implements an unregistered operation.
// 
wire SFC_3_VALID_7_7_0_valid_out;
wire SFC_3_VALID_7_7_0_stall_in;
wire SFC_3_VALID_7_7_0_inputs_ready;
wire SFC_3_VALID_7_7_0_stall_local;
wire SFC_3_VALID_7_7_0;

assign SFC_3_VALID_7_7_0_inputs_ready = local_bb1_c3_enter_c3_eni2_valid_out_2;
assign SFC_3_VALID_7_7_0 = local_bb1_c3_enter_c3_eni2_valid_bit;
assign SFC_3_VALID_7_7_0_valid_out = 1'b1;
assign local_bb1_c3_enter_c3_eni2_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_var__u2_valid_out;
wire local_bb1_var__u2_stall_in;
wire local_bb1_var__u2_inputs_ready;
wire local_bb1_var__u2_stall_local;
wire [31:0] local_bb1_var__u2;

assign local_bb1_var__u2_inputs_ready = (local_bb1_c3_enter_c3_eni2_valid_out_0 & local_bb1_c3_enter_c3_eni2_valid_out_1);
assign local_bb1_var__u2 = (local_bb1_c3_ene1 + local_bb1_c3_ene2);
assign local_bb1_var__u2_valid_out = 1'b1;
assign local_bb1_c3_enter_c3_eni2_stall_in_0 = 1'b0;
assign local_bb1_c3_enter_c3_eni2_stall_in_1 = 1'b0;

// This section implements a registered operation.
// 
wire SFC_3_VALID_7_8_0_inputs_ready;
 reg SFC_3_VALID_7_8_0_valid_out_NO_SHIFT_REG;
wire SFC_3_VALID_7_8_0_stall_in;
wire SFC_3_VALID_7_8_0_output_regs_ready;
 reg SFC_3_VALID_7_8_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_3_VALID_7_8_0_causedstall;

assign SFC_3_VALID_7_8_0_inputs_ready = 1'b1;
assign SFC_3_VALID_7_8_0_output_regs_ready = local_bb1_c3_exit_c3_exi1_enable;
assign SFC_3_VALID_7_7_0_stall_in = 1'b0;
assign SFC_3_VALID_7_8_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c3_exit_c3_exi1_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_3_VALID_7_8_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_3_VALID_7_8_0_output_regs_ready)
		begin
			SFC_3_VALID_7_8_0_NO_SHIFT_REG <= SFC_3_VALID_7_7_0;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_7to8_bb1_var__u2_0_valid_out_NO_SHIFT_REG;
 logic rnode_7to8_bb1_var__u2_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_7to8_bb1_var__u2_0_NO_SHIFT_REG;
 logic rnode_7to8_bb1_var__u2_0_reg_8_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_7to8_bb1_var__u2_0_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb1_var__u2_0_valid_out_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb1_var__u2_0_stall_in_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb1_var__u2_0_stall_out_reg_8_NO_SHIFT_REG;

acl_data_fifo rnode_7to8_bb1_var__u2_0_reg_8_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_7to8_bb1_var__u2_0_reg_8_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_7to8_bb1_var__u2_0_stall_in_reg_8_NO_SHIFT_REG),
	.valid_out(rnode_7to8_bb1_var__u2_0_valid_out_reg_8_NO_SHIFT_REG),
	.stall_out(rnode_7to8_bb1_var__u2_0_stall_out_reg_8_NO_SHIFT_REG),
	.data_in(local_bb1_var__u2),
	.data_out(rnode_7to8_bb1_var__u2_0_reg_8_NO_SHIFT_REG)
);

defparam rnode_7to8_bb1_var__u2_0_reg_8_fifo.DEPTH = 1;
defparam rnode_7to8_bb1_var__u2_0_reg_8_fifo.DATA_WIDTH = 32;
defparam rnode_7to8_bb1_var__u2_0_reg_8_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_7to8_bb1_var__u2_0_reg_8_fifo.IMPL = "shift_reg";

assign rnode_7to8_bb1_var__u2_0_reg_8_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb1_var__u2_stall_in = 1'b0;
assign rnode_7to8_bb1_var__u2_0_NO_SHIFT_REG = rnode_7to8_bb1_var__u2_0_reg_8_NO_SHIFT_REG;
assign rnode_7to8_bb1_var__u2_0_stall_in_reg_8_NO_SHIFT_REG = ~(local_bb1_c3_exit_c3_exi1_enable);
assign rnode_7to8_bb1_var__u2_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb1_c3_exi1_valid_out;
wire local_bb1_c3_exi1_stall_in;
wire local_bb1_c3_exi1_inputs_ready;
wire local_bb1_c3_exi1_stall_local;
wire [63:0] local_bb1_c3_exi1;

assign local_bb1_c3_exi1_inputs_ready = rnode_7to8_bb1_var__u2_0_valid_out_NO_SHIFT_REG;
assign local_bb1_c3_exi1[31:0] = 32'bx;
assign local_bb1_c3_exi1[63:32] = rnode_7to8_bb1_var__u2_0_NO_SHIFT_REG;
assign local_bb1_c3_exi1_valid_out = 1'b1;
assign rnode_7to8_bb1_var__u2_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c3_exit_c3_exi1_valid_out;
wire local_bb1_c3_exit_c3_exi1_stall_in;
wire local_bb1_c3_exit_c3_exi1_inputs_ready;
wire local_bb1_c3_exit_c3_exi1_stall_local;
wire [63:0] local_bb1_c3_exit_c3_exi1;
wire local_bb1_c3_exit_c3_exi1_valid;
wire local_bb1_c3_exit_c3_exi1_fu_stall_out;

acl_enable_sink local_bb1_c3_exit_c3_exi1_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb1_c3_exi1),
	.data_out(local_bb1_c3_exit_c3_exi1),
	.input_accepted(local_bb1_c3_enter_c3_eni2_input_accepted),
	.valid_out(local_bb1_c3_exit_c3_exi1_valid),
	.stall_in(local_bb1_c3_exit_c3_exi1_stall_local),
	.enable(local_bb1_c3_exit_c3_exi1_enable),
	.valid_in(local_bb1_c3_exit_c3_exi1_valid_in),
	.stall_entry(local_bb1_c3_exit_c3_exi1_entry_stall),
	.inc_pipelined_thread(local_bb1_c3_enter_c3_eni2_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb1_c3_enter_c3_eni2_dec_pipelined_thread)
);

defparam local_bb1_c3_exit_c3_exi1_instance.DATA_WIDTH = 64;
defparam local_bb1_c3_exit_c3_exi1_instance.PIPELINE_DEPTH = 1;
defparam local_bb1_c3_exit_c3_exi1_instance.SCHEDULEII = 1;
defparam local_bb1_c3_exit_c3_exi1_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb1_c3_exit_c3_exi1_inputs_ready = (local_bb1_c3_exi1_valid_out & SFC_3_VALID_7_8_0_valid_out_NO_SHIFT_REG);
assign local_bb1_c3_exit_c3_exi1_valid_in = SFC_3_VALID_7_8_0_NO_SHIFT_REG;
assign local_bb1_c3_exit_c3_exi1_fu_stall_out = ~(local_bb1_c3_exit_c3_exi1_enable);
assign local_bb1_c3_exit_c3_exi1_valid_out = local_bb1_c3_exit_c3_exi1_valid;
assign local_bb1_c3_exit_c3_exi1_stall_local = local_bb1_c3_exit_c3_exi1_stall_in;
assign local_bb1_c3_exi1_stall_in = 1'b0;
assign SFC_3_VALID_7_8_0_stall_in = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c3_exe1_stall_local;
wire [31:0] local_bb1_c3_exe1;

assign local_bb1_c3_exe1[31:0] = local_bb1_c3_exit_c3_exi1[63:32];

// This section implements an unregistered operation.
// 
wire local_bb1_c4_eni1_valid_out;
wire local_bb1_c4_eni1_stall_in;
wire local_bb1_c4_eni1_inputs_ready;
wire local_bb1_c4_eni1_stall_local;
wire [63:0] local_bb1_c4_eni1;

assign local_bb1_c4_eni1_inputs_ready = local_bb1_c3_exit_c3_exi1_valid_out;
assign local_bb1_c4_eni1[31:0] = 32'bx;
assign local_bb1_c4_eni1[63:32] = local_bb1_c3_exe1;
assign local_bb1_c4_eni1_valid_out = local_bb1_c4_eni1_inputs_ready;
assign local_bb1_c4_eni1_stall_local = local_bb1_c4_eni1_stall_in;
assign local_bb1_c3_exit_c3_exi1_stall_in = (|local_bb1_c4_eni1_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb1_c4_enter_c4_eni1_valid_out_0;
wire local_bb1_c4_enter_c4_eni1_stall_in_0;
wire local_bb1_c4_enter_c4_eni1_valid_out_1;
wire local_bb1_c4_enter_c4_eni1_stall_in_1;
wire local_bb1_c4_enter_c4_eni1_inputs_ready;
wire local_bb1_c4_enter_c4_eni1_stall_local;
wire local_bb1_c4_enter_c4_eni1_input_accepted;
wire [63:0] local_bb1_c4_enter_c4_eni1;
wire local_bb1_c4_exit_c4_exi2_enable;
wire local_bb1_c4_exit_c4_exi2_entry_stall;
wire local_bb1_c4_enter_c4_eni1_valid_bit;
wire local_bb1_c4_exit_c4_exi2_output_regs_ready;
wire local_bb1_c4_exit_c4_exi2_valid_in;
wire local_bb1_c4_exit_c4_exi2_phases;
wire local_bb1_c4_enter_c4_eni1_inc_pipelined_thread;
wire local_bb1_c4_enter_c4_eni1_dec_pipelined_thread;
wire local_bb1_c4_enter_c4_eni1_fu_stall_out;

assign local_bb1_c4_enter_c4_eni1_inputs_ready = local_bb1_c4_eni1_valid_out;
assign local_bb1_c4_enter_c4_eni1 = local_bb1_c4_eni1;
assign local_bb1_c4_enter_c4_eni1_input_accepted = (local_bb1_c4_enter_c4_eni1_inputs_ready && !(local_bb1_c4_exit_c4_exi2_entry_stall));
assign local_bb1_c4_enter_c4_eni1_valid_bit = local_bb1_c4_enter_c4_eni1_input_accepted;
assign local_bb1_c4_enter_c4_eni1_inc_pipelined_thread = 1'b1;
assign local_bb1_c4_enter_c4_eni1_dec_pipelined_thread = ~(1'b0);
assign local_bb1_c4_enter_c4_eni1_fu_stall_out = (~(local_bb1_c4_enter_c4_eni1_inputs_ready) | local_bb1_c4_exit_c4_exi2_entry_stall);
assign local_bb1_c4_enter_c4_eni1_stall_local = (local_bb1_c4_enter_c4_eni1_stall_in_0 | local_bb1_c4_enter_c4_eni1_stall_in_1);
assign local_bb1_c4_enter_c4_eni1_valid_out_0 = local_bb1_c4_enter_c4_eni1_inputs_ready;
assign local_bb1_c4_enter_c4_eni1_valid_out_1 = local_bb1_c4_enter_c4_eni1_inputs_ready;
assign local_bb1_c4_eni1_stall_in = (|local_bb1_c4_enter_c4_eni1_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb1_c4_ene1_stall_local;
wire [31:0] local_bb1_c4_ene1;

assign local_bb1_c4_ene1[31:0] = local_bb1_c4_enter_c4_eni1[63:32];

// This section implements an unregistered operation.
// 
wire SFC_4_VALID_8_8_0_valid_out;
wire SFC_4_VALID_8_8_0_stall_in;
wire SFC_4_VALID_8_8_0_inputs_ready;
wire SFC_4_VALID_8_8_0_stall_local;
wire SFC_4_VALID_8_8_0;

assign SFC_4_VALID_8_8_0_inputs_ready = local_bb1_c4_enter_c4_eni1_valid_out_1;
assign SFC_4_VALID_8_8_0 = local_bb1_c4_enter_c4_eni1_valid_bit;
assign SFC_4_VALID_8_8_0_valid_out = 1'b1;
assign local_bb1_c4_enter_c4_eni1_stall_in_1 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c4_ene1_valid_out_1;
wire local_bb1_c4_ene1_stall_in_1;
wire local_bb1_cmp18_NEG_valid_out;
wire local_bb1_cmp18_NEG_stall_in;
wire local_bb1_cmp18_NEG_inputs_ready;
wire local_bb1_cmp18_NEG_stall_local;
wire local_bb1_cmp18_NEG;

assign local_bb1_cmp18_NEG_inputs_ready = local_bb1_c4_enter_c4_eni1_valid_out_0;
assign local_bb1_cmp18_NEG = ($signed(local_bb1_c4_ene1) >= $signed(input_wii_ld_));
assign local_bb1_c4_ene1_valid_out_1 = 1'b1;
assign local_bb1_cmp18_NEG_valid_out = 1'b1;
assign local_bb1_c4_enter_c4_eni1_stall_in_0 = 1'b0;

// This section implements a registered operation.
// 
wire SFC_4_VALID_8_9_0_inputs_ready;
 reg SFC_4_VALID_8_9_0_valid_out_NO_SHIFT_REG;
wire SFC_4_VALID_8_9_0_stall_in;
wire SFC_4_VALID_8_9_0_output_regs_ready;
 reg SFC_4_VALID_8_9_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_4_VALID_8_9_0_causedstall;

assign SFC_4_VALID_8_9_0_inputs_ready = 1'b1;
assign SFC_4_VALID_8_9_0_output_regs_ready = local_bb1_c4_exit_c4_exi2_enable;
assign SFC_4_VALID_8_8_0_stall_in = 1'b0;
assign SFC_4_VALID_8_9_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c4_exit_c4_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_4_VALID_8_9_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_4_VALID_8_9_0_output_regs_ready)
		begin
			SFC_4_VALID_8_9_0_NO_SHIFT_REG <= SFC_4_VALID_8_8_0;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_8to9_bb1_c4_ene1_0_valid_out_NO_SHIFT_REG;
 logic rnode_8to9_bb1_c4_ene1_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_8to9_bb1_c4_ene1_0_NO_SHIFT_REG;
 logic rnode_8to9_bb1_c4_ene1_0_reg_9_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_8to9_bb1_c4_ene1_0_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb1_c4_ene1_0_valid_out_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb1_c4_ene1_0_stall_in_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb1_c4_ene1_0_stall_out_reg_9_NO_SHIFT_REG;

acl_data_fifo rnode_8to9_bb1_c4_ene1_0_reg_9_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_8to9_bb1_c4_ene1_0_reg_9_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_8to9_bb1_c4_ene1_0_stall_in_reg_9_NO_SHIFT_REG),
	.valid_out(rnode_8to9_bb1_c4_ene1_0_valid_out_reg_9_NO_SHIFT_REG),
	.stall_out(rnode_8to9_bb1_c4_ene1_0_stall_out_reg_9_NO_SHIFT_REG),
	.data_in(local_bb1_c4_ene1),
	.data_out(rnode_8to9_bb1_c4_ene1_0_reg_9_NO_SHIFT_REG)
);

defparam rnode_8to9_bb1_c4_ene1_0_reg_9_fifo.DEPTH = 1;
defparam rnode_8to9_bb1_c4_ene1_0_reg_9_fifo.DATA_WIDTH = 32;
defparam rnode_8to9_bb1_c4_ene1_0_reg_9_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_8to9_bb1_c4_ene1_0_reg_9_fifo.IMPL = "shift_reg";

assign rnode_8to9_bb1_c4_ene1_0_reg_9_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb1_c4_ene1_stall_in_1 = 1'b0;
assign rnode_8to9_bb1_c4_ene1_0_NO_SHIFT_REG = rnode_8to9_bb1_c4_ene1_0_reg_9_NO_SHIFT_REG;
assign rnode_8to9_bb1_c4_ene1_0_stall_in_reg_9_NO_SHIFT_REG = ~(local_bb1_c4_exit_c4_exi2_enable);
assign rnode_8to9_bb1_c4_ene1_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_8to9_bb1_cmp18_NEG_0_valid_out_NO_SHIFT_REG;
 logic rnode_8to9_bb1_cmp18_NEG_0_stall_in_NO_SHIFT_REG;
 logic rnode_8to9_bb1_cmp18_NEG_0_NO_SHIFT_REG;
 logic rnode_8to9_bb1_cmp18_NEG_0_reg_9_inputs_ready_NO_SHIFT_REG;
 logic rnode_8to9_bb1_cmp18_NEG_0_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb1_cmp18_NEG_0_valid_out_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb1_cmp18_NEG_0_stall_in_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb1_cmp18_NEG_0_stall_out_reg_9_NO_SHIFT_REG;

acl_data_fifo rnode_8to9_bb1_cmp18_NEG_0_reg_9_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_8to9_bb1_cmp18_NEG_0_reg_9_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_8to9_bb1_cmp18_NEG_0_stall_in_reg_9_NO_SHIFT_REG),
	.valid_out(rnode_8to9_bb1_cmp18_NEG_0_valid_out_reg_9_NO_SHIFT_REG),
	.stall_out(rnode_8to9_bb1_cmp18_NEG_0_stall_out_reg_9_NO_SHIFT_REG),
	.data_in(local_bb1_cmp18_NEG),
	.data_out(rnode_8to9_bb1_cmp18_NEG_0_reg_9_NO_SHIFT_REG)
);

defparam rnode_8to9_bb1_cmp18_NEG_0_reg_9_fifo.DEPTH = 1;
defparam rnode_8to9_bb1_cmp18_NEG_0_reg_9_fifo.DATA_WIDTH = 1;
defparam rnode_8to9_bb1_cmp18_NEG_0_reg_9_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_8to9_bb1_cmp18_NEG_0_reg_9_fifo.IMPL = "shift_reg";

assign rnode_8to9_bb1_cmp18_NEG_0_reg_9_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb1_cmp18_NEG_stall_in = 1'b0;
assign rnode_8to9_bb1_cmp18_NEG_0_NO_SHIFT_REG = rnode_8to9_bb1_cmp18_NEG_0_reg_9_NO_SHIFT_REG;
assign rnode_8to9_bb1_cmp18_NEG_0_stall_in_reg_9_NO_SHIFT_REG = ~(local_bb1_c4_exit_c4_exi2_enable);
assign rnode_8to9_bb1_cmp18_NEG_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb1_c4_exi1_stall_local;
wire [95:0] local_bb1_c4_exi1;

assign local_bb1_c4_exi1[31:0] = 32'bx;
assign local_bb1_c4_exi1[63:32] = rnode_8to9_bb1_c4_ene1_0_NO_SHIFT_REG;
assign local_bb1_c4_exi1[95:64] = 32'bx;

// This section implements an unregistered operation.
// 
wire local_bb1_c4_exi2_valid_out;
wire local_bb1_c4_exi2_stall_in;
wire local_bb1_c4_exi2_inputs_ready;
wire local_bb1_c4_exi2_stall_local;
wire [95:0] local_bb1_c4_exi2;

assign local_bb1_c4_exi2_inputs_ready = (rnode_8to9_bb1_c4_ene1_0_valid_out_NO_SHIFT_REG & rnode_8to9_bb1_cmp18_NEG_0_valid_out_NO_SHIFT_REG);
assign local_bb1_c4_exi2[63:0] = local_bb1_c4_exi1[63:0];
assign local_bb1_c4_exi2[64] = rnode_8to9_bb1_cmp18_NEG_0_NO_SHIFT_REG;
assign local_bb1_c4_exi2[95:65] = local_bb1_c4_exi1[95:65];
assign local_bb1_c4_exi2_valid_out = 1'b1;
assign rnode_8to9_bb1_c4_ene1_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_8to9_bb1_cmp18_NEG_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c4_exit_c4_exi2_valid_out_0;
wire local_bb1_c4_exit_c4_exi2_stall_in_0;
wire local_bb1_c4_exit_c4_exi2_valid_out_1;
wire local_bb1_c4_exit_c4_exi2_stall_in_1;
wire local_bb1_c4_exit_c4_exi2_inputs_ready;
wire local_bb1_c4_exit_c4_exi2_stall_local;
wire [95:0] local_bb1_c4_exit_c4_exi2;
wire local_bb1_c4_exit_c4_exi2_valid;
wire local_bb1_c4_exit_c4_exi2_fu_stall_out;

acl_enable_sink local_bb1_c4_exit_c4_exi2_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb1_c4_exi2),
	.data_out(local_bb1_c4_exit_c4_exi2),
	.input_accepted(local_bb1_c4_enter_c4_eni1_input_accepted),
	.valid_out(local_bb1_c4_exit_c4_exi2_valid),
	.stall_in(local_bb1_c4_exit_c4_exi2_stall_local),
	.enable(local_bb1_c4_exit_c4_exi2_enable),
	.valid_in(local_bb1_c4_exit_c4_exi2_valid_in),
	.stall_entry(local_bb1_c4_exit_c4_exi2_entry_stall),
	.inc_pipelined_thread(local_bb1_c4_enter_c4_eni1_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb1_c4_enter_c4_eni1_dec_pipelined_thread)
);

defparam local_bb1_c4_exit_c4_exi2_instance.DATA_WIDTH = 96;
defparam local_bb1_c4_exit_c4_exi2_instance.PIPELINE_DEPTH = 1;
defparam local_bb1_c4_exit_c4_exi2_instance.SCHEDULEII = 1;
defparam local_bb1_c4_exit_c4_exi2_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb1_c4_exit_c4_exi2_inputs_ready = (local_bb1_c4_exi2_valid_out & SFC_4_VALID_8_9_0_valid_out_NO_SHIFT_REG);
assign local_bb1_c4_exit_c4_exi2_valid_in = SFC_4_VALID_8_9_0_NO_SHIFT_REG;
assign local_bb1_c4_exit_c4_exi2_fu_stall_out = ~(local_bb1_c4_exit_c4_exi2_enable);
assign local_bb1_c4_exit_c4_exi2_stall_local = (local_bb1_c4_exit_c4_exi2_stall_in_0 | local_bb1_c4_exit_c4_exi2_stall_in_1);
assign local_bb1_c4_exit_c4_exi2_valid_out_0 = local_bb1_c4_exit_c4_exi2_valid;
assign local_bb1_c4_exit_c4_exi2_valid_out_1 = local_bb1_c4_exit_c4_exi2_valid;
assign local_bb1_c4_exi2_stall_in = 1'b0;
assign SFC_4_VALID_8_9_0_stall_in = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c4_exe1_stall_local;
wire [31:0] local_bb1_c4_exe1;

assign local_bb1_c4_exe1[31:0] = local_bb1_c4_exit_c4_exi2[63:32];

// This section implements an unregistered operation.
// 
wire local_bb1_c4_exe1_valid_out;
wire local_bb1_c4_exe1_stall_in;
wire local_bb1_c4_exe2_valid_out;
wire local_bb1_c4_exe2_stall_in;
wire local_bb1_c4_exe2_inputs_ready;
wire local_bb1_c4_exe2_stall_local;
wire local_bb1_c4_exe2;

assign local_bb1_c4_exe2_inputs_ready = (local_bb1_c4_exit_c4_exi2_valid_out_0 & local_bb1_c4_exit_c4_exi2_valid_out_1);
assign local_bb1_c4_exe2 = local_bb1_c4_exit_c4_exi2[64];
assign local_bb1_c4_exe2_stall_local = (local_bb1_c4_exe1_stall_in | local_bb1_c4_exe2_stall_in);
assign local_bb1_c4_exe1_valid_out = local_bb1_c4_exe2_inputs_ready;
assign local_bb1_c4_exe2_valid_out = local_bb1_c4_exe2_inputs_ready;
assign local_bb1_c4_exit_c4_exi2_stall_in_0 = (local_bb1_c4_exe2_stall_local | ~(local_bb1_c4_exe2_inputs_ready));
assign local_bb1_c4_exit_c4_exi2_stall_in_1 = (local_bb1_c4_exe2_stall_local | ~(local_bb1_c4_exe2_inputs_ready));

// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg [31:0] lvb_bb1_c4_exe1_reg_NO_SHIFT_REG;
 reg lvb_bb1_c4_exe2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb1_c4_exe2_valid_out & local_bb1_c4_exe1_valid_out & rnode_1to9_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG);
assign branch_var__output_regs_ready = (~(stall_in) | ~(branch_node_valid_out_NO_SHIFT_REG));
assign local_bb1_c4_exe2_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb1_c4_exe1_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_1to9_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_bb1_c4_exe1 = lvb_bb1_c4_exe1_reg_NO_SHIFT_REG;
assign lvb_bb1_c4_exe2 = lvb_bb1_c4_exe2_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id = lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;
assign combined_branch_stall_in_signal = stall_in;
assign valid_out = branch_node_valid_out_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
		lvb_bb1_c4_exe1_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_c4_exe2_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_bb1_c4_exe1_reg_NO_SHIFT_REG <= local_bb1_c4_exe1;
			lvb_bb1_c4_exe2_reg_NO_SHIFT_REG <= local_bb1_c4_exe2;
			lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= rnode_1to9_input_acl_hw_wg_id_0_NO_SHIFT_REG;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module dataLayer_basic_block_2
	(
		input 		clock,
		input 		resetn,
		input [63:0] 		input_inputFeatureMap,
		input [63:0] 		input_outputFeatureMap,
		input [31:0] 		input_wii_ld_,
		input [63:0] 		input_wii_scale,
		input [31:0] 		input_wii_mul17,
		input 		valid_in_0,
		output 		stall_out_0,
		input 		input_c4_exe2_0,
		input [31:0] 		input_loadDataCounterScale_019_0,
		input [31:0] 		input_acl_hw_wg_id_0,
		input 		valid_in_1,
		output 		stall_out_1,
		input 		input_c4_exe2_1,
		input [31:0] 		input_loadDataCounterScale_019_1,
		input [31:0] 		input_acl_hw_wg_id_1,
		output 		valid_out_0,
		input 		stall_in_0,
		output 		lvb_c4_exe2_0,
		output [31:0] 		lvb_bb2_add19_0,
		output [31:0] 		lvb_input_acl_hw_wg_id_0,
		output 		valid_out_1,
		input 		stall_in_1,
		output 		lvb_c4_exe2_1,
		output [31:0] 		lvb_bb2_add19_1,
		output [31:0] 		lvb_input_acl_hw_wg_id_1,
		input [31:0] 		workgroup_size,
		input 		start,
		output 		avm_local_bb2_ld__enable,
		input [511:0] 		avm_local_bb2_ld__readdata,
		input 		avm_local_bb2_ld__readdatavalid,
		input 		avm_local_bb2_ld__waitrequest,
		output [31:0] 		avm_local_bb2_ld__address,
		output 		avm_local_bb2_ld__read,
		output 		avm_local_bb2_ld__write,
		input 		avm_local_bb2_ld__writeack,
		output [511:0] 		avm_local_bb2_ld__writedata,
		output [63:0] 		avm_local_bb2_ld__byteenable,
		output [4:0] 		avm_local_bb2_ld__burstcount,
		output 		local_bb2_ld__active,
		input 		clock2x,
		output 		avm_local_bb2_ld__u3_enable,
		input [511:0] 		avm_local_bb2_ld__u3_readdata,
		input 		avm_local_bb2_ld__u3_readdatavalid,
		input 		avm_local_bb2_ld__u3_waitrequest,
		output [31:0] 		avm_local_bb2_ld__u3_address,
		output 		avm_local_bb2_ld__u3_read,
		output 		avm_local_bb2_ld__u3_write,
		input 		avm_local_bb2_ld__u3_writeack,
		output [511:0] 		avm_local_bb2_ld__u3_writedata,
		output [63:0] 		avm_local_bb2_ld__u3_byteenable,
		output [4:0] 		avm_local_bb2_ld__u3_burstcount,
		output 		local_bb2_ld__u3_active,
		output 		avm_local_bb2_st__enable,
		input [511:0] 		avm_local_bb2_st__readdata,
		input 		avm_local_bb2_st__readdatavalid,
		input 		avm_local_bb2_st__waitrequest,
		output [31:0] 		avm_local_bb2_st__address,
		output 		avm_local_bb2_st__read,
		output 		avm_local_bb2_st__write,
		input 		avm_local_bb2_st__writeack,
		output [511:0] 		avm_local_bb2_st__writedata,
		output [63:0] 		avm_local_bb2_st__byteenable,
		output [4:0] 		avm_local_bb2_st__burstcount,
		output 		local_bb2_st__active
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((valid_in_0 & valid_in_1) & ~((stall_out_0 | stall_out_1)));
assign _exit = ((valid_out_0 & valid_out_1) & ~((stall_in_0 | stall_in_1)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_node_stall_in_4;
 reg merge_node_valid_out_4_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
 reg input_c4_exe2_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_loadDataCounterScale_019_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
 reg local_lvm_c4_exe2_NO_SHIFT_REG;
 reg [31:0] local_lvm_loadDataCounterScale_019_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;
 reg input_c4_exe2_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_loadDataCounterScale_019_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG) | (merge_node_stall_in_4 & merge_node_valid_out_4_NO_SHIFT_REG));
assign stall_out_0 = merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
assign stall_out_1 = merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_0_staging_reg_NO_SHIFT_REG | valid_in_0))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		if ((merge_node_valid_in_1_staging_reg_NO_SHIFT_REG | valid_in_1))
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b1;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
		end
		else
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b0;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_c4_exe2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_loadDataCounterScale_019_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		input_c4_exe2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_loadDataCounterScale_019_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_0_staging_reg_NO_SHIFT_REG))
			begin
				input_c4_exe2_0_staging_reg_NO_SHIFT_REG <= input_c4_exe2_0;
				input_loadDataCounterScale_019_0_staging_reg_NO_SHIFT_REG <= input_loadDataCounterScale_019_0;
				input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= valid_in_0;
			end
		end
		else
		begin
			merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
		if (((merge_block_selector_NO_SHIFT_REG != 1'b1) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_1_staging_reg_NO_SHIFT_REG))
			begin
				input_c4_exe2_1_staging_reg_NO_SHIFT_REG <= input_c4_exe2_1;
				input_loadDataCounterScale_019_1_staging_reg_NO_SHIFT_REG <= input_loadDataCounterScale_019_1;
				input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= valid_in_1;
			end
		end
		else
		begin
			merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_0_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_c4_exe2_NO_SHIFT_REG <= input_c4_exe2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_loadDataCounterScale_019_NO_SHIFT_REG <= input_loadDataCounterScale_019_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_c4_exe2_NO_SHIFT_REG <= input_c4_exe2_0;
					local_lvm_loadDataCounterScale_019_NO_SHIFT_REG <= input_loadDataCounterScale_019_0;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				end
			end

			1'b1:
			begin
				if (merge_node_valid_in_1_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_c4_exe2_NO_SHIFT_REG <= input_c4_exe2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_loadDataCounterScale_019_NO_SHIFT_REG <= input_loadDataCounterScale_019_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_c4_exe2_NO_SHIFT_REG <= input_c4_exe2_1;
					local_lvm_loadDataCounterScale_019_NO_SHIFT_REG <= input_loadDataCounterScale_019_1;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_4_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_4))
			begin
				merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb2_idxprom_stall_local;
wire [63:0] local_bb2_idxprom;

assign local_bb2_idxprom[32] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[33] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[34] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[35] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[36] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[37] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[38] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[39] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[40] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[41] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[42] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[43] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[44] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[45] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[46] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[47] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[48] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[49] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[50] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[51] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[52] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[53] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[54] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[55] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[56] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[57] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[58] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[59] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[60] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[61] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[62] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[63] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[31:0] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_scale_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_scale_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to2_scale_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to2_scale_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_scale_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_scale_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_scale_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_scale_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_scale_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_scale_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_scale_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(),
	.data_out()
);

defparam rnode_1to2_scale_0_reg_2_fifo.DEPTH = 2;
defparam rnode_1to2_scale_0_reg_2_fifo.DATA_WIDTH = 0;
defparam rnode_1to2_scale_0_reg_2_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to2_scale_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_scale_0_reg_2_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_1_NO_SHIFT_REG;
assign merge_node_stall_in_1 = rnode_1to2_scale_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_scale_0_stall_in_reg_2_NO_SHIFT_REG = rnode_1to2_scale_0_stall_in_NO_SHIFT_REG;
assign rnode_1to2_scale_0_valid_out_NO_SHIFT_REG = rnode_1to2_scale_0_valid_out_reg_2_NO_SHIFT_REG;

// Register node:
//  * latency = 326
//  * capacity = 326
 logic rnode_1to327_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to327_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to327_input_acl_hw_wg_id_0_NO_SHIFT_REG;
 logic rnode_1to327_input_acl_hw_wg_id_0_reg_327_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to327_input_acl_hw_wg_id_0_reg_327_NO_SHIFT_REG;
 logic rnode_1to327_input_acl_hw_wg_id_0_valid_out_reg_327_NO_SHIFT_REG;
 logic rnode_1to327_input_acl_hw_wg_id_0_stall_in_reg_327_NO_SHIFT_REG;
 logic rnode_1to327_input_acl_hw_wg_id_0_stall_out_reg_327_NO_SHIFT_REG;

acl_data_fifo rnode_1to327_input_acl_hw_wg_id_0_reg_327_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to327_input_acl_hw_wg_id_0_reg_327_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to327_input_acl_hw_wg_id_0_stall_in_reg_327_NO_SHIFT_REG),
	.valid_out(rnode_1to327_input_acl_hw_wg_id_0_valid_out_reg_327_NO_SHIFT_REG),
	.stall_out(rnode_1to327_input_acl_hw_wg_id_0_stall_out_reg_327_NO_SHIFT_REG),
	.data_in(local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG),
	.data_out(rnode_1to327_input_acl_hw_wg_id_0_reg_327_NO_SHIFT_REG)
);

defparam rnode_1to327_input_acl_hw_wg_id_0_reg_327_fifo.DEPTH = 327;
defparam rnode_1to327_input_acl_hw_wg_id_0_reg_327_fifo.DATA_WIDTH = 32;
defparam rnode_1to327_input_acl_hw_wg_id_0_reg_327_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to327_input_acl_hw_wg_id_0_reg_327_fifo.IMPL = "ram";

assign rnode_1to327_input_acl_hw_wg_id_0_reg_327_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_2_NO_SHIFT_REG;
assign merge_node_stall_in_2 = rnode_1to327_input_acl_hw_wg_id_0_stall_out_reg_327_NO_SHIFT_REG;
assign rnode_1to327_input_acl_hw_wg_id_0_NO_SHIFT_REG = rnode_1to327_input_acl_hw_wg_id_0_reg_327_NO_SHIFT_REG;
assign rnode_1to327_input_acl_hw_wg_id_0_stall_in_reg_327_NO_SHIFT_REG = rnode_1to327_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG;
assign rnode_1to327_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG = rnode_1to327_input_acl_hw_wg_id_0_valid_out_reg_327_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_c4_exe2_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_1_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_stall_in_2_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_2_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_stall_out_reg_2_NO_SHIFT_REG;
 reg rnode_1to2_c4_exe2_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to2_c4_exe2_0_consumed_1_NO_SHIFT_REG;
 reg rnode_1to2_c4_exe2_0_consumed_2_NO_SHIFT_REG;
wire [63:0] rci_rcnode_1to325_rc4_mul17_0_reg_1;

acl_data_fifo rnode_1to2_c4_exe2_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_c4_exe2_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_c4_exe2_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_c4_exe2_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_c4_exe2_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_lvm_c4_exe2_NO_SHIFT_REG),
	.data_out(rnode_1to2_c4_exe2_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_c4_exe2_0_reg_2_fifo.DEPTH = 2;
defparam rnode_1to2_c4_exe2_0_reg_2_fifo.DATA_WIDTH = 1;
defparam rnode_1to2_c4_exe2_0_reg_2_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to2_c4_exe2_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_c4_exe2_0_reg_2_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_3_NO_SHIFT_REG;
assign merge_node_stall_in_3 = rnode_1to2_c4_exe2_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_c4_exe2_0_stall_in_0_reg_2_NO_SHIFT_REG = ((rnode_1to2_c4_exe2_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to2_c4_exe2_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to2_c4_exe2_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to2_c4_exe2_0_consumed_1_NO_SHIFT_REG)) | (rnode_1to2_c4_exe2_0_stall_in_2_NO_SHIFT_REG & ~(rnode_1to2_c4_exe2_0_consumed_2_NO_SHIFT_REG)));
assign rnode_1to2_c4_exe2_0_valid_out_0_NO_SHIFT_REG = (rnode_1to2_c4_exe2_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_c4_exe2_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_c4_exe2_0_valid_out_1_NO_SHIFT_REG = (rnode_1to2_c4_exe2_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_c4_exe2_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to2_c4_exe2_0_valid_out_2_NO_SHIFT_REG = (rnode_1to2_c4_exe2_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_c4_exe2_0_consumed_2_NO_SHIFT_REG));
assign rnode_1to2_c4_exe2_0_NO_SHIFT_REG = rnode_1to2_c4_exe2_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_c4_exe2_1_NO_SHIFT_REG = rnode_1to2_c4_exe2_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_c4_exe2_2_NO_SHIFT_REG = rnode_1to2_c4_exe2_0_reg_2_NO_SHIFT_REG;
assign rci_rcnode_1to325_rc4_mul17_0_reg_1[31:0] = input_wii_mul17;
assign rci_rcnode_1to325_rc4_mul17_0_reg_1[63:32] = local_lvm_loadDataCounterScale_019_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to2_c4_exe2_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_c4_exe2_0_consumed_1_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_c4_exe2_0_consumed_2_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to2_c4_exe2_0_consumed_0_NO_SHIFT_REG <= (rnode_1to2_c4_exe2_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_c4_exe2_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to2_c4_exe2_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to2_c4_exe2_0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_c4_exe2_0_consumed_1_NO_SHIFT_REG <= (rnode_1to2_c4_exe2_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_c4_exe2_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to2_c4_exe2_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to2_c4_exe2_0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_c4_exe2_0_consumed_2_NO_SHIFT_REG <= (rnode_1to2_c4_exe2_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_c4_exe2_0_consumed_2_NO_SHIFT_REG | ~(rnode_1to2_c4_exe2_0_stall_in_2_NO_SHIFT_REG)) & rnode_1to2_c4_exe2_0_stall_in_0_reg_2_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 324
//  * capacity = 324
 logic rcnode_1to325_rc4_mul17_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to325_rc4_mul17_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rcnode_1to325_rc4_mul17_0_NO_SHIFT_REG;
 logic rcnode_1to325_rc4_mul17_0_reg_325_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rcnode_1to325_rc4_mul17_0_reg_325_NO_SHIFT_REG;
 logic rcnode_1to325_rc4_mul17_0_valid_out_reg_325_NO_SHIFT_REG;
 logic rcnode_1to325_rc4_mul17_0_stall_in_reg_325_NO_SHIFT_REG;
 logic rcnode_1to325_rc4_mul17_0_stall_out_reg_325_IP_NO_SHIFT_REG;
 logic rcnode_1to325_rc4_mul17_0_stall_out_reg_325_NO_SHIFT_REG;

acl_data_fifo rcnode_1to325_rc4_mul17_0_reg_325_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to325_rc4_mul17_0_reg_325_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to325_rc4_mul17_0_stall_in_reg_325_NO_SHIFT_REG),
	.valid_out(rcnode_1to325_rc4_mul17_0_valid_out_reg_325_NO_SHIFT_REG),
	.stall_out(rcnode_1to325_rc4_mul17_0_stall_out_reg_325_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to325_rc4_mul17_0_reg_1),
	.data_out(rcnode_1to325_rc4_mul17_0_reg_325_NO_SHIFT_REG)
);

defparam rcnode_1to325_rc4_mul17_0_reg_325_fifo.DEPTH = 325;
defparam rcnode_1to325_rc4_mul17_0_reg_325_fifo.DATA_WIDTH = 64;
defparam rcnode_1to325_rc4_mul17_0_reg_325_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to325_rc4_mul17_0_reg_325_fifo.IMPL = "ram";

assign rcnode_1to325_rc4_mul17_0_reg_325_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_4_NO_SHIFT_REG;
assign rcnode_1to325_rc4_mul17_0_stall_out_reg_325_NO_SHIFT_REG = (~(rcnode_1to325_rc4_mul17_0_reg_325_inputs_ready_NO_SHIFT_REG) | rcnode_1to325_rc4_mul17_0_stall_out_reg_325_IP_NO_SHIFT_REG);
assign merge_node_stall_in_4 = rcnode_1to325_rc4_mul17_0_stall_out_reg_325_NO_SHIFT_REG;
assign rcnode_1to325_rc4_mul17_0_NO_SHIFT_REG = rcnode_1to325_rc4_mul17_0_reg_325_NO_SHIFT_REG;
assign rcnode_1to325_rc4_mul17_0_stall_in_reg_325_NO_SHIFT_REG = rcnode_1to325_rc4_mul17_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to325_rc4_mul17_0_valid_out_NO_SHIFT_REG = rcnode_1to325_rc4_mul17_0_valid_out_reg_325_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb2_arrayidx_stall_local;
wire [63:0] local_bb2_arrayidx;

assign local_bb2_arrayidx = ((input_inputFeatureMap & 64'hFFFFFFFFFFFFFC00) + (local_bb2_idxprom << 6'h2));

// This section implements an unregistered operation.
// 
wire local_bb2_arrayidx_valid_out;
wire local_bb2_arrayidx_stall_in;
wire local_bb2_arrayidx12_valid_out;
wire local_bb2_arrayidx12_stall_in;
wire local_bb2_arrayidx12_inputs_ready;
wire local_bb2_arrayidx12_stall_local;
wire [63:0] local_bb2_arrayidx12;
 reg local_bb2_arrayidx_consumed_0_NO_SHIFT_REG;
 reg local_bb2_arrayidx12_consumed_0_NO_SHIFT_REG;

assign local_bb2_arrayidx12_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb2_arrayidx12 = ((input_outputFeatureMap & 64'hFFFFFFFFFFFFFC00) + (local_bb2_idxprom << 6'h2));
assign local_bb2_arrayidx12_stall_local = ((local_bb2_arrayidx_stall_in & ~(local_bb2_arrayidx_consumed_0_NO_SHIFT_REG)) | (local_bb2_arrayidx12_stall_in & ~(local_bb2_arrayidx12_consumed_0_NO_SHIFT_REG)));
assign local_bb2_arrayidx_valid_out = (local_bb2_arrayidx12_inputs_ready & ~(local_bb2_arrayidx_consumed_0_NO_SHIFT_REG));
assign local_bb2_arrayidx12_valid_out = (local_bb2_arrayidx12_inputs_ready & ~(local_bb2_arrayidx12_consumed_0_NO_SHIFT_REG));
assign merge_node_stall_in_0 = (|local_bb2_arrayidx12_stall_local);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_arrayidx_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_arrayidx12_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb2_arrayidx_consumed_0_NO_SHIFT_REG <= (local_bb2_arrayidx12_inputs_ready & (local_bb2_arrayidx_consumed_0_NO_SHIFT_REG | ~(local_bb2_arrayidx_stall_in)) & local_bb2_arrayidx12_stall_local);
		local_bb2_arrayidx12_consumed_0_NO_SHIFT_REG <= (local_bb2_arrayidx12_inputs_ready & (local_bb2_arrayidx12_consumed_0_NO_SHIFT_REG | ~(local_bb2_arrayidx12_stall_in)) & local_bb2_arrayidx12_stall_local);
	end
end


// This section implements a registered operation.
// 
wire local_bb2_ld__inputs_ready;
 reg local_bb2_ld__valid_out_NO_SHIFT_REG;
wire local_bb2_ld__stall_in;
wire local_bb2_ld__output_regs_ready;
wire local_bb2_ld__fu_stall_out;
wire local_bb2_ld__fu_valid_out;
wire [31:0] local_bb2_ld__lsu_dataout;
 reg [31:0] local_bb2_ld__NO_SHIFT_REG;
wire local_bb2_ld__causedstall;

lsu_top lsu_local_bb2_ld_ (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb2_ld__fu_stall_out),
	.i_valid(local_bb2_ld__inputs_ready),
	.i_address((input_wii_scale & 64'hFFFFFFFFFFFFFC00)),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(rnode_1to2_c4_exe2_1_NO_SHIFT_REG),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb2_ld__output_regs_ready)),
	.o_valid(local_bb2_ld__fu_valid_out),
	.o_readdata(local_bb2_ld__lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb2_ld__active),
	.avm_address(avm_local_bb2_ld__address),
	.avm_read(avm_local_bb2_ld__read),
	.avm_enable(avm_local_bb2_ld__enable),
	.avm_readdata(avm_local_bb2_ld__readdata),
	.avm_write(avm_local_bb2_ld__write),
	.avm_writeack(avm_local_bb2_ld__writeack),
	.avm_burstcount(avm_local_bb2_ld__burstcount),
	.avm_writedata(avm_local_bb2_ld__writedata),
	.avm_byteenable(avm_local_bb2_ld__byteenable),
	.avm_waitrequest(avm_local_bb2_ld__waitrequest),
	.avm_readdatavalid(avm_local_bb2_ld__readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb2_ld_.AWIDTH = 32;
defparam lsu_local_bb2_ld_.WIDTH_BYTES = 4;
defparam lsu_local_bb2_ld_.MWIDTH_BYTES = 64;
defparam lsu_local_bb2_ld_.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb2_ld_.ALIGNMENT_BYTES = 64;
defparam lsu_local_bb2_ld_.READ = 1;
defparam lsu_local_bb2_ld_.ATOMIC = 0;
defparam lsu_local_bb2_ld_.WIDTH = 32;
defparam lsu_local_bb2_ld_.MWIDTH = 512;
defparam lsu_local_bb2_ld_.ATOMIC_WIDTH = 3;
defparam lsu_local_bb2_ld_.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb2_ld_.KERNEL_SIDE_MEM_LATENCY = 160;
defparam lsu_local_bb2_ld_.MEMORY_SIDE_MEM_LATENCY = 99;
defparam lsu_local_bb2_ld_.USE_WRITE_ACK = 0;
defparam lsu_local_bb2_ld_.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb2_ld_.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb2_ld_.NUMBER_BANKS = 1;
defparam lsu_local_bb2_ld_.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb2_ld_.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb2_ld_.USEINPUTFIFO = 0;
defparam lsu_local_bb2_ld_.USECACHING = 0;
defparam lsu_local_bb2_ld_.USEOUTPUTFIFO = 1;
defparam lsu_local_bb2_ld_.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb2_ld_.ADDRSPACE = 1;
defparam lsu_local_bb2_ld_.STYLE = "BURST-COALESCED";

assign local_bb2_ld__inputs_ready = (rnode_1to2_scale_0_valid_out_NO_SHIFT_REG & rnode_1to2_c4_exe2_0_valid_out_1_NO_SHIFT_REG);
assign local_bb2_ld__output_regs_ready = (&(~(local_bb2_ld__valid_out_NO_SHIFT_REG) | ~(local_bb2_ld__stall_in)));
assign rnode_1to2_scale_0_stall_in_NO_SHIFT_REG = (local_bb2_ld__fu_stall_out | ~(local_bb2_ld__inputs_ready));
assign rnode_1to2_c4_exe2_0_stall_in_1_NO_SHIFT_REG = (local_bb2_ld__fu_stall_out | ~(local_bb2_ld__inputs_ready));
assign local_bb2_ld__causedstall = (local_bb2_ld__inputs_ready && (local_bb2_ld__fu_stall_out && !(~(local_bb2_ld__output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_ld__NO_SHIFT_REG <= 'x;
		local_bb2_ld__valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_ld__output_regs_ready)
		begin
			local_bb2_ld__NO_SHIFT_REG <= local_bb2_ld__lsu_dataout;
			local_bb2_ld__valid_out_NO_SHIFT_REG <= local_bb2_ld__fu_valid_out;
		end
		else
		begin
			if (~(local_bb2_ld__stall_in))
			begin
				local_bb2_ld__valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 165
//  * capacity = 165
 logic rnode_2to167_c4_exe2_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to167_c4_exe2_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to167_c4_exe2_0_NO_SHIFT_REG;
 logic rnode_2to167_c4_exe2_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to167_c4_exe2_0_reg_167_NO_SHIFT_REG;
 logic rnode_2to167_c4_exe2_0_valid_out_reg_167_NO_SHIFT_REG;
 logic rnode_2to167_c4_exe2_0_stall_in_reg_167_NO_SHIFT_REG;
 logic rnode_2to167_c4_exe2_0_stall_out_reg_167_NO_SHIFT_REG;
wire [63:0] rci_rcnode_325to326_rc0_mul17_0_reg_325;

acl_data_fifo rnode_2to167_c4_exe2_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to167_c4_exe2_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to167_c4_exe2_0_stall_in_reg_167_NO_SHIFT_REG),
	.valid_out(rnode_2to167_c4_exe2_0_valid_out_reg_167_NO_SHIFT_REG),
	.stall_out(rnode_2to167_c4_exe2_0_stall_out_reg_167_NO_SHIFT_REG),
	.data_in(rnode_1to2_c4_exe2_2_NO_SHIFT_REG),
	.data_out(rnode_2to167_c4_exe2_0_reg_167_NO_SHIFT_REG)
);

defparam rnode_2to167_c4_exe2_0_reg_167_fifo.DEPTH = 166;
defparam rnode_2to167_c4_exe2_0_reg_167_fifo.DATA_WIDTH = 1;
defparam rnode_2to167_c4_exe2_0_reg_167_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_2to167_c4_exe2_0_reg_167_fifo.IMPL = "ram";

assign rnode_2to167_c4_exe2_0_reg_167_inputs_ready_NO_SHIFT_REG = rnode_1to2_c4_exe2_0_valid_out_2_NO_SHIFT_REG;
assign rnode_1to2_c4_exe2_0_stall_in_2_NO_SHIFT_REG = rnode_2to167_c4_exe2_0_stall_out_reg_167_NO_SHIFT_REG;
assign rnode_2to167_c4_exe2_0_NO_SHIFT_REG = rnode_2to167_c4_exe2_0_reg_167_NO_SHIFT_REG;
assign rnode_2to167_c4_exe2_0_stall_in_reg_167_NO_SHIFT_REG = rnode_2to167_c4_exe2_0_stall_in_NO_SHIFT_REG;
assign rnode_2to167_c4_exe2_0_valid_out_NO_SHIFT_REG = rnode_2to167_c4_exe2_0_valid_out_reg_167_NO_SHIFT_REG;
assign rci_rcnode_325to326_rc0_mul17_0_reg_325[31:0] = input_wii_mul17;
assign rci_rcnode_325to326_rc0_mul17_0_reg_325[63:32] = rcnode_1to325_rc4_mul17_0_NO_SHIFT_REG[63:32];

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_325to326_rc0_mul17_0_valid_out_NO_SHIFT_REG;
 logic rcnode_325to326_rc0_mul17_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rcnode_325to326_rc0_mul17_0_NO_SHIFT_REG;
 logic rcnode_325to326_rc0_mul17_0_reg_326_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rcnode_325to326_rc0_mul17_0_reg_326_NO_SHIFT_REG;
 logic rcnode_325to326_rc0_mul17_0_valid_out_reg_326_NO_SHIFT_REG;
 logic rcnode_325to326_rc0_mul17_0_stall_in_reg_326_NO_SHIFT_REG;
 logic rcnode_325to326_rc0_mul17_0_stall_out_reg_326_IP_NO_SHIFT_REG;
 logic rcnode_325to326_rc0_mul17_0_stall_out_reg_326_NO_SHIFT_REG;

acl_data_fifo rcnode_325to326_rc0_mul17_0_reg_326_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_325to326_rc0_mul17_0_reg_326_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_325to326_rc0_mul17_0_stall_in_reg_326_NO_SHIFT_REG),
	.valid_out(rcnode_325to326_rc0_mul17_0_valid_out_reg_326_NO_SHIFT_REG),
	.stall_out(rcnode_325to326_rc0_mul17_0_stall_out_reg_326_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_325to326_rc0_mul17_0_reg_325),
	.data_out(rcnode_325to326_rc0_mul17_0_reg_326_NO_SHIFT_REG)
);

defparam rcnode_325to326_rc0_mul17_0_reg_326_fifo.DEPTH = 1;
defparam rcnode_325to326_rc0_mul17_0_reg_326_fifo.DATA_WIDTH = 64;
defparam rcnode_325to326_rc0_mul17_0_reg_326_fifo.ALLOW_FULL_WRITE = 1;
defparam rcnode_325to326_rc0_mul17_0_reg_326_fifo.IMPL = "ll_reg";

assign rcnode_325to326_rc0_mul17_0_reg_326_inputs_ready_NO_SHIFT_REG = rcnode_1to325_rc4_mul17_0_valid_out_NO_SHIFT_REG;
assign rcnode_325to326_rc0_mul17_0_stall_out_reg_326_NO_SHIFT_REG = (~(rcnode_325to326_rc0_mul17_0_reg_326_inputs_ready_NO_SHIFT_REG) | rcnode_325to326_rc0_mul17_0_stall_out_reg_326_IP_NO_SHIFT_REG);
assign rcnode_1to325_rc4_mul17_0_stall_in_NO_SHIFT_REG = rcnode_325to326_rc0_mul17_0_stall_out_reg_326_NO_SHIFT_REG;
assign rcnode_325to326_rc0_mul17_0_NO_SHIFT_REG = rcnode_325to326_rc0_mul17_0_reg_326_NO_SHIFT_REG;
assign rcnode_325to326_rc0_mul17_0_stall_in_reg_326_NO_SHIFT_REG = rcnode_325to326_rc0_mul17_0_stall_in_NO_SHIFT_REG;
assign rcnode_325to326_rc0_mul17_0_valid_out_NO_SHIFT_REG = rcnode_325to326_rc0_mul17_0_valid_out_reg_326_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb2_arrayidx_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb2_arrayidx_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_1to2_bb2_arrayidx_0_NO_SHIFT_REG;
 logic rnode_1to2_bb2_arrayidx_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_1to2_bb2_arrayidx_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_arrayidx_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_arrayidx_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_arrayidx_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb2_arrayidx_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb2_arrayidx_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb2_arrayidx_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb2_arrayidx_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb2_arrayidx_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in((local_bb2_arrayidx & 64'hFFFFFFFFFFFFFFFC)),
	.data_out(rnode_1to2_bb2_arrayidx_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb2_arrayidx_0_reg_2_fifo.DEPTH = 2;
defparam rnode_1to2_bb2_arrayidx_0_reg_2_fifo.DATA_WIDTH = 64;
defparam rnode_1to2_bb2_arrayidx_0_reg_2_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to2_bb2_arrayidx_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_bb2_arrayidx_0_reg_2_inputs_ready_NO_SHIFT_REG = local_bb2_arrayidx_valid_out;
assign local_bb2_arrayidx_stall_in = rnode_1to2_bb2_arrayidx_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb2_arrayidx_0_NO_SHIFT_REG = rnode_1to2_bb2_arrayidx_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb2_arrayidx_0_stall_in_reg_2_NO_SHIFT_REG = rnode_1to2_bb2_arrayidx_0_stall_in_NO_SHIFT_REG;
assign rnode_1to2_bb2_arrayidx_0_valid_out_NO_SHIFT_REG = rnode_1to2_bb2_arrayidx_0_valid_out_reg_2_NO_SHIFT_REG;

// Register node:
//  * latency = 166
//  * capacity = 166
 logic rnode_1to167_bb2_arrayidx12_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to167_bb2_arrayidx12_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_1to167_bb2_arrayidx12_0_NO_SHIFT_REG;
 logic rnode_1to167_bb2_arrayidx12_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_1to167_bb2_arrayidx12_0_reg_167_NO_SHIFT_REG;
 logic rnode_1to167_bb2_arrayidx12_0_valid_out_reg_167_NO_SHIFT_REG;
 logic rnode_1to167_bb2_arrayidx12_0_stall_in_reg_167_NO_SHIFT_REG;
 logic rnode_1to167_bb2_arrayidx12_0_stall_out_reg_167_NO_SHIFT_REG;

acl_data_fifo rnode_1to167_bb2_arrayidx12_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to167_bb2_arrayidx12_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to167_bb2_arrayidx12_0_stall_in_reg_167_NO_SHIFT_REG),
	.valid_out(rnode_1to167_bb2_arrayidx12_0_valid_out_reg_167_NO_SHIFT_REG),
	.stall_out(rnode_1to167_bb2_arrayidx12_0_stall_out_reg_167_NO_SHIFT_REG),
	.data_in((local_bb2_arrayidx12 & 64'hFFFFFFFFFFFFFFFC)),
	.data_out(rnode_1to167_bb2_arrayidx12_0_reg_167_NO_SHIFT_REG)
);

defparam rnode_1to167_bb2_arrayidx12_0_reg_167_fifo.DEPTH = 167;
defparam rnode_1to167_bb2_arrayidx12_0_reg_167_fifo.DATA_WIDTH = 64;
defparam rnode_1to167_bb2_arrayidx12_0_reg_167_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to167_bb2_arrayidx12_0_reg_167_fifo.IMPL = "ram";

assign rnode_1to167_bb2_arrayidx12_0_reg_167_inputs_ready_NO_SHIFT_REG = local_bb2_arrayidx12_valid_out;
assign local_bb2_arrayidx12_stall_in = rnode_1to167_bb2_arrayidx12_0_stall_out_reg_167_NO_SHIFT_REG;
assign rnode_1to167_bb2_arrayidx12_0_NO_SHIFT_REG = rnode_1to167_bb2_arrayidx12_0_reg_167_NO_SHIFT_REG;
assign rnode_1to167_bb2_arrayidx12_0_stall_in_reg_167_NO_SHIFT_REG = rnode_1to167_bb2_arrayidx12_0_stall_in_NO_SHIFT_REG;
assign rnode_1to167_bb2_arrayidx12_0_valid_out_NO_SHIFT_REG = rnode_1to167_bb2_arrayidx12_0_valid_out_reg_167_NO_SHIFT_REG;

// This section implements a staging register.
// 
wire rstag_162to162_bb2_ld__valid_out;
wire rstag_162to162_bb2_ld__stall_in;
wire rstag_162to162_bb2_ld__inputs_ready;
wire rstag_162to162_bb2_ld__stall_local;
 reg rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG;
wire rstag_162to162_bb2_ld__combined_valid;
 reg [31:0] rstag_162to162_bb2_ld__staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_162to162_bb2_ld_;

assign rstag_162to162_bb2_ld__inputs_ready = local_bb2_ld__valid_out_NO_SHIFT_REG;
assign rstag_162to162_bb2_ld_ = (rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG ? rstag_162to162_bb2_ld__staging_reg_NO_SHIFT_REG : local_bb2_ld__NO_SHIFT_REG);
assign rstag_162to162_bb2_ld__combined_valid = (rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG | rstag_162to162_bb2_ld__inputs_ready);
assign rstag_162to162_bb2_ld__valid_out = rstag_162to162_bb2_ld__combined_valid;
assign rstag_162to162_bb2_ld__stall_local = rstag_162to162_bb2_ld__stall_in;
assign local_bb2_ld__stall_in = (|rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_162to162_bb2_ld__staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_162to162_bb2_ld__stall_local)
		begin
			if (~(rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG))
			begin
				rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG <= rstag_162to162_bb2_ld__inputs_ready;
			end
		end
		else
		begin
			rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG))
		begin
			rstag_162to162_bb2_ld__staging_reg_NO_SHIFT_REG <= local_bb2_ld__NO_SHIFT_REG;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_167to168_c4_exe2_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_167to168_c4_exe2_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_167to168_c4_exe2_0_NO_SHIFT_REG;
 logic rnode_167to168_c4_exe2_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_167to168_c4_exe2_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_167to168_c4_exe2_1_NO_SHIFT_REG;
 logic rnode_167to168_c4_exe2_0_reg_168_inputs_ready_NO_SHIFT_REG;
 logic rnode_167to168_c4_exe2_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_c4_exe2_0_valid_out_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_c4_exe2_0_stall_in_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_c4_exe2_0_stall_out_reg_168_NO_SHIFT_REG;
 reg rnode_167to168_c4_exe2_0_consumed_0_NO_SHIFT_REG;
 reg rnode_167to168_c4_exe2_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_167to168_c4_exe2_0_reg_168_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_167to168_c4_exe2_0_reg_168_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_167to168_c4_exe2_0_stall_in_0_reg_168_NO_SHIFT_REG),
	.valid_out(rnode_167to168_c4_exe2_0_valid_out_0_reg_168_NO_SHIFT_REG),
	.stall_out(rnode_167to168_c4_exe2_0_stall_out_reg_168_NO_SHIFT_REG),
	.data_in(rnode_2to167_c4_exe2_0_NO_SHIFT_REG),
	.data_out(rnode_167to168_c4_exe2_0_reg_168_NO_SHIFT_REG)
);

defparam rnode_167to168_c4_exe2_0_reg_168_fifo.DEPTH = 2;
defparam rnode_167to168_c4_exe2_0_reg_168_fifo.DATA_WIDTH = 1;
defparam rnode_167to168_c4_exe2_0_reg_168_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_167to168_c4_exe2_0_reg_168_fifo.IMPL = "ll_reg";

assign rnode_167to168_c4_exe2_0_reg_168_inputs_ready_NO_SHIFT_REG = rnode_2to167_c4_exe2_0_valid_out_NO_SHIFT_REG;
assign rnode_2to167_c4_exe2_0_stall_in_NO_SHIFT_REG = rnode_167to168_c4_exe2_0_stall_out_reg_168_NO_SHIFT_REG;
assign rnode_167to168_c4_exe2_0_stall_in_0_reg_168_NO_SHIFT_REG = ((rnode_167to168_c4_exe2_0_stall_in_0_NO_SHIFT_REG & ~(rnode_167to168_c4_exe2_0_consumed_0_NO_SHIFT_REG)) | (rnode_167to168_c4_exe2_0_stall_in_1_NO_SHIFT_REG & ~(rnode_167to168_c4_exe2_0_consumed_1_NO_SHIFT_REG)));
assign rnode_167to168_c4_exe2_0_valid_out_0_NO_SHIFT_REG = (rnode_167to168_c4_exe2_0_valid_out_0_reg_168_NO_SHIFT_REG & ~(rnode_167to168_c4_exe2_0_consumed_0_NO_SHIFT_REG));
assign rnode_167to168_c4_exe2_0_valid_out_1_NO_SHIFT_REG = (rnode_167to168_c4_exe2_0_valid_out_0_reg_168_NO_SHIFT_REG & ~(rnode_167to168_c4_exe2_0_consumed_1_NO_SHIFT_REG));
assign rnode_167to168_c4_exe2_0_NO_SHIFT_REG = rnode_167to168_c4_exe2_0_reg_168_NO_SHIFT_REG;
assign rnode_167to168_c4_exe2_1_NO_SHIFT_REG = rnode_167to168_c4_exe2_0_reg_168_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_167to168_c4_exe2_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_167to168_c4_exe2_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_167to168_c4_exe2_0_consumed_0_NO_SHIFT_REG <= (rnode_167to168_c4_exe2_0_valid_out_0_reg_168_NO_SHIFT_REG & (rnode_167to168_c4_exe2_0_consumed_0_NO_SHIFT_REG | ~(rnode_167to168_c4_exe2_0_stall_in_0_NO_SHIFT_REG)) & rnode_167to168_c4_exe2_0_stall_in_0_reg_168_NO_SHIFT_REG);
		rnode_167to168_c4_exe2_0_consumed_1_NO_SHIFT_REG <= (rnode_167to168_c4_exe2_0_valid_out_0_reg_168_NO_SHIFT_REG & (rnode_167to168_c4_exe2_0_consumed_1_NO_SHIFT_REG | ~(rnode_167to168_c4_exe2_0_stall_in_1_NO_SHIFT_REG)) & rnode_167to168_c4_exe2_0_stall_in_0_reg_168_NO_SHIFT_REG);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb2_add19_valid_out;
wire local_bb2_add19_stall_in;
wire local_bb2_add19_inputs_ready;
wire local_bb2_add19_stall_local;
wire [31:0] local_bb2_add19;

assign local_bb2_add19_inputs_ready = rcnode_325to326_rc0_mul17_0_valid_out_NO_SHIFT_REG;
assign local_bb2_add19 = (input_wii_mul17 + rcnode_325to326_rc0_mul17_0_NO_SHIFT_REG[63:32]);
assign local_bb2_add19_valid_out = local_bb2_add19_inputs_ready;
assign local_bb2_add19_stall_local = local_bb2_add19_stall_in;
assign rcnode_325to326_rc0_mul17_0_stall_in_NO_SHIFT_REG = (|local_bb2_add19_stall_local);

// This section implements a registered operation.
// 
wire local_bb2_ld__u3_inputs_ready;
 reg local_bb2_ld__u3_valid_out_NO_SHIFT_REG;
wire local_bb2_ld__u3_stall_in;
wire local_bb2_ld__u3_output_regs_ready;
wire local_bb2_ld__u3_fu_stall_out;
wire local_bb2_ld__u3_fu_valid_out;
wire [31:0] local_bb2_ld__u3_lsu_dataout;
 reg [31:0] local_bb2_ld__u3_NO_SHIFT_REG;
wire local_bb2_ld__u3_causedstall;

lsu_top lsu_local_bb2_ld__u3 (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb2_ld__u3_fu_stall_out),
	.i_valid(local_bb2_ld__u3_inputs_ready),
	.i_address((rnode_1to2_bb2_arrayidx_0_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFFFC)),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(rnode_1to2_c4_exe2_0_NO_SHIFT_REG),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb2_ld__u3_output_regs_ready)),
	.o_valid(local_bb2_ld__u3_fu_valid_out),
	.o_readdata(local_bb2_ld__u3_lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb2_ld__u3_active),
	.avm_address(avm_local_bb2_ld__u3_address),
	.avm_read(avm_local_bb2_ld__u3_read),
	.avm_enable(avm_local_bb2_ld__u3_enable),
	.avm_readdata(avm_local_bb2_ld__u3_readdata),
	.avm_write(avm_local_bb2_ld__u3_write),
	.avm_writeack(avm_local_bb2_ld__u3_writeack),
	.avm_burstcount(avm_local_bb2_ld__u3_burstcount),
	.avm_writedata(avm_local_bb2_ld__u3_writedata),
	.avm_byteenable(avm_local_bb2_ld__u3_byteenable),
	.avm_waitrequest(avm_local_bb2_ld__u3_waitrequest),
	.avm_readdatavalid(avm_local_bb2_ld__u3_readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb2_ld__u3.AWIDTH = 32;
defparam lsu_local_bb2_ld__u3.WIDTH_BYTES = 4;
defparam lsu_local_bb2_ld__u3.MWIDTH_BYTES = 64;
defparam lsu_local_bb2_ld__u3.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb2_ld__u3.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb2_ld__u3.READ = 1;
defparam lsu_local_bb2_ld__u3.ATOMIC = 0;
defparam lsu_local_bb2_ld__u3.WIDTH = 32;
defparam lsu_local_bb2_ld__u3.MWIDTH = 512;
defparam lsu_local_bb2_ld__u3.ATOMIC_WIDTH = 3;
defparam lsu_local_bb2_ld__u3.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb2_ld__u3.KERNEL_SIDE_MEM_LATENCY = 160;
defparam lsu_local_bb2_ld__u3.MEMORY_SIDE_MEM_LATENCY = 99;
defparam lsu_local_bb2_ld__u3.USE_WRITE_ACK = 0;
defparam lsu_local_bb2_ld__u3.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb2_ld__u3.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb2_ld__u3.NUMBER_BANKS = 1;
defparam lsu_local_bb2_ld__u3.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb2_ld__u3.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb2_ld__u3.USEINPUTFIFO = 0;
defparam lsu_local_bb2_ld__u3.USECACHING = 0;
defparam lsu_local_bb2_ld__u3.USEOUTPUTFIFO = 1;
defparam lsu_local_bb2_ld__u3.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb2_ld__u3.ADDRSPACE = 1;
defparam lsu_local_bb2_ld__u3.STYLE = "BURST-COALESCED";

assign local_bb2_ld__u3_inputs_ready = (rnode_1to2_bb2_arrayidx_0_valid_out_NO_SHIFT_REG & rnode_1to2_c4_exe2_0_valid_out_0_NO_SHIFT_REG);
assign local_bb2_ld__u3_output_regs_ready = (&(~(local_bb2_ld__u3_valid_out_NO_SHIFT_REG) | ~(local_bb2_ld__u3_stall_in)));
assign rnode_1to2_bb2_arrayidx_0_stall_in_NO_SHIFT_REG = (local_bb2_ld__u3_fu_stall_out | ~(local_bb2_ld__u3_inputs_ready));
assign rnode_1to2_c4_exe2_0_stall_in_0_NO_SHIFT_REG = (local_bb2_ld__u3_fu_stall_out | ~(local_bb2_ld__u3_inputs_ready));
assign local_bb2_ld__u3_causedstall = (local_bb2_ld__u3_inputs_ready && (local_bb2_ld__u3_fu_stall_out && !(~(local_bb2_ld__u3_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_ld__u3_NO_SHIFT_REG <= 'x;
		local_bb2_ld__u3_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_ld__u3_output_regs_ready)
		begin
			local_bb2_ld__u3_NO_SHIFT_REG <= local_bb2_ld__u3_lsu_dataout;
			local_bb2_ld__u3_valid_out_NO_SHIFT_REG <= local_bb2_ld__u3_fu_valid_out;
		end
		else
		begin
			if (~(local_bb2_ld__u3_stall_in))
			begin
				local_bb2_ld__u3_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_167to168_bb2_arrayidx12_0_valid_out_NO_SHIFT_REG;
 logic rnode_167to168_bb2_arrayidx12_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_167to168_bb2_arrayidx12_0_NO_SHIFT_REG;
 logic rnode_167to168_bb2_arrayidx12_0_reg_168_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_167to168_bb2_arrayidx12_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb2_arrayidx12_0_valid_out_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb2_arrayidx12_0_stall_in_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb2_arrayidx12_0_stall_out_reg_168_NO_SHIFT_REG;

acl_data_fifo rnode_167to168_bb2_arrayidx12_0_reg_168_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_167to168_bb2_arrayidx12_0_reg_168_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_167to168_bb2_arrayidx12_0_stall_in_reg_168_NO_SHIFT_REG),
	.valid_out(rnode_167to168_bb2_arrayidx12_0_valid_out_reg_168_NO_SHIFT_REG),
	.stall_out(rnode_167to168_bb2_arrayidx12_0_stall_out_reg_168_NO_SHIFT_REG),
	.data_in((rnode_1to167_bb2_arrayidx12_0_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFFFC)),
	.data_out(rnode_167to168_bb2_arrayidx12_0_reg_168_NO_SHIFT_REG)
);

defparam rnode_167to168_bb2_arrayidx12_0_reg_168_fifo.DEPTH = 2;
defparam rnode_167to168_bb2_arrayidx12_0_reg_168_fifo.DATA_WIDTH = 64;
defparam rnode_167to168_bb2_arrayidx12_0_reg_168_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_167to168_bb2_arrayidx12_0_reg_168_fifo.IMPL = "ll_reg";

assign rnode_167to168_bb2_arrayidx12_0_reg_168_inputs_ready_NO_SHIFT_REG = rnode_1to167_bb2_arrayidx12_0_valid_out_NO_SHIFT_REG;
assign rnode_1to167_bb2_arrayidx12_0_stall_in_NO_SHIFT_REG = rnode_167to168_bb2_arrayidx12_0_stall_out_reg_168_NO_SHIFT_REG;
assign rnode_167to168_bb2_arrayidx12_0_NO_SHIFT_REG = rnode_167to168_bb2_arrayidx12_0_reg_168_NO_SHIFT_REG;
assign rnode_167to168_bb2_arrayidx12_0_stall_in_reg_168_NO_SHIFT_REG = rnode_167to168_bb2_arrayidx12_0_stall_in_NO_SHIFT_REG;
assign rnode_167to168_bb2_arrayidx12_0_valid_out_NO_SHIFT_REG = rnode_167to168_bb2_arrayidx12_0_valid_out_reg_168_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb2_var__stall_local;
wire [31:0] local_bb2_var_;

assign local_bb2_var_ = rstag_162to162_bb2_ld_;

// Register node:
//  * latency = 159
//  * capacity = 159
 logic rnode_168to327_c4_exe2_0_valid_out_NO_SHIFT_REG;
 logic rnode_168to327_c4_exe2_0_stall_in_NO_SHIFT_REG;
 logic rnode_168to327_c4_exe2_0_NO_SHIFT_REG;
 logic rnode_168to327_c4_exe2_0_reg_327_inputs_ready_NO_SHIFT_REG;
 logic rnode_168to327_c4_exe2_0_reg_327_NO_SHIFT_REG;
 logic rnode_168to327_c4_exe2_0_valid_out_reg_327_NO_SHIFT_REG;
 logic rnode_168to327_c4_exe2_0_stall_in_reg_327_NO_SHIFT_REG;
 logic rnode_168to327_c4_exe2_0_stall_out_reg_327_NO_SHIFT_REG;

acl_data_fifo rnode_168to327_c4_exe2_0_reg_327_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_168to327_c4_exe2_0_reg_327_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_168to327_c4_exe2_0_stall_in_reg_327_NO_SHIFT_REG),
	.valid_out(rnode_168to327_c4_exe2_0_valid_out_reg_327_NO_SHIFT_REG),
	.stall_out(rnode_168to327_c4_exe2_0_stall_out_reg_327_NO_SHIFT_REG),
	.data_in(rnode_167to168_c4_exe2_1_NO_SHIFT_REG),
	.data_out(rnode_168to327_c4_exe2_0_reg_327_NO_SHIFT_REG)
);

defparam rnode_168to327_c4_exe2_0_reg_327_fifo.DEPTH = 160;
defparam rnode_168to327_c4_exe2_0_reg_327_fifo.DATA_WIDTH = 1;
defparam rnode_168to327_c4_exe2_0_reg_327_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_168to327_c4_exe2_0_reg_327_fifo.IMPL = "ram";

assign rnode_168to327_c4_exe2_0_reg_327_inputs_ready_NO_SHIFT_REG = rnode_167to168_c4_exe2_0_valid_out_1_NO_SHIFT_REG;
assign rnode_167to168_c4_exe2_0_stall_in_1_NO_SHIFT_REG = rnode_168to327_c4_exe2_0_stall_out_reg_327_NO_SHIFT_REG;
assign rnode_168to327_c4_exe2_0_NO_SHIFT_REG = rnode_168to327_c4_exe2_0_reg_327_NO_SHIFT_REG;
assign rnode_168to327_c4_exe2_0_stall_in_reg_327_NO_SHIFT_REG = rnode_168to327_c4_exe2_0_stall_in_NO_SHIFT_REG;
assign rnode_168to327_c4_exe2_0_valid_out_NO_SHIFT_REG = rnode_168to327_c4_exe2_0_valid_out_reg_327_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_326to327_bb2_add19_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_326to327_bb2_add19_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_326to327_bb2_add19_0_NO_SHIFT_REG;
 logic rnode_326to327_bb2_add19_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_326to327_bb2_add19_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_326to327_bb2_add19_1_NO_SHIFT_REG;
 logic rnode_326to327_bb2_add19_0_reg_327_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_326to327_bb2_add19_0_reg_327_NO_SHIFT_REG;
 logic rnode_326to327_bb2_add19_0_valid_out_0_reg_327_NO_SHIFT_REG;
 logic rnode_326to327_bb2_add19_0_stall_in_0_reg_327_NO_SHIFT_REG;
 logic rnode_326to327_bb2_add19_0_stall_out_reg_327_NO_SHIFT_REG;
 reg rnode_326to327_bb2_add19_0_consumed_0_NO_SHIFT_REG;
 reg rnode_326to327_bb2_add19_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_326to327_bb2_add19_0_reg_327_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_326to327_bb2_add19_0_reg_327_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_326to327_bb2_add19_0_stall_in_0_reg_327_NO_SHIFT_REG),
	.valid_out(rnode_326to327_bb2_add19_0_valid_out_0_reg_327_NO_SHIFT_REG),
	.stall_out(rnode_326to327_bb2_add19_0_stall_out_reg_327_NO_SHIFT_REG),
	.data_in(local_bb2_add19),
	.data_out(rnode_326to327_bb2_add19_0_reg_327_NO_SHIFT_REG)
);

defparam rnode_326to327_bb2_add19_0_reg_327_fifo.DEPTH = 1;
defparam rnode_326to327_bb2_add19_0_reg_327_fifo.DATA_WIDTH = 32;
defparam rnode_326to327_bb2_add19_0_reg_327_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_326to327_bb2_add19_0_reg_327_fifo.IMPL = "ll_reg";

assign rnode_326to327_bb2_add19_0_reg_327_inputs_ready_NO_SHIFT_REG = local_bb2_add19_valid_out;
assign local_bb2_add19_stall_in = rnode_326to327_bb2_add19_0_stall_out_reg_327_NO_SHIFT_REG;
assign rnode_326to327_bb2_add19_0_stall_in_0_reg_327_NO_SHIFT_REG = ((rnode_326to327_bb2_add19_0_stall_in_0_NO_SHIFT_REG & ~(rnode_326to327_bb2_add19_0_consumed_0_NO_SHIFT_REG)) | (rnode_326to327_bb2_add19_0_stall_in_1_NO_SHIFT_REG & ~(rnode_326to327_bb2_add19_0_consumed_1_NO_SHIFT_REG)));
assign rnode_326to327_bb2_add19_0_valid_out_0_NO_SHIFT_REG = (rnode_326to327_bb2_add19_0_valid_out_0_reg_327_NO_SHIFT_REG & ~(rnode_326to327_bb2_add19_0_consumed_0_NO_SHIFT_REG));
assign rnode_326to327_bb2_add19_0_valid_out_1_NO_SHIFT_REG = (rnode_326to327_bb2_add19_0_valid_out_0_reg_327_NO_SHIFT_REG & ~(rnode_326to327_bb2_add19_0_consumed_1_NO_SHIFT_REG));
assign rnode_326to327_bb2_add19_0_NO_SHIFT_REG = rnode_326to327_bb2_add19_0_reg_327_NO_SHIFT_REG;
assign rnode_326to327_bb2_add19_1_NO_SHIFT_REG = rnode_326to327_bb2_add19_0_reg_327_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_326to327_bb2_add19_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_326to327_bb2_add19_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_326to327_bb2_add19_0_consumed_0_NO_SHIFT_REG <= (rnode_326to327_bb2_add19_0_valid_out_0_reg_327_NO_SHIFT_REG & (rnode_326to327_bb2_add19_0_consumed_0_NO_SHIFT_REG | ~(rnode_326to327_bb2_add19_0_stall_in_0_NO_SHIFT_REG)) & rnode_326to327_bb2_add19_0_stall_in_0_reg_327_NO_SHIFT_REG);
		rnode_326to327_bb2_add19_0_consumed_1_NO_SHIFT_REG <= (rnode_326to327_bb2_add19_0_valid_out_0_reg_327_NO_SHIFT_REG & (rnode_326to327_bb2_add19_0_consumed_1_NO_SHIFT_REG | ~(rnode_326to327_bb2_add19_0_stall_in_1_NO_SHIFT_REG)) & rnode_326to327_bb2_add19_0_stall_in_0_reg_327_NO_SHIFT_REG);
	end
end


// This section implements a staging register.
// 
wire rstag_162to162_bb2_ld__u3_valid_out;
wire rstag_162to162_bb2_ld__u3_stall_in;
wire rstag_162to162_bb2_ld__u3_inputs_ready;
wire rstag_162to162_bb2_ld__u3_stall_local;
 reg rstag_162to162_bb2_ld__u3_staging_valid_NO_SHIFT_REG;
wire rstag_162to162_bb2_ld__u3_combined_valid;
 reg [31:0] rstag_162to162_bb2_ld__u3_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_162to162_bb2_ld__u3;

assign rstag_162to162_bb2_ld__u3_inputs_ready = local_bb2_ld__u3_valid_out_NO_SHIFT_REG;
assign rstag_162to162_bb2_ld__u3 = (rstag_162to162_bb2_ld__u3_staging_valid_NO_SHIFT_REG ? rstag_162to162_bb2_ld__u3_staging_reg_NO_SHIFT_REG : local_bb2_ld__u3_NO_SHIFT_REG);
assign rstag_162to162_bb2_ld__u3_combined_valid = (rstag_162to162_bb2_ld__u3_staging_valid_NO_SHIFT_REG | rstag_162to162_bb2_ld__u3_inputs_ready);
assign rstag_162to162_bb2_ld__u3_valid_out = rstag_162to162_bb2_ld__u3_combined_valid;
assign rstag_162to162_bb2_ld__u3_stall_local = rstag_162to162_bb2_ld__u3_stall_in;
assign local_bb2_ld__u3_stall_in = (|rstag_162to162_bb2_ld__u3_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_162to162_bb2_ld__u3_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_162to162_bb2_ld__u3_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_162to162_bb2_ld__u3_stall_local)
		begin
			if (~(rstag_162to162_bb2_ld__u3_staging_valid_NO_SHIFT_REG))
			begin
				rstag_162to162_bb2_ld__u3_staging_valid_NO_SHIFT_REG <= rstag_162to162_bb2_ld__u3_inputs_ready;
			end
		end
		else
		begin
			rstag_162to162_bb2_ld__u3_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_162to162_bb2_ld__u3_staging_valid_NO_SHIFT_REG))
		begin
			rstag_162to162_bb2_ld__u3_staging_reg_NO_SHIFT_REG <= local_bb2_ld__u3_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb2_shr2_i_stall_local;
wire [31:0] local_bb2_shr2_i;

assign local_bb2_shr2_i = (local_bb2_var_ >> 32'h17);

// This section implements an unregistered operation.
// 
wire local_bb2_and6_i_stall_local;
wire [31:0] local_bb2_and6_i;

assign local_bb2_and6_i = (local_bb2_var_ & 32'h7FFFFF);

// This section implements an unregistered operation.
// 
wire local_bb2_cmp20_valid_out;
wire local_bb2_cmp20_stall_in;
wire local_bb2_cmp20_inputs_ready;
wire local_bb2_cmp20_stall_local;
wire local_bb2_cmp20;
wire [64:0] rci_rcnode_327to328_rc1_bb2_add19_0_reg_327;

assign local_bb2_cmp20_inputs_ready = rnode_326to327_bb2_add19_0_valid_out_0_NO_SHIFT_REG;
assign local_bb2_cmp20 = ($signed(rnode_326to327_bb2_add19_0_NO_SHIFT_REG) >= $signed(input_wii_ld_));
assign local_bb2_cmp20_valid_out = local_bb2_cmp20_inputs_ready;
assign local_bb2_cmp20_stall_local = local_bb2_cmp20_stall_in;
assign rnode_326to327_bb2_add19_0_stall_in_0_NO_SHIFT_REG = (|local_bb2_cmp20_stall_local);
assign rci_rcnode_327to328_rc1_bb2_add19_0_reg_327[31:0] = rnode_326to327_bb2_add19_1_NO_SHIFT_REG;
assign rci_rcnode_327to328_rc1_bb2_add19_0_reg_327[63:32] = rnode_1to327_input_acl_hw_wg_id_0_NO_SHIFT_REG;
assign rci_rcnode_327to328_rc1_bb2_add19_0_reg_327[64] = rnode_168to327_c4_exe2_0_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_327to328_rc1_bb2_add19_0_valid_out_0_NO_SHIFT_REG;
 logic rcnode_327to328_rc1_bb2_add19_0_stall_in_0_NO_SHIFT_REG;
 logic [64:0] rcnode_327to328_rc1_bb2_add19_0_NO_SHIFT_REG;
 logic rcnode_327to328_rc1_bb2_add19_0_valid_out_1_NO_SHIFT_REG;
 logic rcnode_327to328_rc1_bb2_add19_0_stall_in_1_NO_SHIFT_REG;
 logic [64:0] rcnode_327to328_rc1_bb2_add19_1_NO_SHIFT_REG;
 logic rcnode_327to328_rc1_bb2_add19_0_reg_328_inputs_ready_NO_SHIFT_REG;
 logic [64:0] rcnode_327to328_rc1_bb2_add19_0_reg_328_NO_SHIFT_REG;
 logic rcnode_327to328_rc1_bb2_add19_0_valid_out_0_reg_328_NO_SHIFT_REG;
 logic rcnode_327to328_rc1_bb2_add19_0_stall_in_0_reg_328_NO_SHIFT_REG;
 logic rcnode_327to328_rc1_bb2_add19_0_stall_out_0_reg_328_IP_NO_SHIFT_REG;
 logic rcnode_327to328_rc1_bb2_add19_0_stall_out_0_reg_328_NO_SHIFT_REG;

acl_data_fifo rcnode_327to328_rc1_bb2_add19_0_reg_328_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_327to328_rc1_bb2_add19_0_reg_328_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_327to328_rc1_bb2_add19_0_stall_in_0_reg_328_NO_SHIFT_REG),
	.valid_out(rcnode_327to328_rc1_bb2_add19_0_valid_out_0_reg_328_NO_SHIFT_REG),
	.stall_out(rcnode_327to328_rc1_bb2_add19_0_stall_out_0_reg_328_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_327to328_rc1_bb2_add19_0_reg_327),
	.data_out(rcnode_327to328_rc1_bb2_add19_0_reg_328_NO_SHIFT_REG)
);

defparam rcnode_327to328_rc1_bb2_add19_0_reg_328_fifo.DEPTH = 1;
defparam rcnode_327to328_rc1_bb2_add19_0_reg_328_fifo.DATA_WIDTH = 65;
defparam rcnode_327to328_rc1_bb2_add19_0_reg_328_fifo.ALLOW_FULL_WRITE = 1;
defparam rcnode_327to328_rc1_bb2_add19_0_reg_328_fifo.IMPL = "ll_reg";

assign rcnode_327to328_rc1_bb2_add19_0_reg_328_inputs_ready_NO_SHIFT_REG = (rnode_326to327_bb2_add19_0_valid_out_1_NO_SHIFT_REG & rnode_1to327_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG & rnode_168to327_c4_exe2_0_valid_out_NO_SHIFT_REG);
assign rcnode_327to328_rc1_bb2_add19_0_stall_out_0_reg_328_NO_SHIFT_REG = (~(rcnode_327to328_rc1_bb2_add19_0_reg_328_inputs_ready_NO_SHIFT_REG) | rcnode_327to328_rc1_bb2_add19_0_stall_out_0_reg_328_IP_NO_SHIFT_REG);
assign rnode_326to327_bb2_add19_0_stall_in_1_NO_SHIFT_REG = rcnode_327to328_rc1_bb2_add19_0_stall_out_0_reg_328_NO_SHIFT_REG;
assign rnode_1to327_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG = rcnode_327to328_rc1_bb2_add19_0_stall_out_0_reg_328_NO_SHIFT_REG;
assign rnode_168to327_c4_exe2_0_stall_in_NO_SHIFT_REG = rcnode_327to328_rc1_bb2_add19_0_stall_out_0_reg_328_NO_SHIFT_REG;
assign rcnode_327to328_rc1_bb2_add19_0_stall_in_0_reg_328_NO_SHIFT_REG = (rcnode_327to328_rc1_bb2_add19_0_stall_in_0_NO_SHIFT_REG | rcnode_327to328_rc1_bb2_add19_0_stall_in_1_NO_SHIFT_REG);
assign rcnode_327to328_rc1_bb2_add19_0_valid_out_0_NO_SHIFT_REG = rcnode_327to328_rc1_bb2_add19_0_valid_out_0_reg_328_NO_SHIFT_REG;
assign rcnode_327to328_rc1_bb2_add19_0_valid_out_1_NO_SHIFT_REG = rcnode_327to328_rc1_bb2_add19_0_valid_out_0_reg_328_NO_SHIFT_REG;
assign rcnode_327to328_rc1_bb2_add19_0_NO_SHIFT_REG = rcnode_327to328_rc1_bb2_add19_0_reg_328_NO_SHIFT_REG;
assign rcnode_327to328_rc1_bb2_add19_1_NO_SHIFT_REG = rcnode_327to328_rc1_bb2_add19_0_reg_328_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb2_var__u4_stall_local;
wire [31:0] local_bb2_var__u4;

assign local_bb2_var__u4 = rstag_162to162_bb2_ld__u3;

// This section implements an unregistered operation.
// 
wire local_bb2_and3_i_stall_local;
wire [31:0] local_bb2_and3_i;

assign local_bb2_and3_i = ((local_bb2_shr2_i & 32'h1FF) & 32'hFF);

// This section implements an unregistered operation.
// 
wire local_bb2_lnot17_i_stall_local;
wire local_bb2_lnot17_i;

assign local_bb2_lnot17_i = ((local_bb2_and6_i & 32'h7FFFFF) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb2_or47_i_stall_local;
wire [31:0] local_bb2_or47_i;

assign local_bb2_or47_i = ((local_bb2_and6_i & 32'h7FFFFF) | 32'h800000);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_327to328_bb2_cmp20_0_valid_out_NO_SHIFT_REG;
 logic rnode_327to328_bb2_cmp20_0_stall_in_NO_SHIFT_REG;
 logic rnode_327to328_bb2_cmp20_0_NO_SHIFT_REG;
 logic rnode_327to328_bb2_cmp20_0_reg_328_inputs_ready_NO_SHIFT_REG;
 logic rnode_327to328_bb2_cmp20_0_reg_328_NO_SHIFT_REG;
 logic rnode_327to328_bb2_cmp20_0_valid_out_reg_328_NO_SHIFT_REG;
 logic rnode_327to328_bb2_cmp20_0_stall_in_reg_328_NO_SHIFT_REG;
 logic rnode_327to328_bb2_cmp20_0_stall_out_reg_328_NO_SHIFT_REG;

acl_data_fifo rnode_327to328_bb2_cmp20_0_reg_328_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_327to328_bb2_cmp20_0_reg_328_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_327to328_bb2_cmp20_0_stall_in_reg_328_NO_SHIFT_REG),
	.valid_out(rnode_327to328_bb2_cmp20_0_valid_out_reg_328_NO_SHIFT_REG),
	.stall_out(rnode_327to328_bb2_cmp20_0_stall_out_reg_328_NO_SHIFT_REG),
	.data_in(local_bb2_cmp20),
	.data_out(rnode_327to328_bb2_cmp20_0_reg_328_NO_SHIFT_REG)
);

defparam rnode_327to328_bb2_cmp20_0_reg_328_fifo.DEPTH = 1;
defparam rnode_327to328_bb2_cmp20_0_reg_328_fifo.DATA_WIDTH = 1;
defparam rnode_327to328_bb2_cmp20_0_reg_328_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_327to328_bb2_cmp20_0_reg_328_fifo.IMPL = "ll_reg";

assign rnode_327to328_bb2_cmp20_0_reg_328_inputs_ready_NO_SHIFT_REG = local_bb2_cmp20_valid_out;
assign local_bb2_cmp20_stall_in = rnode_327to328_bb2_cmp20_0_stall_out_reg_328_NO_SHIFT_REG;
assign rnode_327to328_bb2_cmp20_0_NO_SHIFT_REG = rnode_327to328_bb2_cmp20_0_reg_328_NO_SHIFT_REG;
assign rnode_327to328_bb2_cmp20_0_stall_in_reg_328_NO_SHIFT_REG = rnode_327to328_bb2_cmp20_0_stall_in_NO_SHIFT_REG;
assign rnode_327to328_bb2_cmp20_0_valid_out_NO_SHIFT_REG = rnode_327to328_bb2_cmp20_0_valid_out_reg_328_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb2_shr_i_stall_local;
wire [31:0] local_bb2_shr_i;

assign local_bb2_shr_i = (local_bb2_var__u4 >> 32'h17);

// This section implements an unregistered operation.
// 
wire local_bb2_xor_i_stall_local;
wire [31:0] local_bb2_xor_i;

assign local_bb2_xor_i = (local_bb2_var_ ^ local_bb2_var__u4);

// This section implements an unregistered operation.
// 
wire local_bb2_and5_i_stall_local;
wire [31:0] local_bb2_and5_i;

assign local_bb2_and5_i = (local_bb2_var__u4 & 32'h7FFFFF);

// This section implements an unregistered operation.
// 
wire local_bb2_var__u5_stall_local;
wire [31:0] local_bb2_var__u5;

assign local_bb2_var__u5 = (local_bb2_var__u4 | local_bb2_var_);

// This section implements an unregistered operation.
// 
wire local_bb2_lnot8_i_stall_local;
wire local_bb2_lnot8_i;

assign local_bb2_lnot8_i = ((local_bb2_and3_i & 32'hFF) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb2_cmp11_i_stall_local;
wire local_bb2_cmp11_i;

assign local_bb2_cmp11_i = ((local_bb2_and3_i & 32'hFF) == 32'hFF);

// This section implements an unregistered operation.
// 
wire local_bb2_var__u6_stall_local;
wire [31:0] local_bb2_var__u6;

assign local_bb2_var__u6 = ((local_bb2_and3_i & 32'hFF) | (local_bb2_and6_i & 32'h7FFFFF));

// This section implements an unregistered operation.
// 
wire local_bb2_conv1_i_i_stall_local;
wire [63:0] local_bb2_conv1_i_i;

assign local_bb2_conv1_i_i[63:32] = 32'h0;
assign local_bb2_conv1_i_i[31:0] = ((local_bb2_or47_i & 32'hFFFFFF) | 32'h800000);

// This section implements an unregistered operation.
// 
wire local_bb2_cmp20_GUARD_valid_out;
wire local_bb2_cmp20_GUARD_stall_in;
wire local_bb2_cmp20_GUARD_inputs_ready;
wire local_bb2_cmp20_GUARD_stall_local;
wire local_bb2_cmp20_GUARD;

assign local_bb2_cmp20_GUARD_inputs_ready = (rnode_327to328_bb2_cmp20_0_valid_out_NO_SHIFT_REG & rcnode_327to328_rc1_bb2_add19_0_valid_out_1_NO_SHIFT_REG);
assign local_bb2_cmp20_GUARD = (rnode_327to328_bb2_cmp20_0_NO_SHIFT_REG | rcnode_327to328_rc1_bb2_add19_0_NO_SHIFT_REG[64]);
assign local_bb2_cmp20_GUARD_valid_out = local_bb2_cmp20_GUARD_inputs_ready;
assign local_bb2_cmp20_GUARD_stall_local = local_bb2_cmp20_GUARD_stall_in;
assign rnode_327to328_bb2_cmp20_0_stall_in_NO_SHIFT_REG = (local_bb2_cmp20_GUARD_stall_local | ~(local_bb2_cmp20_GUARD_inputs_ready));
assign rcnode_327to328_rc1_bb2_add19_0_stall_in_1_NO_SHIFT_REG = (local_bb2_cmp20_GUARD_stall_local | ~(local_bb2_cmp20_GUARD_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb2_and_i_stall_local;
wire [31:0] local_bb2_and_i;

assign local_bb2_and_i = ((local_bb2_shr_i & 32'h1FF) & 32'hFF);

// This section implements an unregistered operation.
// 
wire local_bb2_lnot14_not_i_stall_local;
wire local_bb2_lnot14_not_i;

assign local_bb2_lnot14_not_i = ((local_bb2_and5_i & 32'h7FFFFF) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb2_or_i_stall_local;
wire [31:0] local_bb2_or_i;

assign local_bb2_or_i = ((local_bb2_and5_i & 32'h7FFFFF) | 32'h800000);

// This section implements an unregistered operation.
// 
wire local_bb2_var__u7_stall_local;
wire [31:0] local_bb2_var__u7;

assign local_bb2_var__u7 = (local_bb2_var__u5 & 32'h7FFFFF);

// This section implements an unregistered operation.
// 
wire local_bb2_brmerge13_demorgan_i_stall_local;
wire local_bb2_brmerge13_demorgan_i;

assign local_bb2_brmerge13_demorgan_i = (local_bb2_cmp11_i & local_bb2_lnot17_i);

// This section implements an unregistered operation.
// 
wire local_bb2_var__u8_stall_local;
wire local_bb2_var__u8;

assign local_bb2_var__u8 = ((local_bb2_var__u6 & 32'h7FFFFF) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb2_lnot_i_stall_local;
wire local_bb2_lnot_i;

assign local_bb2_lnot_i = ((local_bb2_and_i & 32'hFF) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb2_cmp_i_stall_local;
wire local_bb2_cmp_i;

assign local_bb2_cmp_i = ((local_bb2_and_i & 32'hFF) == 32'hFF);

// This section implements an unregistered operation.
// 
wire local_bb2_var__u9_stall_local;
wire [31:0] local_bb2_var__u9;

assign local_bb2_var__u9 = ((local_bb2_and_i & 32'hFF) | (local_bb2_and5_i & 32'h7FFFFF));

// This section implements an unregistered operation.
// 
wire local_bb2_add_i_stall_local;
wire [31:0] local_bb2_add_i;

assign local_bb2_add_i = ((local_bb2_and3_i & 32'hFF) + (local_bb2_and_i & 32'hFF));

// This section implements an unregistered operation.
// 
wire local_bb2_conv_i_i_stall_local;
wire [63:0] local_bb2_conv_i_i;

assign local_bb2_conv_i_i[63:32] = 32'h0;
assign local_bb2_conv_i_i[31:0] = ((local_bb2_or_i & 32'hFFFFFF) | 32'h800000);

// This section implements an unregistered operation.
// 
wire local_bb2_var__u10_stall_local;
wire local_bb2_var__u10;

assign local_bb2_var__u10 = ((local_bb2_var__u7 & 32'h7FFFFF) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb2__not_i_stall_local;
wire local_bb2__not_i;

assign local_bb2__not_i = (local_bb2_var__u8 ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb2__mux_mux_i_stall_local;
wire local_bb2__mux_mux_i;

assign local_bb2__mux_mux_i = (local_bb2_var__u8 | local_bb2_cmp11_i);

// This section implements an unregistered operation.
// 
wire local_bb2_reduction_3_i_stall_local;
wire local_bb2_reduction_3_i;

assign local_bb2_reduction_3_i = (local_bb2_lnot_i | local_bb2_lnot8_i);

// This section implements an unregistered operation.
// 
wire local_bb2__20_demorgan_i_stall_local;
wire local_bb2__20_demorgan_i;

assign local_bb2__20_demorgan_i = (local_bb2_cmp_i | local_bb2_brmerge13_demorgan_i);

// This section implements an unregistered operation.
// 
wire local_bb2__22_i_stall_local;
wire local_bb2__22_i;

assign local_bb2__22_i = (local_bb2_cmp_i & local_bb2_lnot14_not_i);

// This section implements an unregistered operation.
// 
wire local_bb2_var__u11_stall_local;
wire local_bb2_var__u11;

assign local_bb2_var__u11 = (local_bb2_cmp_i | local_bb2_cmp11_i);

// This section implements an unregistered operation.
// 
wire local_bb2_var__u12_stall_local;
wire local_bb2_var__u12;

assign local_bb2_var__u12 = ((local_bb2_var__u9 & 32'h7FFFFF) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb2_reduction_1_i_stall_local;
wire local_bb2_reduction_1_i;

assign local_bb2_reduction_1_i = (local_bb2_cmp11_i & local_bb2__not_i);

// This section implements an unregistered operation.
// 
wire local_bb2_reduction_2_i_stall_local;
wire local_bb2_reduction_2_i;

assign local_bb2_reduction_2_i = (local_bb2_var__u10 & local_bb2_reduction_1_i);

// This section implements an unregistered operation.
// 
wire local_bb2__18_i_stall_local;
wire local_bb2__18_i;

assign local_bb2__18_i = (local_bb2_cmp_i ? local_bb2_reduction_2_i : local_bb2_brmerge13_demorgan_i);

// This section implements an unregistered operation.
// 
wire local_bb2__19_i_stall_local;
wire local_bb2__19_i;

assign local_bb2__19_i = (local_bb2__18_i ? local_bb2_var__u12 : local_bb2__mux_mux_i);

// This section implements an unregistered operation.
// 
wire local_bb2__21_i_stall_local;
wire local_bb2__21_i;

assign local_bb2__21_i = (local_bb2__20_demorgan_i ? local_bb2__19_i : local_bb2_cmp11_i);

// This section implements an unregistered operation.
// 
wire local_bb2_xor_i_valid_out;
wire local_bb2_xor_i_stall_in;
wire local_bb2_add_i_valid_out;
wire local_bb2_add_i_stall_in;
wire local_bb2_conv1_i_i_valid_out;
wire local_bb2_conv1_i_i_stall_in;
wire local_bb2_conv_i_i_valid_out;
wire local_bb2_conv_i_i_stall_in;
wire local_bb2_reduction_3_i_valid_out;
wire local_bb2_reduction_3_i_stall_in;
wire local_bb2_var__u11_valid_out;
wire local_bb2_var__u11_stall_in;
wire local_bb2__23_i_valid_out;
wire local_bb2__23_i_stall_in;
wire local_bb2__23_i_inputs_ready;
wire local_bb2__23_i_stall_local;
wire local_bb2__23_i;
 reg local_bb2_xor_i_consumed_0_NO_SHIFT_REG;
 reg local_bb2_add_i_consumed_0_NO_SHIFT_REG;
 reg local_bb2_conv1_i_i_consumed_0_NO_SHIFT_REG;
 reg local_bb2_conv_i_i_consumed_0_NO_SHIFT_REG;
 reg local_bb2_reduction_3_i_consumed_0_NO_SHIFT_REG;
 reg local_bb2_var__u11_consumed_0_NO_SHIFT_REG;
 reg local_bb2__23_i_consumed_0_NO_SHIFT_REG;

assign local_bb2__23_i_inputs_ready = (rstag_162to162_bb2_ld__valid_out & rstag_162to162_bb2_ld__u3_valid_out);
assign local_bb2__23_i = (local_bb2__22_i | local_bb2__21_i);
assign local_bb2__23_i_stall_local = ((local_bb2_xor_i_stall_in & ~(local_bb2_xor_i_consumed_0_NO_SHIFT_REG)) | (local_bb2_add_i_stall_in & ~(local_bb2_add_i_consumed_0_NO_SHIFT_REG)) | (local_bb2_conv1_i_i_stall_in & ~(local_bb2_conv1_i_i_consumed_0_NO_SHIFT_REG)) | (local_bb2_conv_i_i_stall_in & ~(local_bb2_conv_i_i_consumed_0_NO_SHIFT_REG)) | (local_bb2_reduction_3_i_stall_in & ~(local_bb2_reduction_3_i_consumed_0_NO_SHIFT_REG)) | (local_bb2_var__u11_stall_in & ~(local_bb2_var__u11_consumed_0_NO_SHIFT_REG)) | (local_bb2__23_i_stall_in & ~(local_bb2__23_i_consumed_0_NO_SHIFT_REG)));
assign local_bb2_xor_i_valid_out = (local_bb2__23_i_inputs_ready & ~(local_bb2_xor_i_consumed_0_NO_SHIFT_REG));
assign local_bb2_add_i_valid_out = (local_bb2__23_i_inputs_ready & ~(local_bb2_add_i_consumed_0_NO_SHIFT_REG));
assign local_bb2_conv1_i_i_valid_out = (local_bb2__23_i_inputs_ready & ~(local_bb2_conv1_i_i_consumed_0_NO_SHIFT_REG));
assign local_bb2_conv_i_i_valid_out = (local_bb2__23_i_inputs_ready & ~(local_bb2_conv_i_i_consumed_0_NO_SHIFT_REG));
assign local_bb2_reduction_3_i_valid_out = (local_bb2__23_i_inputs_ready & ~(local_bb2_reduction_3_i_consumed_0_NO_SHIFT_REG));
assign local_bb2_var__u11_valid_out = (local_bb2__23_i_inputs_ready & ~(local_bb2_var__u11_consumed_0_NO_SHIFT_REG));
assign local_bb2__23_i_valid_out = (local_bb2__23_i_inputs_ready & ~(local_bb2__23_i_consumed_0_NO_SHIFT_REG));
assign rstag_162to162_bb2_ld__stall_in = (local_bb2__23_i_stall_local | ~(local_bb2__23_i_inputs_ready));
assign rstag_162to162_bb2_ld__u3_stall_in = (local_bb2__23_i_stall_local | ~(local_bb2__23_i_inputs_ready));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_xor_i_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_add_i_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_conv1_i_i_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_conv_i_i_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_reduction_3_i_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_var__u11_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb2__23_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb2_xor_i_consumed_0_NO_SHIFT_REG <= (local_bb2__23_i_inputs_ready & (local_bb2_xor_i_consumed_0_NO_SHIFT_REG | ~(local_bb2_xor_i_stall_in)) & local_bb2__23_i_stall_local);
		local_bb2_add_i_consumed_0_NO_SHIFT_REG <= (local_bb2__23_i_inputs_ready & (local_bb2_add_i_consumed_0_NO_SHIFT_REG | ~(local_bb2_add_i_stall_in)) & local_bb2__23_i_stall_local);
		local_bb2_conv1_i_i_consumed_0_NO_SHIFT_REG <= (local_bb2__23_i_inputs_ready & (local_bb2_conv1_i_i_consumed_0_NO_SHIFT_REG | ~(local_bb2_conv1_i_i_stall_in)) & local_bb2__23_i_stall_local);
		local_bb2_conv_i_i_consumed_0_NO_SHIFT_REG <= (local_bb2__23_i_inputs_ready & (local_bb2_conv_i_i_consumed_0_NO_SHIFT_REG | ~(local_bb2_conv_i_i_stall_in)) & local_bb2__23_i_stall_local);
		local_bb2_reduction_3_i_consumed_0_NO_SHIFT_REG <= (local_bb2__23_i_inputs_ready & (local_bb2_reduction_3_i_consumed_0_NO_SHIFT_REG | ~(local_bb2_reduction_3_i_stall_in)) & local_bb2__23_i_stall_local);
		local_bb2_var__u11_consumed_0_NO_SHIFT_REG <= (local_bb2__23_i_inputs_ready & (local_bb2_var__u11_consumed_0_NO_SHIFT_REG | ~(local_bb2_var__u11_stall_in)) & local_bb2__23_i_stall_local);
		local_bb2__23_i_consumed_0_NO_SHIFT_REG <= (local_bb2__23_i_inputs_ready & (local_bb2__23_i_consumed_0_NO_SHIFT_REG | ~(local_bb2__23_i_stall_in)) & local_bb2__23_i_stall_local);
	end
end


// Register node:
//  * latency = 5
//  * capacity = 5
 logic rnode_162to167_bb2_xor_i_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_162to167_bb2_xor_i_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_162to167_bb2_xor_i_0_NO_SHIFT_REG;
 logic rnode_162to167_bb2_xor_i_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_162to167_bb2_xor_i_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_162to167_bb2_xor_i_1_NO_SHIFT_REG;
 logic rnode_162to167_bb2_xor_i_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_162to167_bb2_xor_i_0_reg_167_NO_SHIFT_REG;
 logic rnode_162to167_bb2_xor_i_0_valid_out_0_reg_167_NO_SHIFT_REG;
 logic rnode_162to167_bb2_xor_i_0_stall_in_0_reg_167_NO_SHIFT_REG;
 logic rnode_162to167_bb2_xor_i_0_stall_out_reg_167_NO_SHIFT_REG;

acl_data_fifo rnode_162to167_bb2_xor_i_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_162to167_bb2_xor_i_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_162to167_bb2_xor_i_0_stall_in_0_reg_167_NO_SHIFT_REG),
	.valid_out(rnode_162to167_bb2_xor_i_0_valid_out_0_reg_167_NO_SHIFT_REG),
	.stall_out(rnode_162to167_bb2_xor_i_0_stall_out_reg_167_NO_SHIFT_REG),
	.data_in(local_bb2_xor_i),
	.data_out(rnode_162to167_bb2_xor_i_0_reg_167_NO_SHIFT_REG)
);

defparam rnode_162to167_bb2_xor_i_0_reg_167_fifo.DEPTH = 6;
defparam rnode_162to167_bb2_xor_i_0_reg_167_fifo.DATA_WIDTH = 32;
defparam rnode_162to167_bb2_xor_i_0_reg_167_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_162to167_bb2_xor_i_0_reg_167_fifo.IMPL = "ll_reg";

assign rnode_162to167_bb2_xor_i_0_reg_167_inputs_ready_NO_SHIFT_REG = local_bb2_xor_i_valid_out;
assign local_bb2_xor_i_stall_in = rnode_162to167_bb2_xor_i_0_stall_out_reg_167_NO_SHIFT_REG;
assign rnode_162to167_bb2_xor_i_0_stall_in_0_reg_167_NO_SHIFT_REG = (rnode_162to167_bb2_xor_i_0_stall_in_0_NO_SHIFT_REG | rnode_162to167_bb2_xor_i_0_stall_in_1_NO_SHIFT_REG);
assign rnode_162to167_bb2_xor_i_0_valid_out_0_NO_SHIFT_REG = rnode_162to167_bb2_xor_i_0_valid_out_0_reg_167_NO_SHIFT_REG;
assign rnode_162to167_bb2_xor_i_0_valid_out_1_NO_SHIFT_REG = rnode_162to167_bb2_xor_i_0_valid_out_0_reg_167_NO_SHIFT_REG;
assign rnode_162to167_bb2_xor_i_0_NO_SHIFT_REG = rnode_162to167_bb2_xor_i_0_reg_167_NO_SHIFT_REG;
assign rnode_162to167_bb2_xor_i_1_NO_SHIFT_REG = rnode_162to167_bb2_xor_i_0_reg_167_NO_SHIFT_REG;

// Register node:
//  * latency = 3
//  * capacity = 3
 logic rnode_162to165_bb2_add_i_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_162to165_bb2_add_i_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_162to165_bb2_add_i_0_NO_SHIFT_REG;
 logic rnode_162to165_bb2_add_i_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_162to165_bb2_add_i_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_162to165_bb2_add_i_1_NO_SHIFT_REG;
 logic rnode_162to165_bb2_add_i_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_162to165_bb2_add_i_0_stall_in_2_NO_SHIFT_REG;
 logic [31:0] rnode_162to165_bb2_add_i_2_NO_SHIFT_REG;
 logic rnode_162to165_bb2_add_i_0_reg_165_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_162to165_bb2_add_i_0_reg_165_NO_SHIFT_REG;
 logic rnode_162to165_bb2_add_i_0_valid_out_0_reg_165_NO_SHIFT_REG;
 logic rnode_162to165_bb2_add_i_0_stall_in_0_reg_165_NO_SHIFT_REG;
 logic rnode_162to165_bb2_add_i_0_stall_out_reg_165_NO_SHIFT_REG;

acl_data_fifo rnode_162to165_bb2_add_i_0_reg_165_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_162to165_bb2_add_i_0_reg_165_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_162to165_bb2_add_i_0_stall_in_0_reg_165_NO_SHIFT_REG),
	.valid_out(rnode_162to165_bb2_add_i_0_valid_out_0_reg_165_NO_SHIFT_REG),
	.stall_out(rnode_162to165_bb2_add_i_0_stall_out_reg_165_NO_SHIFT_REG),
	.data_in((local_bb2_add_i & 32'h1FF)),
	.data_out(rnode_162to165_bb2_add_i_0_reg_165_NO_SHIFT_REG)
);

defparam rnode_162to165_bb2_add_i_0_reg_165_fifo.DEPTH = 4;
defparam rnode_162to165_bb2_add_i_0_reg_165_fifo.DATA_WIDTH = 32;
defparam rnode_162to165_bb2_add_i_0_reg_165_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_162to165_bb2_add_i_0_reg_165_fifo.IMPL = "ll_reg";

assign rnode_162to165_bb2_add_i_0_reg_165_inputs_ready_NO_SHIFT_REG = local_bb2_add_i_valid_out;
assign local_bb2_add_i_stall_in = rnode_162to165_bb2_add_i_0_stall_out_reg_165_NO_SHIFT_REG;
assign rnode_162to165_bb2_add_i_0_stall_in_0_reg_165_NO_SHIFT_REG = (rnode_162to165_bb2_add_i_0_stall_in_0_NO_SHIFT_REG | rnode_162to165_bb2_add_i_0_stall_in_1_NO_SHIFT_REG | rnode_162to165_bb2_add_i_0_stall_in_2_NO_SHIFT_REG);
assign rnode_162to165_bb2_add_i_0_valid_out_0_NO_SHIFT_REG = rnode_162to165_bb2_add_i_0_valid_out_0_reg_165_NO_SHIFT_REG;
assign rnode_162to165_bb2_add_i_0_valid_out_1_NO_SHIFT_REG = rnode_162to165_bb2_add_i_0_valid_out_0_reg_165_NO_SHIFT_REG;
assign rnode_162to165_bb2_add_i_0_valid_out_2_NO_SHIFT_REG = rnode_162to165_bb2_add_i_0_valid_out_0_reg_165_NO_SHIFT_REG;
assign rnode_162to165_bb2_add_i_0_NO_SHIFT_REG = rnode_162to165_bb2_add_i_0_reg_165_NO_SHIFT_REG;
assign rnode_162to165_bb2_add_i_1_NO_SHIFT_REG = rnode_162to165_bb2_add_i_0_reg_165_NO_SHIFT_REG;
assign rnode_162to165_bb2_add_i_2_NO_SHIFT_REG = rnode_162to165_bb2_add_i_0_reg_165_NO_SHIFT_REG;

// This section implements a staging register.
// 
wire rstag_162to162_bb2_conv1_i_i_valid_out;
wire rstag_162to162_bb2_conv1_i_i_stall_in;
wire rstag_162to162_bb2_conv1_i_i_inputs_ready;
wire rstag_162to162_bb2_conv1_i_i_stall_local;
 reg rstag_162to162_bb2_conv1_i_i_staging_valid_NO_SHIFT_REG;
wire rstag_162to162_bb2_conv1_i_i_combined_valid;
 reg [63:0] rstag_162to162_bb2_conv1_i_i_staging_reg_NO_SHIFT_REG;
wire [63:0] rstag_162to162_bb2_conv1_i_i;

assign rstag_162to162_bb2_conv1_i_i_inputs_ready = local_bb2_conv1_i_i_valid_out;
assign rstag_162to162_bb2_conv1_i_i = (rstag_162to162_bb2_conv1_i_i_staging_valid_NO_SHIFT_REG ? rstag_162to162_bb2_conv1_i_i_staging_reg_NO_SHIFT_REG : ((local_bb2_conv1_i_i & 64'hFFFFFF) | 64'h800000));
assign rstag_162to162_bb2_conv1_i_i_combined_valid = (rstag_162to162_bb2_conv1_i_i_staging_valid_NO_SHIFT_REG | rstag_162to162_bb2_conv1_i_i_inputs_ready);
assign rstag_162to162_bb2_conv1_i_i_valid_out = rstag_162to162_bb2_conv1_i_i_combined_valid;
assign rstag_162to162_bb2_conv1_i_i_stall_local = rstag_162to162_bb2_conv1_i_i_stall_in;
assign local_bb2_conv1_i_i_stall_in = (|rstag_162to162_bb2_conv1_i_i_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_162to162_bb2_conv1_i_i_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_162to162_bb2_conv1_i_i_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_162to162_bb2_conv1_i_i_stall_local)
		begin
			if (~(rstag_162to162_bb2_conv1_i_i_staging_valid_NO_SHIFT_REG))
			begin
				rstag_162to162_bb2_conv1_i_i_staging_valid_NO_SHIFT_REG <= rstag_162to162_bb2_conv1_i_i_inputs_ready;
			end
		end
		else
		begin
			rstag_162to162_bb2_conv1_i_i_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_162to162_bb2_conv1_i_i_staging_valid_NO_SHIFT_REG))
		begin
			rstag_162to162_bb2_conv1_i_i_staging_reg_NO_SHIFT_REG <= ((local_bb2_conv1_i_i & 64'hFFFFFF) | 64'h800000);
		end
	end
end


// This section implements a staging register.
// 
wire rstag_162to162_bb2_conv_i_i_valid_out;
wire rstag_162to162_bb2_conv_i_i_stall_in;
wire rstag_162to162_bb2_conv_i_i_inputs_ready;
wire rstag_162to162_bb2_conv_i_i_stall_local;
 reg rstag_162to162_bb2_conv_i_i_staging_valid_NO_SHIFT_REG;
wire rstag_162to162_bb2_conv_i_i_combined_valid;
 reg [63:0] rstag_162to162_bb2_conv_i_i_staging_reg_NO_SHIFT_REG;
wire [63:0] rstag_162to162_bb2_conv_i_i;

assign rstag_162to162_bb2_conv_i_i_inputs_ready = local_bb2_conv_i_i_valid_out;
assign rstag_162to162_bb2_conv_i_i = (rstag_162to162_bb2_conv_i_i_staging_valid_NO_SHIFT_REG ? rstag_162to162_bb2_conv_i_i_staging_reg_NO_SHIFT_REG : ((local_bb2_conv_i_i & 64'hFFFFFF) | 64'h800000));
assign rstag_162to162_bb2_conv_i_i_combined_valid = (rstag_162to162_bb2_conv_i_i_staging_valid_NO_SHIFT_REG | rstag_162to162_bb2_conv_i_i_inputs_ready);
assign rstag_162to162_bb2_conv_i_i_valid_out = rstag_162to162_bb2_conv_i_i_combined_valid;
assign rstag_162to162_bb2_conv_i_i_stall_local = rstag_162to162_bb2_conv_i_i_stall_in;
assign local_bb2_conv_i_i_stall_in = (|rstag_162to162_bb2_conv_i_i_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_162to162_bb2_conv_i_i_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_162to162_bb2_conv_i_i_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_162to162_bb2_conv_i_i_stall_local)
		begin
			if (~(rstag_162to162_bb2_conv_i_i_staging_valid_NO_SHIFT_REG))
			begin
				rstag_162to162_bb2_conv_i_i_staging_valid_NO_SHIFT_REG <= rstag_162to162_bb2_conv_i_i_inputs_ready;
			end
		end
		else
		begin
			rstag_162to162_bb2_conv_i_i_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_162to162_bb2_conv_i_i_staging_valid_NO_SHIFT_REG))
		begin
			rstag_162to162_bb2_conv_i_i_staging_reg_NO_SHIFT_REG <= ((local_bb2_conv_i_i & 64'hFFFFFF) | 64'h800000);
		end
	end
end


// Register node:
//  * latency = 5
//  * capacity = 5
 logic rnode_162to167_bb2_reduction_3_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_162to167_bb2_reduction_3_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_162to167_bb2_reduction_3_i_0_NO_SHIFT_REG;
 logic rnode_162to167_bb2_reduction_3_i_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic rnode_162to167_bb2_reduction_3_i_0_reg_167_NO_SHIFT_REG;
 logic rnode_162to167_bb2_reduction_3_i_0_valid_out_reg_167_NO_SHIFT_REG;
 logic rnode_162to167_bb2_reduction_3_i_0_stall_in_reg_167_NO_SHIFT_REG;
 logic rnode_162to167_bb2_reduction_3_i_0_stall_out_reg_167_NO_SHIFT_REG;

acl_data_fifo rnode_162to167_bb2_reduction_3_i_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_162to167_bb2_reduction_3_i_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_162to167_bb2_reduction_3_i_0_stall_in_reg_167_NO_SHIFT_REG),
	.valid_out(rnode_162to167_bb2_reduction_3_i_0_valid_out_reg_167_NO_SHIFT_REG),
	.stall_out(rnode_162to167_bb2_reduction_3_i_0_stall_out_reg_167_NO_SHIFT_REG),
	.data_in(local_bb2_reduction_3_i),
	.data_out(rnode_162to167_bb2_reduction_3_i_0_reg_167_NO_SHIFT_REG)
);

defparam rnode_162to167_bb2_reduction_3_i_0_reg_167_fifo.DEPTH = 6;
defparam rnode_162to167_bb2_reduction_3_i_0_reg_167_fifo.DATA_WIDTH = 1;
defparam rnode_162to167_bb2_reduction_3_i_0_reg_167_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_162to167_bb2_reduction_3_i_0_reg_167_fifo.IMPL = "ll_reg";

assign rnode_162to167_bb2_reduction_3_i_0_reg_167_inputs_ready_NO_SHIFT_REG = local_bb2_reduction_3_i_valid_out;
assign local_bb2_reduction_3_i_stall_in = rnode_162to167_bb2_reduction_3_i_0_stall_out_reg_167_NO_SHIFT_REG;
assign rnode_162to167_bb2_reduction_3_i_0_NO_SHIFT_REG = rnode_162to167_bb2_reduction_3_i_0_reg_167_NO_SHIFT_REG;
assign rnode_162to167_bb2_reduction_3_i_0_stall_in_reg_167_NO_SHIFT_REG = rnode_162to167_bb2_reduction_3_i_0_stall_in_NO_SHIFT_REG;
assign rnode_162to167_bb2_reduction_3_i_0_valid_out_NO_SHIFT_REG = rnode_162to167_bb2_reduction_3_i_0_valid_out_reg_167_NO_SHIFT_REG;

// Register node:
//  * latency = 3
//  * capacity = 3
 logic rnode_162to165_bb2_var__u11_0_valid_out_NO_SHIFT_REG;
 logic rnode_162to165_bb2_var__u11_0_stall_in_NO_SHIFT_REG;
 logic rnode_162to165_bb2_var__u11_0_NO_SHIFT_REG;
 logic rnode_162to165_bb2_var__u11_0_reg_165_inputs_ready_NO_SHIFT_REG;
 logic rnode_162to165_bb2_var__u11_0_reg_165_NO_SHIFT_REG;
 logic rnode_162to165_bb2_var__u11_0_valid_out_reg_165_NO_SHIFT_REG;
 logic rnode_162to165_bb2_var__u11_0_stall_in_reg_165_NO_SHIFT_REG;
 logic rnode_162to165_bb2_var__u11_0_stall_out_reg_165_NO_SHIFT_REG;

acl_data_fifo rnode_162to165_bb2_var__u11_0_reg_165_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_162to165_bb2_var__u11_0_reg_165_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_162to165_bb2_var__u11_0_stall_in_reg_165_NO_SHIFT_REG),
	.valid_out(rnode_162to165_bb2_var__u11_0_valid_out_reg_165_NO_SHIFT_REG),
	.stall_out(rnode_162to165_bb2_var__u11_0_stall_out_reg_165_NO_SHIFT_REG),
	.data_in(local_bb2_var__u11),
	.data_out(rnode_162to165_bb2_var__u11_0_reg_165_NO_SHIFT_REG)
);

defparam rnode_162to165_bb2_var__u11_0_reg_165_fifo.DEPTH = 4;
defparam rnode_162to165_bb2_var__u11_0_reg_165_fifo.DATA_WIDTH = 1;
defparam rnode_162to165_bb2_var__u11_0_reg_165_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_162to165_bb2_var__u11_0_reg_165_fifo.IMPL = "ll_reg";

assign rnode_162to165_bb2_var__u11_0_reg_165_inputs_ready_NO_SHIFT_REG = local_bb2_var__u11_valid_out;
assign local_bb2_var__u11_stall_in = rnode_162to165_bb2_var__u11_0_stall_out_reg_165_NO_SHIFT_REG;
assign rnode_162to165_bb2_var__u11_0_NO_SHIFT_REG = rnode_162to165_bb2_var__u11_0_reg_165_NO_SHIFT_REG;
assign rnode_162to165_bb2_var__u11_0_stall_in_reg_165_NO_SHIFT_REG = rnode_162to165_bb2_var__u11_0_stall_in_NO_SHIFT_REG;
assign rnode_162to165_bb2_var__u11_0_valid_out_NO_SHIFT_REG = rnode_162to165_bb2_var__u11_0_valid_out_reg_165_NO_SHIFT_REG;

// Register node:
//  * latency = 5
//  * capacity = 5
 logic rnode_162to167_bb2__23_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_162to167_bb2__23_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_162to167_bb2__23_i_0_NO_SHIFT_REG;
 logic rnode_162to167_bb2__23_i_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic rnode_162to167_bb2__23_i_0_reg_167_NO_SHIFT_REG;
 logic rnode_162to167_bb2__23_i_0_valid_out_reg_167_NO_SHIFT_REG;
 logic rnode_162to167_bb2__23_i_0_stall_in_reg_167_NO_SHIFT_REG;
 logic rnode_162to167_bb2__23_i_0_stall_out_reg_167_NO_SHIFT_REG;

acl_data_fifo rnode_162to167_bb2__23_i_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_162to167_bb2__23_i_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_162to167_bb2__23_i_0_stall_in_reg_167_NO_SHIFT_REG),
	.valid_out(rnode_162to167_bb2__23_i_0_valid_out_reg_167_NO_SHIFT_REG),
	.stall_out(rnode_162to167_bb2__23_i_0_stall_out_reg_167_NO_SHIFT_REG),
	.data_in(local_bb2__23_i),
	.data_out(rnode_162to167_bb2__23_i_0_reg_167_NO_SHIFT_REG)
);

defparam rnode_162to167_bb2__23_i_0_reg_167_fifo.DEPTH = 6;
defparam rnode_162to167_bb2__23_i_0_reg_167_fifo.DATA_WIDTH = 1;
defparam rnode_162to167_bb2__23_i_0_reg_167_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_162to167_bb2__23_i_0_reg_167_fifo.IMPL = "ll_reg";

assign rnode_162to167_bb2__23_i_0_reg_167_inputs_ready_NO_SHIFT_REG = local_bb2__23_i_valid_out;
assign local_bb2__23_i_stall_in = rnode_162to167_bb2__23_i_0_stall_out_reg_167_NO_SHIFT_REG;
assign rnode_162to167_bb2__23_i_0_NO_SHIFT_REG = rnode_162to167_bb2__23_i_0_reg_167_NO_SHIFT_REG;
assign rnode_162to167_bb2__23_i_0_stall_in_reg_167_NO_SHIFT_REG = rnode_162to167_bb2__23_i_0_stall_in_NO_SHIFT_REG;
assign rnode_162to167_bb2__23_i_0_valid_out_NO_SHIFT_REG = rnode_162to167_bb2__23_i_0_valid_out_reg_167_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb2_and4_i_stall_local;
wire [31:0] local_bb2_and4_i;

assign local_bb2_and4_i = (rnode_162to167_bb2_xor_i_0_NO_SHIFT_REG & 32'h80000000);

// This section implements an unregistered operation.
// 
wire local_bb2_cmp50_not_i_stall_local;
wire local_bb2_cmp50_not_i;

assign local_bb2_cmp50_not_i = ((rnode_162to165_bb2_add_i_0_NO_SHIFT_REG & 32'h1FF) != 32'h7F);

// This section implements an unregistered operation.
// 
wire local_bb2_inc_i_stall_local;
wire [31:0] local_bb2_inc_i;

assign local_bb2_inc_i = ((rnode_162to165_bb2_add_i_1_NO_SHIFT_REG & 32'h1FF) + 32'h1);

// This section implements a registered operation.
// 
wire local_bb2_mul_i_i_inputs_ready;
 reg local_bb2_mul_i_i_valid_out_NO_SHIFT_REG;
wire local_bb2_mul_i_i_stall_in;
wire local_bb2_mul_i_i_output_regs_ready;
wire [63:0] local_bb2_mul_i_i;
 reg local_bb2_mul_i_i_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb2_mul_i_i_valid_pipe_1_NO_SHIFT_REG;
wire local_bb2_mul_i_i_causedstall;

acl_int_mult int_module_local_bb2_mul_i_i (
	.clock(clock),
	.dataa(((rstag_162to162_bb2_conv1_i_i & 64'hFFFFFF) | 64'h800000)),
	.datab(((rstag_162to162_bb2_conv_i_i & 64'hFFFFFF) | 64'h800000)),
	.enable(local_bb2_mul_i_i_output_regs_ready),
	.result(local_bb2_mul_i_i)
);

defparam int_module_local_bb2_mul_i_i.INPUT1_WIDTH = 24;
defparam int_module_local_bb2_mul_i_i.INPUT2_WIDTH = 24;
defparam int_module_local_bb2_mul_i_i.OUTPUT_WIDTH = 64;
defparam int_module_local_bb2_mul_i_i.LATENCY = 3;
defparam int_module_local_bb2_mul_i_i.SIGNED = 0;

assign local_bb2_mul_i_i_inputs_ready = (rstag_162to162_bb2_conv_i_i_valid_out & rstag_162to162_bb2_conv1_i_i_valid_out);
assign local_bb2_mul_i_i_output_regs_ready = (&(~(local_bb2_mul_i_i_valid_out_NO_SHIFT_REG) | ~(local_bb2_mul_i_i_stall_in)));
assign rstag_162to162_bb2_conv_i_i_stall_in = (~(local_bb2_mul_i_i_output_regs_ready) | ~(local_bb2_mul_i_i_inputs_ready));
assign rstag_162to162_bb2_conv1_i_i_stall_in = (~(local_bb2_mul_i_i_output_regs_ready) | ~(local_bb2_mul_i_i_inputs_ready));
assign local_bb2_mul_i_i_causedstall = (local_bb2_mul_i_i_inputs_ready && (~(local_bb2_mul_i_i_output_regs_ready) && !(~(local_bb2_mul_i_i_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_mul_i_i_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_mul_i_i_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_mul_i_i_output_regs_ready)
		begin
			local_bb2_mul_i_i_valid_pipe_0_NO_SHIFT_REG <= local_bb2_mul_i_i_inputs_ready;
			local_bb2_mul_i_i_valid_pipe_1_NO_SHIFT_REG <= local_bb2_mul_i_i_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_mul_i_i_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_mul_i_i_output_regs_ready)
		begin
			local_bb2_mul_i_i_valid_out_NO_SHIFT_REG <= local_bb2_mul_i_i_valid_pipe_1_NO_SHIFT_REG;
		end
		else
		begin
			if (~(local_bb2_mul_i_i_stall_in))
			begin
				local_bb2_mul_i_i_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_165to165_bb2_mul_i_i_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_165to165_bb2_mul_i_i_0_stall_in_0_NO_SHIFT_REG;
 logic [63:0] rnode_165to165_bb2_mul_i_i_0_NO_SHIFT_REG;
 logic rnode_165to165_bb2_mul_i_i_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_165to165_bb2_mul_i_i_0_stall_in_1_NO_SHIFT_REG;
 logic [63:0] rnode_165to165_bb2_mul_i_i_1_NO_SHIFT_REG;
 logic rnode_165to165_bb2_mul_i_i_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_165to165_bb2_mul_i_i_0_stall_in_2_NO_SHIFT_REG;
 logic [63:0] rnode_165to165_bb2_mul_i_i_2_NO_SHIFT_REG;
 logic rnode_165to165_bb2_mul_i_i_0_reg_165_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_165to165_bb2_mul_i_i_0_reg_165_NO_SHIFT_REG;
 logic rnode_165to165_bb2_mul_i_i_0_valid_out_0_reg_165_NO_SHIFT_REG;
 logic rnode_165to165_bb2_mul_i_i_0_stall_in_0_reg_165_NO_SHIFT_REG;
 logic rnode_165to165_bb2_mul_i_i_0_stall_out_reg_165_NO_SHIFT_REG;

acl_data_fifo rnode_165to165_bb2_mul_i_i_0_reg_165_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_165to165_bb2_mul_i_i_0_reg_165_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_165to165_bb2_mul_i_i_0_stall_in_0_reg_165_NO_SHIFT_REG),
	.valid_out(rnode_165to165_bb2_mul_i_i_0_valid_out_0_reg_165_NO_SHIFT_REG),
	.stall_out(rnode_165to165_bb2_mul_i_i_0_stall_out_reg_165_NO_SHIFT_REG),
	.data_in((local_bb2_mul_i_i & 64'hFFFFFFFFFFFF)),
	.data_out(rnode_165to165_bb2_mul_i_i_0_reg_165_NO_SHIFT_REG)
);

defparam rnode_165to165_bb2_mul_i_i_0_reg_165_fifo.DEPTH = 3;
defparam rnode_165to165_bb2_mul_i_i_0_reg_165_fifo.DATA_WIDTH = 64;
defparam rnode_165to165_bb2_mul_i_i_0_reg_165_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_165to165_bb2_mul_i_i_0_reg_165_fifo.IMPL = "zl_reg";

assign rnode_165to165_bb2_mul_i_i_0_reg_165_inputs_ready_NO_SHIFT_REG = local_bb2_mul_i_i_valid_out_NO_SHIFT_REG;
assign local_bb2_mul_i_i_stall_in = rnode_165to165_bb2_mul_i_i_0_stall_out_reg_165_NO_SHIFT_REG;
assign rnode_165to165_bb2_mul_i_i_0_stall_in_0_reg_165_NO_SHIFT_REG = (rnode_165to165_bb2_mul_i_i_0_stall_in_0_NO_SHIFT_REG | rnode_165to165_bb2_mul_i_i_0_stall_in_1_NO_SHIFT_REG | rnode_165to165_bb2_mul_i_i_0_stall_in_2_NO_SHIFT_REG);
assign rnode_165to165_bb2_mul_i_i_0_valid_out_0_NO_SHIFT_REG = rnode_165to165_bb2_mul_i_i_0_valid_out_0_reg_165_NO_SHIFT_REG;
assign rnode_165to165_bb2_mul_i_i_0_valid_out_1_NO_SHIFT_REG = rnode_165to165_bb2_mul_i_i_0_valid_out_0_reg_165_NO_SHIFT_REG;
assign rnode_165to165_bb2_mul_i_i_0_valid_out_2_NO_SHIFT_REG = rnode_165to165_bb2_mul_i_i_0_valid_out_0_reg_165_NO_SHIFT_REG;
assign rnode_165to165_bb2_mul_i_i_0_NO_SHIFT_REG = rnode_165to165_bb2_mul_i_i_0_reg_165_NO_SHIFT_REG;
assign rnode_165to165_bb2_mul_i_i_1_NO_SHIFT_REG = rnode_165to165_bb2_mul_i_i_0_reg_165_NO_SHIFT_REG;
assign rnode_165to165_bb2_mul_i_i_2_NO_SHIFT_REG = rnode_165to165_bb2_mul_i_i_0_reg_165_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb2_and48_i_stall_local;
wire [63:0] local_bb2_and48_i;

assign local_bb2_and48_i = ((rnode_165to165_bb2_mul_i_i_0_NO_SHIFT_REG & 64'hFFFFFFFFFFFF) & 64'h800000000000);

// This section implements an unregistered operation.
// 
wire local_bb2_or_i3_vec_0_i_stall_local;
wire [63:0] local_bb2_or_i3_vec_0_i;

assign local_bb2_or_i3_vec_0_i[63:0] = (rnode_165to165_bb2_mul_i_i_1_NO_SHIFT_REG & 64'hFFFFFFFFFFFF);

// This section implements an unregistered operation.
// 
wire local_bb2_conv3_i_i_stall_local;
wire [31:0] local_bb2_conv3_i_i;
wire [63:0] local_bb2_conv3_i_i$ps;

assign local_bb2_conv3_i_i$ps = (rnode_165to165_bb2_mul_i_i_2_NO_SHIFT_REG & 64'hFFFFFFFFFFFF);
assign local_bb2_conv3_i_i = local_bb2_conv3_i_i$ps[31:0];

// This section implements an unregistered operation.
// 
wire local_bb2_tobool49_i_stall_local;
wire local_bb2_tobool49_i;

assign local_bb2_tobool49_i = ((local_bb2_and48_i & 64'h800000000000) == 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb2_or_i3_bitvec_i_stall_local;
wire [63:0] local_bb2_or_i3_bitvec_i;

assign local_bb2_or_i3_bitvec_i = local_bb2_or_i3_vec_0_i;

// This section implements an unregistered operation.
// 
wire local_bb2_shl1_i4_i_stall_local;
wire [31:0] local_bb2_shl1_i4_i;

assign local_bb2_shl1_i4_i = (local_bb2_conv3_i_i << 32'h8);

// This section implements an unregistered operation.
// 
wire local_bb2_shl1_i_i_stall_local;
wire [31:0] local_bb2_shl1_i_i;

assign local_bb2_shl1_i_i = (local_bb2_conv3_i_i << 32'h9);

// This section implements an unregistered operation.
// 
wire local_bb2__25_i_stall_local;
wire local_bb2__25_i;

assign local_bb2__25_i = (local_bb2_tobool49_i & local_bb2_cmp50_not_i);

// This section implements an unregistered operation.
// 
wire local_bb2_or_i3_shuffle_i_stall_local;
wire [31:0] local_bb2_or_i3_shuffle_i;

assign local_bb2_or_i3_shuffle_i[0] = local_bb2_or_i3_bitvec_i[24];
assign local_bb2_or_i3_shuffle_i[1] = local_bb2_or_i3_bitvec_i[25];
assign local_bb2_or_i3_shuffle_i[2] = local_bb2_or_i3_bitvec_i[26];
assign local_bb2_or_i3_shuffle_i[3] = local_bb2_or_i3_bitvec_i[27];
assign local_bb2_or_i3_shuffle_i[4] = local_bb2_or_i3_bitvec_i[28];
assign local_bb2_or_i3_shuffle_i[5] = local_bb2_or_i3_bitvec_i[29];
assign local_bb2_or_i3_shuffle_i[6] = local_bb2_or_i3_bitvec_i[30];
assign local_bb2_or_i3_shuffle_i[7] = local_bb2_or_i3_bitvec_i[31];
assign local_bb2_or_i3_shuffle_i[8] = local_bb2_or_i3_bitvec_i[32];
assign local_bb2_or_i3_shuffle_i[9] = local_bb2_or_i3_bitvec_i[33];
assign local_bb2_or_i3_shuffle_i[10] = local_bb2_or_i3_bitvec_i[34];
assign local_bb2_or_i3_shuffle_i[11] = local_bb2_or_i3_bitvec_i[35];
assign local_bb2_or_i3_shuffle_i[12] = local_bb2_or_i3_bitvec_i[36];
assign local_bb2_or_i3_shuffle_i[13] = local_bb2_or_i3_bitvec_i[37];
assign local_bb2_or_i3_shuffle_i[14] = local_bb2_or_i3_bitvec_i[38];
assign local_bb2_or_i3_shuffle_i[15] = local_bb2_or_i3_bitvec_i[39];
assign local_bb2_or_i3_shuffle_i[16] = local_bb2_or_i3_bitvec_i[40];
assign local_bb2_or_i3_shuffle_i[17] = local_bb2_or_i3_bitvec_i[41];
assign local_bb2_or_i3_shuffle_i[18] = local_bb2_or_i3_bitvec_i[42];
assign local_bb2_or_i3_shuffle_i[19] = local_bb2_or_i3_bitvec_i[43];
assign local_bb2_or_i3_shuffle_i[20] = local_bb2_or_i3_bitvec_i[44];
assign local_bb2_or_i3_shuffle_i[21] = local_bb2_or_i3_bitvec_i[45];
assign local_bb2_or_i3_shuffle_i[22] = local_bb2_or_i3_bitvec_i[46];
assign local_bb2_or_i3_shuffle_i[23] = local_bb2_or_i3_bitvec_i[47];
assign local_bb2_or_i3_shuffle_i[24] = 1'b0;
assign local_bb2_or_i3_shuffle_i[25] = 1'b0;
assign local_bb2_or_i3_shuffle_i[26] = 1'b0;
assign local_bb2_or_i3_shuffle_i[27] = 1'b0;
assign local_bb2_or_i3_shuffle_i[28] = 1'b0;
assign local_bb2_or_i3_shuffle_i[29] = 1'b0;
assign local_bb2_or_i3_shuffle_i[30] = 1'b0;
assign local_bb2_or_i3_shuffle_i[31] = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb2_or_i_shuffle_i_stall_local;
wire [31:0] local_bb2_or_i_shuffle_i;

assign local_bb2_or_i_shuffle_i[0] = local_bb2_or_i3_bitvec_i[23];
assign local_bb2_or_i_shuffle_i[1] = local_bb2_or_i3_bitvec_i[24];
assign local_bb2_or_i_shuffle_i[2] = local_bb2_or_i3_bitvec_i[25];
assign local_bb2_or_i_shuffle_i[3] = local_bb2_or_i3_bitvec_i[26];
assign local_bb2_or_i_shuffle_i[4] = local_bb2_or_i3_bitvec_i[27];
assign local_bb2_or_i_shuffle_i[5] = local_bb2_or_i3_bitvec_i[28];
assign local_bb2_or_i_shuffle_i[6] = local_bb2_or_i3_bitvec_i[29];
assign local_bb2_or_i_shuffle_i[7] = local_bb2_or_i3_bitvec_i[30];
assign local_bb2_or_i_shuffle_i[8] = local_bb2_or_i3_bitvec_i[31];
assign local_bb2_or_i_shuffle_i[9] = local_bb2_or_i3_bitvec_i[32];
assign local_bb2_or_i_shuffle_i[10] = local_bb2_or_i3_bitvec_i[33];
assign local_bb2_or_i_shuffle_i[11] = local_bb2_or_i3_bitvec_i[34];
assign local_bb2_or_i_shuffle_i[12] = local_bb2_or_i3_bitvec_i[35];
assign local_bb2_or_i_shuffle_i[13] = local_bb2_or_i3_bitvec_i[36];
assign local_bb2_or_i_shuffle_i[14] = local_bb2_or_i3_bitvec_i[37];
assign local_bb2_or_i_shuffle_i[15] = local_bb2_or_i3_bitvec_i[38];
assign local_bb2_or_i_shuffle_i[16] = local_bb2_or_i3_bitvec_i[39];
assign local_bb2_or_i_shuffle_i[17] = local_bb2_or_i3_bitvec_i[40];
assign local_bb2_or_i_shuffle_i[18] = local_bb2_or_i3_bitvec_i[41];
assign local_bb2_or_i_shuffle_i[19] = local_bb2_or_i3_bitvec_i[42];
assign local_bb2_or_i_shuffle_i[20] = local_bb2_or_i3_bitvec_i[43];
assign local_bb2_or_i_shuffle_i[21] = local_bb2_or_i3_bitvec_i[44];
assign local_bb2_or_i_shuffle_i[22] = local_bb2_or_i3_bitvec_i[45];
assign local_bb2_or_i_shuffle_i[23] = local_bb2_or_i3_bitvec_i[46];
assign local_bb2_or_i_shuffle_i[24] = local_bb2_or_i3_bitvec_i[47];
assign local_bb2_or_i_shuffle_i[25] = 1'b0;
assign local_bb2_or_i_shuffle_i[26] = 1'b0;
assign local_bb2_or_i_shuffle_i[27] = 1'b0;
assign local_bb2_or_i_shuffle_i[28] = 1'b0;
assign local_bb2_or_i_shuffle_i[29] = 1'b0;
assign local_bb2_or_i_shuffle_i[30] = 1'b0;
assign local_bb2_or_i_shuffle_i[31] = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb2__28_i_stall_local;
wire [31:0] local_bb2__28_i;

assign local_bb2__28_i = (local_bb2__25_i ? (local_bb2_shl1_i_i & 32'hFFFFFE00) : (local_bb2_shl1_i4_i & 32'hFFFFFF00));

// This section implements an unregistered operation.
// 
wire local_bb2__30_i_stall_local;
wire [31:0] local_bb2__30_i;

assign local_bb2__30_i = (local_bb2__25_i ? (rnode_162to165_bb2_add_i_2_NO_SHIFT_REG & 32'h1FF) : 32'h7F);

// This section implements an unregistered operation.
// 
wire local_bb2_or_i3_compressed_i_stall_local;
wire [31:0] local_bb2_or_i3_compressed_i;

assign local_bb2_or_i3_compressed_i = local_bb2_or_i3_shuffle_i;

// This section implements an unregistered operation.
// 
wire local_bb2_or_i_compressed_i_stall_local;
wire [31:0] local_bb2_or_i_compressed_i;

assign local_bb2_or_i_compressed_i = local_bb2_or_i_shuffle_i;

// This section implements an unregistered operation.
// 
wire local_bb2__29_i_stall_local;
wire [31:0] local_bb2__29_i;

assign local_bb2__29_i = (local_bb2_tobool49_i ? (local_bb2__28_i & 32'hFFFFFF00) : (local_bb2_shl1_i4_i & 32'hFFFFFF00));

// This section implements an unregistered operation.
// 
wire local_bb2__31_i_stall_local;
wire [31:0] local_bb2__31_i;

assign local_bb2__31_i = (local_bb2_tobool49_i ? (local_bb2__30_i & 32'h1FF) : (local_bb2_inc_i & 32'h3FF));

// This section implements an unregistered operation.
// 
wire local_bb2__26_i_stall_local;
wire [31:0] local_bb2__26_i;

assign local_bb2__26_i = (local_bb2__25_i ? (local_bb2_or_i_compressed_i & 32'h1FFFFFF) : (local_bb2_or_i3_compressed_i & 32'hFFFFFF));

// This section implements an unregistered operation.
// 
wire local_bb2_cmp53_i_stall_local;
wire local_bb2_cmp53_i;

assign local_bb2_cmp53_i = ((local_bb2__31_i & 32'h3FF) > 32'h17D);

// This section implements an unregistered operation.
// 
wire local_bb2_cmp63_i_stall_local;
wire local_bb2_cmp63_i;

assign local_bb2_cmp63_i = ((local_bb2__31_i & 32'h3FF) < 32'h80);

// This section implements an unregistered operation.
// 
wire local_bb2_sub_i_stall_local;
wire [31:0] local_bb2_sub_i;

assign local_bb2_sub_i = ((local_bb2__31_i & 32'h3FF) << 32'h17);

// This section implements an unregistered operation.
// 
wire local_bb2_cmp65_not_i_stall_local;
wire local_bb2_cmp65_not_i;

assign local_bb2_cmp65_not_i = ((local_bb2__31_i & 32'h3FF) != 32'h7F);

// This section implements an unregistered operation.
// 
wire local_bb2__27_i_stall_local;
wire [31:0] local_bb2__27_i;

assign local_bb2__27_i = (local_bb2_tobool49_i ? (local_bb2__26_i & 32'h1FFFFFF) : (local_bb2_or_i3_compressed_i & 32'hFFFFFF));

// This section implements an unregistered operation.
// 
wire local_bb2_or57_i_stall_local;
wire local_bb2_or57_i;

assign local_bb2_or57_i = (rnode_162to165_bb2_var__u11_0_NO_SHIFT_REG | local_bb2_cmp53_i);

// This section implements an unregistered operation.
// 
wire local_bb2_cmp63_i_valid_out;
wire local_bb2_cmp63_i_stall_in;
wire local_bb2_cmp65_not_i_valid_out;
wire local_bb2_cmp65_not_i_stall_in;
wire local_bb2__27_i_valid_out;
wire local_bb2__27_i_stall_in;
wire local_bb2__29_i_valid_out;
wire local_bb2__29_i_stall_in;
wire local_bb2_or57_i_valid_out;
wire local_bb2_or57_i_stall_in;
wire local_bb2_and67_i_valid_out;
wire local_bb2_and67_i_stall_in;
wire local_bb2_and67_i_inputs_ready;
wire local_bb2_and67_i_stall_local;
wire [31:0] local_bb2_and67_i;
 reg local_bb2_cmp63_i_consumed_0_NO_SHIFT_REG;
 reg local_bb2_cmp65_not_i_consumed_0_NO_SHIFT_REG;
 reg local_bb2__27_i_consumed_0_NO_SHIFT_REG;
 reg local_bb2_or57_i_consumed_0_NO_SHIFT_REG;
 reg local_bb2_and67_i_consumed_0_NO_SHIFT_REG;

assign local_bb2_and67_i_inputs_ready = (rnode_162to165_bb2_add_i_0_valid_out_0_NO_SHIFT_REG & rnode_162to165_bb2_add_i_0_valid_out_1_NO_SHIFT_REG & rnode_162to165_bb2_add_i_0_valid_out_2_NO_SHIFT_REG & rnode_162to165_bb2_var__u11_0_valid_out_NO_SHIFT_REG & rnode_165to165_bb2_mul_i_i_0_valid_out_0_NO_SHIFT_REG & rnode_165to165_bb2_mul_i_i_0_valid_out_2_NO_SHIFT_REG & rnode_165to165_bb2_mul_i_i_0_valid_out_1_NO_SHIFT_REG);
assign local_bb2_and67_i = ((local_bb2_sub_i & 32'hFF800000) + 32'h40800000);
assign local_bb2_and67_i_stall_local = ((local_bb2_cmp63_i_stall_in & ~(local_bb2_cmp63_i_consumed_0_NO_SHIFT_REG)) | (local_bb2_cmp65_not_i_stall_in & ~(local_bb2_cmp65_not_i_consumed_0_NO_SHIFT_REG)) | (local_bb2__27_i_stall_in & ~(local_bb2__27_i_consumed_0_NO_SHIFT_REG)) | 1'b0 | (local_bb2_or57_i_stall_in & ~(local_bb2_or57_i_consumed_0_NO_SHIFT_REG)) | (local_bb2_and67_i_stall_in & ~(local_bb2_and67_i_consumed_0_NO_SHIFT_REG)));
assign local_bb2_cmp63_i_valid_out = (local_bb2_and67_i_inputs_ready & ~(local_bb2_cmp63_i_consumed_0_NO_SHIFT_REG));
assign local_bb2_cmp65_not_i_valid_out = (local_bb2_and67_i_inputs_ready & ~(local_bb2_cmp65_not_i_consumed_0_NO_SHIFT_REG));
assign local_bb2__27_i_valid_out = (local_bb2_and67_i_inputs_ready & ~(local_bb2__27_i_consumed_0_NO_SHIFT_REG));
assign local_bb2__29_i_valid_out = local_bb2_and67_i_inputs_ready;
assign local_bb2_or57_i_valid_out = (local_bb2_and67_i_inputs_ready & ~(local_bb2_or57_i_consumed_0_NO_SHIFT_REG));
assign local_bb2_and67_i_valid_out = (local_bb2_and67_i_inputs_ready & ~(local_bb2_and67_i_consumed_0_NO_SHIFT_REG));
assign rnode_162to165_bb2_add_i_0_stall_in_0_NO_SHIFT_REG = (local_bb2_and67_i_stall_local | ~(local_bb2_and67_i_inputs_ready));
assign rnode_162to165_bb2_add_i_0_stall_in_1_NO_SHIFT_REG = (local_bb2_and67_i_stall_local | ~(local_bb2_and67_i_inputs_ready));
assign rnode_162to165_bb2_add_i_0_stall_in_2_NO_SHIFT_REG = (local_bb2_and67_i_stall_local | ~(local_bb2_and67_i_inputs_ready));
assign rnode_162to165_bb2_var__u11_0_stall_in_NO_SHIFT_REG = (local_bb2_and67_i_stall_local | ~(local_bb2_and67_i_inputs_ready));
assign rnode_165to165_bb2_mul_i_i_0_stall_in_0_NO_SHIFT_REG = (local_bb2_and67_i_stall_local | ~(local_bb2_and67_i_inputs_ready));
assign rnode_165to165_bb2_mul_i_i_0_stall_in_2_NO_SHIFT_REG = (local_bb2_and67_i_stall_local | ~(local_bb2_and67_i_inputs_ready));
assign rnode_165to165_bb2_mul_i_i_0_stall_in_1_NO_SHIFT_REG = (local_bb2_and67_i_stall_local | ~(local_bb2_and67_i_inputs_ready));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_cmp63_i_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_cmp65_not_i_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb2__27_i_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_or57_i_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_and67_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb2_cmp63_i_consumed_0_NO_SHIFT_REG <= (local_bb2_and67_i_inputs_ready & (local_bb2_cmp63_i_consumed_0_NO_SHIFT_REG | ~(local_bb2_cmp63_i_stall_in)) & local_bb2_and67_i_stall_local);
		local_bb2_cmp65_not_i_consumed_0_NO_SHIFT_REG <= (local_bb2_and67_i_inputs_ready & (local_bb2_cmp65_not_i_consumed_0_NO_SHIFT_REG | ~(local_bb2_cmp65_not_i_stall_in)) & local_bb2_and67_i_stall_local);
		local_bb2__27_i_consumed_0_NO_SHIFT_REG <= (local_bb2_and67_i_inputs_ready & (local_bb2__27_i_consumed_0_NO_SHIFT_REG | ~(local_bb2__27_i_stall_in)) & local_bb2_and67_i_stall_local);
		local_bb2_or57_i_consumed_0_NO_SHIFT_REG <= (local_bb2_and67_i_inputs_ready & (local_bb2_or57_i_consumed_0_NO_SHIFT_REG | ~(local_bb2_or57_i_stall_in)) & local_bb2_and67_i_stall_local);
		local_bb2_and67_i_consumed_0_NO_SHIFT_REG <= (local_bb2_and67_i_inputs_ready & (local_bb2_and67_i_consumed_0_NO_SHIFT_REG | ~(local_bb2_and67_i_stall_in)) & local_bb2_and67_i_stall_local);
	end
end


// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_165to167_bb2_cmp63_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_165to167_bb2_cmp63_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_165to167_bb2_cmp63_i_0_NO_SHIFT_REG;
 logic rnode_165to167_bb2_cmp63_i_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic rnode_165to167_bb2_cmp63_i_0_reg_167_NO_SHIFT_REG;
 logic rnode_165to167_bb2_cmp63_i_0_valid_out_reg_167_NO_SHIFT_REG;
 logic rnode_165to167_bb2_cmp63_i_0_stall_in_reg_167_NO_SHIFT_REG;
 logic rnode_165to167_bb2_cmp63_i_0_stall_out_reg_167_NO_SHIFT_REG;

acl_data_fifo rnode_165to167_bb2_cmp63_i_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_165to167_bb2_cmp63_i_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_165to167_bb2_cmp63_i_0_stall_in_reg_167_NO_SHIFT_REG),
	.valid_out(rnode_165to167_bb2_cmp63_i_0_valid_out_reg_167_NO_SHIFT_REG),
	.stall_out(rnode_165to167_bb2_cmp63_i_0_stall_out_reg_167_NO_SHIFT_REG),
	.data_in(local_bb2_cmp63_i),
	.data_out(rnode_165to167_bb2_cmp63_i_0_reg_167_NO_SHIFT_REG)
);

defparam rnode_165to167_bb2_cmp63_i_0_reg_167_fifo.DEPTH = 3;
defparam rnode_165to167_bb2_cmp63_i_0_reg_167_fifo.DATA_WIDTH = 1;
defparam rnode_165to167_bb2_cmp63_i_0_reg_167_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_165to167_bb2_cmp63_i_0_reg_167_fifo.IMPL = "ll_reg";

assign rnode_165to167_bb2_cmp63_i_0_reg_167_inputs_ready_NO_SHIFT_REG = local_bb2_cmp63_i_valid_out;
assign local_bb2_cmp63_i_stall_in = rnode_165to167_bb2_cmp63_i_0_stall_out_reg_167_NO_SHIFT_REG;
assign rnode_165to167_bb2_cmp63_i_0_NO_SHIFT_REG = rnode_165to167_bb2_cmp63_i_0_reg_167_NO_SHIFT_REG;
assign rnode_165to167_bb2_cmp63_i_0_stall_in_reg_167_NO_SHIFT_REG = rnode_165to167_bb2_cmp63_i_0_stall_in_NO_SHIFT_REG;
assign rnode_165to167_bb2_cmp63_i_0_valid_out_NO_SHIFT_REG = rnode_165to167_bb2_cmp63_i_0_valid_out_reg_167_NO_SHIFT_REG;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_165to167_bb2_cmp65_not_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_165to167_bb2_cmp65_not_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_165to167_bb2_cmp65_not_i_0_NO_SHIFT_REG;
 logic rnode_165to167_bb2_cmp65_not_i_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic rnode_165to167_bb2_cmp65_not_i_0_reg_167_NO_SHIFT_REG;
 logic rnode_165to167_bb2_cmp65_not_i_0_valid_out_reg_167_NO_SHIFT_REG;
 logic rnode_165to167_bb2_cmp65_not_i_0_stall_in_reg_167_NO_SHIFT_REG;
 logic rnode_165to167_bb2_cmp65_not_i_0_stall_out_reg_167_NO_SHIFT_REG;
wire [63:0] rci_rcnode_165to166_rc0_bb2__27_i_0_reg_165;

acl_data_fifo rnode_165to167_bb2_cmp65_not_i_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_165to167_bb2_cmp65_not_i_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_165to167_bb2_cmp65_not_i_0_stall_in_reg_167_NO_SHIFT_REG),
	.valid_out(rnode_165to167_bb2_cmp65_not_i_0_valid_out_reg_167_NO_SHIFT_REG),
	.stall_out(rnode_165to167_bb2_cmp65_not_i_0_stall_out_reg_167_NO_SHIFT_REG),
	.data_in(local_bb2_cmp65_not_i),
	.data_out(rnode_165to167_bb2_cmp65_not_i_0_reg_167_NO_SHIFT_REG)
);

defparam rnode_165to167_bb2_cmp65_not_i_0_reg_167_fifo.DEPTH = 3;
defparam rnode_165to167_bb2_cmp65_not_i_0_reg_167_fifo.DATA_WIDTH = 1;
defparam rnode_165to167_bb2_cmp65_not_i_0_reg_167_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_165to167_bb2_cmp65_not_i_0_reg_167_fifo.IMPL = "ll_reg";

assign rnode_165to167_bb2_cmp65_not_i_0_reg_167_inputs_ready_NO_SHIFT_REG = local_bb2_cmp65_not_i_valid_out;
assign local_bb2_cmp65_not_i_stall_in = rnode_165to167_bb2_cmp65_not_i_0_stall_out_reg_167_NO_SHIFT_REG;
assign rnode_165to167_bb2_cmp65_not_i_0_NO_SHIFT_REG = rnode_165to167_bb2_cmp65_not_i_0_reg_167_NO_SHIFT_REG;
assign rnode_165to167_bb2_cmp65_not_i_0_stall_in_reg_167_NO_SHIFT_REG = rnode_165to167_bb2_cmp65_not_i_0_stall_in_NO_SHIFT_REG;
assign rnode_165to167_bb2_cmp65_not_i_0_valid_out_NO_SHIFT_REG = rnode_165to167_bb2_cmp65_not_i_0_valid_out_reg_167_NO_SHIFT_REG;
assign rci_rcnode_165to166_rc0_bb2__27_i_0_reg_165[31:0] = (local_bb2__27_i & 32'h1FFFFFF);
assign rci_rcnode_165to166_rc0_bb2__27_i_0_reg_165[63:32] = (local_bb2__29_i & 32'hFFFFFF00);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_165to166_rc0_bb2__27_i_0_valid_out_0_NO_SHIFT_REG;
 logic rcnode_165to166_rc0_bb2__27_i_0_stall_in_0_NO_SHIFT_REG;
 logic [63:0] rcnode_165to166_rc0_bb2__27_i_0_NO_SHIFT_REG;
 logic rcnode_165to166_rc0_bb2__27_i_0_valid_out_1_NO_SHIFT_REG;
 logic rcnode_165to166_rc0_bb2__27_i_0_stall_in_1_NO_SHIFT_REG;
 logic [63:0] rcnode_165to166_rc0_bb2__27_i_1_NO_SHIFT_REG;
 logic rcnode_165to166_rc0_bb2__27_i_0_valid_out_2_NO_SHIFT_REG;
 logic rcnode_165to166_rc0_bb2__27_i_0_stall_in_2_NO_SHIFT_REG;
 logic [63:0] rcnode_165to166_rc0_bb2__27_i_2_NO_SHIFT_REG;
 logic rcnode_165to166_rc0_bb2__27_i_0_valid_out_3_NO_SHIFT_REG;
 logic rcnode_165to166_rc0_bb2__27_i_0_stall_in_3_NO_SHIFT_REG;
 logic [63:0] rcnode_165to166_rc0_bb2__27_i_3_NO_SHIFT_REG;
 logic rcnode_165to166_rc0_bb2__27_i_0_reg_166_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rcnode_165to166_rc0_bb2__27_i_0_reg_166_NO_SHIFT_REG;
 logic rcnode_165to166_rc0_bb2__27_i_0_valid_out_0_reg_166_NO_SHIFT_REG;
 logic rcnode_165to166_rc0_bb2__27_i_0_stall_in_0_reg_166_NO_SHIFT_REG;
 logic rcnode_165to166_rc0_bb2__27_i_0_stall_out_0_reg_166_IP_NO_SHIFT_REG;
 logic rcnode_165to166_rc0_bb2__27_i_0_stall_out_0_reg_166_NO_SHIFT_REG;

acl_data_fifo rcnode_165to166_rc0_bb2__27_i_0_reg_166_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_165to166_rc0_bb2__27_i_0_reg_166_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_165to166_rc0_bb2__27_i_0_stall_in_0_reg_166_NO_SHIFT_REG),
	.valid_out(rcnode_165to166_rc0_bb2__27_i_0_valid_out_0_reg_166_NO_SHIFT_REG),
	.stall_out(rcnode_165to166_rc0_bb2__27_i_0_stall_out_0_reg_166_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_165to166_rc0_bb2__27_i_0_reg_165),
	.data_out(rcnode_165to166_rc0_bb2__27_i_0_reg_166_NO_SHIFT_REG)
);

defparam rcnode_165to166_rc0_bb2__27_i_0_reg_166_fifo.DEPTH = 2;
defparam rcnode_165to166_rc0_bb2__27_i_0_reg_166_fifo.DATA_WIDTH = 64;
defparam rcnode_165to166_rc0_bb2__27_i_0_reg_166_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_165to166_rc0_bb2__27_i_0_reg_166_fifo.IMPL = "ll_reg";

assign rcnode_165to166_rc0_bb2__27_i_0_reg_166_inputs_ready_NO_SHIFT_REG = (local_bb2__27_i_valid_out & local_bb2__29_i_valid_out);
assign rcnode_165to166_rc0_bb2__27_i_0_stall_out_0_reg_166_NO_SHIFT_REG = (~(rcnode_165to166_rc0_bb2__27_i_0_reg_166_inputs_ready_NO_SHIFT_REG) | rcnode_165to166_rc0_bb2__27_i_0_stall_out_0_reg_166_IP_NO_SHIFT_REG);
assign local_bb2__27_i_stall_in = rcnode_165to166_rc0_bb2__27_i_0_stall_out_0_reg_166_NO_SHIFT_REG;
assign local_bb2__29_i_stall_in = rcnode_165to166_rc0_bb2__27_i_0_stall_out_0_reg_166_NO_SHIFT_REG;
assign rcnode_165to166_rc0_bb2__27_i_0_stall_in_0_reg_166_NO_SHIFT_REG = (rcnode_165to166_rc0_bb2__27_i_0_stall_in_0_NO_SHIFT_REG | rcnode_165to166_rc0_bb2__27_i_0_stall_in_1_NO_SHIFT_REG | rcnode_165to166_rc0_bb2__27_i_0_stall_in_2_NO_SHIFT_REG | rcnode_165to166_rc0_bb2__27_i_0_stall_in_3_NO_SHIFT_REG);
assign rcnode_165to166_rc0_bb2__27_i_0_valid_out_0_NO_SHIFT_REG = rcnode_165to166_rc0_bb2__27_i_0_valid_out_0_reg_166_NO_SHIFT_REG;
assign rcnode_165to166_rc0_bb2__27_i_0_valid_out_1_NO_SHIFT_REG = rcnode_165to166_rc0_bb2__27_i_0_valid_out_0_reg_166_NO_SHIFT_REG;
assign rcnode_165to166_rc0_bb2__27_i_0_valid_out_2_NO_SHIFT_REG = rcnode_165to166_rc0_bb2__27_i_0_valid_out_0_reg_166_NO_SHIFT_REG;
assign rcnode_165to166_rc0_bb2__27_i_0_valid_out_3_NO_SHIFT_REG = rcnode_165to166_rc0_bb2__27_i_0_valid_out_0_reg_166_NO_SHIFT_REG;
assign rcnode_165to166_rc0_bb2__27_i_0_NO_SHIFT_REG = rcnode_165to166_rc0_bb2__27_i_0_reg_166_NO_SHIFT_REG;
assign rcnode_165to166_rc0_bb2__27_i_1_NO_SHIFT_REG = rcnode_165to166_rc0_bb2__27_i_0_reg_166_NO_SHIFT_REG;
assign rcnode_165to166_rc0_bb2__27_i_2_NO_SHIFT_REG = rcnode_165to166_rc0_bb2__27_i_0_reg_166_NO_SHIFT_REG;
assign rcnode_165to166_rc0_bb2__27_i_3_NO_SHIFT_REG = rcnode_165to166_rc0_bb2__27_i_0_reg_166_NO_SHIFT_REG;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_165to167_bb2_or57_i_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_165to167_bb2_or57_i_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_165to167_bb2_or57_i_0_NO_SHIFT_REG;
 logic rnode_165to167_bb2_or57_i_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_165to167_bb2_or57_i_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_165to167_bb2_or57_i_1_NO_SHIFT_REG;
 logic rnode_165to167_bb2_or57_i_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic rnode_165to167_bb2_or57_i_0_reg_167_NO_SHIFT_REG;
 logic rnode_165to167_bb2_or57_i_0_valid_out_0_reg_167_NO_SHIFT_REG;
 logic rnode_165to167_bb2_or57_i_0_stall_in_0_reg_167_NO_SHIFT_REG;
 logic rnode_165to167_bb2_or57_i_0_stall_out_reg_167_NO_SHIFT_REG;

acl_data_fifo rnode_165to167_bb2_or57_i_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_165to167_bb2_or57_i_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_165to167_bb2_or57_i_0_stall_in_0_reg_167_NO_SHIFT_REG),
	.valid_out(rnode_165to167_bb2_or57_i_0_valid_out_0_reg_167_NO_SHIFT_REG),
	.stall_out(rnode_165to167_bb2_or57_i_0_stall_out_reg_167_NO_SHIFT_REG),
	.data_in(local_bb2_or57_i),
	.data_out(rnode_165to167_bb2_or57_i_0_reg_167_NO_SHIFT_REG)
);

defparam rnode_165to167_bb2_or57_i_0_reg_167_fifo.DEPTH = 3;
defparam rnode_165to167_bb2_or57_i_0_reg_167_fifo.DATA_WIDTH = 1;
defparam rnode_165to167_bb2_or57_i_0_reg_167_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_165to167_bb2_or57_i_0_reg_167_fifo.IMPL = "ll_reg";

assign rnode_165to167_bb2_or57_i_0_reg_167_inputs_ready_NO_SHIFT_REG = local_bb2_or57_i_valid_out;
assign local_bb2_or57_i_stall_in = rnode_165to167_bb2_or57_i_0_stall_out_reg_167_NO_SHIFT_REG;
assign rnode_165to167_bb2_or57_i_0_stall_in_0_reg_167_NO_SHIFT_REG = (rnode_165to167_bb2_or57_i_0_stall_in_0_NO_SHIFT_REG | rnode_165to167_bb2_or57_i_0_stall_in_1_NO_SHIFT_REG);
assign rnode_165to167_bb2_or57_i_0_valid_out_0_NO_SHIFT_REG = rnode_165to167_bb2_or57_i_0_valid_out_0_reg_167_NO_SHIFT_REG;
assign rnode_165to167_bb2_or57_i_0_valid_out_1_NO_SHIFT_REG = rnode_165to167_bb2_or57_i_0_valid_out_0_reg_167_NO_SHIFT_REG;
assign rnode_165to167_bb2_or57_i_0_NO_SHIFT_REG = rnode_165to167_bb2_or57_i_0_reg_167_NO_SHIFT_REG;
assign rnode_165to167_bb2_or57_i_1_NO_SHIFT_REG = rnode_165to167_bb2_or57_i_0_reg_167_NO_SHIFT_REG;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_165to167_bb2_and67_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_165to167_bb2_and67_i_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_165to167_bb2_and67_i_0_NO_SHIFT_REG;
 logic rnode_165to167_bb2_and67_i_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_165to167_bb2_and67_i_0_reg_167_NO_SHIFT_REG;
 logic rnode_165to167_bb2_and67_i_0_valid_out_reg_167_NO_SHIFT_REG;
 logic rnode_165to167_bb2_and67_i_0_stall_in_reg_167_NO_SHIFT_REG;
 logic rnode_165to167_bb2_and67_i_0_stall_out_reg_167_NO_SHIFT_REG;

acl_data_fifo rnode_165to167_bb2_and67_i_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_165to167_bb2_and67_i_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_165to167_bb2_and67_i_0_stall_in_reg_167_NO_SHIFT_REG),
	.valid_out(rnode_165to167_bb2_and67_i_0_valid_out_reg_167_NO_SHIFT_REG),
	.stall_out(rnode_165to167_bb2_and67_i_0_stall_out_reg_167_NO_SHIFT_REG),
	.data_in((local_bb2_and67_i & 32'hFF800000)),
	.data_out(rnode_165to167_bb2_and67_i_0_reg_167_NO_SHIFT_REG)
);

defparam rnode_165to167_bb2_and67_i_0_reg_167_fifo.DEPTH = 3;
defparam rnode_165to167_bb2_and67_i_0_reg_167_fifo.DATA_WIDTH = 32;
defparam rnode_165to167_bb2_and67_i_0_reg_167_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_165to167_bb2_and67_i_0_reg_167_fifo.IMPL = "ll_reg";

assign rnode_165to167_bb2_and67_i_0_reg_167_inputs_ready_NO_SHIFT_REG = local_bb2_and67_i_valid_out;
assign local_bb2_and67_i_stall_in = rnode_165to167_bb2_and67_i_0_stall_out_reg_167_NO_SHIFT_REG;
assign rnode_165to167_bb2_and67_i_0_NO_SHIFT_REG = rnode_165to167_bb2_and67_i_0_reg_167_NO_SHIFT_REG;
assign rnode_165to167_bb2_and67_i_0_stall_in_reg_167_NO_SHIFT_REG = rnode_165to167_bb2_and67_i_0_stall_in_NO_SHIFT_REG;
assign rnode_165to167_bb2_and67_i_0_valid_out_NO_SHIFT_REG = rnode_165to167_bb2_and67_i_0_valid_out_reg_167_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb2_and74_i_stall_local;
wire [31:0] local_bb2_and74_i;

assign local_bb2_and74_i = ((rcnode_165to166_rc0_bb2__27_i_0_NO_SHIFT_REG[31:0] & 32'h1FFFFFF) & 32'h1);

// This section implements an unregistered operation.
// 
wire local_bb2_cmp70_i_stall_local;
wire local_bb2_cmp70_i;

assign local_bb2_cmp70_i = ((rcnode_165to166_rc0_bb2__27_i_0_NO_SHIFT_REG[63:32] & 32'hFFFFFF00) > 32'h80000000);

// This section implements an unregistered operation.
// 
wire local_bb2_var__u13_stall_local;
wire local_bb2_var__u13;

assign local_bb2_var__u13 = ($signed((rcnode_165to166_rc0_bb2__27_i_0_NO_SHIFT_REG[63:32] & 32'hFFFFFF00)) < $signed(32'h0));

// This section implements an unregistered operation.
// 
wire local_bb2_cond95_i_stall_local;
wire [31:0] local_bb2_cond95_i;

assign local_bb2_cond95_i = (rnode_165to167_bb2_or57_i_1_NO_SHIFT_REG ? 32'h7F800000 : 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb2_tobool75_i_stall_local;
wire local_bb2_tobool75_i;

assign local_bb2_tobool75_i = ((local_bb2_and74_i & 32'h1) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb2__33_i_stall_local;
wire local_bb2__33_i;

assign local_bb2__33_i = (local_bb2_tobool75_i & local_bb2_var__u13);

// This section implements an unregistered operation.
// 
wire local_bb2__34_i_valid_out;
wire local_bb2__34_i_stall_in;
wire local_bb2__34_i_inputs_ready;
wire local_bb2__34_i_stall_local;
wire local_bb2__34_i;
wire [32:0] rci_rcnode_166to167_rc0_bb2__27_i_0_reg_166;

assign local_bb2__34_i_inputs_ready = (rcnode_165to166_rc0_bb2__27_i_0_valid_out_0_NO_SHIFT_REG & rcnode_165to166_rc0_bb2__27_i_0_valid_out_3_NO_SHIFT_REG & rcnode_165to166_rc0_bb2__27_i_0_valid_out_2_NO_SHIFT_REG);
assign local_bb2__34_i = (local_bb2_cmp70_i | local_bb2__33_i);
assign local_bb2__34_i_valid_out = local_bb2__34_i_inputs_ready;
assign local_bb2__34_i_stall_local = local_bb2__34_i_stall_in;
assign rcnode_165to166_rc0_bb2__27_i_0_stall_in_0_NO_SHIFT_REG = (local_bb2__34_i_stall_local | ~(local_bb2__34_i_inputs_ready));
assign rcnode_165to166_rc0_bb2__27_i_0_stall_in_3_NO_SHIFT_REG = (local_bb2__34_i_stall_local | ~(local_bb2__34_i_inputs_ready));
assign rcnode_165to166_rc0_bb2__27_i_0_stall_in_2_NO_SHIFT_REG = (local_bb2__34_i_stall_local | ~(local_bb2__34_i_inputs_ready));
assign rci_rcnode_166to167_rc0_bb2__27_i_0_reg_166[31:0] = (rcnode_165to166_rc0_bb2__27_i_0_NO_SHIFT_REG[31:0] & 32'h1FFFFFF);
assign rci_rcnode_166to167_rc0_bb2__27_i_0_reg_166[32] = local_bb2__34_i;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_166to167_rc0_bb2__27_i_0_valid_out_0_NO_SHIFT_REG;
 logic rcnode_166to167_rc0_bb2__27_i_0_stall_in_0_NO_SHIFT_REG;
 logic [32:0] rcnode_166to167_rc0_bb2__27_i_0_NO_SHIFT_REG;
 logic rcnode_166to167_rc0_bb2__27_i_0_valid_out_1_NO_SHIFT_REG;
 logic rcnode_166to167_rc0_bb2__27_i_0_stall_in_1_NO_SHIFT_REG;
 logic [32:0] rcnode_166to167_rc0_bb2__27_i_1_NO_SHIFT_REG;
 logic rcnode_166to167_rc0_bb2__27_i_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic [32:0] rcnode_166to167_rc0_bb2__27_i_0_reg_167_NO_SHIFT_REG;
 logic rcnode_166to167_rc0_bb2__27_i_0_valid_out_0_reg_167_NO_SHIFT_REG;
 logic rcnode_166to167_rc0_bb2__27_i_0_stall_in_0_reg_167_NO_SHIFT_REG;
 logic rcnode_166to167_rc0_bb2__27_i_0_stall_out_0_reg_167_IP_NO_SHIFT_REG;
 logic rcnode_166to167_rc0_bb2__27_i_0_stall_out_0_reg_167_NO_SHIFT_REG;

acl_data_fifo rcnode_166to167_rc0_bb2__27_i_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_166to167_rc0_bb2__27_i_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_166to167_rc0_bb2__27_i_0_stall_in_0_reg_167_NO_SHIFT_REG),
	.valid_out(rcnode_166to167_rc0_bb2__27_i_0_valid_out_0_reg_167_NO_SHIFT_REG),
	.stall_out(rcnode_166to167_rc0_bb2__27_i_0_stall_out_0_reg_167_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_166to167_rc0_bb2__27_i_0_reg_166),
	.data_out(rcnode_166to167_rc0_bb2__27_i_0_reg_167_NO_SHIFT_REG)
);

defparam rcnode_166to167_rc0_bb2__27_i_0_reg_167_fifo.DEPTH = 1;
defparam rcnode_166to167_rc0_bb2__27_i_0_reg_167_fifo.DATA_WIDTH = 33;
defparam rcnode_166to167_rc0_bb2__27_i_0_reg_167_fifo.ALLOW_FULL_WRITE = 1;
defparam rcnode_166to167_rc0_bb2__27_i_0_reg_167_fifo.IMPL = "ll_reg";

assign rcnode_166to167_rc0_bb2__27_i_0_reg_167_inputs_ready_NO_SHIFT_REG = (local_bb2__34_i_valid_out & rcnode_165to166_rc0_bb2__27_i_0_valid_out_1_NO_SHIFT_REG);
assign rcnode_166to167_rc0_bb2__27_i_0_stall_out_0_reg_167_NO_SHIFT_REG = (~(rcnode_166to167_rc0_bb2__27_i_0_reg_167_inputs_ready_NO_SHIFT_REG) | rcnode_166to167_rc0_bb2__27_i_0_stall_out_0_reg_167_IP_NO_SHIFT_REG);
assign local_bb2__34_i_stall_in = rcnode_166to167_rc0_bb2__27_i_0_stall_out_0_reg_167_NO_SHIFT_REG;
assign rcnode_165to166_rc0_bb2__27_i_0_stall_in_1_NO_SHIFT_REG = rcnode_166to167_rc0_bb2__27_i_0_stall_out_0_reg_167_NO_SHIFT_REG;
assign rcnode_166to167_rc0_bb2__27_i_0_stall_in_0_reg_167_NO_SHIFT_REG = (rcnode_166to167_rc0_bb2__27_i_0_stall_in_0_NO_SHIFT_REG | rcnode_166to167_rc0_bb2__27_i_0_stall_in_1_NO_SHIFT_REG);
assign rcnode_166to167_rc0_bb2__27_i_0_valid_out_0_NO_SHIFT_REG = rcnode_166to167_rc0_bb2__27_i_0_valid_out_0_reg_167_NO_SHIFT_REG;
assign rcnode_166to167_rc0_bb2__27_i_0_valid_out_1_NO_SHIFT_REG = rcnode_166to167_rc0_bb2__27_i_0_valid_out_0_reg_167_NO_SHIFT_REG;
assign rcnode_166to167_rc0_bb2__27_i_0_NO_SHIFT_REG = rcnode_166to167_rc0_bb2__27_i_0_reg_167_NO_SHIFT_REG;
assign rcnode_166to167_rc0_bb2__27_i_1_NO_SHIFT_REG = rcnode_166to167_rc0_bb2__27_i_0_reg_167_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb2_or69_vec_0_i_stall_local;
wire [63:0] local_bb2_or69_vec_0_i;

assign local_bb2_or69_vec_0_i[31:0] = (rcnode_166to167_rc0_bb2__27_i_0_NO_SHIFT_REG[31:0] & 32'h1FFFFFF);
assign local_bb2_or69_vec_0_i[63:32] = 32'bx;

// This section implements an unregistered operation.
// 
wire local_bb2_cond_i_stall_local;
wire [31:0] local_bb2_cond_i;

assign local_bb2_cond_i[31:1] = 31'h0;
assign local_bb2_cond_i[0] = rcnode_166to167_rc0_bb2__27_i_0_NO_SHIFT_REG[32];

// This section implements an unregistered operation.
// 
wire local_bb2_or69_vec_1_i_stall_local;
wire [63:0] local_bb2_or69_vec_1_i;

assign local_bb2_or69_vec_1_i[31:0] = local_bb2_or69_vec_0_i[31:0];
assign local_bb2_or69_vec_1_i[63:32] = (rnode_165to167_bb2_and67_i_0_NO_SHIFT_REG & 32'hFF800000);

// This section implements an unregistered operation.
// 
wire local_bb2_or69_bitvec_i_stall_local;
wire [63:0] local_bb2_or69_bitvec_i;

assign local_bb2_or69_bitvec_i = local_bb2_or69_vec_1_i;

// This section implements an unregistered operation.
// 
wire local_bb2_or69_shuffle_i_stall_local;
wire [31:0] local_bb2_or69_shuffle_i;

assign local_bb2_or69_shuffle_i[0] = local_bb2_or69_bitvec_i[0];
assign local_bb2_or69_shuffle_i[1] = local_bb2_or69_bitvec_i[1];
assign local_bb2_or69_shuffle_i[2] = local_bb2_or69_bitvec_i[2];
assign local_bb2_or69_shuffle_i[3] = local_bb2_or69_bitvec_i[3];
assign local_bb2_or69_shuffle_i[4] = local_bb2_or69_bitvec_i[4];
assign local_bb2_or69_shuffle_i[5] = local_bb2_or69_bitvec_i[5];
assign local_bb2_or69_shuffle_i[6] = local_bb2_or69_bitvec_i[6];
assign local_bb2_or69_shuffle_i[7] = local_bb2_or69_bitvec_i[7];
assign local_bb2_or69_shuffle_i[8] = local_bb2_or69_bitvec_i[8];
assign local_bb2_or69_shuffle_i[9] = local_bb2_or69_bitvec_i[9];
assign local_bb2_or69_shuffle_i[10] = local_bb2_or69_bitvec_i[10];
assign local_bb2_or69_shuffle_i[11] = local_bb2_or69_bitvec_i[11];
assign local_bb2_or69_shuffle_i[12] = local_bb2_or69_bitvec_i[12];
assign local_bb2_or69_shuffle_i[13] = local_bb2_or69_bitvec_i[13];
assign local_bb2_or69_shuffle_i[14] = local_bb2_or69_bitvec_i[14];
assign local_bb2_or69_shuffle_i[15] = local_bb2_or69_bitvec_i[15];
assign local_bb2_or69_shuffle_i[16] = local_bb2_or69_bitvec_i[16];
assign local_bb2_or69_shuffle_i[17] = local_bb2_or69_bitvec_i[17];
assign local_bb2_or69_shuffle_i[18] = local_bb2_or69_bitvec_i[18];
assign local_bb2_or69_shuffle_i[19] = local_bb2_or69_bitvec_i[19];
assign local_bb2_or69_shuffle_i[20] = local_bb2_or69_bitvec_i[20];
assign local_bb2_or69_shuffle_i[21] = local_bb2_or69_bitvec_i[21];
assign local_bb2_or69_shuffle_i[22] = local_bb2_or69_bitvec_i[22];
assign local_bb2_or69_shuffle_i[23] = local_bb2_or69_bitvec_i[55];
assign local_bb2_or69_shuffle_i[24] = local_bb2_or69_bitvec_i[56];
assign local_bb2_or69_shuffle_i[25] = local_bb2_or69_bitvec_i[57];
assign local_bb2_or69_shuffle_i[26] = local_bb2_or69_bitvec_i[58];
assign local_bb2_or69_shuffle_i[27] = local_bb2_or69_bitvec_i[59];
assign local_bb2_or69_shuffle_i[28] = local_bb2_or69_bitvec_i[60];
assign local_bb2_or69_shuffle_i[29] = local_bb2_or69_bitvec_i[61];
assign local_bb2_or69_shuffle_i[30] = local_bb2_or69_bitvec_i[62];
assign local_bb2_or69_shuffle_i[31] = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb2_or69_compressed_i_stall_local;
wire [31:0] local_bb2_or69_compressed_i;

assign local_bb2_or69_compressed_i = local_bb2_or69_shuffle_i;

// This section implements an unregistered operation.
// 
wire local_bb2_add78_i_stall_local;
wire [31:0] local_bb2_add78_i;

assign local_bb2_add78_i = ((local_bb2_cond_i & 32'h1) + (local_bb2_or69_compressed_i & 32'h7FFFFFFF));

// This section implements an unregistered operation.
// 
wire local_bb2_or80_vec_0_i_stall_local;
wire [63:0] local_bb2_or80_vec_0_i;

assign local_bb2_or80_vec_0_i[31:0] = local_bb2_add78_i;
assign local_bb2_or80_vec_0_i[63:32] = 32'bx;

// This section implements an unregistered operation.
// 
wire local_bb2_and81_i_stall_local;
wire [31:0] local_bb2_and81_i;

assign local_bb2_and81_i = (local_bb2_add78_i & 32'h800000);

// This section implements an unregistered operation.
// 
wire local_bb2_or80_vec_1_i_stall_local;
wire [63:0] local_bb2_or80_vec_1_i;

assign local_bb2_or80_vec_1_i[31:0] = local_bb2_or80_vec_0_i[31:0];
assign local_bb2_or80_vec_1_i[63:32] = rnode_162to167_bb2_xor_i_1_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb2_cmp82_i_stall_local;
wire local_bb2_cmp82_i;

assign local_bb2_cmp82_i = ((local_bb2_and81_i & 32'h800000) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb2_or80_bitvec_i_stall_local;
wire [63:0] local_bb2_or80_bitvec_i;

assign local_bb2_or80_bitvec_i = local_bb2_or80_vec_1_i;

// This section implements an unregistered operation.
// 
wire local_bb2_brmerge16_i_stall_local;
wire local_bb2_brmerge16_i;

assign local_bb2_brmerge16_i = (local_bb2_cmp82_i | rnode_165to167_bb2_cmp65_not_i_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb2_or80_shuffle_i_stall_local;
wire [31:0] local_bb2_or80_shuffle_i;

assign local_bb2_or80_shuffle_i[0] = local_bb2_or80_bitvec_i[0];
assign local_bb2_or80_shuffle_i[1] = local_bb2_or80_bitvec_i[1];
assign local_bb2_or80_shuffle_i[2] = local_bb2_or80_bitvec_i[2];
assign local_bb2_or80_shuffle_i[3] = local_bb2_or80_bitvec_i[3];
assign local_bb2_or80_shuffle_i[4] = local_bb2_or80_bitvec_i[4];
assign local_bb2_or80_shuffle_i[5] = local_bb2_or80_bitvec_i[5];
assign local_bb2_or80_shuffle_i[6] = local_bb2_or80_bitvec_i[6];
assign local_bb2_or80_shuffle_i[7] = local_bb2_or80_bitvec_i[7];
assign local_bb2_or80_shuffle_i[8] = local_bb2_or80_bitvec_i[8];
assign local_bb2_or80_shuffle_i[9] = local_bb2_or80_bitvec_i[9];
assign local_bb2_or80_shuffle_i[10] = local_bb2_or80_bitvec_i[10];
assign local_bb2_or80_shuffle_i[11] = local_bb2_or80_bitvec_i[11];
assign local_bb2_or80_shuffle_i[12] = local_bb2_or80_bitvec_i[12];
assign local_bb2_or80_shuffle_i[13] = local_bb2_or80_bitvec_i[13];
assign local_bb2_or80_shuffle_i[14] = local_bb2_or80_bitvec_i[14];
assign local_bb2_or80_shuffle_i[15] = local_bb2_or80_bitvec_i[15];
assign local_bb2_or80_shuffle_i[16] = local_bb2_or80_bitvec_i[16];
assign local_bb2_or80_shuffle_i[17] = local_bb2_or80_bitvec_i[17];
assign local_bb2_or80_shuffle_i[18] = local_bb2_or80_bitvec_i[18];
assign local_bb2_or80_shuffle_i[19] = local_bb2_or80_bitvec_i[19];
assign local_bb2_or80_shuffle_i[20] = local_bb2_or80_bitvec_i[20];
assign local_bb2_or80_shuffle_i[21] = local_bb2_or80_bitvec_i[21];
assign local_bb2_or80_shuffle_i[22] = local_bb2_or80_bitvec_i[22];
assign local_bb2_or80_shuffle_i[23] = local_bb2_or80_bitvec_i[23];
assign local_bb2_or80_shuffle_i[24] = local_bb2_or80_bitvec_i[24];
assign local_bb2_or80_shuffle_i[25] = local_bb2_or80_bitvec_i[25];
assign local_bb2_or80_shuffle_i[26] = local_bb2_or80_bitvec_i[26];
assign local_bb2_or80_shuffle_i[27] = local_bb2_or80_bitvec_i[27];
assign local_bb2_or80_shuffle_i[28] = local_bb2_or80_bitvec_i[28];
assign local_bb2_or80_shuffle_i[29] = local_bb2_or80_bitvec_i[29];
assign local_bb2_or80_shuffle_i[30] = local_bb2_or80_bitvec_i[30];
assign local_bb2_or80_shuffle_i[31] = local_bb2_or80_bitvec_i[63];

// This section implements an unregistered operation.
// 
wire local_bb2_tobool87_i_stall_local;
wire local_bb2_tobool87_i;

assign local_bb2_tobool87_i = (local_bb2_brmerge16_i & rnode_165to167_bb2_cmp63_i_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb2_or80_compressed_i_stall_local;
wire [31:0] local_bb2_or80_compressed_i;

assign local_bb2_or80_compressed_i = local_bb2_or80_shuffle_i;

// This section implements an unregistered operation.
// 
wire local_bb2_reduction_5_i_stall_local;
wire local_bb2_reduction_5_i;

assign local_bb2_reduction_5_i = (local_bb2_tobool87_i | rnode_162to167_bb2_reduction_3_i_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb2_reduction_6_i_stall_local;
wire local_bb2_reduction_6_i;

assign local_bb2_reduction_6_i = (rnode_165to167_bb2_or57_i_0_NO_SHIFT_REG | local_bb2_reduction_5_i);

// This section implements an unregistered operation.
// 
wire local_bb2_and4__i_stall_local;
wire [31:0] local_bb2_and4__i;

assign local_bb2_and4__i = (local_bb2_reduction_6_i ? (local_bb2_and4_i & 32'h80000000) : 32'hFFFFFFFF);

// This section implements an unregistered operation.
// 
wire local_bb2_and93_i_stall_local;
wire [31:0] local_bb2_and93_i;

assign local_bb2_and93_i = (local_bb2_and4__i & local_bb2_or80_compressed_i);

// This section implements an unregistered operation.
// 
wire local_bb2_or96_i_stall_local;
wire [31:0] local_bb2_or96_i;

assign local_bb2_or96_i = (local_bb2_and93_i | (local_bb2_cond95_i & 32'h7F800000));

// This section implements an unregistered operation.
// 
wire local_bb2_var__u14_stall_local;
wire [31:0] local_bb2_var__u14;

assign local_bb2_var__u14 = local_bb2_or96_i;

// This section implements an unregistered operation.
// 
wire local_bb2_var__u15_valid_out;
wire local_bb2_var__u15_stall_in;
wire local_bb2_var__u15_inputs_ready;
wire local_bb2_var__u15_stall_local;
wire [31:0] local_bb2_var__u15;

assign local_bb2_var__u15_inputs_ready = (rnode_162to167_bb2_xor_i_0_valid_out_0_NO_SHIFT_REG & rnode_162to167_bb2_xor_i_0_valid_out_1_NO_SHIFT_REG & rnode_162to167_bb2_reduction_3_i_0_valid_out_NO_SHIFT_REG & rnode_165to167_bb2_or57_i_0_valid_out_0_NO_SHIFT_REG & rnode_162to167_bb2__23_i_0_valid_out_NO_SHIFT_REG & rnode_165to167_bb2_or57_i_0_valid_out_1_NO_SHIFT_REG & rnode_165to167_bb2_cmp63_i_0_valid_out_NO_SHIFT_REG & rnode_165to167_bb2_cmp65_not_i_0_valid_out_NO_SHIFT_REG & rcnode_166to167_rc0_bb2__27_i_0_valid_out_1_NO_SHIFT_REG & rnode_165to167_bb2_and67_i_0_valid_out_NO_SHIFT_REG & rcnode_166to167_rc0_bb2__27_i_0_valid_out_0_NO_SHIFT_REG);
assign local_bb2_var__u15 = (rnode_162to167_bb2__23_i_0_NO_SHIFT_REG ? 32'h7FC00000 : local_bb2_var__u14);
assign local_bb2_var__u15_valid_out = local_bb2_var__u15_inputs_ready;
assign local_bb2_var__u15_stall_local = local_bb2_var__u15_stall_in;
assign rnode_162to167_bb2_xor_i_0_stall_in_0_NO_SHIFT_REG = (local_bb2_var__u15_stall_local | ~(local_bb2_var__u15_inputs_ready));
assign rnode_162to167_bb2_xor_i_0_stall_in_1_NO_SHIFT_REG = (local_bb2_var__u15_stall_local | ~(local_bb2_var__u15_inputs_ready));
assign rnode_162to167_bb2_reduction_3_i_0_stall_in_NO_SHIFT_REG = (local_bb2_var__u15_stall_local | ~(local_bb2_var__u15_inputs_ready));
assign rnode_165to167_bb2_or57_i_0_stall_in_0_NO_SHIFT_REG = (local_bb2_var__u15_stall_local | ~(local_bb2_var__u15_inputs_ready));
assign rnode_162to167_bb2__23_i_0_stall_in_NO_SHIFT_REG = (local_bb2_var__u15_stall_local | ~(local_bb2_var__u15_inputs_ready));
assign rnode_165to167_bb2_or57_i_0_stall_in_1_NO_SHIFT_REG = (local_bb2_var__u15_stall_local | ~(local_bb2_var__u15_inputs_ready));
assign rnode_165to167_bb2_cmp63_i_0_stall_in_NO_SHIFT_REG = (local_bb2_var__u15_stall_local | ~(local_bb2_var__u15_inputs_ready));
assign rnode_165to167_bb2_cmp65_not_i_0_stall_in_NO_SHIFT_REG = (local_bb2_var__u15_stall_local | ~(local_bb2_var__u15_inputs_ready));
assign rcnode_166to167_rc0_bb2__27_i_0_stall_in_1_NO_SHIFT_REG = (local_bb2_var__u15_stall_local | ~(local_bb2_var__u15_inputs_ready));
assign rnode_165to167_bb2_and67_i_0_stall_in_NO_SHIFT_REG = (local_bb2_var__u15_stall_local | ~(local_bb2_var__u15_inputs_ready));
assign rcnode_166to167_rc0_bb2__27_i_0_stall_in_0_NO_SHIFT_REG = (local_bb2_var__u15_stall_local | ~(local_bb2_var__u15_inputs_ready));

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_167to168_bb2_var__u15_0_valid_out_NO_SHIFT_REG;
 logic rnode_167to168_bb2_var__u15_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_167to168_bb2_var__u15_0_NO_SHIFT_REG;
 logic rnode_167to168_bb2_var__u15_0_reg_168_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_167to168_bb2_var__u15_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb2_var__u15_0_valid_out_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb2_var__u15_0_stall_in_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb2_var__u15_0_stall_out_reg_168_NO_SHIFT_REG;

acl_data_fifo rnode_167to168_bb2_var__u15_0_reg_168_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_167to168_bb2_var__u15_0_reg_168_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_167to168_bb2_var__u15_0_stall_in_reg_168_NO_SHIFT_REG),
	.valid_out(rnode_167to168_bb2_var__u15_0_valid_out_reg_168_NO_SHIFT_REG),
	.stall_out(rnode_167to168_bb2_var__u15_0_stall_out_reg_168_NO_SHIFT_REG),
	.data_in(local_bb2_var__u15),
	.data_out(rnode_167to168_bb2_var__u15_0_reg_168_NO_SHIFT_REG)
);

defparam rnode_167to168_bb2_var__u15_0_reg_168_fifo.DEPTH = 2;
defparam rnode_167to168_bb2_var__u15_0_reg_168_fifo.DATA_WIDTH = 32;
defparam rnode_167to168_bb2_var__u15_0_reg_168_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_167to168_bb2_var__u15_0_reg_168_fifo.IMPL = "ll_reg";

assign rnode_167to168_bb2_var__u15_0_reg_168_inputs_ready_NO_SHIFT_REG = local_bb2_var__u15_valid_out;
assign local_bb2_var__u15_stall_in = rnode_167to168_bb2_var__u15_0_stall_out_reg_168_NO_SHIFT_REG;
assign rnode_167to168_bb2_var__u15_0_NO_SHIFT_REG = rnode_167to168_bb2_var__u15_0_reg_168_NO_SHIFT_REG;
assign rnode_167to168_bb2_var__u15_0_stall_in_reg_168_NO_SHIFT_REG = rnode_167to168_bb2_var__u15_0_stall_in_NO_SHIFT_REG;
assign rnode_167to168_bb2_var__u15_0_valid_out_NO_SHIFT_REG = rnode_167to168_bb2_var__u15_0_valid_out_reg_168_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb2_st__inputs_ready;
 reg local_bb2_st__valid_out_NO_SHIFT_REG;
wire local_bb2_st__stall_in;
wire local_bb2_st__output_regs_ready;
wire local_bb2_st__fu_stall_out;
wire local_bb2_st__fu_valid_out;
wire local_bb2_st__causedstall;

lsu_top lsu_local_bb2_st_ (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb2_st__fu_stall_out),
	.i_valid(local_bb2_st__inputs_ready),
	.i_address((rnode_167to168_bb2_arrayidx12_0_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFFFC)),
	.i_writedata(rnode_167to168_bb2_var__u15_0_NO_SHIFT_REG),
	.i_cmpdata(),
	.i_predicate(rnode_167to168_c4_exe2_0_NO_SHIFT_REG),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb2_st__output_regs_ready)),
	.o_valid(local_bb2_st__fu_valid_out),
	.o_readdata(),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb2_st__active),
	.avm_address(avm_local_bb2_st__address),
	.avm_read(avm_local_bb2_st__read),
	.avm_enable(avm_local_bb2_st__enable),
	.avm_readdata(avm_local_bb2_st__readdata),
	.avm_write(avm_local_bb2_st__write),
	.avm_writeack(avm_local_bb2_st__writeack),
	.avm_burstcount(avm_local_bb2_st__burstcount),
	.avm_writedata(avm_local_bb2_st__writedata),
	.avm_byteenable(avm_local_bb2_st__byteenable),
	.avm_waitrequest(avm_local_bb2_st__waitrequest),
	.avm_readdatavalid(avm_local_bb2_st__readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb2_st_.AWIDTH = 32;
defparam lsu_local_bb2_st_.WIDTH_BYTES = 4;
defparam lsu_local_bb2_st_.MWIDTH_BYTES = 64;
defparam lsu_local_bb2_st_.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb2_st_.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb2_st_.READ = 0;
defparam lsu_local_bb2_st_.ATOMIC = 0;
defparam lsu_local_bb2_st_.WIDTH = 32;
defparam lsu_local_bb2_st_.MWIDTH = 512;
defparam lsu_local_bb2_st_.ATOMIC_WIDTH = 3;
defparam lsu_local_bb2_st_.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb2_st_.KERNEL_SIDE_MEM_LATENCY = 160;
defparam lsu_local_bb2_st_.MEMORY_SIDE_MEM_LATENCY = 18;
defparam lsu_local_bb2_st_.USE_WRITE_ACK = 1;
defparam lsu_local_bb2_st_.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb2_st_.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb2_st_.NUMBER_BANKS = 1;
defparam lsu_local_bb2_st_.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb2_st_.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb2_st_.USEINPUTFIFO = 0;
defparam lsu_local_bb2_st_.USECACHING = 0;
defparam lsu_local_bb2_st_.USEOUTPUTFIFO = 1;
defparam lsu_local_bb2_st_.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb2_st_.ADDRSPACE = 1;
defparam lsu_local_bb2_st_.STYLE = "BURST-COALESCED";
defparam lsu_local_bb2_st_.USE_BYTE_EN = 0;

assign local_bb2_st__inputs_ready = (rnode_167to168_bb2_var__u15_0_valid_out_NO_SHIFT_REG & rnode_167to168_c4_exe2_0_valid_out_0_NO_SHIFT_REG & rnode_167to168_bb2_arrayidx12_0_valid_out_NO_SHIFT_REG);
assign local_bb2_st__output_regs_ready = (&(~(local_bb2_st__valid_out_NO_SHIFT_REG) | ~(local_bb2_st__stall_in)));
assign rnode_167to168_bb2_var__u15_0_stall_in_NO_SHIFT_REG = (local_bb2_st__fu_stall_out | ~(local_bb2_st__inputs_ready));
assign rnode_167to168_c4_exe2_0_stall_in_0_NO_SHIFT_REG = (local_bb2_st__fu_stall_out | ~(local_bb2_st__inputs_ready));
assign rnode_167to168_bb2_arrayidx12_0_stall_in_NO_SHIFT_REG = (local_bb2_st__fu_stall_out | ~(local_bb2_st__inputs_ready));
assign local_bb2_st__causedstall = (local_bb2_st__inputs_ready && (local_bb2_st__fu_stall_out && !(~(local_bb2_st__output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_st__valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_st__output_regs_ready)
		begin
			local_bb2_st__valid_out_NO_SHIFT_REG <= local_bb2_st__fu_valid_out;
		end
		else
		begin
			if (~(local_bb2_st__stall_in))
			begin
				local_bb2_st__valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_328to328_bb2_st__valid_out;
wire rstag_328to328_bb2_st__stall_in;
wire rstag_328to328_bb2_st__inputs_ready;
wire rstag_328to328_bb2_st__stall_local;
 reg rstag_328to328_bb2_st__staging_valid_NO_SHIFT_REG;
wire rstag_328to328_bb2_st__combined_valid;

assign rstag_328to328_bb2_st__inputs_ready = local_bb2_st__valid_out_NO_SHIFT_REG;
assign rstag_328to328_bb2_st__combined_valid = (rstag_328to328_bb2_st__staging_valid_NO_SHIFT_REG | rstag_328to328_bb2_st__inputs_ready);
assign rstag_328to328_bb2_st__valid_out = rstag_328to328_bb2_st__combined_valid;
assign rstag_328to328_bb2_st__stall_local = rstag_328to328_bb2_st__stall_in;
assign local_bb2_st__stall_in = (|rstag_328to328_bb2_st__staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_328to328_bb2_st__staging_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (rstag_328to328_bb2_st__stall_local)
		begin
			if (~(rstag_328to328_bb2_st__staging_valid_NO_SHIFT_REG))
			begin
				rstag_328to328_bb2_st__staging_valid_NO_SHIFT_REG <= rstag_328to328_bb2_st__inputs_ready;
			end
		end
		else
		begin
			rstag_328to328_bb2_st__staging_valid_NO_SHIFT_REG <= 1'b0;
		end
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_0_NO_SHIFT_REG;
 reg branch_compare_result_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg lvb_c4_exe2_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb2_add19_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb2_cmp20_GUARD_valid_out & rcnode_327to328_rc1_bb2_add19_0_valid_out_0_NO_SHIFT_REG & rstag_328to328_bb2_st__valid_out);
assign branch_var__output_regs_ready = (~(branch_node_valid_out_0_NO_SHIFT_REG) | (((branch_compare_result_NO_SHIFT_REG != 1'b1) & ~(stall_in_1)) | (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & ~(stall_in_0))));
assign local_bb2_cmp20_GUARD_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_327to328_rc1_bb2_add19_0_stall_in_0_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rstag_328to328_bb2_st__stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_c4_exe2_0 = lvb_c4_exe2_0_reg_NO_SHIFT_REG;
assign lvb_c4_exe2_1 = lvb_c4_exe2_0_reg_NO_SHIFT_REG;
assign lvb_bb2_add19_0 = lvb_bb2_add19_0_reg_NO_SHIFT_REG;
assign lvb_bb2_add19_1 = lvb_bb2_add19_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_0 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_1 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign valid_out_0 = (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG);
assign valid_out_1 = ((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG);
assign combined_branch_stall_in_signal = ((((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_1) | ((~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_0));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		lvb_c4_exe2_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb2_add19_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= 'x;
		branch_compare_result_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_0_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_c4_exe2_0_reg_NO_SHIFT_REG <= rcnode_327to328_rc1_bb2_add19_0_NO_SHIFT_REG[64];
			lvb_bb2_add19_0_reg_NO_SHIFT_REG <= rcnode_327to328_rc1_bb2_add19_0_NO_SHIFT_REG[31:0];
			lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= rcnode_327to328_rc1_bb2_add19_0_NO_SHIFT_REG[63:32];
			branch_compare_result_NO_SHIFT_REG <= local_bb2_cmp20_GUARD;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module dataLayer_basic_block_3
	(
		input 		clock,
		input 		resetn,
		input 		valid_in,
		output 		stall_out,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out,
		input 		stall_in,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		input 		start
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in;
 reg merge_node_valid_out_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = (|(merge_node_stall_in & merge_node_valid_out_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in))
			begin
				merge_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
wire branch_var__output_regs_ready;

assign branch_var__inputs_ready = merge_node_valid_out_NO_SHIFT_REG;
assign branch_var__output_regs_ready = ~(stall_in);
assign merge_node_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign valid_out = branch_var__inputs_ready;
assign lvb_input_acl_hw_wg_id = local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;

endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module dataLayer_function
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_global_id_0,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		stall_out,
		input 		valid_in,
		output [31:0] 		output_0,
		output 		valid_out,
		input 		stall_in,
		input [31:0] 		workgroup_size,
		output 		avm_local_bb0_ld__enable,
		input [511:0] 		avm_local_bb0_ld__readdata,
		input 		avm_local_bb0_ld__readdatavalid,
		input 		avm_local_bb0_ld__waitrequest,
		output [31:0] 		avm_local_bb0_ld__address,
		output 		avm_local_bb0_ld__read,
		output 		avm_local_bb0_ld__write,
		input 		avm_local_bb0_ld__writeack,
		output [511:0] 		avm_local_bb0_ld__writedata,
		output [63:0] 		avm_local_bb0_ld__byteenable,
		output [4:0] 		avm_local_bb0_ld__burstcount,
		output 		avm_local_bb2_ld__enable,
		input [511:0] 		avm_local_bb2_ld__readdata,
		input 		avm_local_bb2_ld__readdatavalid,
		input 		avm_local_bb2_ld__waitrequest,
		output [31:0] 		avm_local_bb2_ld__address,
		output 		avm_local_bb2_ld__read,
		output 		avm_local_bb2_ld__write,
		input 		avm_local_bb2_ld__writeack,
		output [511:0] 		avm_local_bb2_ld__writedata,
		output [63:0] 		avm_local_bb2_ld__byteenable,
		output [4:0] 		avm_local_bb2_ld__burstcount,
		output 		avm_local_bb2_ld__u3_enable,
		input [511:0] 		avm_local_bb2_ld__u3_readdata,
		input 		avm_local_bb2_ld__u3_readdatavalid,
		input 		avm_local_bb2_ld__u3_waitrequest,
		output [31:0] 		avm_local_bb2_ld__u3_address,
		output 		avm_local_bb2_ld__u3_read,
		output 		avm_local_bb2_ld__u3_write,
		input 		avm_local_bb2_ld__u3_writeack,
		output [511:0] 		avm_local_bb2_ld__u3_writedata,
		output [63:0] 		avm_local_bb2_ld__u3_byteenable,
		output [4:0] 		avm_local_bb2_ld__u3_burstcount,
		output 		avm_local_bb2_st__enable,
		input [511:0] 		avm_local_bb2_st__readdata,
		input 		avm_local_bb2_st__readdatavalid,
		input 		avm_local_bb2_st__waitrequest,
		output [31:0] 		avm_local_bb2_st__address,
		output 		avm_local_bb2_st__read,
		output 		avm_local_bb2_st__write,
		input 		avm_local_bb2_st__writeack,
		output [511:0] 		avm_local_bb2_st__writedata,
		output [63:0] 		avm_local_bb2_st__byteenable,
		output [4:0] 		avm_local_bb2_st__burstcount,
		input 		clock2x,
		input 		start,
		input [63:0] 		input_param,
		input [31:0] 		input_global_size_2,
		input [31:0] 		input_global_size_1,
		input [31:0] 		input_global_size_0,
		input [63:0] 		input_inputFeatureMap,
		input [63:0] 		input_outputFeatureMap,
		output reg 		has_a_write_pending,
		output reg 		has_a_lsu_active
	);


wire [31:0] cur_cycle;
wire bb_0_stall_out;
wire bb_0_valid_out;
wire [31:0] bb_0_lvb_bb0_ld_;
wire [63:0] bb_0_lvb_bb0_scale;
wire [31:0] bb_0_lvb_bb0_mul17;
wire [31:0] bb_0_lvb_input_global_id_0;
wire [31:0] bb_0_lvb_input_global_id_1;
wire [31:0] bb_0_lvb_input_global_id_2;
wire [31:0] bb_0_lvb_input_acl_hw_wg_id;
wire bb_0_local_bb0_ld__active;
wire bb_1_stall_out;
wire bb_1_valid_out;
wire [31:0] bb_1_lvb_bb1_c4_exe1;
wire bb_1_lvb_bb1_c4_exe2;
wire [31:0] bb_1_lvb_input_acl_hw_wg_id;
wire bb_2_stall_out_0;
wire bb_2_stall_out_1;
wire bb_2_valid_out_0;
wire bb_2_lvb_c4_exe2_0;
wire [31:0] bb_2_lvb_bb2_add19_0;
wire [31:0] bb_2_lvb_input_acl_hw_wg_id_0;
wire bb_2_valid_out_1;
wire bb_2_lvb_c4_exe2_1;
wire [31:0] bb_2_lvb_bb2_add19_1;
wire [31:0] bb_2_lvb_input_acl_hw_wg_id_1;
wire bb_2_local_bb2_ld__active;
wire bb_2_local_bb2_ld__u3_active;
wire bb_2_local_bb2_st__active;
wire bb_3_stall_out;
wire bb_3_valid_out;
wire [31:0] bb_3_lvb_input_acl_hw_wg_id;
wire loop_limiter_0_stall_out;
wire loop_limiter_0_valid_out;
wire writes_pending;
wire [3:0] lsus_active;

dataLayer_basic_block_0 dataLayer_basic_block_0 (
	.clock(clock),
	.resetn(resetn),
	.start(start),
	.input_param(input_param),
	.input_global_size_2(input_global_size_2),
	.input_global_size_1(input_global_size_1),
	.input_global_size_0(input_global_size_0),
	.valid_in(valid_in),
	.stall_out(bb_0_stall_out),
	.input_global_id_0(input_global_id_0),
	.input_global_id_1(input_global_id_1),
	.input_global_id_2(input_global_id_2),
	.input_acl_hw_wg_id(input_acl_hw_wg_id),
	.valid_out(bb_0_valid_out),
	.stall_in(bb_1_stall_out),
	.lvb_bb0_ld_(bb_0_lvb_bb0_ld_),
	.lvb_bb0_scale(bb_0_lvb_bb0_scale),
	.lvb_bb0_mul17(bb_0_lvb_bb0_mul17),
	.lvb_input_global_id_0(bb_0_lvb_input_global_id_0),
	.lvb_input_global_id_1(bb_0_lvb_input_global_id_1),
	.lvb_input_global_id_2(bb_0_lvb_input_global_id_2),
	.lvb_input_acl_hw_wg_id(bb_0_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.avm_local_bb0_ld__enable(avm_local_bb0_ld__enable),
	.avm_local_bb0_ld__readdata(avm_local_bb0_ld__readdata),
	.avm_local_bb0_ld__readdatavalid(avm_local_bb0_ld__readdatavalid),
	.avm_local_bb0_ld__waitrequest(avm_local_bb0_ld__waitrequest),
	.avm_local_bb0_ld__address(avm_local_bb0_ld__address),
	.avm_local_bb0_ld__read(avm_local_bb0_ld__read),
	.avm_local_bb0_ld__write(avm_local_bb0_ld__write),
	.avm_local_bb0_ld__writeack(avm_local_bb0_ld__writeack),
	.avm_local_bb0_ld__writedata(avm_local_bb0_ld__writedata),
	.avm_local_bb0_ld__byteenable(avm_local_bb0_ld__byteenable),
	.avm_local_bb0_ld__burstcount(avm_local_bb0_ld__burstcount),
	.local_bb0_ld__active(bb_0_local_bb0_ld__active),
	.clock2x(clock2x)
);


dataLayer_basic_block_1 dataLayer_basic_block_1 (
	.clock(clock),
	.resetn(resetn),
	.input_global_size_1(input_global_size_1),
	.input_global_size_2(input_global_size_2),
	.input_wii_ld_(bb_0_lvb_bb0_ld_),
	.input_wii_scale(bb_0_lvb_bb0_scale),
	.input_wii_mul17(bb_0_lvb_bb0_mul17),
	.valid_in(bb_0_valid_out),
	.stall_out(bb_1_stall_out),
	.input_global_id_0(bb_0_lvb_input_global_id_0),
	.input_global_id_1(bb_0_lvb_input_global_id_1),
	.input_global_id_2(bb_0_lvb_input_global_id_2),
	.input_acl_hw_wg_id(bb_0_lvb_input_acl_hw_wg_id),
	.valid_out(bb_1_valid_out),
	.stall_in(loop_limiter_0_stall_out),
	.lvb_bb1_c4_exe1(bb_1_lvb_bb1_c4_exe1),
	.lvb_bb1_c4_exe2(bb_1_lvb_bb1_c4_exe2),
	.lvb_input_acl_hw_wg_id(bb_1_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.start(start)
);


dataLayer_basic_block_2 dataLayer_basic_block_2 (
	.clock(clock),
	.resetn(resetn),
	.input_inputFeatureMap(input_inputFeatureMap),
	.input_outputFeatureMap(input_outputFeatureMap),
	.input_wii_ld_(bb_0_lvb_bb0_ld_),
	.input_wii_scale(bb_0_lvb_bb0_scale),
	.input_wii_mul17(bb_0_lvb_bb0_mul17),
	.valid_in_0(bb_2_valid_out_1),
	.stall_out_0(bb_2_stall_out_0),
	.input_c4_exe2_0(bb_2_lvb_c4_exe2_1),
	.input_loadDataCounterScale_019_0(bb_2_lvb_bb2_add19_1),
	.input_acl_hw_wg_id_0(bb_2_lvb_input_acl_hw_wg_id_1),
	.valid_in_1(loop_limiter_0_valid_out),
	.stall_out_1(bb_2_stall_out_1),
	.input_c4_exe2_1(bb_1_lvb_bb1_c4_exe2),
	.input_loadDataCounterScale_019_1(bb_1_lvb_bb1_c4_exe1),
	.input_acl_hw_wg_id_1(bb_1_lvb_input_acl_hw_wg_id),
	.valid_out_0(bb_2_valid_out_0),
	.stall_in_0(bb_3_stall_out),
	.lvb_c4_exe2_0(bb_2_lvb_c4_exe2_0),
	.lvb_bb2_add19_0(bb_2_lvb_bb2_add19_0),
	.lvb_input_acl_hw_wg_id_0(bb_2_lvb_input_acl_hw_wg_id_0),
	.valid_out_1(bb_2_valid_out_1),
	.stall_in_1(bb_2_stall_out_0),
	.lvb_c4_exe2_1(bb_2_lvb_c4_exe2_1),
	.lvb_bb2_add19_1(bb_2_lvb_bb2_add19_1),
	.lvb_input_acl_hw_wg_id_1(bb_2_lvb_input_acl_hw_wg_id_1),
	.workgroup_size(workgroup_size),
	.start(start),
	.avm_local_bb2_ld__enable(avm_local_bb2_ld__enable),
	.avm_local_bb2_ld__readdata(avm_local_bb2_ld__readdata),
	.avm_local_bb2_ld__readdatavalid(avm_local_bb2_ld__readdatavalid),
	.avm_local_bb2_ld__waitrequest(avm_local_bb2_ld__waitrequest),
	.avm_local_bb2_ld__address(avm_local_bb2_ld__address),
	.avm_local_bb2_ld__read(avm_local_bb2_ld__read),
	.avm_local_bb2_ld__write(avm_local_bb2_ld__write),
	.avm_local_bb2_ld__writeack(avm_local_bb2_ld__writeack),
	.avm_local_bb2_ld__writedata(avm_local_bb2_ld__writedata),
	.avm_local_bb2_ld__byteenable(avm_local_bb2_ld__byteenable),
	.avm_local_bb2_ld__burstcount(avm_local_bb2_ld__burstcount),
	.local_bb2_ld__active(bb_2_local_bb2_ld__active),
	.clock2x(clock2x),
	.avm_local_bb2_ld__u3_enable(avm_local_bb2_ld__u3_enable),
	.avm_local_bb2_ld__u3_readdata(avm_local_bb2_ld__u3_readdata),
	.avm_local_bb2_ld__u3_readdatavalid(avm_local_bb2_ld__u3_readdatavalid),
	.avm_local_bb2_ld__u3_waitrequest(avm_local_bb2_ld__u3_waitrequest),
	.avm_local_bb2_ld__u3_address(avm_local_bb2_ld__u3_address),
	.avm_local_bb2_ld__u3_read(avm_local_bb2_ld__u3_read),
	.avm_local_bb2_ld__u3_write(avm_local_bb2_ld__u3_write),
	.avm_local_bb2_ld__u3_writeack(avm_local_bb2_ld__u3_writeack),
	.avm_local_bb2_ld__u3_writedata(avm_local_bb2_ld__u3_writedata),
	.avm_local_bb2_ld__u3_byteenable(avm_local_bb2_ld__u3_byteenable),
	.avm_local_bb2_ld__u3_burstcount(avm_local_bb2_ld__u3_burstcount),
	.local_bb2_ld__u3_active(bb_2_local_bb2_ld__u3_active),
	.avm_local_bb2_st__enable(avm_local_bb2_st__enable),
	.avm_local_bb2_st__readdata(avm_local_bb2_st__readdata),
	.avm_local_bb2_st__readdatavalid(avm_local_bb2_st__readdatavalid),
	.avm_local_bb2_st__waitrequest(avm_local_bb2_st__waitrequest),
	.avm_local_bb2_st__address(avm_local_bb2_st__address),
	.avm_local_bb2_st__read(avm_local_bb2_st__read),
	.avm_local_bb2_st__write(avm_local_bb2_st__write),
	.avm_local_bb2_st__writeack(avm_local_bb2_st__writeack),
	.avm_local_bb2_st__writedata(avm_local_bb2_st__writedata),
	.avm_local_bb2_st__byteenable(avm_local_bb2_st__byteenable),
	.avm_local_bb2_st__burstcount(avm_local_bb2_st__burstcount),
	.local_bb2_st__active(bb_2_local_bb2_st__active)
);


dataLayer_basic_block_3 dataLayer_basic_block_3 (
	.clock(clock),
	.resetn(resetn),
	.valid_in(bb_2_valid_out_0),
	.stall_out(bb_3_stall_out),
	.input_acl_hw_wg_id(bb_2_lvb_input_acl_hw_wg_id_0),
	.valid_out(bb_3_valid_out),
	.stall_in(stall_in),
	.lvb_input_acl_hw_wg_id(bb_3_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.start(start)
);


acl_loop_limiter loop_limiter_0 (
	.clock(clock),
	.resetn(resetn),
	.i_valid(bb_1_valid_out),
	.i_stall(bb_2_stall_out_1),
	.i_valid_exit(bb_2_valid_out_0),
	.i_stall_exit(bb_3_stall_out),
	.o_valid(loop_limiter_0_valid_out),
	.o_stall(loop_limiter_0_stall_out)
);

defparam loop_limiter_0.ENTRY_WIDTH = 1;
defparam loop_limiter_0.EXIT_WIDTH = 1;
defparam loop_limiter_0.THRESHOLD = 329;

dataLayer_sys_cycle_time system_cycle_time_module (
	.clock(clock),
	.resetn(resetn),
	.cur_cycle(cur_cycle)
);


assign valid_out = bb_3_valid_out;
assign output_0 = bb_3_lvb_input_acl_hw_wg_id;
assign stall_out = bb_0_stall_out;
assign writes_pending = bb_2_local_bb2_st__active;
assign lsus_active[0] = bb_0_local_bb0_ld__active;
assign lsus_active[1] = bb_2_local_bb2_ld__active;
assign lsus_active[2] = bb_2_local_bb2_ld__u3_active;
assign lsus_active[3] = bb_2_local_bb2_st__active;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		has_a_write_pending <= 1'b0;
		has_a_lsu_active <= 1'b0;
	end
	else
	begin
		has_a_write_pending <= (|writes_pending);
		has_a_lsu_active <= (|lsus_active);
	end
end

endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module dataLayer_function_cra_slave
	(
		input 		clock,
		input 		resetn,
		output reg [255:0] 		kernel_arguments,
		output reg 		start,
		input 		finish,
		output reg [31:0] 		global_size_0,
		output reg [31:0] 		global_size_1,
		output reg [31:0] 		global_size_2,
		output reg [31:0] 		num_groups_0,
		output reg [31:0] 		num_groups_1,
		output reg [31:0] 		num_groups_2,
		output reg [31:0] 		local_size_0,
		output reg [31:0] 		local_size_1,
		output reg [31:0] 		local_size_2,
		output reg [31:0] 		global_offset_0,
		output reg [31:0] 		global_offset_1,
		output reg [31:0] 		global_offset_2,
		output reg [31:0] 		work_dim,
		output reg [31:0] 		workgroup_size,
		input 		has_a_lsu_active,
		input 		has_a_write_pending,
		input 		valid_in,
		input 		avs_cra_enable,
		input 		avs_cra_read,
		input 		avs_cra_write,
		input [4:0] 		avs_cra_address,
		input [63:0] 		avs_cra_writedata,
		input [7:0] 		avs_cra_byteenable,
		output reg [63:0] 		avs_cra_readdata,
		output reg 		avs_cra_readdatavalid,
		output 		cra_irq
	);


// This section of the wrapper implements an Avalon Slave Interface used to configure a kernel invocation.
// The few words words contain the status and the workgroup size registers.
// The remaining addressable space is reserved for kernel arguments.
 reg started_NO_SHIFT_REG;
 reg [31:0] status_NO_SHIFT_REG;
 reg [63:0] profile_data_NO_SHIFT_REG;
 reg [31:0] profile_ctrl_NO_SHIFT_REG;
 reg [63:0] profile_start_cycle_NO_SHIFT_REG;
 reg [63:0] profile_stop_cycle_NO_SHIFT_REG;
 reg [63:0] cra_readdata_st1_NO_SHIFT_REG;
 reg [4:0] cra_addr_st1_NO_SHIFT_REG;
 reg cra_read_st1_NO_SHIFT_REG;
wire [63:0] bitenable;

assign bitenable[7:0] = (avs_cra_byteenable[0] ? 8'hFF : 8'h0);
assign bitenable[15:8] = (avs_cra_byteenable[1] ? 8'hFF : 8'h0);
assign bitenable[23:16] = (avs_cra_byteenable[2] ? 8'hFF : 8'h0);
assign bitenable[31:24] = (avs_cra_byteenable[3] ? 8'hFF : 8'h0);
assign bitenable[39:32] = (avs_cra_byteenable[4] ? 8'hFF : 8'h0);
assign bitenable[47:40] = (avs_cra_byteenable[5] ? 8'hFF : 8'h0);
assign bitenable[55:48] = (avs_cra_byteenable[6] ? 8'hFF : 8'h0);
assign bitenable[63:56] = (avs_cra_byteenable[7] ? 8'hFF : 8'h0);
assign cra_irq = (status_NO_SHIFT_REG[1] | status_NO_SHIFT_REG[3]);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		start <= 1'b0;
		started_NO_SHIFT_REG <= 1'b0;
		kernel_arguments <= 256'h0;
		status_NO_SHIFT_REG <= 32'h30000;
		profile_ctrl_NO_SHIFT_REG <= 32'h4;
		profile_start_cycle_NO_SHIFT_REG <= 64'h0;
		profile_stop_cycle_NO_SHIFT_REG <= 64'hFFFFFFFFFFFFFFFF;
		work_dim <= 32'h0;
		workgroup_size <= 32'h0;
		global_size_0 <= 32'h0;
		global_size_1 <= 32'h0;
		global_size_2 <= 32'h0;
		num_groups_0 <= 32'h0;
		num_groups_1 <= 32'h0;
		num_groups_2 <= 32'h0;
		local_size_0 <= 32'h0;
		local_size_1 <= 32'h0;
		local_size_2 <= 32'h0;
		global_offset_0 <= 32'h0;
		global_offset_1 <= 32'h0;
		global_offset_2 <= 32'h0;
	end
	else
	begin
		if (avs_cra_write)
		begin
			case (avs_cra_address)
				5'h0:
				begin
					status_NO_SHIFT_REG[31:16] <= 16'h3;
					status_NO_SHIFT_REG[15:0] <= ((status_NO_SHIFT_REG[15:0] & ~(bitenable[15:0])) | (avs_cra_writedata[15:0] & bitenable[15:0]));
				end

				5'h1:
				begin
					profile_ctrl_NO_SHIFT_REG <= ((profile_ctrl_NO_SHIFT_REG & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h3:
				begin
					profile_start_cycle_NO_SHIFT_REG[31:0] <= ((profile_start_cycle_NO_SHIFT_REG[31:0] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					profile_start_cycle_NO_SHIFT_REG[63:32] <= ((profile_start_cycle_NO_SHIFT_REG[63:32] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h4:
				begin
					profile_stop_cycle_NO_SHIFT_REG[31:0] <= ((profile_stop_cycle_NO_SHIFT_REG[31:0] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					profile_stop_cycle_NO_SHIFT_REG[63:32] <= ((profile_stop_cycle_NO_SHIFT_REG[63:32] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h5:
				begin
					work_dim <= ((work_dim & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					workgroup_size <= ((workgroup_size & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h6:
				begin
					global_size_0 <= ((global_size_0 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					global_size_1 <= ((global_size_1 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h7:
				begin
					global_size_2 <= ((global_size_2 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					num_groups_0 <= ((num_groups_0 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h8:
				begin
					num_groups_1 <= ((num_groups_1 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					num_groups_2 <= ((num_groups_2 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h9:
				begin
					local_size_0 <= ((local_size_0 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					local_size_1 <= ((local_size_1 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hA:
				begin
					local_size_2 <= ((local_size_2 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					global_offset_0 <= ((global_offset_0 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hB:
				begin
					global_offset_1 <= ((global_offset_1 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					global_offset_2 <= ((global_offset_2 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hC:
				begin
					kernel_arguments[31:0] <= ((kernel_arguments[31:0] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[63:32] <= ((kernel_arguments[63:32] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hD:
				begin
					kernel_arguments[95:64] <= ((kernel_arguments[95:64] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[127:96] <= ((kernel_arguments[127:96] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hE:
				begin
					kernel_arguments[159:128] <= ((kernel_arguments[159:128] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[191:160] <= ((kernel_arguments[191:160] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hF:
				begin
					kernel_arguments[223:192] <= ((kernel_arguments[223:192] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[255:224] <= ((kernel_arguments[255:224] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				default:
				begin
				end

			endcase
		end
		else
		begin
			if (status_NO_SHIFT_REG[0])
			begin
				start <= 1'b1;
			end
			if (start)
			begin
				status_NO_SHIFT_REG[0] <= 1'b0;
				started_NO_SHIFT_REG <= 1'b1;
			end
			if (started_NO_SHIFT_REG)
			begin
				start <= 1'b0;
			end
			if (finish)
			begin
				status_NO_SHIFT_REG[1] <= 1'b1;
				started_NO_SHIFT_REG <= 1'b0;
			end
		end
		status_NO_SHIFT_REG[11] <= 1'b0;
		status_NO_SHIFT_REG[12] <= (|has_a_lsu_active);
		status_NO_SHIFT_REG[13] <= (|has_a_write_pending);
		status_NO_SHIFT_REG[14] <= (|valid_in);
		status_NO_SHIFT_REG[15] <= started_NO_SHIFT_REG;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		cra_read_st1_NO_SHIFT_REG <= 1'b0;
		cra_addr_st1_NO_SHIFT_REG <= 5'h0;
		cra_readdata_st1_NO_SHIFT_REG <= 64'h0;
	end
	else
	begin
		cra_read_st1_NO_SHIFT_REG <= avs_cra_read;
		cra_addr_st1_NO_SHIFT_REG <= avs_cra_address;
		case (avs_cra_address)
			5'h0:
			begin
				cra_readdata_st1_NO_SHIFT_REG[31:0] <= status_NO_SHIFT_REG;
				cra_readdata_st1_NO_SHIFT_REG[63:32] <= 32'h0;
			end

			5'h1:
			begin
				cra_readdata_st1_NO_SHIFT_REG[31:0] <= 'x;
				cra_readdata_st1_NO_SHIFT_REG[63:32] <= 32'h0;
			end

			5'h2:
			begin
				cra_readdata_st1_NO_SHIFT_REG[63:0] <= 64'h0;
			end

			5'h3:
			begin
				cra_readdata_st1_NO_SHIFT_REG[63:0] <= 64'h0;
			end

			5'h4:
			begin
				cra_readdata_st1_NO_SHIFT_REG[63:0] <= 64'h0;
			end

			default:
			begin
				cra_readdata_st1_NO_SHIFT_REG <= status_NO_SHIFT_REG;
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		avs_cra_readdatavalid <= 1'b0;
		avs_cra_readdata <= 64'h0;
	end
	else
	begin
		avs_cra_readdatavalid <= cra_read_st1_NO_SHIFT_REG;
		case (cra_addr_st1_NO_SHIFT_REG)
			5'h2:
			begin
				avs_cra_readdata[63:0] <= profile_data_NO_SHIFT_REG;
			end

			default:
			begin
				avs_cra_readdata <= cra_readdata_st1_NO_SHIFT_REG;
			end

		endcase
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module dataLayer_function_wrapper
	(
		input 		clock,
		input 		resetn,
		input 		clock2x,
		input 		local_router_hang,
		output 		has_a_write_pending,
		output 		has_a_lsu_active,
		input [255:0] 		kernel_arguments,
		input 		start,
		input [31:0] 		global_offset_0,
		input [31:0] 		global_offset_1,
		input [31:0] 		global_offset_2,
		input [31:0] 		work_dim,
		output 		kernel_valid_out,
		input [31:0] 		workgroup_size,
		input [31:0] 		global_size_0,
		input [31:0] 		global_size_1,
		input [31:0] 		global_size_2,
		input [31:0] 		num_groups_0,
		input [31:0] 		num_groups_1,
		input [31:0] 		num_groups_2,
		input [31:0] 		local_size_0,
		input [31:0] 		local_size_1,
		input [31:0] 		local_size_2,
		input [31:0] 		local_id_0,
		input [31:0] 		local_id_1,
		input [31:0] 		local_id_2,
		input [31:0] 		global_id_0,
		input [31:0] 		global_id_1,
		input [31:0] 		global_id_2,
		input [31:0] 		group_id_0,
		input [31:0] 		group_id_1,
		input [31:0] 		group_id_2,
		output 		kernel_stall_out,
		input 		kernel_valid_in,
		output 		avm_local_bb0_ld__inst0_enable,
		input [511:0] 		avm_local_bb0_ld__inst0_readdata,
		input 		avm_local_bb0_ld__inst0_readdatavalid,
		input 		avm_local_bb0_ld__inst0_waitrequest,
		output [31:0] 		avm_local_bb0_ld__inst0_address,
		output 		avm_local_bb0_ld__inst0_read,
		output 		avm_local_bb0_ld__inst0_write,
		input 		avm_local_bb0_ld__inst0_writeack,
		output [511:0] 		avm_local_bb0_ld__inst0_writedata,
		output [63:0] 		avm_local_bb0_ld__inst0_byteenable,
		output [4:0] 		avm_local_bb0_ld__inst0_burstcount,
		output 		avm_local_bb2_ld__inst0_enable,
		input [511:0] 		avm_local_bb2_ld__inst0_readdata,
		input 		avm_local_bb2_ld__inst0_readdatavalid,
		input 		avm_local_bb2_ld__inst0_waitrequest,
		output [31:0] 		avm_local_bb2_ld__inst0_address,
		output 		avm_local_bb2_ld__inst0_read,
		output 		avm_local_bb2_ld__inst0_write,
		input 		avm_local_bb2_ld__inst0_writeack,
		output [511:0] 		avm_local_bb2_ld__inst0_writedata,
		output [63:0] 		avm_local_bb2_ld__inst0_byteenable,
		output [4:0] 		avm_local_bb2_ld__inst0_burstcount,
		output 		avm_local_bb2_ld__u3_inst0_enable,
		input [511:0] 		avm_local_bb2_ld__u3_inst0_readdata,
		input 		avm_local_bb2_ld__u3_inst0_readdatavalid,
		input 		avm_local_bb2_ld__u3_inst0_waitrequest,
		output [31:0] 		avm_local_bb2_ld__u3_inst0_address,
		output 		avm_local_bb2_ld__u3_inst0_read,
		output 		avm_local_bb2_ld__u3_inst0_write,
		input 		avm_local_bb2_ld__u3_inst0_writeack,
		output [511:0] 		avm_local_bb2_ld__u3_inst0_writedata,
		output [63:0] 		avm_local_bb2_ld__u3_inst0_byteenable,
		output [4:0] 		avm_local_bb2_ld__u3_inst0_burstcount,
		output 		avm_local_bb2_st__inst0_enable,
		input [511:0] 		avm_local_bb2_st__inst0_readdata,
		input 		avm_local_bb2_st__inst0_readdatavalid,
		input 		avm_local_bb2_st__inst0_waitrequest,
		output [31:0] 		avm_local_bb2_st__inst0_address,
		output 		avm_local_bb2_st__inst0_read,
		output 		avm_local_bb2_st__inst0_write,
		input 		avm_local_bb2_st__inst0_writeack,
		output [511:0] 		avm_local_bb2_st__inst0_writedata,
		output [63:0] 		avm_local_bb2_st__inst0_byteenable,
		output [4:0] 		avm_local_bb2_st__inst0_burstcount
	);

// Responsible for interfacing a kernel with the outside world.

// twoXclock_consumer uses clock2x, even if nobody inside the kernel does. Keeps interface to acl_iface consistent for all kernels.
 reg twoXclock_consumer_NO_SHIFT_REG /* synthesis  preserve  noprune  */;
wire stall_in;
wire stall_out;
wire valid_in;
wire valid_out;

assign kernel_valid_out = valid_out;
assign valid_in = kernel_valid_in;
assign kernel_stall_out = stall_out;
assign stall_in = 1'b0;

always @(posedge clock2x or negedge resetn)
begin
	if (~(resetn))
	begin
		twoXclock_consumer_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		twoXclock_consumer_NO_SHIFT_REG <= 1'b1;
	end
end



// This section instantiates a kernel function block
dataLayer_function dataLayer_function_inst0 (
	.clock(clock),
	.resetn(resetn),
	.input_global_id_0(global_id_0),
	.input_global_id_1(global_id_1),
	.input_global_id_2(global_id_2),
	.input_acl_hw_wg_id(),
	.stall_out(stall_out),
	.valid_in(valid_in),
	.output_0(),
	.valid_out(valid_out),
	.stall_in(stall_in),
	.workgroup_size(workgroup_size),
	.avm_local_bb0_ld__enable(avm_local_bb0_ld__inst0_enable),
	.avm_local_bb0_ld__readdata(avm_local_bb0_ld__inst0_readdata),
	.avm_local_bb0_ld__readdatavalid(avm_local_bb0_ld__inst0_readdatavalid),
	.avm_local_bb0_ld__waitrequest(avm_local_bb0_ld__inst0_waitrequest),
	.avm_local_bb0_ld__address(avm_local_bb0_ld__inst0_address),
	.avm_local_bb0_ld__read(avm_local_bb0_ld__inst0_read),
	.avm_local_bb0_ld__write(avm_local_bb0_ld__inst0_write),
	.avm_local_bb0_ld__writeack(avm_local_bb0_ld__inst0_writeack),
	.avm_local_bb0_ld__writedata(avm_local_bb0_ld__inst0_writedata),
	.avm_local_bb0_ld__byteenable(avm_local_bb0_ld__inst0_byteenable),
	.avm_local_bb0_ld__burstcount(avm_local_bb0_ld__inst0_burstcount),
	.avm_local_bb2_ld__enable(avm_local_bb2_ld__inst0_enable),
	.avm_local_bb2_ld__readdata(avm_local_bb2_ld__inst0_readdata),
	.avm_local_bb2_ld__readdatavalid(avm_local_bb2_ld__inst0_readdatavalid),
	.avm_local_bb2_ld__waitrequest(avm_local_bb2_ld__inst0_waitrequest),
	.avm_local_bb2_ld__address(avm_local_bb2_ld__inst0_address),
	.avm_local_bb2_ld__read(avm_local_bb2_ld__inst0_read),
	.avm_local_bb2_ld__write(avm_local_bb2_ld__inst0_write),
	.avm_local_bb2_ld__writeack(avm_local_bb2_ld__inst0_writeack),
	.avm_local_bb2_ld__writedata(avm_local_bb2_ld__inst0_writedata),
	.avm_local_bb2_ld__byteenable(avm_local_bb2_ld__inst0_byteenable),
	.avm_local_bb2_ld__burstcount(avm_local_bb2_ld__inst0_burstcount),
	.avm_local_bb2_ld__u3_enable(avm_local_bb2_ld__u3_inst0_enable),
	.avm_local_bb2_ld__u3_readdata(avm_local_bb2_ld__u3_inst0_readdata),
	.avm_local_bb2_ld__u3_readdatavalid(avm_local_bb2_ld__u3_inst0_readdatavalid),
	.avm_local_bb2_ld__u3_waitrequest(avm_local_bb2_ld__u3_inst0_waitrequest),
	.avm_local_bb2_ld__u3_address(avm_local_bb2_ld__u3_inst0_address),
	.avm_local_bb2_ld__u3_read(avm_local_bb2_ld__u3_inst0_read),
	.avm_local_bb2_ld__u3_write(avm_local_bb2_ld__u3_inst0_write),
	.avm_local_bb2_ld__u3_writeack(avm_local_bb2_ld__u3_inst0_writeack),
	.avm_local_bb2_ld__u3_writedata(avm_local_bb2_ld__u3_inst0_writedata),
	.avm_local_bb2_ld__u3_byteenable(avm_local_bb2_ld__u3_inst0_byteenable),
	.avm_local_bb2_ld__u3_burstcount(avm_local_bb2_ld__u3_inst0_burstcount),
	.avm_local_bb2_st__enable(avm_local_bb2_st__inst0_enable),
	.avm_local_bb2_st__readdata(avm_local_bb2_st__inst0_readdata),
	.avm_local_bb2_st__readdatavalid(avm_local_bb2_st__inst0_readdatavalid),
	.avm_local_bb2_st__waitrequest(avm_local_bb2_st__inst0_waitrequest),
	.avm_local_bb2_st__address(avm_local_bb2_st__inst0_address),
	.avm_local_bb2_st__read(avm_local_bb2_st__inst0_read),
	.avm_local_bb2_st__write(avm_local_bb2_st__inst0_write),
	.avm_local_bb2_st__writeack(avm_local_bb2_st__inst0_writeack),
	.avm_local_bb2_st__writedata(avm_local_bb2_st__inst0_writedata),
	.avm_local_bb2_st__byteenable(avm_local_bb2_st__inst0_byteenable),
	.avm_local_bb2_st__burstcount(avm_local_bb2_st__inst0_burstcount),
	.clock2x(clock2x),
	.start(start),
	.input_param(kernel_arguments[191:128]),
	.input_global_size_2(global_size_2),
	.input_global_size_1(global_size_1),
	.input_global_size_0(global_size_0),
	.input_inputFeatureMap(kernel_arguments[63:0]),
	.input_outputFeatureMap(kernel_arguments[127:64]),
	.has_a_write_pending(has_a_write_pending),
	.has_a_lsu_active(has_a_lsu_active)
);



endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module dataLayer_sys_cycle_time
	(
		input 		clock,
		input 		resetn,
		output [31:0] 		cur_cycle
	);


 reg [31:0] cur_count_NO_SHIFT_REG;

assign cur_cycle = cur_count_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		cur_count_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		cur_count_NO_SHIFT_REG <= (cur_count_NO_SHIFT_REG + 32'h1);
	end
end

endmodule

// (C) 1992-2016 Intel Corporation.                            
// Intel, the Intel logo, Intel, MegaCore, NIOS II, Quartus and TalkBack words    
// and logos are trademarks of Intel Corporation or its subsidiaries in the U.S.  
// and/or other countries. Other marks and brands may be claimed as the property  
// of others. See Trademarks on intel.com for full list of Intel trademarks or    
// the Trademarks & Brands Names Database (if Intel) or See www.Intel.com/legal (if Altera) 
// Your use of Intel Corporation's design tools, logic functions and other        
// software and tools, and its AMPP partner logic functions, and any output       
// files any of the foregoing (including device programming or simulation         
// files), and any associated documentation or information are expressly subject  
// to the terms and conditions of the Altera Program License Subscription         
// Agreement, Intel MegaCore Function License Agreement, or other applicable      
// license agreement, including, without limitation, that your use is for the     
// sole purpose of programming logic devices manufactured by Intel and sold by    
// Intel or its authorized distributors.  Please refer to the applicable          
// agreement for further details.                                                 
    

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module paddingLayer_basic_block_0
	(
		input 		clock,
		input 		resetn,
		input 		start,
		input [63:0] 		input_param,
		input 		valid_in,
		output 		stall_out,
		input [31:0] 		input_global_id_0,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out,
		input 		stall_in,
		output [31:0] 		lvb_bb0_memcoalesce_param_extrValue_0,
		output [31:0] 		lvb_bb0_memcoalesce_param_extrValue_1,
		output [63:0] 		lvb_bb0_outputWidth,
		output [63:0] 		lvb_bb0_pad,
		output [63:0] 		lvb_bb0_memcoalesce_param_bitcast_059,
		output [31:0] 		lvb_input_global_id_0,
		output [31:0] 		lvb_input_global_id_1,
		output [31:0] 		lvb_input_global_id_2,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_enable,
		input [511:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_readdata,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_readdatavalid,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_waitrequest,
		output [31:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_address,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_read,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_write,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_writeack,
		output [511:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_writedata,
		output [63:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_byteenable,
		output [4:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_burstcount,
		output 		local_bb0_ld_memcoalesce_param_load_0_active,
		input 		clock2x
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_node_stall_in_4;
 reg merge_node_valid_out_4_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_0_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG) | (merge_node_stall_in_4 & merge_node_valid_out_4_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_global_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_global_id_0_staging_reg_NO_SHIFT_REG <= input_global_id_0;
				input_global_id_1_staging_reg_NO_SHIFT_REG <= input_global_id_1;
				input_global_id_2_staging_reg_NO_SHIFT_REG <= input_global_id_2;
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_4_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_4))
			begin
				merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements a registered operation.
// 
wire local_bb0_outputChannel_inputs_ready;
 reg local_bb0_outputChannel_wii_reg_NO_SHIFT_REG;
 reg local_bb0_outputChannel_valid_out_NO_SHIFT_REG;
wire local_bb0_outputChannel_stall_in;
wire local_bb0_outputChannel_output_regs_ready;
 reg [63:0] local_bb0_outputChannel_NO_SHIFT_REG;
wire [63:0] local_bb0_outputChannel_op_wire;
wire local_bb0_outputChannel_causedstall;

assign local_bb0_outputChannel_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb0_outputChannel_output_regs_ready = (~(local_bb0_outputChannel_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_outputChannel_valid_out_NO_SHIFT_REG) | ~(local_bb0_outputChannel_stall_in))));
assign local_bb0_outputChannel_op_wire = ((input_param & 64'hFFFFFFFFFFFFFC00) + 64'h20);
assign merge_node_stall_in_0 = (~(local_bb0_outputChannel_wii_reg_NO_SHIFT_REG) & (~(local_bb0_outputChannel_output_regs_ready) | ~(local_bb0_outputChannel_inputs_ready)));
assign local_bb0_outputChannel_causedstall = (local_bb0_outputChannel_inputs_ready && (~(local_bb0_outputChannel_output_regs_ready) && !(~(local_bb0_outputChannel_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_outputChannel_NO_SHIFT_REG <= 'x;
		local_bb0_outputChannel_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_outputChannel_NO_SHIFT_REG <= 'x;
			local_bb0_outputChannel_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_outputChannel_output_regs_ready)
			begin
				local_bb0_outputChannel_NO_SHIFT_REG <= local_bb0_outputChannel_op_wire;
				local_bb0_outputChannel_valid_out_NO_SHIFT_REG <= local_bb0_outputChannel_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_outputChannel_stall_in))
				begin
					local_bb0_outputChannel_valid_out_NO_SHIFT_REG <= local_bb0_outputChannel_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_outputChannel_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_outputChannel_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_outputChannel_inputs_ready)
			begin
				local_bb0_outputChannel_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_outputWidth_inputs_ready;
 reg local_bb0_outputWidth_wii_reg_NO_SHIFT_REG;
 reg local_bb0_outputWidth_valid_out_NO_SHIFT_REG;
wire local_bb0_outputWidth_stall_in;
wire local_bb0_outputWidth_output_regs_ready;
 reg [63:0] local_bb0_outputWidth_NO_SHIFT_REG;
wire [63:0] local_bb0_outputWidth_op_wire;
wire local_bb0_outputWidth_causedstall;

assign local_bb0_outputWidth_inputs_ready = merge_node_valid_out_1_NO_SHIFT_REG;
assign local_bb0_outputWidth_output_regs_ready = (~(local_bb0_outputWidth_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_outputWidth_valid_out_NO_SHIFT_REG) | ~(local_bb0_outputWidth_stall_in))));
assign local_bb0_outputWidth_op_wire = ((input_param & 64'hFFFFFFFFFFFFFC00) + 64'h28);
assign merge_node_stall_in_1 = (~(local_bb0_outputWidth_wii_reg_NO_SHIFT_REG) & (~(local_bb0_outputWidth_output_regs_ready) | ~(local_bb0_outputWidth_inputs_ready)));
assign local_bb0_outputWidth_causedstall = (local_bb0_outputWidth_inputs_ready && (~(local_bb0_outputWidth_output_regs_ready) && !(~(local_bb0_outputWidth_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_outputWidth_NO_SHIFT_REG <= 'x;
		local_bb0_outputWidth_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_outputWidth_NO_SHIFT_REG <= 'x;
			local_bb0_outputWidth_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_outputWidth_output_regs_ready)
			begin
				local_bb0_outputWidth_NO_SHIFT_REG <= local_bb0_outputWidth_op_wire;
				local_bb0_outputWidth_valid_out_NO_SHIFT_REG <= local_bb0_outputWidth_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_outputWidth_stall_in))
				begin
					local_bb0_outputWidth_valid_out_NO_SHIFT_REG <= local_bb0_outputWidth_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_outputWidth_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_outputWidth_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_outputWidth_inputs_ready)
			begin
				local_bb0_outputWidth_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_pad_inputs_ready;
 reg local_bb0_pad_wii_reg_NO_SHIFT_REG;
 reg local_bb0_pad_valid_out_NO_SHIFT_REG;
wire local_bb0_pad_stall_in;
wire local_bb0_pad_output_regs_ready;
 reg [63:0] local_bb0_pad_NO_SHIFT_REG;
wire [63:0] local_bb0_pad_op_wire;
wire local_bb0_pad_causedstall;

assign local_bb0_pad_inputs_ready = merge_node_valid_out_2_NO_SHIFT_REG;
assign local_bb0_pad_output_regs_ready = (~(local_bb0_pad_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_pad_valid_out_NO_SHIFT_REG) | ~(local_bb0_pad_stall_in))));
assign local_bb0_pad_op_wire = ((input_param & 64'hFFFFFFFFFFFFFC00) + 64'hC);
assign merge_node_stall_in_2 = (~(local_bb0_pad_wii_reg_NO_SHIFT_REG) & (~(local_bb0_pad_output_regs_ready) | ~(local_bb0_pad_inputs_ready)));
assign local_bb0_pad_causedstall = (local_bb0_pad_inputs_ready && (~(local_bb0_pad_output_regs_ready) && !(~(local_bb0_pad_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_pad_NO_SHIFT_REG <= 'x;
		local_bb0_pad_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_pad_NO_SHIFT_REG <= 'x;
			local_bb0_pad_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_pad_output_regs_ready)
			begin
				local_bb0_pad_NO_SHIFT_REG <= local_bb0_pad_op_wire;
				local_bb0_pad_valid_out_NO_SHIFT_REG <= local_bb0_pad_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_pad_stall_in))
				begin
					local_bb0_pad_valid_out_NO_SHIFT_REG <= local_bb0_pad_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_pad_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_pad_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_pad_inputs_ready)
			begin
				local_bb0_pad_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_inputHeight_inputs_ready;
 reg local_bb0_inputHeight_wii_reg_NO_SHIFT_REG;
 reg local_bb0_inputHeight_valid_out_NO_SHIFT_REG;
wire local_bb0_inputHeight_stall_in;
wire local_bb0_inputHeight_output_regs_ready;
 reg [63:0] local_bb0_inputHeight_NO_SHIFT_REG;
wire [63:0] local_bb0_inputHeight_op_wire;
wire local_bb0_inputHeight_causedstall;

assign local_bb0_inputHeight_inputs_ready = merge_node_valid_out_3_NO_SHIFT_REG;
assign local_bb0_inputHeight_output_regs_ready = (~(local_bb0_inputHeight_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_inputHeight_valid_out_NO_SHIFT_REG) | ~(local_bb0_inputHeight_stall_in))));
assign local_bb0_inputHeight_op_wire = ((input_param & 64'hFFFFFFFFFFFFFC00) + 64'h18);
assign merge_node_stall_in_3 = (~(local_bb0_inputHeight_wii_reg_NO_SHIFT_REG) & (~(local_bb0_inputHeight_output_regs_ready) | ~(local_bb0_inputHeight_inputs_ready)));
assign local_bb0_inputHeight_causedstall = (local_bb0_inputHeight_inputs_ready && (~(local_bb0_inputHeight_output_regs_ready) && !(~(local_bb0_inputHeight_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_inputHeight_NO_SHIFT_REG <= 'x;
		local_bb0_inputHeight_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_inputHeight_NO_SHIFT_REG <= 'x;
			local_bb0_inputHeight_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_inputHeight_output_regs_ready)
			begin
				local_bb0_inputHeight_NO_SHIFT_REG <= local_bb0_inputHeight_op_wire;
				local_bb0_inputHeight_valid_out_NO_SHIFT_REG <= local_bb0_inputHeight_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_inputHeight_stall_in))
				begin
					local_bb0_inputHeight_valid_out_NO_SHIFT_REG <= local_bb0_inputHeight_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_inputHeight_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_inputHeight_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_inputHeight_inputs_ready)
			begin
				local_bb0_inputHeight_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_2to2_bb0_outputChannel_valid_out;
wire rstag_2to2_bb0_outputChannel_stall_in;
wire rstag_2to2_bb0_outputChannel_inputs_ready;
wire rstag_2to2_bb0_outputChannel_stall_local;
 reg rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG;
wire rstag_2to2_bb0_outputChannel_combined_valid;
 reg [63:0] rstag_2to2_bb0_outputChannel_staging_reg_NO_SHIFT_REG;
wire [63:0] rstag_2to2_bb0_outputChannel;

assign rstag_2to2_bb0_outputChannel_inputs_ready = local_bb0_outputChannel_valid_out_NO_SHIFT_REG;
assign rstag_2to2_bb0_outputChannel = (rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG ? rstag_2to2_bb0_outputChannel_staging_reg_NO_SHIFT_REG : ((local_bb0_outputChannel_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFC20) | 64'h20));
assign rstag_2to2_bb0_outputChannel_combined_valid = (rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG | rstag_2to2_bb0_outputChannel_inputs_ready);
assign rstag_2to2_bb0_outputChannel_valid_out = rstag_2to2_bb0_outputChannel_combined_valid;
assign rstag_2to2_bb0_outputChannel_stall_local = rstag_2to2_bb0_outputChannel_stall_in;
assign local_bb0_outputChannel_stall_in = (|rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_2to2_bb0_outputChannel_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (start)
		begin
			rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (rstag_2to2_bb0_outputChannel_stall_local)
			begin
				if (~(rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG))
				begin
					rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG <= rstag_2to2_bb0_outputChannel_inputs_ready;
				end
			end
			else
			begin
				rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG <= 1'b0;
			end
		end
		if (~(rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG))
		begin
			rstag_2to2_bb0_outputChannel_staging_reg_NO_SHIFT_REG <= ((local_bb0_outputChannel_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFC20) | 64'h20);
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_memcoalesce_param_bitcast_059_inputs_ready;
 reg local_bb0_memcoalesce_param_bitcast_059_wii_reg_NO_SHIFT_REG;
 reg local_bb0_memcoalesce_param_bitcast_059_valid_out_NO_SHIFT_REG;
wire local_bb0_memcoalesce_param_bitcast_059_stall_in;
wire local_bb0_memcoalesce_param_bitcast_059_output_regs_ready;
 reg [63:0] local_bb0_memcoalesce_param_bitcast_059_NO_SHIFT_REG;
wire local_bb0_memcoalesce_param_bitcast_059_causedstall;

assign local_bb0_memcoalesce_param_bitcast_059_inputs_ready = local_bb0_inputHeight_valid_out_NO_SHIFT_REG;
assign local_bb0_memcoalesce_param_bitcast_059_output_regs_ready = (~(local_bb0_memcoalesce_param_bitcast_059_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_memcoalesce_param_bitcast_059_valid_out_NO_SHIFT_REG) | ~(local_bb0_memcoalesce_param_bitcast_059_stall_in))));
assign local_bb0_inputHeight_stall_in = (~(local_bb0_memcoalesce_param_bitcast_059_wii_reg_NO_SHIFT_REG) & (~(local_bb0_memcoalesce_param_bitcast_059_output_regs_ready) | ~(local_bb0_memcoalesce_param_bitcast_059_inputs_ready)));
assign local_bb0_memcoalesce_param_bitcast_059_causedstall = (local_bb0_memcoalesce_param_bitcast_059_inputs_ready && (~(local_bb0_memcoalesce_param_bitcast_059_output_regs_ready) && !(~(local_bb0_memcoalesce_param_bitcast_059_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_memcoalesce_param_bitcast_059_NO_SHIFT_REG <= 'x;
		local_bb0_memcoalesce_param_bitcast_059_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_memcoalesce_param_bitcast_059_NO_SHIFT_REG <= 'x;
			local_bb0_memcoalesce_param_bitcast_059_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_memcoalesce_param_bitcast_059_output_regs_ready)
			begin
				local_bb0_memcoalesce_param_bitcast_059_NO_SHIFT_REG <= ((local_bb0_inputHeight_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFC18) | 64'h18);
				local_bb0_memcoalesce_param_bitcast_059_valid_out_NO_SHIFT_REG <= local_bb0_memcoalesce_param_bitcast_059_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_memcoalesce_param_bitcast_059_stall_in))
				begin
					local_bb0_memcoalesce_param_bitcast_059_valid_out_NO_SHIFT_REG <= local_bb0_memcoalesce_param_bitcast_059_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_memcoalesce_param_bitcast_059_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_memcoalesce_param_bitcast_059_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_memcoalesce_param_bitcast_059_inputs_ready)
			begin
				local_bb0_memcoalesce_param_bitcast_059_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb0_memcoalesce_param_bitcast_0_valid_out;
wire local_bb0_memcoalesce_param_bitcast_0_stall_in;
wire local_bb0_memcoalesce_param_bitcast_0_inputs_ready;
wire local_bb0_memcoalesce_param_bitcast_0_stall_local;
wire [63:0] local_bb0_memcoalesce_param_bitcast_0;

assign local_bb0_memcoalesce_param_bitcast_0_inputs_ready = rstag_2to2_bb0_outputChannel_valid_out;
assign local_bb0_memcoalesce_param_bitcast_0 = ((rstag_2to2_bb0_outputChannel & 64'hFFFFFFFFFFFFFC20) | 64'h20);
assign local_bb0_memcoalesce_param_bitcast_0_valid_out = local_bb0_memcoalesce_param_bitcast_0_inputs_ready;
assign local_bb0_memcoalesce_param_bitcast_0_stall_local = local_bb0_memcoalesce_param_bitcast_0_stall_in;
assign rstag_2to2_bb0_outputChannel_stall_in = (|local_bb0_memcoalesce_param_bitcast_0_stall_local);

// This section implements a registered operation.
// 
wire local_bb0_ld_memcoalesce_param_load_0_inputs_ready;
 reg local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG;
 reg local_bb0_ld_memcoalesce_param_load_0_valid_out_NO_SHIFT_REG;
wire local_bb0_ld_memcoalesce_param_load_0_stall_in;
wire local_bb0_ld_memcoalesce_param_load_0_output_regs_ready;
wire local_bb0_ld_memcoalesce_param_load_0_fu_stall_out;
wire local_bb0_ld_memcoalesce_param_load_0_fu_valid_out;
wire [63:0] local_bb0_ld_memcoalesce_param_load_0_lsu_dataout;
 reg [63:0] local_bb0_ld_memcoalesce_param_load_0_NO_SHIFT_REG;
wire local_bb0_ld_memcoalesce_param_load_0_causedstall;

lsu_top lsu_local_bb0_ld_memcoalesce_param_load_0 (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb0_ld_memcoalesce_param_load_0_fu_stall_out),
	.i_valid((~(local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG) & local_bb0_ld_memcoalesce_param_load_0_inputs_ready)),
	.i_address(((local_bb0_memcoalesce_param_bitcast_0 & 64'hFFFFFFFFFFFFFC20) | 64'h20)),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(1'b0),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb0_ld_memcoalesce_param_load_0_output_regs_ready)),
	.o_valid(local_bb0_ld_memcoalesce_param_load_0_fu_valid_out),
	.o_readdata(local_bb0_ld_memcoalesce_param_load_0_lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb0_ld_memcoalesce_param_load_0_active),
	.avm_address(avm_local_bb0_ld_memcoalesce_param_load_0_address),
	.avm_read(avm_local_bb0_ld_memcoalesce_param_load_0_read),
	.avm_enable(avm_local_bb0_ld_memcoalesce_param_load_0_enable),
	.avm_readdata(avm_local_bb0_ld_memcoalesce_param_load_0_readdata),
	.avm_write(avm_local_bb0_ld_memcoalesce_param_load_0_write),
	.avm_writeack(avm_local_bb0_ld_memcoalesce_param_load_0_writeack),
	.avm_burstcount(avm_local_bb0_ld_memcoalesce_param_load_0_burstcount),
	.avm_writedata(avm_local_bb0_ld_memcoalesce_param_load_0_writedata),
	.avm_byteenable(avm_local_bb0_ld_memcoalesce_param_load_0_byteenable),
	.avm_waitrequest(avm_local_bb0_ld_memcoalesce_param_load_0_waitrequest),
	.avm_readdatavalid(avm_local_bb0_ld_memcoalesce_param_load_0_readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb0_ld_memcoalesce_param_load_0.AWIDTH = 32;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.WIDTH_BYTES = 8;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.MWIDTH_BYTES = 64;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.ALIGNMENT_BYTES = 32;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.READ = 1;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.ATOMIC = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.WIDTH = 64;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.MWIDTH = 512;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.ATOMIC_WIDTH = 3;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.KERNEL_SIDE_MEM_LATENCY = 1;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.MEMORY_SIDE_MEM_LATENCY = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.USE_WRITE_ACK = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.NUMBER_BANKS = 1;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.USEINPUTFIFO = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.USECACHING = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.USEOUTPUTFIFO = 1;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.ADDRSPACE = 1;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.STYLE = "SIMPLE";

assign local_bb0_ld_memcoalesce_param_load_0_inputs_ready = local_bb0_memcoalesce_param_bitcast_0_valid_out;
assign local_bb0_ld_memcoalesce_param_load_0_output_regs_ready = (~(local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_ld_memcoalesce_param_load_0_valid_out_NO_SHIFT_REG) | ~(local_bb0_ld_memcoalesce_param_load_0_stall_in))));
assign local_bb0_memcoalesce_param_bitcast_0_stall_in = (~(local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG) & (local_bb0_ld_memcoalesce_param_load_0_fu_stall_out | ~((~(local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG) & local_bb0_ld_memcoalesce_param_load_0_inputs_ready))));
assign local_bb0_ld_memcoalesce_param_load_0_causedstall = ((~(local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG) & local_bb0_ld_memcoalesce_param_load_0_inputs_ready) && (local_bb0_ld_memcoalesce_param_load_0_fu_stall_out && !(~(local_bb0_ld_memcoalesce_param_load_0_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_ld_memcoalesce_param_load_0_NO_SHIFT_REG <= 'x;
		local_bb0_ld_memcoalesce_param_load_0_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_ld_memcoalesce_param_load_0_NO_SHIFT_REG <= 'x;
			local_bb0_ld_memcoalesce_param_load_0_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_ld_memcoalesce_param_load_0_output_regs_ready)
			begin
				local_bb0_ld_memcoalesce_param_load_0_NO_SHIFT_REG <= local_bb0_ld_memcoalesce_param_load_0_lsu_dataout;
				local_bb0_ld_memcoalesce_param_load_0_valid_out_NO_SHIFT_REG <= local_bb0_ld_memcoalesce_param_load_0_fu_valid_out;
			end
			else
			begin
				if (~(local_bb0_ld_memcoalesce_param_load_0_stall_in))
				begin
					local_bb0_ld_memcoalesce_param_load_0_valid_out_NO_SHIFT_REG <= local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_ld_memcoalesce_param_load_0_fu_valid_out)
			begin
				local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_3to3_bb0_ld_memcoalesce_param_load_0_valid_out_0;
wire rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_in_0;
wire rstag_3to3_bb0_ld_memcoalesce_param_load_0_valid_out_1;
wire rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_in_1;
wire rstag_3to3_bb0_ld_memcoalesce_param_load_0_inputs_ready;
wire rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_local;
 reg rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG;
wire rstag_3to3_bb0_ld_memcoalesce_param_load_0_combined_valid;
 reg [63:0] rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_reg_NO_SHIFT_REG;
wire [63:0] rstag_3to3_bb0_ld_memcoalesce_param_load_0;
 reg rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_0_NO_SHIFT_REG;
 reg rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_1_NO_SHIFT_REG;

assign rstag_3to3_bb0_ld_memcoalesce_param_load_0_inputs_ready = local_bb0_ld_memcoalesce_param_load_0_valid_out_NO_SHIFT_REG;
assign rstag_3to3_bb0_ld_memcoalesce_param_load_0 = (rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG ? rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_reg_NO_SHIFT_REG : local_bb0_ld_memcoalesce_param_load_0_NO_SHIFT_REG);
assign rstag_3to3_bb0_ld_memcoalesce_param_load_0_combined_valid = (rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG | rstag_3to3_bb0_ld_memcoalesce_param_load_0_inputs_ready);
assign rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_local = ((rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_in_0 & ~(rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_0_NO_SHIFT_REG)) | (rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_in_1 & ~(rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_1_NO_SHIFT_REG)));
assign rstag_3to3_bb0_ld_memcoalesce_param_load_0_valid_out_0 = (rstag_3to3_bb0_ld_memcoalesce_param_load_0_combined_valid & ~(rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_0_NO_SHIFT_REG));
assign rstag_3to3_bb0_ld_memcoalesce_param_load_0_valid_out_1 = (rstag_3to3_bb0_ld_memcoalesce_param_load_0_combined_valid & ~(rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_1_NO_SHIFT_REG));
assign local_bb0_ld_memcoalesce_param_load_0_stall_in = (|rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (start)
		begin
			rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_local)
			begin
				if (~(rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG))
				begin
					rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG <= rstag_3to3_bb0_ld_memcoalesce_param_load_0_inputs_ready;
				end
			end
			else
			begin
				rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG <= 1'b0;
			end
		end
		if (~(rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG))
		begin
			rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_reg_NO_SHIFT_REG <= local_bb0_ld_memcoalesce_param_load_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_0_NO_SHIFT_REG <= 1'b0;
			rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_1_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_0_NO_SHIFT_REG <= (rstag_3to3_bb0_ld_memcoalesce_param_load_0_combined_valid & (rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_0_NO_SHIFT_REG | ~(rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_in_0)) & rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_local);
			rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_1_NO_SHIFT_REG <= (rstag_3to3_bb0_ld_memcoalesce_param_load_0_combined_valid & (rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_1_NO_SHIFT_REG | ~(rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_in_1)) & rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_local);
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_memcoalesce_param_extrValue_1_inputs_ready;
 reg local_bb0_memcoalesce_param_extrValue_1_wii_reg_NO_SHIFT_REG;
 reg local_bb0_memcoalesce_param_extrValue_1_valid_out_NO_SHIFT_REG;
wire local_bb0_memcoalesce_param_extrValue_1_stall_in;
wire local_bb0_memcoalesce_param_extrValue_1_output_regs_ready;
 reg [31:0] local_bb0_memcoalesce_param_extrValue_1_NO_SHIFT_REG;
wire [31:0] local_bb0_memcoalesce_param_extrValue_1_op_wire;
wire local_bb0_memcoalesce_param_extrValue_1_causedstall;

assign local_bb0_memcoalesce_param_extrValue_1_inputs_ready = rstag_3to3_bb0_ld_memcoalesce_param_load_0_valid_out_0;
assign local_bb0_memcoalesce_param_extrValue_1_output_regs_ready = (~(local_bb0_memcoalesce_param_extrValue_1_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_memcoalesce_param_extrValue_1_valid_out_NO_SHIFT_REG) | ~(local_bb0_memcoalesce_param_extrValue_1_stall_in))));
assign local_bb0_memcoalesce_param_extrValue_1_op_wire[31:0] = rstag_3to3_bb0_ld_memcoalesce_param_load_0[63:32];
assign rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_in_0 = (~(local_bb0_memcoalesce_param_extrValue_1_wii_reg_NO_SHIFT_REG) & (~(local_bb0_memcoalesce_param_extrValue_1_output_regs_ready) | ~(local_bb0_memcoalesce_param_extrValue_1_inputs_ready)));
assign local_bb0_memcoalesce_param_extrValue_1_causedstall = (local_bb0_memcoalesce_param_extrValue_1_inputs_ready && (~(local_bb0_memcoalesce_param_extrValue_1_output_regs_ready) && !(~(local_bb0_memcoalesce_param_extrValue_1_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_memcoalesce_param_extrValue_1_NO_SHIFT_REG <= 'x;
		local_bb0_memcoalesce_param_extrValue_1_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_memcoalesce_param_extrValue_1_NO_SHIFT_REG <= 'x;
			local_bb0_memcoalesce_param_extrValue_1_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_memcoalesce_param_extrValue_1_output_regs_ready)
			begin
				local_bb0_memcoalesce_param_extrValue_1_NO_SHIFT_REG <= local_bb0_memcoalesce_param_extrValue_1_op_wire;
				local_bb0_memcoalesce_param_extrValue_1_valid_out_NO_SHIFT_REG <= local_bb0_memcoalesce_param_extrValue_1_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_memcoalesce_param_extrValue_1_stall_in))
				begin
					local_bb0_memcoalesce_param_extrValue_1_valid_out_NO_SHIFT_REG <= local_bb0_memcoalesce_param_extrValue_1_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_memcoalesce_param_extrValue_1_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_memcoalesce_param_extrValue_1_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_memcoalesce_param_extrValue_1_inputs_ready)
			begin
				local_bb0_memcoalesce_param_extrValue_1_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_memcoalesce_param_extrValue_0_inputs_ready;
 reg local_bb0_memcoalesce_param_extrValue_0_wii_reg_NO_SHIFT_REG;
 reg local_bb0_memcoalesce_param_extrValue_0_valid_out_NO_SHIFT_REG;
wire local_bb0_memcoalesce_param_extrValue_0_stall_in;
wire local_bb0_memcoalesce_param_extrValue_0_output_regs_ready;
 reg [31:0] local_bb0_memcoalesce_param_extrValue_0_NO_SHIFT_REG;
wire [31:0] local_bb0_memcoalesce_param_extrValue_0_op_wire;
wire local_bb0_memcoalesce_param_extrValue_0_causedstall;

assign local_bb0_memcoalesce_param_extrValue_0_inputs_ready = rstag_3to3_bb0_ld_memcoalesce_param_load_0_valid_out_1;
assign local_bb0_memcoalesce_param_extrValue_0_output_regs_ready = (~(local_bb0_memcoalesce_param_extrValue_0_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_memcoalesce_param_extrValue_0_valid_out_NO_SHIFT_REG) | ~(local_bb0_memcoalesce_param_extrValue_0_stall_in))));
assign local_bb0_memcoalesce_param_extrValue_0_op_wire[31:0] = rstag_3to3_bb0_ld_memcoalesce_param_load_0[31:0];
assign rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_in_1 = (~(local_bb0_memcoalesce_param_extrValue_0_wii_reg_NO_SHIFT_REG) & (~(local_bb0_memcoalesce_param_extrValue_0_output_regs_ready) | ~(local_bb0_memcoalesce_param_extrValue_0_inputs_ready)));
assign local_bb0_memcoalesce_param_extrValue_0_causedstall = (local_bb0_memcoalesce_param_extrValue_0_inputs_ready && (~(local_bb0_memcoalesce_param_extrValue_0_output_regs_ready) && !(~(local_bb0_memcoalesce_param_extrValue_0_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_memcoalesce_param_extrValue_0_NO_SHIFT_REG <= 'x;
		local_bb0_memcoalesce_param_extrValue_0_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_memcoalesce_param_extrValue_0_NO_SHIFT_REG <= 'x;
			local_bb0_memcoalesce_param_extrValue_0_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_memcoalesce_param_extrValue_0_output_regs_ready)
			begin
				local_bb0_memcoalesce_param_extrValue_0_NO_SHIFT_REG <= local_bb0_memcoalesce_param_extrValue_0_op_wire;
				local_bb0_memcoalesce_param_extrValue_0_valid_out_NO_SHIFT_REG <= local_bb0_memcoalesce_param_extrValue_0_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_memcoalesce_param_extrValue_0_stall_in))
				begin
					local_bb0_memcoalesce_param_extrValue_0_valid_out_NO_SHIFT_REG <= local_bb0_memcoalesce_param_extrValue_0_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_memcoalesce_param_extrValue_0_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_memcoalesce_param_extrValue_0_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_memcoalesce_param_extrValue_0_inputs_ready)
			begin
				local_bb0_memcoalesce_param_extrValue_0_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg [31:0] lvb_bb0_memcoalesce_param_extrValue_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb0_memcoalesce_param_extrValue_1_reg_NO_SHIFT_REG;
 reg [63:0] lvb_bb0_outputWidth_reg_NO_SHIFT_REG;
 reg [63:0] lvb_bb0_pad_reg_NO_SHIFT_REG;
 reg [63:0] lvb_bb0_memcoalesce_param_bitcast_059_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (merge_node_valid_out_4_NO_SHIFT_REG & local_bb0_memcoalesce_param_bitcast_059_valid_out_NO_SHIFT_REG & local_bb0_pad_valid_out_NO_SHIFT_REG & local_bb0_outputWidth_valid_out_NO_SHIFT_REG & local_bb0_memcoalesce_param_extrValue_1_valid_out_NO_SHIFT_REG & local_bb0_memcoalesce_param_extrValue_0_valid_out_NO_SHIFT_REG);
assign branch_var__output_regs_ready = (~(stall_in) | ~(branch_node_valid_out_NO_SHIFT_REG));
assign merge_node_stall_in_4 = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb0_memcoalesce_param_bitcast_059_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb0_pad_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb0_outputWidth_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb0_memcoalesce_param_extrValue_1_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb0_memcoalesce_param_extrValue_0_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_bb0_memcoalesce_param_extrValue_0 = lvb_bb0_memcoalesce_param_extrValue_0_reg_NO_SHIFT_REG;
assign lvb_bb0_memcoalesce_param_extrValue_1 = lvb_bb0_memcoalesce_param_extrValue_1_reg_NO_SHIFT_REG;
assign lvb_bb0_outputWidth = lvb_bb0_outputWidth_reg_NO_SHIFT_REG;
assign lvb_bb0_pad = lvb_bb0_pad_reg_NO_SHIFT_REG;
assign lvb_bb0_memcoalesce_param_bitcast_059 = lvb_bb0_memcoalesce_param_bitcast_059_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0 = lvb_input_global_id_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1 = lvb_input_global_id_1_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2 = lvb_input_global_id_2_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id = lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;
assign combined_branch_stall_in_signal = stall_in;
assign valid_out = branch_node_valid_out_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
		lvb_bb0_memcoalesce_param_extrValue_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb0_memcoalesce_param_extrValue_1_reg_NO_SHIFT_REG <= 'x;
		lvb_bb0_outputWidth_reg_NO_SHIFT_REG <= 'x;
		lvb_bb0_pad_reg_NO_SHIFT_REG <= 'x;
		lvb_bb0_memcoalesce_param_bitcast_059_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_bb0_memcoalesce_param_extrValue_0_reg_NO_SHIFT_REG <= local_bb0_memcoalesce_param_extrValue_0_NO_SHIFT_REG;
			lvb_bb0_memcoalesce_param_extrValue_1_reg_NO_SHIFT_REG <= local_bb0_memcoalesce_param_extrValue_1_NO_SHIFT_REG;
			lvb_bb0_outputWidth_reg_NO_SHIFT_REG <= ((local_bb0_outputWidth_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFC28) | 64'h28);
			lvb_bb0_pad_reg_NO_SHIFT_REG <= ((local_bb0_pad_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFC0C) | 64'hC);
			lvb_bb0_memcoalesce_param_bitcast_059_reg_NO_SHIFT_REG <= ((local_bb0_memcoalesce_param_bitcast_059_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFC18) | 64'h18);
			lvb_input_global_id_0_reg_NO_SHIFT_REG <= local_lvm_input_global_id_0_NO_SHIFT_REG;
			lvb_input_global_id_1_reg_NO_SHIFT_REG <= local_lvm_input_global_id_1_NO_SHIFT_REG;
			lvb_input_global_id_2_reg_NO_SHIFT_REG <= local_lvm_input_global_id_2_NO_SHIFT_REG;
			lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module paddingLayer_basic_block_1
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_0,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_1,
		input [63:0] 		input_wii_outputWidth,
		input [63:0] 		input_wii_pad,
		input [63:0] 		input_wii_memcoalesce_param_bitcast_059,
		input 		valid_in,
		output 		stall_out,
		input [31:0] 		input_global_id_0,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out,
		input 		stall_in,
		output 		lvb_bb1__phi_decision_xor,
		output [31:0] 		lvb_bb1_ld_,
		output 		lvb_bb1_cmp1116_NEG,
		output 		lvb_bb1__phi_decision_xor45_or,
		output [31:0] 		lvb_bb1_ld__u0,
		output [31:0] 		lvb_input_global_id_0,
		output [31:0] 		lvb_input_global_id_1,
		output [31:0] 		lvb_input_global_id_2,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		input 		start,
		output 		avm_local_bb1_ld__enable,
		input [511:0] 		avm_local_bb1_ld__readdata,
		input 		avm_local_bb1_ld__readdatavalid,
		input 		avm_local_bb1_ld__waitrequest,
		output [31:0] 		avm_local_bb1_ld__address,
		output 		avm_local_bb1_ld__read,
		output 		avm_local_bb1_ld__write,
		input 		avm_local_bb1_ld__writeack,
		output [511:0] 		avm_local_bb1_ld__writedata,
		output [63:0] 		avm_local_bb1_ld__byteenable,
		output [4:0] 		avm_local_bb1_ld__burstcount,
		output 		local_bb1_ld__active,
		input 		clock2x,
		output 		avm_local_bb1_ld__u0_enable,
		input [511:0] 		avm_local_bb1_ld__u0_readdata,
		input 		avm_local_bb1_ld__u0_readdatavalid,
		input 		avm_local_bb1_ld__u0_waitrequest,
		output [31:0] 		avm_local_bb1_ld__u0_address,
		output 		avm_local_bb1_ld__u0_read,
		output 		avm_local_bb1_ld__u0_write,
		input 		avm_local_bb1_ld__u0_writeack,
		output [511:0] 		avm_local_bb1_ld__u0_writedata,
		output [63:0] 		avm_local_bb1_ld__u0_byteenable,
		output [4:0] 		avm_local_bb1_ld__u0_burstcount,
		output 		local_bb1_ld__u0_active
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_node_stall_in_4;
 reg merge_node_valid_out_4_NO_SHIFT_REG;
wire merge_node_stall_in_5;
 reg merge_node_valid_out_5_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_0_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG) | (merge_node_stall_in_4 & merge_node_valid_out_4_NO_SHIFT_REG) | (merge_node_stall_in_5 & merge_node_valid_out_5_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_global_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_global_id_0_staging_reg_NO_SHIFT_REG <= input_global_id_0;
				input_global_id_1_staging_reg_NO_SHIFT_REG <= input_global_id_1;
				input_global_id_2_staging_reg_NO_SHIFT_REG <= input_global_id_2;
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_5_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_4_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_5_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_4))
			begin
				merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_5))
			begin
				merge_node_valid_out_5_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(*)
begin
	merge_node_valid_out_1_NO_SHIFT_REG = merge_node_valid_out_0_NO_SHIFT_REG;
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1_notlhs_stall_local;
wire local_bb1_notlhs;

assign local_bb1_notlhs = ($signed(input_wii_memcoalesce_param_extrValue_0) <= $signed(local_lvm_input_global_id_0_NO_SHIFT_REG));

// This section implements an unregistered operation.
// 
wire local_bb1_notlhs_valid_out;
wire local_bb1_notlhs_stall_in;
wire local_bb1_notrhs_valid_out;
wire local_bb1_notrhs_stall_in;
wire local_bb1_notrhs_inputs_ready;
wire local_bb1_notrhs_stall_local;
wire local_bb1_notrhs;

assign local_bb1_notrhs_inputs_ready = (merge_node_valid_out_0_NO_SHIFT_REG & merge_node_valid_out_1_NO_SHIFT_REG);
assign local_bb1_notrhs = ($signed(input_wii_memcoalesce_param_extrValue_1) <= $signed(local_lvm_input_global_id_1_NO_SHIFT_REG));
assign local_bb1_notrhs_stall_local = (local_bb1_notlhs_stall_in | local_bb1_notrhs_stall_in);
assign local_bb1_notlhs_valid_out = local_bb1_notrhs_inputs_ready;
assign local_bb1_notrhs_valid_out = local_bb1_notrhs_inputs_ready;
assign merge_node_stall_in_0 = (local_bb1_notrhs_stall_local | ~(local_bb1_notrhs_inputs_ready));
assign merge_node_stall_in_1 = (local_bb1_notrhs_stall_local | ~(local_bb1_notrhs_inputs_ready));

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_outputWidth_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_outputWidth_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to2_outputWidth_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to2_outputWidth_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_outputWidth_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_outputWidth_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_outputWidth_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_outputWidth_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_outputWidth_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_outputWidth_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_outputWidth_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(),
	.data_out()
);

defparam rnode_1to2_outputWidth_0_reg_2_fifo.DEPTH = 2;
defparam rnode_1to2_outputWidth_0_reg_2_fifo.DATA_WIDTH = 0;
defparam rnode_1to2_outputWidth_0_reg_2_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to2_outputWidth_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_outputWidth_0_reg_2_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_2_NO_SHIFT_REG;
assign merge_node_stall_in_2 = rnode_1to2_outputWidth_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_outputWidth_0_stall_in_reg_2_NO_SHIFT_REG = rnode_1to2_outputWidth_0_stall_in_NO_SHIFT_REG;
assign rnode_1to2_outputWidth_0_valid_out_NO_SHIFT_REG = rnode_1to2_outputWidth_0_valid_out_reg_2_NO_SHIFT_REG;

// Register node:
//  * latency = 5
//  * capacity = 5
 logic rnode_1to6_pad_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to6_pad_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to6_pad_0_reg_6_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to6_pad_0_valid_out_reg_6_NO_SHIFT_REG;
 logic rnode_1to6_pad_0_stall_in_reg_6_NO_SHIFT_REG;
 logic rnode_1to6_pad_0_stall_out_reg_6_NO_SHIFT_REG;

acl_data_fifo rnode_1to6_pad_0_reg_6_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to6_pad_0_reg_6_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to6_pad_0_stall_in_reg_6_NO_SHIFT_REG),
	.valid_out(rnode_1to6_pad_0_valid_out_reg_6_NO_SHIFT_REG),
	.stall_out(rnode_1to6_pad_0_stall_out_reg_6_NO_SHIFT_REG),
	.data_in(),
	.data_out()
);

defparam rnode_1to6_pad_0_reg_6_fifo.DEPTH = 6;
defparam rnode_1to6_pad_0_reg_6_fifo.DATA_WIDTH = 0;
defparam rnode_1to6_pad_0_reg_6_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to6_pad_0_reg_6_fifo.IMPL = "ll_reg";

assign rnode_1to6_pad_0_reg_6_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_3_NO_SHIFT_REG;
assign merge_node_stall_in_3 = rnode_1to6_pad_0_stall_out_reg_6_NO_SHIFT_REG;
assign rnode_1to6_pad_0_stall_in_reg_6_NO_SHIFT_REG = rnode_1to6_pad_0_stall_in_NO_SHIFT_REG;
assign rnode_1to6_pad_0_valid_out_NO_SHIFT_REG = rnode_1to6_pad_0_valid_out_reg_6_NO_SHIFT_REG;

// Register node:
//  * latency = 4
//  * capacity = 4
 logic rnode_1to5_input_global_id_2_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to5_input_global_id_2_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to5_input_global_id_2_0_NO_SHIFT_REG;
 logic rnode_1to5_input_global_id_2_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to5_input_global_id_2_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to5_input_global_id_2_1_NO_SHIFT_REG;
 logic rnode_1to5_input_global_id_2_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to5_input_global_id_2_0_reg_5_NO_SHIFT_REG;
 logic rnode_1to5_input_global_id_2_0_valid_out_0_reg_5_NO_SHIFT_REG;
 logic rnode_1to5_input_global_id_2_0_stall_in_0_reg_5_NO_SHIFT_REG;
 logic rnode_1to5_input_global_id_2_0_stall_out_reg_5_NO_SHIFT_REG;
 reg rnode_1to5_input_global_id_2_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to5_input_global_id_2_0_consumed_1_NO_SHIFT_REG;
wire [95:0] rci_rcnode_1to9_rc5_input_global_id_0_0_reg_1;

acl_data_fifo rnode_1to5_input_global_id_2_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to5_input_global_id_2_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to5_input_global_id_2_0_stall_in_0_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_1to5_input_global_id_2_0_valid_out_0_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_1to5_input_global_id_2_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_lvm_input_global_id_2_NO_SHIFT_REG),
	.data_out(rnode_1to5_input_global_id_2_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_1to5_input_global_id_2_0_reg_5_fifo.DEPTH = 5;
defparam rnode_1to5_input_global_id_2_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_1to5_input_global_id_2_0_reg_5_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to5_input_global_id_2_0_reg_5_fifo.IMPL = "ll_reg";

assign rnode_1to5_input_global_id_2_0_reg_5_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_4_NO_SHIFT_REG;
assign merge_node_stall_in_4 = rnode_1to5_input_global_id_2_0_stall_out_reg_5_NO_SHIFT_REG;
assign rnode_1to5_input_global_id_2_0_stall_in_0_reg_5_NO_SHIFT_REG = ((rnode_1to5_input_global_id_2_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to5_input_global_id_2_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to5_input_global_id_2_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to5_input_global_id_2_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to5_input_global_id_2_0_valid_out_0_NO_SHIFT_REG = (rnode_1to5_input_global_id_2_0_valid_out_0_reg_5_NO_SHIFT_REG & ~(rnode_1to5_input_global_id_2_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to5_input_global_id_2_0_valid_out_1_NO_SHIFT_REG = (rnode_1to5_input_global_id_2_0_valid_out_0_reg_5_NO_SHIFT_REG & ~(rnode_1to5_input_global_id_2_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to5_input_global_id_2_0_NO_SHIFT_REG = rnode_1to5_input_global_id_2_0_reg_5_NO_SHIFT_REG;
assign rnode_1to5_input_global_id_2_1_NO_SHIFT_REG = rnode_1to5_input_global_id_2_0_reg_5_NO_SHIFT_REG;
assign rci_rcnode_1to9_rc5_input_global_id_0_0_reg_1[31:0] = local_lvm_input_global_id_0_NO_SHIFT_REG;
assign rci_rcnode_1to9_rc5_input_global_id_0_0_reg_1[63:32] = local_lvm_input_global_id_1_NO_SHIFT_REG;
assign rci_rcnode_1to9_rc5_input_global_id_0_0_reg_1[95:64] = local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to5_input_global_id_2_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to5_input_global_id_2_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to5_input_global_id_2_0_consumed_0_NO_SHIFT_REG <= (rnode_1to5_input_global_id_2_0_valid_out_0_reg_5_NO_SHIFT_REG & (rnode_1to5_input_global_id_2_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to5_input_global_id_2_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to5_input_global_id_2_0_stall_in_0_reg_5_NO_SHIFT_REG);
		rnode_1to5_input_global_id_2_0_consumed_1_NO_SHIFT_REG <= (rnode_1to5_input_global_id_2_0_valid_out_0_reg_5_NO_SHIFT_REG & (rnode_1to5_input_global_id_2_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to5_input_global_id_2_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to5_input_global_id_2_0_stall_in_0_reg_5_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 8
//  * capacity = 8
 logic rcnode_1to9_rc5_input_global_id_0_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to9_rc5_input_global_id_0_0_stall_in_NO_SHIFT_REG;
 logic [95:0] rcnode_1to9_rc5_input_global_id_0_0_NO_SHIFT_REG;
 logic rcnode_1to9_rc5_input_global_id_0_0_reg_9_inputs_ready_NO_SHIFT_REG;
 logic [95:0] rcnode_1to9_rc5_input_global_id_0_0_reg_9_NO_SHIFT_REG;
 logic rcnode_1to9_rc5_input_global_id_0_0_valid_out_reg_9_NO_SHIFT_REG;
 logic rcnode_1to9_rc5_input_global_id_0_0_stall_in_reg_9_NO_SHIFT_REG;
 logic rcnode_1to9_rc5_input_global_id_0_0_stall_out_reg_9_IP_NO_SHIFT_REG;
 logic rcnode_1to9_rc5_input_global_id_0_0_stall_out_reg_9_NO_SHIFT_REG;
wire [1:0] rci_rcnode_1to2_rc0_bb1_notrhs_0_reg_1;

acl_data_fifo rcnode_1to9_rc5_input_global_id_0_0_reg_9_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to9_rc5_input_global_id_0_0_reg_9_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to9_rc5_input_global_id_0_0_stall_in_reg_9_NO_SHIFT_REG),
	.valid_out(rcnode_1to9_rc5_input_global_id_0_0_valid_out_reg_9_NO_SHIFT_REG),
	.stall_out(rcnode_1to9_rc5_input_global_id_0_0_stall_out_reg_9_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to9_rc5_input_global_id_0_0_reg_1),
	.data_out(rcnode_1to9_rc5_input_global_id_0_0_reg_9_NO_SHIFT_REG)
);

defparam rcnode_1to9_rc5_input_global_id_0_0_reg_9_fifo.DEPTH = 9;
defparam rcnode_1to9_rc5_input_global_id_0_0_reg_9_fifo.DATA_WIDTH = 96;
defparam rcnode_1to9_rc5_input_global_id_0_0_reg_9_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to9_rc5_input_global_id_0_0_reg_9_fifo.IMPL = "ram_plus_reg";

assign rcnode_1to9_rc5_input_global_id_0_0_reg_9_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_5_NO_SHIFT_REG;
assign rcnode_1to9_rc5_input_global_id_0_0_stall_out_reg_9_NO_SHIFT_REG = (~(rcnode_1to9_rc5_input_global_id_0_0_reg_9_inputs_ready_NO_SHIFT_REG) | rcnode_1to9_rc5_input_global_id_0_0_stall_out_reg_9_IP_NO_SHIFT_REG);
assign merge_node_stall_in_5 = rcnode_1to9_rc5_input_global_id_0_0_stall_out_reg_9_NO_SHIFT_REG;
assign rcnode_1to9_rc5_input_global_id_0_0_NO_SHIFT_REG = rcnode_1to9_rc5_input_global_id_0_0_reg_9_NO_SHIFT_REG;
assign rcnode_1to9_rc5_input_global_id_0_0_stall_in_reg_9_NO_SHIFT_REG = rcnode_1to9_rc5_input_global_id_0_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to9_rc5_input_global_id_0_0_valid_out_NO_SHIFT_REG = rcnode_1to9_rc5_input_global_id_0_0_valid_out_reg_9_NO_SHIFT_REG;
assign rci_rcnode_1to2_rc0_bb1_notrhs_0_reg_1[0] = local_bb1_notrhs;
assign rci_rcnode_1to2_rc0_bb1_notrhs_0_reg_1[1] = local_bb1_notlhs;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_1to2_rc0_bb1_notrhs_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to2_rc0_bb1_notrhs_0_stall_in_NO_SHIFT_REG;
 logic [1:0] rcnode_1to2_rc0_bb1_notrhs_0_NO_SHIFT_REG;
 logic rcnode_1to2_rc0_bb1_notrhs_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [1:0] rcnode_1to2_rc0_bb1_notrhs_0_reg_2_NO_SHIFT_REG;
 logic rcnode_1to2_rc0_bb1_notrhs_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rcnode_1to2_rc0_bb1_notrhs_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rcnode_1to2_rc0_bb1_notrhs_0_stall_out_0_reg_2_IP_NO_SHIFT_REG;
 logic rcnode_1to2_rc0_bb1_notrhs_0_stall_out_0_reg_2_NO_SHIFT_REG;

acl_data_fifo rcnode_1to2_rc0_bb1_notrhs_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to2_rc0_bb1_notrhs_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to2_rc0_bb1_notrhs_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rcnode_1to2_rc0_bb1_notrhs_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rcnode_1to2_rc0_bb1_notrhs_0_stall_out_0_reg_2_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to2_rc0_bb1_notrhs_0_reg_1),
	.data_out(rcnode_1to2_rc0_bb1_notrhs_0_reg_2_NO_SHIFT_REG)
);

defparam rcnode_1to2_rc0_bb1_notrhs_0_reg_2_fifo.DEPTH = 1;
defparam rcnode_1to2_rc0_bb1_notrhs_0_reg_2_fifo.DATA_WIDTH = 2;
defparam rcnode_1to2_rc0_bb1_notrhs_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rcnode_1to2_rc0_bb1_notrhs_0_reg_2_fifo.IMPL = "ll_reg";

assign rcnode_1to2_rc0_bb1_notrhs_0_reg_2_inputs_ready_NO_SHIFT_REG = (local_bb1_notrhs_valid_out & local_bb1_notlhs_valid_out);
assign rcnode_1to2_rc0_bb1_notrhs_0_stall_out_0_reg_2_NO_SHIFT_REG = (~(rcnode_1to2_rc0_bb1_notrhs_0_reg_2_inputs_ready_NO_SHIFT_REG) | rcnode_1to2_rc0_bb1_notrhs_0_stall_out_0_reg_2_IP_NO_SHIFT_REG);
assign local_bb1_notrhs_stall_in = rcnode_1to2_rc0_bb1_notrhs_0_stall_out_0_reg_2_NO_SHIFT_REG;
assign local_bb1_notlhs_stall_in = rcnode_1to2_rc0_bb1_notrhs_0_stall_out_0_reg_2_NO_SHIFT_REG;
assign rcnode_1to2_rc0_bb1_notrhs_0_NO_SHIFT_REG = rcnode_1to2_rc0_bb1_notrhs_0_reg_2_NO_SHIFT_REG;
assign rcnode_1to2_rc0_bb1_notrhs_0_stall_in_reg_2_NO_SHIFT_REG = rcnode_1to2_rc0_bb1_notrhs_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to2_rc0_bb1_notrhs_0_valid_out_NO_SHIFT_REG = rcnode_1to2_rc0_bb1_notrhs_0_valid_out_reg_2_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb1__phi_decision_xor_valid_out;
wire local_bb1__phi_decision_xor_stall_in;
wire local_bb1__phi_decision_xor_inputs_ready;
wire local_bb1__phi_decision_xor_stall_local;
wire local_bb1__phi_decision_xor;

assign local_bb1__phi_decision_xor_inputs_ready = rcnode_1to2_rc0_bb1_notrhs_0_valid_out_NO_SHIFT_REG;
assign local_bb1__phi_decision_xor = (rcnode_1to2_rc0_bb1_notrhs_0_NO_SHIFT_REG[0] | rcnode_1to2_rc0_bb1_notrhs_0_NO_SHIFT_REG[1]);
assign local_bb1__phi_decision_xor_valid_out = local_bb1__phi_decision_xor_inputs_ready;
assign local_bb1__phi_decision_xor_stall_local = local_bb1__phi_decision_xor_stall_in;
assign rcnode_1to2_rc0_bb1_notrhs_0_stall_in_NO_SHIFT_REG = (|local_bb1__phi_decision_xor_stall_local);

// This section implements a staging register.
// 
wire rstag_2to2_bb1__phi_decision_xor_valid_out_0;
wire rstag_2to2_bb1__phi_decision_xor_stall_in_0;
wire rstag_2to2_bb1__phi_decision_xor_valid_out_1;
wire rstag_2to2_bb1__phi_decision_xor_stall_in_1;
wire rstag_2to2_bb1__phi_decision_xor_inputs_ready;
wire rstag_2to2_bb1__phi_decision_xor_stall_local;
 reg rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG;
wire rstag_2to2_bb1__phi_decision_xor_combined_valid;
 reg rstag_2to2_bb1__phi_decision_xor_staging_reg_NO_SHIFT_REG;
wire rstag_2to2_bb1__phi_decision_xor;
 reg rstag_2to2_bb1__phi_decision_xor_consumed_0_NO_SHIFT_REG;
 reg rstag_2to2_bb1__phi_decision_xor_consumed_1_NO_SHIFT_REG;

assign rstag_2to2_bb1__phi_decision_xor_inputs_ready = local_bb1__phi_decision_xor_valid_out;
assign rstag_2to2_bb1__phi_decision_xor = (rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG ? rstag_2to2_bb1__phi_decision_xor_staging_reg_NO_SHIFT_REG : local_bb1__phi_decision_xor);
assign rstag_2to2_bb1__phi_decision_xor_combined_valid = (rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG | rstag_2to2_bb1__phi_decision_xor_inputs_ready);
assign rstag_2to2_bb1__phi_decision_xor_stall_local = ((rstag_2to2_bb1__phi_decision_xor_stall_in_0 & ~(rstag_2to2_bb1__phi_decision_xor_consumed_0_NO_SHIFT_REG)) | (rstag_2to2_bb1__phi_decision_xor_stall_in_1 & ~(rstag_2to2_bb1__phi_decision_xor_consumed_1_NO_SHIFT_REG)));
assign rstag_2to2_bb1__phi_decision_xor_valid_out_0 = (rstag_2to2_bb1__phi_decision_xor_combined_valid & ~(rstag_2to2_bb1__phi_decision_xor_consumed_0_NO_SHIFT_REG));
assign rstag_2to2_bb1__phi_decision_xor_valid_out_1 = (rstag_2to2_bb1__phi_decision_xor_combined_valid & ~(rstag_2to2_bb1__phi_decision_xor_consumed_1_NO_SHIFT_REG));
assign local_bb1__phi_decision_xor_stall_in = (|rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_2to2_bb1__phi_decision_xor_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_2to2_bb1__phi_decision_xor_stall_local)
		begin
			if (~(rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG))
			begin
				rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG <= rstag_2to2_bb1__phi_decision_xor_inputs_ready;
			end
		end
		else
		begin
			rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG))
		begin
			rstag_2to2_bb1__phi_decision_xor_staging_reg_NO_SHIFT_REG <= local_bb1__phi_decision_xor;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_2to2_bb1__phi_decision_xor_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_2to2_bb1__phi_decision_xor_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_2to2_bb1__phi_decision_xor_consumed_0_NO_SHIFT_REG <= (rstag_2to2_bb1__phi_decision_xor_combined_valid & (rstag_2to2_bb1__phi_decision_xor_consumed_0_NO_SHIFT_REG | ~(rstag_2to2_bb1__phi_decision_xor_stall_in_0)) & rstag_2to2_bb1__phi_decision_xor_stall_local);
		rstag_2to2_bb1__phi_decision_xor_consumed_1_NO_SHIFT_REG <= (rstag_2to2_bb1__phi_decision_xor_combined_valid & (rstag_2to2_bb1__phi_decision_xor_consumed_1_NO_SHIFT_REG | ~(rstag_2to2_bb1__phi_decision_xor_stall_in_1)) & rstag_2to2_bb1__phi_decision_xor_stall_local);
	end
end


// Register node:
//  * latency = 4
//  * capacity = 4
 logic rnode_2to6_bb1__phi_decision_xor_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_2to6_bb1__phi_decision_xor_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_2to6_bb1__phi_decision_xor_0_NO_SHIFT_REG;
 logic rnode_2to6_bb1__phi_decision_xor_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_2to6_bb1__phi_decision_xor_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_2to6_bb1__phi_decision_xor_1_NO_SHIFT_REG;
 logic rnode_2to6_bb1__phi_decision_xor_0_reg_6_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to6_bb1__phi_decision_xor_0_reg_6_NO_SHIFT_REG;
 logic rnode_2to6_bb1__phi_decision_xor_0_valid_out_0_reg_6_NO_SHIFT_REG;
 logic rnode_2to6_bb1__phi_decision_xor_0_stall_in_0_reg_6_NO_SHIFT_REG;
 logic rnode_2to6_bb1__phi_decision_xor_0_stall_out_reg_6_NO_SHIFT_REG;
 reg rnode_2to6_bb1__phi_decision_xor_0_consumed_0_NO_SHIFT_REG;
 reg rnode_2to6_bb1__phi_decision_xor_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_2to6_bb1__phi_decision_xor_0_reg_6_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to6_bb1__phi_decision_xor_0_reg_6_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to6_bb1__phi_decision_xor_0_stall_in_0_reg_6_NO_SHIFT_REG),
	.valid_out(rnode_2to6_bb1__phi_decision_xor_0_valid_out_0_reg_6_NO_SHIFT_REG),
	.stall_out(rnode_2to6_bb1__phi_decision_xor_0_stall_out_reg_6_NO_SHIFT_REG),
	.data_in(rstag_2to2_bb1__phi_decision_xor),
	.data_out(rnode_2to6_bb1__phi_decision_xor_0_reg_6_NO_SHIFT_REG)
);

defparam rnode_2to6_bb1__phi_decision_xor_0_reg_6_fifo.DEPTH = 5;
defparam rnode_2to6_bb1__phi_decision_xor_0_reg_6_fifo.DATA_WIDTH = 1;
defparam rnode_2to6_bb1__phi_decision_xor_0_reg_6_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_2to6_bb1__phi_decision_xor_0_reg_6_fifo.IMPL = "ll_reg";

assign rnode_2to6_bb1__phi_decision_xor_0_reg_6_inputs_ready_NO_SHIFT_REG = rstag_2to2_bb1__phi_decision_xor_valid_out_0;
assign rstag_2to2_bb1__phi_decision_xor_stall_in_0 = rnode_2to6_bb1__phi_decision_xor_0_stall_out_reg_6_NO_SHIFT_REG;
assign rnode_2to6_bb1__phi_decision_xor_0_stall_in_0_reg_6_NO_SHIFT_REG = ((rnode_2to6_bb1__phi_decision_xor_0_stall_in_0_NO_SHIFT_REG & ~(rnode_2to6_bb1__phi_decision_xor_0_consumed_0_NO_SHIFT_REG)) | (rnode_2to6_bb1__phi_decision_xor_0_stall_in_1_NO_SHIFT_REG & ~(rnode_2to6_bb1__phi_decision_xor_0_consumed_1_NO_SHIFT_REG)));
assign rnode_2to6_bb1__phi_decision_xor_0_valid_out_0_NO_SHIFT_REG = (rnode_2to6_bb1__phi_decision_xor_0_valid_out_0_reg_6_NO_SHIFT_REG & ~(rnode_2to6_bb1__phi_decision_xor_0_consumed_0_NO_SHIFT_REG));
assign rnode_2to6_bb1__phi_decision_xor_0_valid_out_1_NO_SHIFT_REG = (rnode_2to6_bb1__phi_decision_xor_0_valid_out_0_reg_6_NO_SHIFT_REG & ~(rnode_2to6_bb1__phi_decision_xor_0_consumed_1_NO_SHIFT_REG));
assign rnode_2to6_bb1__phi_decision_xor_0_NO_SHIFT_REG = rnode_2to6_bb1__phi_decision_xor_0_reg_6_NO_SHIFT_REG;
assign rnode_2to6_bb1__phi_decision_xor_1_NO_SHIFT_REG = rnode_2to6_bb1__phi_decision_xor_0_reg_6_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_2to6_bb1__phi_decision_xor_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_2to6_bb1__phi_decision_xor_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_2to6_bb1__phi_decision_xor_0_consumed_0_NO_SHIFT_REG <= (rnode_2to6_bb1__phi_decision_xor_0_valid_out_0_reg_6_NO_SHIFT_REG & (rnode_2to6_bb1__phi_decision_xor_0_consumed_0_NO_SHIFT_REG | ~(rnode_2to6_bb1__phi_decision_xor_0_stall_in_0_NO_SHIFT_REG)) & rnode_2to6_bb1__phi_decision_xor_0_stall_in_0_reg_6_NO_SHIFT_REG);
		rnode_2to6_bb1__phi_decision_xor_0_consumed_1_NO_SHIFT_REG <= (rnode_2to6_bb1__phi_decision_xor_0_valid_out_0_reg_6_NO_SHIFT_REG & (rnode_2to6_bb1__phi_decision_xor_0_consumed_1_NO_SHIFT_REG | ~(rnode_2to6_bb1__phi_decision_xor_0_stall_in_1_NO_SHIFT_REG)) & rnode_2to6_bb1__phi_decision_xor_0_stall_in_0_reg_6_NO_SHIFT_REG);
	end
end


// This section implements a registered operation.
// 
wire local_bb1_ld__inputs_ready;
 reg local_bb1_ld__valid_out_NO_SHIFT_REG;
wire local_bb1_ld__stall_in;
wire local_bb1_ld__output_regs_ready;
wire local_bb1_ld__fu_stall_out;
wire local_bb1_ld__fu_valid_out;
wire [31:0] local_bb1_ld__lsu_dataout;
 reg [31:0] local_bb1_ld__NO_SHIFT_REG;
wire local_bb1_ld__causedstall;

lsu_top lsu_local_bb1_ld_ (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb1_ld__fu_stall_out),
	.i_valid(local_bb1_ld__inputs_ready),
	.i_address(((input_wii_outputWidth & 64'hFFFFFFFFFFFFFC28) | 64'h28)),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(rstag_2to2_bb1__phi_decision_xor),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb1_ld__output_regs_ready)),
	.o_valid(local_bb1_ld__fu_valid_out),
	.o_readdata(local_bb1_ld__lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb1_ld__active),
	.avm_address(avm_local_bb1_ld__address),
	.avm_read(avm_local_bb1_ld__read),
	.avm_enable(avm_local_bb1_ld__enable),
	.avm_readdata(avm_local_bb1_ld__readdata),
	.avm_write(avm_local_bb1_ld__write),
	.avm_writeack(avm_local_bb1_ld__writeack),
	.avm_burstcount(avm_local_bb1_ld__burstcount),
	.avm_writedata(avm_local_bb1_ld__writedata),
	.avm_byteenable(avm_local_bb1_ld__byteenable),
	.avm_waitrequest(avm_local_bb1_ld__waitrequest),
	.avm_readdatavalid(avm_local_bb1_ld__readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb1_ld_.AWIDTH = 32;
defparam lsu_local_bb1_ld_.WIDTH_BYTES = 4;
defparam lsu_local_bb1_ld_.MWIDTH_BYTES = 64;
defparam lsu_local_bb1_ld_.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb1_ld_.ALIGNMENT_BYTES = 8;
defparam lsu_local_bb1_ld_.READ = 1;
defparam lsu_local_bb1_ld_.ATOMIC = 0;
defparam lsu_local_bb1_ld_.WIDTH = 32;
defparam lsu_local_bb1_ld_.MWIDTH = 512;
defparam lsu_local_bb1_ld_.ATOMIC_WIDTH = 3;
defparam lsu_local_bb1_ld_.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb1_ld_.KERNEL_SIDE_MEM_LATENCY = 3;
defparam lsu_local_bb1_ld_.MEMORY_SIDE_MEM_LATENCY = 68;
defparam lsu_local_bb1_ld_.USE_WRITE_ACK = 0;
defparam lsu_local_bb1_ld_.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb1_ld_.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb1_ld_.NUMBER_BANKS = 1;
defparam lsu_local_bb1_ld_.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb1_ld_.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb1_ld_.USEINPUTFIFO = 0;
defparam lsu_local_bb1_ld_.USECACHING = 1;
defparam lsu_local_bb1_ld_.CACHESIZE = 128;
defparam lsu_local_bb1_ld_.USEOUTPUTFIFO = 1;
defparam lsu_local_bb1_ld_.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb1_ld_.ADDRSPACE = 1;
defparam lsu_local_bb1_ld_.STYLE = "SEMI-STREAMING";

assign local_bb1_ld__inputs_ready = (rnode_1to2_outputWidth_0_valid_out_NO_SHIFT_REG & rstag_2to2_bb1__phi_decision_xor_valid_out_1);
assign local_bb1_ld__output_regs_ready = (&(~(local_bb1_ld__valid_out_NO_SHIFT_REG) | ~(local_bb1_ld__stall_in)));
assign rnode_1to2_outputWidth_0_stall_in_NO_SHIFT_REG = (local_bb1_ld__fu_stall_out | ~(local_bb1_ld__inputs_ready));
assign rstag_2to2_bb1__phi_decision_xor_stall_in_1 = (local_bb1_ld__fu_stall_out | ~(local_bb1_ld__inputs_ready));
assign local_bb1_ld__causedstall = (local_bb1_ld__inputs_ready && (local_bb1_ld__fu_stall_out && !(~(local_bb1_ld__output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb1_ld__NO_SHIFT_REG <= 'x;
		local_bb1_ld__valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb1_ld__output_regs_ready)
		begin
			local_bb1_ld__NO_SHIFT_REG <= local_bb1_ld__lsu_dataout;
			local_bb1_ld__valid_out_NO_SHIFT_REG <= local_bb1_ld__fu_valid_out;
		end
		else
		begin
			if (~(local_bb1_ld__stall_in))
			begin
				local_bb1_ld__valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_5to5_bb1_ld__valid_out_0;
wire rstag_5to5_bb1_ld__stall_in_0;
wire rstag_5to5_bb1_ld__valid_out_1;
wire rstag_5to5_bb1_ld__stall_in_1;
wire rstag_5to5_bb1_ld__inputs_ready;
wire rstag_5to5_bb1_ld__stall_local;
 reg rstag_5to5_bb1_ld__staging_valid_NO_SHIFT_REG;
wire rstag_5to5_bb1_ld__combined_valid;
 reg [31:0] rstag_5to5_bb1_ld__staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_5to5_bb1_ld_;
 reg rstag_5to5_bb1_ld__consumed_0_NO_SHIFT_REG;
 reg rstag_5to5_bb1_ld__consumed_1_NO_SHIFT_REG;
wire [63:0] rci_rcnode_5to9_rc1_bb1_ld__0_reg_5;

assign rstag_5to5_bb1_ld__inputs_ready = local_bb1_ld__valid_out_NO_SHIFT_REG;
assign rstag_5to5_bb1_ld_ = (rstag_5to5_bb1_ld__staging_valid_NO_SHIFT_REG ? rstag_5to5_bb1_ld__staging_reg_NO_SHIFT_REG : local_bb1_ld__NO_SHIFT_REG);
assign rstag_5to5_bb1_ld__combined_valid = (rstag_5to5_bb1_ld__staging_valid_NO_SHIFT_REG | rstag_5to5_bb1_ld__inputs_ready);
assign rstag_5to5_bb1_ld__stall_local = ((rstag_5to5_bb1_ld__stall_in_0 & ~(rstag_5to5_bb1_ld__consumed_0_NO_SHIFT_REG)) | (rstag_5to5_bb1_ld__stall_in_1 & ~(rstag_5to5_bb1_ld__consumed_1_NO_SHIFT_REG)));
assign rstag_5to5_bb1_ld__valid_out_0 = (rstag_5to5_bb1_ld__combined_valid & ~(rstag_5to5_bb1_ld__consumed_0_NO_SHIFT_REG));
assign rstag_5to5_bb1_ld__valid_out_1 = (rstag_5to5_bb1_ld__combined_valid & ~(rstag_5to5_bb1_ld__consumed_1_NO_SHIFT_REG));
assign local_bb1_ld__stall_in = (|rstag_5to5_bb1_ld__staging_valid_NO_SHIFT_REG);
assign rci_rcnode_5to9_rc1_bb1_ld__0_reg_5[31:0] = rstag_5to5_bb1_ld_;
assign rci_rcnode_5to9_rc1_bb1_ld__0_reg_5[63:32] = rnode_1to5_input_global_id_2_1_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_5to5_bb1_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_5to5_bb1_ld__staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_5to5_bb1_ld__stall_local)
		begin
			if (~(rstag_5to5_bb1_ld__staging_valid_NO_SHIFT_REG))
			begin
				rstag_5to5_bb1_ld__staging_valid_NO_SHIFT_REG <= rstag_5to5_bb1_ld__inputs_ready;
			end
		end
		else
		begin
			rstag_5to5_bb1_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_5to5_bb1_ld__staging_valid_NO_SHIFT_REG))
		begin
			rstag_5to5_bb1_ld__staging_reg_NO_SHIFT_REG <= local_bb1_ld__NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_5to5_bb1_ld__consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_5to5_bb1_ld__consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_5to5_bb1_ld__consumed_0_NO_SHIFT_REG <= (rstag_5to5_bb1_ld__combined_valid & (rstag_5to5_bb1_ld__consumed_0_NO_SHIFT_REG | ~(rstag_5to5_bb1_ld__stall_in_0)) & rstag_5to5_bb1_ld__stall_local);
		rstag_5to5_bb1_ld__consumed_1_NO_SHIFT_REG <= (rstag_5to5_bb1_ld__combined_valid & (rstag_5to5_bb1_ld__consumed_1_NO_SHIFT_REG | ~(rstag_5to5_bb1_ld__stall_in_1)) & rstag_5to5_bb1_ld__stall_local);
	end
end


// Register node:
//  * latency = 4
//  * capacity = 4
 logic rcnode_5to9_rc1_bb1_ld__0_valid_out_NO_SHIFT_REG;
 logic rcnode_5to9_rc1_bb1_ld__0_stall_in_NO_SHIFT_REG;
 logic [63:0] rcnode_5to9_rc1_bb1_ld__0_NO_SHIFT_REG;
 logic rcnode_5to9_rc1_bb1_ld__0_reg_9_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rcnode_5to9_rc1_bb1_ld__0_reg_9_NO_SHIFT_REG;
 logic rcnode_5to9_rc1_bb1_ld__0_valid_out_reg_9_NO_SHIFT_REG;
 logic rcnode_5to9_rc1_bb1_ld__0_stall_in_reg_9_NO_SHIFT_REG;
 logic rcnode_5to9_rc1_bb1_ld__0_stall_out_0_reg_9_IP_NO_SHIFT_REG;
 logic rcnode_5to9_rc1_bb1_ld__0_stall_out_0_reg_9_NO_SHIFT_REG;

acl_data_fifo rcnode_5to9_rc1_bb1_ld__0_reg_9_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_5to9_rc1_bb1_ld__0_reg_9_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_5to9_rc1_bb1_ld__0_stall_in_reg_9_NO_SHIFT_REG),
	.valid_out(rcnode_5to9_rc1_bb1_ld__0_valid_out_reg_9_NO_SHIFT_REG),
	.stall_out(rcnode_5to9_rc1_bb1_ld__0_stall_out_0_reg_9_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_5to9_rc1_bb1_ld__0_reg_5),
	.data_out(rcnode_5to9_rc1_bb1_ld__0_reg_9_NO_SHIFT_REG)
);

defparam rcnode_5to9_rc1_bb1_ld__0_reg_9_fifo.DEPTH = 5;
defparam rcnode_5to9_rc1_bb1_ld__0_reg_9_fifo.DATA_WIDTH = 64;
defparam rcnode_5to9_rc1_bb1_ld__0_reg_9_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_5to9_rc1_bb1_ld__0_reg_9_fifo.IMPL = "ll_reg";

assign rcnode_5to9_rc1_bb1_ld__0_reg_9_inputs_ready_NO_SHIFT_REG = (rnode_1to5_input_global_id_2_0_valid_out_1_NO_SHIFT_REG & rstag_5to5_bb1_ld__valid_out_0);
assign rcnode_5to9_rc1_bb1_ld__0_stall_out_0_reg_9_NO_SHIFT_REG = (~(rcnode_5to9_rc1_bb1_ld__0_reg_9_inputs_ready_NO_SHIFT_REG) | rcnode_5to9_rc1_bb1_ld__0_stall_out_0_reg_9_IP_NO_SHIFT_REG);
assign rnode_1to5_input_global_id_2_0_stall_in_1_NO_SHIFT_REG = rcnode_5to9_rc1_bb1_ld__0_stall_out_0_reg_9_NO_SHIFT_REG;
assign rstag_5to5_bb1_ld__stall_in_0 = rcnode_5to9_rc1_bb1_ld__0_stall_out_0_reg_9_NO_SHIFT_REG;
assign rcnode_5to9_rc1_bb1_ld__0_NO_SHIFT_REG = rcnode_5to9_rc1_bb1_ld__0_reg_9_NO_SHIFT_REG;
assign rcnode_5to9_rc1_bb1_ld__0_stall_in_reg_9_NO_SHIFT_REG = rcnode_5to9_rc1_bb1_ld__0_stall_in_NO_SHIFT_REG;
assign rcnode_5to9_rc1_bb1_ld__0_valid_out_NO_SHIFT_REG = rcnode_5to9_rc1_bb1_ld__0_valid_out_reg_9_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb1_cmp1116_NEG_valid_out;
wire local_bb1_cmp1116_NEG_stall_in;
wire local_bb1_cmp1116_NEG_inputs_ready;
wire local_bb1_cmp1116_NEG_stall_local;
wire local_bb1_cmp1116_NEG;

assign local_bb1_cmp1116_NEG_inputs_ready = (rnode_1to5_input_global_id_2_0_valid_out_0_NO_SHIFT_REG & rstag_5to5_bb1_ld__valid_out_1);
assign local_bb1_cmp1116_NEG = ($signed(rstag_5to5_bb1_ld_) <= $signed(rnode_1to5_input_global_id_2_0_NO_SHIFT_REG));
assign local_bb1_cmp1116_NEG_valid_out = local_bb1_cmp1116_NEG_inputs_ready;
assign local_bb1_cmp1116_NEG_stall_local = local_bb1_cmp1116_NEG_stall_in;
assign rnode_1to5_input_global_id_2_0_stall_in_0_NO_SHIFT_REG = (local_bb1_cmp1116_NEG_stall_local | ~(local_bb1_cmp1116_NEG_inputs_ready));
assign rstag_5to5_bb1_ld__stall_in_1 = (local_bb1_cmp1116_NEG_stall_local | ~(local_bb1_cmp1116_NEG_inputs_ready));

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_5to6_bb1_cmp1116_NEG_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1116_NEG_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1116_NEG_0_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1116_NEG_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1116_NEG_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1116_NEG_1_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1116_NEG_0_reg_6_inputs_ready_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1116_NEG_0_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1116_NEG_0_valid_out_0_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1116_NEG_0_stall_in_0_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1116_NEG_0_stall_out_reg_6_NO_SHIFT_REG;
 reg rnode_5to6_bb1_cmp1116_NEG_0_consumed_0_NO_SHIFT_REG;
 reg rnode_5to6_bb1_cmp1116_NEG_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_5to6_bb1_cmp1116_NEG_0_reg_6_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_5to6_bb1_cmp1116_NEG_0_reg_6_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_5to6_bb1_cmp1116_NEG_0_stall_in_0_reg_6_NO_SHIFT_REG),
	.valid_out(rnode_5to6_bb1_cmp1116_NEG_0_valid_out_0_reg_6_NO_SHIFT_REG),
	.stall_out(rnode_5to6_bb1_cmp1116_NEG_0_stall_out_reg_6_NO_SHIFT_REG),
	.data_in(local_bb1_cmp1116_NEG),
	.data_out(rnode_5to6_bb1_cmp1116_NEG_0_reg_6_NO_SHIFT_REG)
);

defparam rnode_5to6_bb1_cmp1116_NEG_0_reg_6_fifo.DEPTH = 1;
defparam rnode_5to6_bb1_cmp1116_NEG_0_reg_6_fifo.DATA_WIDTH = 1;
defparam rnode_5to6_bb1_cmp1116_NEG_0_reg_6_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_5to6_bb1_cmp1116_NEG_0_reg_6_fifo.IMPL = "ll_reg";

assign rnode_5to6_bb1_cmp1116_NEG_0_reg_6_inputs_ready_NO_SHIFT_REG = local_bb1_cmp1116_NEG_valid_out;
assign local_bb1_cmp1116_NEG_stall_in = rnode_5to6_bb1_cmp1116_NEG_0_stall_out_reg_6_NO_SHIFT_REG;
assign rnode_5to6_bb1_cmp1116_NEG_0_stall_in_0_reg_6_NO_SHIFT_REG = ((rnode_5to6_bb1_cmp1116_NEG_0_stall_in_0_NO_SHIFT_REG & ~(rnode_5to6_bb1_cmp1116_NEG_0_consumed_0_NO_SHIFT_REG)) | (rnode_5to6_bb1_cmp1116_NEG_0_stall_in_1_NO_SHIFT_REG & ~(rnode_5to6_bb1_cmp1116_NEG_0_consumed_1_NO_SHIFT_REG)));
assign rnode_5to6_bb1_cmp1116_NEG_0_valid_out_0_NO_SHIFT_REG = (rnode_5to6_bb1_cmp1116_NEG_0_valid_out_0_reg_6_NO_SHIFT_REG & ~(rnode_5to6_bb1_cmp1116_NEG_0_consumed_0_NO_SHIFT_REG));
assign rnode_5to6_bb1_cmp1116_NEG_0_valid_out_1_NO_SHIFT_REG = (rnode_5to6_bb1_cmp1116_NEG_0_valid_out_0_reg_6_NO_SHIFT_REG & ~(rnode_5to6_bb1_cmp1116_NEG_0_consumed_1_NO_SHIFT_REG));
assign rnode_5to6_bb1_cmp1116_NEG_0_NO_SHIFT_REG = rnode_5to6_bb1_cmp1116_NEG_0_reg_6_NO_SHIFT_REG;
assign rnode_5to6_bb1_cmp1116_NEG_1_NO_SHIFT_REG = rnode_5to6_bb1_cmp1116_NEG_0_reg_6_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_5to6_bb1_cmp1116_NEG_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_5to6_bb1_cmp1116_NEG_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_5to6_bb1_cmp1116_NEG_0_consumed_0_NO_SHIFT_REG <= (rnode_5to6_bb1_cmp1116_NEG_0_valid_out_0_reg_6_NO_SHIFT_REG & (rnode_5to6_bb1_cmp1116_NEG_0_consumed_0_NO_SHIFT_REG | ~(rnode_5to6_bb1_cmp1116_NEG_0_stall_in_0_NO_SHIFT_REG)) & rnode_5to6_bb1_cmp1116_NEG_0_stall_in_0_reg_6_NO_SHIFT_REG);
		rnode_5to6_bb1_cmp1116_NEG_0_consumed_1_NO_SHIFT_REG <= (rnode_5to6_bb1_cmp1116_NEG_0_valid_out_0_reg_6_NO_SHIFT_REG & (rnode_5to6_bb1_cmp1116_NEG_0_consumed_1_NO_SHIFT_REG | ~(rnode_5to6_bb1_cmp1116_NEG_0_stall_in_1_NO_SHIFT_REG)) & rnode_5to6_bb1_cmp1116_NEG_0_stall_in_0_reg_6_NO_SHIFT_REG);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1__phi_decision_xor45_or_valid_out;
wire local_bb1__phi_decision_xor45_or_stall_in;
wire local_bb1__phi_decision_xor45_or_inputs_ready;
wire local_bb1__phi_decision_xor45_or_stall_local;
wire local_bb1__phi_decision_xor45_or;
wire [1:0] rci_rcnode_6to9_rc1_bb1_cmp1116_NEG_0_reg_6;

assign local_bb1__phi_decision_xor45_or_inputs_ready = (rnode_5to6_bb1_cmp1116_NEG_0_valid_out_0_NO_SHIFT_REG & rnode_2to6_bb1__phi_decision_xor_0_valid_out_0_NO_SHIFT_REG);
assign local_bb1__phi_decision_xor45_or = (rnode_5to6_bb1_cmp1116_NEG_0_NO_SHIFT_REG | rnode_2to6_bb1__phi_decision_xor_0_NO_SHIFT_REG);
assign local_bb1__phi_decision_xor45_or_valid_out = local_bb1__phi_decision_xor45_or_inputs_ready;
assign local_bb1__phi_decision_xor45_or_stall_local = local_bb1__phi_decision_xor45_or_stall_in;
assign rnode_5to6_bb1_cmp1116_NEG_0_stall_in_0_NO_SHIFT_REG = (local_bb1__phi_decision_xor45_or_stall_local | ~(local_bb1__phi_decision_xor45_or_inputs_ready));
assign rnode_2to6_bb1__phi_decision_xor_0_stall_in_0_NO_SHIFT_REG = (local_bb1__phi_decision_xor45_or_stall_local | ~(local_bb1__phi_decision_xor45_or_inputs_ready));
assign rci_rcnode_6to9_rc1_bb1_cmp1116_NEG_0_reg_6[0] = rnode_5to6_bb1_cmp1116_NEG_1_NO_SHIFT_REG;
assign rci_rcnode_6to9_rc1_bb1_cmp1116_NEG_0_reg_6[1] = rnode_2to6_bb1__phi_decision_xor_1_NO_SHIFT_REG;

// Register node:
//  * latency = 3
//  * capacity = 3
 logic rcnode_6to9_rc1_bb1_cmp1116_NEG_0_valid_out_NO_SHIFT_REG;
 logic rcnode_6to9_rc1_bb1_cmp1116_NEG_0_stall_in_NO_SHIFT_REG;
 logic [1:0] rcnode_6to9_rc1_bb1_cmp1116_NEG_0_NO_SHIFT_REG;
 logic rcnode_6to9_rc1_bb1_cmp1116_NEG_0_reg_9_inputs_ready_NO_SHIFT_REG;
 logic [1:0] rcnode_6to9_rc1_bb1_cmp1116_NEG_0_reg_9_NO_SHIFT_REG;
 logic rcnode_6to9_rc1_bb1_cmp1116_NEG_0_valid_out_reg_9_NO_SHIFT_REG;
 logic rcnode_6to9_rc1_bb1_cmp1116_NEG_0_stall_in_reg_9_NO_SHIFT_REG;
 logic rcnode_6to9_rc1_bb1_cmp1116_NEG_0_stall_out_0_reg_9_IP_NO_SHIFT_REG;
 logic rcnode_6to9_rc1_bb1_cmp1116_NEG_0_stall_out_0_reg_9_NO_SHIFT_REG;

acl_data_fifo rcnode_6to9_rc1_bb1_cmp1116_NEG_0_reg_9_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_6to9_rc1_bb1_cmp1116_NEG_0_reg_9_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_6to9_rc1_bb1_cmp1116_NEG_0_stall_in_reg_9_NO_SHIFT_REG),
	.valid_out(rcnode_6to9_rc1_bb1_cmp1116_NEG_0_valid_out_reg_9_NO_SHIFT_REG),
	.stall_out(rcnode_6to9_rc1_bb1_cmp1116_NEG_0_stall_out_0_reg_9_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_6to9_rc1_bb1_cmp1116_NEG_0_reg_6),
	.data_out(rcnode_6to9_rc1_bb1_cmp1116_NEG_0_reg_9_NO_SHIFT_REG)
);

defparam rcnode_6to9_rc1_bb1_cmp1116_NEG_0_reg_9_fifo.DEPTH = 4;
defparam rcnode_6to9_rc1_bb1_cmp1116_NEG_0_reg_9_fifo.DATA_WIDTH = 2;
defparam rcnode_6to9_rc1_bb1_cmp1116_NEG_0_reg_9_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_6to9_rc1_bb1_cmp1116_NEG_0_reg_9_fifo.IMPL = "ll_reg";

assign rcnode_6to9_rc1_bb1_cmp1116_NEG_0_reg_9_inputs_ready_NO_SHIFT_REG = (rnode_5to6_bb1_cmp1116_NEG_0_valid_out_1_NO_SHIFT_REG & rnode_2to6_bb1__phi_decision_xor_0_valid_out_1_NO_SHIFT_REG);
assign rcnode_6to9_rc1_bb1_cmp1116_NEG_0_stall_out_0_reg_9_NO_SHIFT_REG = (~(rcnode_6to9_rc1_bb1_cmp1116_NEG_0_reg_9_inputs_ready_NO_SHIFT_REG) | rcnode_6to9_rc1_bb1_cmp1116_NEG_0_stall_out_0_reg_9_IP_NO_SHIFT_REG);
assign rnode_5to6_bb1_cmp1116_NEG_0_stall_in_1_NO_SHIFT_REG = rcnode_6to9_rc1_bb1_cmp1116_NEG_0_stall_out_0_reg_9_NO_SHIFT_REG;
assign rnode_2to6_bb1__phi_decision_xor_0_stall_in_1_NO_SHIFT_REG = rcnode_6to9_rc1_bb1_cmp1116_NEG_0_stall_out_0_reg_9_NO_SHIFT_REG;
assign rcnode_6to9_rc1_bb1_cmp1116_NEG_0_NO_SHIFT_REG = rcnode_6to9_rc1_bb1_cmp1116_NEG_0_reg_9_NO_SHIFT_REG;
assign rcnode_6to9_rc1_bb1_cmp1116_NEG_0_stall_in_reg_9_NO_SHIFT_REG = rcnode_6to9_rc1_bb1_cmp1116_NEG_0_stall_in_NO_SHIFT_REG;
assign rcnode_6to9_rc1_bb1_cmp1116_NEG_0_valid_out_NO_SHIFT_REG = rcnode_6to9_rc1_bb1_cmp1116_NEG_0_valid_out_reg_9_NO_SHIFT_REG;

// This section implements a staging register.
// 
wire rstag_6to6_bb1__phi_decision_xor45_or_valid_out_0;
wire rstag_6to6_bb1__phi_decision_xor45_or_stall_in_0;
wire rstag_6to6_bb1__phi_decision_xor45_or_valid_out_1;
wire rstag_6to6_bb1__phi_decision_xor45_or_stall_in_1;
wire rstag_6to6_bb1__phi_decision_xor45_or_inputs_ready;
wire rstag_6to6_bb1__phi_decision_xor45_or_stall_local;
 reg rstag_6to6_bb1__phi_decision_xor45_or_staging_valid_NO_SHIFT_REG;
wire rstag_6to6_bb1__phi_decision_xor45_or_combined_valid;
 reg rstag_6to6_bb1__phi_decision_xor45_or_staging_reg_NO_SHIFT_REG;
wire rstag_6to6_bb1__phi_decision_xor45_or;
 reg rstag_6to6_bb1__phi_decision_xor45_or_consumed_0_NO_SHIFT_REG;
 reg rstag_6to6_bb1__phi_decision_xor45_or_consumed_1_NO_SHIFT_REG;

assign rstag_6to6_bb1__phi_decision_xor45_or_inputs_ready = local_bb1__phi_decision_xor45_or_valid_out;
assign rstag_6to6_bb1__phi_decision_xor45_or = (rstag_6to6_bb1__phi_decision_xor45_or_staging_valid_NO_SHIFT_REG ? rstag_6to6_bb1__phi_decision_xor45_or_staging_reg_NO_SHIFT_REG : local_bb1__phi_decision_xor45_or);
assign rstag_6to6_bb1__phi_decision_xor45_or_combined_valid = (rstag_6to6_bb1__phi_decision_xor45_or_staging_valid_NO_SHIFT_REG | rstag_6to6_bb1__phi_decision_xor45_or_inputs_ready);
assign rstag_6to6_bb1__phi_decision_xor45_or_stall_local = ((rstag_6to6_bb1__phi_decision_xor45_or_stall_in_0 & ~(rstag_6to6_bb1__phi_decision_xor45_or_consumed_0_NO_SHIFT_REG)) | (rstag_6to6_bb1__phi_decision_xor45_or_stall_in_1 & ~(rstag_6to6_bb1__phi_decision_xor45_or_consumed_1_NO_SHIFT_REG)));
assign rstag_6to6_bb1__phi_decision_xor45_or_valid_out_0 = (rstag_6to6_bb1__phi_decision_xor45_or_combined_valid & ~(rstag_6to6_bb1__phi_decision_xor45_or_consumed_0_NO_SHIFT_REG));
assign rstag_6to6_bb1__phi_decision_xor45_or_valid_out_1 = (rstag_6to6_bb1__phi_decision_xor45_or_combined_valid & ~(rstag_6to6_bb1__phi_decision_xor45_or_consumed_1_NO_SHIFT_REG));
assign local_bb1__phi_decision_xor45_or_stall_in = (|rstag_6to6_bb1__phi_decision_xor45_or_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_6to6_bb1__phi_decision_xor45_or_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_6to6_bb1__phi_decision_xor45_or_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_6to6_bb1__phi_decision_xor45_or_stall_local)
		begin
			if (~(rstag_6to6_bb1__phi_decision_xor45_or_staging_valid_NO_SHIFT_REG))
			begin
				rstag_6to6_bb1__phi_decision_xor45_or_staging_valid_NO_SHIFT_REG <= rstag_6to6_bb1__phi_decision_xor45_or_inputs_ready;
			end
		end
		else
		begin
			rstag_6to6_bb1__phi_decision_xor45_or_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_6to6_bb1__phi_decision_xor45_or_staging_valid_NO_SHIFT_REG))
		begin
			rstag_6to6_bb1__phi_decision_xor45_or_staging_reg_NO_SHIFT_REG <= local_bb1__phi_decision_xor45_or;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_6to6_bb1__phi_decision_xor45_or_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_6to6_bb1__phi_decision_xor45_or_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_6to6_bb1__phi_decision_xor45_or_consumed_0_NO_SHIFT_REG <= (rstag_6to6_bb1__phi_decision_xor45_or_combined_valid & (rstag_6to6_bb1__phi_decision_xor45_or_consumed_0_NO_SHIFT_REG | ~(rstag_6to6_bb1__phi_decision_xor45_or_stall_in_0)) & rstag_6to6_bb1__phi_decision_xor45_or_stall_local);
		rstag_6to6_bb1__phi_decision_xor45_or_consumed_1_NO_SHIFT_REG <= (rstag_6to6_bb1__phi_decision_xor45_or_combined_valid & (rstag_6to6_bb1__phi_decision_xor45_or_consumed_1_NO_SHIFT_REG | ~(rstag_6to6_bb1__phi_decision_xor45_or_stall_in_1)) & rstag_6to6_bb1__phi_decision_xor45_or_stall_local);
	end
end


// Register node:
//  * latency = 3
//  * capacity = 3
 logic rnode_6to9_bb1__phi_decision_xor45_or_0_valid_out_NO_SHIFT_REG;
 logic rnode_6to9_bb1__phi_decision_xor45_or_0_stall_in_NO_SHIFT_REG;
 logic rnode_6to9_bb1__phi_decision_xor45_or_0_NO_SHIFT_REG;
 logic rnode_6to9_bb1__phi_decision_xor45_or_0_reg_9_inputs_ready_NO_SHIFT_REG;
 logic rnode_6to9_bb1__phi_decision_xor45_or_0_reg_9_NO_SHIFT_REG;
 logic rnode_6to9_bb1__phi_decision_xor45_or_0_valid_out_reg_9_NO_SHIFT_REG;
 logic rnode_6to9_bb1__phi_decision_xor45_or_0_stall_in_reg_9_NO_SHIFT_REG;
 logic rnode_6to9_bb1__phi_decision_xor45_or_0_stall_out_reg_9_NO_SHIFT_REG;

acl_data_fifo rnode_6to9_bb1__phi_decision_xor45_or_0_reg_9_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_6to9_bb1__phi_decision_xor45_or_0_reg_9_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_6to9_bb1__phi_decision_xor45_or_0_stall_in_reg_9_NO_SHIFT_REG),
	.valid_out(rnode_6to9_bb1__phi_decision_xor45_or_0_valid_out_reg_9_NO_SHIFT_REG),
	.stall_out(rnode_6to9_bb1__phi_decision_xor45_or_0_stall_out_reg_9_NO_SHIFT_REG),
	.data_in(rstag_6to6_bb1__phi_decision_xor45_or),
	.data_out(rnode_6to9_bb1__phi_decision_xor45_or_0_reg_9_NO_SHIFT_REG)
);

defparam rnode_6to9_bb1__phi_decision_xor45_or_0_reg_9_fifo.DEPTH = 4;
defparam rnode_6to9_bb1__phi_decision_xor45_or_0_reg_9_fifo.DATA_WIDTH = 1;
defparam rnode_6to9_bb1__phi_decision_xor45_or_0_reg_9_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_6to9_bb1__phi_decision_xor45_or_0_reg_9_fifo.IMPL = "ll_reg";

assign rnode_6to9_bb1__phi_decision_xor45_or_0_reg_9_inputs_ready_NO_SHIFT_REG = rstag_6to6_bb1__phi_decision_xor45_or_valid_out_0;
assign rstag_6to6_bb1__phi_decision_xor45_or_stall_in_0 = rnode_6to9_bb1__phi_decision_xor45_or_0_stall_out_reg_9_NO_SHIFT_REG;
assign rnode_6to9_bb1__phi_decision_xor45_or_0_NO_SHIFT_REG = rnode_6to9_bb1__phi_decision_xor45_or_0_reg_9_NO_SHIFT_REG;
assign rnode_6to9_bb1__phi_decision_xor45_or_0_stall_in_reg_9_NO_SHIFT_REG = rnode_6to9_bb1__phi_decision_xor45_or_0_stall_in_NO_SHIFT_REG;
assign rnode_6to9_bb1__phi_decision_xor45_or_0_valid_out_NO_SHIFT_REG = rnode_6to9_bb1__phi_decision_xor45_or_0_valid_out_reg_9_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb1_ld__u0_inputs_ready;
 reg local_bb1_ld__u0_valid_out_NO_SHIFT_REG;
wire local_bb1_ld__u0_stall_in;
wire local_bb1_ld__u0_output_regs_ready;
wire local_bb1_ld__u0_fu_stall_out;
wire local_bb1_ld__u0_fu_valid_out;
wire [31:0] local_bb1_ld__u0_lsu_dataout;
 reg [31:0] local_bb1_ld__u0_NO_SHIFT_REG;
wire local_bb1_ld__u0_causedstall;

lsu_top lsu_local_bb1_ld__u0 (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb1_ld__u0_fu_stall_out),
	.i_valid(local_bb1_ld__u0_inputs_ready),
	.i_address(((input_wii_pad & 64'hFFFFFFFFFFFFFC0C) | 64'hC)),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(rstag_6to6_bb1__phi_decision_xor45_or),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb1_ld__u0_output_regs_ready)),
	.o_valid(local_bb1_ld__u0_fu_valid_out),
	.o_readdata(local_bb1_ld__u0_lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb1_ld__u0_active),
	.avm_address(avm_local_bb1_ld__u0_address),
	.avm_read(avm_local_bb1_ld__u0_read),
	.avm_enable(avm_local_bb1_ld__u0_enable),
	.avm_readdata(avm_local_bb1_ld__u0_readdata),
	.avm_write(avm_local_bb1_ld__u0_write),
	.avm_writeack(avm_local_bb1_ld__u0_writeack),
	.avm_burstcount(avm_local_bb1_ld__u0_burstcount),
	.avm_writedata(avm_local_bb1_ld__u0_writedata),
	.avm_byteenable(avm_local_bb1_ld__u0_byteenable),
	.avm_waitrequest(avm_local_bb1_ld__u0_waitrequest),
	.avm_readdatavalid(avm_local_bb1_ld__u0_readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb1_ld__u0.AWIDTH = 32;
defparam lsu_local_bb1_ld__u0.WIDTH_BYTES = 4;
defparam lsu_local_bb1_ld__u0.MWIDTH_BYTES = 64;
defparam lsu_local_bb1_ld__u0.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb1_ld__u0.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb1_ld__u0.READ = 1;
defparam lsu_local_bb1_ld__u0.ATOMIC = 0;
defparam lsu_local_bb1_ld__u0.WIDTH = 32;
defparam lsu_local_bb1_ld__u0.MWIDTH = 512;
defparam lsu_local_bb1_ld__u0.ATOMIC_WIDTH = 3;
defparam lsu_local_bb1_ld__u0.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb1_ld__u0.KERNEL_SIDE_MEM_LATENCY = 3;
defparam lsu_local_bb1_ld__u0.MEMORY_SIDE_MEM_LATENCY = 68;
defparam lsu_local_bb1_ld__u0.USE_WRITE_ACK = 0;
defparam lsu_local_bb1_ld__u0.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb1_ld__u0.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb1_ld__u0.NUMBER_BANKS = 1;
defparam lsu_local_bb1_ld__u0.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb1_ld__u0.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb1_ld__u0.USEINPUTFIFO = 0;
defparam lsu_local_bb1_ld__u0.USECACHING = 1;
defparam lsu_local_bb1_ld__u0.CACHESIZE = 128;
defparam lsu_local_bb1_ld__u0.USEOUTPUTFIFO = 1;
defparam lsu_local_bb1_ld__u0.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb1_ld__u0.ADDRSPACE = 1;
defparam lsu_local_bb1_ld__u0.STYLE = "SEMI-STREAMING";

assign local_bb1_ld__u0_inputs_ready = (rnode_1to6_pad_0_valid_out_NO_SHIFT_REG & rstag_6to6_bb1__phi_decision_xor45_or_valid_out_1);
assign local_bb1_ld__u0_output_regs_ready = (&(~(local_bb1_ld__u0_valid_out_NO_SHIFT_REG) | ~(local_bb1_ld__u0_stall_in)));
assign rnode_1to6_pad_0_stall_in_NO_SHIFT_REG = (local_bb1_ld__u0_fu_stall_out | ~(local_bb1_ld__u0_inputs_ready));
assign rstag_6to6_bb1__phi_decision_xor45_or_stall_in_1 = (local_bb1_ld__u0_fu_stall_out | ~(local_bb1_ld__u0_inputs_ready));
assign local_bb1_ld__u0_causedstall = (local_bb1_ld__u0_inputs_ready && (local_bb1_ld__u0_fu_stall_out && !(~(local_bb1_ld__u0_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb1_ld__u0_NO_SHIFT_REG <= 'x;
		local_bb1_ld__u0_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb1_ld__u0_output_regs_ready)
		begin
			local_bb1_ld__u0_NO_SHIFT_REG <= local_bb1_ld__u0_lsu_dataout;
			local_bb1_ld__u0_valid_out_NO_SHIFT_REG <= local_bb1_ld__u0_fu_valid_out;
		end
		else
		begin
			if (~(local_bb1_ld__u0_stall_in))
			begin
				local_bb1_ld__u0_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 0
//  * capacity = 1
 logic rnode_9to9_bb1_ld__u0_0_valid_out_NO_SHIFT_REG;
 logic rnode_9to9_bb1_ld__u0_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_9to9_bb1_ld__u0_0_NO_SHIFT_REG;
 logic rnode_9to9_bb1_ld__u0_0_reg_9_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_9to9_bb1_ld__u0_0_reg_9_NO_SHIFT_REG;
 logic rnode_9to9_bb1_ld__u0_0_valid_out_reg_9_NO_SHIFT_REG;
 logic rnode_9to9_bb1_ld__u0_0_stall_in_reg_9_NO_SHIFT_REG;
 logic rnode_9to9_bb1_ld__u0_0_stall_out_reg_9_NO_SHIFT_REG;

acl_data_fifo rnode_9to9_bb1_ld__u0_0_reg_9_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_9to9_bb1_ld__u0_0_reg_9_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_9to9_bb1_ld__u0_0_stall_in_reg_9_NO_SHIFT_REG),
	.valid_out(rnode_9to9_bb1_ld__u0_0_valid_out_reg_9_NO_SHIFT_REG),
	.stall_out(rnode_9to9_bb1_ld__u0_0_stall_out_reg_9_NO_SHIFT_REG),
	.data_in(local_bb1_ld__u0_NO_SHIFT_REG),
	.data_out(rnode_9to9_bb1_ld__u0_0_reg_9_NO_SHIFT_REG)
);

defparam rnode_9to9_bb1_ld__u0_0_reg_9_fifo.DEPTH = 2;
defparam rnode_9to9_bb1_ld__u0_0_reg_9_fifo.DATA_WIDTH = 32;
defparam rnode_9to9_bb1_ld__u0_0_reg_9_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_9to9_bb1_ld__u0_0_reg_9_fifo.IMPL = "zl_reg";

assign rnode_9to9_bb1_ld__u0_0_reg_9_inputs_ready_NO_SHIFT_REG = local_bb1_ld__u0_valid_out_NO_SHIFT_REG;
assign local_bb1_ld__u0_stall_in = rnode_9to9_bb1_ld__u0_0_stall_out_reg_9_NO_SHIFT_REG;
assign rnode_9to9_bb1_ld__u0_0_NO_SHIFT_REG = rnode_9to9_bb1_ld__u0_0_reg_9_NO_SHIFT_REG;
assign rnode_9to9_bb1_ld__u0_0_stall_in_reg_9_NO_SHIFT_REG = rnode_9to9_bb1_ld__u0_0_stall_in_NO_SHIFT_REG;
assign rnode_9to9_bb1_ld__u0_0_valid_out_NO_SHIFT_REG = rnode_9to9_bb1_ld__u0_0_valid_out_reg_9_NO_SHIFT_REG;

// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg lvb_bb1__phi_decision_xor_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb1_ld__reg_NO_SHIFT_REG;
 reg lvb_bb1_cmp1116_NEG_reg_NO_SHIFT_REG;
 reg lvb_bb1__phi_decision_xor45_or_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb1_ld__u0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (rnode_6to9_bb1__phi_decision_xor45_or_0_valid_out_NO_SHIFT_REG & rnode_9to9_bb1_ld__u0_0_valid_out_NO_SHIFT_REG & rcnode_5to9_rc1_bb1_ld__0_valid_out_NO_SHIFT_REG & rcnode_1to9_rc5_input_global_id_0_0_valid_out_NO_SHIFT_REG & rcnode_6to9_rc1_bb1_cmp1116_NEG_0_valid_out_NO_SHIFT_REG);
assign branch_var__output_regs_ready = (~(stall_in) | ~(branch_node_valid_out_NO_SHIFT_REG));
assign rnode_6to9_bb1__phi_decision_xor45_or_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_9to9_bb1_ld__u0_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_5to9_rc1_bb1_ld__0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_1to9_rc5_input_global_id_0_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_6to9_rc1_bb1_cmp1116_NEG_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_bb1__phi_decision_xor = lvb_bb1__phi_decision_xor_reg_NO_SHIFT_REG;
assign lvb_bb1_ld_ = lvb_bb1_ld__reg_NO_SHIFT_REG;
assign lvb_bb1_cmp1116_NEG = lvb_bb1_cmp1116_NEG_reg_NO_SHIFT_REG;
assign lvb_bb1__phi_decision_xor45_or = lvb_bb1__phi_decision_xor45_or_reg_NO_SHIFT_REG;
assign lvb_bb1_ld__u0 = lvb_bb1_ld__u0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0 = lvb_input_global_id_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1 = lvb_input_global_id_1_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2 = lvb_input_global_id_2_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id = lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;
assign combined_branch_stall_in_signal = stall_in;
assign valid_out = branch_node_valid_out_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
		lvb_bb1__phi_decision_xor_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_ld__reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_cmp1116_NEG_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1__phi_decision_xor45_or_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_ld__u0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_bb1__phi_decision_xor_reg_NO_SHIFT_REG <= rcnode_6to9_rc1_bb1_cmp1116_NEG_0_NO_SHIFT_REG[1];
			lvb_bb1_ld__reg_NO_SHIFT_REG <= rcnode_5to9_rc1_bb1_ld__0_NO_SHIFT_REG[31:0];
			lvb_bb1_cmp1116_NEG_reg_NO_SHIFT_REG <= rcnode_6to9_rc1_bb1_cmp1116_NEG_0_NO_SHIFT_REG[0];
			lvb_bb1__phi_decision_xor45_or_reg_NO_SHIFT_REG <= rnode_6to9_bb1__phi_decision_xor45_or_0_NO_SHIFT_REG;
			lvb_bb1_ld__u0_reg_NO_SHIFT_REG <= rnode_9to9_bb1_ld__u0_0_NO_SHIFT_REG;
			lvb_input_global_id_0_reg_NO_SHIFT_REG <= rcnode_1to9_rc5_input_global_id_0_0_NO_SHIFT_REG[31:0];
			lvb_input_global_id_1_reg_NO_SHIFT_REG <= rcnode_1to9_rc5_input_global_id_0_0_NO_SHIFT_REG[63:32];
			lvb_input_global_id_2_reg_NO_SHIFT_REG <= rcnode_5to9_rc1_bb1_ld__0_NO_SHIFT_REG[63:32];
			lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= rcnode_1to9_rc5_input_global_id_0_0_NO_SHIFT_REG[95:64];
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module paddingLayer_basic_block_2
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_0,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_1,
		input [63:0] 		input_wii_memcoalesce_param_bitcast_059,
		input 		valid_in_0,
		output 		stall_out_0,
		input 		input__phi_decision_xor_0,
		input [31:0] 		input_ld__0,
		input 		input_cmp1116_NEG_0,
		input 		input__phi_decision_xor45_or_0,
		input [31:0] 		input_ld__u1_0,
		input [31:0] 		input_channelCounter_024_0,
		input [31:0] 		input_global_id_0_0,
		input [31:0] 		input_global_id_1_0,
		input [31:0] 		input_global_id_2_0,
		input [31:0] 		input_acl_hw_wg_id_0,
		input 		valid_in_1,
		output 		stall_out_1,
		input 		input__phi_decision_xor_1,
		input [31:0] 		input_ld__1,
		input 		input_cmp1116_NEG_1,
		input 		input__phi_decision_xor45_or_1,
		input [31:0] 		input_ld__u1_1,
		input [31:0] 		input_channelCounter_024_1,
		input [31:0] 		input_global_id_0_1,
		input [31:0] 		input_global_id_1_1,
		input [31:0] 		input_global_id_2_1,
		input [31:0] 		input_acl_hw_wg_id_1,
		output 		valid_out,
		input 		stall_in,
		output 		lvb__phi_decision_xor,
		output [31:0] 		lvb_ld_,
		output 		lvb_cmp1116_NEG,
		output 		lvb__phi_decision_xor45_or,
		output [31:0] 		lvb_ld__u1,
		output [31:0] 		lvb_channelCounter_024,
		output [31:0] 		lvb_bb2_mul41,
		output [31:0] 		lvb_input_global_id_0,
		output [31:0] 		lvb_input_global_id_1,
		output [31:0] 		lvb_input_global_id_2,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		input 		start
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((valid_in_0 & valid_in_1) & ~((stall_out_0 | stall_out_1)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__0_staging_reg_NO_SHIFT_REG;
 reg input_cmp1116_NEG_0_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor45_or_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__u1_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_024_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
 reg local_lvm__phi_decision_xor_NO_SHIFT_REG;
 reg [31:0] local_lvm_ld__NO_SHIFT_REG;
 reg local_lvm_cmp1116_NEG_NO_SHIFT_REG;
 reg local_lvm__phi_decision_xor45_or_NO_SHIFT_REG;
 reg [31:0] local_lvm_ld__u1_NO_SHIFT_REG;
 reg [31:0] local_lvm_channelCounter_024_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_0_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__1_staging_reg_NO_SHIFT_REG;
 reg input_cmp1116_NEG_1_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor45_or_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__u1_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_024_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG));
assign stall_out_0 = merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
assign stall_out_1 = merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_0_staging_reg_NO_SHIFT_REG | valid_in_0))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		if ((merge_node_valid_in_1_staging_reg_NO_SHIFT_REG | valid_in_1))
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b1;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
		end
		else
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b0;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input__phi_decision_xor_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__0_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1116_NEG_0_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor45_or_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__u1_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_024_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_0_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		input__phi_decision_xor_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__1_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1116_NEG_1_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor45_or_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__u1_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_024_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_0_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_0_staging_reg_NO_SHIFT_REG))
			begin
				input__phi_decision_xor_0_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor_0;
				input_ld__0_staging_reg_NO_SHIFT_REG <= input_ld__0;
				input_cmp1116_NEG_0_staging_reg_NO_SHIFT_REG <= input_cmp1116_NEG_0;
				input__phi_decision_xor45_or_0_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor45_or_0;
				input_ld__u1_0_staging_reg_NO_SHIFT_REG <= input_ld__u1_0;
				input_channelCounter_024_0_staging_reg_NO_SHIFT_REG <= input_channelCounter_024_0;
				input_global_id_0_0_staging_reg_NO_SHIFT_REG <= input_global_id_0_0;
				input_global_id_1_0_staging_reg_NO_SHIFT_REG <= input_global_id_1_0;
				input_global_id_2_0_staging_reg_NO_SHIFT_REG <= input_global_id_2_0;
				input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= valid_in_0;
			end
		end
		else
		begin
			merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
		if (((merge_block_selector_NO_SHIFT_REG != 1'b1) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_1_staging_reg_NO_SHIFT_REG))
			begin
				input__phi_decision_xor_1_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor_1;
				input_ld__1_staging_reg_NO_SHIFT_REG <= input_ld__1;
				input_cmp1116_NEG_1_staging_reg_NO_SHIFT_REG <= input_cmp1116_NEG_1;
				input__phi_decision_xor45_or_1_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor45_or_1;
				input_ld__u1_1_staging_reg_NO_SHIFT_REG <= input_ld__u1_1;
				input_channelCounter_024_1_staging_reg_NO_SHIFT_REG <= input_channelCounter_024_1;
				input_global_id_0_1_staging_reg_NO_SHIFT_REG <= input_global_id_0_1;
				input_global_id_1_1_staging_reg_NO_SHIFT_REG <= input_global_id_1_1;
				input_global_id_2_1_staging_reg_NO_SHIFT_REG <= input_global_id_2_1;
				input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= valid_in_1;
			end
		end
		else
		begin
			merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_0_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm__phi_decision_xor_NO_SHIFT_REG <= input__phi_decision_xor_0_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__0_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1116_NEG_NO_SHIFT_REG <= input_cmp1116_NEG_0_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor45_or_NO_SHIFT_REG <= input__phi_decision_xor45_or_0_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__u1_NO_SHIFT_REG <= input_ld__u1_0_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_024_NO_SHIFT_REG <= input_channelCounter_024_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm__phi_decision_xor_NO_SHIFT_REG <= input__phi_decision_xor_0;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__0;
					local_lvm_cmp1116_NEG_NO_SHIFT_REG <= input_cmp1116_NEG_0;
					local_lvm__phi_decision_xor45_or_NO_SHIFT_REG <= input__phi_decision_xor45_or_0;
					local_lvm_ld__u1_NO_SHIFT_REG <= input_ld__u1_0;
					local_lvm_channelCounter_024_NO_SHIFT_REG <= input_channelCounter_024_0;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_0;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_0;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				end
			end

			1'b1:
			begin
				if (merge_node_valid_in_1_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm__phi_decision_xor_NO_SHIFT_REG <= input__phi_decision_xor_1_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__1_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1116_NEG_NO_SHIFT_REG <= input_cmp1116_NEG_1_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor45_or_NO_SHIFT_REG <= input__phi_decision_xor45_or_1_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__u1_NO_SHIFT_REG <= input_ld__u1_1_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_024_NO_SHIFT_REG <= input_channelCounter_024_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm__phi_decision_xor_NO_SHIFT_REG <= input__phi_decision_xor_1;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__1;
					local_lvm_cmp1116_NEG_NO_SHIFT_REG <= input_cmp1116_NEG_1;
					local_lvm__phi_decision_xor45_or_NO_SHIFT_REG <= input__phi_decision_xor45_or_1;
					local_lvm_ld__u1_NO_SHIFT_REG <= input_ld__u1_1;
					local_lvm_channelCounter_024_NO_SHIFT_REG <= input_channelCounter_024_1;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_1;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_1;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements a registered operation.
// 
wire local_bb2_mul41_inputs_ready;
 reg local_bb2_mul41_valid_out_NO_SHIFT_REG;
wire local_bb2_mul41_stall_in;
wire local_bb2_mul41_output_regs_ready;
wire [31:0] local_bb2_mul41;
 reg local_bb2_mul41_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb2_mul41_valid_pipe_1_NO_SHIFT_REG;
wire local_bb2_mul41_causedstall;
wire [226:0] rci_rcnode_1to4_rc1__phi_decision_xor_0_reg_1;

acl_int_mult int_module_local_bb2_mul41 (
	.clock(clock),
	.dataa(input_wii_memcoalesce_param_extrValue_1),
	.datab(local_lvm_channelCounter_024_NO_SHIFT_REG),
	.enable(local_bb2_mul41_output_regs_ready),
	.result(local_bb2_mul41)
);

defparam int_module_local_bb2_mul41.INPUT1_WIDTH = 32;
defparam int_module_local_bb2_mul41.INPUT2_WIDTH = 32;
defparam int_module_local_bb2_mul41.OUTPUT_WIDTH = 32;
defparam int_module_local_bb2_mul41.LATENCY = 3;
defparam int_module_local_bb2_mul41.SIGNED = 0;

assign local_bb2_mul41_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb2_mul41_output_regs_ready = (&(~(local_bb2_mul41_valid_out_NO_SHIFT_REG) | ~(local_bb2_mul41_stall_in)));
assign merge_node_stall_in_0 = (~(local_bb2_mul41_output_regs_ready) | ~(local_bb2_mul41_inputs_ready));
assign local_bb2_mul41_causedstall = (local_bb2_mul41_inputs_ready && (~(local_bb2_mul41_output_regs_ready) && !(~(local_bb2_mul41_output_regs_ready))));
assign rci_rcnode_1to4_rc1__phi_decision_xor_0_reg_1[0] = local_lvm__phi_decision_xor_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1__phi_decision_xor_0_reg_1[32:1] = local_lvm_ld__NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1__phi_decision_xor_0_reg_1[33] = local_lvm_cmp1116_NEG_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1__phi_decision_xor_0_reg_1[34] = local_lvm__phi_decision_xor45_or_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1__phi_decision_xor_0_reg_1[66:35] = local_lvm_ld__u1_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1__phi_decision_xor_0_reg_1[98:67] = local_lvm_channelCounter_024_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1__phi_decision_xor_0_reg_1[130:99] = local_lvm_input_global_id_0_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1__phi_decision_xor_0_reg_1[162:131] = local_lvm_input_global_id_1_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1__phi_decision_xor_0_reg_1[194:163] = local_lvm_input_global_id_2_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1__phi_decision_xor_0_reg_1[226:195] = local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_mul41_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_mul41_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_mul41_output_regs_ready)
		begin
			local_bb2_mul41_valid_pipe_0_NO_SHIFT_REG <= local_bb2_mul41_inputs_ready;
			local_bb2_mul41_valid_pipe_1_NO_SHIFT_REG <= local_bb2_mul41_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_mul41_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_mul41_output_regs_ready)
		begin
			local_bb2_mul41_valid_out_NO_SHIFT_REG <= local_bb2_mul41_valid_pipe_1_NO_SHIFT_REG;
		end
		else
		begin
			if (~(local_bb2_mul41_stall_in))
			begin
				local_bb2_mul41_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 3
//  * capacity = 3
 logic rcnode_1to4_rc1__phi_decision_xor_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to4_rc1__phi_decision_xor_0_stall_in_NO_SHIFT_REG;
 logic [226:0] rcnode_1to4_rc1__phi_decision_xor_0_NO_SHIFT_REG;
 logic rcnode_1to4_rc1__phi_decision_xor_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [226:0] rcnode_1to4_rc1__phi_decision_xor_0_reg_4_NO_SHIFT_REG;
 logic rcnode_1to4_rc1__phi_decision_xor_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rcnode_1to4_rc1__phi_decision_xor_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rcnode_1to4_rc1__phi_decision_xor_0_stall_out_reg_4_IP_NO_SHIFT_REG;
 logic rcnode_1to4_rc1__phi_decision_xor_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rcnode_1to4_rc1__phi_decision_xor_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to4_rc1__phi_decision_xor_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to4_rc1__phi_decision_xor_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rcnode_1to4_rc1__phi_decision_xor_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rcnode_1to4_rc1__phi_decision_xor_0_stall_out_reg_4_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to4_rc1__phi_decision_xor_0_reg_1),
	.data_out(rcnode_1to4_rc1__phi_decision_xor_0_reg_4_NO_SHIFT_REG)
);

defparam rcnode_1to4_rc1__phi_decision_xor_0_reg_4_fifo.DEPTH = 4;
defparam rcnode_1to4_rc1__phi_decision_xor_0_reg_4_fifo.DATA_WIDTH = 227;
defparam rcnode_1to4_rc1__phi_decision_xor_0_reg_4_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to4_rc1__phi_decision_xor_0_reg_4_fifo.IMPL = "ll_reg";

assign rcnode_1to4_rc1__phi_decision_xor_0_reg_4_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_1_NO_SHIFT_REG;
assign rcnode_1to4_rc1__phi_decision_xor_0_stall_out_reg_4_NO_SHIFT_REG = (~(rcnode_1to4_rc1__phi_decision_xor_0_reg_4_inputs_ready_NO_SHIFT_REG) | rcnode_1to4_rc1__phi_decision_xor_0_stall_out_reg_4_IP_NO_SHIFT_REG);
assign merge_node_stall_in_1 = rcnode_1to4_rc1__phi_decision_xor_0_stall_out_reg_4_NO_SHIFT_REG;
assign rcnode_1to4_rc1__phi_decision_xor_0_NO_SHIFT_REG = rcnode_1to4_rc1__phi_decision_xor_0_reg_4_NO_SHIFT_REG;
assign rcnode_1to4_rc1__phi_decision_xor_0_stall_in_reg_4_NO_SHIFT_REG = rcnode_1to4_rc1__phi_decision_xor_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to4_rc1__phi_decision_xor_0_valid_out_NO_SHIFT_REG = rcnode_1to4_rc1__phi_decision_xor_0_valid_out_reg_4_NO_SHIFT_REG;

// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_4to4_bb2_mul41_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to4_bb2_mul41_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to4_bb2_mul41_0_NO_SHIFT_REG;
 logic rnode_4to4_bb2_mul41_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to4_bb2_mul41_0_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb2_mul41_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb2_mul41_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb2_mul41_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_4to4_bb2_mul41_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to4_bb2_mul41_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to4_bb2_mul41_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_4to4_bb2_mul41_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_4to4_bb2_mul41_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb2_mul41),
	.data_out(rnode_4to4_bb2_mul41_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_4to4_bb2_mul41_0_reg_4_fifo.DEPTH = 3;
defparam rnode_4to4_bb2_mul41_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_4to4_bb2_mul41_0_reg_4_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_4to4_bb2_mul41_0_reg_4_fifo.IMPL = "zl_reg";

assign rnode_4to4_bb2_mul41_0_reg_4_inputs_ready_NO_SHIFT_REG = local_bb2_mul41_valid_out_NO_SHIFT_REG;
assign local_bb2_mul41_stall_in = rnode_4to4_bb2_mul41_0_stall_out_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb2_mul41_0_NO_SHIFT_REG = rnode_4to4_bb2_mul41_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb2_mul41_0_stall_in_reg_4_NO_SHIFT_REG = rnode_4to4_bb2_mul41_0_stall_in_NO_SHIFT_REG;
assign rnode_4to4_bb2_mul41_0_valid_out_NO_SHIFT_REG = rnode_4to4_bb2_mul41_0_valid_out_reg_4_NO_SHIFT_REG;

// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg lvb__phi_decision_xor_reg_NO_SHIFT_REG;
 reg [31:0] lvb_ld__reg_NO_SHIFT_REG;
 reg lvb_cmp1116_NEG_reg_NO_SHIFT_REG;
 reg lvb__phi_decision_xor45_or_reg_NO_SHIFT_REG;
 reg [31:0] lvb_ld__u1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_channelCounter_024_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb2_mul41_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (rnode_4to4_bb2_mul41_0_valid_out_NO_SHIFT_REG & rcnode_1to4_rc1__phi_decision_xor_0_valid_out_NO_SHIFT_REG);
assign branch_var__output_regs_ready = (~(stall_in) | ~(branch_node_valid_out_NO_SHIFT_REG));
assign rnode_4to4_bb2_mul41_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_1to4_rc1__phi_decision_xor_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb__phi_decision_xor = lvb__phi_decision_xor_reg_NO_SHIFT_REG;
assign lvb_ld_ = lvb_ld__reg_NO_SHIFT_REG;
assign lvb_cmp1116_NEG = lvb_cmp1116_NEG_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor45_or = lvb__phi_decision_xor45_or_reg_NO_SHIFT_REG;
assign lvb_ld__u1 = lvb_ld__u1_reg_NO_SHIFT_REG;
assign lvb_channelCounter_024 = lvb_channelCounter_024_reg_NO_SHIFT_REG;
assign lvb_bb2_mul41 = lvb_bb2_mul41_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0 = lvb_input_global_id_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1 = lvb_input_global_id_1_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2 = lvb_input_global_id_2_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id = lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;
assign combined_branch_stall_in_signal = stall_in;
assign valid_out = branch_node_valid_out_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
		lvb__phi_decision_xor_reg_NO_SHIFT_REG <= 'x;
		lvb_ld__reg_NO_SHIFT_REG <= 'x;
		lvb_cmp1116_NEG_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision_xor45_or_reg_NO_SHIFT_REG <= 'x;
		lvb_ld__u1_reg_NO_SHIFT_REG <= 'x;
		lvb_channelCounter_024_reg_NO_SHIFT_REG <= 'x;
		lvb_bb2_mul41_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb__phi_decision_xor_reg_NO_SHIFT_REG <= rcnode_1to4_rc1__phi_decision_xor_0_NO_SHIFT_REG[0];
			lvb_ld__reg_NO_SHIFT_REG <= rcnode_1to4_rc1__phi_decision_xor_0_NO_SHIFT_REG[32:1];
			lvb_cmp1116_NEG_reg_NO_SHIFT_REG <= rcnode_1to4_rc1__phi_decision_xor_0_NO_SHIFT_REG[33];
			lvb__phi_decision_xor45_or_reg_NO_SHIFT_REG <= rcnode_1to4_rc1__phi_decision_xor_0_NO_SHIFT_REG[34];
			lvb_ld__u1_reg_NO_SHIFT_REG <= rcnode_1to4_rc1__phi_decision_xor_0_NO_SHIFT_REG[66:35];
			lvb_channelCounter_024_reg_NO_SHIFT_REG <= rcnode_1to4_rc1__phi_decision_xor_0_NO_SHIFT_REG[98:67];
			lvb_bb2_mul41_reg_NO_SHIFT_REG <= rnode_4to4_bb2_mul41_0_NO_SHIFT_REG;
			lvb_input_global_id_0_reg_NO_SHIFT_REG <= rcnode_1to4_rc1__phi_decision_xor_0_NO_SHIFT_REG[130:99];
			lvb_input_global_id_1_reg_NO_SHIFT_REG <= rcnode_1to4_rc1__phi_decision_xor_0_NO_SHIFT_REG[162:131];
			lvb_input_global_id_2_reg_NO_SHIFT_REG <= rcnode_1to4_rc1__phi_decision_xor_0_NO_SHIFT_REG[194:163];
			lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= rcnode_1to4_rc1__phi_decision_xor_0_NO_SHIFT_REG[226:195];
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module paddingLayer_basic_block_3
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_0,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_1,
		input [63:0] 		input_wii_memcoalesce_param_bitcast_059,
		input 		valid_in_0,
		output 		stall_out_0,
		input 		input__phi_decision_xor_0,
		input [31:0] 		input_ld__0,
		input 		input_cmp1116_NEG_0,
		input 		input__phi_decision_xor45_or_0,
		input [31:0] 		input_ld__u2_0,
		input [31:0] 		input_channelCounter_024_0,
		input [31:0] 		input_mul41_0,
		input [31:0] 		input_heightCounter_120_0,
		input [31:0] 		input_global_id_0_0,
		input [31:0] 		input_global_id_1_0,
		input [31:0] 		input_global_id_2_0,
		input [31:0] 		input_acl_hw_wg_id_0,
		input 		valid_in_1,
		output 		stall_out_1,
		input 		input__phi_decision_xor_1,
		input [31:0] 		input_ld__1,
		input 		input_cmp1116_NEG_1,
		input 		input__phi_decision_xor45_or_1,
		input [31:0] 		input_ld__u2_1,
		input [31:0] 		input_channelCounter_024_1,
		input [31:0] 		input_mul41_1,
		input [31:0] 		input_heightCounter_120_1,
		input [31:0] 		input_global_id_0_1,
		input [31:0] 		input_global_id_1_1,
		input [31:0] 		input_global_id_2_1,
		input [31:0] 		input_acl_hw_wg_id_1,
		output 		valid_out,
		input 		stall_in,
		output 		lvb__phi_decision_xor,
		output [31:0] 		lvb_ld_,
		output 		lvb_cmp1116_NEG,
		output 		lvb__phi_decision_xor45_or,
		output [31:0] 		lvb_ld__u2,
		output [31:0] 		lvb_channelCounter_024,
		output [31:0] 		lvb_mul41,
		output [31:0] 		lvb_heightCounter_120,
		output 		lvb_bb3_cmp14,
		output [31:0] 		lvb_bb3_c0_exe1,
		output 		lvb_bb3_cmp29_not,
		output 		lvb_bb3_cmp29_not_not,
		output [31:0] 		lvb_input_global_id_0,
		output [31:0] 		lvb_input_global_id_1,
		output [31:0] 		lvb_input_global_id_2,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		input 		start
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((valid_in_0 & valid_in_1) & ~((stall_out_0 | stall_out_1)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_node_stall_in_4;
 reg merge_node_valid_out_4_NO_SHIFT_REG;
wire merge_node_stall_in_5;
 reg merge_node_valid_out_5_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__0_staging_reg_NO_SHIFT_REG;
 reg input_cmp1116_NEG_0_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor45_or_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__u2_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_024_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul41_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_heightCounter_120_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
 reg local_lvm__phi_decision_xor_NO_SHIFT_REG;
 reg [31:0] local_lvm_ld__NO_SHIFT_REG;
 reg local_lvm_cmp1116_NEG_NO_SHIFT_REG;
 reg local_lvm__phi_decision_xor45_or_NO_SHIFT_REG;
 reg [31:0] local_lvm_ld__u2_NO_SHIFT_REG;
 reg [31:0] local_lvm_channelCounter_024_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul41_NO_SHIFT_REG;
 reg [31:0] local_lvm_heightCounter_120_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_0_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__1_staging_reg_NO_SHIFT_REG;
 reg input_cmp1116_NEG_1_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor45_or_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__u2_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_024_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul41_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_heightCounter_120_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG) | (merge_node_stall_in_4 & merge_node_valid_out_4_NO_SHIFT_REG) | (merge_node_stall_in_5 & merge_node_valid_out_5_NO_SHIFT_REG));
assign stall_out_0 = merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
assign stall_out_1 = merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_0_staging_reg_NO_SHIFT_REG | valid_in_0))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		if ((merge_node_valid_in_1_staging_reg_NO_SHIFT_REG | valid_in_1))
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b1;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
		end
		else
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b0;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input__phi_decision_xor_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__0_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1116_NEG_0_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor45_or_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__u2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_024_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul41_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_heightCounter_120_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_0_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		input__phi_decision_xor_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__1_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1116_NEG_1_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor45_or_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__u2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_024_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul41_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_heightCounter_120_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_0_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_0_staging_reg_NO_SHIFT_REG))
			begin
				input__phi_decision_xor_0_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor_0;
				input_ld__0_staging_reg_NO_SHIFT_REG <= input_ld__0;
				input_cmp1116_NEG_0_staging_reg_NO_SHIFT_REG <= input_cmp1116_NEG_0;
				input__phi_decision_xor45_or_0_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor45_or_0;
				input_ld__u2_0_staging_reg_NO_SHIFT_REG <= input_ld__u2_0;
				input_channelCounter_024_0_staging_reg_NO_SHIFT_REG <= input_channelCounter_024_0;
				input_mul41_0_staging_reg_NO_SHIFT_REG <= input_mul41_0;
				input_heightCounter_120_0_staging_reg_NO_SHIFT_REG <= input_heightCounter_120_0;
				input_global_id_0_0_staging_reg_NO_SHIFT_REG <= input_global_id_0_0;
				input_global_id_1_0_staging_reg_NO_SHIFT_REG <= input_global_id_1_0;
				input_global_id_2_0_staging_reg_NO_SHIFT_REG <= input_global_id_2_0;
				input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= valid_in_0;
			end
		end
		else
		begin
			merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
		if (((merge_block_selector_NO_SHIFT_REG != 1'b1) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_1_staging_reg_NO_SHIFT_REG))
			begin
				input__phi_decision_xor_1_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor_1;
				input_ld__1_staging_reg_NO_SHIFT_REG <= input_ld__1;
				input_cmp1116_NEG_1_staging_reg_NO_SHIFT_REG <= input_cmp1116_NEG_1;
				input__phi_decision_xor45_or_1_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor45_or_1;
				input_ld__u2_1_staging_reg_NO_SHIFT_REG <= input_ld__u2_1;
				input_channelCounter_024_1_staging_reg_NO_SHIFT_REG <= input_channelCounter_024_1;
				input_mul41_1_staging_reg_NO_SHIFT_REG <= input_mul41_1;
				input_heightCounter_120_1_staging_reg_NO_SHIFT_REG <= input_heightCounter_120_1;
				input_global_id_0_1_staging_reg_NO_SHIFT_REG <= input_global_id_0_1;
				input_global_id_1_1_staging_reg_NO_SHIFT_REG <= input_global_id_1_1;
				input_global_id_2_1_staging_reg_NO_SHIFT_REG <= input_global_id_2_1;
				input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= valid_in_1;
			end
		end
		else
		begin
			merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_0_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm__phi_decision_xor_NO_SHIFT_REG <= input__phi_decision_xor_0_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__0_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1116_NEG_NO_SHIFT_REG <= input_cmp1116_NEG_0_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor45_or_NO_SHIFT_REG <= input__phi_decision_xor45_or_0_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__u2_NO_SHIFT_REG <= input_ld__u2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_024_NO_SHIFT_REG <= input_channelCounter_024_0_staging_reg_NO_SHIFT_REG;
					local_lvm_mul41_NO_SHIFT_REG <= input_mul41_0_staging_reg_NO_SHIFT_REG;
					local_lvm_heightCounter_120_NO_SHIFT_REG <= input_heightCounter_120_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm__phi_decision_xor_NO_SHIFT_REG <= input__phi_decision_xor_0;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__0;
					local_lvm_cmp1116_NEG_NO_SHIFT_REG <= input_cmp1116_NEG_0;
					local_lvm__phi_decision_xor45_or_NO_SHIFT_REG <= input__phi_decision_xor45_or_0;
					local_lvm_ld__u2_NO_SHIFT_REG <= input_ld__u2_0;
					local_lvm_channelCounter_024_NO_SHIFT_REG <= input_channelCounter_024_0;
					local_lvm_mul41_NO_SHIFT_REG <= input_mul41_0;
					local_lvm_heightCounter_120_NO_SHIFT_REG <= input_heightCounter_120_0;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_0;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_0;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				end
			end

			1'b1:
			begin
				if (merge_node_valid_in_1_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm__phi_decision_xor_NO_SHIFT_REG <= input__phi_decision_xor_1_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__1_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1116_NEG_NO_SHIFT_REG <= input_cmp1116_NEG_1_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor45_or_NO_SHIFT_REG <= input__phi_decision_xor45_or_1_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__u2_NO_SHIFT_REG <= input_ld__u2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_024_NO_SHIFT_REG <= input_channelCounter_024_1_staging_reg_NO_SHIFT_REG;
					local_lvm_mul41_NO_SHIFT_REG <= input_mul41_1_staging_reg_NO_SHIFT_REG;
					local_lvm_heightCounter_120_NO_SHIFT_REG <= input_heightCounter_120_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm__phi_decision_xor_NO_SHIFT_REG <= input__phi_decision_xor_1;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__1;
					local_lvm_cmp1116_NEG_NO_SHIFT_REG <= input_cmp1116_NEG_1;
					local_lvm__phi_decision_xor45_or_NO_SHIFT_REG <= input__phi_decision_xor45_or_1;
					local_lvm_ld__u2_NO_SHIFT_REG <= input_ld__u2_1;
					local_lvm_channelCounter_024_NO_SHIFT_REG <= input_channelCounter_024_1;
					local_lvm_mul41_NO_SHIFT_REG <= input_mul41_1;
					local_lvm_heightCounter_120_NO_SHIFT_REG <= input_heightCounter_120_1;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_1;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_1;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_5_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_4_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_5_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_4))
			begin
				merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_5))
			begin
				merge_node_valid_out_5_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(*)
begin
	merge_node_valid_out_1_NO_SHIFT_REG = merge_node_valid_out_0_NO_SHIFT_REG;
	merge_node_valid_out_2_NO_SHIFT_REG = merge_node_valid_out_0_NO_SHIFT_REG;
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb3_c0_eni1_stall_local;
wire [127:0] local_bb3_c0_eni1;

assign local_bb3_c0_eni1[31:0] = 32'bx;
assign local_bb3_c0_eni1[63:32] = local_lvm_mul41_NO_SHIFT_REG;
assign local_bb3_c0_eni1[127:64] = 64'bx;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_heightCounter_120_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_heightCounter_120_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_heightCounter_120_0_NO_SHIFT_REG;
 logic rnode_1to2_heightCounter_120_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_heightCounter_120_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_heightCounter_120_1_NO_SHIFT_REG;
 logic rnode_1to2_heightCounter_120_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_heightCounter_120_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_heightCounter_120_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_heightCounter_120_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_heightCounter_120_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_heightCounter_120_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_heightCounter_120_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_heightCounter_120_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_heightCounter_120_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_heightCounter_120_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_lvm_heightCounter_120_NO_SHIFT_REG),
	.data_out(rnode_1to2_heightCounter_120_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_heightCounter_120_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_heightCounter_120_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_heightCounter_120_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_heightCounter_120_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_heightCounter_120_0_reg_2_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_3_NO_SHIFT_REG;
assign merge_node_stall_in_3 = rnode_1to2_heightCounter_120_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_heightCounter_120_0_stall_in_0_reg_2_NO_SHIFT_REG = (rnode_1to2_heightCounter_120_0_stall_in_0_NO_SHIFT_REG | rnode_1to2_heightCounter_120_0_stall_in_1_NO_SHIFT_REG);
assign rnode_1to2_heightCounter_120_0_valid_out_0_NO_SHIFT_REG = rnode_1to2_heightCounter_120_0_valid_out_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_heightCounter_120_0_valid_out_1_NO_SHIFT_REG = rnode_1to2_heightCounter_120_0_valid_out_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_heightCounter_120_0_NO_SHIFT_REG = rnode_1to2_heightCounter_120_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_heightCounter_120_1_NO_SHIFT_REG = rnode_1to2_heightCounter_120_0_reg_2_NO_SHIFT_REG;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_1to3_ld__u2_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to3_ld__u2_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to3_ld__u2_0_NO_SHIFT_REG;
 logic rnode_1to3_ld__u2_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to3_ld__u2_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to3_ld__u2_1_NO_SHIFT_REG;
 logic rnode_1to3_ld__u2_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_1to3_ld__u2_0_stall_in_2_NO_SHIFT_REG;
 logic [31:0] rnode_1to3_ld__u2_2_NO_SHIFT_REG;
 logic rnode_1to3_ld__u2_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to3_ld__u2_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_ld__u2_0_valid_out_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_ld__u2_0_stall_in_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_ld__u2_0_stall_out_reg_3_NO_SHIFT_REG;
wire [226:0] rci_rcnode_1to4_rc5__phi_decision_xor_0_reg_1;

acl_data_fifo rnode_1to3_ld__u2_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to3_ld__u2_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to3_ld__u2_0_stall_in_0_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_1to3_ld__u2_0_valid_out_0_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_1to3_ld__u2_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_lvm_ld__u2_NO_SHIFT_REG),
	.data_out(rnode_1to3_ld__u2_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_1to3_ld__u2_0_reg_3_fifo.DEPTH = 3;
defparam rnode_1to3_ld__u2_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_1to3_ld__u2_0_reg_3_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to3_ld__u2_0_reg_3_fifo.IMPL = "ll_reg";

assign rnode_1to3_ld__u2_0_reg_3_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_4_NO_SHIFT_REG;
assign merge_node_stall_in_4 = rnode_1to3_ld__u2_0_stall_out_reg_3_NO_SHIFT_REG;
assign rnode_1to3_ld__u2_0_stall_in_0_reg_3_NO_SHIFT_REG = (rnode_1to3_ld__u2_0_stall_in_0_NO_SHIFT_REG | rnode_1to3_ld__u2_0_stall_in_1_NO_SHIFT_REG | rnode_1to3_ld__u2_0_stall_in_2_NO_SHIFT_REG);
assign rnode_1to3_ld__u2_0_valid_out_0_NO_SHIFT_REG = rnode_1to3_ld__u2_0_valid_out_0_reg_3_NO_SHIFT_REG;
assign rnode_1to3_ld__u2_0_valid_out_1_NO_SHIFT_REG = rnode_1to3_ld__u2_0_valid_out_0_reg_3_NO_SHIFT_REG;
assign rnode_1to3_ld__u2_0_valid_out_2_NO_SHIFT_REG = rnode_1to3_ld__u2_0_valid_out_0_reg_3_NO_SHIFT_REG;
assign rnode_1to3_ld__u2_0_NO_SHIFT_REG = rnode_1to3_ld__u2_0_reg_3_NO_SHIFT_REG;
assign rnode_1to3_ld__u2_1_NO_SHIFT_REG = rnode_1to3_ld__u2_0_reg_3_NO_SHIFT_REG;
assign rnode_1to3_ld__u2_2_NO_SHIFT_REG = rnode_1to3_ld__u2_0_reg_3_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc5__phi_decision_xor_0_reg_1[0] = local_lvm__phi_decision_xor_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc5__phi_decision_xor_0_reg_1[32:1] = local_lvm_ld__NO_SHIFT_REG;
assign rci_rcnode_1to4_rc5__phi_decision_xor_0_reg_1[33] = local_lvm_cmp1116_NEG_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc5__phi_decision_xor_0_reg_1[34] = local_lvm__phi_decision_xor45_or_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc5__phi_decision_xor_0_reg_1[66:35] = local_lvm_channelCounter_024_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc5__phi_decision_xor_0_reg_1[98:67] = local_lvm_mul41_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc5__phi_decision_xor_0_reg_1[130:99] = local_lvm_input_global_id_0_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc5__phi_decision_xor_0_reg_1[162:131] = local_lvm_input_global_id_1_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc5__phi_decision_xor_0_reg_1[194:163] = local_lvm_input_global_id_2_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc5__phi_decision_xor_0_reg_1[226:195] = local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;

// Register node:
//  * latency = 3
//  * capacity = 3
 logic rcnode_1to4_rc5__phi_decision_xor_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to4_rc5__phi_decision_xor_0_stall_in_NO_SHIFT_REG;
 logic [226:0] rcnode_1to4_rc5__phi_decision_xor_0_NO_SHIFT_REG;
 logic rcnode_1to4_rc5__phi_decision_xor_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [226:0] rcnode_1to4_rc5__phi_decision_xor_0_reg_4_NO_SHIFT_REG;
 logic rcnode_1to4_rc5__phi_decision_xor_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rcnode_1to4_rc5__phi_decision_xor_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rcnode_1to4_rc5__phi_decision_xor_0_stall_out_reg_4_IP_NO_SHIFT_REG;
 logic rcnode_1to4_rc5__phi_decision_xor_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rcnode_1to4_rc5__phi_decision_xor_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to4_rc5__phi_decision_xor_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to4_rc5__phi_decision_xor_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rcnode_1to4_rc5__phi_decision_xor_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rcnode_1to4_rc5__phi_decision_xor_0_stall_out_reg_4_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to4_rc5__phi_decision_xor_0_reg_1),
	.data_out(rcnode_1to4_rc5__phi_decision_xor_0_reg_4_NO_SHIFT_REG)
);

defparam rcnode_1to4_rc5__phi_decision_xor_0_reg_4_fifo.DEPTH = 4;
defparam rcnode_1to4_rc5__phi_decision_xor_0_reg_4_fifo.DATA_WIDTH = 227;
defparam rcnode_1to4_rc5__phi_decision_xor_0_reg_4_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to4_rc5__phi_decision_xor_0_reg_4_fifo.IMPL = "ll_reg";

assign rcnode_1to4_rc5__phi_decision_xor_0_reg_4_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_5_NO_SHIFT_REG;
assign rcnode_1to4_rc5__phi_decision_xor_0_stall_out_reg_4_NO_SHIFT_REG = (~(rcnode_1to4_rc5__phi_decision_xor_0_reg_4_inputs_ready_NO_SHIFT_REG) | rcnode_1to4_rc5__phi_decision_xor_0_stall_out_reg_4_IP_NO_SHIFT_REG);
assign merge_node_stall_in_5 = rcnode_1to4_rc5__phi_decision_xor_0_stall_out_reg_4_NO_SHIFT_REG;
assign rcnode_1to4_rc5__phi_decision_xor_0_NO_SHIFT_REG = rcnode_1to4_rc5__phi_decision_xor_0_reg_4_NO_SHIFT_REG;
assign rcnode_1to4_rc5__phi_decision_xor_0_stall_in_reg_4_NO_SHIFT_REG = rcnode_1to4_rc5__phi_decision_xor_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to4_rc5__phi_decision_xor_0_valid_out_NO_SHIFT_REG = rcnode_1to4_rc5__phi_decision_xor_0_valid_out_reg_4_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb3_c0_eni2_stall_local;
wire [127:0] local_bb3_c0_eni2;

assign local_bb3_c0_eni2[63:0] = local_bb3_c0_eni1[63:0];
assign local_bb3_c0_eni2[95:64] = local_lvm_heightCounter_120_NO_SHIFT_REG;
assign local_bb3_c0_eni2[127:96] = local_bb3_c0_eni1[127:96];

// This section implements an unregistered operation.
// 
wire local_bb3_sub26_stall_local;
wire [31:0] local_bb3_sub26;

assign local_bb3_sub26 = (rnode_1to2_heightCounter_120_0_NO_SHIFT_REG ^ 32'hFFFFFFFF);

// This section implements an unregistered operation.
// 
wire local_bb3_c0_eni3_valid_out;
wire local_bb3_c0_eni3_stall_in;
wire local_bb3_c0_eni3_inputs_ready;
wire local_bb3_c0_eni3_stall_local;
wire [127:0] local_bb3_c0_eni3;

assign local_bb3_c0_eni3_inputs_ready = (merge_node_valid_out_0_NO_SHIFT_REG & merge_node_valid_out_1_NO_SHIFT_REG & merge_node_valid_out_2_NO_SHIFT_REG);
assign local_bb3_c0_eni3[95:0] = local_bb3_c0_eni2[95:0];
assign local_bb3_c0_eni3[127:96] = local_lvm_ld__NO_SHIFT_REG;
assign local_bb3_c0_eni3_valid_out = local_bb3_c0_eni3_inputs_ready;
assign local_bb3_c0_eni3_stall_local = local_bb3_c0_eni3_stall_in;
assign merge_node_stall_in_0 = (local_bb3_c0_eni3_stall_local | ~(local_bb3_c0_eni3_inputs_ready));
assign merge_node_stall_in_1 = (local_bb3_c0_eni3_stall_local | ~(local_bb3_c0_eni3_inputs_ready));
assign merge_node_stall_in_2 = (local_bb3_c0_eni3_stall_local | ~(local_bb3_c0_eni3_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb3_sub27_valid_out;
wire local_bb3_sub27_stall_in;
wire local_bb3_sub27_inputs_ready;
wire local_bb3_sub27_stall_local;
wire [31:0] local_bb3_sub27;

assign local_bb3_sub27_inputs_ready = rnode_1to2_heightCounter_120_0_valid_out_0_NO_SHIFT_REG;
assign local_bb3_sub27 = (input_wii_memcoalesce_param_extrValue_1 + local_bb3_sub26);
assign local_bb3_sub27_valid_out = local_bb3_sub27_inputs_ready;
assign local_bb3_sub27_stall_local = local_bb3_sub27_stall_in;
assign rnode_1to2_heightCounter_120_0_stall_in_0_NO_SHIFT_REG = (|local_bb3_sub27_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb3_c0_enter_c0_eni3_valid_out_0;
wire local_bb3_c0_enter_c0_eni3_stall_in_0;
wire local_bb3_c0_enter_c0_eni3_valid_out_1;
wire local_bb3_c0_enter_c0_eni3_stall_in_1;
wire local_bb3_c0_enter_c0_eni3_valid_out_2;
wire local_bb3_c0_enter_c0_eni3_stall_in_2;
wire local_bb3_c0_enter_c0_eni3_valid_out_3;
wire local_bb3_c0_enter_c0_eni3_stall_in_3;
wire local_bb3_c0_enter_c0_eni3_inputs_ready;
wire local_bb3_c0_enter_c0_eni3_stall_local;
wire local_bb3_c0_enter_c0_eni3_input_accepted;
wire [127:0] local_bb3_c0_enter_c0_eni3;
wire local_bb3_c0_exit_c0_exi1_enable;
wire local_bb3_c0_exit_c0_exi1_entry_stall;
wire local_bb3_c0_enter_c0_eni3_valid_bit;
wire local_bb3_c0_exit_c0_exi1_output_regs_ready;
wire local_bb3_c0_exit_c0_exi1_valid_in;
wire local_bb3_c0_exit_c0_exi1_phases;
wire local_bb3_c0_enter_c0_eni3_inc_pipelined_thread;
wire local_bb3_c0_enter_c0_eni3_dec_pipelined_thread;
wire local_bb3_c0_enter_c0_eni3_fu_stall_out;
wire [63:0] rci_rcnode_2to3_rc1_heightCounter_120_0_reg_2;

assign local_bb3_c0_enter_c0_eni3_inputs_ready = local_bb3_c0_eni3_valid_out;
assign local_bb3_c0_enter_c0_eni3 = local_bb3_c0_eni3;
assign local_bb3_c0_enter_c0_eni3_input_accepted = (local_bb3_c0_enter_c0_eni3_inputs_ready && !(local_bb3_c0_exit_c0_exi1_entry_stall));
assign local_bb3_c0_enter_c0_eni3_valid_bit = local_bb3_c0_enter_c0_eni3_input_accepted;
assign local_bb3_c0_enter_c0_eni3_inc_pipelined_thread = 1'b1;
assign local_bb3_c0_enter_c0_eni3_dec_pipelined_thread = ~(1'b0);
assign local_bb3_c0_enter_c0_eni3_fu_stall_out = (~(local_bb3_c0_enter_c0_eni3_inputs_ready) | local_bb3_c0_exit_c0_exi1_entry_stall);
assign local_bb3_c0_enter_c0_eni3_stall_local = (local_bb3_c0_enter_c0_eni3_stall_in_0 | local_bb3_c0_enter_c0_eni3_stall_in_1 | local_bb3_c0_enter_c0_eni3_stall_in_2 | local_bb3_c0_enter_c0_eni3_stall_in_3);
assign local_bb3_c0_enter_c0_eni3_valid_out_0 = local_bb3_c0_enter_c0_eni3_inputs_ready;
assign local_bb3_c0_enter_c0_eni3_valid_out_1 = local_bb3_c0_enter_c0_eni3_inputs_ready;
assign local_bb3_c0_enter_c0_eni3_valid_out_2 = local_bb3_c0_enter_c0_eni3_inputs_ready;
assign local_bb3_c0_enter_c0_eni3_valid_out_3 = local_bb3_c0_enter_c0_eni3_inputs_ready;
assign local_bb3_c0_eni3_stall_in = (|local_bb3_c0_enter_c0_eni3_fu_stall_out);
assign rci_rcnode_2to3_rc1_heightCounter_120_0_reg_2[31:0] = rnode_1to2_heightCounter_120_1_NO_SHIFT_REG;
assign rci_rcnode_2to3_rc1_heightCounter_120_0_reg_2[63:32] = local_bb3_sub27;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_2to3_rc1_heightCounter_120_0_valid_out_0_NO_SHIFT_REG;
 logic rcnode_2to3_rc1_heightCounter_120_0_stall_in_0_NO_SHIFT_REG;
 logic [63:0] rcnode_2to3_rc1_heightCounter_120_0_NO_SHIFT_REG;
 logic rcnode_2to3_rc1_heightCounter_120_0_valid_out_1_NO_SHIFT_REG;
 logic rcnode_2to3_rc1_heightCounter_120_0_stall_in_1_NO_SHIFT_REG;
 logic [63:0] rcnode_2to3_rc1_heightCounter_120_1_NO_SHIFT_REG;
 logic rcnode_2to3_rc1_heightCounter_120_0_valid_out_2_NO_SHIFT_REG;
 logic rcnode_2to3_rc1_heightCounter_120_0_stall_in_2_NO_SHIFT_REG;
 logic [63:0] rcnode_2to3_rc1_heightCounter_120_2_NO_SHIFT_REG;
 logic rcnode_2to3_rc1_heightCounter_120_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rcnode_2to3_rc1_heightCounter_120_0_reg_3_NO_SHIFT_REG;
 logic rcnode_2to3_rc1_heightCounter_120_0_valid_out_0_reg_3_NO_SHIFT_REG;
 logic rcnode_2to3_rc1_heightCounter_120_0_stall_in_0_reg_3_NO_SHIFT_REG;
 logic rcnode_2to3_rc1_heightCounter_120_0_stall_out_0_reg_3_IP_NO_SHIFT_REG;
 logic rcnode_2to3_rc1_heightCounter_120_0_stall_out_0_reg_3_NO_SHIFT_REG;

acl_data_fifo rcnode_2to3_rc1_heightCounter_120_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_2to3_rc1_heightCounter_120_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_2to3_rc1_heightCounter_120_0_stall_in_0_reg_3_NO_SHIFT_REG),
	.valid_out(rcnode_2to3_rc1_heightCounter_120_0_valid_out_0_reg_3_NO_SHIFT_REG),
	.stall_out(rcnode_2to3_rc1_heightCounter_120_0_stall_out_0_reg_3_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_2to3_rc1_heightCounter_120_0_reg_2),
	.data_out(rcnode_2to3_rc1_heightCounter_120_0_reg_3_NO_SHIFT_REG)
);

defparam rcnode_2to3_rc1_heightCounter_120_0_reg_3_fifo.DEPTH = 1;
defparam rcnode_2to3_rc1_heightCounter_120_0_reg_3_fifo.DATA_WIDTH = 64;
defparam rcnode_2to3_rc1_heightCounter_120_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rcnode_2to3_rc1_heightCounter_120_0_reg_3_fifo.IMPL = "ll_reg";

assign rcnode_2to3_rc1_heightCounter_120_0_reg_3_inputs_ready_NO_SHIFT_REG = (rnode_1to2_heightCounter_120_0_valid_out_1_NO_SHIFT_REG & local_bb3_sub27_valid_out);
assign rcnode_2to3_rc1_heightCounter_120_0_stall_out_0_reg_3_NO_SHIFT_REG = (~(rcnode_2to3_rc1_heightCounter_120_0_reg_3_inputs_ready_NO_SHIFT_REG) | rcnode_2to3_rc1_heightCounter_120_0_stall_out_0_reg_3_IP_NO_SHIFT_REG);
assign rnode_1to2_heightCounter_120_0_stall_in_1_NO_SHIFT_REG = rcnode_2to3_rc1_heightCounter_120_0_stall_out_0_reg_3_NO_SHIFT_REG;
assign local_bb3_sub27_stall_in = rcnode_2to3_rc1_heightCounter_120_0_stall_out_0_reg_3_NO_SHIFT_REG;
assign rcnode_2to3_rc1_heightCounter_120_0_stall_in_0_reg_3_NO_SHIFT_REG = (rcnode_2to3_rc1_heightCounter_120_0_stall_in_0_NO_SHIFT_REG | rcnode_2to3_rc1_heightCounter_120_0_stall_in_1_NO_SHIFT_REG | rcnode_2to3_rc1_heightCounter_120_0_stall_in_2_NO_SHIFT_REG);
assign rcnode_2to3_rc1_heightCounter_120_0_valid_out_0_NO_SHIFT_REG = rcnode_2to3_rc1_heightCounter_120_0_valid_out_0_reg_3_NO_SHIFT_REG;
assign rcnode_2to3_rc1_heightCounter_120_0_valid_out_1_NO_SHIFT_REG = rcnode_2to3_rc1_heightCounter_120_0_valid_out_0_reg_3_NO_SHIFT_REG;
assign rcnode_2to3_rc1_heightCounter_120_0_valid_out_2_NO_SHIFT_REG = rcnode_2to3_rc1_heightCounter_120_0_valid_out_0_reg_3_NO_SHIFT_REG;
assign rcnode_2to3_rc1_heightCounter_120_0_NO_SHIFT_REG = rcnode_2to3_rc1_heightCounter_120_0_reg_3_NO_SHIFT_REG;
assign rcnode_2to3_rc1_heightCounter_120_1_NO_SHIFT_REG = rcnode_2to3_rc1_heightCounter_120_0_reg_3_NO_SHIFT_REG;
assign rcnode_2to3_rc1_heightCounter_120_2_NO_SHIFT_REG = rcnode_2to3_rc1_heightCounter_120_0_reg_3_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb3_c0_ene1_stall_local;
wire [31:0] local_bb3_c0_ene1;

assign local_bb3_c0_ene1[31:0] = local_bb3_c0_enter_c0_eni3[63:32];

// This section implements an unregistered operation.
// 
wire local_bb3_c0_ene2_stall_local;
wire [31:0] local_bb3_c0_ene2;

assign local_bb3_c0_ene2[31:0] = local_bb3_c0_enter_c0_eni3[95:64];

// This section implements an unregistered operation.
// 
wire local_bb3_c0_ene3_valid_out;
wire local_bb3_c0_ene3_stall_in;
wire local_bb3_c0_ene3_inputs_ready;
wire local_bb3_c0_ene3_stall_local;
wire [31:0] local_bb3_c0_ene3;

assign local_bb3_c0_ene3_inputs_ready = local_bb3_c0_enter_c0_eni3_valid_out_2;
assign local_bb3_c0_ene3[31:0] = local_bb3_c0_enter_c0_eni3[127:96];
assign local_bb3_c0_ene3_valid_out = 1'b1;
assign local_bb3_c0_enter_c0_eni3_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire SFC_1_VALID_1_1_0_valid_out;
wire SFC_1_VALID_1_1_0_stall_in;
wire SFC_1_VALID_1_1_0_inputs_ready;
wire SFC_1_VALID_1_1_0_stall_local;
wire SFC_1_VALID_1_1_0;

assign SFC_1_VALID_1_1_0_inputs_ready = local_bb3_c0_enter_c0_eni3_valid_out_3;
assign SFC_1_VALID_1_1_0 = local_bb3_c0_enter_c0_eni3_valid_bit;
assign SFC_1_VALID_1_1_0_valid_out = 1'b1;
assign local_bb3_c0_enter_c0_eni3_stall_in_3 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb3_cmp14_stall_local;
wire local_bb3_cmp14;

assign local_bb3_cmp14 = ($signed(rcnode_2to3_rc1_heightCounter_120_0_NO_SHIFT_REG[31:0]) < $signed(rnode_1to3_ld__u2_0_NO_SHIFT_REG));

// This section implements an unregistered operation.
// 
wire local_bb3_cmp14_valid_out;
wire local_bb3_cmp14_stall_in;
wire local_bb3_cmp29_not_valid_out;
wire local_bb3_cmp29_not_stall_in;
wire local_bb3_cmp29_not_inputs_ready;
wire local_bb3_cmp29_not_stall_local;
wire local_bb3_cmp29_not;

assign local_bb3_cmp29_not_inputs_ready = (rnode_1to3_ld__u2_0_valid_out_0_NO_SHIFT_REG & rcnode_2to3_rc1_heightCounter_120_0_valid_out_0_NO_SHIFT_REG & rnode_1to3_ld__u2_0_valid_out_1_NO_SHIFT_REG & rcnode_2to3_rc1_heightCounter_120_0_valid_out_2_NO_SHIFT_REG);
assign local_bb3_cmp29_not = ($signed(rcnode_2to3_rc1_heightCounter_120_0_NO_SHIFT_REG[63:32]) >= $signed(rnode_1to3_ld__u2_1_NO_SHIFT_REG));
assign local_bb3_cmp29_not_stall_local = (local_bb3_cmp14_stall_in | local_bb3_cmp29_not_stall_in);
assign local_bb3_cmp14_valid_out = local_bb3_cmp29_not_inputs_ready;
assign local_bb3_cmp29_not_valid_out = local_bb3_cmp29_not_inputs_ready;
assign rnode_1to3_ld__u2_0_stall_in_0_NO_SHIFT_REG = (local_bb3_cmp29_not_stall_local | ~(local_bb3_cmp29_not_inputs_ready));
assign rcnode_2to3_rc1_heightCounter_120_0_stall_in_0_NO_SHIFT_REG = (local_bb3_cmp29_not_stall_local | ~(local_bb3_cmp29_not_inputs_ready));
assign rnode_1to3_ld__u2_0_stall_in_1_NO_SHIFT_REG = (local_bb3_cmp29_not_stall_local | ~(local_bb3_cmp29_not_inputs_ready));
assign rcnode_2to3_rc1_heightCounter_120_0_stall_in_2_NO_SHIFT_REG = (local_bb3_cmp29_not_stall_local | ~(local_bb3_cmp29_not_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb3_mul4314_valid_out;
wire local_bb3_mul4314_stall_in;
wire local_bb3_mul4314_inputs_ready;
wire local_bb3_mul4314_stall_local;
wire [31:0] local_bb3_mul4314;

assign local_bb3_mul4314_inputs_ready = (local_bb3_c0_enter_c0_eni3_valid_out_0 & local_bb3_c0_enter_c0_eni3_valid_out_1);
assign local_bb3_mul4314 = (local_bb3_c0_ene1 + local_bb3_c0_ene2);
assign local_bb3_mul4314_valid_out = 1'b1;
assign local_bb3_c0_enter_c0_eni3_stall_in_0 = 1'b0;
assign local_bb3_c0_enter_c0_eni3_stall_in_1 = 1'b0;

// This section implements a registered operation.
// 
wire SFC_1_VALID_1_2_0_inputs_ready;
 reg SFC_1_VALID_1_2_0_valid_out_NO_SHIFT_REG;
wire SFC_1_VALID_1_2_0_stall_in;
wire SFC_1_VALID_1_2_0_output_regs_ready;
 reg SFC_1_VALID_1_2_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_1_VALID_1_2_0_causedstall;
wire [65:0] rci_rcnode_3to4_rc0_bb3_cmp14_0_reg_3;

assign SFC_1_VALID_1_2_0_inputs_ready = 1'b1;
assign SFC_1_VALID_1_2_0_output_regs_ready = local_bb3_c0_exit_c0_exi1_enable;
assign SFC_1_VALID_1_1_0_stall_in = 1'b0;
assign SFC_1_VALID_1_2_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb3_c0_exit_c0_exi1_enable))));
assign rci_rcnode_3to4_rc0_bb3_cmp14_0_reg_3[0] = local_bb3_cmp14;
assign rci_rcnode_3to4_rc0_bb3_cmp14_0_reg_3[1] = local_bb3_cmp29_not;
assign rci_rcnode_3to4_rc0_bb3_cmp14_0_reg_3[33:2] = rcnode_2to3_rc1_heightCounter_120_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_3to4_rc0_bb3_cmp14_0_reg_3[65:34] = rnode_1to3_ld__u2_2_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_1_VALID_1_2_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_1_VALID_1_2_0_output_regs_ready)
		begin
			SFC_1_VALID_1_2_0_NO_SHIFT_REG <= SFC_1_VALID_1_1_0;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_3to4_rc0_bb3_cmp14_0_valid_out_0_NO_SHIFT_REG;
 logic rcnode_3to4_rc0_bb3_cmp14_0_stall_in_0_NO_SHIFT_REG;
 logic [65:0] rcnode_3to4_rc0_bb3_cmp14_0_NO_SHIFT_REG;
 logic rcnode_3to4_rc0_bb3_cmp14_0_valid_out_1_NO_SHIFT_REG;
 logic rcnode_3to4_rc0_bb3_cmp14_0_stall_in_1_NO_SHIFT_REG;
 logic [65:0] rcnode_3to4_rc0_bb3_cmp14_1_NO_SHIFT_REG;
 logic rcnode_3to4_rc0_bb3_cmp14_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [65:0] rcnode_3to4_rc0_bb3_cmp14_0_reg_4_NO_SHIFT_REG;
 logic rcnode_3to4_rc0_bb3_cmp14_0_valid_out_0_reg_4_NO_SHIFT_REG;
 logic rcnode_3to4_rc0_bb3_cmp14_0_stall_in_0_reg_4_NO_SHIFT_REG;
 logic rcnode_3to4_rc0_bb3_cmp14_0_stall_out_0_reg_4_IP_NO_SHIFT_REG;
 logic rcnode_3to4_rc0_bb3_cmp14_0_stall_out_0_reg_4_NO_SHIFT_REG;

acl_data_fifo rcnode_3to4_rc0_bb3_cmp14_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_3to4_rc0_bb3_cmp14_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_3to4_rc0_bb3_cmp14_0_stall_in_0_reg_4_NO_SHIFT_REG),
	.valid_out(rcnode_3to4_rc0_bb3_cmp14_0_valid_out_0_reg_4_NO_SHIFT_REG),
	.stall_out(rcnode_3to4_rc0_bb3_cmp14_0_stall_out_0_reg_4_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_3to4_rc0_bb3_cmp14_0_reg_3),
	.data_out(rcnode_3to4_rc0_bb3_cmp14_0_reg_4_NO_SHIFT_REG)
);

defparam rcnode_3to4_rc0_bb3_cmp14_0_reg_4_fifo.DEPTH = 1;
defparam rcnode_3to4_rc0_bb3_cmp14_0_reg_4_fifo.DATA_WIDTH = 66;
defparam rcnode_3to4_rc0_bb3_cmp14_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rcnode_3to4_rc0_bb3_cmp14_0_reg_4_fifo.IMPL = "ll_reg";

assign rcnode_3to4_rc0_bb3_cmp14_0_reg_4_inputs_ready_NO_SHIFT_REG = (local_bb3_cmp14_valid_out & local_bb3_cmp29_not_valid_out & rnode_1to3_ld__u2_0_valid_out_2_NO_SHIFT_REG & rcnode_2to3_rc1_heightCounter_120_0_valid_out_1_NO_SHIFT_REG);
assign rcnode_3to4_rc0_bb3_cmp14_0_stall_out_0_reg_4_NO_SHIFT_REG = (~(rcnode_3to4_rc0_bb3_cmp14_0_reg_4_inputs_ready_NO_SHIFT_REG) | rcnode_3to4_rc0_bb3_cmp14_0_stall_out_0_reg_4_IP_NO_SHIFT_REG);
assign local_bb3_cmp14_stall_in = rcnode_3to4_rc0_bb3_cmp14_0_stall_out_0_reg_4_NO_SHIFT_REG;
assign local_bb3_cmp29_not_stall_in = rcnode_3to4_rc0_bb3_cmp14_0_stall_out_0_reg_4_NO_SHIFT_REG;
assign rnode_1to3_ld__u2_0_stall_in_2_NO_SHIFT_REG = rcnode_3to4_rc0_bb3_cmp14_0_stall_out_0_reg_4_NO_SHIFT_REG;
assign rcnode_2to3_rc1_heightCounter_120_0_stall_in_1_NO_SHIFT_REG = rcnode_3to4_rc0_bb3_cmp14_0_stall_out_0_reg_4_NO_SHIFT_REG;
assign rcnode_3to4_rc0_bb3_cmp14_0_stall_in_0_reg_4_NO_SHIFT_REG = (rcnode_3to4_rc0_bb3_cmp14_0_stall_in_0_NO_SHIFT_REG | rcnode_3to4_rc0_bb3_cmp14_0_stall_in_1_NO_SHIFT_REG);
assign rcnode_3to4_rc0_bb3_cmp14_0_valid_out_0_NO_SHIFT_REG = rcnode_3to4_rc0_bb3_cmp14_0_valid_out_0_reg_4_NO_SHIFT_REG;
assign rcnode_3to4_rc0_bb3_cmp14_0_valid_out_1_NO_SHIFT_REG = rcnode_3to4_rc0_bb3_cmp14_0_valid_out_0_reg_4_NO_SHIFT_REG;
assign rcnode_3to4_rc0_bb3_cmp14_0_NO_SHIFT_REG = rcnode_3to4_rc0_bb3_cmp14_0_reg_4_NO_SHIFT_REG;
assign rcnode_3to4_rc0_bb3_cmp14_1_NO_SHIFT_REG = rcnode_3to4_rc0_bb3_cmp14_0_reg_4_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb3_add46_inputs_ready;
 reg local_bb3_add46_valid_out_NO_SHIFT_REG;
wire local_bb3_add46_stall_in;
wire local_bb3_add46_output_regs_ready;
wire [31:0] local_bb3_add46;
 reg local_bb3_add46_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb3_add46_valid_pipe_1_NO_SHIFT_REG;
wire local_bb3_add46_causedstall;

acl_int_mult int_module_local_bb3_add46 (
	.clock(clock),
	.dataa(local_bb3_mul4314),
	.datab(local_bb3_c0_ene3),
	.enable(local_bb3_add46_output_regs_ready),
	.result(local_bb3_add46)
);

defparam int_module_local_bb3_add46.INPUT1_WIDTH = 32;
defparam int_module_local_bb3_add46.INPUT2_WIDTH = 32;
defparam int_module_local_bb3_add46.OUTPUT_WIDTH = 32;
defparam int_module_local_bb3_add46.LATENCY = 3;
defparam int_module_local_bb3_add46.SIGNED = 0;

assign local_bb3_add46_inputs_ready = 1'b1;
assign local_bb3_add46_output_regs_ready = local_bb3_c0_exit_c0_exi1_enable;
assign local_bb3_mul4314_stall_in = 1'b0;
assign local_bb3_c0_ene3_stall_in = 1'b0;
assign local_bb3_add46_causedstall = (1'b1 && (1'b0 && !(~(local_bb3_c0_exit_c0_exi1_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb3_add46_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb3_add46_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb3_add46_output_regs_ready)
		begin
			local_bb3_add46_valid_pipe_0_NO_SHIFT_REG <= 1'b1;
			local_bb3_add46_valid_pipe_1_NO_SHIFT_REG <= local_bb3_add46_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb3_add46_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb3_add46_output_regs_ready)
		begin
			local_bb3_add46_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb3_add46_stall_in))
			begin
				local_bb3_add46_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire SFC_1_VALID_2_3_0_inputs_ready;
 reg SFC_1_VALID_2_3_0_valid_out_NO_SHIFT_REG;
wire SFC_1_VALID_2_3_0_stall_in;
wire SFC_1_VALID_2_3_0_output_regs_ready;
 reg SFC_1_VALID_2_3_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_1_VALID_2_3_0_causedstall;

assign SFC_1_VALID_2_3_0_inputs_ready = 1'b1;
assign SFC_1_VALID_2_3_0_output_regs_ready = local_bb3_c0_exit_c0_exi1_enable;
assign SFC_1_VALID_1_2_0_stall_in = 1'b0;
assign SFC_1_VALID_2_3_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb3_c0_exit_c0_exi1_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_1_VALID_2_3_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_1_VALID_2_3_0_output_regs_ready)
		begin
			SFC_1_VALID_2_3_0_NO_SHIFT_REG <= SFC_1_VALID_1_2_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb3_cmp29_not_not_valid_out;
wire local_bb3_cmp29_not_not_stall_in;
wire local_bb3_cmp29_not_not_inputs_ready;
wire local_bb3_cmp29_not_not_stall_local;
wire local_bb3_cmp29_not_not;

assign local_bb3_cmp29_not_not_inputs_ready = rcnode_3to4_rc0_bb3_cmp14_0_valid_out_1_NO_SHIFT_REG;
assign local_bb3_cmp29_not_not = (rcnode_3to4_rc0_bb3_cmp14_0_NO_SHIFT_REG[1] ^ 1'b1);
assign local_bb3_cmp29_not_not_valid_out = local_bb3_cmp29_not_not_inputs_ready;
assign local_bb3_cmp29_not_not_stall_local = local_bb3_cmp29_not_not_stall_in;
assign rcnode_3to4_rc0_bb3_cmp14_0_stall_in_1_NO_SHIFT_REG = (|local_bb3_cmp29_not_not_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb3_c0_exi1_valid_out;
wire local_bb3_c0_exi1_stall_in;
wire local_bb3_c0_exi1_inputs_ready;
wire local_bb3_c0_exi1_stall_local;
wire [63:0] local_bb3_c0_exi1;

assign local_bb3_c0_exi1_inputs_ready = local_bb3_add46_valid_out_NO_SHIFT_REG;
assign local_bb3_c0_exi1[31:0] = 32'bx;
assign local_bb3_c0_exi1[63:32] = local_bb3_add46;
assign local_bb3_c0_exi1_valid_out = 1'b1;
assign local_bb3_add46_stall_in = 1'b0;

// This section implements a registered operation.
// 
wire SFC_1_VALID_3_4_0_inputs_ready;
 reg SFC_1_VALID_3_4_0_valid_out_NO_SHIFT_REG;
wire SFC_1_VALID_3_4_0_stall_in;
wire SFC_1_VALID_3_4_0_output_regs_ready;
 reg SFC_1_VALID_3_4_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_1_VALID_3_4_0_causedstall;

assign SFC_1_VALID_3_4_0_inputs_ready = 1'b1;
assign SFC_1_VALID_3_4_0_output_regs_ready = local_bb3_c0_exit_c0_exi1_enable;
assign SFC_1_VALID_2_3_0_stall_in = 1'b0;
assign SFC_1_VALID_3_4_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb3_c0_exit_c0_exi1_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_1_VALID_3_4_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_1_VALID_3_4_0_output_regs_ready)
		begin
			SFC_1_VALID_3_4_0_NO_SHIFT_REG <= SFC_1_VALID_2_3_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb3_c0_exit_c0_exi1_valid_out;
wire local_bb3_c0_exit_c0_exi1_stall_in;
wire local_bb3_c0_exit_c0_exi1_inputs_ready;
wire local_bb3_c0_exit_c0_exi1_stall_local;
wire [63:0] local_bb3_c0_exit_c0_exi1;
wire local_bb3_c0_exit_c0_exi1_valid;
wire local_bb3_c0_exit_c0_exi1_fu_stall_out;

acl_enable_sink local_bb3_c0_exit_c0_exi1_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb3_c0_exi1),
	.data_out(local_bb3_c0_exit_c0_exi1),
	.input_accepted(local_bb3_c0_enter_c0_eni3_input_accepted),
	.valid_out(local_bb3_c0_exit_c0_exi1_valid),
	.stall_in(local_bb3_c0_exit_c0_exi1_stall_local),
	.enable(local_bb3_c0_exit_c0_exi1_enable),
	.valid_in(local_bb3_c0_exit_c0_exi1_valid_in),
	.stall_entry(local_bb3_c0_exit_c0_exi1_entry_stall),
	.inc_pipelined_thread(local_bb3_c0_enter_c0_eni3_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb3_c0_enter_c0_eni3_dec_pipelined_thread)
);

defparam local_bb3_c0_exit_c0_exi1_instance.DATA_WIDTH = 64;
defparam local_bb3_c0_exit_c0_exi1_instance.PIPELINE_DEPTH = 3;
defparam local_bb3_c0_exit_c0_exi1_instance.SCHEDULEII = 1;
defparam local_bb3_c0_exit_c0_exi1_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb3_c0_exit_c0_exi1_inputs_ready = (local_bb3_c0_exi1_valid_out & SFC_1_VALID_3_4_0_valid_out_NO_SHIFT_REG);
assign local_bb3_c0_exit_c0_exi1_valid_in = SFC_1_VALID_3_4_0_NO_SHIFT_REG;
assign local_bb3_c0_exit_c0_exi1_fu_stall_out = ~(local_bb3_c0_exit_c0_exi1_enable);
assign local_bb3_c0_exit_c0_exi1_valid_out = local_bb3_c0_exit_c0_exi1_valid;
assign local_bb3_c0_exit_c0_exi1_stall_local = local_bb3_c0_exit_c0_exi1_stall_in;
assign local_bb3_c0_exi1_stall_in = 1'b0;
assign SFC_1_VALID_3_4_0_stall_in = 1'b0;

// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_4to4_bb3_c0_exit_c0_exi1_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to4_bb3_c0_exit_c0_exi1_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to4_bb3_c0_exit_c0_exi1_0_NO_SHIFT_REG;
 logic rnode_4to4_bb3_c0_exit_c0_exi1_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to4_bb3_c0_exit_c0_exi1_0_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb3_c0_exit_c0_exi1_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb3_c0_exit_c0_exi1_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb3_c0_exit_c0_exi1_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_4to4_bb3_c0_exit_c0_exi1_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to4_bb3_c0_exit_c0_exi1_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to4_bb3_c0_exit_c0_exi1_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_4to4_bb3_c0_exit_c0_exi1_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_4to4_bb3_c0_exit_c0_exi1_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb3_c0_exit_c0_exi1),
	.data_out(rnode_4to4_bb3_c0_exit_c0_exi1_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_4to4_bb3_c0_exit_c0_exi1_0_reg_4_fifo.DEPTH = 3;
defparam rnode_4to4_bb3_c0_exit_c0_exi1_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_4to4_bb3_c0_exit_c0_exi1_0_reg_4_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_4to4_bb3_c0_exit_c0_exi1_0_reg_4_fifo.IMPL = "zl_reg";

assign rnode_4to4_bb3_c0_exit_c0_exi1_0_reg_4_inputs_ready_NO_SHIFT_REG = local_bb3_c0_exit_c0_exi1_valid_out;
assign local_bb3_c0_exit_c0_exi1_stall_in = rnode_4to4_bb3_c0_exit_c0_exi1_0_stall_out_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb3_c0_exit_c0_exi1_0_NO_SHIFT_REG = rnode_4to4_bb3_c0_exit_c0_exi1_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb3_c0_exit_c0_exi1_0_stall_in_reg_4_NO_SHIFT_REG = rnode_4to4_bb3_c0_exit_c0_exi1_0_stall_in_NO_SHIFT_REG;
assign rnode_4to4_bb3_c0_exit_c0_exi1_0_valid_out_NO_SHIFT_REG = rnode_4to4_bb3_c0_exit_c0_exi1_0_valid_out_reg_4_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb3_c0_exe1_valid_out;
wire local_bb3_c0_exe1_stall_in;
wire local_bb3_c0_exe1_inputs_ready;
wire local_bb3_c0_exe1_stall_local;
wire [31:0] local_bb3_c0_exe1;

assign local_bb3_c0_exe1_inputs_ready = rnode_4to4_bb3_c0_exit_c0_exi1_0_valid_out_NO_SHIFT_REG;
assign local_bb3_c0_exe1[31:0] = rnode_4to4_bb3_c0_exit_c0_exi1_0_NO_SHIFT_REG[63:32];
assign local_bb3_c0_exe1_valid_out = local_bb3_c0_exe1_inputs_ready;
assign local_bb3_c0_exe1_stall_local = local_bb3_c0_exe1_stall_in;
assign rnode_4to4_bb3_c0_exit_c0_exi1_0_stall_in_NO_SHIFT_REG = (|local_bb3_c0_exe1_stall_local);

// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg lvb__phi_decision_xor_reg_NO_SHIFT_REG;
 reg [31:0] lvb_ld__reg_NO_SHIFT_REG;
 reg lvb_cmp1116_NEG_reg_NO_SHIFT_REG;
 reg lvb__phi_decision_xor45_or_reg_NO_SHIFT_REG;
 reg [31:0] lvb_ld__u2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_channelCounter_024_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul41_reg_NO_SHIFT_REG;
 reg [31:0] lvb_heightCounter_120_reg_NO_SHIFT_REG;
 reg lvb_bb3_cmp14_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb3_c0_exe1_reg_NO_SHIFT_REG;
 reg lvb_bb3_cmp29_not_reg_NO_SHIFT_REG;
 reg lvb_bb3_cmp29_not_not_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb3_cmp29_not_not_valid_out & local_bb3_c0_exe1_valid_out & rcnode_1to4_rc5__phi_decision_xor_0_valid_out_NO_SHIFT_REG & rcnode_3to4_rc0_bb3_cmp14_0_valid_out_0_NO_SHIFT_REG);
assign branch_var__output_regs_ready = (~(stall_in) | ~(branch_node_valid_out_NO_SHIFT_REG));
assign local_bb3_cmp29_not_not_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb3_c0_exe1_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_1to4_rc5__phi_decision_xor_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_3to4_rc0_bb3_cmp14_0_stall_in_0_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb__phi_decision_xor = lvb__phi_decision_xor_reg_NO_SHIFT_REG;
assign lvb_ld_ = lvb_ld__reg_NO_SHIFT_REG;
assign lvb_cmp1116_NEG = lvb_cmp1116_NEG_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor45_or = lvb__phi_decision_xor45_or_reg_NO_SHIFT_REG;
assign lvb_ld__u2 = lvb_ld__u2_reg_NO_SHIFT_REG;
assign lvb_channelCounter_024 = lvb_channelCounter_024_reg_NO_SHIFT_REG;
assign lvb_mul41 = lvb_mul41_reg_NO_SHIFT_REG;
assign lvb_heightCounter_120 = lvb_heightCounter_120_reg_NO_SHIFT_REG;
assign lvb_bb3_cmp14 = lvb_bb3_cmp14_reg_NO_SHIFT_REG;
assign lvb_bb3_c0_exe1 = lvb_bb3_c0_exe1_reg_NO_SHIFT_REG;
assign lvb_bb3_cmp29_not = lvb_bb3_cmp29_not_reg_NO_SHIFT_REG;
assign lvb_bb3_cmp29_not_not = lvb_bb3_cmp29_not_not_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0 = lvb_input_global_id_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1 = lvb_input_global_id_1_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2 = lvb_input_global_id_2_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id = lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;
assign combined_branch_stall_in_signal = stall_in;
assign valid_out = branch_node_valid_out_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
		lvb__phi_decision_xor_reg_NO_SHIFT_REG <= 'x;
		lvb_ld__reg_NO_SHIFT_REG <= 'x;
		lvb_cmp1116_NEG_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision_xor45_or_reg_NO_SHIFT_REG <= 'x;
		lvb_ld__u2_reg_NO_SHIFT_REG <= 'x;
		lvb_channelCounter_024_reg_NO_SHIFT_REG <= 'x;
		lvb_mul41_reg_NO_SHIFT_REG <= 'x;
		lvb_heightCounter_120_reg_NO_SHIFT_REG <= 'x;
		lvb_bb3_cmp14_reg_NO_SHIFT_REG <= 'x;
		lvb_bb3_c0_exe1_reg_NO_SHIFT_REG <= 'x;
		lvb_bb3_cmp29_not_reg_NO_SHIFT_REG <= 'x;
		lvb_bb3_cmp29_not_not_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb__phi_decision_xor_reg_NO_SHIFT_REG <= rcnode_1to4_rc5__phi_decision_xor_0_NO_SHIFT_REG[0];
			lvb_ld__reg_NO_SHIFT_REG <= rcnode_1to4_rc5__phi_decision_xor_0_NO_SHIFT_REG[32:1];
			lvb_cmp1116_NEG_reg_NO_SHIFT_REG <= rcnode_1to4_rc5__phi_decision_xor_0_NO_SHIFT_REG[33];
			lvb__phi_decision_xor45_or_reg_NO_SHIFT_REG <= rcnode_1to4_rc5__phi_decision_xor_0_NO_SHIFT_REG[34];
			lvb_ld__u2_reg_NO_SHIFT_REG <= rcnode_3to4_rc0_bb3_cmp14_0_NO_SHIFT_REG[65:34];
			lvb_channelCounter_024_reg_NO_SHIFT_REG <= rcnode_1to4_rc5__phi_decision_xor_0_NO_SHIFT_REG[66:35];
			lvb_mul41_reg_NO_SHIFT_REG <= rcnode_1to4_rc5__phi_decision_xor_0_NO_SHIFT_REG[98:67];
			lvb_heightCounter_120_reg_NO_SHIFT_REG <= rcnode_3to4_rc0_bb3_cmp14_0_NO_SHIFT_REG[33:2];
			lvb_bb3_cmp14_reg_NO_SHIFT_REG <= rcnode_3to4_rc0_bb3_cmp14_0_NO_SHIFT_REG[0];
			lvb_bb3_c0_exe1_reg_NO_SHIFT_REG <= local_bb3_c0_exe1;
			lvb_bb3_cmp29_not_reg_NO_SHIFT_REG <= rcnode_3to4_rc0_bb3_cmp14_0_NO_SHIFT_REG[1];
			lvb_bb3_cmp29_not_not_reg_NO_SHIFT_REG <= local_bb3_cmp29_not_not;
			lvb_input_global_id_0_reg_NO_SHIFT_REG <= rcnode_1to4_rc5__phi_decision_xor_0_NO_SHIFT_REG[130:99];
			lvb_input_global_id_1_reg_NO_SHIFT_REG <= rcnode_1to4_rc5__phi_decision_xor_0_NO_SHIFT_REG[162:131];
			lvb_input_global_id_2_reg_NO_SHIFT_REG <= rcnode_1to4_rc5__phi_decision_xor_0_NO_SHIFT_REG[194:163];
			lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= rcnode_1to4_rc5__phi_decision_xor_0_NO_SHIFT_REG[226:195];
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module paddingLayer_basic_block_4
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_global_size_2,
		input [63:0] 		input_outputFeatureMap,
		input [63:0] 		input_inputFeatureMap,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_0,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_1,
		input [63:0] 		input_wii_memcoalesce_param_bitcast_059,
		input 		valid_in_0,
		output 		stall_out_0,
		input 		input__phi_decision_xor_0,
		input [31:0] 		input_ld__0,
		input 		input_cmp1116_NEG_0,
		input 		input__phi_decision_xor45_or_0,
		input [31:0] 		input_ld__u3_0,
		input [31:0] 		input_channelCounter_024_0,
		input [31:0] 		input_mul41_0,
		input [31:0] 		input_heightCounter_120_0,
		input 		input_cmp14_0,
		input [31:0] 		input_c0_exe1_0,
		input 		input_cmp29_not_0,
		input 		input_cmp29_not_not_0,
		input [31:0] 		input_widthCounter_217_0,
		input [31:0] 		input_global_id_0_0,
		input [31:0] 		input_global_id_1_0,
		input [31:0] 		input_global_id_2_0,
		input [31:0] 		input_acl_hw_wg_id_0,
		input 		valid_in_1,
		output 		stall_out_1,
		input 		input__phi_decision_xor_1,
		input [31:0] 		input_ld__1,
		input 		input_cmp1116_NEG_1,
		input 		input__phi_decision_xor45_or_1,
		input [31:0] 		input_ld__u3_1,
		input [31:0] 		input_channelCounter_024_1,
		input [31:0] 		input_mul41_1,
		input [31:0] 		input_heightCounter_120_1,
		input 		input_cmp14_1,
		input [31:0] 		input_c0_exe1_1,
		input 		input_cmp29_not_1,
		input 		input_cmp29_not_not_1,
		input [31:0] 		input_widthCounter_217_1,
		input [31:0] 		input_global_id_0_1,
		input [31:0] 		input_global_id_1_1,
		input [31:0] 		input_global_id_2_1,
		input [31:0] 		input_acl_hw_wg_id_1,
		output 		valid_out_0,
		input 		stall_in_0,
		output 		lvb__phi_decision_xor_0,
		output [31:0] 		lvb_ld__0,
		output 		lvb_cmp1116_NEG_0,
		output 		lvb__phi_decision_xor45_or_0,
		output [31:0] 		lvb_ld__u3_0,
		output [31:0] 		lvb_channelCounter_024_0,
		output [31:0] 		lvb_mul41_0,
		output [31:0] 		lvb_heightCounter_120_0,
		output 		lvb_cmp14_0,
		output [31:0] 		lvb_c0_exe1_0,
		output 		lvb_cmp29_not_0,
		output 		lvb_cmp29_not_not_0,
		output [31:0] 		lvb_bb4_add52_0,
		output [31:0] 		lvb_input_global_id_0_0,
		output [31:0] 		lvb_input_global_id_1_0,
		output [31:0] 		lvb_input_global_id_2_0,
		output [31:0] 		lvb_input_acl_hw_wg_id_0,
		output 		valid_out_1,
		input 		stall_in_1,
		output 		lvb__phi_decision_xor_1,
		output [31:0] 		lvb_ld__1,
		output 		lvb_cmp1116_NEG_1,
		output 		lvb__phi_decision_xor45_or_1,
		output [31:0] 		lvb_ld__u3_1,
		output [31:0] 		lvb_channelCounter_024_1,
		output [31:0] 		lvb_mul41_1,
		output [31:0] 		lvb_heightCounter_120_1,
		output 		lvb_cmp14_1,
		output [31:0] 		lvb_c0_exe1_1,
		output 		lvb_cmp29_not_1,
		output 		lvb_cmp29_not_not_1,
		output [31:0] 		lvb_bb4_add52_1,
		output [31:0] 		lvb_input_global_id_0_1,
		output [31:0] 		lvb_input_global_id_1_1,
		output [31:0] 		lvb_input_global_id_2_1,
		output [31:0] 		lvb_input_acl_hw_wg_id_1,
		input [31:0] 		workgroup_size,
		input 		start,
		output 		avm_local_bb4_ld_memcoalesce_param_load_060_enable,
		input [511:0] 		avm_local_bb4_ld_memcoalesce_param_load_060_readdata,
		input 		avm_local_bb4_ld_memcoalesce_param_load_060_readdatavalid,
		input 		avm_local_bb4_ld_memcoalesce_param_load_060_waitrequest,
		output [31:0] 		avm_local_bb4_ld_memcoalesce_param_load_060_address,
		output 		avm_local_bb4_ld_memcoalesce_param_load_060_read,
		output 		avm_local_bb4_ld_memcoalesce_param_load_060_write,
		input 		avm_local_bb4_ld_memcoalesce_param_load_060_writeack,
		output [511:0] 		avm_local_bb4_ld_memcoalesce_param_load_060_writedata,
		output [63:0] 		avm_local_bb4_ld_memcoalesce_param_load_060_byteenable,
		output [4:0] 		avm_local_bb4_ld_memcoalesce_param_load_060_burstcount,
		output 		local_bb4_ld_memcoalesce_param_load_060_active,
		input 		clock2x,
		output 		avm_local_bb4_ld__enable,
		input [511:0] 		avm_local_bb4_ld__readdata,
		input 		avm_local_bb4_ld__readdatavalid,
		input 		avm_local_bb4_ld__waitrequest,
		output [31:0] 		avm_local_bb4_ld__address,
		output 		avm_local_bb4_ld__read,
		output 		avm_local_bb4_ld__write,
		input 		avm_local_bb4_ld__writeack,
		output [511:0] 		avm_local_bb4_ld__writedata,
		output [63:0] 		avm_local_bb4_ld__byteenable,
		output [4:0] 		avm_local_bb4_ld__burstcount,
		output 		local_bb4_ld__active,
		output 		avm_local_bb4_st__27_enable,
		input [511:0] 		avm_local_bb4_st__27_readdata,
		input 		avm_local_bb4_st__27_readdatavalid,
		input 		avm_local_bb4_st__27_waitrequest,
		output [31:0] 		avm_local_bb4_st__27_address,
		output 		avm_local_bb4_st__27_read,
		output 		avm_local_bb4_st__27_write,
		input 		avm_local_bb4_st__27_writeack,
		output [511:0] 		avm_local_bb4_st__27_writedata,
		output [63:0] 		avm_local_bb4_st__27_byteenable,
		output [4:0] 		avm_local_bb4_st__27_burstcount,
		output 		local_bb4_st__27_active
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((valid_in_0 & valid_in_1) & ~((stall_out_0 | stall_out_1)));
assign _exit = ((valid_out_0 & valid_out_1) & ~((stall_in_0 | stall_in_1)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_node_stall_in_4;
 reg merge_node_valid_out_4_NO_SHIFT_REG;
wire merge_node_stall_in_5;
 reg merge_node_valid_out_5_NO_SHIFT_REG;
wire merge_node_stall_in_6;
 reg merge_node_valid_out_6_NO_SHIFT_REG;
wire merge_node_stall_in_7;
 reg merge_node_valid_out_7_NO_SHIFT_REG;
wire merge_node_stall_in_8;
 reg merge_node_valid_out_8_NO_SHIFT_REG;
wire merge_node_stall_in_9;
 reg merge_node_valid_out_9_NO_SHIFT_REG;
wire merge_node_stall_in_10;
 reg merge_node_valid_out_10_NO_SHIFT_REG;
wire merge_node_stall_in_11;
 reg merge_node_valid_out_11_NO_SHIFT_REG;
wire merge_node_stall_in_12;
 reg merge_node_valid_out_12_NO_SHIFT_REG;
wire merge_node_stall_in_13;
 reg merge_node_valid_out_13_NO_SHIFT_REG;
wire merge_node_stall_in_14;
 reg merge_node_valid_out_14_NO_SHIFT_REG;
wire merge_node_stall_in_15;
 reg merge_node_valid_out_15_NO_SHIFT_REG;
wire merge_node_stall_in_16;
 reg merge_node_valid_out_16_NO_SHIFT_REG;
wire merge_node_stall_in_17;
 reg merge_node_valid_out_17_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__0_staging_reg_NO_SHIFT_REG;
 reg input_cmp1116_NEG_0_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor45_or_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__u3_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_024_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul41_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_heightCounter_120_0_staging_reg_NO_SHIFT_REG;
 reg input_cmp14_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe1_0_staging_reg_NO_SHIFT_REG;
 reg input_cmp29_not_0_staging_reg_NO_SHIFT_REG;
 reg input_cmp29_not_not_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_widthCounter_217_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
 reg local_lvm__phi_decision_xor_NO_SHIFT_REG;
 reg [31:0] local_lvm_ld__NO_SHIFT_REG;
 reg local_lvm_cmp1116_NEG_NO_SHIFT_REG;
 reg local_lvm__phi_decision_xor45_or_NO_SHIFT_REG;
 reg [31:0] local_lvm_ld__u3_NO_SHIFT_REG;
 reg [31:0] local_lvm_channelCounter_024_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul41_NO_SHIFT_REG;
 reg [31:0] local_lvm_heightCounter_120_NO_SHIFT_REG;
 reg local_lvm_cmp14_NO_SHIFT_REG;
 reg [31:0] local_lvm_c0_exe1_NO_SHIFT_REG;
 reg local_lvm_cmp29_not_NO_SHIFT_REG;
 reg local_lvm_cmp29_not_not_NO_SHIFT_REG;
 reg [31:0] local_lvm_widthCounter_217_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_0_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__1_staging_reg_NO_SHIFT_REG;
 reg input_cmp1116_NEG_1_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor45_or_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__u3_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_024_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul41_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_heightCounter_120_1_staging_reg_NO_SHIFT_REG;
 reg input_cmp14_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe1_1_staging_reg_NO_SHIFT_REG;
 reg input_cmp29_not_1_staging_reg_NO_SHIFT_REG;
 reg input_cmp29_not_not_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_widthCounter_217_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG) | (merge_node_stall_in_4 & merge_node_valid_out_4_NO_SHIFT_REG) | (merge_node_stall_in_5 & merge_node_valid_out_5_NO_SHIFT_REG) | (merge_node_stall_in_6 & merge_node_valid_out_6_NO_SHIFT_REG) | (merge_node_stall_in_7 & merge_node_valid_out_7_NO_SHIFT_REG) | (merge_node_stall_in_8 & merge_node_valid_out_8_NO_SHIFT_REG) | (merge_node_stall_in_9 & merge_node_valid_out_9_NO_SHIFT_REG) | (merge_node_stall_in_10 & merge_node_valid_out_10_NO_SHIFT_REG) | (merge_node_stall_in_11 & merge_node_valid_out_11_NO_SHIFT_REG) | (merge_node_stall_in_12 & merge_node_valid_out_12_NO_SHIFT_REG) | (merge_node_stall_in_13 & merge_node_valid_out_13_NO_SHIFT_REG) | (merge_node_stall_in_14 & merge_node_valid_out_14_NO_SHIFT_REG) | (merge_node_stall_in_15 & merge_node_valid_out_15_NO_SHIFT_REG) | (merge_node_stall_in_16 & merge_node_valid_out_16_NO_SHIFT_REG) | (merge_node_stall_in_17 & merge_node_valid_out_17_NO_SHIFT_REG));
assign stall_out_0 = merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
assign stall_out_1 = merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_0_staging_reg_NO_SHIFT_REG | valid_in_0))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		if ((merge_node_valid_in_1_staging_reg_NO_SHIFT_REG | valid_in_1))
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b1;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
		end
		else
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b0;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input__phi_decision_xor_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__0_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1116_NEG_0_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor45_or_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__u3_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_024_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul41_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_heightCounter_120_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp14_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe1_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp29_not_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp29_not_not_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_widthCounter_217_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_0_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		input__phi_decision_xor_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__1_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1116_NEG_1_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor45_or_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__u3_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_024_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul41_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_heightCounter_120_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp14_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe1_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp29_not_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp29_not_not_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_widthCounter_217_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_0_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_0_staging_reg_NO_SHIFT_REG))
			begin
				input__phi_decision_xor_0_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor_0;
				input_ld__0_staging_reg_NO_SHIFT_REG <= input_ld__0;
				input_cmp1116_NEG_0_staging_reg_NO_SHIFT_REG <= input_cmp1116_NEG_0;
				input__phi_decision_xor45_or_0_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor45_or_0;
				input_ld__u3_0_staging_reg_NO_SHIFT_REG <= input_ld__u3_0;
				input_channelCounter_024_0_staging_reg_NO_SHIFT_REG <= input_channelCounter_024_0;
				input_mul41_0_staging_reg_NO_SHIFT_REG <= input_mul41_0;
				input_heightCounter_120_0_staging_reg_NO_SHIFT_REG <= input_heightCounter_120_0;
				input_cmp14_0_staging_reg_NO_SHIFT_REG <= input_cmp14_0;
				input_c0_exe1_0_staging_reg_NO_SHIFT_REG <= input_c0_exe1_0;
				input_cmp29_not_0_staging_reg_NO_SHIFT_REG <= input_cmp29_not_0;
				input_cmp29_not_not_0_staging_reg_NO_SHIFT_REG <= input_cmp29_not_not_0;
				input_widthCounter_217_0_staging_reg_NO_SHIFT_REG <= input_widthCounter_217_0;
				input_global_id_0_0_staging_reg_NO_SHIFT_REG <= input_global_id_0_0;
				input_global_id_1_0_staging_reg_NO_SHIFT_REG <= input_global_id_1_0;
				input_global_id_2_0_staging_reg_NO_SHIFT_REG <= input_global_id_2_0;
				input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= valid_in_0;
			end
		end
		else
		begin
			merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
		if (((merge_block_selector_NO_SHIFT_REG != 1'b1) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_1_staging_reg_NO_SHIFT_REG))
			begin
				input__phi_decision_xor_1_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor_1;
				input_ld__1_staging_reg_NO_SHIFT_REG <= input_ld__1;
				input_cmp1116_NEG_1_staging_reg_NO_SHIFT_REG <= input_cmp1116_NEG_1;
				input__phi_decision_xor45_or_1_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor45_or_1;
				input_ld__u3_1_staging_reg_NO_SHIFT_REG <= input_ld__u3_1;
				input_channelCounter_024_1_staging_reg_NO_SHIFT_REG <= input_channelCounter_024_1;
				input_mul41_1_staging_reg_NO_SHIFT_REG <= input_mul41_1;
				input_heightCounter_120_1_staging_reg_NO_SHIFT_REG <= input_heightCounter_120_1;
				input_cmp14_1_staging_reg_NO_SHIFT_REG <= input_cmp14_1;
				input_c0_exe1_1_staging_reg_NO_SHIFT_REG <= input_c0_exe1_1;
				input_cmp29_not_1_staging_reg_NO_SHIFT_REG <= input_cmp29_not_1;
				input_cmp29_not_not_1_staging_reg_NO_SHIFT_REG <= input_cmp29_not_not_1;
				input_widthCounter_217_1_staging_reg_NO_SHIFT_REG <= input_widthCounter_217_1;
				input_global_id_0_1_staging_reg_NO_SHIFT_REG <= input_global_id_0_1;
				input_global_id_1_1_staging_reg_NO_SHIFT_REG <= input_global_id_1_1;
				input_global_id_2_1_staging_reg_NO_SHIFT_REG <= input_global_id_2_1;
				input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= valid_in_1;
			end
		end
		else
		begin
			merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_0_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm__phi_decision_xor_NO_SHIFT_REG <= input__phi_decision_xor_0_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__0_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1116_NEG_NO_SHIFT_REG <= input_cmp1116_NEG_0_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor45_or_NO_SHIFT_REG <= input__phi_decision_xor45_or_0_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__u3_NO_SHIFT_REG <= input_ld__u3_0_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_024_NO_SHIFT_REG <= input_channelCounter_024_0_staging_reg_NO_SHIFT_REG;
					local_lvm_mul41_NO_SHIFT_REG <= input_mul41_0_staging_reg_NO_SHIFT_REG;
					local_lvm_heightCounter_120_NO_SHIFT_REG <= input_heightCounter_120_0_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp14_NO_SHIFT_REG <= input_cmp14_0_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_0_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp29_not_NO_SHIFT_REG <= input_cmp29_not_0_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp29_not_not_NO_SHIFT_REG <= input_cmp29_not_not_0_staging_reg_NO_SHIFT_REG;
					local_lvm_widthCounter_217_NO_SHIFT_REG <= input_widthCounter_217_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm__phi_decision_xor_NO_SHIFT_REG <= input__phi_decision_xor_0;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__0;
					local_lvm_cmp1116_NEG_NO_SHIFT_REG <= input_cmp1116_NEG_0;
					local_lvm__phi_decision_xor45_or_NO_SHIFT_REG <= input__phi_decision_xor45_or_0;
					local_lvm_ld__u3_NO_SHIFT_REG <= input_ld__u3_0;
					local_lvm_channelCounter_024_NO_SHIFT_REG <= input_channelCounter_024_0;
					local_lvm_mul41_NO_SHIFT_REG <= input_mul41_0;
					local_lvm_heightCounter_120_NO_SHIFT_REG <= input_heightCounter_120_0;
					local_lvm_cmp14_NO_SHIFT_REG <= input_cmp14_0;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_0;
					local_lvm_cmp29_not_NO_SHIFT_REG <= input_cmp29_not_0;
					local_lvm_cmp29_not_not_NO_SHIFT_REG <= input_cmp29_not_not_0;
					local_lvm_widthCounter_217_NO_SHIFT_REG <= input_widthCounter_217_0;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_0;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_0;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				end
			end

			1'b1:
			begin
				if (merge_node_valid_in_1_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm__phi_decision_xor_NO_SHIFT_REG <= input__phi_decision_xor_1_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__1_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1116_NEG_NO_SHIFT_REG <= input_cmp1116_NEG_1_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor45_or_NO_SHIFT_REG <= input__phi_decision_xor45_or_1_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__u3_NO_SHIFT_REG <= input_ld__u3_1_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_024_NO_SHIFT_REG <= input_channelCounter_024_1_staging_reg_NO_SHIFT_REG;
					local_lvm_mul41_NO_SHIFT_REG <= input_mul41_1_staging_reg_NO_SHIFT_REG;
					local_lvm_heightCounter_120_NO_SHIFT_REG <= input_heightCounter_120_1_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp14_NO_SHIFT_REG <= input_cmp14_1_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_1_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp29_not_NO_SHIFT_REG <= input_cmp29_not_1_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp29_not_not_NO_SHIFT_REG <= input_cmp29_not_not_1_staging_reg_NO_SHIFT_REG;
					local_lvm_widthCounter_217_NO_SHIFT_REG <= input_widthCounter_217_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm__phi_decision_xor_NO_SHIFT_REG <= input__phi_decision_xor_1;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__1;
					local_lvm_cmp1116_NEG_NO_SHIFT_REG <= input_cmp1116_NEG_1;
					local_lvm__phi_decision_xor45_or_NO_SHIFT_REG <= input__phi_decision_xor45_or_1;
					local_lvm_ld__u3_NO_SHIFT_REG <= input_ld__u3_1;
					local_lvm_channelCounter_024_NO_SHIFT_REG <= input_channelCounter_024_1;
					local_lvm_mul41_NO_SHIFT_REG <= input_mul41_1;
					local_lvm_heightCounter_120_NO_SHIFT_REG <= input_heightCounter_120_1;
					local_lvm_cmp14_NO_SHIFT_REG <= input_cmp14_1;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_1;
					local_lvm_cmp29_not_NO_SHIFT_REG <= input_cmp29_not_1;
					local_lvm_cmp29_not_not_NO_SHIFT_REG <= input_cmp29_not_not_1;
					local_lvm_widthCounter_217_NO_SHIFT_REG <= input_widthCounter_217_1;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_1;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_1;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_5_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_6_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_7_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_8_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_9_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_10_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_11_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_12_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_13_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_14_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_15_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_16_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_17_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_4_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_5_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_6_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_7_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_8_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_9_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_10_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_11_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_12_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_13_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_14_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_15_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_16_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_17_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_4))
			begin
				merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_5))
			begin
				merge_node_valid_out_5_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_6))
			begin
				merge_node_valid_out_6_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_7))
			begin
				merge_node_valid_out_7_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_8))
			begin
				merge_node_valid_out_8_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_9))
			begin
				merge_node_valid_out_9_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_10))
			begin
				merge_node_valid_out_10_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_11))
			begin
				merge_node_valid_out_11_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_12))
			begin
				merge_node_valid_out_12_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_13))
			begin
				merge_node_valid_out_13_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_14))
			begin
				merge_node_valid_out_14_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_15))
			begin
				merge_node_valid_out_15_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_16))
			begin
				merge_node_valid_out_16_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_17))
			begin
				merge_node_valid_out_17_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(*)
begin
	merge_node_valid_out_1_NO_SHIFT_REG = merge_node_valid_out_0_NO_SHIFT_REG;
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb4_sub_stall_local;
wire [31:0] local_bb4_sub;

assign local_bb4_sub = (local_lvm_widthCounter_217_NO_SHIFT_REG ^ 32'hFFFFFFFF);

// Register node:
//  * latency = 488
//  * capacity = 488
 logic rnode_1to489_input_global_size_2_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to489_input_global_size_2_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to489_input_global_size_2_0_reg_489_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to489_input_global_size_2_0_valid_out_reg_489_NO_SHIFT_REG;
 logic rnode_1to489_input_global_size_2_0_stall_in_reg_489_NO_SHIFT_REG;
 logic rnode_1to489_input_global_size_2_0_stall_out_reg_489_NO_SHIFT_REG;

acl_data_fifo rnode_1to489_input_global_size_2_0_reg_489_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to489_input_global_size_2_0_reg_489_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to489_input_global_size_2_0_stall_in_reg_489_NO_SHIFT_REG),
	.valid_out(rnode_1to489_input_global_size_2_0_valid_out_reg_489_NO_SHIFT_REG),
	.stall_out(rnode_1to489_input_global_size_2_0_stall_out_reg_489_NO_SHIFT_REG),
	.data_in(),
	.data_out()
);

defparam rnode_1to489_input_global_size_2_0_reg_489_fifo.DEPTH = 489;
defparam rnode_1to489_input_global_size_2_0_reg_489_fifo.DATA_WIDTH = 0;
defparam rnode_1to489_input_global_size_2_0_reg_489_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to489_input_global_size_2_0_reg_489_fifo.IMPL = "ram";

assign rnode_1to489_input_global_size_2_0_reg_489_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_2_NO_SHIFT_REG;
assign merge_node_stall_in_2 = rnode_1to489_input_global_size_2_0_stall_out_reg_489_NO_SHIFT_REG;
assign rnode_1to489_input_global_size_2_0_stall_in_reg_489_NO_SHIFT_REG = rnode_1to489_input_global_size_2_0_stall_in_NO_SHIFT_REG;
assign rnode_1to489_input_global_size_2_0_valid_out_NO_SHIFT_REG = rnode_1to489_input_global_size_2_0_valid_out_reg_489_NO_SHIFT_REG;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_1to3_memcoalesce_param_bitcast_059_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to3_memcoalesce_param_bitcast_059_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to3_memcoalesce_param_bitcast_059_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to3_memcoalesce_param_bitcast_059_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_memcoalesce_param_bitcast_059_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_memcoalesce_param_bitcast_059_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_1to3_memcoalesce_param_bitcast_059_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to3_memcoalesce_param_bitcast_059_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to3_memcoalesce_param_bitcast_059_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_1to3_memcoalesce_param_bitcast_059_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_1to3_memcoalesce_param_bitcast_059_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(),
	.data_out()
);

defparam rnode_1to3_memcoalesce_param_bitcast_059_0_reg_3_fifo.DEPTH = 3;
defparam rnode_1to3_memcoalesce_param_bitcast_059_0_reg_3_fifo.DATA_WIDTH = 0;
defparam rnode_1to3_memcoalesce_param_bitcast_059_0_reg_3_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to3_memcoalesce_param_bitcast_059_0_reg_3_fifo.IMPL = "ll_reg";

assign rnode_1to3_memcoalesce_param_bitcast_059_0_reg_3_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_3_NO_SHIFT_REG;
assign merge_node_stall_in_3 = rnode_1to3_memcoalesce_param_bitcast_059_0_stall_out_reg_3_NO_SHIFT_REG;
assign rnode_1to3_memcoalesce_param_bitcast_059_0_stall_in_reg_3_NO_SHIFT_REG = rnode_1to3_memcoalesce_param_bitcast_059_0_stall_in_NO_SHIFT_REG;
assign rnode_1to3_memcoalesce_param_bitcast_059_0_valid_out_NO_SHIFT_REG = rnode_1to3_memcoalesce_param_bitcast_059_0_valid_out_reg_3_NO_SHIFT_REG;

// Register node:
//  * latency = 490
//  * capacity = 490
 logic rnode_1to491_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to491_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to491_input_acl_hw_wg_id_0_NO_SHIFT_REG;
 logic rnode_1to491_input_acl_hw_wg_id_0_reg_491_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to491_input_acl_hw_wg_id_0_reg_491_NO_SHIFT_REG;
 logic rnode_1to491_input_acl_hw_wg_id_0_valid_out_reg_491_NO_SHIFT_REG;
 logic rnode_1to491_input_acl_hw_wg_id_0_stall_in_reg_491_NO_SHIFT_REG;
 logic rnode_1to491_input_acl_hw_wg_id_0_stall_out_reg_491_NO_SHIFT_REG;

acl_data_fifo rnode_1to491_input_acl_hw_wg_id_0_reg_491_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to491_input_acl_hw_wg_id_0_reg_491_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to491_input_acl_hw_wg_id_0_stall_in_reg_491_NO_SHIFT_REG),
	.valid_out(rnode_1to491_input_acl_hw_wg_id_0_valid_out_reg_491_NO_SHIFT_REG),
	.stall_out(rnode_1to491_input_acl_hw_wg_id_0_stall_out_reg_491_NO_SHIFT_REG),
	.data_in(local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG),
	.data_out(rnode_1to491_input_acl_hw_wg_id_0_reg_491_NO_SHIFT_REG)
);

defparam rnode_1to491_input_acl_hw_wg_id_0_reg_491_fifo.DEPTH = 491;
defparam rnode_1to491_input_acl_hw_wg_id_0_reg_491_fifo.DATA_WIDTH = 32;
defparam rnode_1to491_input_acl_hw_wg_id_0_reg_491_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to491_input_acl_hw_wg_id_0_reg_491_fifo.IMPL = "ram";

assign rnode_1to491_input_acl_hw_wg_id_0_reg_491_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_4_NO_SHIFT_REG;
assign merge_node_stall_in_4 = rnode_1to491_input_acl_hw_wg_id_0_stall_out_reg_491_NO_SHIFT_REG;
assign rnode_1to491_input_acl_hw_wg_id_0_NO_SHIFT_REG = rnode_1to491_input_acl_hw_wg_id_0_reg_491_NO_SHIFT_REG;
assign rnode_1to491_input_acl_hw_wg_id_0_stall_in_reg_491_NO_SHIFT_REG = rnode_1to491_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG;
assign rnode_1to491_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG = rnode_1to491_input_acl_hw_wg_id_0_valid_out_reg_491_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_widthCounter_217_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_widthCounter_217_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_widthCounter_217_0_NO_SHIFT_REG;
 logic rnode_1to2_widthCounter_217_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_widthCounter_217_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_widthCounter_217_1_NO_SHIFT_REG;
 logic rnode_1to2_widthCounter_217_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_widthCounter_217_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_widthCounter_217_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_widthCounter_217_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_widthCounter_217_0_stall_out_reg_2_NO_SHIFT_REG;
 reg rnode_1to2_widthCounter_217_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to2_widthCounter_217_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_widthCounter_217_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_widthCounter_217_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_widthCounter_217_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_widthCounter_217_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_widthCounter_217_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_lvm_widthCounter_217_NO_SHIFT_REG),
	.data_out(rnode_1to2_widthCounter_217_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_widthCounter_217_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_widthCounter_217_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_widthCounter_217_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_widthCounter_217_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_widthCounter_217_0_reg_2_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_5_NO_SHIFT_REG;
assign merge_node_stall_in_5 = rnode_1to2_widthCounter_217_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_widthCounter_217_0_stall_in_0_reg_2_NO_SHIFT_REG = ((rnode_1to2_widthCounter_217_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to2_widthCounter_217_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to2_widthCounter_217_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to2_widthCounter_217_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to2_widthCounter_217_0_valid_out_0_NO_SHIFT_REG = (rnode_1to2_widthCounter_217_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_widthCounter_217_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_widthCounter_217_0_valid_out_1_NO_SHIFT_REG = (rnode_1to2_widthCounter_217_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_widthCounter_217_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to2_widthCounter_217_0_NO_SHIFT_REG = rnode_1to2_widthCounter_217_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_widthCounter_217_1_NO_SHIFT_REG = rnode_1to2_widthCounter_217_0_reg_2_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to2_widthCounter_217_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_widthCounter_217_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to2_widthCounter_217_0_consumed_0_NO_SHIFT_REG <= (rnode_1to2_widthCounter_217_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_widthCounter_217_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to2_widthCounter_217_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to2_widthCounter_217_0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_widthCounter_217_0_consumed_1_NO_SHIFT_REG <= (rnode_1to2_widthCounter_217_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_widthCounter_217_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to2_widthCounter_217_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to2_widthCounter_217_0_stall_in_0_reg_2_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_ld__u3_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_ld__u3_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_ld__u3_0_NO_SHIFT_REG;
 logic rnode_1to2_ld__u3_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_ld__u3_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_ld__u3_1_NO_SHIFT_REG;
 logic rnode_1to2_ld__u3_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_1to2_ld__u3_0_stall_in_2_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_ld__u3_2_NO_SHIFT_REG;
 logic rnode_1to2_ld__u3_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_ld__u3_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_ld__u3_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_ld__u3_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_ld__u3_0_stall_out_reg_2_NO_SHIFT_REG;
 reg rnode_1to2_ld__u3_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to2_ld__u3_0_consumed_1_NO_SHIFT_REG;
 reg rnode_1to2_ld__u3_0_consumed_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_ld__u3_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_ld__u3_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_ld__u3_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_ld__u3_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_ld__u3_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_lvm_ld__u3_NO_SHIFT_REG),
	.data_out(rnode_1to2_ld__u3_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_ld__u3_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_ld__u3_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_ld__u3_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_ld__u3_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_ld__u3_0_reg_2_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_6_NO_SHIFT_REG;
assign merge_node_stall_in_6 = rnode_1to2_ld__u3_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_ld__u3_0_stall_in_0_reg_2_NO_SHIFT_REG = ((rnode_1to2_ld__u3_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to2_ld__u3_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to2_ld__u3_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to2_ld__u3_0_consumed_1_NO_SHIFT_REG)) | (rnode_1to2_ld__u3_0_stall_in_2_NO_SHIFT_REG & ~(rnode_1to2_ld__u3_0_consumed_2_NO_SHIFT_REG)));
assign rnode_1to2_ld__u3_0_valid_out_0_NO_SHIFT_REG = (rnode_1to2_ld__u3_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_ld__u3_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_ld__u3_0_valid_out_1_NO_SHIFT_REG = (rnode_1to2_ld__u3_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_ld__u3_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to2_ld__u3_0_valid_out_2_NO_SHIFT_REG = (rnode_1to2_ld__u3_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_ld__u3_0_consumed_2_NO_SHIFT_REG));
assign rnode_1to2_ld__u3_0_NO_SHIFT_REG = rnode_1to2_ld__u3_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_ld__u3_1_NO_SHIFT_REG = rnode_1to2_ld__u3_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_ld__u3_2_NO_SHIFT_REG = rnode_1to2_ld__u3_0_reg_2_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to2_ld__u3_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_ld__u3_0_consumed_1_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_ld__u3_0_consumed_2_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to2_ld__u3_0_consumed_0_NO_SHIFT_REG <= (rnode_1to2_ld__u3_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_ld__u3_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to2_ld__u3_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to2_ld__u3_0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_ld__u3_0_consumed_1_NO_SHIFT_REG <= (rnode_1to2_ld__u3_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_ld__u3_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to2_ld__u3_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to2_ld__u3_0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_ld__u3_0_consumed_2_NO_SHIFT_REG <= (rnode_1to2_ld__u3_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_ld__u3_0_consumed_2_NO_SHIFT_REG | ~(rnode_1to2_ld__u3_0_stall_in_2_NO_SHIFT_REG)) & rnode_1to2_ld__u3_0_stall_in_0_reg_2_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 328
//  * capacity = 328
 logic rnode_1to329_c0_exe1_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to329_c0_exe1_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to329_c0_exe1_0_NO_SHIFT_REG;
 logic rnode_1to329_c0_exe1_0_reg_329_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to329_c0_exe1_0_reg_329_NO_SHIFT_REG;
 logic rnode_1to329_c0_exe1_0_valid_out_reg_329_NO_SHIFT_REG;
 logic rnode_1to329_c0_exe1_0_stall_in_reg_329_NO_SHIFT_REG;
 logic rnode_1to329_c0_exe1_0_stall_out_reg_329_NO_SHIFT_REG;

acl_data_fifo rnode_1to329_c0_exe1_0_reg_329_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to329_c0_exe1_0_reg_329_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to329_c0_exe1_0_stall_in_reg_329_NO_SHIFT_REG),
	.valid_out(rnode_1to329_c0_exe1_0_valid_out_reg_329_NO_SHIFT_REG),
	.stall_out(rnode_1to329_c0_exe1_0_stall_out_reg_329_NO_SHIFT_REG),
	.data_in(local_lvm_c0_exe1_NO_SHIFT_REG),
	.data_out(rnode_1to329_c0_exe1_0_reg_329_NO_SHIFT_REG)
);

defparam rnode_1to329_c0_exe1_0_reg_329_fifo.DEPTH = 329;
defparam rnode_1to329_c0_exe1_0_reg_329_fifo.DATA_WIDTH = 32;
defparam rnode_1to329_c0_exe1_0_reg_329_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to329_c0_exe1_0_reg_329_fifo.IMPL = "ram";

assign rnode_1to329_c0_exe1_0_reg_329_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_7_NO_SHIFT_REG;
assign merge_node_stall_in_7 = rnode_1to329_c0_exe1_0_stall_out_reg_329_NO_SHIFT_REG;
assign rnode_1to329_c0_exe1_0_NO_SHIFT_REG = rnode_1to329_c0_exe1_0_reg_329_NO_SHIFT_REG;
assign rnode_1to329_c0_exe1_0_stall_in_reg_329_NO_SHIFT_REG = rnode_1to329_c0_exe1_0_stall_in_NO_SHIFT_REG;
assign rnode_1to329_c0_exe1_0_valid_out_NO_SHIFT_REG = rnode_1to329_c0_exe1_0_valid_out_reg_329_NO_SHIFT_REG;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_1to3_cmp14_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to3_cmp14_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_1to3_cmp14_0_NO_SHIFT_REG;
 logic rnode_1to3_cmp14_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to3_cmp14_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_1to3_cmp14_1_NO_SHIFT_REG;
 logic rnode_1to3_cmp14_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_1to3_cmp14_0_stall_in_2_NO_SHIFT_REG;
 logic rnode_1to3_cmp14_2_NO_SHIFT_REG;
 logic rnode_1to3_cmp14_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to3_cmp14_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_cmp14_0_valid_out_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_cmp14_0_stall_in_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_cmp14_0_stall_out_reg_3_NO_SHIFT_REG;
 reg rnode_1to3_cmp14_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to3_cmp14_0_consumed_1_NO_SHIFT_REG;
 reg rnode_1to3_cmp14_0_consumed_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to3_cmp14_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to3_cmp14_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to3_cmp14_0_stall_in_0_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_1to3_cmp14_0_valid_out_0_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_1to3_cmp14_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_lvm_cmp14_NO_SHIFT_REG),
	.data_out(rnode_1to3_cmp14_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_1to3_cmp14_0_reg_3_fifo.DEPTH = 3;
defparam rnode_1to3_cmp14_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_1to3_cmp14_0_reg_3_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to3_cmp14_0_reg_3_fifo.IMPL = "ll_reg";

assign rnode_1to3_cmp14_0_reg_3_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_8_NO_SHIFT_REG;
assign merge_node_stall_in_8 = rnode_1to3_cmp14_0_stall_out_reg_3_NO_SHIFT_REG;
assign rnode_1to3_cmp14_0_stall_in_0_reg_3_NO_SHIFT_REG = ((rnode_1to3_cmp14_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to3_cmp14_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to3_cmp14_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to3_cmp14_0_consumed_1_NO_SHIFT_REG)) | (rnode_1to3_cmp14_0_stall_in_2_NO_SHIFT_REG & ~(rnode_1to3_cmp14_0_consumed_2_NO_SHIFT_REG)));
assign rnode_1to3_cmp14_0_valid_out_0_NO_SHIFT_REG = (rnode_1to3_cmp14_0_valid_out_0_reg_3_NO_SHIFT_REG & ~(rnode_1to3_cmp14_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to3_cmp14_0_valid_out_1_NO_SHIFT_REG = (rnode_1to3_cmp14_0_valid_out_0_reg_3_NO_SHIFT_REG & ~(rnode_1to3_cmp14_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to3_cmp14_0_valid_out_2_NO_SHIFT_REG = (rnode_1to3_cmp14_0_valid_out_0_reg_3_NO_SHIFT_REG & ~(rnode_1to3_cmp14_0_consumed_2_NO_SHIFT_REG));
assign rnode_1to3_cmp14_0_NO_SHIFT_REG = rnode_1to3_cmp14_0_reg_3_NO_SHIFT_REG;
assign rnode_1to3_cmp14_1_NO_SHIFT_REG = rnode_1to3_cmp14_0_reg_3_NO_SHIFT_REG;
assign rnode_1to3_cmp14_2_NO_SHIFT_REG = rnode_1to3_cmp14_0_reg_3_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to3_cmp14_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to3_cmp14_0_consumed_1_NO_SHIFT_REG <= 1'b0;
		rnode_1to3_cmp14_0_consumed_2_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to3_cmp14_0_consumed_0_NO_SHIFT_REG <= (rnode_1to3_cmp14_0_valid_out_0_reg_3_NO_SHIFT_REG & (rnode_1to3_cmp14_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to3_cmp14_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to3_cmp14_0_stall_in_0_reg_3_NO_SHIFT_REG);
		rnode_1to3_cmp14_0_consumed_1_NO_SHIFT_REG <= (rnode_1to3_cmp14_0_valid_out_0_reg_3_NO_SHIFT_REG & (rnode_1to3_cmp14_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to3_cmp14_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to3_cmp14_0_stall_in_0_reg_3_NO_SHIFT_REG);
		rnode_1to3_cmp14_0_consumed_2_NO_SHIFT_REG <= (rnode_1to3_cmp14_0_valid_out_0_reg_3_NO_SHIFT_REG & (rnode_1to3_cmp14_0_consumed_2_NO_SHIFT_REG | ~(rnode_1to3_cmp14_0_stall_in_2_NO_SHIFT_REG)) & rnode_1to3_cmp14_0_stall_in_0_reg_3_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 489
//  * capacity = 489
 logic rnode_1to490_ld__0_valid_out_NO_SHIFT_REG;
 logic rnode_1to490_ld__0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to490_ld__0_NO_SHIFT_REG;
 logic rnode_1to490_ld__0_reg_490_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to490_ld__0_reg_490_NO_SHIFT_REG;
 logic rnode_1to490_ld__0_valid_out_reg_490_NO_SHIFT_REG;
 logic rnode_1to490_ld__0_stall_in_reg_490_NO_SHIFT_REG;
 logic rnode_1to490_ld__0_stall_out_reg_490_NO_SHIFT_REG;

acl_data_fifo rnode_1to490_ld__0_reg_490_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to490_ld__0_reg_490_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to490_ld__0_stall_in_reg_490_NO_SHIFT_REG),
	.valid_out(rnode_1to490_ld__0_valid_out_reg_490_NO_SHIFT_REG),
	.stall_out(rnode_1to490_ld__0_stall_out_reg_490_NO_SHIFT_REG),
	.data_in(local_lvm_ld__NO_SHIFT_REG),
	.data_out(rnode_1to490_ld__0_reg_490_NO_SHIFT_REG)
);

defparam rnode_1to490_ld__0_reg_490_fifo.DEPTH = 490;
defparam rnode_1to490_ld__0_reg_490_fifo.DATA_WIDTH = 32;
defparam rnode_1to490_ld__0_reg_490_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to490_ld__0_reg_490_fifo.IMPL = "ram";

assign rnode_1to490_ld__0_reg_490_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_9_NO_SHIFT_REG;
assign merge_node_stall_in_9 = rnode_1to490_ld__0_stall_out_reg_490_NO_SHIFT_REG;
assign rnode_1to490_ld__0_NO_SHIFT_REG = rnode_1to490_ld__0_reg_490_NO_SHIFT_REG;
assign rnode_1to490_ld__0_stall_in_reg_490_NO_SHIFT_REG = rnode_1to490_ld__0_stall_in_NO_SHIFT_REG;
assign rnode_1to490_ld__0_valid_out_NO_SHIFT_REG = rnode_1to490_ld__0_valid_out_reg_490_NO_SHIFT_REG;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_1to3_cmp1116_NEG_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to3_cmp1116_NEG_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_1to3_cmp1116_NEG_0_NO_SHIFT_REG;
 logic rnode_1to3_cmp1116_NEG_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to3_cmp1116_NEG_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_1to3_cmp1116_NEG_1_NO_SHIFT_REG;
 logic rnode_1to3_cmp1116_NEG_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to3_cmp1116_NEG_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_cmp1116_NEG_0_valid_out_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_cmp1116_NEG_0_stall_in_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_cmp1116_NEG_0_stall_out_reg_3_NO_SHIFT_REG;
 reg rnode_1to3_cmp1116_NEG_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to3_cmp1116_NEG_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to3_cmp1116_NEG_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to3_cmp1116_NEG_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to3_cmp1116_NEG_0_stall_in_0_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_1to3_cmp1116_NEG_0_valid_out_0_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_1to3_cmp1116_NEG_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_lvm_cmp1116_NEG_NO_SHIFT_REG),
	.data_out(rnode_1to3_cmp1116_NEG_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_1to3_cmp1116_NEG_0_reg_3_fifo.DEPTH = 3;
defparam rnode_1to3_cmp1116_NEG_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_1to3_cmp1116_NEG_0_reg_3_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to3_cmp1116_NEG_0_reg_3_fifo.IMPL = "ll_reg";

assign rnode_1to3_cmp1116_NEG_0_reg_3_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_10_NO_SHIFT_REG;
assign merge_node_stall_in_10 = rnode_1to3_cmp1116_NEG_0_stall_out_reg_3_NO_SHIFT_REG;
assign rnode_1to3_cmp1116_NEG_0_stall_in_0_reg_3_NO_SHIFT_REG = ((rnode_1to3_cmp1116_NEG_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to3_cmp1116_NEG_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to3_cmp1116_NEG_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to3_cmp1116_NEG_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to3_cmp1116_NEG_0_valid_out_0_NO_SHIFT_REG = (rnode_1to3_cmp1116_NEG_0_valid_out_0_reg_3_NO_SHIFT_REG & ~(rnode_1to3_cmp1116_NEG_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to3_cmp1116_NEG_0_valid_out_1_NO_SHIFT_REG = (rnode_1to3_cmp1116_NEG_0_valid_out_0_reg_3_NO_SHIFT_REG & ~(rnode_1to3_cmp1116_NEG_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to3_cmp1116_NEG_0_NO_SHIFT_REG = rnode_1to3_cmp1116_NEG_0_reg_3_NO_SHIFT_REG;
assign rnode_1to3_cmp1116_NEG_1_NO_SHIFT_REG = rnode_1to3_cmp1116_NEG_0_reg_3_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to3_cmp1116_NEG_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to3_cmp1116_NEG_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to3_cmp1116_NEG_0_consumed_0_NO_SHIFT_REG <= (rnode_1to3_cmp1116_NEG_0_valid_out_0_reg_3_NO_SHIFT_REG & (rnode_1to3_cmp1116_NEG_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to3_cmp1116_NEG_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to3_cmp1116_NEG_0_stall_in_0_reg_3_NO_SHIFT_REG);
		rnode_1to3_cmp1116_NEG_0_consumed_1_NO_SHIFT_REG <= (rnode_1to3_cmp1116_NEG_0_valid_out_0_reg_3_NO_SHIFT_REG & (rnode_1to3_cmp1116_NEG_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to3_cmp1116_NEG_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to3_cmp1116_NEG_0_stall_in_0_reg_3_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_1to3_cmp29_not_not_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to3_cmp29_not_not_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_1to3_cmp29_not_not_0_NO_SHIFT_REG;
 logic rnode_1to3_cmp29_not_not_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to3_cmp29_not_not_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_1to3_cmp29_not_not_1_NO_SHIFT_REG;
 logic rnode_1to3_cmp29_not_not_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to3_cmp29_not_not_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_cmp29_not_not_0_valid_out_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_cmp29_not_not_0_stall_in_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_cmp29_not_not_0_stall_out_reg_3_NO_SHIFT_REG;
 reg rnode_1to3_cmp29_not_not_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to3_cmp29_not_not_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to3_cmp29_not_not_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to3_cmp29_not_not_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to3_cmp29_not_not_0_stall_in_0_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_1to3_cmp29_not_not_0_valid_out_0_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_1to3_cmp29_not_not_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_lvm_cmp29_not_not_NO_SHIFT_REG),
	.data_out(rnode_1to3_cmp29_not_not_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_1to3_cmp29_not_not_0_reg_3_fifo.DEPTH = 3;
defparam rnode_1to3_cmp29_not_not_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_1to3_cmp29_not_not_0_reg_3_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to3_cmp29_not_not_0_reg_3_fifo.IMPL = "ll_reg";

assign rnode_1to3_cmp29_not_not_0_reg_3_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_11_NO_SHIFT_REG;
assign merge_node_stall_in_11 = rnode_1to3_cmp29_not_not_0_stall_out_reg_3_NO_SHIFT_REG;
assign rnode_1to3_cmp29_not_not_0_stall_in_0_reg_3_NO_SHIFT_REG = ((rnode_1to3_cmp29_not_not_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to3_cmp29_not_not_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to3_cmp29_not_not_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to3_cmp29_not_not_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to3_cmp29_not_not_0_valid_out_0_NO_SHIFT_REG = (rnode_1to3_cmp29_not_not_0_valid_out_0_reg_3_NO_SHIFT_REG & ~(rnode_1to3_cmp29_not_not_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to3_cmp29_not_not_0_valid_out_1_NO_SHIFT_REG = (rnode_1to3_cmp29_not_not_0_valid_out_0_reg_3_NO_SHIFT_REG & ~(rnode_1to3_cmp29_not_not_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to3_cmp29_not_not_0_NO_SHIFT_REG = rnode_1to3_cmp29_not_not_0_reg_3_NO_SHIFT_REG;
assign rnode_1to3_cmp29_not_not_1_NO_SHIFT_REG = rnode_1to3_cmp29_not_not_0_reg_3_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to3_cmp29_not_not_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to3_cmp29_not_not_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to3_cmp29_not_not_0_consumed_0_NO_SHIFT_REG <= (rnode_1to3_cmp29_not_not_0_valid_out_0_reg_3_NO_SHIFT_REG & (rnode_1to3_cmp29_not_not_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to3_cmp29_not_not_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to3_cmp29_not_not_0_stall_in_0_reg_3_NO_SHIFT_REG);
		rnode_1to3_cmp29_not_not_0_consumed_1_NO_SHIFT_REG <= (rnode_1to3_cmp29_not_not_0_valid_out_0_reg_3_NO_SHIFT_REG & (rnode_1to3_cmp29_not_not_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to3_cmp29_not_not_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to3_cmp29_not_not_0_stall_in_0_reg_3_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_1to3__phi_decision_xor_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to3__phi_decision_xor_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_1to3__phi_decision_xor_0_NO_SHIFT_REG;
 logic rnode_1to3__phi_decision_xor_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to3__phi_decision_xor_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_1to3__phi_decision_xor_1_NO_SHIFT_REG;
 logic rnode_1to3__phi_decision_xor_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to3__phi_decision_xor_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3__phi_decision_xor_0_valid_out_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3__phi_decision_xor_0_stall_in_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3__phi_decision_xor_0_stall_out_reg_3_NO_SHIFT_REG;
 reg rnode_1to3__phi_decision_xor_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to3__phi_decision_xor_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to3__phi_decision_xor_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to3__phi_decision_xor_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to3__phi_decision_xor_0_stall_in_0_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_1to3__phi_decision_xor_0_valid_out_0_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_1to3__phi_decision_xor_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_lvm__phi_decision_xor_NO_SHIFT_REG),
	.data_out(rnode_1to3__phi_decision_xor_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_1to3__phi_decision_xor_0_reg_3_fifo.DEPTH = 3;
defparam rnode_1to3__phi_decision_xor_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_1to3__phi_decision_xor_0_reg_3_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to3__phi_decision_xor_0_reg_3_fifo.IMPL = "ll_reg";

assign rnode_1to3__phi_decision_xor_0_reg_3_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_12_NO_SHIFT_REG;
assign merge_node_stall_in_12 = rnode_1to3__phi_decision_xor_0_stall_out_reg_3_NO_SHIFT_REG;
assign rnode_1to3__phi_decision_xor_0_stall_in_0_reg_3_NO_SHIFT_REG = ((rnode_1to3__phi_decision_xor_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to3__phi_decision_xor_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to3__phi_decision_xor_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to3__phi_decision_xor_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to3__phi_decision_xor_0_valid_out_0_NO_SHIFT_REG = (rnode_1to3__phi_decision_xor_0_valid_out_0_reg_3_NO_SHIFT_REG & ~(rnode_1to3__phi_decision_xor_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to3__phi_decision_xor_0_valid_out_1_NO_SHIFT_REG = (rnode_1to3__phi_decision_xor_0_valid_out_0_reg_3_NO_SHIFT_REG & ~(rnode_1to3__phi_decision_xor_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to3__phi_decision_xor_0_NO_SHIFT_REG = rnode_1to3__phi_decision_xor_0_reg_3_NO_SHIFT_REG;
assign rnode_1to3__phi_decision_xor_1_NO_SHIFT_REG = rnode_1to3__phi_decision_xor_0_reg_3_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to3__phi_decision_xor_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to3__phi_decision_xor_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to3__phi_decision_xor_0_consumed_0_NO_SHIFT_REG <= (rnode_1to3__phi_decision_xor_0_valid_out_0_reg_3_NO_SHIFT_REG & (rnode_1to3__phi_decision_xor_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to3__phi_decision_xor_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to3__phi_decision_xor_0_stall_in_0_reg_3_NO_SHIFT_REG);
		rnode_1to3__phi_decision_xor_0_consumed_1_NO_SHIFT_REG <= (rnode_1to3__phi_decision_xor_0_valid_out_0_reg_3_NO_SHIFT_REG & (rnode_1to3__phi_decision_xor_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to3__phi_decision_xor_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to3__phi_decision_xor_0_stall_in_0_reg_3_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_1to3_cmp29_not_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to3_cmp29_not_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_1to3_cmp29_not_0_NO_SHIFT_REG;
 logic rnode_1to3_cmp29_not_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to3_cmp29_not_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_1to3_cmp29_not_1_NO_SHIFT_REG;
 logic rnode_1to3_cmp29_not_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to3_cmp29_not_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_cmp29_not_0_valid_out_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_cmp29_not_0_stall_in_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_cmp29_not_0_stall_out_reg_3_NO_SHIFT_REG;
 reg rnode_1to3_cmp29_not_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to3_cmp29_not_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to3_cmp29_not_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to3_cmp29_not_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to3_cmp29_not_0_stall_in_0_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_1to3_cmp29_not_0_valid_out_0_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_1to3_cmp29_not_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_lvm_cmp29_not_NO_SHIFT_REG),
	.data_out(rnode_1to3_cmp29_not_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_1to3_cmp29_not_0_reg_3_fifo.DEPTH = 3;
defparam rnode_1to3_cmp29_not_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_1to3_cmp29_not_0_reg_3_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to3_cmp29_not_0_reg_3_fifo.IMPL = "ll_reg";

assign rnode_1to3_cmp29_not_0_reg_3_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_13_NO_SHIFT_REG;
assign merge_node_stall_in_13 = rnode_1to3_cmp29_not_0_stall_out_reg_3_NO_SHIFT_REG;
assign rnode_1to3_cmp29_not_0_stall_in_0_reg_3_NO_SHIFT_REG = ((rnode_1to3_cmp29_not_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to3_cmp29_not_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to3_cmp29_not_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to3_cmp29_not_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to3_cmp29_not_0_valid_out_0_NO_SHIFT_REG = (rnode_1to3_cmp29_not_0_valid_out_0_reg_3_NO_SHIFT_REG & ~(rnode_1to3_cmp29_not_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to3_cmp29_not_0_valid_out_1_NO_SHIFT_REG = (rnode_1to3_cmp29_not_0_valid_out_0_reg_3_NO_SHIFT_REG & ~(rnode_1to3_cmp29_not_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to3_cmp29_not_0_NO_SHIFT_REG = rnode_1to3_cmp29_not_0_reg_3_NO_SHIFT_REG;
assign rnode_1to3_cmp29_not_1_NO_SHIFT_REG = rnode_1to3_cmp29_not_0_reg_3_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to3_cmp29_not_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to3_cmp29_not_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to3_cmp29_not_0_consumed_0_NO_SHIFT_REG <= (rnode_1to3_cmp29_not_0_valid_out_0_reg_3_NO_SHIFT_REG & (rnode_1to3_cmp29_not_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to3_cmp29_not_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to3_cmp29_not_0_stall_in_0_reg_3_NO_SHIFT_REG);
		rnode_1to3_cmp29_not_0_consumed_1_NO_SHIFT_REG <= (rnode_1to3_cmp29_not_0_valid_out_0_reg_3_NO_SHIFT_REG & (rnode_1to3_cmp29_not_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to3_cmp29_not_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to3_cmp29_not_0_stall_in_0_reg_3_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 161
//  * capacity = 161
 logic rnode_1to162_channelCounter_024_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to162_channelCounter_024_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to162_channelCounter_024_0_NO_SHIFT_REG;
 logic rnode_1to162_channelCounter_024_0_reg_162_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to162_channelCounter_024_0_reg_162_NO_SHIFT_REG;
 logic rnode_1to162_channelCounter_024_0_valid_out_reg_162_NO_SHIFT_REG;
 logic rnode_1to162_channelCounter_024_0_stall_in_reg_162_NO_SHIFT_REG;
 logic rnode_1to162_channelCounter_024_0_stall_out_reg_162_NO_SHIFT_REG;

acl_data_fifo rnode_1to162_channelCounter_024_0_reg_162_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to162_channelCounter_024_0_reg_162_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to162_channelCounter_024_0_stall_in_reg_162_NO_SHIFT_REG),
	.valid_out(rnode_1to162_channelCounter_024_0_valid_out_reg_162_NO_SHIFT_REG),
	.stall_out(rnode_1to162_channelCounter_024_0_stall_out_reg_162_NO_SHIFT_REG),
	.data_in(local_lvm_channelCounter_024_NO_SHIFT_REG),
	.data_out(rnode_1to162_channelCounter_024_0_reg_162_NO_SHIFT_REG)
);

defparam rnode_1to162_channelCounter_024_0_reg_162_fifo.DEPTH = 162;
defparam rnode_1to162_channelCounter_024_0_reg_162_fifo.DATA_WIDTH = 32;
defparam rnode_1to162_channelCounter_024_0_reg_162_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to162_channelCounter_024_0_reg_162_fifo.IMPL = "ram";

assign rnode_1to162_channelCounter_024_0_reg_162_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_14_NO_SHIFT_REG;
assign merge_node_stall_in_14 = rnode_1to162_channelCounter_024_0_stall_out_reg_162_NO_SHIFT_REG;
assign rnode_1to162_channelCounter_024_0_NO_SHIFT_REG = rnode_1to162_channelCounter_024_0_reg_162_NO_SHIFT_REG;
assign rnode_1to162_channelCounter_024_0_stall_in_reg_162_NO_SHIFT_REG = rnode_1to162_channelCounter_024_0_stall_in_NO_SHIFT_REG;
assign rnode_1to162_channelCounter_024_0_valid_out_NO_SHIFT_REG = rnode_1to162_channelCounter_024_0_valid_out_reg_162_NO_SHIFT_REG;

// Register node:
//  * latency = 161
//  * capacity = 161
 logic rnode_1to162_heightCounter_120_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to162_heightCounter_120_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to162_heightCounter_120_0_NO_SHIFT_REG;
 logic rnode_1to162_heightCounter_120_0_reg_162_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to162_heightCounter_120_0_reg_162_NO_SHIFT_REG;
 logic rnode_1to162_heightCounter_120_0_valid_out_reg_162_NO_SHIFT_REG;
 logic rnode_1to162_heightCounter_120_0_stall_in_reg_162_NO_SHIFT_REG;
 logic rnode_1to162_heightCounter_120_0_stall_out_reg_162_NO_SHIFT_REG;

acl_data_fifo rnode_1to162_heightCounter_120_0_reg_162_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to162_heightCounter_120_0_reg_162_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to162_heightCounter_120_0_stall_in_reg_162_NO_SHIFT_REG),
	.valid_out(rnode_1to162_heightCounter_120_0_valid_out_reg_162_NO_SHIFT_REG),
	.stall_out(rnode_1to162_heightCounter_120_0_stall_out_reg_162_NO_SHIFT_REG),
	.data_in(local_lvm_heightCounter_120_NO_SHIFT_REG),
	.data_out(rnode_1to162_heightCounter_120_0_reg_162_NO_SHIFT_REG)
);

defparam rnode_1to162_heightCounter_120_0_reg_162_fifo.DEPTH = 162;
defparam rnode_1to162_heightCounter_120_0_reg_162_fifo.DATA_WIDTH = 32;
defparam rnode_1to162_heightCounter_120_0_reg_162_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to162_heightCounter_120_0_reg_162_fifo.IMPL = "ram";

assign rnode_1to162_heightCounter_120_0_reg_162_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_15_NO_SHIFT_REG;
assign merge_node_stall_in_15 = rnode_1to162_heightCounter_120_0_stall_out_reg_162_NO_SHIFT_REG;
assign rnode_1to162_heightCounter_120_0_NO_SHIFT_REG = rnode_1to162_heightCounter_120_0_reg_162_NO_SHIFT_REG;
assign rnode_1to162_heightCounter_120_0_stall_in_reg_162_NO_SHIFT_REG = rnode_1to162_heightCounter_120_0_stall_in_NO_SHIFT_REG;
assign rnode_1to162_heightCounter_120_0_valid_out_NO_SHIFT_REG = rnode_1to162_heightCounter_120_0_valid_out_reg_162_NO_SHIFT_REG;

// Register node:
//  * latency = 330
//  * capacity = 330
 logic rnode_1to331__phi_decision_xor45_or_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to331__phi_decision_xor45_or_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to331__phi_decision_xor45_or_0_NO_SHIFT_REG;
 logic rnode_1to331__phi_decision_xor45_or_0_reg_331_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to331__phi_decision_xor45_or_0_reg_331_NO_SHIFT_REG;
 logic rnode_1to331__phi_decision_xor45_or_0_valid_out_reg_331_NO_SHIFT_REG;
 logic rnode_1to331__phi_decision_xor45_or_0_stall_in_reg_331_NO_SHIFT_REG;
 logic rnode_1to331__phi_decision_xor45_or_0_stall_out_reg_331_NO_SHIFT_REG;
wire [127:0] rci_rcnode_1to491_rc17_mul41_0_reg_1;

acl_data_fifo rnode_1to331__phi_decision_xor45_or_0_reg_331_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to331__phi_decision_xor45_or_0_reg_331_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to331__phi_decision_xor45_or_0_stall_in_reg_331_NO_SHIFT_REG),
	.valid_out(rnode_1to331__phi_decision_xor45_or_0_valid_out_reg_331_NO_SHIFT_REG),
	.stall_out(rnode_1to331__phi_decision_xor45_or_0_stall_out_reg_331_NO_SHIFT_REG),
	.data_in(local_lvm__phi_decision_xor45_or_NO_SHIFT_REG),
	.data_out(rnode_1to331__phi_decision_xor45_or_0_reg_331_NO_SHIFT_REG)
);

defparam rnode_1to331__phi_decision_xor45_or_0_reg_331_fifo.DEPTH = 331;
defparam rnode_1to331__phi_decision_xor45_or_0_reg_331_fifo.DATA_WIDTH = 1;
defparam rnode_1to331__phi_decision_xor45_or_0_reg_331_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to331__phi_decision_xor45_or_0_reg_331_fifo.IMPL = "ram";

assign rnode_1to331__phi_decision_xor45_or_0_reg_331_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_16_NO_SHIFT_REG;
assign merge_node_stall_in_16 = rnode_1to331__phi_decision_xor45_or_0_stall_out_reg_331_NO_SHIFT_REG;
assign rnode_1to331__phi_decision_xor45_or_0_NO_SHIFT_REG = rnode_1to331__phi_decision_xor45_or_0_reg_331_NO_SHIFT_REG;
assign rnode_1to331__phi_decision_xor45_or_0_stall_in_reg_331_NO_SHIFT_REG = rnode_1to331__phi_decision_xor45_or_0_stall_in_NO_SHIFT_REG;
assign rnode_1to331__phi_decision_xor45_or_0_valid_out_NO_SHIFT_REG = rnode_1to331__phi_decision_xor45_or_0_valid_out_reg_331_NO_SHIFT_REG;
assign rci_rcnode_1to491_rc17_mul41_0_reg_1[31:0] = local_lvm_mul41_NO_SHIFT_REG;
assign rci_rcnode_1to491_rc17_mul41_0_reg_1[63:32] = local_lvm_input_global_id_0_NO_SHIFT_REG;
assign rci_rcnode_1to491_rc17_mul41_0_reg_1[95:64] = local_lvm_input_global_id_1_NO_SHIFT_REG;
assign rci_rcnode_1to491_rc17_mul41_0_reg_1[127:96] = local_lvm_input_global_id_2_NO_SHIFT_REG;

// Register node:
//  * latency = 490
//  * capacity = 490
 logic rcnode_1to491_rc17_mul41_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to491_rc17_mul41_0_stall_in_NO_SHIFT_REG;
 logic [127:0] rcnode_1to491_rc17_mul41_0_NO_SHIFT_REG;
 logic rcnode_1to491_rc17_mul41_0_reg_491_inputs_ready_NO_SHIFT_REG;
 logic [127:0] rcnode_1to491_rc17_mul41_0_reg_491_NO_SHIFT_REG;
 logic rcnode_1to491_rc17_mul41_0_valid_out_reg_491_NO_SHIFT_REG;
 logic rcnode_1to491_rc17_mul41_0_stall_in_reg_491_NO_SHIFT_REG;
 logic rcnode_1to491_rc17_mul41_0_stall_out_reg_491_IP_NO_SHIFT_REG;
 logic rcnode_1to491_rc17_mul41_0_stall_out_reg_491_NO_SHIFT_REG;

acl_data_fifo rcnode_1to491_rc17_mul41_0_reg_491_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to491_rc17_mul41_0_reg_491_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to491_rc17_mul41_0_stall_in_reg_491_NO_SHIFT_REG),
	.valid_out(rcnode_1to491_rc17_mul41_0_valid_out_reg_491_NO_SHIFT_REG),
	.stall_out(rcnode_1to491_rc17_mul41_0_stall_out_reg_491_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to491_rc17_mul41_0_reg_1),
	.data_out(rcnode_1to491_rc17_mul41_0_reg_491_NO_SHIFT_REG)
);

defparam rcnode_1to491_rc17_mul41_0_reg_491_fifo.DEPTH = 491;
defparam rcnode_1to491_rc17_mul41_0_reg_491_fifo.DATA_WIDTH = 128;
defparam rcnode_1to491_rc17_mul41_0_reg_491_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to491_rc17_mul41_0_reg_491_fifo.IMPL = "ram";

assign rcnode_1to491_rc17_mul41_0_reg_491_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_17_NO_SHIFT_REG;
assign rcnode_1to491_rc17_mul41_0_stall_out_reg_491_NO_SHIFT_REG = (~(rcnode_1to491_rc17_mul41_0_reg_491_inputs_ready_NO_SHIFT_REG) | rcnode_1to491_rc17_mul41_0_stall_out_reg_491_IP_NO_SHIFT_REG);
assign merge_node_stall_in_17 = rcnode_1to491_rc17_mul41_0_stall_out_reg_491_NO_SHIFT_REG;
assign rcnode_1to491_rc17_mul41_0_NO_SHIFT_REG = rcnode_1to491_rc17_mul41_0_reg_491_NO_SHIFT_REG;
assign rcnode_1to491_rc17_mul41_0_stall_in_reg_491_NO_SHIFT_REG = rcnode_1to491_rc17_mul41_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to491_rc17_mul41_0_valid_out_NO_SHIFT_REG = rcnode_1to491_rc17_mul41_0_valid_out_reg_491_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb4_sub21_valid_out;
wire local_bb4_sub21_stall_in;
wire local_bb4_sub21_inputs_ready;
wire local_bb4_sub21_stall_local;
wire [31:0] local_bb4_sub21;

assign local_bb4_sub21_inputs_ready = (merge_node_valid_out_0_NO_SHIFT_REG & merge_node_valid_out_1_NO_SHIFT_REG);
assign local_bb4_sub21 = (local_lvm_ld__NO_SHIFT_REG + local_bb4_sub);
assign local_bb4_sub21_valid_out = local_bb4_sub21_inputs_ready;
assign local_bb4_sub21_stall_local = local_bb4_sub21_stall_in;
assign merge_node_stall_in_0 = (local_bb4_sub21_stall_local | ~(local_bb4_sub21_inputs_ready));
assign merge_node_stall_in_1 = (local_bb4_sub21_stall_local | ~(local_bb4_sub21_inputs_ready));

// Register node:
//  * latency = 160
//  * capacity = 160
 logic rnode_2to162_widthCounter_217_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to162_widthCounter_217_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to162_widthCounter_217_0_NO_SHIFT_REG;
 logic rnode_2to162_widthCounter_217_0_reg_162_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to162_widthCounter_217_0_reg_162_NO_SHIFT_REG;
 logic rnode_2to162_widthCounter_217_0_valid_out_reg_162_NO_SHIFT_REG;
 logic rnode_2to162_widthCounter_217_0_stall_in_reg_162_NO_SHIFT_REG;
 logic rnode_2to162_widthCounter_217_0_stall_out_reg_162_NO_SHIFT_REG;

acl_data_fifo rnode_2to162_widthCounter_217_0_reg_162_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to162_widthCounter_217_0_reg_162_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to162_widthCounter_217_0_stall_in_reg_162_NO_SHIFT_REG),
	.valid_out(rnode_2to162_widthCounter_217_0_valid_out_reg_162_NO_SHIFT_REG),
	.stall_out(rnode_2to162_widthCounter_217_0_stall_out_reg_162_NO_SHIFT_REG),
	.data_in(rnode_1to2_widthCounter_217_1_NO_SHIFT_REG),
	.data_out(rnode_2to162_widthCounter_217_0_reg_162_NO_SHIFT_REG)
);

defparam rnode_2to162_widthCounter_217_0_reg_162_fifo.DEPTH = 161;
defparam rnode_2to162_widthCounter_217_0_reg_162_fifo.DATA_WIDTH = 32;
defparam rnode_2to162_widthCounter_217_0_reg_162_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_2to162_widthCounter_217_0_reg_162_fifo.IMPL = "ram";

assign rnode_2to162_widthCounter_217_0_reg_162_inputs_ready_NO_SHIFT_REG = rnode_1to2_widthCounter_217_0_valid_out_1_NO_SHIFT_REG;
assign rnode_1to2_widthCounter_217_0_stall_in_1_NO_SHIFT_REG = rnode_2to162_widthCounter_217_0_stall_out_reg_162_NO_SHIFT_REG;
assign rnode_2to162_widthCounter_217_0_NO_SHIFT_REG = rnode_2to162_widthCounter_217_0_reg_162_NO_SHIFT_REG;
assign rnode_2to162_widthCounter_217_0_stall_in_reg_162_NO_SHIFT_REG = rnode_2to162_widthCounter_217_0_stall_in_NO_SHIFT_REG;
assign rnode_2to162_widthCounter_217_0_valid_out_NO_SHIFT_REG = rnode_2to162_widthCounter_217_0_valid_out_reg_162_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb4_cmp17_valid_out;
wire local_bb4_cmp17_stall_in;
wire local_bb4_cmp17_inputs_ready;
wire local_bb4_cmp17_stall_local;
wire local_bb4_cmp17;

assign local_bb4_cmp17_inputs_ready = (rnode_1to2_widthCounter_217_0_valid_out_0_NO_SHIFT_REG & rnode_1to2_ld__u3_0_valid_out_0_NO_SHIFT_REG);
assign local_bb4_cmp17 = ($signed(rnode_1to2_widthCounter_217_0_NO_SHIFT_REG) < $signed(rnode_1to2_ld__u3_0_NO_SHIFT_REG));
assign local_bb4_cmp17_valid_out = local_bb4_cmp17_inputs_ready;
assign local_bb4_cmp17_stall_local = local_bb4_cmp17_stall_in;
assign rnode_1to2_widthCounter_217_0_stall_in_0_NO_SHIFT_REG = (local_bb4_cmp17_stall_local | ~(local_bb4_cmp17_inputs_ready));
assign rnode_1to2_ld__u3_0_stall_in_0_NO_SHIFT_REG = (local_bb4_cmp17_stall_local | ~(local_bb4_cmp17_inputs_ready));

// Register node:
//  * latency = 160
//  * capacity = 160
 logic rnode_2to162_ld__u3_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to162_ld__u3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to162_ld__u3_0_NO_SHIFT_REG;
 logic rnode_2to162_ld__u3_0_reg_162_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to162_ld__u3_0_reg_162_NO_SHIFT_REG;
 logic rnode_2to162_ld__u3_0_valid_out_reg_162_NO_SHIFT_REG;
 logic rnode_2to162_ld__u3_0_stall_in_reg_162_NO_SHIFT_REG;
 logic rnode_2to162_ld__u3_0_stall_out_reg_162_NO_SHIFT_REG;

acl_data_fifo rnode_2to162_ld__u3_0_reg_162_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to162_ld__u3_0_reg_162_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to162_ld__u3_0_stall_in_reg_162_NO_SHIFT_REG),
	.valid_out(rnode_2to162_ld__u3_0_valid_out_reg_162_NO_SHIFT_REG),
	.stall_out(rnode_2to162_ld__u3_0_stall_out_reg_162_NO_SHIFT_REG),
	.data_in(rnode_1to2_ld__u3_2_NO_SHIFT_REG),
	.data_out(rnode_2to162_ld__u3_0_reg_162_NO_SHIFT_REG)
);

defparam rnode_2to162_ld__u3_0_reg_162_fifo.DEPTH = 161;
defparam rnode_2to162_ld__u3_0_reg_162_fifo.DATA_WIDTH = 32;
defparam rnode_2to162_ld__u3_0_reg_162_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_2to162_ld__u3_0_reg_162_fifo.IMPL = "ram";

assign rnode_2to162_ld__u3_0_reg_162_inputs_ready_NO_SHIFT_REG = rnode_1to2_ld__u3_0_valid_out_2_NO_SHIFT_REG;
assign rnode_1to2_ld__u3_0_stall_in_2_NO_SHIFT_REG = rnode_2to162_ld__u3_0_stall_out_reg_162_NO_SHIFT_REG;
assign rnode_2to162_ld__u3_0_NO_SHIFT_REG = rnode_2to162_ld__u3_0_reg_162_NO_SHIFT_REG;
assign rnode_2to162_ld__u3_0_stall_in_reg_162_NO_SHIFT_REG = rnode_2to162_ld__u3_0_stall_in_NO_SHIFT_REG;
assign rnode_2to162_ld__u3_0_valid_out_NO_SHIFT_REG = rnode_2to162_ld__u3_0_valid_out_reg_162_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_329to330_c0_exe1_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_329to330_c0_exe1_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_329to330_c0_exe1_0_NO_SHIFT_REG;
 logic rnode_329to330_c0_exe1_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_329to330_c0_exe1_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_329to330_c0_exe1_1_NO_SHIFT_REG;
 logic rnode_329to330_c0_exe1_0_reg_330_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_329to330_c0_exe1_0_reg_330_NO_SHIFT_REG;
 logic rnode_329to330_c0_exe1_0_valid_out_0_reg_330_NO_SHIFT_REG;
 logic rnode_329to330_c0_exe1_0_stall_in_0_reg_330_NO_SHIFT_REG;
 logic rnode_329to330_c0_exe1_0_stall_out_reg_330_NO_SHIFT_REG;
 reg rnode_329to330_c0_exe1_0_consumed_0_NO_SHIFT_REG;
 reg rnode_329to330_c0_exe1_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_329to330_c0_exe1_0_reg_330_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_329to330_c0_exe1_0_reg_330_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_329to330_c0_exe1_0_stall_in_0_reg_330_NO_SHIFT_REG),
	.valid_out(rnode_329to330_c0_exe1_0_valid_out_0_reg_330_NO_SHIFT_REG),
	.stall_out(rnode_329to330_c0_exe1_0_stall_out_reg_330_NO_SHIFT_REG),
	.data_in(rnode_1to329_c0_exe1_0_NO_SHIFT_REG),
	.data_out(rnode_329to330_c0_exe1_0_reg_330_NO_SHIFT_REG)
);

defparam rnode_329to330_c0_exe1_0_reg_330_fifo.DEPTH = 1;
defparam rnode_329to330_c0_exe1_0_reg_330_fifo.DATA_WIDTH = 32;
defparam rnode_329to330_c0_exe1_0_reg_330_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_329to330_c0_exe1_0_reg_330_fifo.IMPL = "ll_reg";

assign rnode_329to330_c0_exe1_0_reg_330_inputs_ready_NO_SHIFT_REG = rnode_1to329_c0_exe1_0_valid_out_NO_SHIFT_REG;
assign rnode_1to329_c0_exe1_0_stall_in_NO_SHIFT_REG = rnode_329to330_c0_exe1_0_stall_out_reg_330_NO_SHIFT_REG;
assign rnode_329to330_c0_exe1_0_stall_in_0_reg_330_NO_SHIFT_REG = ((rnode_329to330_c0_exe1_0_stall_in_0_NO_SHIFT_REG & ~(rnode_329to330_c0_exe1_0_consumed_0_NO_SHIFT_REG)) | (rnode_329to330_c0_exe1_0_stall_in_1_NO_SHIFT_REG & ~(rnode_329to330_c0_exe1_0_consumed_1_NO_SHIFT_REG)));
assign rnode_329to330_c0_exe1_0_valid_out_0_NO_SHIFT_REG = (rnode_329to330_c0_exe1_0_valid_out_0_reg_330_NO_SHIFT_REG & ~(rnode_329to330_c0_exe1_0_consumed_0_NO_SHIFT_REG));
assign rnode_329to330_c0_exe1_0_valid_out_1_NO_SHIFT_REG = (rnode_329to330_c0_exe1_0_valid_out_0_reg_330_NO_SHIFT_REG & ~(rnode_329to330_c0_exe1_0_consumed_1_NO_SHIFT_REG));
assign rnode_329to330_c0_exe1_0_NO_SHIFT_REG = rnode_329to330_c0_exe1_0_reg_330_NO_SHIFT_REG;
assign rnode_329to330_c0_exe1_1_NO_SHIFT_REG = rnode_329to330_c0_exe1_0_reg_330_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_329to330_c0_exe1_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_329to330_c0_exe1_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_329to330_c0_exe1_0_consumed_0_NO_SHIFT_REG <= (rnode_329to330_c0_exe1_0_valid_out_0_reg_330_NO_SHIFT_REG & (rnode_329to330_c0_exe1_0_consumed_0_NO_SHIFT_REG | ~(rnode_329to330_c0_exe1_0_stall_in_0_NO_SHIFT_REG)) & rnode_329to330_c0_exe1_0_stall_in_0_reg_330_NO_SHIFT_REG);
		rnode_329to330_c0_exe1_0_consumed_1_NO_SHIFT_REG <= (rnode_329to330_c0_exe1_0_valid_out_0_reg_330_NO_SHIFT_REG & (rnode_329to330_c0_exe1_0_consumed_1_NO_SHIFT_REG | ~(rnode_329to330_c0_exe1_0_stall_in_1_NO_SHIFT_REG)) & rnode_329to330_c0_exe1_0_stall_in_0_reg_330_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_490to491_ld__0_valid_out_0_NO_SHIFT_REG;
 logic rnode_490to491_ld__0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_490to491_ld__0_NO_SHIFT_REG;
 logic rnode_490to491_ld__0_valid_out_1_NO_SHIFT_REG;
 logic rnode_490to491_ld__0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_490to491_ld__1_NO_SHIFT_REG;
 logic rnode_490to491_ld__0_reg_491_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_490to491_ld__0_reg_491_NO_SHIFT_REG;
 logic rnode_490to491_ld__0_valid_out_0_reg_491_NO_SHIFT_REG;
 logic rnode_490to491_ld__0_stall_in_0_reg_491_NO_SHIFT_REG;
 logic rnode_490to491_ld__0_stall_out_reg_491_NO_SHIFT_REG;
 reg rnode_490to491_ld__0_consumed_0_NO_SHIFT_REG;
 reg rnode_490to491_ld__0_consumed_1_NO_SHIFT_REG;
wire [3:0] rci_rcnode_3to491_rc2_cmp14_0_reg_3;

acl_data_fifo rnode_490to491_ld__0_reg_491_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_490to491_ld__0_reg_491_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_490to491_ld__0_stall_in_0_reg_491_NO_SHIFT_REG),
	.valid_out(rnode_490to491_ld__0_valid_out_0_reg_491_NO_SHIFT_REG),
	.stall_out(rnode_490to491_ld__0_stall_out_reg_491_NO_SHIFT_REG),
	.data_in(rnode_1to490_ld__0_NO_SHIFT_REG),
	.data_out(rnode_490to491_ld__0_reg_491_NO_SHIFT_REG)
);

defparam rnode_490to491_ld__0_reg_491_fifo.DEPTH = 2;
defparam rnode_490to491_ld__0_reg_491_fifo.DATA_WIDTH = 32;
defparam rnode_490to491_ld__0_reg_491_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_490to491_ld__0_reg_491_fifo.IMPL = "ll_reg";

assign rnode_490to491_ld__0_reg_491_inputs_ready_NO_SHIFT_REG = rnode_1to490_ld__0_valid_out_NO_SHIFT_REG;
assign rnode_1to490_ld__0_stall_in_NO_SHIFT_REG = rnode_490to491_ld__0_stall_out_reg_491_NO_SHIFT_REG;
assign rnode_490to491_ld__0_stall_in_0_reg_491_NO_SHIFT_REG = ((rnode_490to491_ld__0_stall_in_0_NO_SHIFT_REG & ~(rnode_490to491_ld__0_consumed_0_NO_SHIFT_REG)) | (rnode_490to491_ld__0_stall_in_1_NO_SHIFT_REG & ~(rnode_490to491_ld__0_consumed_1_NO_SHIFT_REG)));
assign rnode_490to491_ld__0_valid_out_0_NO_SHIFT_REG = (rnode_490to491_ld__0_valid_out_0_reg_491_NO_SHIFT_REG & ~(rnode_490to491_ld__0_consumed_0_NO_SHIFT_REG));
assign rnode_490to491_ld__0_valid_out_1_NO_SHIFT_REG = (rnode_490to491_ld__0_valid_out_0_reg_491_NO_SHIFT_REG & ~(rnode_490to491_ld__0_consumed_1_NO_SHIFT_REG));
assign rnode_490to491_ld__0_NO_SHIFT_REG = rnode_490to491_ld__0_reg_491_NO_SHIFT_REG;
assign rnode_490to491_ld__1_NO_SHIFT_REG = rnode_490to491_ld__0_reg_491_NO_SHIFT_REG;
assign rci_rcnode_3to491_rc2_cmp14_0_reg_3[0] = rnode_1to3_cmp14_2_NO_SHIFT_REG;
assign rci_rcnode_3to491_rc2_cmp14_0_reg_3[1] = rnode_1to3_cmp1116_NEG_1_NO_SHIFT_REG;
assign rci_rcnode_3to491_rc2_cmp14_0_reg_3[2] = rnode_1to3_cmp29_not_not_1_NO_SHIFT_REG;
assign rci_rcnode_3to491_rc2_cmp14_0_reg_3[3] = rnode_1to3__phi_decision_xor_1_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_490to491_ld__0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_490to491_ld__0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_490to491_ld__0_consumed_0_NO_SHIFT_REG <= (rnode_490to491_ld__0_valid_out_0_reg_491_NO_SHIFT_REG & (rnode_490to491_ld__0_consumed_0_NO_SHIFT_REG | ~(rnode_490to491_ld__0_stall_in_0_NO_SHIFT_REG)) & rnode_490to491_ld__0_stall_in_0_reg_491_NO_SHIFT_REG);
		rnode_490to491_ld__0_consumed_1_NO_SHIFT_REG <= (rnode_490to491_ld__0_valid_out_0_reg_491_NO_SHIFT_REG & (rnode_490to491_ld__0_consumed_1_NO_SHIFT_REG | ~(rnode_490to491_ld__0_stall_in_1_NO_SHIFT_REG)) & rnode_490to491_ld__0_stall_in_0_reg_491_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 488
//  * capacity = 488
 logic rcnode_3to491_rc2_cmp14_0_valid_out_NO_SHIFT_REG;
 logic rcnode_3to491_rc2_cmp14_0_stall_in_NO_SHIFT_REG;
 logic [3:0] rcnode_3to491_rc2_cmp14_0_NO_SHIFT_REG;
 logic rcnode_3to491_rc2_cmp14_0_reg_491_inputs_ready_NO_SHIFT_REG;
 logic [3:0] rcnode_3to491_rc2_cmp14_0_reg_491_NO_SHIFT_REG;
 logic rcnode_3to491_rc2_cmp14_0_valid_out_reg_491_NO_SHIFT_REG;
 logic rcnode_3to491_rc2_cmp14_0_stall_in_reg_491_NO_SHIFT_REG;
 logic rcnode_3to491_rc2_cmp14_0_stall_out_0_reg_491_IP_NO_SHIFT_REG;
 logic rcnode_3to491_rc2_cmp14_0_stall_out_0_reg_491_NO_SHIFT_REG;

acl_data_fifo rcnode_3to491_rc2_cmp14_0_reg_491_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_3to491_rc2_cmp14_0_reg_491_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_3to491_rc2_cmp14_0_stall_in_reg_491_NO_SHIFT_REG),
	.valid_out(rcnode_3to491_rc2_cmp14_0_valid_out_reg_491_NO_SHIFT_REG),
	.stall_out(rcnode_3to491_rc2_cmp14_0_stall_out_0_reg_491_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_3to491_rc2_cmp14_0_reg_3),
	.data_out(rcnode_3to491_rc2_cmp14_0_reg_491_NO_SHIFT_REG)
);

defparam rcnode_3to491_rc2_cmp14_0_reg_491_fifo.DEPTH = 489;
defparam rcnode_3to491_rc2_cmp14_0_reg_491_fifo.DATA_WIDTH = 4;
defparam rcnode_3to491_rc2_cmp14_0_reg_491_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_3to491_rc2_cmp14_0_reg_491_fifo.IMPL = "ram";

assign rcnode_3to491_rc2_cmp14_0_reg_491_inputs_ready_NO_SHIFT_REG = (rnode_1to3_cmp14_0_valid_out_2_NO_SHIFT_REG & rnode_1to3_cmp1116_NEG_0_valid_out_1_NO_SHIFT_REG & rnode_1to3_cmp29_not_not_0_valid_out_1_NO_SHIFT_REG & rnode_1to3__phi_decision_xor_0_valid_out_1_NO_SHIFT_REG);
assign rcnode_3to491_rc2_cmp14_0_stall_out_0_reg_491_NO_SHIFT_REG = (~(rcnode_3to491_rc2_cmp14_0_reg_491_inputs_ready_NO_SHIFT_REG) | rcnode_3to491_rc2_cmp14_0_stall_out_0_reg_491_IP_NO_SHIFT_REG);
assign rnode_1to3_cmp14_0_stall_in_2_NO_SHIFT_REG = rcnode_3to491_rc2_cmp14_0_stall_out_0_reg_491_NO_SHIFT_REG;
assign rnode_1to3_cmp1116_NEG_0_stall_in_1_NO_SHIFT_REG = rcnode_3to491_rc2_cmp14_0_stall_out_0_reg_491_NO_SHIFT_REG;
assign rnode_1to3_cmp29_not_not_0_stall_in_1_NO_SHIFT_REG = rcnode_3to491_rc2_cmp14_0_stall_out_0_reg_491_NO_SHIFT_REG;
assign rnode_1to3__phi_decision_xor_0_stall_in_1_NO_SHIFT_REG = rcnode_3to491_rc2_cmp14_0_stall_out_0_reg_491_NO_SHIFT_REG;
assign rcnode_3to491_rc2_cmp14_0_NO_SHIFT_REG = rcnode_3to491_rc2_cmp14_0_reg_491_NO_SHIFT_REG;
assign rcnode_3to491_rc2_cmp14_0_stall_in_reg_491_NO_SHIFT_REG = rcnode_3to491_rc2_cmp14_0_stall_in_NO_SHIFT_REG;
assign rcnode_3to491_rc2_cmp14_0_valid_out_NO_SHIFT_REG = rcnode_3to491_rc2_cmp14_0_valid_out_reg_491_NO_SHIFT_REG;

// Register node:
//  * latency = 488
//  * capacity = 488
 logic rnode_3to491_cmp29_not_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to491_cmp29_not_0_stall_in_NO_SHIFT_REG;
 logic rnode_3to491_cmp29_not_0_NO_SHIFT_REG;
 logic rnode_3to491_cmp29_not_0_reg_491_inputs_ready_NO_SHIFT_REG;
 logic rnode_3to491_cmp29_not_0_reg_491_NO_SHIFT_REG;
 logic rnode_3to491_cmp29_not_0_valid_out_reg_491_NO_SHIFT_REG;
 logic rnode_3to491_cmp29_not_0_stall_in_reg_491_NO_SHIFT_REG;
 logic rnode_3to491_cmp29_not_0_stall_out_reg_491_NO_SHIFT_REG;

acl_data_fifo rnode_3to491_cmp29_not_0_reg_491_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to491_cmp29_not_0_reg_491_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to491_cmp29_not_0_stall_in_reg_491_NO_SHIFT_REG),
	.valid_out(rnode_3to491_cmp29_not_0_valid_out_reg_491_NO_SHIFT_REG),
	.stall_out(rnode_3to491_cmp29_not_0_stall_out_reg_491_NO_SHIFT_REG),
	.data_in(rnode_1to3_cmp29_not_1_NO_SHIFT_REG),
	.data_out(rnode_3to491_cmp29_not_0_reg_491_NO_SHIFT_REG)
);

defparam rnode_3to491_cmp29_not_0_reg_491_fifo.DEPTH = 489;
defparam rnode_3to491_cmp29_not_0_reg_491_fifo.DATA_WIDTH = 1;
defparam rnode_3to491_cmp29_not_0_reg_491_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_3to491_cmp29_not_0_reg_491_fifo.IMPL = "ram";

assign rnode_3to491_cmp29_not_0_reg_491_inputs_ready_NO_SHIFT_REG = rnode_1to3_cmp29_not_0_valid_out_1_NO_SHIFT_REG;
assign rnode_1to3_cmp29_not_0_stall_in_1_NO_SHIFT_REG = rnode_3to491_cmp29_not_0_stall_out_reg_491_NO_SHIFT_REG;
assign rnode_3to491_cmp29_not_0_NO_SHIFT_REG = rnode_3to491_cmp29_not_0_reg_491_NO_SHIFT_REG;
assign rnode_3to491_cmp29_not_0_stall_in_reg_491_NO_SHIFT_REG = rnode_3to491_cmp29_not_0_stall_in_NO_SHIFT_REG;
assign rnode_3to491_cmp29_not_0_valid_out_NO_SHIFT_REG = rnode_3to491_cmp29_not_0_valid_out_reg_491_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_162to163_channelCounter_024_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_162to163_channelCounter_024_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_162to163_channelCounter_024_0_NO_SHIFT_REG;
 logic rnode_162to163_channelCounter_024_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_162to163_channelCounter_024_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_162to163_channelCounter_024_1_NO_SHIFT_REG;
 logic rnode_162to163_channelCounter_024_0_reg_163_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_162to163_channelCounter_024_0_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_channelCounter_024_0_valid_out_0_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_channelCounter_024_0_stall_in_0_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_channelCounter_024_0_stall_out_reg_163_NO_SHIFT_REG;
 reg rnode_162to163_channelCounter_024_0_consumed_0_NO_SHIFT_REG;
 reg rnode_162to163_channelCounter_024_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_162to163_channelCounter_024_0_reg_163_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_162to163_channelCounter_024_0_reg_163_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_162to163_channelCounter_024_0_stall_in_0_reg_163_NO_SHIFT_REG),
	.valid_out(rnode_162to163_channelCounter_024_0_valid_out_0_reg_163_NO_SHIFT_REG),
	.stall_out(rnode_162to163_channelCounter_024_0_stall_out_reg_163_NO_SHIFT_REG),
	.data_in(rnode_1to162_channelCounter_024_0_NO_SHIFT_REG),
	.data_out(rnode_162to163_channelCounter_024_0_reg_163_NO_SHIFT_REG)
);

defparam rnode_162to163_channelCounter_024_0_reg_163_fifo.DEPTH = 1;
defparam rnode_162to163_channelCounter_024_0_reg_163_fifo.DATA_WIDTH = 32;
defparam rnode_162to163_channelCounter_024_0_reg_163_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_162to163_channelCounter_024_0_reg_163_fifo.IMPL = "ll_reg";

assign rnode_162to163_channelCounter_024_0_reg_163_inputs_ready_NO_SHIFT_REG = rnode_1to162_channelCounter_024_0_valid_out_NO_SHIFT_REG;
assign rnode_1to162_channelCounter_024_0_stall_in_NO_SHIFT_REG = rnode_162to163_channelCounter_024_0_stall_out_reg_163_NO_SHIFT_REG;
assign rnode_162to163_channelCounter_024_0_stall_in_0_reg_163_NO_SHIFT_REG = ((rnode_162to163_channelCounter_024_0_stall_in_0_NO_SHIFT_REG & ~(rnode_162to163_channelCounter_024_0_consumed_0_NO_SHIFT_REG)) | (rnode_162to163_channelCounter_024_0_stall_in_1_NO_SHIFT_REG & ~(rnode_162to163_channelCounter_024_0_consumed_1_NO_SHIFT_REG)));
assign rnode_162to163_channelCounter_024_0_valid_out_0_NO_SHIFT_REG = (rnode_162to163_channelCounter_024_0_valid_out_0_reg_163_NO_SHIFT_REG & ~(rnode_162to163_channelCounter_024_0_consumed_0_NO_SHIFT_REG));
assign rnode_162to163_channelCounter_024_0_valid_out_1_NO_SHIFT_REG = (rnode_162to163_channelCounter_024_0_valid_out_0_reg_163_NO_SHIFT_REG & ~(rnode_162to163_channelCounter_024_0_consumed_1_NO_SHIFT_REG));
assign rnode_162to163_channelCounter_024_0_NO_SHIFT_REG = rnode_162to163_channelCounter_024_0_reg_163_NO_SHIFT_REG;
assign rnode_162to163_channelCounter_024_1_NO_SHIFT_REG = rnode_162to163_channelCounter_024_0_reg_163_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_162to163_channelCounter_024_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_162to163_channelCounter_024_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_162to163_channelCounter_024_0_consumed_0_NO_SHIFT_REG <= (rnode_162to163_channelCounter_024_0_valid_out_0_reg_163_NO_SHIFT_REG & (rnode_162to163_channelCounter_024_0_consumed_0_NO_SHIFT_REG | ~(rnode_162to163_channelCounter_024_0_stall_in_0_NO_SHIFT_REG)) & rnode_162to163_channelCounter_024_0_stall_in_0_reg_163_NO_SHIFT_REG);
		rnode_162to163_channelCounter_024_0_consumed_1_NO_SHIFT_REG <= (rnode_162to163_channelCounter_024_0_valid_out_0_reg_163_NO_SHIFT_REG & (rnode_162to163_channelCounter_024_0_consumed_1_NO_SHIFT_REG | ~(rnode_162to163_channelCounter_024_0_stall_in_1_NO_SHIFT_REG)) & rnode_162to163_channelCounter_024_0_stall_in_0_reg_163_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_162to163_heightCounter_120_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_162to163_heightCounter_120_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_162to163_heightCounter_120_0_NO_SHIFT_REG;
 logic rnode_162to163_heightCounter_120_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_162to163_heightCounter_120_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_162to163_heightCounter_120_1_NO_SHIFT_REG;
 logic rnode_162to163_heightCounter_120_0_reg_163_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_162to163_heightCounter_120_0_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_heightCounter_120_0_valid_out_0_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_heightCounter_120_0_stall_in_0_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_heightCounter_120_0_stall_out_reg_163_NO_SHIFT_REG;
 reg rnode_162to163_heightCounter_120_0_consumed_0_NO_SHIFT_REG;
 reg rnode_162to163_heightCounter_120_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_162to163_heightCounter_120_0_reg_163_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_162to163_heightCounter_120_0_reg_163_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_162to163_heightCounter_120_0_stall_in_0_reg_163_NO_SHIFT_REG),
	.valid_out(rnode_162to163_heightCounter_120_0_valid_out_0_reg_163_NO_SHIFT_REG),
	.stall_out(rnode_162to163_heightCounter_120_0_stall_out_reg_163_NO_SHIFT_REG),
	.data_in(rnode_1to162_heightCounter_120_0_NO_SHIFT_REG),
	.data_out(rnode_162to163_heightCounter_120_0_reg_163_NO_SHIFT_REG)
);

defparam rnode_162to163_heightCounter_120_0_reg_163_fifo.DEPTH = 1;
defparam rnode_162to163_heightCounter_120_0_reg_163_fifo.DATA_WIDTH = 32;
defparam rnode_162to163_heightCounter_120_0_reg_163_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_162to163_heightCounter_120_0_reg_163_fifo.IMPL = "ll_reg";

assign rnode_162to163_heightCounter_120_0_reg_163_inputs_ready_NO_SHIFT_REG = rnode_1to162_heightCounter_120_0_valid_out_NO_SHIFT_REG;
assign rnode_1to162_heightCounter_120_0_stall_in_NO_SHIFT_REG = rnode_162to163_heightCounter_120_0_stall_out_reg_163_NO_SHIFT_REG;
assign rnode_162to163_heightCounter_120_0_stall_in_0_reg_163_NO_SHIFT_REG = ((rnode_162to163_heightCounter_120_0_stall_in_0_NO_SHIFT_REG & ~(rnode_162to163_heightCounter_120_0_consumed_0_NO_SHIFT_REG)) | (rnode_162to163_heightCounter_120_0_stall_in_1_NO_SHIFT_REG & ~(rnode_162to163_heightCounter_120_0_consumed_1_NO_SHIFT_REG)));
assign rnode_162to163_heightCounter_120_0_valid_out_0_NO_SHIFT_REG = (rnode_162to163_heightCounter_120_0_valid_out_0_reg_163_NO_SHIFT_REG & ~(rnode_162to163_heightCounter_120_0_consumed_0_NO_SHIFT_REG));
assign rnode_162to163_heightCounter_120_0_valid_out_1_NO_SHIFT_REG = (rnode_162to163_heightCounter_120_0_valid_out_0_reg_163_NO_SHIFT_REG & ~(rnode_162to163_heightCounter_120_0_consumed_1_NO_SHIFT_REG));
assign rnode_162to163_heightCounter_120_0_NO_SHIFT_REG = rnode_162to163_heightCounter_120_0_reg_163_NO_SHIFT_REG;
assign rnode_162to163_heightCounter_120_1_NO_SHIFT_REG = rnode_162to163_heightCounter_120_0_reg_163_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_162to163_heightCounter_120_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_162to163_heightCounter_120_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_162to163_heightCounter_120_0_consumed_0_NO_SHIFT_REG <= (rnode_162to163_heightCounter_120_0_valid_out_0_reg_163_NO_SHIFT_REG & (rnode_162to163_heightCounter_120_0_consumed_0_NO_SHIFT_REG | ~(rnode_162to163_heightCounter_120_0_stall_in_0_NO_SHIFT_REG)) & rnode_162to163_heightCounter_120_0_stall_in_0_reg_163_NO_SHIFT_REG);
		rnode_162to163_heightCounter_120_0_consumed_1_NO_SHIFT_REG <= (rnode_162to163_heightCounter_120_0_valid_out_0_reg_163_NO_SHIFT_REG & (rnode_162to163_heightCounter_120_0_consumed_1_NO_SHIFT_REG | ~(rnode_162to163_heightCounter_120_0_stall_in_1_NO_SHIFT_REG)) & rnode_162to163_heightCounter_120_0_stall_in_0_reg_163_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_331to332__phi_decision_xor45_or_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_331to332__phi_decision_xor45_or_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_331to332__phi_decision_xor45_or_0_NO_SHIFT_REG;
 logic rnode_331to332__phi_decision_xor45_or_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_331to332__phi_decision_xor45_or_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_331to332__phi_decision_xor45_or_1_NO_SHIFT_REG;
 logic rnode_331to332__phi_decision_xor45_or_0_reg_332_inputs_ready_NO_SHIFT_REG;
 logic rnode_331to332__phi_decision_xor45_or_0_reg_332_NO_SHIFT_REG;
 logic rnode_331to332__phi_decision_xor45_or_0_valid_out_0_reg_332_NO_SHIFT_REG;
 logic rnode_331to332__phi_decision_xor45_or_0_stall_in_0_reg_332_NO_SHIFT_REG;
 logic rnode_331to332__phi_decision_xor45_or_0_stall_out_reg_332_NO_SHIFT_REG;
 reg rnode_331to332__phi_decision_xor45_or_0_consumed_0_NO_SHIFT_REG;
 reg rnode_331to332__phi_decision_xor45_or_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_331to332__phi_decision_xor45_or_0_reg_332_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_331to332__phi_decision_xor45_or_0_reg_332_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_331to332__phi_decision_xor45_or_0_stall_in_0_reg_332_NO_SHIFT_REG),
	.valid_out(rnode_331to332__phi_decision_xor45_or_0_valid_out_0_reg_332_NO_SHIFT_REG),
	.stall_out(rnode_331to332__phi_decision_xor45_or_0_stall_out_reg_332_NO_SHIFT_REG),
	.data_in(rnode_1to331__phi_decision_xor45_or_0_NO_SHIFT_REG),
	.data_out(rnode_331to332__phi_decision_xor45_or_0_reg_332_NO_SHIFT_REG)
);

defparam rnode_331to332__phi_decision_xor45_or_0_reg_332_fifo.DEPTH = 2;
defparam rnode_331to332__phi_decision_xor45_or_0_reg_332_fifo.DATA_WIDTH = 1;
defparam rnode_331to332__phi_decision_xor45_or_0_reg_332_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_331to332__phi_decision_xor45_or_0_reg_332_fifo.IMPL = "ll_reg";

assign rnode_331to332__phi_decision_xor45_or_0_reg_332_inputs_ready_NO_SHIFT_REG = rnode_1to331__phi_decision_xor45_or_0_valid_out_NO_SHIFT_REG;
assign rnode_1to331__phi_decision_xor45_or_0_stall_in_NO_SHIFT_REG = rnode_331to332__phi_decision_xor45_or_0_stall_out_reg_332_NO_SHIFT_REG;
assign rnode_331to332__phi_decision_xor45_or_0_stall_in_0_reg_332_NO_SHIFT_REG = ((rnode_331to332__phi_decision_xor45_or_0_stall_in_0_NO_SHIFT_REG & ~(rnode_331to332__phi_decision_xor45_or_0_consumed_0_NO_SHIFT_REG)) | (rnode_331to332__phi_decision_xor45_or_0_stall_in_1_NO_SHIFT_REG & ~(rnode_331to332__phi_decision_xor45_or_0_consumed_1_NO_SHIFT_REG)));
assign rnode_331to332__phi_decision_xor45_or_0_valid_out_0_NO_SHIFT_REG = (rnode_331to332__phi_decision_xor45_or_0_valid_out_0_reg_332_NO_SHIFT_REG & ~(rnode_331to332__phi_decision_xor45_or_0_consumed_0_NO_SHIFT_REG));
assign rnode_331to332__phi_decision_xor45_or_0_valid_out_1_NO_SHIFT_REG = (rnode_331to332__phi_decision_xor45_or_0_valid_out_0_reg_332_NO_SHIFT_REG & ~(rnode_331to332__phi_decision_xor45_or_0_consumed_1_NO_SHIFT_REG));
assign rnode_331to332__phi_decision_xor45_or_0_NO_SHIFT_REG = rnode_331to332__phi_decision_xor45_or_0_reg_332_NO_SHIFT_REG;
assign rnode_331to332__phi_decision_xor45_or_1_NO_SHIFT_REG = rnode_331to332__phi_decision_xor45_or_0_reg_332_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_331to332__phi_decision_xor45_or_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_331to332__phi_decision_xor45_or_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_331to332__phi_decision_xor45_or_0_consumed_0_NO_SHIFT_REG <= (rnode_331to332__phi_decision_xor45_or_0_valid_out_0_reg_332_NO_SHIFT_REG & (rnode_331to332__phi_decision_xor45_or_0_consumed_0_NO_SHIFT_REG | ~(rnode_331to332__phi_decision_xor45_or_0_stall_in_0_NO_SHIFT_REG)) & rnode_331to332__phi_decision_xor45_or_0_stall_in_0_reg_332_NO_SHIFT_REG);
		rnode_331to332__phi_decision_xor45_or_0_consumed_1_NO_SHIFT_REG <= (rnode_331to332__phi_decision_xor45_or_0_valid_out_0_reg_332_NO_SHIFT_REG & (rnode_331to332__phi_decision_xor45_or_0_consumed_1_NO_SHIFT_REG | ~(rnode_331to332__phi_decision_xor45_or_0_stall_in_1_NO_SHIFT_REG)) & rnode_331to332__phi_decision_xor45_or_0_stall_in_0_reg_332_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb4_sub21_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb4_sub21_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb4_sub21_0_NO_SHIFT_REG;
 logic rnode_1to2_bb4_sub21_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb4_sub21_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_sub21_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_sub21_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_sub21_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb4_sub21_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb4_sub21_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb4_sub21_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb4_sub21_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb4_sub21_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb4_sub21),
	.data_out(rnode_1to2_bb4_sub21_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb4_sub21_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb4_sub21_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb4_sub21_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb4_sub21_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_bb4_sub21_0_reg_2_inputs_ready_NO_SHIFT_REG = local_bb4_sub21_valid_out;
assign local_bb4_sub21_stall_in = rnode_1to2_bb4_sub21_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb4_sub21_0_NO_SHIFT_REG = rnode_1to2_bb4_sub21_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb4_sub21_0_stall_in_reg_2_NO_SHIFT_REG = rnode_1to2_bb4_sub21_0_stall_in_NO_SHIFT_REG;
assign rnode_1to2_bb4_sub21_0_valid_out_NO_SHIFT_REG = rnode_1to2_bb4_sub21_0_valid_out_reg_2_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_162to163_widthCounter_217_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_162to163_widthCounter_217_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_162to163_widthCounter_217_0_NO_SHIFT_REG;
 logic rnode_162to163_widthCounter_217_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_162to163_widthCounter_217_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_162to163_widthCounter_217_1_NO_SHIFT_REG;
 logic rnode_162to163_widthCounter_217_0_reg_163_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_162to163_widthCounter_217_0_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_widthCounter_217_0_valid_out_0_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_widthCounter_217_0_stall_in_0_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_widthCounter_217_0_stall_out_reg_163_NO_SHIFT_REG;
 reg rnode_162to163_widthCounter_217_0_consumed_0_NO_SHIFT_REG;
 reg rnode_162to163_widthCounter_217_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_162to163_widthCounter_217_0_reg_163_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_162to163_widthCounter_217_0_reg_163_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_162to163_widthCounter_217_0_stall_in_0_reg_163_NO_SHIFT_REG),
	.valid_out(rnode_162to163_widthCounter_217_0_valid_out_0_reg_163_NO_SHIFT_REG),
	.stall_out(rnode_162to163_widthCounter_217_0_stall_out_reg_163_NO_SHIFT_REG),
	.data_in(rnode_2to162_widthCounter_217_0_NO_SHIFT_REG),
	.data_out(rnode_162to163_widthCounter_217_0_reg_163_NO_SHIFT_REG)
);

defparam rnode_162to163_widthCounter_217_0_reg_163_fifo.DEPTH = 1;
defparam rnode_162to163_widthCounter_217_0_reg_163_fifo.DATA_WIDTH = 32;
defparam rnode_162to163_widthCounter_217_0_reg_163_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_162to163_widthCounter_217_0_reg_163_fifo.IMPL = "ll_reg";

assign rnode_162to163_widthCounter_217_0_reg_163_inputs_ready_NO_SHIFT_REG = rnode_2to162_widthCounter_217_0_valid_out_NO_SHIFT_REG;
assign rnode_2to162_widthCounter_217_0_stall_in_NO_SHIFT_REG = rnode_162to163_widthCounter_217_0_stall_out_reg_163_NO_SHIFT_REG;
assign rnode_162to163_widthCounter_217_0_stall_in_0_reg_163_NO_SHIFT_REG = ((rnode_162to163_widthCounter_217_0_stall_in_0_NO_SHIFT_REG & ~(rnode_162to163_widthCounter_217_0_consumed_0_NO_SHIFT_REG)) | (rnode_162to163_widthCounter_217_0_stall_in_1_NO_SHIFT_REG & ~(rnode_162to163_widthCounter_217_0_consumed_1_NO_SHIFT_REG)));
assign rnode_162to163_widthCounter_217_0_valid_out_0_NO_SHIFT_REG = (rnode_162to163_widthCounter_217_0_valid_out_0_reg_163_NO_SHIFT_REG & ~(rnode_162to163_widthCounter_217_0_consumed_0_NO_SHIFT_REG));
assign rnode_162to163_widthCounter_217_0_valid_out_1_NO_SHIFT_REG = (rnode_162to163_widthCounter_217_0_valid_out_0_reg_163_NO_SHIFT_REG & ~(rnode_162to163_widthCounter_217_0_consumed_1_NO_SHIFT_REG));
assign rnode_162to163_widthCounter_217_0_NO_SHIFT_REG = rnode_162to163_widthCounter_217_0_reg_163_NO_SHIFT_REG;
assign rnode_162to163_widthCounter_217_1_NO_SHIFT_REG = rnode_162to163_widthCounter_217_0_reg_163_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_162to163_widthCounter_217_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_162to163_widthCounter_217_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_162to163_widthCounter_217_0_consumed_0_NO_SHIFT_REG <= (rnode_162to163_widthCounter_217_0_valid_out_0_reg_163_NO_SHIFT_REG & (rnode_162to163_widthCounter_217_0_consumed_0_NO_SHIFT_REG | ~(rnode_162to163_widthCounter_217_0_stall_in_0_NO_SHIFT_REG)) & rnode_162to163_widthCounter_217_0_stall_in_0_reg_163_NO_SHIFT_REG);
		rnode_162to163_widthCounter_217_0_consumed_1_NO_SHIFT_REG <= (rnode_162to163_widthCounter_217_0_valid_out_0_reg_163_NO_SHIFT_REG & (rnode_162to163_widthCounter_217_0_consumed_1_NO_SHIFT_REG | ~(rnode_162to163_widthCounter_217_0_stall_in_1_NO_SHIFT_REG)) & rnode_162to163_widthCounter_217_0_stall_in_0_reg_163_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb4_cmp17_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp17_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp17_0_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp17_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp17_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp17_1_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp17_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp17_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp17_0_valid_out_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp17_0_stall_in_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp17_0_stall_out_reg_3_NO_SHIFT_REG;
 reg rnode_2to3_bb4_cmp17_0_consumed_0_NO_SHIFT_REG;
 reg rnode_2to3_bb4_cmp17_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb4_cmp17_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb4_cmp17_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb4_cmp17_0_stall_in_0_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb4_cmp17_0_valid_out_0_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb4_cmp17_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb4_cmp17),
	.data_out(rnode_2to3_bb4_cmp17_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb4_cmp17_0_reg_3_fifo.DEPTH = 2;
defparam rnode_2to3_bb4_cmp17_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_2to3_bb4_cmp17_0_reg_3_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_2to3_bb4_cmp17_0_reg_3_fifo.IMPL = "ll_reg";

assign rnode_2to3_bb4_cmp17_0_reg_3_inputs_ready_NO_SHIFT_REG = local_bb4_cmp17_valid_out;
assign local_bb4_cmp17_stall_in = rnode_2to3_bb4_cmp17_0_stall_out_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb4_cmp17_0_stall_in_0_reg_3_NO_SHIFT_REG = ((rnode_2to3_bb4_cmp17_0_stall_in_0_NO_SHIFT_REG & ~(rnode_2to3_bb4_cmp17_0_consumed_0_NO_SHIFT_REG)) | (rnode_2to3_bb4_cmp17_0_stall_in_1_NO_SHIFT_REG & ~(rnode_2to3_bb4_cmp17_0_consumed_1_NO_SHIFT_REG)));
assign rnode_2to3_bb4_cmp17_0_valid_out_0_NO_SHIFT_REG = (rnode_2to3_bb4_cmp17_0_valid_out_0_reg_3_NO_SHIFT_REG & ~(rnode_2to3_bb4_cmp17_0_consumed_0_NO_SHIFT_REG));
assign rnode_2to3_bb4_cmp17_0_valid_out_1_NO_SHIFT_REG = (rnode_2to3_bb4_cmp17_0_valid_out_0_reg_3_NO_SHIFT_REG & ~(rnode_2to3_bb4_cmp17_0_consumed_1_NO_SHIFT_REG));
assign rnode_2to3_bb4_cmp17_0_NO_SHIFT_REG = rnode_2to3_bb4_cmp17_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb4_cmp17_1_NO_SHIFT_REG = rnode_2to3_bb4_cmp17_0_reg_3_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_2to3_bb4_cmp17_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_2to3_bb4_cmp17_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_2to3_bb4_cmp17_0_consumed_0_NO_SHIFT_REG <= (rnode_2to3_bb4_cmp17_0_valid_out_0_reg_3_NO_SHIFT_REG & (rnode_2to3_bb4_cmp17_0_consumed_0_NO_SHIFT_REG | ~(rnode_2to3_bb4_cmp17_0_stall_in_0_NO_SHIFT_REG)) & rnode_2to3_bb4_cmp17_0_stall_in_0_reg_3_NO_SHIFT_REG);
		rnode_2to3_bb4_cmp17_0_consumed_1_NO_SHIFT_REG <= (rnode_2to3_bb4_cmp17_0_valid_out_0_reg_3_NO_SHIFT_REG & (rnode_2to3_bb4_cmp17_0_consumed_1_NO_SHIFT_REG | ~(rnode_2to3_bb4_cmp17_0_stall_in_1_NO_SHIFT_REG)) & rnode_2to3_bb4_cmp17_0_stall_in_0_reg_3_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_162to163_ld__u3_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_162to163_ld__u3_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_162to163_ld__u3_0_NO_SHIFT_REG;
 logic rnode_162to163_ld__u3_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_162to163_ld__u3_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_162to163_ld__u3_1_NO_SHIFT_REG;
 logic rnode_162to163_ld__u3_0_reg_163_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_162to163_ld__u3_0_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_ld__u3_0_valid_out_0_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_ld__u3_0_stall_in_0_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_ld__u3_0_stall_out_reg_163_NO_SHIFT_REG;
 reg rnode_162to163_ld__u3_0_consumed_0_NO_SHIFT_REG;
 reg rnode_162to163_ld__u3_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_162to163_ld__u3_0_reg_163_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_162to163_ld__u3_0_reg_163_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_162to163_ld__u3_0_stall_in_0_reg_163_NO_SHIFT_REG),
	.valid_out(rnode_162to163_ld__u3_0_valid_out_0_reg_163_NO_SHIFT_REG),
	.stall_out(rnode_162to163_ld__u3_0_stall_out_reg_163_NO_SHIFT_REG),
	.data_in(rnode_2to162_ld__u3_0_NO_SHIFT_REG),
	.data_out(rnode_162to163_ld__u3_0_reg_163_NO_SHIFT_REG)
);

defparam rnode_162to163_ld__u3_0_reg_163_fifo.DEPTH = 1;
defparam rnode_162to163_ld__u3_0_reg_163_fifo.DATA_WIDTH = 32;
defparam rnode_162to163_ld__u3_0_reg_163_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_162to163_ld__u3_0_reg_163_fifo.IMPL = "ll_reg";

assign rnode_162to163_ld__u3_0_reg_163_inputs_ready_NO_SHIFT_REG = rnode_2to162_ld__u3_0_valid_out_NO_SHIFT_REG;
assign rnode_2to162_ld__u3_0_stall_in_NO_SHIFT_REG = rnode_162to163_ld__u3_0_stall_out_reg_163_NO_SHIFT_REG;
assign rnode_162to163_ld__u3_0_stall_in_0_reg_163_NO_SHIFT_REG = ((rnode_162to163_ld__u3_0_stall_in_0_NO_SHIFT_REG & ~(rnode_162to163_ld__u3_0_consumed_0_NO_SHIFT_REG)) | (rnode_162to163_ld__u3_0_stall_in_1_NO_SHIFT_REG & ~(rnode_162to163_ld__u3_0_consumed_1_NO_SHIFT_REG)));
assign rnode_162to163_ld__u3_0_valid_out_0_NO_SHIFT_REG = (rnode_162to163_ld__u3_0_valid_out_0_reg_163_NO_SHIFT_REG & ~(rnode_162to163_ld__u3_0_consumed_0_NO_SHIFT_REG));
assign rnode_162to163_ld__u3_0_valid_out_1_NO_SHIFT_REG = (rnode_162to163_ld__u3_0_valid_out_0_reg_163_NO_SHIFT_REG & ~(rnode_162to163_ld__u3_0_consumed_1_NO_SHIFT_REG));
assign rnode_162to163_ld__u3_0_NO_SHIFT_REG = rnode_162to163_ld__u3_0_reg_163_NO_SHIFT_REG;
assign rnode_162to163_ld__u3_1_NO_SHIFT_REG = rnode_162to163_ld__u3_0_reg_163_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_162to163_ld__u3_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_162to163_ld__u3_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_162to163_ld__u3_0_consumed_0_NO_SHIFT_REG <= (rnode_162to163_ld__u3_0_valid_out_0_reg_163_NO_SHIFT_REG & (rnode_162to163_ld__u3_0_consumed_0_NO_SHIFT_REG | ~(rnode_162to163_ld__u3_0_stall_in_0_NO_SHIFT_REG)) & rnode_162to163_ld__u3_0_stall_in_0_reg_163_NO_SHIFT_REG);
		rnode_162to163_ld__u3_0_consumed_1_NO_SHIFT_REG <= (rnode_162to163_ld__u3_0_valid_out_0_reg_163_NO_SHIFT_REG & (rnode_162to163_ld__u3_0_consumed_1_NO_SHIFT_REG | ~(rnode_162to163_ld__u3_0_stall_in_1_NO_SHIFT_REG)) & rnode_162to163_ld__u3_0_stall_in_0_reg_163_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 161
//  * capacity = 161
 logic rnode_330to491_c0_exe1_0_valid_out_NO_SHIFT_REG;
 logic rnode_330to491_c0_exe1_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_330to491_c0_exe1_0_NO_SHIFT_REG;
 logic rnode_330to491_c0_exe1_0_reg_491_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_330to491_c0_exe1_0_reg_491_NO_SHIFT_REG;
 logic rnode_330to491_c0_exe1_0_valid_out_reg_491_NO_SHIFT_REG;
 logic rnode_330to491_c0_exe1_0_stall_in_reg_491_NO_SHIFT_REG;
 logic rnode_330to491_c0_exe1_0_stall_out_reg_491_NO_SHIFT_REG;

acl_data_fifo rnode_330to491_c0_exe1_0_reg_491_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_330to491_c0_exe1_0_reg_491_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_330to491_c0_exe1_0_stall_in_reg_491_NO_SHIFT_REG),
	.valid_out(rnode_330to491_c0_exe1_0_valid_out_reg_491_NO_SHIFT_REG),
	.stall_out(rnode_330to491_c0_exe1_0_stall_out_reg_491_NO_SHIFT_REG),
	.data_in(rnode_329to330_c0_exe1_1_NO_SHIFT_REG),
	.data_out(rnode_330to491_c0_exe1_0_reg_491_NO_SHIFT_REG)
);

defparam rnode_330to491_c0_exe1_0_reg_491_fifo.DEPTH = 162;
defparam rnode_330to491_c0_exe1_0_reg_491_fifo.DATA_WIDTH = 32;
defparam rnode_330to491_c0_exe1_0_reg_491_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_330to491_c0_exe1_0_reg_491_fifo.IMPL = "ram";

assign rnode_330to491_c0_exe1_0_reg_491_inputs_ready_NO_SHIFT_REG = rnode_329to330_c0_exe1_0_valid_out_1_NO_SHIFT_REG;
assign rnode_329to330_c0_exe1_0_stall_in_1_NO_SHIFT_REG = rnode_330to491_c0_exe1_0_stall_out_reg_491_NO_SHIFT_REG;
assign rnode_330to491_c0_exe1_0_NO_SHIFT_REG = rnode_330to491_c0_exe1_0_reg_491_NO_SHIFT_REG;
assign rnode_330to491_c0_exe1_0_stall_in_reg_491_NO_SHIFT_REG = rnode_330to491_c0_exe1_0_stall_in_NO_SHIFT_REG;
assign rnode_330to491_c0_exe1_0_valid_out_NO_SHIFT_REG = rnode_330to491_c0_exe1_0_valid_out_reg_491_NO_SHIFT_REG;

// Register node:
//  * latency = 159
//  * capacity = 159
 logic rnode_332to491__phi_decision_xor45_or_0_valid_out_NO_SHIFT_REG;
 logic rnode_332to491__phi_decision_xor45_or_0_stall_in_NO_SHIFT_REG;
 logic rnode_332to491__phi_decision_xor45_or_0_NO_SHIFT_REG;
 logic rnode_332to491__phi_decision_xor45_or_0_reg_491_inputs_ready_NO_SHIFT_REG;
 logic rnode_332to491__phi_decision_xor45_or_0_reg_491_NO_SHIFT_REG;
 logic rnode_332to491__phi_decision_xor45_or_0_valid_out_reg_491_NO_SHIFT_REG;
 logic rnode_332to491__phi_decision_xor45_or_0_stall_in_reg_491_NO_SHIFT_REG;
 logic rnode_332to491__phi_decision_xor45_or_0_stall_out_reg_491_NO_SHIFT_REG;

acl_data_fifo rnode_332to491__phi_decision_xor45_or_0_reg_491_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_332to491__phi_decision_xor45_or_0_reg_491_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_332to491__phi_decision_xor45_or_0_stall_in_reg_491_NO_SHIFT_REG),
	.valid_out(rnode_332to491__phi_decision_xor45_or_0_valid_out_reg_491_NO_SHIFT_REG),
	.stall_out(rnode_332to491__phi_decision_xor45_or_0_stall_out_reg_491_NO_SHIFT_REG),
	.data_in(rnode_331to332__phi_decision_xor45_or_1_NO_SHIFT_REG),
	.data_out(rnode_332to491__phi_decision_xor45_or_0_reg_491_NO_SHIFT_REG)
);

defparam rnode_332to491__phi_decision_xor45_or_0_reg_491_fifo.DEPTH = 160;
defparam rnode_332to491__phi_decision_xor45_or_0_reg_491_fifo.DATA_WIDTH = 1;
defparam rnode_332to491__phi_decision_xor45_or_0_reg_491_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_332to491__phi_decision_xor45_or_0_reg_491_fifo.IMPL = "ram";

assign rnode_332to491__phi_decision_xor45_or_0_reg_491_inputs_ready_NO_SHIFT_REG = rnode_331to332__phi_decision_xor45_or_0_valid_out_1_NO_SHIFT_REG;
assign rnode_331to332__phi_decision_xor45_or_0_stall_in_1_NO_SHIFT_REG = rnode_332to491__phi_decision_xor45_or_0_stall_out_reg_491_NO_SHIFT_REG;
assign rnode_332to491__phi_decision_xor45_or_0_NO_SHIFT_REG = rnode_332to491__phi_decision_xor45_or_0_reg_491_NO_SHIFT_REG;
assign rnode_332to491__phi_decision_xor45_or_0_stall_in_reg_491_NO_SHIFT_REG = rnode_332to491__phi_decision_xor45_or_0_stall_in_NO_SHIFT_REG;
assign rnode_332to491__phi_decision_xor45_or_0_valid_out_NO_SHIFT_REG = rnode_332to491__phi_decision_xor45_or_0_valid_out_reg_491_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb4_cmp23_valid_out;
wire local_bb4_cmp23_stall_in;
wire local_bb4_cmp23_inputs_ready;
wire local_bb4_cmp23_stall_local;
wire local_bb4_cmp23;

assign local_bb4_cmp23_inputs_ready = (rnode_1to2_bb4_sub21_0_valid_out_NO_SHIFT_REG & rnode_1to2_ld__u3_0_valid_out_1_NO_SHIFT_REG);
assign local_bb4_cmp23 = ($signed(rnode_1to2_bb4_sub21_0_NO_SHIFT_REG) < $signed(rnode_1to2_ld__u3_1_NO_SHIFT_REG));
assign local_bb4_cmp23_valid_out = local_bb4_cmp23_inputs_ready;
assign local_bb4_cmp23_stall_local = local_bb4_cmp23_stall_in;
assign rnode_1to2_bb4_sub21_0_stall_in_NO_SHIFT_REG = (local_bb4_cmp23_stall_local | ~(local_bb4_cmp23_inputs_ready));
assign rnode_1to2_ld__u3_0_stall_in_1_NO_SHIFT_REG = (local_bb4_cmp23_stall_local | ~(local_bb4_cmp23_inputs_ready));

// Register node:
//  * latency = 166
//  * capacity = 166
 logic rnode_163to329_widthCounter_217_0_valid_out_NO_SHIFT_REG;
 logic rnode_163to329_widthCounter_217_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_163to329_widthCounter_217_0_NO_SHIFT_REG;
 logic rnode_163to329_widthCounter_217_0_reg_329_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_163to329_widthCounter_217_0_reg_329_NO_SHIFT_REG;
 logic rnode_163to329_widthCounter_217_0_valid_out_reg_329_NO_SHIFT_REG;
 logic rnode_163to329_widthCounter_217_0_stall_in_reg_329_NO_SHIFT_REG;
 logic rnode_163to329_widthCounter_217_0_stall_out_reg_329_NO_SHIFT_REG;

acl_data_fifo rnode_163to329_widthCounter_217_0_reg_329_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_163to329_widthCounter_217_0_reg_329_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_163to329_widthCounter_217_0_stall_in_reg_329_NO_SHIFT_REG),
	.valid_out(rnode_163to329_widthCounter_217_0_valid_out_reg_329_NO_SHIFT_REG),
	.stall_out(rnode_163to329_widthCounter_217_0_stall_out_reg_329_NO_SHIFT_REG),
	.data_in(rnode_162to163_widthCounter_217_1_NO_SHIFT_REG),
	.data_out(rnode_163to329_widthCounter_217_0_reg_329_NO_SHIFT_REG)
);

defparam rnode_163to329_widthCounter_217_0_reg_329_fifo.DEPTH = 167;
defparam rnode_163to329_widthCounter_217_0_reg_329_fifo.DATA_WIDTH = 32;
defparam rnode_163to329_widthCounter_217_0_reg_329_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_163to329_widthCounter_217_0_reg_329_fifo.IMPL = "ram";

assign rnode_163to329_widthCounter_217_0_reg_329_inputs_ready_NO_SHIFT_REG = rnode_162to163_widthCounter_217_0_valid_out_1_NO_SHIFT_REG;
assign rnode_162to163_widthCounter_217_0_stall_in_1_NO_SHIFT_REG = rnode_163to329_widthCounter_217_0_stall_out_reg_329_NO_SHIFT_REG;
assign rnode_163to329_widthCounter_217_0_NO_SHIFT_REG = rnode_163to329_widthCounter_217_0_reg_329_NO_SHIFT_REG;
assign rnode_163to329_widthCounter_217_0_stall_in_reg_329_NO_SHIFT_REG = rnode_163to329_widthCounter_217_0_stall_in_NO_SHIFT_REG;
assign rnode_163to329_widthCounter_217_0_valid_out_NO_SHIFT_REG = rnode_163to329_widthCounter_217_0_valid_out_reg_329_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb4_or_cond_stall_local;
wire local_bb4_or_cond;

assign local_bb4_or_cond = (rnode_1to3_cmp14_0_NO_SHIFT_REG | rnode_2to3_bb4_cmp17_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb4_not_or_cond_demorgan_stall_local;
wire local_bb4_not_or_cond_demorgan;
wire [95:0] rci_rcnode_163to491_rc1_channelCounter_024_0_reg_163;

assign local_bb4_not_or_cond_demorgan = (rnode_1to3_cmp14_1_NO_SHIFT_REG | rnode_2to3_bb4_cmp17_1_NO_SHIFT_REG);
assign rci_rcnode_163to491_rc1_channelCounter_024_0_reg_163[31:0] = rnode_162to163_channelCounter_024_1_NO_SHIFT_REG;
assign rci_rcnode_163to491_rc1_channelCounter_024_0_reg_163[63:32] = rnode_162to163_heightCounter_120_1_NO_SHIFT_REG;
assign rci_rcnode_163to491_rc1_channelCounter_024_0_reg_163[95:64] = rnode_162to163_ld__u3_1_NO_SHIFT_REG;

// Register node:
//  * latency = 328
//  * capacity = 328
 logic rcnode_163to491_rc1_channelCounter_024_0_valid_out_NO_SHIFT_REG;
 logic rcnode_163to491_rc1_channelCounter_024_0_stall_in_NO_SHIFT_REG;
 logic [95:0] rcnode_163to491_rc1_channelCounter_024_0_NO_SHIFT_REG;
 logic rcnode_163to491_rc1_channelCounter_024_0_reg_491_inputs_ready_NO_SHIFT_REG;
 logic [95:0] rcnode_163to491_rc1_channelCounter_024_0_reg_491_NO_SHIFT_REG;
 logic rcnode_163to491_rc1_channelCounter_024_0_valid_out_reg_491_NO_SHIFT_REG;
 logic rcnode_163to491_rc1_channelCounter_024_0_stall_in_reg_491_NO_SHIFT_REG;
 logic rcnode_163to491_rc1_channelCounter_024_0_stall_out_0_reg_491_IP_NO_SHIFT_REG;
 logic rcnode_163to491_rc1_channelCounter_024_0_stall_out_0_reg_491_NO_SHIFT_REG;

acl_data_fifo rcnode_163to491_rc1_channelCounter_024_0_reg_491_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_163to491_rc1_channelCounter_024_0_reg_491_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_163to491_rc1_channelCounter_024_0_stall_in_reg_491_NO_SHIFT_REG),
	.valid_out(rcnode_163to491_rc1_channelCounter_024_0_valid_out_reg_491_NO_SHIFT_REG),
	.stall_out(rcnode_163to491_rc1_channelCounter_024_0_stall_out_0_reg_491_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_163to491_rc1_channelCounter_024_0_reg_163),
	.data_out(rcnode_163to491_rc1_channelCounter_024_0_reg_491_NO_SHIFT_REG)
);

defparam rcnode_163to491_rc1_channelCounter_024_0_reg_491_fifo.DEPTH = 329;
defparam rcnode_163to491_rc1_channelCounter_024_0_reg_491_fifo.DATA_WIDTH = 96;
defparam rcnode_163to491_rc1_channelCounter_024_0_reg_491_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_163to491_rc1_channelCounter_024_0_reg_491_fifo.IMPL = "ram";

assign rcnode_163to491_rc1_channelCounter_024_0_reg_491_inputs_ready_NO_SHIFT_REG = (rnode_162to163_channelCounter_024_0_valid_out_1_NO_SHIFT_REG & rnode_162to163_heightCounter_120_0_valid_out_1_NO_SHIFT_REG & rnode_162to163_ld__u3_0_valid_out_1_NO_SHIFT_REG);
assign rcnode_163to491_rc1_channelCounter_024_0_stall_out_0_reg_491_NO_SHIFT_REG = (~(rcnode_163to491_rc1_channelCounter_024_0_reg_491_inputs_ready_NO_SHIFT_REG) | rcnode_163to491_rc1_channelCounter_024_0_stall_out_0_reg_491_IP_NO_SHIFT_REG);
assign rnode_162to163_channelCounter_024_0_stall_in_1_NO_SHIFT_REG = rcnode_163to491_rc1_channelCounter_024_0_stall_out_0_reg_491_NO_SHIFT_REG;
assign rnode_162to163_heightCounter_120_0_stall_in_1_NO_SHIFT_REG = rcnode_163to491_rc1_channelCounter_024_0_stall_out_0_reg_491_NO_SHIFT_REG;
assign rnode_162to163_ld__u3_0_stall_in_1_NO_SHIFT_REG = rcnode_163to491_rc1_channelCounter_024_0_stall_out_0_reg_491_NO_SHIFT_REG;
assign rcnode_163to491_rc1_channelCounter_024_0_NO_SHIFT_REG = rcnode_163to491_rc1_channelCounter_024_0_reg_491_NO_SHIFT_REG;
assign rcnode_163to491_rc1_channelCounter_024_0_stall_in_reg_491_NO_SHIFT_REG = rcnode_163to491_rc1_channelCounter_024_0_stall_in_NO_SHIFT_REG;
assign rcnode_163to491_rc1_channelCounter_024_0_valid_out_NO_SHIFT_REG = rcnode_163to491_rc1_channelCounter_024_0_valid_out_reg_491_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb4_cmp23_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp23_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp23_0_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp23_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp23_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp23_1_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp23_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp23_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp23_0_valid_out_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp23_0_stall_in_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp23_0_stall_out_reg_3_NO_SHIFT_REG;
 reg rnode_2to3_bb4_cmp23_0_consumed_0_NO_SHIFT_REG;
 reg rnode_2to3_bb4_cmp23_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb4_cmp23_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb4_cmp23_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb4_cmp23_0_stall_in_0_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb4_cmp23_0_valid_out_0_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb4_cmp23_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb4_cmp23),
	.data_out(rnode_2to3_bb4_cmp23_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb4_cmp23_0_reg_3_fifo.DEPTH = 2;
defparam rnode_2to3_bb4_cmp23_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_2to3_bb4_cmp23_0_reg_3_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_2to3_bb4_cmp23_0_reg_3_fifo.IMPL = "ll_reg";

assign rnode_2to3_bb4_cmp23_0_reg_3_inputs_ready_NO_SHIFT_REG = local_bb4_cmp23_valid_out;
assign local_bb4_cmp23_stall_in = rnode_2to3_bb4_cmp23_0_stall_out_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb4_cmp23_0_stall_in_0_reg_3_NO_SHIFT_REG = ((rnode_2to3_bb4_cmp23_0_stall_in_0_NO_SHIFT_REG & ~(rnode_2to3_bb4_cmp23_0_consumed_0_NO_SHIFT_REG)) | (rnode_2to3_bb4_cmp23_0_stall_in_1_NO_SHIFT_REG & ~(rnode_2to3_bb4_cmp23_0_consumed_1_NO_SHIFT_REG)));
assign rnode_2to3_bb4_cmp23_0_valid_out_0_NO_SHIFT_REG = (rnode_2to3_bb4_cmp23_0_valid_out_0_reg_3_NO_SHIFT_REG & ~(rnode_2to3_bb4_cmp23_0_consumed_0_NO_SHIFT_REG));
assign rnode_2to3_bb4_cmp23_0_valid_out_1_NO_SHIFT_REG = (rnode_2to3_bb4_cmp23_0_valid_out_0_reg_3_NO_SHIFT_REG & ~(rnode_2to3_bb4_cmp23_0_consumed_1_NO_SHIFT_REG));
assign rnode_2to3_bb4_cmp23_0_NO_SHIFT_REG = rnode_2to3_bb4_cmp23_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb4_cmp23_1_NO_SHIFT_REG = rnode_2to3_bb4_cmp23_0_reg_3_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_2to3_bb4_cmp23_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_2to3_bb4_cmp23_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_2to3_bb4_cmp23_0_consumed_0_NO_SHIFT_REG <= (rnode_2to3_bb4_cmp23_0_valid_out_0_reg_3_NO_SHIFT_REG & (rnode_2to3_bb4_cmp23_0_consumed_0_NO_SHIFT_REG | ~(rnode_2to3_bb4_cmp23_0_stall_in_0_NO_SHIFT_REG)) & rnode_2to3_bb4_cmp23_0_stall_in_0_reg_3_NO_SHIFT_REG);
		rnode_2to3_bb4_cmp23_0_consumed_1_NO_SHIFT_REG <= (rnode_2to3_bb4_cmp23_0_valid_out_0_reg_3_NO_SHIFT_REG & (rnode_2to3_bb4_cmp23_0_consumed_1_NO_SHIFT_REG | ~(rnode_2to3_bb4_cmp23_0_stall_in_1_NO_SHIFT_REG)) & rnode_2to3_bb4_cmp23_0_stall_in_0_reg_3_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_329to330_widthCounter_217_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_329to330_widthCounter_217_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_329to330_widthCounter_217_0_NO_SHIFT_REG;
 logic rnode_329to330_widthCounter_217_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_329to330_widthCounter_217_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_329to330_widthCounter_217_1_NO_SHIFT_REG;
 logic rnode_329to330_widthCounter_217_0_reg_330_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_329to330_widthCounter_217_0_reg_330_NO_SHIFT_REG;
 logic rnode_329to330_widthCounter_217_0_valid_out_0_reg_330_NO_SHIFT_REG;
 logic rnode_329to330_widthCounter_217_0_stall_in_0_reg_330_NO_SHIFT_REG;
 logic rnode_329to330_widthCounter_217_0_stall_out_reg_330_NO_SHIFT_REG;
 reg rnode_329to330_widthCounter_217_0_consumed_0_NO_SHIFT_REG;
 reg rnode_329to330_widthCounter_217_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_329to330_widthCounter_217_0_reg_330_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_329to330_widthCounter_217_0_reg_330_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_329to330_widthCounter_217_0_stall_in_0_reg_330_NO_SHIFT_REG),
	.valid_out(rnode_329to330_widthCounter_217_0_valid_out_0_reg_330_NO_SHIFT_REG),
	.stall_out(rnode_329to330_widthCounter_217_0_stall_out_reg_330_NO_SHIFT_REG),
	.data_in(rnode_163to329_widthCounter_217_0_NO_SHIFT_REG),
	.data_out(rnode_329to330_widthCounter_217_0_reg_330_NO_SHIFT_REG)
);

defparam rnode_329to330_widthCounter_217_0_reg_330_fifo.DEPTH = 1;
defparam rnode_329to330_widthCounter_217_0_reg_330_fifo.DATA_WIDTH = 32;
defparam rnode_329to330_widthCounter_217_0_reg_330_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_329to330_widthCounter_217_0_reg_330_fifo.IMPL = "ll_reg";

assign rnode_329to330_widthCounter_217_0_reg_330_inputs_ready_NO_SHIFT_REG = rnode_163to329_widthCounter_217_0_valid_out_NO_SHIFT_REG;
assign rnode_163to329_widthCounter_217_0_stall_in_NO_SHIFT_REG = rnode_329to330_widthCounter_217_0_stall_out_reg_330_NO_SHIFT_REG;
assign rnode_329to330_widthCounter_217_0_stall_in_0_reg_330_NO_SHIFT_REG = ((rnode_329to330_widthCounter_217_0_stall_in_0_NO_SHIFT_REG & ~(rnode_329to330_widthCounter_217_0_consumed_0_NO_SHIFT_REG)) | (rnode_329to330_widthCounter_217_0_stall_in_1_NO_SHIFT_REG & ~(rnode_329to330_widthCounter_217_0_consumed_1_NO_SHIFT_REG)));
assign rnode_329to330_widthCounter_217_0_valid_out_0_NO_SHIFT_REG = (rnode_329to330_widthCounter_217_0_valid_out_0_reg_330_NO_SHIFT_REG & ~(rnode_329to330_widthCounter_217_0_consumed_0_NO_SHIFT_REG));
assign rnode_329to330_widthCounter_217_0_valid_out_1_NO_SHIFT_REG = (rnode_329to330_widthCounter_217_0_valid_out_0_reg_330_NO_SHIFT_REG & ~(rnode_329to330_widthCounter_217_0_consumed_1_NO_SHIFT_REG));
assign rnode_329to330_widthCounter_217_0_NO_SHIFT_REG = rnode_329to330_widthCounter_217_0_reg_330_NO_SHIFT_REG;
assign rnode_329to330_widthCounter_217_1_NO_SHIFT_REG = rnode_329to330_widthCounter_217_0_reg_330_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_329to330_widthCounter_217_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_329to330_widthCounter_217_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_329to330_widthCounter_217_0_consumed_0_NO_SHIFT_REG <= (rnode_329to330_widthCounter_217_0_valid_out_0_reg_330_NO_SHIFT_REG & (rnode_329to330_widthCounter_217_0_consumed_0_NO_SHIFT_REG | ~(rnode_329to330_widthCounter_217_0_stall_in_0_NO_SHIFT_REG)) & rnode_329to330_widthCounter_217_0_stall_in_0_reg_330_NO_SHIFT_REG);
		rnode_329to330_widthCounter_217_0_consumed_1_NO_SHIFT_REG <= (rnode_329to330_widthCounter_217_0_valid_out_0_reg_330_NO_SHIFT_REG & (rnode_329to330_widthCounter_217_0_consumed_1_NO_SHIFT_REG | ~(rnode_329to330_widthCounter_217_0_stall_in_1_NO_SHIFT_REG)) & rnode_329to330_widthCounter_217_0_stall_in_0_reg_330_NO_SHIFT_REG);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb4_not_or_cond_stall_local;
wire local_bb4_not_or_cond;

assign local_bb4_not_or_cond = (local_bb4_not_or_cond_demorgan ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb4__28_not_stall_local;
wire local_bb4__28_not;

assign local_bb4__28_not = (rnode_2to3_bb4_cmp23_0_NO_SHIFT_REG | rnode_1to3_cmp29_not_not_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb4_not_cmp23_stall_local;
wire local_bb4_not_cmp23;

assign local_bb4_not_cmp23 = (rnode_2to3_bb4_cmp23_1_NO_SHIFT_REG ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb4_add47_valid_out;
wire local_bb4_add47_stall_in;
wire local_bb4_add47_inputs_ready;
wire local_bb4_add47_stall_local;
wire [31:0] local_bb4_add47;

assign local_bb4_add47_inputs_ready = (rnode_329to330_c0_exe1_0_valid_out_0_NO_SHIFT_REG & rnode_329to330_widthCounter_217_0_valid_out_0_NO_SHIFT_REG);
assign local_bb4_add47 = (rnode_329to330_c0_exe1_0_NO_SHIFT_REG + rnode_329to330_widthCounter_217_0_NO_SHIFT_REG);
assign local_bb4_add47_valid_out = local_bb4_add47_inputs_ready;
assign local_bb4_add47_stall_local = local_bb4_add47_stall_in;
assign rnode_329to330_c0_exe1_0_stall_in_0_NO_SHIFT_REG = (local_bb4_add47_stall_local | ~(local_bb4_add47_inputs_ready));
assign rnode_329to330_widthCounter_217_0_stall_in_0_NO_SHIFT_REG = (local_bb4_add47_stall_local | ~(local_bb4_add47_inputs_ready));

// Register node:
//  * latency = 159
//  * capacity = 159
 logic rnode_330to489_widthCounter_217_0_valid_out_NO_SHIFT_REG;
 logic rnode_330to489_widthCounter_217_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_330to489_widthCounter_217_0_NO_SHIFT_REG;
 logic rnode_330to489_widthCounter_217_0_reg_489_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_330to489_widthCounter_217_0_reg_489_NO_SHIFT_REG;
 logic rnode_330to489_widthCounter_217_0_valid_out_reg_489_NO_SHIFT_REG;
 logic rnode_330to489_widthCounter_217_0_stall_in_reg_489_NO_SHIFT_REG;
 logic rnode_330to489_widthCounter_217_0_stall_out_reg_489_NO_SHIFT_REG;

acl_data_fifo rnode_330to489_widthCounter_217_0_reg_489_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_330to489_widthCounter_217_0_reg_489_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_330to489_widthCounter_217_0_stall_in_reg_489_NO_SHIFT_REG),
	.valid_out(rnode_330to489_widthCounter_217_0_valid_out_reg_489_NO_SHIFT_REG),
	.stall_out(rnode_330to489_widthCounter_217_0_stall_out_reg_489_NO_SHIFT_REG),
	.data_in(rnode_329to330_widthCounter_217_1_NO_SHIFT_REG),
	.data_out(rnode_330to489_widthCounter_217_0_reg_489_NO_SHIFT_REG)
);

defparam rnode_330to489_widthCounter_217_0_reg_489_fifo.DEPTH = 160;
defparam rnode_330to489_widthCounter_217_0_reg_489_fifo.DATA_WIDTH = 32;
defparam rnode_330to489_widthCounter_217_0_reg_489_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_330to489_widthCounter_217_0_reg_489_fifo.IMPL = "ram";

assign rnode_330to489_widthCounter_217_0_reg_489_inputs_ready_NO_SHIFT_REG = rnode_329to330_widthCounter_217_0_valid_out_1_NO_SHIFT_REG;
assign rnode_329to330_widthCounter_217_0_stall_in_1_NO_SHIFT_REG = rnode_330to489_widthCounter_217_0_stall_out_reg_489_NO_SHIFT_REG;
assign rnode_330to489_widthCounter_217_0_NO_SHIFT_REG = rnode_330to489_widthCounter_217_0_reg_489_NO_SHIFT_REG;
assign rnode_330to489_widthCounter_217_0_stall_in_reg_489_NO_SHIFT_REG = rnode_330to489_widthCounter_217_0_stall_in_NO_SHIFT_REG;
assign rnode_330to489_widthCounter_217_0_valid_out_NO_SHIFT_REG = rnode_330to489_widthCounter_217_0_valid_out_reg_489_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb4__29_xor_or_stall_local;
wire local_bb4__29_xor_or;

assign local_bb4__29_xor_or = (local_bb4_or_cond | local_bb4__28_not);

// This section implements an unregistered operation.
// 
wire local_bb4___stall_local;
wire local_bb4__;

assign local_bb4__ = (rnode_1to3_cmp29_not_0_NO_SHIFT_REG & local_bb4_not_cmp23);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_330to331_bb4_add47_0_valid_out_NO_SHIFT_REG;
 logic rnode_330to331_bb4_add47_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_330to331_bb4_add47_0_NO_SHIFT_REG;
 logic rnode_330to331_bb4_add47_0_reg_331_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_330to331_bb4_add47_0_reg_331_NO_SHIFT_REG;
 logic rnode_330to331_bb4_add47_0_valid_out_reg_331_NO_SHIFT_REG;
 logic rnode_330to331_bb4_add47_0_stall_in_reg_331_NO_SHIFT_REG;
 logic rnode_330to331_bb4_add47_0_stall_out_reg_331_NO_SHIFT_REG;
wire [63:0] rci_rcnode_489to490_rc0_input_global_size_2_0_reg_489;

acl_data_fifo rnode_330to331_bb4_add47_0_reg_331_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_330to331_bb4_add47_0_reg_331_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_330to331_bb4_add47_0_stall_in_reg_331_NO_SHIFT_REG),
	.valid_out(rnode_330to331_bb4_add47_0_valid_out_reg_331_NO_SHIFT_REG),
	.stall_out(rnode_330to331_bb4_add47_0_stall_out_reg_331_NO_SHIFT_REG),
	.data_in(local_bb4_add47),
	.data_out(rnode_330to331_bb4_add47_0_reg_331_NO_SHIFT_REG)
);

defparam rnode_330to331_bb4_add47_0_reg_331_fifo.DEPTH = 1;
defparam rnode_330to331_bb4_add47_0_reg_331_fifo.DATA_WIDTH = 32;
defparam rnode_330to331_bb4_add47_0_reg_331_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_330to331_bb4_add47_0_reg_331_fifo.IMPL = "ll_reg";

assign rnode_330to331_bb4_add47_0_reg_331_inputs_ready_NO_SHIFT_REG = local_bb4_add47_valid_out;
assign local_bb4_add47_stall_in = rnode_330to331_bb4_add47_0_stall_out_reg_331_NO_SHIFT_REG;
assign rnode_330to331_bb4_add47_0_NO_SHIFT_REG = rnode_330to331_bb4_add47_0_reg_331_NO_SHIFT_REG;
assign rnode_330to331_bb4_add47_0_stall_in_reg_331_NO_SHIFT_REG = rnode_330to331_bb4_add47_0_stall_in_NO_SHIFT_REG;
assign rnode_330to331_bb4_add47_0_valid_out_NO_SHIFT_REG = rnode_330to331_bb4_add47_0_valid_out_reg_331_NO_SHIFT_REG;
assign rci_rcnode_489to490_rc0_input_global_size_2_0_reg_489[31:0] = input_global_size_2;
assign rci_rcnode_489to490_rc0_input_global_size_2_0_reg_489[63:32] = rnode_330to489_widthCounter_217_0_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_489to490_rc0_input_global_size_2_0_valid_out_NO_SHIFT_REG;
 logic rcnode_489to490_rc0_input_global_size_2_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rcnode_489to490_rc0_input_global_size_2_0_NO_SHIFT_REG;
 logic rcnode_489to490_rc0_input_global_size_2_0_reg_490_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rcnode_489to490_rc0_input_global_size_2_0_reg_490_NO_SHIFT_REG;
 logic rcnode_489to490_rc0_input_global_size_2_0_valid_out_reg_490_NO_SHIFT_REG;
 logic rcnode_489to490_rc0_input_global_size_2_0_stall_in_reg_490_NO_SHIFT_REG;
 logic rcnode_489to490_rc0_input_global_size_2_0_stall_out_0_reg_490_IP_NO_SHIFT_REG;
 logic rcnode_489to490_rc0_input_global_size_2_0_stall_out_0_reg_490_NO_SHIFT_REG;

acl_data_fifo rcnode_489to490_rc0_input_global_size_2_0_reg_490_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_489to490_rc0_input_global_size_2_0_reg_490_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_489to490_rc0_input_global_size_2_0_stall_in_reg_490_NO_SHIFT_REG),
	.valid_out(rcnode_489to490_rc0_input_global_size_2_0_valid_out_reg_490_NO_SHIFT_REG),
	.stall_out(rcnode_489to490_rc0_input_global_size_2_0_stall_out_0_reg_490_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_489to490_rc0_input_global_size_2_0_reg_489),
	.data_out(rcnode_489to490_rc0_input_global_size_2_0_reg_490_NO_SHIFT_REG)
);

defparam rcnode_489to490_rc0_input_global_size_2_0_reg_490_fifo.DEPTH = 1;
defparam rcnode_489to490_rc0_input_global_size_2_0_reg_490_fifo.DATA_WIDTH = 64;
defparam rcnode_489to490_rc0_input_global_size_2_0_reg_490_fifo.ALLOW_FULL_WRITE = 1;
defparam rcnode_489to490_rc0_input_global_size_2_0_reg_490_fifo.IMPL = "ll_reg";

assign rcnode_489to490_rc0_input_global_size_2_0_reg_490_inputs_ready_NO_SHIFT_REG = (rnode_1to489_input_global_size_2_0_valid_out_NO_SHIFT_REG & rnode_330to489_widthCounter_217_0_valid_out_NO_SHIFT_REG);
assign rcnode_489to490_rc0_input_global_size_2_0_stall_out_0_reg_490_NO_SHIFT_REG = (~(rcnode_489to490_rc0_input_global_size_2_0_reg_490_inputs_ready_NO_SHIFT_REG) | rcnode_489to490_rc0_input_global_size_2_0_stall_out_0_reg_490_IP_NO_SHIFT_REG);
assign rnode_1to489_input_global_size_2_0_stall_in_NO_SHIFT_REG = rcnode_489to490_rc0_input_global_size_2_0_stall_out_0_reg_490_NO_SHIFT_REG;
assign rnode_330to489_widthCounter_217_0_stall_in_NO_SHIFT_REG = rcnode_489to490_rc0_input_global_size_2_0_stall_out_0_reg_490_NO_SHIFT_REG;
assign rcnode_489to490_rc0_input_global_size_2_0_NO_SHIFT_REG = rcnode_489to490_rc0_input_global_size_2_0_reg_490_NO_SHIFT_REG;
assign rcnode_489to490_rc0_input_global_size_2_0_stall_in_reg_490_NO_SHIFT_REG = rcnode_489to490_rc0_input_global_size_2_0_stall_in_NO_SHIFT_REG;
assign rcnode_489to490_rc0_input_global_size_2_0_valid_out_NO_SHIFT_REG = rcnode_489to490_rc0_input_global_size_2_0_valid_out_reg_490_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb4_cmp1116_NEG_or37_stall_local;
wire local_bb4_cmp1116_NEG_or37;

assign local_bb4_cmp1116_NEG_or37 = (local_bb4__29_xor_or | rnode_1to3_cmp1116_NEG_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb4__26_valid_out;
wire local_bb4__26_stall_in;
wire local_bb4__26_inputs_ready;
wire local_bb4__26_stall_local;
wire local_bb4__26;

assign local_bb4__26_inputs_ready = (rnode_2to3_bb4_cmp17_0_valid_out_1_NO_SHIFT_REG & rnode_1to3_cmp14_0_valid_out_1_NO_SHIFT_REG & rnode_1to3_cmp29_not_0_valid_out_0_NO_SHIFT_REG & rnode_2to3_bb4_cmp23_0_valid_out_1_NO_SHIFT_REG);
assign local_bb4__26 = (local_bb4__ & local_bb4_not_or_cond);
assign local_bb4__26_valid_out = local_bb4__26_inputs_ready;
assign local_bb4__26_stall_local = local_bb4__26_stall_in;
assign rnode_2to3_bb4_cmp17_0_stall_in_1_NO_SHIFT_REG = (local_bb4__26_stall_local | ~(local_bb4__26_inputs_ready));
assign rnode_1to3_cmp14_0_stall_in_1_NO_SHIFT_REG = (local_bb4__26_stall_local | ~(local_bb4__26_inputs_ready));
assign rnode_1to3_cmp29_not_0_stall_in_0_NO_SHIFT_REG = (local_bb4__26_stall_local | ~(local_bb4__26_inputs_ready));
assign rnode_2to3_bb4_cmp23_0_stall_in_1_NO_SHIFT_REG = (local_bb4__26_stall_local | ~(local_bb4__26_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb4_idxprom48_stall_local;
wire [63:0] local_bb4_idxprom48;

assign local_bb4_idxprom48[32] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[33] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[34] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[35] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[36] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[37] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[38] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[39] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[40] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[41] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[42] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[43] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[44] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[45] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[46] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[47] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[48] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[49] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[50] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[51] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[52] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[53] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[54] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[55] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[56] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[57] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[58] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[59] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[60] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[61] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[62] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[63] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom48[31:0] = rnode_330to331_bb4_add47_0_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb4_add52_valid_out;
wire local_bb4_add52_stall_in;
wire local_bb4_add52_inputs_ready;
wire local_bb4_add52_stall_local;
wire [31:0] local_bb4_add52;

assign local_bb4_add52_inputs_ready = rcnode_489to490_rc0_input_global_size_2_0_valid_out_NO_SHIFT_REG;
assign local_bb4_add52 = (rcnode_489to490_rc0_input_global_size_2_0_NO_SHIFT_REG[63:32] + input_global_size_2);
assign local_bb4_add52_valid_out = local_bb4_add52_inputs_ready;
assign local_bb4_add52_stall_local = local_bb4_add52_stall_in;
assign rcnode_489to490_rc0_input_global_size_2_0_stall_in_NO_SHIFT_REG = (|local_bb4_add52_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb4__phi_decision47_xor_or_valid_out;
wire local_bb4__phi_decision47_xor_or_stall_in;
wire local_bb4__phi_decision47_xor_or_inputs_ready;
wire local_bb4__phi_decision47_xor_or_stall_local;
wire local_bb4__phi_decision47_xor_or;

assign local_bb4__phi_decision47_xor_or_inputs_ready = (rnode_2to3_bb4_cmp17_0_valid_out_0_NO_SHIFT_REG & rnode_1to3_cmp14_0_valid_out_0_NO_SHIFT_REG & rnode_2to3_bb4_cmp23_0_valid_out_0_NO_SHIFT_REG & rnode_1to3_cmp29_not_not_0_valid_out_0_NO_SHIFT_REG & rnode_1to3_cmp1116_NEG_0_valid_out_0_NO_SHIFT_REG & rnode_1to3__phi_decision_xor_0_valid_out_0_NO_SHIFT_REG);
assign local_bb4__phi_decision47_xor_or = (local_bb4_cmp1116_NEG_or37 | rnode_1to3__phi_decision_xor_0_NO_SHIFT_REG);
assign local_bb4__phi_decision47_xor_or_valid_out = local_bb4__phi_decision47_xor_or_inputs_ready;
assign local_bb4__phi_decision47_xor_or_stall_local = local_bb4__phi_decision47_xor_or_stall_in;
assign rnode_2to3_bb4_cmp17_0_stall_in_0_NO_SHIFT_REG = (local_bb4__phi_decision47_xor_or_stall_local | ~(local_bb4__phi_decision47_xor_or_inputs_ready));
assign rnode_1to3_cmp14_0_stall_in_0_NO_SHIFT_REG = (local_bb4__phi_decision47_xor_or_stall_local | ~(local_bb4__phi_decision47_xor_or_inputs_ready));
assign rnode_2to3_bb4_cmp23_0_stall_in_0_NO_SHIFT_REG = (local_bb4__phi_decision47_xor_or_stall_local | ~(local_bb4__phi_decision47_xor_or_inputs_ready));
assign rnode_1to3_cmp29_not_not_0_stall_in_0_NO_SHIFT_REG = (local_bb4__phi_decision47_xor_or_stall_local | ~(local_bb4__phi_decision47_xor_or_inputs_ready));
assign rnode_1to3_cmp1116_NEG_0_stall_in_0_NO_SHIFT_REG = (local_bb4__phi_decision47_xor_or_stall_local | ~(local_bb4__phi_decision47_xor_or_inputs_ready));
assign rnode_1to3__phi_decision_xor_0_stall_in_0_NO_SHIFT_REG = (local_bb4__phi_decision47_xor_or_stall_local | ~(local_bb4__phi_decision47_xor_or_inputs_ready));

// Register node:
//  * latency = 328
//  * capacity = 328
 logic rnode_3to331_bb4__26_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to331_bb4__26_0_stall_in_NO_SHIFT_REG;
 logic rnode_3to331_bb4__26_0_NO_SHIFT_REG;
 logic rnode_3to331_bb4__26_0_reg_331_inputs_ready_NO_SHIFT_REG;
 logic rnode_3to331_bb4__26_0_reg_331_NO_SHIFT_REG;
 logic rnode_3to331_bb4__26_0_valid_out_reg_331_NO_SHIFT_REG;
 logic rnode_3to331_bb4__26_0_stall_in_reg_331_NO_SHIFT_REG;
 logic rnode_3to331_bb4__26_0_stall_out_reg_331_NO_SHIFT_REG;

acl_data_fifo rnode_3to331_bb4__26_0_reg_331_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to331_bb4__26_0_reg_331_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to331_bb4__26_0_stall_in_reg_331_NO_SHIFT_REG),
	.valid_out(rnode_3to331_bb4__26_0_valid_out_reg_331_NO_SHIFT_REG),
	.stall_out(rnode_3to331_bb4__26_0_stall_out_reg_331_NO_SHIFT_REG),
	.data_in(local_bb4__26),
	.data_out(rnode_3to331_bb4__26_0_reg_331_NO_SHIFT_REG)
);

defparam rnode_3to331_bb4__26_0_reg_331_fifo.DEPTH = 329;
defparam rnode_3to331_bb4__26_0_reg_331_fifo.DATA_WIDTH = 1;
defparam rnode_3to331_bb4__26_0_reg_331_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_3to331_bb4__26_0_reg_331_fifo.IMPL = "ram";

assign rnode_3to331_bb4__26_0_reg_331_inputs_ready_NO_SHIFT_REG = local_bb4__26_valid_out;
assign local_bb4__26_stall_in = rnode_3to331_bb4__26_0_stall_out_reg_331_NO_SHIFT_REG;
assign rnode_3to331_bb4__26_0_NO_SHIFT_REG = rnode_3to331_bb4__26_0_reg_331_NO_SHIFT_REG;
assign rnode_3to331_bb4__26_0_stall_in_reg_331_NO_SHIFT_REG = rnode_3to331_bb4__26_0_stall_in_NO_SHIFT_REG;
assign rnode_3to331_bb4__26_0_valid_out_NO_SHIFT_REG = rnode_3to331_bb4__26_0_valid_out_reg_331_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb4_arrayidx49_valid_out;
wire local_bb4_arrayidx49_stall_in;
wire local_bb4_arrayidx49_inputs_ready;
wire local_bb4_arrayidx49_stall_local;
wire [63:0] local_bb4_arrayidx49;

assign local_bb4_arrayidx49_inputs_ready = rnode_330to331_bb4_add47_0_valid_out_NO_SHIFT_REG;
assign local_bb4_arrayidx49 = ((input_outputFeatureMap & 64'hFFFFFFFFFFFFFC00) + (local_bb4_idxprom48 << 6'h2));
assign local_bb4_arrayidx49_valid_out = local_bb4_arrayidx49_inputs_ready;
assign local_bb4_arrayidx49_stall_local = local_bb4_arrayidx49_stall_in;
assign rnode_330to331_bb4_add47_0_stall_in_NO_SHIFT_REG = (|local_bb4_arrayidx49_stall_local);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_490to491_bb4_add52_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_490to491_bb4_add52_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_490to491_bb4_add52_0_NO_SHIFT_REG;
 logic rnode_490to491_bb4_add52_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_490to491_bb4_add52_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_490to491_bb4_add52_1_NO_SHIFT_REG;
 logic rnode_490to491_bb4_add52_0_reg_491_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_490to491_bb4_add52_0_reg_491_NO_SHIFT_REG;
 logic rnode_490to491_bb4_add52_0_valid_out_0_reg_491_NO_SHIFT_REG;
 logic rnode_490to491_bb4_add52_0_stall_in_0_reg_491_NO_SHIFT_REG;
 logic rnode_490to491_bb4_add52_0_stall_out_reg_491_NO_SHIFT_REG;
 reg rnode_490to491_bb4_add52_0_consumed_0_NO_SHIFT_REG;
 reg rnode_490to491_bb4_add52_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_490to491_bb4_add52_0_reg_491_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_490to491_bb4_add52_0_reg_491_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_490to491_bb4_add52_0_stall_in_0_reg_491_NO_SHIFT_REG),
	.valid_out(rnode_490to491_bb4_add52_0_valid_out_0_reg_491_NO_SHIFT_REG),
	.stall_out(rnode_490to491_bb4_add52_0_stall_out_reg_491_NO_SHIFT_REG),
	.data_in(local_bb4_add52),
	.data_out(rnode_490to491_bb4_add52_0_reg_491_NO_SHIFT_REG)
);

defparam rnode_490to491_bb4_add52_0_reg_491_fifo.DEPTH = 2;
defparam rnode_490to491_bb4_add52_0_reg_491_fifo.DATA_WIDTH = 32;
defparam rnode_490to491_bb4_add52_0_reg_491_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_490to491_bb4_add52_0_reg_491_fifo.IMPL = "ll_reg";

assign rnode_490to491_bb4_add52_0_reg_491_inputs_ready_NO_SHIFT_REG = local_bb4_add52_valid_out;
assign local_bb4_add52_stall_in = rnode_490to491_bb4_add52_0_stall_out_reg_491_NO_SHIFT_REG;
assign rnode_490to491_bb4_add52_0_stall_in_0_reg_491_NO_SHIFT_REG = ((rnode_490to491_bb4_add52_0_stall_in_0_NO_SHIFT_REG & ~(rnode_490to491_bb4_add52_0_consumed_0_NO_SHIFT_REG)) | (rnode_490to491_bb4_add52_0_stall_in_1_NO_SHIFT_REG & ~(rnode_490to491_bb4_add52_0_consumed_1_NO_SHIFT_REG)));
assign rnode_490to491_bb4_add52_0_valid_out_0_NO_SHIFT_REG = (rnode_490to491_bb4_add52_0_valid_out_0_reg_491_NO_SHIFT_REG & ~(rnode_490to491_bb4_add52_0_consumed_0_NO_SHIFT_REG));
assign rnode_490to491_bb4_add52_0_valid_out_1_NO_SHIFT_REG = (rnode_490to491_bb4_add52_0_valid_out_0_reg_491_NO_SHIFT_REG & ~(rnode_490to491_bb4_add52_0_consumed_1_NO_SHIFT_REG));
assign rnode_490to491_bb4_add52_0_NO_SHIFT_REG = rnode_490to491_bb4_add52_0_reg_491_NO_SHIFT_REG;
assign rnode_490to491_bb4_add52_1_NO_SHIFT_REG = rnode_490to491_bb4_add52_0_reg_491_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_490to491_bb4_add52_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_490to491_bb4_add52_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_490to491_bb4_add52_0_consumed_0_NO_SHIFT_REG <= (rnode_490to491_bb4_add52_0_valid_out_0_reg_491_NO_SHIFT_REG & (rnode_490to491_bb4_add52_0_consumed_0_NO_SHIFT_REG | ~(rnode_490to491_bb4_add52_0_stall_in_0_NO_SHIFT_REG)) & rnode_490to491_bb4_add52_0_stall_in_0_reg_491_NO_SHIFT_REG);
		rnode_490to491_bb4_add52_0_consumed_1_NO_SHIFT_REG <= (rnode_490to491_bb4_add52_0_valid_out_0_reg_491_NO_SHIFT_REG & (rnode_490to491_bb4_add52_0_consumed_1_NO_SHIFT_REG | ~(rnode_490to491_bb4_add52_0_stall_in_1_NO_SHIFT_REG)) & rnode_490to491_bb4_add52_0_stall_in_0_reg_491_NO_SHIFT_REG);
	end
end


// This section implements a staging register.
// 
wire rstag_3to3_bb4__phi_decision47_xor_or_valid_out_0;
wire rstag_3to3_bb4__phi_decision47_xor_or_stall_in_0;
wire rstag_3to3_bb4__phi_decision47_xor_or_valid_out_1;
wire rstag_3to3_bb4__phi_decision47_xor_or_stall_in_1;
wire rstag_3to3_bb4__phi_decision47_xor_or_inputs_ready;
wire rstag_3to3_bb4__phi_decision47_xor_or_stall_local;
 reg rstag_3to3_bb4__phi_decision47_xor_or_staging_valid_NO_SHIFT_REG;
wire rstag_3to3_bb4__phi_decision47_xor_or_combined_valid;
 reg rstag_3to3_bb4__phi_decision47_xor_or_staging_reg_NO_SHIFT_REG;
wire rstag_3to3_bb4__phi_decision47_xor_or;
 reg rstag_3to3_bb4__phi_decision47_xor_or_consumed_0_NO_SHIFT_REG;
 reg rstag_3to3_bb4__phi_decision47_xor_or_consumed_1_NO_SHIFT_REG;

assign rstag_3to3_bb4__phi_decision47_xor_or_inputs_ready = local_bb4__phi_decision47_xor_or_valid_out;
assign rstag_3to3_bb4__phi_decision47_xor_or = (rstag_3to3_bb4__phi_decision47_xor_or_staging_valid_NO_SHIFT_REG ? rstag_3to3_bb4__phi_decision47_xor_or_staging_reg_NO_SHIFT_REG : local_bb4__phi_decision47_xor_or);
assign rstag_3to3_bb4__phi_decision47_xor_or_combined_valid = (rstag_3to3_bb4__phi_decision47_xor_or_staging_valid_NO_SHIFT_REG | rstag_3to3_bb4__phi_decision47_xor_or_inputs_ready);
assign rstag_3to3_bb4__phi_decision47_xor_or_stall_local = ((rstag_3to3_bb4__phi_decision47_xor_or_stall_in_0 & ~(rstag_3to3_bb4__phi_decision47_xor_or_consumed_0_NO_SHIFT_REG)) | (rstag_3to3_bb4__phi_decision47_xor_or_stall_in_1 & ~(rstag_3to3_bb4__phi_decision47_xor_or_consumed_1_NO_SHIFT_REG)));
assign rstag_3to3_bb4__phi_decision47_xor_or_valid_out_0 = (rstag_3to3_bb4__phi_decision47_xor_or_combined_valid & ~(rstag_3to3_bb4__phi_decision47_xor_or_consumed_0_NO_SHIFT_REG));
assign rstag_3to3_bb4__phi_decision47_xor_or_valid_out_1 = (rstag_3to3_bb4__phi_decision47_xor_or_combined_valid & ~(rstag_3to3_bb4__phi_decision47_xor_or_consumed_1_NO_SHIFT_REG));
assign local_bb4__phi_decision47_xor_or_stall_in = (|rstag_3to3_bb4__phi_decision47_xor_or_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_3to3_bb4__phi_decision47_xor_or_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_3to3_bb4__phi_decision47_xor_or_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_3to3_bb4__phi_decision47_xor_or_stall_local)
		begin
			if (~(rstag_3to3_bb4__phi_decision47_xor_or_staging_valid_NO_SHIFT_REG))
			begin
				rstag_3to3_bb4__phi_decision47_xor_or_staging_valid_NO_SHIFT_REG <= rstag_3to3_bb4__phi_decision47_xor_or_inputs_ready;
			end
		end
		else
		begin
			rstag_3to3_bb4__phi_decision47_xor_or_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_3to3_bb4__phi_decision47_xor_or_staging_valid_NO_SHIFT_REG))
		begin
			rstag_3to3_bb4__phi_decision47_xor_or_staging_reg_NO_SHIFT_REG <= local_bb4__phi_decision47_xor_or;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_3to3_bb4__phi_decision47_xor_or_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_3to3_bb4__phi_decision47_xor_or_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_3to3_bb4__phi_decision47_xor_or_consumed_0_NO_SHIFT_REG <= (rstag_3to3_bb4__phi_decision47_xor_or_combined_valid & (rstag_3to3_bb4__phi_decision47_xor_or_consumed_0_NO_SHIFT_REG | ~(rstag_3to3_bb4__phi_decision47_xor_or_stall_in_0)) & rstag_3to3_bb4__phi_decision47_xor_or_stall_local);
		rstag_3to3_bb4__phi_decision47_xor_or_consumed_1_NO_SHIFT_REG <= (rstag_3to3_bb4__phi_decision47_xor_or_combined_valid & (rstag_3to3_bb4__phi_decision47_xor_or_consumed_1_NO_SHIFT_REG | ~(rstag_3to3_bb4__phi_decision47_xor_or_stall_in_1)) & rstag_3to3_bb4__phi_decision47_xor_or_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_331to332_bb4__26_0_valid_out_NO_SHIFT_REG;
 logic rnode_331to332_bb4__26_0_stall_in_NO_SHIFT_REG;
 logic rnode_331to332_bb4__26_0_NO_SHIFT_REG;
 logic rnode_331to332_bb4__26_0_reg_332_inputs_ready_NO_SHIFT_REG;
 logic rnode_331to332_bb4__26_0_reg_332_NO_SHIFT_REG;
 logic rnode_331to332_bb4__26_0_valid_out_reg_332_NO_SHIFT_REG;
 logic rnode_331to332_bb4__26_0_stall_in_reg_332_NO_SHIFT_REG;
 logic rnode_331to332_bb4__26_0_stall_out_reg_332_NO_SHIFT_REG;

acl_data_fifo rnode_331to332_bb4__26_0_reg_332_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_331to332_bb4__26_0_reg_332_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_331to332_bb4__26_0_stall_in_reg_332_NO_SHIFT_REG),
	.valid_out(rnode_331to332_bb4__26_0_valid_out_reg_332_NO_SHIFT_REG),
	.stall_out(rnode_331to332_bb4__26_0_stall_out_reg_332_NO_SHIFT_REG),
	.data_in(rnode_3to331_bb4__26_0_NO_SHIFT_REG),
	.data_out(rnode_331to332_bb4__26_0_reg_332_NO_SHIFT_REG)
);

defparam rnode_331to332_bb4__26_0_reg_332_fifo.DEPTH = 1;
defparam rnode_331to332_bb4__26_0_reg_332_fifo.DATA_WIDTH = 1;
defparam rnode_331to332_bb4__26_0_reg_332_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_331to332_bb4__26_0_reg_332_fifo.IMPL = "ll_reg";

assign rnode_331to332_bb4__26_0_reg_332_inputs_ready_NO_SHIFT_REG = rnode_3to331_bb4__26_0_valid_out_NO_SHIFT_REG;
assign rnode_3to331_bb4__26_0_stall_in_NO_SHIFT_REG = rnode_331to332_bb4__26_0_stall_out_reg_332_NO_SHIFT_REG;
assign rnode_331to332_bb4__26_0_NO_SHIFT_REG = rnode_331to332_bb4__26_0_reg_332_NO_SHIFT_REG;
assign rnode_331to332_bb4__26_0_stall_in_reg_332_NO_SHIFT_REG = rnode_331to332_bb4__26_0_stall_in_NO_SHIFT_REG;
assign rnode_331to332_bb4__26_0_valid_out_NO_SHIFT_REG = rnode_331to332_bb4__26_0_valid_out_reg_332_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_331to332_bb4_arrayidx49_0_valid_out_NO_SHIFT_REG;
 logic rnode_331to332_bb4_arrayidx49_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_331to332_bb4_arrayidx49_0_NO_SHIFT_REG;
 logic rnode_331to332_bb4_arrayidx49_0_reg_332_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_331to332_bb4_arrayidx49_0_reg_332_NO_SHIFT_REG;
 logic rnode_331to332_bb4_arrayidx49_0_valid_out_reg_332_NO_SHIFT_REG;
 logic rnode_331to332_bb4_arrayidx49_0_stall_in_reg_332_NO_SHIFT_REG;
 logic rnode_331to332_bb4_arrayidx49_0_stall_out_reg_332_NO_SHIFT_REG;

acl_data_fifo rnode_331to332_bb4_arrayidx49_0_reg_332_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_331to332_bb4_arrayidx49_0_reg_332_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_331to332_bb4_arrayidx49_0_stall_in_reg_332_NO_SHIFT_REG),
	.valid_out(rnode_331to332_bb4_arrayidx49_0_valid_out_reg_332_NO_SHIFT_REG),
	.stall_out(rnode_331to332_bb4_arrayidx49_0_stall_out_reg_332_NO_SHIFT_REG),
	.data_in((local_bb4_arrayidx49 & 64'hFFFFFFFFFFFFFFFC)),
	.data_out(rnode_331to332_bb4_arrayidx49_0_reg_332_NO_SHIFT_REG)
);

defparam rnode_331to332_bb4_arrayidx49_0_reg_332_fifo.DEPTH = 2;
defparam rnode_331to332_bb4_arrayidx49_0_reg_332_fifo.DATA_WIDTH = 64;
defparam rnode_331to332_bb4_arrayidx49_0_reg_332_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_331to332_bb4_arrayidx49_0_reg_332_fifo.IMPL = "ll_reg";

assign rnode_331to332_bb4_arrayidx49_0_reg_332_inputs_ready_NO_SHIFT_REG = local_bb4_arrayidx49_valid_out;
assign local_bb4_arrayidx49_stall_in = rnode_331to332_bb4_arrayidx49_0_stall_out_reg_332_NO_SHIFT_REG;
assign rnode_331to332_bb4_arrayidx49_0_NO_SHIFT_REG = rnode_331to332_bb4_arrayidx49_0_reg_332_NO_SHIFT_REG;
assign rnode_331to332_bb4_arrayidx49_0_stall_in_reg_332_NO_SHIFT_REG = rnode_331to332_bb4_arrayidx49_0_stall_in_NO_SHIFT_REG;
assign rnode_331to332_bb4_arrayidx49_0_valid_out_NO_SHIFT_REG = rnode_331to332_bb4_arrayidx49_0_valid_out_reg_332_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb4_cmp1136_valid_out;
wire local_bb4_cmp1136_stall_in;
wire local_bb4_cmp1136_inputs_ready;
wire local_bb4_cmp1136_stall_local;
wire local_bb4_cmp1136;
wire [357:0] rci_rcnode_491to492_rc1_ld__0_reg_491;

assign local_bb4_cmp1136_inputs_ready = (rnode_490to491_bb4_add52_0_valid_out_0_NO_SHIFT_REG & rnode_490to491_ld__0_valid_out_0_NO_SHIFT_REG);
assign local_bb4_cmp1136 = ($signed(rnode_490to491_bb4_add52_0_NO_SHIFT_REG) >= $signed(rnode_490to491_ld__0_NO_SHIFT_REG));
assign local_bb4_cmp1136_valid_out = local_bb4_cmp1136_inputs_ready;
assign local_bb4_cmp1136_stall_local = local_bb4_cmp1136_stall_in;
assign rnode_490to491_bb4_add52_0_stall_in_0_NO_SHIFT_REG = (local_bb4_cmp1136_stall_local | ~(local_bb4_cmp1136_inputs_ready));
assign rnode_490to491_ld__0_stall_in_0_NO_SHIFT_REG = (local_bb4_cmp1136_stall_local | ~(local_bb4_cmp1136_inputs_ready));
assign rci_rcnode_491to492_rc1_ld__0_reg_491[31:0] = rnode_490to491_ld__1_NO_SHIFT_REG;
assign rci_rcnode_491to492_rc1_ld__0_reg_491[63:32] = rnode_490to491_bb4_add52_1_NO_SHIFT_REG;
assign rci_rcnode_491to492_rc1_ld__0_reg_491[95:64] = rcnode_1to491_rc17_mul41_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_491to492_rc1_ld__0_reg_491[127:96] = rcnode_1to491_rc17_mul41_0_NO_SHIFT_REG[63:32];
assign rci_rcnode_491to492_rc1_ld__0_reg_491[159:128] = rcnode_1to491_rc17_mul41_0_NO_SHIFT_REG[95:64];
assign rci_rcnode_491to492_rc1_ld__0_reg_491[191:160] = rcnode_1to491_rc17_mul41_0_NO_SHIFT_REG[127:96];
assign rci_rcnode_491to492_rc1_ld__0_reg_491[223:192] = rnode_1to491_input_acl_hw_wg_id_0_NO_SHIFT_REG;
assign rci_rcnode_491to492_rc1_ld__0_reg_491[255:224] = rnode_330to491_c0_exe1_0_NO_SHIFT_REG;
assign rci_rcnode_491to492_rc1_ld__0_reg_491[256] = rcnode_3to491_rc2_cmp14_0_NO_SHIFT_REG[0];
assign rci_rcnode_491to492_rc1_ld__0_reg_491[257] = rcnode_3to491_rc2_cmp14_0_NO_SHIFT_REG[1];
assign rci_rcnode_491to492_rc1_ld__0_reg_491[258] = rcnode_3to491_rc2_cmp14_0_NO_SHIFT_REG[2];
assign rci_rcnode_491to492_rc1_ld__0_reg_491[259] = rcnode_3to491_rc2_cmp14_0_NO_SHIFT_REG[3];
assign rci_rcnode_491to492_rc1_ld__0_reg_491[260] = rnode_3to491_cmp29_not_0_NO_SHIFT_REG;
assign rci_rcnode_491to492_rc1_ld__0_reg_491[292:261] = rcnode_163to491_rc1_channelCounter_024_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_491to492_rc1_ld__0_reg_491[324:293] = rcnode_163to491_rc1_channelCounter_024_0_NO_SHIFT_REG[63:32];
assign rci_rcnode_491to492_rc1_ld__0_reg_491[325] = rnode_332to491__phi_decision_xor45_or_0_NO_SHIFT_REG;
assign rci_rcnode_491to492_rc1_ld__0_reg_491[357:326] = rcnode_163to491_rc1_channelCounter_024_0_NO_SHIFT_REG[95:64];

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_491to492_rc1_ld__0_valid_out_0_NO_SHIFT_REG;
 logic rcnode_491to492_rc1_ld__0_stall_in_0_NO_SHIFT_REG;
 logic [357:0] rcnode_491to492_rc1_ld__0_NO_SHIFT_REG;
 logic rcnode_491to492_rc1_ld__0_valid_out_1_NO_SHIFT_REG;
 logic rcnode_491to492_rc1_ld__0_stall_in_1_NO_SHIFT_REG;
 logic [357:0] rcnode_491to492_rc1_ld__1_NO_SHIFT_REG;
 logic rcnode_491to492_rc1_ld__0_valid_out_2_NO_SHIFT_REG;
 logic rcnode_491to492_rc1_ld__0_stall_in_2_NO_SHIFT_REG;
 logic [357:0] rcnode_491to492_rc1_ld__2_NO_SHIFT_REG;
 logic rcnode_491to492_rc1_ld__0_reg_492_inputs_ready_NO_SHIFT_REG;
 logic [357:0] rcnode_491to492_rc1_ld__0_reg_492_NO_SHIFT_REG;
 logic rcnode_491to492_rc1_ld__0_valid_out_0_reg_492_NO_SHIFT_REG;
 logic rcnode_491to492_rc1_ld__0_stall_in_0_reg_492_NO_SHIFT_REG;
 logic rcnode_491to492_rc1_ld__0_stall_out_0_reg_492_IP_NO_SHIFT_REG;
 logic rcnode_491to492_rc1_ld__0_stall_out_0_reg_492_NO_SHIFT_REG;

acl_data_fifo rcnode_491to492_rc1_ld__0_reg_492_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_491to492_rc1_ld__0_reg_492_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_491to492_rc1_ld__0_stall_in_0_reg_492_NO_SHIFT_REG),
	.valid_out(rcnode_491to492_rc1_ld__0_valid_out_0_reg_492_NO_SHIFT_REG),
	.stall_out(rcnode_491to492_rc1_ld__0_stall_out_0_reg_492_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_491to492_rc1_ld__0_reg_491),
	.data_out(rcnode_491to492_rc1_ld__0_reg_492_NO_SHIFT_REG)
);

defparam rcnode_491to492_rc1_ld__0_reg_492_fifo.DEPTH = 1;
defparam rcnode_491to492_rc1_ld__0_reg_492_fifo.DATA_WIDTH = 358;
defparam rcnode_491to492_rc1_ld__0_reg_492_fifo.ALLOW_FULL_WRITE = 1;
defparam rcnode_491to492_rc1_ld__0_reg_492_fifo.IMPL = "ll_reg";

assign rcnode_491to492_rc1_ld__0_reg_492_inputs_ready_NO_SHIFT_REG = (rnode_490to491_ld__0_valid_out_1_NO_SHIFT_REG & rnode_490to491_bb4_add52_0_valid_out_1_NO_SHIFT_REG & rnode_1to491_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG & rnode_330to491_c0_exe1_0_valid_out_NO_SHIFT_REG & rnode_3to491_cmp29_not_0_valid_out_NO_SHIFT_REG & rnode_332to491__phi_decision_xor45_or_0_valid_out_NO_SHIFT_REG & rcnode_1to491_rc17_mul41_0_valid_out_NO_SHIFT_REG & rcnode_3to491_rc2_cmp14_0_valid_out_NO_SHIFT_REG & rcnode_163to491_rc1_channelCounter_024_0_valid_out_NO_SHIFT_REG);
assign rcnode_491to492_rc1_ld__0_stall_out_0_reg_492_NO_SHIFT_REG = (~(rcnode_491to492_rc1_ld__0_reg_492_inputs_ready_NO_SHIFT_REG) | rcnode_491to492_rc1_ld__0_stall_out_0_reg_492_IP_NO_SHIFT_REG);
assign rnode_490to491_ld__0_stall_in_1_NO_SHIFT_REG = rcnode_491to492_rc1_ld__0_stall_out_0_reg_492_NO_SHIFT_REG;
assign rnode_490to491_bb4_add52_0_stall_in_1_NO_SHIFT_REG = rcnode_491to492_rc1_ld__0_stall_out_0_reg_492_NO_SHIFT_REG;
assign rnode_1to491_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG = rcnode_491to492_rc1_ld__0_stall_out_0_reg_492_NO_SHIFT_REG;
assign rnode_330to491_c0_exe1_0_stall_in_NO_SHIFT_REG = rcnode_491to492_rc1_ld__0_stall_out_0_reg_492_NO_SHIFT_REG;
assign rnode_3to491_cmp29_not_0_stall_in_NO_SHIFT_REG = rcnode_491to492_rc1_ld__0_stall_out_0_reg_492_NO_SHIFT_REG;
assign rnode_332to491__phi_decision_xor45_or_0_stall_in_NO_SHIFT_REG = rcnode_491to492_rc1_ld__0_stall_out_0_reg_492_NO_SHIFT_REG;
assign rcnode_1to491_rc17_mul41_0_stall_in_NO_SHIFT_REG = rcnode_491to492_rc1_ld__0_stall_out_0_reg_492_NO_SHIFT_REG;
assign rcnode_3to491_rc2_cmp14_0_stall_in_NO_SHIFT_REG = rcnode_491to492_rc1_ld__0_stall_out_0_reg_492_NO_SHIFT_REG;
assign rcnode_163to491_rc1_channelCounter_024_0_stall_in_NO_SHIFT_REG = rcnode_491to492_rc1_ld__0_stall_out_0_reg_492_NO_SHIFT_REG;
assign rcnode_491to492_rc1_ld__0_stall_in_0_reg_492_NO_SHIFT_REG = (rcnode_491to492_rc1_ld__0_stall_in_0_NO_SHIFT_REG | rcnode_491to492_rc1_ld__0_stall_in_1_NO_SHIFT_REG | rcnode_491to492_rc1_ld__0_stall_in_2_NO_SHIFT_REG);
assign rcnode_491to492_rc1_ld__0_valid_out_0_NO_SHIFT_REG = rcnode_491to492_rc1_ld__0_valid_out_0_reg_492_NO_SHIFT_REG;
assign rcnode_491to492_rc1_ld__0_valid_out_1_NO_SHIFT_REG = rcnode_491to492_rc1_ld__0_valid_out_0_reg_492_NO_SHIFT_REG;
assign rcnode_491to492_rc1_ld__0_valid_out_2_NO_SHIFT_REG = rcnode_491to492_rc1_ld__0_valid_out_0_reg_492_NO_SHIFT_REG;
assign rcnode_491to492_rc1_ld__0_NO_SHIFT_REG = rcnode_491to492_rc1_ld__0_reg_492_NO_SHIFT_REG;
assign rcnode_491to492_rc1_ld__1_NO_SHIFT_REG = rcnode_491to492_rc1_ld__0_reg_492_NO_SHIFT_REG;
assign rcnode_491to492_rc1_ld__2_NO_SHIFT_REG = rcnode_491to492_rc1_ld__0_reg_492_NO_SHIFT_REG;

// Register node:
//  * latency = 168
//  * capacity = 168
 logic rnode_3to171_bb4__phi_decision47_xor_or_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to171_bb4__phi_decision47_xor_or_0_stall_in_NO_SHIFT_REG;
 logic rnode_3to171_bb4__phi_decision47_xor_or_0_NO_SHIFT_REG;
 logic rnode_3to171_bb4__phi_decision47_xor_or_0_reg_171_inputs_ready_NO_SHIFT_REG;
 logic rnode_3to171_bb4__phi_decision47_xor_or_0_reg_171_NO_SHIFT_REG;
 logic rnode_3to171_bb4__phi_decision47_xor_or_0_valid_out_reg_171_NO_SHIFT_REG;
 logic rnode_3to171_bb4__phi_decision47_xor_or_0_stall_in_reg_171_NO_SHIFT_REG;
 logic rnode_3to171_bb4__phi_decision47_xor_or_0_stall_out_reg_171_NO_SHIFT_REG;

acl_data_fifo rnode_3to171_bb4__phi_decision47_xor_or_0_reg_171_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to171_bb4__phi_decision47_xor_or_0_reg_171_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to171_bb4__phi_decision47_xor_or_0_stall_in_reg_171_NO_SHIFT_REG),
	.valid_out(rnode_3to171_bb4__phi_decision47_xor_or_0_valid_out_reg_171_NO_SHIFT_REG),
	.stall_out(rnode_3to171_bb4__phi_decision47_xor_or_0_stall_out_reg_171_NO_SHIFT_REG),
	.data_in(rstag_3to3_bb4__phi_decision47_xor_or),
	.data_out(rnode_3to171_bb4__phi_decision47_xor_or_0_reg_171_NO_SHIFT_REG)
);

defparam rnode_3to171_bb4__phi_decision47_xor_or_0_reg_171_fifo.DEPTH = 169;
defparam rnode_3to171_bb4__phi_decision47_xor_or_0_reg_171_fifo.DATA_WIDTH = 1;
defparam rnode_3to171_bb4__phi_decision47_xor_or_0_reg_171_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_3to171_bb4__phi_decision47_xor_or_0_reg_171_fifo.IMPL = "ram";

assign rnode_3to171_bb4__phi_decision47_xor_or_0_reg_171_inputs_ready_NO_SHIFT_REG = rstag_3to3_bb4__phi_decision47_xor_or_valid_out_0;
assign rstag_3to3_bb4__phi_decision47_xor_or_stall_in_0 = rnode_3to171_bb4__phi_decision47_xor_or_0_stall_out_reg_171_NO_SHIFT_REG;
assign rnode_3to171_bb4__phi_decision47_xor_or_0_NO_SHIFT_REG = rnode_3to171_bb4__phi_decision47_xor_or_0_reg_171_NO_SHIFT_REG;
assign rnode_3to171_bb4__phi_decision47_xor_or_0_stall_in_reg_171_NO_SHIFT_REG = rnode_3to171_bb4__phi_decision47_xor_or_0_stall_in_NO_SHIFT_REG;
assign rnode_3to171_bb4__phi_decision47_xor_or_0_valid_out_NO_SHIFT_REG = rnode_3to171_bb4__phi_decision47_xor_or_0_valid_out_reg_171_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb4_ld_memcoalesce_param_load_060_inputs_ready;
 reg local_bb4_ld_memcoalesce_param_load_060_valid_out_NO_SHIFT_REG;
wire local_bb4_ld_memcoalesce_param_load_060_stall_in;
wire local_bb4_ld_memcoalesce_param_load_060_output_regs_ready;
wire local_bb4_ld_memcoalesce_param_load_060_fu_stall_out;
wire local_bb4_ld_memcoalesce_param_load_060_fu_valid_out;
wire [63:0] local_bb4_ld_memcoalesce_param_load_060_lsu_dataout;
 reg [63:0] local_bb4_ld_memcoalesce_param_load_060_NO_SHIFT_REG;
wire local_bb4_ld_memcoalesce_param_load_060_causedstall;

lsu_top lsu_local_bb4_ld_memcoalesce_param_load_060 (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb4_ld_memcoalesce_param_load_060_fu_stall_out),
	.i_valid(local_bb4_ld_memcoalesce_param_load_060_inputs_ready),
	.i_address(((input_wii_memcoalesce_param_bitcast_059 & 64'hFFFFFFFFFFFFFC18) | 64'h18)),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(rstag_3to3_bb4__phi_decision47_xor_or),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb4_ld_memcoalesce_param_load_060_output_regs_ready)),
	.o_valid(local_bb4_ld_memcoalesce_param_load_060_fu_valid_out),
	.o_readdata(local_bb4_ld_memcoalesce_param_load_060_lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb4_ld_memcoalesce_param_load_060_active),
	.avm_address(avm_local_bb4_ld_memcoalesce_param_load_060_address),
	.avm_read(avm_local_bb4_ld_memcoalesce_param_load_060_read),
	.avm_enable(avm_local_bb4_ld_memcoalesce_param_load_060_enable),
	.avm_readdata(avm_local_bb4_ld_memcoalesce_param_load_060_readdata),
	.avm_write(avm_local_bb4_ld_memcoalesce_param_load_060_write),
	.avm_writeack(avm_local_bb4_ld_memcoalesce_param_load_060_writeack),
	.avm_burstcount(avm_local_bb4_ld_memcoalesce_param_load_060_burstcount),
	.avm_writedata(avm_local_bb4_ld_memcoalesce_param_load_060_writedata),
	.avm_byteenable(avm_local_bb4_ld_memcoalesce_param_load_060_byteenable),
	.avm_waitrequest(avm_local_bb4_ld_memcoalesce_param_load_060_waitrequest),
	.avm_readdatavalid(avm_local_bb4_ld_memcoalesce_param_load_060_readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb4_ld_memcoalesce_param_load_060.AWIDTH = 32;
defparam lsu_local_bb4_ld_memcoalesce_param_load_060.WIDTH_BYTES = 8;
defparam lsu_local_bb4_ld_memcoalesce_param_load_060.MWIDTH_BYTES = 64;
defparam lsu_local_bb4_ld_memcoalesce_param_load_060.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb4_ld_memcoalesce_param_load_060.ALIGNMENT_BYTES = 8;
defparam lsu_local_bb4_ld_memcoalesce_param_load_060.READ = 1;
defparam lsu_local_bb4_ld_memcoalesce_param_load_060.ATOMIC = 0;
defparam lsu_local_bb4_ld_memcoalesce_param_load_060.WIDTH = 64;
defparam lsu_local_bb4_ld_memcoalesce_param_load_060.MWIDTH = 512;
defparam lsu_local_bb4_ld_memcoalesce_param_load_060.ATOMIC_WIDTH = 3;
defparam lsu_local_bb4_ld_memcoalesce_param_load_060.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb4_ld_memcoalesce_param_load_060.KERNEL_SIDE_MEM_LATENCY = 160;
defparam lsu_local_bb4_ld_memcoalesce_param_load_060.MEMORY_SIDE_MEM_LATENCY = 68;
defparam lsu_local_bb4_ld_memcoalesce_param_load_060.USE_WRITE_ACK = 0;
defparam lsu_local_bb4_ld_memcoalesce_param_load_060.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb4_ld_memcoalesce_param_load_060.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb4_ld_memcoalesce_param_load_060.NUMBER_BANKS = 1;
defparam lsu_local_bb4_ld_memcoalesce_param_load_060.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb4_ld_memcoalesce_param_load_060.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb4_ld_memcoalesce_param_load_060.USEINPUTFIFO = 0;
defparam lsu_local_bb4_ld_memcoalesce_param_load_060.USECACHING = 0;
defparam lsu_local_bb4_ld_memcoalesce_param_load_060.USEOUTPUTFIFO = 1;
defparam lsu_local_bb4_ld_memcoalesce_param_load_060.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb4_ld_memcoalesce_param_load_060.ADDRSPACE = 1;
defparam lsu_local_bb4_ld_memcoalesce_param_load_060.STYLE = "BURST-COALESCED";

assign local_bb4_ld_memcoalesce_param_load_060_inputs_ready = (rnode_1to3_memcoalesce_param_bitcast_059_0_valid_out_NO_SHIFT_REG & rstag_3to3_bb4__phi_decision47_xor_or_valid_out_1);
assign local_bb4_ld_memcoalesce_param_load_060_output_regs_ready = (&(~(local_bb4_ld_memcoalesce_param_load_060_valid_out_NO_SHIFT_REG) | ~(local_bb4_ld_memcoalesce_param_load_060_stall_in)));
assign rnode_1to3_memcoalesce_param_bitcast_059_0_stall_in_NO_SHIFT_REG = (local_bb4_ld_memcoalesce_param_load_060_fu_stall_out | ~(local_bb4_ld_memcoalesce_param_load_060_inputs_ready));
assign rstag_3to3_bb4__phi_decision47_xor_or_stall_in_1 = (local_bb4_ld_memcoalesce_param_load_060_fu_stall_out | ~(local_bb4_ld_memcoalesce_param_load_060_inputs_ready));
assign local_bb4_ld_memcoalesce_param_load_060_causedstall = (local_bb4_ld_memcoalesce_param_load_060_inputs_ready && (local_bb4_ld_memcoalesce_param_load_060_fu_stall_out && !(~(local_bb4_ld_memcoalesce_param_load_060_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_ld_memcoalesce_param_load_060_NO_SHIFT_REG <= 'x;
		local_bb4_ld_memcoalesce_param_load_060_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4_ld_memcoalesce_param_load_060_output_regs_ready)
		begin
			local_bb4_ld_memcoalesce_param_load_060_NO_SHIFT_REG <= local_bb4_ld_memcoalesce_param_load_060_lsu_dataout;
			local_bb4_ld_memcoalesce_param_load_060_valid_out_NO_SHIFT_REG <= local_bb4_ld_memcoalesce_param_load_060_fu_valid_out;
		end
		else
		begin
			if (~(local_bb4_ld_memcoalesce_param_load_060_stall_in))
			begin
				local_bb4_ld_memcoalesce_param_load_060_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_491to492_bb4_cmp1136_0_valid_out_NO_SHIFT_REG;
 logic rnode_491to492_bb4_cmp1136_0_stall_in_NO_SHIFT_REG;
 logic rnode_491to492_bb4_cmp1136_0_NO_SHIFT_REG;
 logic rnode_491to492_bb4_cmp1136_0_reg_492_inputs_ready_NO_SHIFT_REG;
 logic rnode_491to492_bb4_cmp1136_0_reg_492_NO_SHIFT_REG;
 logic rnode_491to492_bb4_cmp1136_0_valid_out_reg_492_NO_SHIFT_REG;
 logic rnode_491to492_bb4_cmp1136_0_stall_in_reg_492_NO_SHIFT_REG;
 logic rnode_491to492_bb4_cmp1136_0_stall_out_reg_492_NO_SHIFT_REG;

acl_data_fifo rnode_491to492_bb4_cmp1136_0_reg_492_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_491to492_bb4_cmp1136_0_reg_492_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_491to492_bb4_cmp1136_0_stall_in_reg_492_NO_SHIFT_REG),
	.valid_out(rnode_491to492_bb4_cmp1136_0_valid_out_reg_492_NO_SHIFT_REG),
	.stall_out(rnode_491to492_bb4_cmp1136_0_stall_out_reg_492_NO_SHIFT_REG),
	.data_in(local_bb4_cmp1136),
	.data_out(rnode_491to492_bb4_cmp1136_0_reg_492_NO_SHIFT_REG)
);

defparam rnode_491to492_bb4_cmp1136_0_reg_492_fifo.DEPTH = 1;
defparam rnode_491to492_bb4_cmp1136_0_reg_492_fifo.DATA_WIDTH = 1;
defparam rnode_491to492_bb4_cmp1136_0_reg_492_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_491to492_bb4_cmp1136_0_reg_492_fifo.IMPL = "ll_reg";

assign rnode_491to492_bb4_cmp1136_0_reg_492_inputs_ready_NO_SHIFT_REG = local_bb4_cmp1136_valid_out;
assign local_bb4_cmp1136_stall_in = rnode_491to492_bb4_cmp1136_0_stall_out_reg_492_NO_SHIFT_REG;
assign rnode_491to492_bb4_cmp1136_0_NO_SHIFT_REG = rnode_491to492_bb4_cmp1136_0_reg_492_NO_SHIFT_REG;
assign rnode_491to492_bb4_cmp1136_0_stall_in_reg_492_NO_SHIFT_REG = rnode_491to492_bb4_cmp1136_0_stall_in_NO_SHIFT_REG;
assign rnode_491to492_bb4_cmp1136_0_valid_out_NO_SHIFT_REG = rnode_491to492_bb4_cmp1136_0_valid_out_reg_492_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_171to172_bb4__phi_decision47_xor_or_0_valid_out_NO_SHIFT_REG;
 logic rnode_171to172_bb4__phi_decision47_xor_or_0_stall_in_NO_SHIFT_REG;
 logic rnode_171to172_bb4__phi_decision47_xor_or_0_NO_SHIFT_REG;
 logic rnode_171to172_bb4__phi_decision47_xor_or_0_reg_172_inputs_ready_NO_SHIFT_REG;
 logic rnode_171to172_bb4__phi_decision47_xor_or_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb4__phi_decision47_xor_or_0_valid_out_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb4__phi_decision47_xor_or_0_stall_in_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb4__phi_decision47_xor_or_0_stall_out_reg_172_NO_SHIFT_REG;

acl_data_fifo rnode_171to172_bb4__phi_decision47_xor_or_0_reg_172_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_171to172_bb4__phi_decision47_xor_or_0_reg_172_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_171to172_bb4__phi_decision47_xor_or_0_stall_in_reg_172_NO_SHIFT_REG),
	.valid_out(rnode_171to172_bb4__phi_decision47_xor_or_0_valid_out_reg_172_NO_SHIFT_REG),
	.stall_out(rnode_171to172_bb4__phi_decision47_xor_or_0_stall_out_reg_172_NO_SHIFT_REG),
	.data_in(rnode_3to171_bb4__phi_decision47_xor_or_0_NO_SHIFT_REG),
	.data_out(rnode_171to172_bb4__phi_decision47_xor_or_0_reg_172_NO_SHIFT_REG)
);

defparam rnode_171to172_bb4__phi_decision47_xor_or_0_reg_172_fifo.DEPTH = 2;
defparam rnode_171to172_bb4__phi_decision47_xor_or_0_reg_172_fifo.DATA_WIDTH = 1;
defparam rnode_171to172_bb4__phi_decision47_xor_or_0_reg_172_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_171to172_bb4__phi_decision47_xor_or_0_reg_172_fifo.IMPL = "ll_reg";

assign rnode_171to172_bb4__phi_decision47_xor_or_0_reg_172_inputs_ready_NO_SHIFT_REG = rnode_3to171_bb4__phi_decision47_xor_or_0_valid_out_NO_SHIFT_REG;
assign rnode_3to171_bb4__phi_decision47_xor_or_0_stall_in_NO_SHIFT_REG = rnode_171to172_bb4__phi_decision47_xor_or_0_stall_out_reg_172_NO_SHIFT_REG;
assign rnode_171to172_bb4__phi_decision47_xor_or_0_NO_SHIFT_REG = rnode_171to172_bb4__phi_decision47_xor_or_0_reg_172_NO_SHIFT_REG;
assign rnode_171to172_bb4__phi_decision47_xor_or_0_stall_in_reg_172_NO_SHIFT_REG = rnode_171to172_bb4__phi_decision47_xor_or_0_stall_in_NO_SHIFT_REG;
assign rnode_171to172_bb4__phi_decision47_xor_or_0_valid_out_NO_SHIFT_REG = rnode_171to172_bb4__phi_decision47_xor_or_0_valid_out_reg_172_NO_SHIFT_REG;

// This section implements a staging register.
// 
wire rstag_163to163_bb4_ld_memcoalesce_param_load_060_valid_out;
wire rstag_163to163_bb4_ld_memcoalesce_param_load_060_stall_in;
wire rstag_163to163_bb4_ld_memcoalesce_param_load_060_inputs_ready;
wire rstag_163to163_bb4_ld_memcoalesce_param_load_060_stall_local;
 reg rstag_163to163_bb4_ld_memcoalesce_param_load_060_staging_valid_NO_SHIFT_REG;
wire rstag_163to163_bb4_ld_memcoalesce_param_load_060_combined_valid;
 reg [63:0] rstag_163to163_bb4_ld_memcoalesce_param_load_060_staging_reg_NO_SHIFT_REG;
wire [63:0] rstag_163to163_bb4_ld_memcoalesce_param_load_060;

assign rstag_163to163_bb4_ld_memcoalesce_param_load_060_inputs_ready = local_bb4_ld_memcoalesce_param_load_060_valid_out_NO_SHIFT_REG;
assign rstag_163to163_bb4_ld_memcoalesce_param_load_060 = (rstag_163to163_bb4_ld_memcoalesce_param_load_060_staging_valid_NO_SHIFT_REG ? rstag_163to163_bb4_ld_memcoalesce_param_load_060_staging_reg_NO_SHIFT_REG : local_bb4_ld_memcoalesce_param_load_060_NO_SHIFT_REG);
assign rstag_163to163_bb4_ld_memcoalesce_param_load_060_combined_valid = (rstag_163to163_bb4_ld_memcoalesce_param_load_060_staging_valid_NO_SHIFT_REG | rstag_163to163_bb4_ld_memcoalesce_param_load_060_inputs_ready);
assign rstag_163to163_bb4_ld_memcoalesce_param_load_060_valid_out = rstag_163to163_bb4_ld_memcoalesce_param_load_060_combined_valid;
assign rstag_163to163_bb4_ld_memcoalesce_param_load_060_stall_local = rstag_163to163_bb4_ld_memcoalesce_param_load_060_stall_in;
assign local_bb4_ld_memcoalesce_param_load_060_stall_in = (|rstag_163to163_bb4_ld_memcoalesce_param_load_060_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_163to163_bb4_ld_memcoalesce_param_load_060_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_163to163_bb4_ld_memcoalesce_param_load_060_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_163to163_bb4_ld_memcoalesce_param_load_060_stall_local)
		begin
			if (~(rstag_163to163_bb4_ld_memcoalesce_param_load_060_staging_valid_NO_SHIFT_REG))
			begin
				rstag_163to163_bb4_ld_memcoalesce_param_load_060_staging_valid_NO_SHIFT_REG <= rstag_163to163_bb4_ld_memcoalesce_param_load_060_inputs_ready;
			end
		end
		else
		begin
			rstag_163to163_bb4_ld_memcoalesce_param_load_060_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_163to163_bb4_ld_memcoalesce_param_load_060_staging_valid_NO_SHIFT_REG))
		begin
			rstag_163to163_bb4_ld_memcoalesce_param_load_060_staging_reg_NO_SHIFT_REG <= local_bb4_ld_memcoalesce_param_load_060_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb4_cmp1136_GUARD_stall_local;
wire local_bb4_cmp1136_GUARD;

assign local_bb4_cmp1136_GUARD = (rnode_491to492_bb4_cmp1136_0_NO_SHIFT_REG | rcnode_491to492_rc1_ld__0_NO_SHIFT_REG[257]);

// This section implements an unregistered operation.
// 
wire local_bb4_c1_eni1_stall_local;
wire [223:0] local_bb4_c1_eni1;

assign local_bb4_c1_eni1[7:0] = 8'bx;
assign local_bb4_c1_eni1[71:8] = rstag_163to163_bb4_ld_memcoalesce_param_load_060;
assign local_bb4_c1_eni1[223:72] = 152'bx;

// This section implements an unregistered operation.
// 
wire local_bb4_var__valid_out;
wire local_bb4_var__stall_in;
wire local_bb4_var__inputs_ready;
wire local_bb4_var__stall_local;
wire local_bb4_var_;

assign local_bb4_var__inputs_ready = (rnode_491to492_bb4_cmp1136_0_valid_out_NO_SHIFT_REG & rcnode_491to492_rc1_ld__0_valid_out_1_NO_SHIFT_REG & rcnode_491to492_rc1_ld__0_valid_out_2_NO_SHIFT_REG);
assign local_bb4_var_ = (local_bb4_cmp1136_GUARD | rcnode_491to492_rc1_ld__0_NO_SHIFT_REG[259]);
assign local_bb4_var__valid_out = local_bb4_var__inputs_ready;
assign local_bb4_var__stall_local = local_bb4_var__stall_in;
assign rnode_491to492_bb4_cmp1136_0_stall_in_NO_SHIFT_REG = (local_bb4_var__stall_local | ~(local_bb4_var__inputs_ready));
assign rcnode_491to492_rc1_ld__0_stall_in_1_NO_SHIFT_REG = (local_bb4_var__stall_local | ~(local_bb4_var__inputs_ready));
assign rcnode_491to492_rc1_ld__0_stall_in_2_NO_SHIFT_REG = (local_bb4_var__stall_local | ~(local_bb4_var__inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb4_c1_eni2_stall_local;
wire [223:0] local_bb4_c1_eni2;

assign local_bb4_c1_eni2[95:0] = local_bb4_c1_eni1[95:0];
assign local_bb4_c1_eni2[127:96] = rnode_162to163_channelCounter_024_0_NO_SHIFT_REG;
assign local_bb4_c1_eni2[223:128] = local_bb4_c1_eni1[223:128];

// This section implements an unregistered operation.
// 
wire local_bb4_c1_eni3_stall_local;
wire [223:0] local_bb4_c1_eni3;

assign local_bb4_c1_eni3[127:0] = local_bb4_c1_eni2[127:0];
assign local_bb4_c1_eni3[159:128] = rnode_162to163_heightCounter_120_0_NO_SHIFT_REG;
assign local_bb4_c1_eni3[223:160] = local_bb4_c1_eni2[223:160];

// This section implements an unregistered operation.
// 
wire local_bb4_c1_eni4_stall_local;
wire [223:0] local_bb4_c1_eni4;

assign local_bb4_c1_eni4[159:0] = local_bb4_c1_eni3[159:0];
assign local_bb4_c1_eni4[191:160] = rnode_162to163_ld__u3_0_NO_SHIFT_REG;
assign local_bb4_c1_eni4[223:192] = local_bb4_c1_eni3[223:192];

// This section implements an unregistered operation.
// 
wire local_bb4_c1_eni5_valid_out;
wire local_bb4_c1_eni5_stall_in;
wire local_bb4_c1_eni5_inputs_ready;
wire local_bb4_c1_eni5_stall_local;
wire [223:0] local_bb4_c1_eni5;

assign local_bb4_c1_eni5_inputs_ready = (rnode_162to163_channelCounter_024_0_valid_out_0_NO_SHIFT_REG & rnode_162to163_heightCounter_120_0_valid_out_0_NO_SHIFT_REG & rnode_162to163_ld__u3_0_valid_out_0_NO_SHIFT_REG & rstag_163to163_bb4_ld_memcoalesce_param_load_060_valid_out & rnode_162to163_widthCounter_217_0_valid_out_0_NO_SHIFT_REG);
assign local_bb4_c1_eni5[191:0] = local_bb4_c1_eni4[191:0];
assign local_bb4_c1_eni5[223:192] = rnode_162to163_widthCounter_217_0_NO_SHIFT_REG;
assign local_bb4_c1_eni5_valid_out = local_bb4_c1_eni5_inputs_ready;
assign local_bb4_c1_eni5_stall_local = local_bb4_c1_eni5_stall_in;
assign rnode_162to163_channelCounter_024_0_stall_in_0_NO_SHIFT_REG = (local_bb4_c1_eni5_stall_local | ~(local_bb4_c1_eni5_inputs_ready));
assign rnode_162to163_heightCounter_120_0_stall_in_0_NO_SHIFT_REG = (local_bb4_c1_eni5_stall_local | ~(local_bb4_c1_eni5_inputs_ready));
assign rnode_162to163_ld__u3_0_stall_in_0_NO_SHIFT_REG = (local_bb4_c1_eni5_stall_local | ~(local_bb4_c1_eni5_inputs_ready));
assign rstag_163to163_bb4_ld_memcoalesce_param_load_060_stall_in = (local_bb4_c1_eni5_stall_local | ~(local_bb4_c1_eni5_inputs_ready));
assign rnode_162to163_widthCounter_217_0_stall_in_0_NO_SHIFT_REG = (local_bb4_c1_eni5_stall_local | ~(local_bb4_c1_eni5_inputs_ready));

// This section implements a staging register.
// 
wire rstag_163to163_bb4_c1_eni5_valid_out;
wire rstag_163to163_bb4_c1_eni5_stall_in;
wire rstag_163to163_bb4_c1_eni5_inputs_ready;
wire rstag_163to163_bb4_c1_eni5_stall_local;
 reg rstag_163to163_bb4_c1_eni5_staging_valid_NO_SHIFT_REG;
wire rstag_163to163_bb4_c1_eni5_combined_valid;
 reg [223:0] rstag_163to163_bb4_c1_eni5_staging_reg_NO_SHIFT_REG;
wire [223:0] rstag_163to163_bb4_c1_eni5;

assign rstag_163to163_bb4_c1_eni5_inputs_ready = local_bb4_c1_eni5_valid_out;
assign rstag_163to163_bb4_c1_eni5 = (rstag_163to163_bb4_c1_eni5_staging_valid_NO_SHIFT_REG ? rstag_163to163_bb4_c1_eni5_staging_reg_NO_SHIFT_REG : local_bb4_c1_eni5);
assign rstag_163to163_bb4_c1_eni5_combined_valid = (rstag_163to163_bb4_c1_eni5_staging_valid_NO_SHIFT_REG | rstag_163to163_bb4_c1_eni5_inputs_ready);
assign rstag_163to163_bb4_c1_eni5_valid_out = rstag_163to163_bb4_c1_eni5_combined_valid;
assign rstag_163to163_bb4_c1_eni5_stall_local = rstag_163to163_bb4_c1_eni5_stall_in;
assign local_bb4_c1_eni5_stall_in = (|rstag_163to163_bb4_c1_eni5_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_163to163_bb4_c1_eni5_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_163to163_bb4_c1_eni5_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_163to163_bb4_c1_eni5_stall_local)
		begin
			if (~(rstag_163to163_bb4_c1_eni5_staging_valid_NO_SHIFT_REG))
			begin
				rstag_163to163_bb4_c1_eni5_staging_valid_NO_SHIFT_REG <= rstag_163to163_bb4_c1_eni5_inputs_ready;
			end
		end
		else
		begin
			rstag_163to163_bb4_c1_eni5_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_163to163_bb4_c1_eni5_staging_valid_NO_SHIFT_REG))
		begin
			rstag_163to163_bb4_c1_eni5_staging_reg_NO_SHIFT_REG <= local_bb4_c1_eni5;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb4_c1_enter_c1_eni5_valid_out_0;
wire local_bb4_c1_enter_c1_eni5_stall_in_0;
wire local_bb4_c1_enter_c1_eni5_valid_out_1;
wire local_bb4_c1_enter_c1_eni5_stall_in_1;
wire local_bb4_c1_enter_c1_eni5_valid_out_2;
wire local_bb4_c1_enter_c1_eni5_stall_in_2;
wire local_bb4_c1_enter_c1_eni5_valid_out_3;
wire local_bb4_c1_enter_c1_eni5_stall_in_3;
wire local_bb4_c1_enter_c1_eni5_valid_out_4;
wire local_bb4_c1_enter_c1_eni5_stall_in_4;
wire local_bb4_c1_enter_c1_eni5_valid_out_5;
wire local_bb4_c1_enter_c1_eni5_stall_in_5;
wire local_bb4_c1_enter_c1_eni5_inputs_ready;
wire local_bb4_c1_enter_c1_eni5_stall_local;
wire local_bb4_c1_enter_c1_eni5_input_accepted;
wire [223:0] local_bb4_c1_enter_c1_eni5;
wire local_bb4_c1_exit_c1_exi5_enable;
wire local_bb4_c1_exit_c1_exi5_entry_stall;
wire local_bb4_c1_enter_c1_eni5_valid_bit;
wire local_bb4_c1_exit_c1_exi5_output_regs_ready;
wire local_bb4_c1_exit_c1_exi5_valid_in;
wire local_bb4_c1_exit_c1_exi5_phases;
wire local_bb4_c1_enter_c1_eni5_inc_pipelined_thread;
wire local_bb4_c1_enter_c1_eni5_dec_pipelined_thread;
wire local_bb4_c1_enter_c1_eni5_fu_stall_out;

assign local_bb4_c1_enter_c1_eni5_inputs_ready = rstag_163to163_bb4_c1_eni5_valid_out;
assign local_bb4_c1_enter_c1_eni5 = rstag_163to163_bb4_c1_eni5;
assign local_bb4_c1_enter_c1_eni5_input_accepted = (local_bb4_c1_enter_c1_eni5_inputs_ready && !(local_bb4_c1_exit_c1_exi5_entry_stall));
assign local_bb4_c1_enter_c1_eni5_valid_bit = local_bb4_c1_enter_c1_eni5_input_accepted;
assign local_bb4_c1_enter_c1_eni5_inc_pipelined_thread = 1'b1;
assign local_bb4_c1_enter_c1_eni5_dec_pipelined_thread = ~(1'b0);
assign local_bb4_c1_enter_c1_eni5_fu_stall_out = (~(local_bb4_c1_enter_c1_eni5_inputs_ready) | local_bb4_c1_exit_c1_exi5_entry_stall);
assign local_bb4_c1_enter_c1_eni5_stall_local = (local_bb4_c1_enter_c1_eni5_stall_in_0 | local_bb4_c1_enter_c1_eni5_stall_in_1 | local_bb4_c1_enter_c1_eni5_stall_in_2 | local_bb4_c1_enter_c1_eni5_stall_in_3 | local_bb4_c1_enter_c1_eni5_stall_in_4 | local_bb4_c1_enter_c1_eni5_stall_in_5);
assign local_bb4_c1_enter_c1_eni5_valid_out_0 = local_bb4_c1_enter_c1_eni5_inputs_ready;
assign local_bb4_c1_enter_c1_eni5_valid_out_1 = local_bb4_c1_enter_c1_eni5_inputs_ready;
assign local_bb4_c1_enter_c1_eni5_valid_out_2 = local_bb4_c1_enter_c1_eni5_inputs_ready;
assign local_bb4_c1_enter_c1_eni5_valid_out_3 = local_bb4_c1_enter_c1_eni5_inputs_ready;
assign local_bb4_c1_enter_c1_eni5_valid_out_4 = local_bb4_c1_enter_c1_eni5_inputs_ready;
assign local_bb4_c1_enter_c1_eni5_valid_out_5 = local_bb4_c1_enter_c1_eni5_inputs_ready;
assign rstag_163to163_bb4_c1_eni5_stall_in = (|local_bb4_c1_enter_c1_eni5_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb4_c1_ene1_stall_local;
wire [63:0] local_bb4_c1_ene1;

assign local_bb4_c1_ene1[31:0] = local_bb4_c1_enter_c1_eni5[39:8];
assign local_bb4_c1_ene1[63:32] = local_bb4_c1_enter_c1_eni5[71:40];

// This section implements an unregistered operation.
// 
wire local_bb4_c1_ene2_valid_out;
wire local_bb4_c1_ene2_stall_in;
wire local_bb4_c1_ene2_inputs_ready;
wire local_bb4_c1_ene2_stall_local;
wire [31:0] local_bb4_c1_ene2;

assign local_bb4_c1_ene2_inputs_ready = local_bb4_c1_enter_c1_eni5_valid_out_1;
assign local_bb4_c1_ene2[31:0] = local_bb4_c1_enter_c1_eni5[127:96];
assign local_bb4_c1_ene2_valid_out = 1'b1;
assign local_bb4_c1_enter_c1_eni5_stall_in_1 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb4_c1_ene3_valid_out;
wire local_bb4_c1_ene3_stall_in;
wire local_bb4_c1_ene3_inputs_ready;
wire local_bb4_c1_ene3_stall_local;
wire [31:0] local_bb4_c1_ene3;

assign local_bb4_c1_ene3_inputs_ready = local_bb4_c1_enter_c1_eni5_valid_out_2;
assign local_bb4_c1_ene3[31:0] = local_bb4_c1_enter_c1_eni5[159:128];
assign local_bb4_c1_ene3_valid_out = 1'b1;
assign local_bb4_c1_enter_c1_eni5_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb4_c1_ene4_valid_out;
wire local_bb4_c1_ene4_stall_in;
wire local_bb4_c1_ene4_inputs_ready;
wire local_bb4_c1_ene4_stall_local;
wire [31:0] local_bb4_c1_ene4;

assign local_bb4_c1_ene4_inputs_ready = local_bb4_c1_enter_c1_eni5_valid_out_3;
assign local_bb4_c1_ene4[31:0] = local_bb4_c1_enter_c1_eni5[191:160];
assign local_bb4_c1_ene4_valid_out = 1'b1;
assign local_bb4_c1_enter_c1_eni5_stall_in_3 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb4_c1_ene5_valid_out;
wire local_bb4_c1_ene5_stall_in;
wire local_bb4_c1_ene5_inputs_ready;
wire local_bb4_c1_ene5_stall_local;
wire [31:0] local_bb4_c1_ene5;

assign local_bb4_c1_ene5_inputs_ready = local_bb4_c1_enter_c1_eni5_valid_out_4;
assign local_bb4_c1_ene5[31:0] = local_bb4_c1_enter_c1_eni5[223:192];
assign local_bb4_c1_ene5_valid_out = 1'b1;
assign local_bb4_c1_enter_c1_eni5_stall_in_4 = 1'b0;

// This section implements an unregistered operation.
// 
wire SFC_2_VALID_163_163_0_valid_out;
wire SFC_2_VALID_163_163_0_stall_in;
wire SFC_2_VALID_163_163_0_inputs_ready;
wire SFC_2_VALID_163_163_0_stall_local;
wire SFC_2_VALID_163_163_0;

assign SFC_2_VALID_163_163_0_inputs_ready = local_bb4_c1_enter_c1_eni5_valid_out_5;
assign SFC_2_VALID_163_163_0 = local_bb4_c1_enter_c1_eni5_valid_bit;
assign SFC_2_VALID_163_163_0_valid_out = 1'b1;
assign local_bb4_c1_enter_c1_eni5_stall_in_5 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb4_memcoalesce_param_extrValue_061_stall_local;
wire [31:0] local_bb4_memcoalesce_param_extrValue_061;

assign local_bb4_memcoalesce_param_extrValue_061[31:0] = local_bb4_c1_ene1[31:0];

// This section implements an unregistered operation.
// 
wire local_bb4_memcoalesce_param_extrValue_061_valid_out;
wire local_bb4_memcoalesce_param_extrValue_061_stall_in;
wire local_bb4_memcoalesce_param_extrValue_162_valid_out;
wire local_bb4_memcoalesce_param_extrValue_162_stall_in;
wire local_bb4_memcoalesce_param_extrValue_162_inputs_ready;
wire local_bb4_memcoalesce_param_extrValue_162_stall_local;
wire [31:0] local_bb4_memcoalesce_param_extrValue_162;

assign local_bb4_memcoalesce_param_extrValue_162_inputs_ready = local_bb4_c1_enter_c1_eni5_valid_out_0;
assign local_bb4_memcoalesce_param_extrValue_162[31:0] = local_bb4_c1_ene1[63:32];
assign local_bb4_memcoalesce_param_extrValue_061_valid_out = 1'b1;
assign local_bb4_memcoalesce_param_extrValue_162_valid_out = 1'b1;
assign local_bb4_c1_enter_c1_eni5_stall_in_0 = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_163to164_bb4_c1_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_163to164_bb4_c1_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_163to164_bb4_c1_ene3_0_NO_SHIFT_REG;
 logic rnode_163to164_bb4_c1_ene3_0_reg_164_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_163to164_bb4_c1_ene3_0_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb4_c1_ene3_0_valid_out_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb4_c1_ene3_0_stall_in_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb4_c1_ene3_0_stall_out_reg_164_NO_SHIFT_REG;

acl_data_fifo rnode_163to164_bb4_c1_ene3_0_reg_164_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_163to164_bb4_c1_ene3_0_reg_164_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_163to164_bb4_c1_ene3_0_stall_in_reg_164_NO_SHIFT_REG),
	.valid_out(rnode_163to164_bb4_c1_ene3_0_valid_out_reg_164_NO_SHIFT_REG),
	.stall_out(rnode_163to164_bb4_c1_ene3_0_stall_out_reg_164_NO_SHIFT_REG),
	.data_in(local_bb4_c1_ene3),
	.data_out(rnode_163to164_bb4_c1_ene3_0_reg_164_NO_SHIFT_REG)
);

defparam rnode_163to164_bb4_c1_ene3_0_reg_164_fifo.DEPTH = 1;
defparam rnode_163to164_bb4_c1_ene3_0_reg_164_fifo.DATA_WIDTH = 32;
defparam rnode_163to164_bb4_c1_ene3_0_reg_164_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_163to164_bb4_c1_ene3_0_reg_164_fifo.IMPL = "shift_reg";

assign rnode_163to164_bb4_c1_ene3_0_reg_164_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_c1_ene3_stall_in = 1'b0;
assign rnode_163to164_bb4_c1_ene3_0_NO_SHIFT_REG = rnode_163to164_bb4_c1_ene3_0_reg_164_NO_SHIFT_REG;
assign rnode_163to164_bb4_c1_ene3_0_stall_in_reg_164_NO_SHIFT_REG = ~(local_bb4_c1_exit_c1_exi5_enable);
assign rnode_163to164_bb4_c1_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_163to164_bb4_c1_ene4_0_valid_out_NO_SHIFT_REG;
 logic rnode_163to164_bb4_c1_ene4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_163to164_bb4_c1_ene4_0_NO_SHIFT_REG;
 logic rnode_163to164_bb4_c1_ene4_0_reg_164_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_163to164_bb4_c1_ene4_0_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb4_c1_ene4_0_valid_out_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb4_c1_ene4_0_stall_in_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb4_c1_ene4_0_stall_out_reg_164_NO_SHIFT_REG;

acl_data_fifo rnode_163to164_bb4_c1_ene4_0_reg_164_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_163to164_bb4_c1_ene4_0_reg_164_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_163to164_bb4_c1_ene4_0_stall_in_reg_164_NO_SHIFT_REG),
	.valid_out(rnode_163to164_bb4_c1_ene4_0_valid_out_reg_164_NO_SHIFT_REG),
	.stall_out(rnode_163to164_bb4_c1_ene4_0_stall_out_reg_164_NO_SHIFT_REG),
	.data_in(local_bb4_c1_ene4),
	.data_out(rnode_163to164_bb4_c1_ene4_0_reg_164_NO_SHIFT_REG)
);

defparam rnode_163to164_bb4_c1_ene4_0_reg_164_fifo.DEPTH = 1;
defparam rnode_163to164_bb4_c1_ene4_0_reg_164_fifo.DATA_WIDTH = 32;
defparam rnode_163to164_bb4_c1_ene4_0_reg_164_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_163to164_bb4_c1_ene4_0_reg_164_fifo.IMPL = "shift_reg";

assign rnode_163to164_bb4_c1_ene4_0_reg_164_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_c1_ene4_stall_in = 1'b0;
assign rnode_163to164_bb4_c1_ene4_0_NO_SHIFT_REG = rnode_163to164_bb4_c1_ene4_0_reg_164_NO_SHIFT_REG;
assign rnode_163to164_bb4_c1_ene4_0_stall_in_reg_164_NO_SHIFT_REG = ~(local_bb4_c1_exit_c1_exi5_enable);
assign rnode_163to164_bb4_c1_ene4_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_163to164_bb4_c1_ene5_0_valid_out_NO_SHIFT_REG;
 logic rnode_163to164_bb4_c1_ene5_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_163to164_bb4_c1_ene5_0_NO_SHIFT_REG;
 logic rnode_163to164_bb4_c1_ene5_0_reg_164_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_163to164_bb4_c1_ene5_0_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb4_c1_ene5_0_valid_out_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb4_c1_ene5_0_stall_in_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb4_c1_ene5_0_stall_out_reg_164_NO_SHIFT_REG;

acl_data_fifo rnode_163to164_bb4_c1_ene5_0_reg_164_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_163to164_bb4_c1_ene5_0_reg_164_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_163to164_bb4_c1_ene5_0_stall_in_reg_164_NO_SHIFT_REG),
	.valid_out(rnode_163to164_bb4_c1_ene5_0_valid_out_reg_164_NO_SHIFT_REG),
	.stall_out(rnode_163to164_bb4_c1_ene5_0_stall_out_reg_164_NO_SHIFT_REG),
	.data_in(local_bb4_c1_ene5),
	.data_out(rnode_163to164_bb4_c1_ene5_0_reg_164_NO_SHIFT_REG)
);

defparam rnode_163to164_bb4_c1_ene5_0_reg_164_fifo.DEPTH = 1;
defparam rnode_163to164_bb4_c1_ene5_0_reg_164_fifo.DATA_WIDTH = 32;
defparam rnode_163to164_bb4_c1_ene5_0_reg_164_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_163to164_bb4_c1_ene5_0_reg_164_fifo.IMPL = "shift_reg";

assign rnode_163to164_bb4_c1_ene5_0_reg_164_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_c1_ene5_stall_in = 1'b0;
assign rnode_163to164_bb4_c1_ene5_0_NO_SHIFT_REG = rnode_163to164_bb4_c1_ene5_0_reg_164_NO_SHIFT_REG;
assign rnode_163to164_bb4_c1_ene5_0_stall_in_reg_164_NO_SHIFT_REG = ~(local_bb4_c1_exit_c1_exi5_enable);
assign rnode_163to164_bb4_c1_ene5_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_2_VALID_163_164_0_inputs_ready;
 reg SFC_2_VALID_163_164_0_valid_out_NO_SHIFT_REG;
wire SFC_2_VALID_163_164_0_stall_in;
wire SFC_2_VALID_163_164_0_output_regs_ready;
 reg SFC_2_VALID_163_164_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_2_VALID_163_164_0_causedstall;

assign SFC_2_VALID_163_164_0_inputs_ready = 1'b1;
assign SFC_2_VALID_163_164_0_output_regs_ready = local_bb4_c1_exit_c1_exi5_enable;
assign SFC_2_VALID_163_163_0_stall_in = 1'b0;
assign SFC_2_VALID_163_164_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb4_c1_exit_c1_exi5_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_2_VALID_163_164_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_2_VALID_163_164_0_output_regs_ready)
		begin
			SFC_2_VALID_163_164_0_NO_SHIFT_REG <= SFC_2_VALID_163_163_0;
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb4_mul_inputs_ready;
 reg local_bb4_mul_valid_out_NO_SHIFT_REG;
wire local_bb4_mul_stall_in;
wire local_bb4_mul_output_regs_ready;
wire [31:0] local_bb4_mul;
 reg local_bb4_mul_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb4_mul_valid_pipe_1_NO_SHIFT_REG;
wire local_bb4_mul_causedstall;

acl_int_mult int_module_local_bb4_mul (
	.clock(clock),
	.dataa(local_bb4_memcoalesce_param_extrValue_061),
	.datab(local_bb4_c1_ene2),
	.enable(local_bb4_mul_output_regs_ready),
	.result(local_bb4_mul)
);

defparam int_module_local_bb4_mul.INPUT1_WIDTH = 32;
defparam int_module_local_bb4_mul.INPUT2_WIDTH = 32;
defparam int_module_local_bb4_mul.OUTPUT_WIDTH = 32;
defparam int_module_local_bb4_mul.LATENCY = 3;
defparam int_module_local_bb4_mul.SIGNED = 0;

assign local_bb4_mul_inputs_ready = 1'b1;
assign local_bb4_mul_output_regs_ready = local_bb4_c1_exit_c1_exi5_enable;
assign local_bb4_memcoalesce_param_extrValue_061_stall_in = 1'b0;
assign local_bb4_c1_ene2_stall_in = 1'b0;
assign local_bb4_mul_causedstall = (1'b1 && (1'b0 && !(~(local_bb4_c1_exit_c1_exi5_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_mul_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb4_mul_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4_mul_output_regs_ready)
		begin
			local_bb4_mul_valid_pipe_0_NO_SHIFT_REG <= 1'b1;
			local_bb4_mul_valid_pipe_1_NO_SHIFT_REG <= local_bb4_mul_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_mul_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4_mul_output_regs_ready)
		begin
			local_bb4_mul_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb4_mul_stall_in))
			begin
				local_bb4_mul_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_163to164_bb4_memcoalesce_param_extrValue_162_0_valid_out_NO_SHIFT_REG;
 logic rnode_163to164_bb4_memcoalesce_param_extrValue_162_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_163to164_bb4_memcoalesce_param_extrValue_162_0_NO_SHIFT_REG;
 logic rnode_163to164_bb4_memcoalesce_param_extrValue_162_0_reg_164_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_163to164_bb4_memcoalesce_param_extrValue_162_0_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb4_memcoalesce_param_extrValue_162_0_valid_out_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb4_memcoalesce_param_extrValue_162_0_stall_in_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb4_memcoalesce_param_extrValue_162_0_stall_out_reg_164_NO_SHIFT_REG;

acl_data_fifo rnode_163to164_bb4_memcoalesce_param_extrValue_162_0_reg_164_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_163to164_bb4_memcoalesce_param_extrValue_162_0_reg_164_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_163to164_bb4_memcoalesce_param_extrValue_162_0_stall_in_reg_164_NO_SHIFT_REG),
	.valid_out(rnode_163to164_bb4_memcoalesce_param_extrValue_162_0_valid_out_reg_164_NO_SHIFT_REG),
	.stall_out(rnode_163to164_bb4_memcoalesce_param_extrValue_162_0_stall_out_reg_164_NO_SHIFT_REG),
	.data_in(local_bb4_memcoalesce_param_extrValue_162),
	.data_out(rnode_163to164_bb4_memcoalesce_param_extrValue_162_0_reg_164_NO_SHIFT_REG)
);

defparam rnode_163to164_bb4_memcoalesce_param_extrValue_162_0_reg_164_fifo.DEPTH = 1;
defparam rnode_163to164_bb4_memcoalesce_param_extrValue_162_0_reg_164_fifo.DATA_WIDTH = 32;
defparam rnode_163to164_bb4_memcoalesce_param_extrValue_162_0_reg_164_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_163to164_bb4_memcoalesce_param_extrValue_162_0_reg_164_fifo.IMPL = "shift_reg";

assign rnode_163to164_bb4_memcoalesce_param_extrValue_162_0_reg_164_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_memcoalesce_param_extrValue_162_stall_in = 1'b0;
assign rnode_163to164_bb4_memcoalesce_param_extrValue_162_0_NO_SHIFT_REG = rnode_163to164_bb4_memcoalesce_param_extrValue_162_0_reg_164_NO_SHIFT_REG;
assign rnode_163to164_bb4_memcoalesce_param_extrValue_162_0_stall_in_reg_164_NO_SHIFT_REG = ~(local_bb4_c1_exit_c1_exi5_enable);
assign rnode_163to164_bb4_memcoalesce_param_extrValue_162_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_164to165_bb4_c1_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_164to165_bb4_c1_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_164to165_bb4_c1_ene3_0_NO_SHIFT_REG;
 logic rnode_164to165_bb4_c1_ene3_0_reg_165_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_164to165_bb4_c1_ene3_0_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb4_c1_ene3_0_valid_out_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb4_c1_ene3_0_stall_in_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb4_c1_ene3_0_stall_out_reg_165_NO_SHIFT_REG;

acl_data_fifo rnode_164to165_bb4_c1_ene3_0_reg_165_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_164to165_bb4_c1_ene3_0_reg_165_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_164to165_bb4_c1_ene3_0_stall_in_reg_165_NO_SHIFT_REG),
	.valid_out(rnode_164to165_bb4_c1_ene3_0_valid_out_reg_165_NO_SHIFT_REG),
	.stall_out(rnode_164to165_bb4_c1_ene3_0_stall_out_reg_165_NO_SHIFT_REG),
	.data_in(rnode_163to164_bb4_c1_ene3_0_NO_SHIFT_REG),
	.data_out(rnode_164to165_bb4_c1_ene3_0_reg_165_NO_SHIFT_REG)
);

defparam rnode_164to165_bb4_c1_ene3_0_reg_165_fifo.DEPTH = 1;
defparam rnode_164to165_bb4_c1_ene3_0_reg_165_fifo.DATA_WIDTH = 32;
defparam rnode_164to165_bb4_c1_ene3_0_reg_165_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_164to165_bb4_c1_ene3_0_reg_165_fifo.IMPL = "shift_reg";

assign rnode_164to165_bb4_c1_ene3_0_reg_165_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_163to164_bb4_c1_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_164to165_bb4_c1_ene3_0_NO_SHIFT_REG = rnode_164to165_bb4_c1_ene3_0_reg_165_NO_SHIFT_REG;
assign rnode_164to165_bb4_c1_ene3_0_stall_in_reg_165_NO_SHIFT_REG = ~(local_bb4_c1_exit_c1_exi5_enable);
assign rnode_164to165_bb4_c1_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_164to165_bb4_c1_ene4_0_valid_out_NO_SHIFT_REG;
 logic rnode_164to165_bb4_c1_ene4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_164to165_bb4_c1_ene4_0_NO_SHIFT_REG;
 logic rnode_164to165_bb4_c1_ene4_0_reg_165_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_164to165_bb4_c1_ene4_0_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb4_c1_ene4_0_valid_out_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb4_c1_ene4_0_stall_in_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb4_c1_ene4_0_stall_out_reg_165_NO_SHIFT_REG;

acl_data_fifo rnode_164to165_bb4_c1_ene4_0_reg_165_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_164to165_bb4_c1_ene4_0_reg_165_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_164to165_bb4_c1_ene4_0_stall_in_reg_165_NO_SHIFT_REG),
	.valid_out(rnode_164to165_bb4_c1_ene4_0_valid_out_reg_165_NO_SHIFT_REG),
	.stall_out(rnode_164to165_bb4_c1_ene4_0_stall_out_reg_165_NO_SHIFT_REG),
	.data_in(rnode_163to164_bb4_c1_ene4_0_NO_SHIFT_REG),
	.data_out(rnode_164to165_bb4_c1_ene4_0_reg_165_NO_SHIFT_REG)
);

defparam rnode_164to165_bb4_c1_ene4_0_reg_165_fifo.DEPTH = 1;
defparam rnode_164to165_bb4_c1_ene4_0_reg_165_fifo.DATA_WIDTH = 32;
defparam rnode_164to165_bb4_c1_ene4_0_reg_165_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_164to165_bb4_c1_ene4_0_reg_165_fifo.IMPL = "shift_reg";

assign rnode_164to165_bb4_c1_ene4_0_reg_165_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_163to164_bb4_c1_ene4_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_164to165_bb4_c1_ene4_0_NO_SHIFT_REG = rnode_164to165_bb4_c1_ene4_0_reg_165_NO_SHIFT_REG;
assign rnode_164to165_bb4_c1_ene4_0_stall_in_reg_165_NO_SHIFT_REG = ~(local_bb4_c1_exit_c1_exi5_enable);
assign rnode_164to165_bb4_c1_ene4_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_164to165_bb4_c1_ene5_0_valid_out_NO_SHIFT_REG;
 logic rnode_164to165_bb4_c1_ene5_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_164to165_bb4_c1_ene5_0_NO_SHIFT_REG;
 logic rnode_164to165_bb4_c1_ene5_0_reg_165_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_164to165_bb4_c1_ene5_0_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb4_c1_ene5_0_valid_out_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb4_c1_ene5_0_stall_in_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb4_c1_ene5_0_stall_out_reg_165_NO_SHIFT_REG;

acl_data_fifo rnode_164to165_bb4_c1_ene5_0_reg_165_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_164to165_bb4_c1_ene5_0_reg_165_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_164to165_bb4_c1_ene5_0_stall_in_reg_165_NO_SHIFT_REG),
	.valid_out(rnode_164to165_bb4_c1_ene5_0_valid_out_reg_165_NO_SHIFT_REG),
	.stall_out(rnode_164to165_bb4_c1_ene5_0_stall_out_reg_165_NO_SHIFT_REG),
	.data_in(rnode_163to164_bb4_c1_ene5_0_NO_SHIFT_REG),
	.data_out(rnode_164to165_bb4_c1_ene5_0_reg_165_NO_SHIFT_REG)
);

defparam rnode_164to165_bb4_c1_ene5_0_reg_165_fifo.DEPTH = 1;
defparam rnode_164to165_bb4_c1_ene5_0_reg_165_fifo.DATA_WIDTH = 32;
defparam rnode_164to165_bb4_c1_ene5_0_reg_165_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_164to165_bb4_c1_ene5_0_reg_165_fifo.IMPL = "shift_reg";

assign rnode_164to165_bb4_c1_ene5_0_reg_165_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_163to164_bb4_c1_ene5_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_164to165_bb4_c1_ene5_0_NO_SHIFT_REG = rnode_164to165_bb4_c1_ene5_0_reg_165_NO_SHIFT_REG;
assign rnode_164to165_bb4_c1_ene5_0_stall_in_reg_165_NO_SHIFT_REG = ~(local_bb4_c1_exit_c1_exi5_enable);
assign rnode_164to165_bb4_c1_ene5_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_2_VALID_164_165_0_inputs_ready;
 reg SFC_2_VALID_164_165_0_valid_out_NO_SHIFT_REG;
wire SFC_2_VALID_164_165_0_stall_in;
wire SFC_2_VALID_164_165_0_output_regs_ready;
 reg SFC_2_VALID_164_165_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_2_VALID_164_165_0_causedstall;

assign SFC_2_VALID_164_165_0_inputs_ready = 1'b1;
assign SFC_2_VALID_164_165_0_output_regs_ready = local_bb4_c1_exit_c1_exi5_enable;
assign SFC_2_VALID_163_164_0_stall_in = 1'b0;
assign SFC_2_VALID_164_165_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb4_c1_exit_c1_exi5_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_2_VALID_164_165_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_2_VALID_164_165_0_output_regs_ready)
		begin
			SFC_2_VALID_164_165_0_NO_SHIFT_REG <= SFC_2_VALID_163_164_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb4_c1_exi1_stall_local;
wire [191:0] local_bb4_c1_exi1;

assign local_bb4_c1_exi1[31:0] = 32'bx;
assign local_bb4_c1_exi1[63:32] = local_bb4_mul;
assign local_bb4_c1_exi1[191:64] = 128'bx;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_164to165_bb4_memcoalesce_param_extrValue_162_0_valid_out_NO_SHIFT_REG;
 logic rnode_164to165_bb4_memcoalesce_param_extrValue_162_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_164to165_bb4_memcoalesce_param_extrValue_162_0_NO_SHIFT_REG;
 logic rnode_164to165_bb4_memcoalesce_param_extrValue_162_0_reg_165_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_164to165_bb4_memcoalesce_param_extrValue_162_0_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb4_memcoalesce_param_extrValue_162_0_valid_out_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb4_memcoalesce_param_extrValue_162_0_stall_in_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb4_memcoalesce_param_extrValue_162_0_stall_out_reg_165_NO_SHIFT_REG;

acl_data_fifo rnode_164to165_bb4_memcoalesce_param_extrValue_162_0_reg_165_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_164to165_bb4_memcoalesce_param_extrValue_162_0_reg_165_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_164to165_bb4_memcoalesce_param_extrValue_162_0_stall_in_reg_165_NO_SHIFT_REG),
	.valid_out(rnode_164to165_bb4_memcoalesce_param_extrValue_162_0_valid_out_reg_165_NO_SHIFT_REG),
	.stall_out(rnode_164to165_bb4_memcoalesce_param_extrValue_162_0_stall_out_reg_165_NO_SHIFT_REG),
	.data_in(rnode_163to164_bb4_memcoalesce_param_extrValue_162_0_NO_SHIFT_REG),
	.data_out(rnode_164to165_bb4_memcoalesce_param_extrValue_162_0_reg_165_NO_SHIFT_REG)
);

defparam rnode_164to165_bb4_memcoalesce_param_extrValue_162_0_reg_165_fifo.DEPTH = 1;
defparam rnode_164to165_bb4_memcoalesce_param_extrValue_162_0_reg_165_fifo.DATA_WIDTH = 32;
defparam rnode_164to165_bb4_memcoalesce_param_extrValue_162_0_reg_165_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_164to165_bb4_memcoalesce_param_extrValue_162_0_reg_165_fifo.IMPL = "shift_reg";

assign rnode_164to165_bb4_memcoalesce_param_extrValue_162_0_reg_165_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_163to164_bb4_memcoalesce_param_extrValue_162_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_164to165_bb4_memcoalesce_param_extrValue_162_0_NO_SHIFT_REG = rnode_164to165_bb4_memcoalesce_param_extrValue_162_0_reg_165_NO_SHIFT_REG;
assign rnode_164to165_bb4_memcoalesce_param_extrValue_162_0_stall_in_reg_165_NO_SHIFT_REG = ~(local_bb4_c1_exit_c1_exi5_enable);
assign rnode_164to165_bb4_memcoalesce_param_extrValue_162_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_165to166_bb4_c1_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_165to166_bb4_c1_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_bb4_c1_ene3_0_NO_SHIFT_REG;
 logic rnode_165to166_bb4_c1_ene3_0_reg_166_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_bb4_c1_ene3_0_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_bb4_c1_ene3_0_valid_out_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_bb4_c1_ene3_0_stall_in_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_bb4_c1_ene3_0_stall_out_reg_166_NO_SHIFT_REG;

acl_data_fifo rnode_165to166_bb4_c1_ene3_0_reg_166_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_165to166_bb4_c1_ene3_0_reg_166_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_165to166_bb4_c1_ene3_0_stall_in_reg_166_NO_SHIFT_REG),
	.valid_out(rnode_165to166_bb4_c1_ene3_0_valid_out_reg_166_NO_SHIFT_REG),
	.stall_out(rnode_165to166_bb4_c1_ene3_0_stall_out_reg_166_NO_SHIFT_REG),
	.data_in(rnode_164to165_bb4_c1_ene3_0_NO_SHIFT_REG),
	.data_out(rnode_165to166_bb4_c1_ene3_0_reg_166_NO_SHIFT_REG)
);

defparam rnode_165to166_bb4_c1_ene3_0_reg_166_fifo.DEPTH = 1;
defparam rnode_165to166_bb4_c1_ene3_0_reg_166_fifo.DATA_WIDTH = 32;
defparam rnode_165to166_bb4_c1_ene3_0_reg_166_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_165to166_bb4_c1_ene3_0_reg_166_fifo.IMPL = "shift_reg";

assign rnode_165to166_bb4_c1_ene3_0_reg_166_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_164to165_bb4_c1_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_165to166_bb4_c1_ene3_0_NO_SHIFT_REG = rnode_165to166_bb4_c1_ene3_0_reg_166_NO_SHIFT_REG;
assign rnode_165to166_bb4_c1_ene3_0_stall_in_reg_166_NO_SHIFT_REG = ~(local_bb4_c1_exit_c1_exi5_enable);
assign rnode_165to166_bb4_c1_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_165to166_bb4_c1_ene4_0_valid_out_NO_SHIFT_REG;
 logic rnode_165to166_bb4_c1_ene4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_bb4_c1_ene4_0_NO_SHIFT_REG;
 logic rnode_165to166_bb4_c1_ene4_0_reg_166_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_bb4_c1_ene4_0_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_bb4_c1_ene4_0_valid_out_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_bb4_c1_ene4_0_stall_in_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_bb4_c1_ene4_0_stall_out_reg_166_NO_SHIFT_REG;

acl_data_fifo rnode_165to166_bb4_c1_ene4_0_reg_166_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_165to166_bb4_c1_ene4_0_reg_166_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_165to166_bb4_c1_ene4_0_stall_in_reg_166_NO_SHIFT_REG),
	.valid_out(rnode_165to166_bb4_c1_ene4_0_valid_out_reg_166_NO_SHIFT_REG),
	.stall_out(rnode_165to166_bb4_c1_ene4_0_stall_out_reg_166_NO_SHIFT_REG),
	.data_in(rnode_164to165_bb4_c1_ene4_0_NO_SHIFT_REG),
	.data_out(rnode_165to166_bb4_c1_ene4_0_reg_166_NO_SHIFT_REG)
);

defparam rnode_165to166_bb4_c1_ene4_0_reg_166_fifo.DEPTH = 1;
defparam rnode_165to166_bb4_c1_ene4_0_reg_166_fifo.DATA_WIDTH = 32;
defparam rnode_165to166_bb4_c1_ene4_0_reg_166_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_165to166_bb4_c1_ene4_0_reg_166_fifo.IMPL = "shift_reg";

assign rnode_165to166_bb4_c1_ene4_0_reg_166_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_164to165_bb4_c1_ene4_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_165to166_bb4_c1_ene4_0_NO_SHIFT_REG = rnode_165to166_bb4_c1_ene4_0_reg_166_NO_SHIFT_REG;
assign rnode_165to166_bb4_c1_ene4_0_stall_in_reg_166_NO_SHIFT_REG = ~(local_bb4_c1_exit_c1_exi5_enable);
assign rnode_165to166_bb4_c1_ene4_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_165to166_bb4_c1_ene5_0_valid_out_NO_SHIFT_REG;
 logic rnode_165to166_bb4_c1_ene5_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_bb4_c1_ene5_0_NO_SHIFT_REG;
 logic rnode_165to166_bb4_c1_ene5_0_reg_166_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_bb4_c1_ene5_0_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_bb4_c1_ene5_0_valid_out_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_bb4_c1_ene5_0_stall_in_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_bb4_c1_ene5_0_stall_out_reg_166_NO_SHIFT_REG;

acl_data_fifo rnode_165to166_bb4_c1_ene5_0_reg_166_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_165to166_bb4_c1_ene5_0_reg_166_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_165to166_bb4_c1_ene5_0_stall_in_reg_166_NO_SHIFT_REG),
	.valid_out(rnode_165to166_bb4_c1_ene5_0_valid_out_reg_166_NO_SHIFT_REG),
	.stall_out(rnode_165to166_bb4_c1_ene5_0_stall_out_reg_166_NO_SHIFT_REG),
	.data_in(rnode_164to165_bb4_c1_ene5_0_NO_SHIFT_REG),
	.data_out(rnode_165to166_bb4_c1_ene5_0_reg_166_NO_SHIFT_REG)
);

defparam rnode_165to166_bb4_c1_ene5_0_reg_166_fifo.DEPTH = 1;
defparam rnode_165to166_bb4_c1_ene5_0_reg_166_fifo.DATA_WIDTH = 32;
defparam rnode_165to166_bb4_c1_ene5_0_reg_166_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_165to166_bb4_c1_ene5_0_reg_166_fifo.IMPL = "shift_reg";

assign rnode_165to166_bb4_c1_ene5_0_reg_166_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_164to165_bb4_c1_ene5_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_165to166_bb4_c1_ene5_0_NO_SHIFT_REG = rnode_165to166_bb4_c1_ene5_0_reg_166_NO_SHIFT_REG;
assign rnode_165to166_bb4_c1_ene5_0_stall_in_reg_166_NO_SHIFT_REG = ~(local_bb4_c1_exit_c1_exi5_enable);
assign rnode_165to166_bb4_c1_ene5_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_2_VALID_165_166_0_inputs_ready;
 reg SFC_2_VALID_165_166_0_valid_out_NO_SHIFT_REG;
wire SFC_2_VALID_165_166_0_stall_in;
wire SFC_2_VALID_165_166_0_output_regs_ready;
 reg SFC_2_VALID_165_166_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_2_VALID_165_166_0_causedstall;

assign SFC_2_VALID_165_166_0_inputs_ready = 1'b1;
assign SFC_2_VALID_165_166_0_output_regs_ready = local_bb4_c1_exit_c1_exi5_enable;
assign SFC_2_VALID_164_165_0_stall_in = 1'b0;
assign SFC_2_VALID_165_166_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb4_c1_exit_c1_exi5_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_2_VALID_165_166_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_2_VALID_165_166_0_output_regs_ready)
		begin
			SFC_2_VALID_165_166_0_NO_SHIFT_REG <= SFC_2_VALID_164_165_0_NO_SHIFT_REG;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_valid_out_NO_SHIFT_REG;
 logic rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_NO_SHIFT_REG;
 logic rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_reg_166_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_valid_out_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_stall_in_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_stall_out_reg_166_NO_SHIFT_REG;

acl_data_fifo rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_reg_166_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_reg_166_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_stall_in_reg_166_NO_SHIFT_REG),
	.valid_out(rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_valid_out_reg_166_NO_SHIFT_REG),
	.stall_out(rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_stall_out_reg_166_NO_SHIFT_REG),
	.data_in(rnode_164to165_bb4_memcoalesce_param_extrValue_162_0_NO_SHIFT_REG),
	.data_out(rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_reg_166_NO_SHIFT_REG)
);

defparam rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_reg_166_fifo.DEPTH = 1;
defparam rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_reg_166_fifo.DATA_WIDTH = 32;
defparam rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_reg_166_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_reg_166_fifo.IMPL = "shift_reg";

assign rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_reg_166_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_164to165_bb4_memcoalesce_param_extrValue_162_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_NO_SHIFT_REG = rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_reg_166_NO_SHIFT_REG;
assign rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_stall_in_reg_166_NO_SHIFT_REG = ~(local_bb4_c1_exit_c1_exi5_enable);
assign rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb4_c1_exi2_stall_local;
wire [191:0] local_bb4_c1_exi2;

assign local_bb4_c1_exi2[63:0] = local_bb4_c1_exi1[63:0];
assign local_bb4_c1_exi2[95:64] = rnode_165to166_bb4_c1_ene3_0_NO_SHIFT_REG;
assign local_bb4_c1_exi2[191:96] = local_bb4_c1_exi1[191:96];

// This section implements an unregistered operation.
// 
wire local_bb4_c1_exi3_stall_local;
wire [191:0] local_bb4_c1_exi3;

assign local_bb4_c1_exi3[95:0] = local_bb4_c1_exi2[95:0];
assign local_bb4_c1_exi3[127:96] = rnode_165to166_bb4_c1_ene4_0_NO_SHIFT_REG;
assign local_bb4_c1_exi3[191:128] = local_bb4_c1_exi2[191:128];

// This section implements an unregistered operation.
// 
wire local_bb4_c1_exi4_stall_local;
wire [191:0] local_bb4_c1_exi4;

assign local_bb4_c1_exi4[127:0] = local_bb4_c1_exi3[127:0];
assign local_bb4_c1_exi4[159:128] = rnode_165to166_bb4_c1_ene5_0_NO_SHIFT_REG;
assign local_bb4_c1_exi4[191:160] = local_bb4_c1_exi3[191:160];

// This section implements an unregistered operation.
// 
wire local_bb4_c1_exi5_valid_out;
wire local_bb4_c1_exi5_stall_in;
wire local_bb4_c1_exi5_inputs_ready;
wire local_bb4_c1_exi5_stall_local;
wire [191:0] local_bb4_c1_exi5;

assign local_bb4_c1_exi5_inputs_ready = (local_bb4_mul_valid_out_NO_SHIFT_REG & rnode_165to166_bb4_c1_ene3_0_valid_out_NO_SHIFT_REG & rnode_165to166_bb4_c1_ene4_0_valid_out_NO_SHIFT_REG & rnode_165to166_bb4_c1_ene5_0_valid_out_NO_SHIFT_REG & rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_valid_out_NO_SHIFT_REG);
assign local_bb4_c1_exi5[159:0] = local_bb4_c1_exi4[159:0];
assign local_bb4_c1_exi5[191:160] = rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_NO_SHIFT_REG;
assign local_bb4_c1_exi5_valid_out = 1'b1;
assign local_bb4_mul_stall_in = 1'b0;
assign rnode_165to166_bb4_c1_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_165to166_bb4_c1_ene4_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_165to166_bb4_c1_ene5_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_165to166_bb4_memcoalesce_param_extrValue_162_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb4_c1_exit_c1_exi5_valid_out;
wire local_bb4_c1_exit_c1_exi5_stall_in;
wire local_bb4_c1_exit_c1_exi5_inputs_ready;
wire local_bb4_c1_exit_c1_exi5_stall_local;
wire [191:0] local_bb4_c1_exit_c1_exi5;
wire local_bb4_c1_exit_c1_exi5_valid;
wire local_bb4_c1_exit_c1_exi5_fu_stall_out;

acl_enable_sink local_bb4_c1_exit_c1_exi5_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb4_c1_exi5),
	.data_out(local_bb4_c1_exit_c1_exi5),
	.input_accepted(local_bb4_c1_enter_c1_eni5_input_accepted),
	.valid_out(local_bb4_c1_exit_c1_exi5_valid),
	.stall_in(local_bb4_c1_exit_c1_exi5_stall_local),
	.enable(local_bb4_c1_exit_c1_exi5_enable),
	.valid_in(local_bb4_c1_exit_c1_exi5_valid_in),
	.stall_entry(local_bb4_c1_exit_c1_exi5_entry_stall),
	.inc_pipelined_thread(local_bb4_c1_enter_c1_eni5_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb4_c1_enter_c1_eni5_dec_pipelined_thread)
);

defparam local_bb4_c1_exit_c1_exi5_instance.DATA_WIDTH = 192;
defparam local_bb4_c1_exit_c1_exi5_instance.PIPELINE_DEPTH = 3;
defparam local_bb4_c1_exit_c1_exi5_instance.SCHEDULEII = 1;
defparam local_bb4_c1_exit_c1_exi5_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb4_c1_exit_c1_exi5_inputs_ready = (local_bb4_c1_exi5_valid_out & SFC_2_VALID_165_166_0_valid_out_NO_SHIFT_REG);
assign local_bb4_c1_exit_c1_exi5_valid_in = SFC_2_VALID_165_166_0_NO_SHIFT_REG;
assign local_bb4_c1_exit_c1_exi5_fu_stall_out = ~(local_bb4_c1_exit_c1_exi5_enable);
assign local_bb4_c1_exit_c1_exi5_valid_out = local_bb4_c1_exit_c1_exi5_valid;
assign local_bb4_c1_exit_c1_exi5_stall_local = local_bb4_c1_exit_c1_exi5_stall_in;
assign local_bb4_c1_exi5_stall_in = 1'b0;
assign SFC_2_VALID_165_166_0_stall_in = 1'b0;

// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_166to166_bb4_c1_exit_c1_exi5_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_166to166_bb4_c1_exit_c1_exi5_0_stall_in_0_NO_SHIFT_REG;
 logic [191:0] rnode_166to166_bb4_c1_exit_c1_exi5_0_NO_SHIFT_REG;
 logic rnode_166to166_bb4_c1_exit_c1_exi5_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_166to166_bb4_c1_exit_c1_exi5_0_stall_in_1_NO_SHIFT_REG;
 logic [191:0] rnode_166to166_bb4_c1_exit_c1_exi5_1_NO_SHIFT_REG;
 logic rnode_166to166_bb4_c1_exit_c1_exi5_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_166to166_bb4_c1_exit_c1_exi5_0_stall_in_2_NO_SHIFT_REG;
 logic [191:0] rnode_166to166_bb4_c1_exit_c1_exi5_2_NO_SHIFT_REG;
 logic rnode_166to166_bb4_c1_exit_c1_exi5_0_valid_out_3_NO_SHIFT_REG;
 logic rnode_166to166_bb4_c1_exit_c1_exi5_0_stall_in_3_NO_SHIFT_REG;
 logic [191:0] rnode_166to166_bb4_c1_exit_c1_exi5_3_NO_SHIFT_REG;
 logic rnode_166to166_bb4_c1_exit_c1_exi5_0_valid_out_4_NO_SHIFT_REG;
 logic rnode_166to166_bb4_c1_exit_c1_exi5_0_stall_in_4_NO_SHIFT_REG;
 logic [191:0] rnode_166to166_bb4_c1_exit_c1_exi5_4_NO_SHIFT_REG;
 logic rnode_166to166_bb4_c1_exit_c1_exi5_0_reg_166_inputs_ready_NO_SHIFT_REG;
 logic [191:0] rnode_166to166_bb4_c1_exit_c1_exi5_0_reg_166_NO_SHIFT_REG;
 logic rnode_166to166_bb4_c1_exit_c1_exi5_0_valid_out_0_reg_166_NO_SHIFT_REG;
 logic rnode_166to166_bb4_c1_exit_c1_exi5_0_stall_in_0_reg_166_NO_SHIFT_REG;
 logic rnode_166to166_bb4_c1_exit_c1_exi5_0_stall_out_reg_166_NO_SHIFT_REG;

acl_data_fifo rnode_166to166_bb4_c1_exit_c1_exi5_0_reg_166_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_166to166_bb4_c1_exit_c1_exi5_0_reg_166_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_166to166_bb4_c1_exit_c1_exi5_0_stall_in_0_reg_166_NO_SHIFT_REG),
	.valid_out(rnode_166to166_bb4_c1_exit_c1_exi5_0_valid_out_0_reg_166_NO_SHIFT_REG),
	.stall_out(rnode_166to166_bb4_c1_exit_c1_exi5_0_stall_out_reg_166_NO_SHIFT_REG),
	.data_in(local_bb4_c1_exit_c1_exi5),
	.data_out(rnode_166to166_bb4_c1_exit_c1_exi5_0_reg_166_NO_SHIFT_REG)
);

defparam rnode_166to166_bb4_c1_exit_c1_exi5_0_reg_166_fifo.DEPTH = 3;
defparam rnode_166to166_bb4_c1_exit_c1_exi5_0_reg_166_fifo.DATA_WIDTH = 192;
defparam rnode_166to166_bb4_c1_exit_c1_exi5_0_reg_166_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_166to166_bb4_c1_exit_c1_exi5_0_reg_166_fifo.IMPL = "zl_reg";

assign rnode_166to166_bb4_c1_exit_c1_exi5_0_reg_166_inputs_ready_NO_SHIFT_REG = local_bb4_c1_exit_c1_exi5_valid_out;
assign local_bb4_c1_exit_c1_exi5_stall_in = rnode_166to166_bb4_c1_exit_c1_exi5_0_stall_out_reg_166_NO_SHIFT_REG;
assign rnode_166to166_bb4_c1_exit_c1_exi5_0_stall_in_0_reg_166_NO_SHIFT_REG = (rnode_166to166_bb4_c1_exit_c1_exi5_0_stall_in_0_NO_SHIFT_REG | rnode_166to166_bb4_c1_exit_c1_exi5_0_stall_in_1_NO_SHIFT_REG | rnode_166to166_bb4_c1_exit_c1_exi5_0_stall_in_2_NO_SHIFT_REG | rnode_166to166_bb4_c1_exit_c1_exi5_0_stall_in_3_NO_SHIFT_REG | rnode_166to166_bb4_c1_exit_c1_exi5_0_stall_in_4_NO_SHIFT_REG);
assign rnode_166to166_bb4_c1_exit_c1_exi5_0_valid_out_0_NO_SHIFT_REG = rnode_166to166_bb4_c1_exit_c1_exi5_0_valid_out_0_reg_166_NO_SHIFT_REG;
assign rnode_166to166_bb4_c1_exit_c1_exi5_0_valid_out_1_NO_SHIFT_REG = rnode_166to166_bb4_c1_exit_c1_exi5_0_valid_out_0_reg_166_NO_SHIFT_REG;
assign rnode_166to166_bb4_c1_exit_c1_exi5_0_valid_out_2_NO_SHIFT_REG = rnode_166to166_bb4_c1_exit_c1_exi5_0_valid_out_0_reg_166_NO_SHIFT_REG;
assign rnode_166to166_bb4_c1_exit_c1_exi5_0_valid_out_3_NO_SHIFT_REG = rnode_166to166_bb4_c1_exit_c1_exi5_0_valid_out_0_reg_166_NO_SHIFT_REG;
assign rnode_166to166_bb4_c1_exit_c1_exi5_0_valid_out_4_NO_SHIFT_REG = rnode_166to166_bb4_c1_exit_c1_exi5_0_valid_out_0_reg_166_NO_SHIFT_REG;
assign rnode_166to166_bb4_c1_exit_c1_exi5_0_NO_SHIFT_REG = rnode_166to166_bb4_c1_exit_c1_exi5_0_reg_166_NO_SHIFT_REG;
assign rnode_166to166_bb4_c1_exit_c1_exi5_1_NO_SHIFT_REG = rnode_166to166_bb4_c1_exit_c1_exi5_0_reg_166_NO_SHIFT_REG;
assign rnode_166to166_bb4_c1_exit_c1_exi5_2_NO_SHIFT_REG = rnode_166to166_bb4_c1_exit_c1_exi5_0_reg_166_NO_SHIFT_REG;
assign rnode_166to166_bb4_c1_exit_c1_exi5_3_NO_SHIFT_REG = rnode_166to166_bb4_c1_exit_c1_exi5_0_reg_166_NO_SHIFT_REG;
assign rnode_166to166_bb4_c1_exit_c1_exi5_4_NO_SHIFT_REG = rnode_166to166_bb4_c1_exit_c1_exi5_0_reg_166_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb4_c1_exe5_stall_local;
wire [31:0] local_bb4_c1_exe5;

assign local_bb4_c1_exe5[31:0] = rnode_166to166_bb4_c1_exit_c1_exi5_0_NO_SHIFT_REG[191:160];

// This section implements an unregistered operation.
// 
wire local_bb4_c1_exe4_stall_local;
wire [31:0] local_bb4_c1_exe4;

assign local_bb4_c1_exe4[31:0] = rnode_166to166_bb4_c1_exit_c1_exi5_1_NO_SHIFT_REG[159:128];

// This section implements an unregistered operation.
// 
wire local_bb4_c1_exe3_stall_local;
wire [31:0] local_bb4_c1_exe3;

assign local_bb4_c1_exe3[31:0] = rnode_166to166_bb4_c1_exit_c1_exi5_2_NO_SHIFT_REG[127:96];

// This section implements an unregistered operation.
// 
wire local_bb4_c1_exe2_stall_local;
wire [31:0] local_bb4_c1_exe2;

assign local_bb4_c1_exe2[31:0] = rnode_166to166_bb4_c1_exit_c1_exi5_3_NO_SHIFT_REG[95:64];

// This section implements an unregistered operation.
// 
wire local_bb4_c1_exe1_stall_local;
wire [31:0] local_bb4_c1_exe1;

assign local_bb4_c1_exe1[31:0] = rnode_166to166_bb4_c1_exit_c1_exi5_4_NO_SHIFT_REG[63:32];

// This section implements an unregistered operation.
// 
wire local_bb4_c2_eni1_stall_local;
wire [191:0] local_bb4_c2_eni1;

assign local_bb4_c2_eni1[31:0] = 32'bx;
assign local_bb4_c2_eni1[63:32] = local_bb4_c1_exe1;
assign local_bb4_c2_eni1[191:64] = 128'bx;

// This section implements an unregistered operation.
// 
wire local_bb4_c2_eni2_stall_local;
wire [191:0] local_bb4_c2_eni2;

assign local_bb4_c2_eni2[63:0] = local_bb4_c2_eni1[63:0];
assign local_bb4_c2_eni2[95:64] = local_bb4_c1_exe2;
assign local_bb4_c2_eni2[191:96] = local_bb4_c2_eni1[191:96];

// This section implements an unregistered operation.
// 
wire local_bb4_c2_eni3_stall_local;
wire [191:0] local_bb4_c2_eni3;

assign local_bb4_c2_eni3[95:0] = local_bb4_c2_eni2[95:0];
assign local_bb4_c2_eni3[127:96] = local_bb4_c1_exe3;
assign local_bb4_c2_eni3[191:128] = local_bb4_c2_eni2[191:128];

// This section implements an unregistered operation.
// 
wire local_bb4_c2_eni4_stall_local;
wire [191:0] local_bb4_c2_eni4;

assign local_bb4_c2_eni4[127:0] = local_bb4_c2_eni3[127:0];
assign local_bb4_c2_eni4[159:128] = local_bb4_c1_exe4;
assign local_bb4_c2_eni4[191:160] = local_bb4_c2_eni3[191:160];

// This section implements an unregistered operation.
// 
wire local_bb4_c2_eni5_valid_out;
wire local_bb4_c2_eni5_stall_in;
wire local_bb4_c2_eni5_inputs_ready;
wire local_bb4_c2_eni5_stall_local;
wire [191:0] local_bb4_c2_eni5;

assign local_bb4_c2_eni5_inputs_ready = (rnode_166to166_bb4_c1_exit_c1_exi5_0_valid_out_0_NO_SHIFT_REG & rnode_166to166_bb4_c1_exit_c1_exi5_0_valid_out_1_NO_SHIFT_REG & rnode_166to166_bb4_c1_exit_c1_exi5_0_valid_out_2_NO_SHIFT_REG & rnode_166to166_bb4_c1_exit_c1_exi5_0_valid_out_3_NO_SHIFT_REG & rnode_166to166_bb4_c1_exit_c1_exi5_0_valid_out_4_NO_SHIFT_REG);
assign local_bb4_c2_eni5[159:0] = local_bb4_c2_eni4[159:0];
assign local_bb4_c2_eni5[191:160] = local_bb4_c1_exe5;
assign local_bb4_c2_eni5_valid_out = local_bb4_c2_eni5_inputs_ready;
assign local_bb4_c2_eni5_stall_local = local_bb4_c2_eni5_stall_in;
assign rnode_166to166_bb4_c1_exit_c1_exi5_0_stall_in_0_NO_SHIFT_REG = (local_bb4_c2_eni5_stall_local | ~(local_bb4_c2_eni5_inputs_ready));
assign rnode_166to166_bb4_c1_exit_c1_exi5_0_stall_in_1_NO_SHIFT_REG = (local_bb4_c2_eni5_stall_local | ~(local_bb4_c2_eni5_inputs_ready));
assign rnode_166to166_bb4_c1_exit_c1_exi5_0_stall_in_2_NO_SHIFT_REG = (local_bb4_c2_eni5_stall_local | ~(local_bb4_c2_eni5_inputs_ready));
assign rnode_166to166_bb4_c1_exit_c1_exi5_0_stall_in_3_NO_SHIFT_REG = (local_bb4_c2_eni5_stall_local | ~(local_bb4_c2_eni5_inputs_ready));
assign rnode_166to166_bb4_c1_exit_c1_exi5_0_stall_in_4_NO_SHIFT_REG = (local_bb4_c2_eni5_stall_local | ~(local_bb4_c2_eni5_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb4_c2_enter_c2_eni5_valid_out_0;
wire local_bb4_c2_enter_c2_eni5_stall_in_0;
wire local_bb4_c2_enter_c2_eni5_valid_out_1;
wire local_bb4_c2_enter_c2_eni5_stall_in_1;
wire local_bb4_c2_enter_c2_eni5_valid_out_2;
wire local_bb4_c2_enter_c2_eni5_stall_in_2;
wire local_bb4_c2_enter_c2_eni5_valid_out_3;
wire local_bb4_c2_enter_c2_eni5_stall_in_3;
wire local_bb4_c2_enter_c2_eni5_valid_out_4;
wire local_bb4_c2_enter_c2_eni5_stall_in_4;
wire local_bb4_c2_enter_c2_eni5_valid_out_5;
wire local_bb4_c2_enter_c2_eni5_stall_in_5;
wire local_bb4_c2_enter_c2_eni5_inputs_ready;
wire local_bb4_c2_enter_c2_eni5_stall_local;
wire local_bb4_c2_enter_c2_eni5_input_accepted;
wire [191:0] local_bb4_c2_enter_c2_eni5;
wire local_bb4_c2_exit_c2_exi3_enable;
wire local_bb4_c2_exit_c2_exi3_entry_stall;
wire local_bb4_c2_enter_c2_eni5_valid_bit;
wire local_bb4_c2_exit_c2_exi3_output_regs_ready;
wire local_bb4_c2_exit_c2_exi3_valid_in;
wire local_bb4_c2_exit_c2_exi3_phases;
wire local_bb4_c2_enter_c2_eni5_inc_pipelined_thread;
wire local_bb4_c2_enter_c2_eni5_dec_pipelined_thread;
wire local_bb4_c2_enter_c2_eni5_fu_stall_out;

assign local_bb4_c2_enter_c2_eni5_inputs_ready = local_bb4_c2_eni5_valid_out;
assign local_bb4_c2_enter_c2_eni5 = local_bb4_c2_eni5;
assign local_bb4_c2_enter_c2_eni5_input_accepted = (local_bb4_c2_enter_c2_eni5_inputs_ready && !(local_bb4_c2_exit_c2_exi3_entry_stall));
assign local_bb4_c2_enter_c2_eni5_valid_bit = local_bb4_c2_enter_c2_eni5_input_accepted;
assign local_bb4_c2_enter_c2_eni5_inc_pipelined_thread = 1'b1;
assign local_bb4_c2_enter_c2_eni5_dec_pipelined_thread = ~(1'b0);
assign local_bb4_c2_enter_c2_eni5_fu_stall_out = (~(local_bb4_c2_enter_c2_eni5_inputs_ready) | local_bb4_c2_exit_c2_exi3_entry_stall);
assign local_bb4_c2_enter_c2_eni5_stall_local = (local_bb4_c2_enter_c2_eni5_stall_in_0 | local_bb4_c2_enter_c2_eni5_stall_in_1 | local_bb4_c2_enter_c2_eni5_stall_in_2 | local_bb4_c2_enter_c2_eni5_stall_in_3 | local_bb4_c2_enter_c2_eni5_stall_in_4 | local_bb4_c2_enter_c2_eni5_stall_in_5);
assign local_bb4_c2_enter_c2_eni5_valid_out_0 = local_bb4_c2_enter_c2_eni5_inputs_ready;
assign local_bb4_c2_enter_c2_eni5_valid_out_1 = local_bb4_c2_enter_c2_eni5_inputs_ready;
assign local_bb4_c2_enter_c2_eni5_valid_out_2 = local_bb4_c2_enter_c2_eni5_inputs_ready;
assign local_bb4_c2_enter_c2_eni5_valid_out_3 = local_bb4_c2_enter_c2_eni5_inputs_ready;
assign local_bb4_c2_enter_c2_eni5_valid_out_4 = local_bb4_c2_enter_c2_eni5_inputs_ready;
assign local_bb4_c2_enter_c2_eni5_valid_out_5 = local_bb4_c2_enter_c2_eni5_inputs_ready;
assign local_bb4_c2_eni5_stall_in = (|local_bb4_c2_enter_c2_eni5_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb4_c2_ene1_stall_local;
wire [31:0] local_bb4_c2_ene1;

assign local_bb4_c2_ene1[31:0] = local_bb4_c2_enter_c2_eni5[63:32];

// This section implements an unregistered operation.
// 
wire local_bb4_c2_ene2_stall_local;
wire [31:0] local_bb4_c2_ene2;

assign local_bb4_c2_ene2[31:0] = local_bb4_c2_enter_c2_eni5[95:64];

// This section implements an unregistered operation.
// 
wire local_bb4_c2_ene3_stall_local;
wire [31:0] local_bb4_c2_ene3;

assign local_bb4_c2_ene3[31:0] = local_bb4_c2_enter_c2_eni5[127:96];

// This section implements an unregistered operation.
// 
wire local_bb4_c2_ene4_stall_local;
wire [31:0] local_bb4_c2_ene4;

assign local_bb4_c2_ene4[31:0] = local_bb4_c2_enter_c2_eni5[159:128];

// This section implements an unregistered operation.
// 
wire local_bb4_c2_ene5_valid_out;
wire local_bb4_c2_ene5_stall_in;
wire local_bb4_c2_ene5_inputs_ready;
wire local_bb4_c2_ene5_stall_local;
wire [31:0] local_bb4_c2_ene5;

assign local_bb4_c2_ene5_inputs_ready = local_bb4_c2_enter_c2_eni5_valid_out_4;
assign local_bb4_c2_ene5[31:0] = local_bb4_c2_enter_c2_eni5[191:160];
assign local_bb4_c2_ene5_valid_out = 1'b1;
assign local_bb4_c2_enter_c2_eni5_stall_in_4 = 1'b0;

// This section implements an unregistered operation.
// 
wire SFC_3_VALID_166_166_0_valid_out;
wire SFC_3_VALID_166_166_0_stall_in;
wire SFC_3_VALID_166_166_0_inputs_ready;
wire SFC_3_VALID_166_166_0_stall_local;
wire SFC_3_VALID_166_166_0;

assign SFC_3_VALID_166_166_0_inputs_ready = local_bb4_c2_enter_c2_eni5_valid_out_5;
assign SFC_3_VALID_166_166_0 = local_bb4_c2_enter_c2_eni5_valid_bit;
assign SFC_3_VALID_166_166_0_valid_out = 1'b1;
assign local_bb4_c2_enter_c2_eni5_stall_in_5 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb4_sub34_stall_local;
wire [31:0] local_bb4_sub34;

assign local_bb4_sub34 = (local_bb4_c2_ene1 + local_bb4_c2_ene2);

// This section implements an unregistered operation.
// 
wire local_bb4_sub38_stall_local;
wire [31:0] local_bb4_sub38;

assign local_bb4_sub38 = (local_bb4_c2_ene4 - local_bb4_c2_ene3);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_166to167_bb4_c2_ene5_0_valid_out_NO_SHIFT_REG;
 logic rnode_166to167_bb4_c2_ene5_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_bb4_c2_ene5_0_NO_SHIFT_REG;
 logic rnode_166to167_bb4_c2_ene5_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_bb4_c2_ene5_0_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb4_c2_ene5_0_valid_out_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb4_c2_ene5_0_stall_in_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb4_c2_ene5_0_stall_out_reg_167_NO_SHIFT_REG;

acl_data_fifo rnode_166to167_bb4_c2_ene5_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_166to167_bb4_c2_ene5_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_166to167_bb4_c2_ene5_0_stall_in_reg_167_NO_SHIFT_REG),
	.valid_out(rnode_166to167_bb4_c2_ene5_0_valid_out_reg_167_NO_SHIFT_REG),
	.stall_out(rnode_166to167_bb4_c2_ene5_0_stall_out_reg_167_NO_SHIFT_REG),
	.data_in(local_bb4_c2_ene5),
	.data_out(rnode_166to167_bb4_c2_ene5_0_reg_167_NO_SHIFT_REG)
);

defparam rnode_166to167_bb4_c2_ene5_0_reg_167_fifo.DEPTH = 1;
defparam rnode_166to167_bb4_c2_ene5_0_reg_167_fifo.DATA_WIDTH = 32;
defparam rnode_166to167_bb4_c2_ene5_0_reg_167_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_166to167_bb4_c2_ene5_0_reg_167_fifo.IMPL = "shift_reg";

assign rnode_166to167_bb4_c2_ene5_0_reg_167_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_c2_ene5_stall_in = 1'b0;
assign rnode_166to167_bb4_c2_ene5_0_NO_SHIFT_REG = rnode_166to167_bb4_c2_ene5_0_reg_167_NO_SHIFT_REG;
assign rnode_166to167_bb4_c2_ene5_0_stall_in_reg_167_NO_SHIFT_REG = ~(local_bb4_c2_exit_c2_exi3_enable);
assign rnode_166to167_bb4_c2_ene5_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_3_VALID_166_167_0_inputs_ready;
 reg SFC_3_VALID_166_167_0_valid_out_NO_SHIFT_REG;
wire SFC_3_VALID_166_167_0_stall_in;
wire SFC_3_VALID_166_167_0_output_regs_ready;
 reg SFC_3_VALID_166_167_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_3_VALID_166_167_0_causedstall;

assign SFC_3_VALID_166_167_0_inputs_ready = 1'b1;
assign SFC_3_VALID_166_167_0_output_regs_ready = local_bb4_c2_exit_c2_exi3_enable;
assign SFC_3_VALID_166_166_0_stall_in = 1'b0;
assign SFC_3_VALID_166_167_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb4_c2_exit_c2_exi3_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_3_VALID_166_167_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_3_VALID_166_167_0_output_regs_ready)
		begin
			SFC_3_VALID_166_167_0_NO_SHIFT_REG <= SFC_3_VALID_166_166_0;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb4_sub38_valid_out;
wire local_bb4_sub38_stall_in;
wire local_bb4_mul3213_valid_out;
wire local_bb4_mul3213_stall_in;
wire local_bb4_mul3213_inputs_ready;
wire local_bb4_mul3213_stall_local;
wire [31:0] local_bb4_mul3213;

assign local_bb4_mul3213_inputs_ready = (local_bb4_c2_enter_c2_eni5_valid_out_0 & local_bb4_c2_enter_c2_eni5_valid_out_1 & local_bb4_c2_enter_c2_eni5_valid_out_2 & local_bb4_c2_enter_c2_eni5_valid_out_3);
assign local_bb4_mul3213 = (local_bb4_sub34 - local_bb4_c2_ene3);
assign local_bb4_sub38_valid_out = 1'b1;
assign local_bb4_mul3213_valid_out = 1'b1;
assign local_bb4_c2_enter_c2_eni5_stall_in_0 = 1'b0;
assign local_bb4_c2_enter_c2_eni5_stall_in_1 = 1'b0;
assign local_bb4_c2_enter_c2_eni5_stall_in_2 = 1'b0;
assign local_bb4_c2_enter_c2_eni5_stall_in_3 = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_166to167_bb4_sub38_0_valid_out_NO_SHIFT_REG;
 logic rnode_166to167_bb4_sub38_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_bb4_sub38_0_NO_SHIFT_REG;
 logic rnode_166to167_bb4_sub38_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_bb4_sub38_0_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb4_sub38_0_valid_out_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb4_sub38_0_stall_in_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb4_sub38_0_stall_out_reg_167_NO_SHIFT_REG;

acl_data_fifo rnode_166to167_bb4_sub38_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_166to167_bb4_sub38_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_166to167_bb4_sub38_0_stall_in_reg_167_NO_SHIFT_REG),
	.valid_out(rnode_166to167_bb4_sub38_0_valid_out_reg_167_NO_SHIFT_REG),
	.stall_out(rnode_166to167_bb4_sub38_0_stall_out_reg_167_NO_SHIFT_REG),
	.data_in(local_bb4_sub38),
	.data_out(rnode_166to167_bb4_sub38_0_reg_167_NO_SHIFT_REG)
);

defparam rnode_166to167_bb4_sub38_0_reg_167_fifo.DEPTH = 1;
defparam rnode_166to167_bb4_sub38_0_reg_167_fifo.DATA_WIDTH = 32;
defparam rnode_166to167_bb4_sub38_0_reg_167_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_166to167_bb4_sub38_0_reg_167_fifo.IMPL = "shift_reg";

assign rnode_166to167_bb4_sub38_0_reg_167_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_sub38_stall_in = 1'b0;
assign rnode_166to167_bb4_sub38_0_NO_SHIFT_REG = rnode_166to167_bb4_sub38_0_reg_167_NO_SHIFT_REG;
assign rnode_166to167_bb4_sub38_0_stall_in_reg_167_NO_SHIFT_REG = ~(local_bb4_c2_exit_c2_exi3_enable);
assign rnode_166to167_bb4_sub38_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_166to167_bb4_mul3213_0_valid_out_NO_SHIFT_REG;
 logic rnode_166to167_bb4_mul3213_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_bb4_mul3213_0_NO_SHIFT_REG;
 logic rnode_166to167_bb4_mul3213_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_bb4_mul3213_0_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb4_mul3213_0_valid_out_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb4_mul3213_0_stall_in_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb4_mul3213_0_stall_out_reg_167_NO_SHIFT_REG;

acl_data_fifo rnode_166to167_bb4_mul3213_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_166to167_bb4_mul3213_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_166to167_bb4_mul3213_0_stall_in_reg_167_NO_SHIFT_REG),
	.valid_out(rnode_166to167_bb4_mul3213_0_valid_out_reg_167_NO_SHIFT_REG),
	.stall_out(rnode_166to167_bb4_mul3213_0_stall_out_reg_167_NO_SHIFT_REG),
	.data_in(local_bb4_mul3213),
	.data_out(rnode_166to167_bb4_mul3213_0_reg_167_NO_SHIFT_REG)
);

defparam rnode_166to167_bb4_mul3213_0_reg_167_fifo.DEPTH = 1;
defparam rnode_166to167_bb4_mul3213_0_reg_167_fifo.DATA_WIDTH = 32;
defparam rnode_166to167_bb4_mul3213_0_reg_167_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_166to167_bb4_mul3213_0_reg_167_fifo.IMPL = "shift_reg";

assign rnode_166to167_bb4_mul3213_0_reg_167_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_mul3213_stall_in = 1'b0;
assign rnode_166to167_bb4_mul3213_0_NO_SHIFT_REG = rnode_166to167_bb4_mul3213_0_reg_167_NO_SHIFT_REG;
assign rnode_166to167_bb4_mul3213_0_stall_in_reg_167_NO_SHIFT_REG = ~(local_bb4_c2_exit_c2_exi3_enable);
assign rnode_166to167_bb4_mul3213_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb4_c2_exi1_stall_local;
wire [127:0] local_bb4_c2_exi1;

assign local_bb4_c2_exi1[31:0] = 32'bx;
assign local_bb4_c2_exi1[63:32] = rnode_166to167_bb4_mul3213_0_NO_SHIFT_REG;
assign local_bb4_c2_exi1[127:64] = 64'bx;

// This section implements an unregistered operation.
// 
wire local_bb4_c2_exi2_stall_local;
wire [127:0] local_bb4_c2_exi2;

assign local_bb4_c2_exi2[63:0] = local_bb4_c2_exi1[63:0];
assign local_bb4_c2_exi2[95:64] = rnode_166to167_bb4_c2_ene5_0_NO_SHIFT_REG;
assign local_bb4_c2_exi2[127:96] = local_bb4_c2_exi1[127:96];

// This section implements an unregistered operation.
// 
wire local_bb4_c2_exi3_valid_out;
wire local_bb4_c2_exi3_stall_in;
wire local_bb4_c2_exi3_inputs_ready;
wire local_bb4_c2_exi3_stall_local;
wire [127:0] local_bb4_c2_exi3;

assign local_bb4_c2_exi3_inputs_ready = (rnode_166to167_bb4_c2_ene5_0_valid_out_NO_SHIFT_REG & rnode_166to167_bb4_sub38_0_valid_out_NO_SHIFT_REG & rnode_166to167_bb4_mul3213_0_valid_out_NO_SHIFT_REG);
assign local_bb4_c2_exi3[95:0] = local_bb4_c2_exi2[95:0];
assign local_bb4_c2_exi3[127:96] = rnode_166to167_bb4_sub38_0_NO_SHIFT_REG;
assign local_bb4_c2_exi3_valid_out = 1'b1;
assign rnode_166to167_bb4_c2_ene5_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_166to167_bb4_sub38_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_166to167_bb4_mul3213_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb4_c2_exit_c2_exi3_valid_out_0;
wire local_bb4_c2_exit_c2_exi3_stall_in_0;
wire local_bb4_c2_exit_c2_exi3_valid_out_1;
wire local_bb4_c2_exit_c2_exi3_stall_in_1;
wire local_bb4_c2_exit_c2_exi3_valid_out_2;
wire local_bb4_c2_exit_c2_exi3_stall_in_2;
wire local_bb4_c2_exit_c2_exi3_inputs_ready;
wire local_bb4_c2_exit_c2_exi3_stall_local;
wire [127:0] local_bb4_c2_exit_c2_exi3;
wire local_bb4_c2_exit_c2_exi3_valid;
wire local_bb4_c2_exit_c2_exi3_fu_stall_out;

acl_enable_sink local_bb4_c2_exit_c2_exi3_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb4_c2_exi3),
	.data_out(local_bb4_c2_exit_c2_exi3),
	.input_accepted(local_bb4_c2_enter_c2_eni5_input_accepted),
	.valid_out(local_bb4_c2_exit_c2_exi3_valid),
	.stall_in(local_bb4_c2_exit_c2_exi3_stall_local),
	.enable(local_bb4_c2_exit_c2_exi3_enable),
	.valid_in(local_bb4_c2_exit_c2_exi3_valid_in),
	.stall_entry(local_bb4_c2_exit_c2_exi3_entry_stall),
	.inc_pipelined_thread(local_bb4_c2_enter_c2_eni5_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb4_c2_enter_c2_eni5_dec_pipelined_thread)
);

defparam local_bb4_c2_exit_c2_exi3_instance.DATA_WIDTH = 128;
defparam local_bb4_c2_exit_c2_exi3_instance.PIPELINE_DEPTH = 1;
defparam local_bb4_c2_exit_c2_exi3_instance.SCHEDULEII = 1;
defparam local_bb4_c2_exit_c2_exi3_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb4_c2_exit_c2_exi3_inputs_ready = (local_bb4_c2_exi3_valid_out & SFC_3_VALID_166_167_0_valid_out_NO_SHIFT_REG);
assign local_bb4_c2_exit_c2_exi3_valid_in = SFC_3_VALID_166_167_0_NO_SHIFT_REG;
assign local_bb4_c2_exit_c2_exi3_fu_stall_out = ~(local_bb4_c2_exit_c2_exi3_enable);
assign local_bb4_c2_exit_c2_exi3_stall_local = (local_bb4_c2_exit_c2_exi3_stall_in_0 | local_bb4_c2_exit_c2_exi3_stall_in_1 | local_bb4_c2_exit_c2_exi3_stall_in_2);
assign local_bb4_c2_exit_c2_exi3_valid_out_0 = local_bb4_c2_exit_c2_exi3_valid;
assign local_bb4_c2_exit_c2_exi3_valid_out_1 = local_bb4_c2_exit_c2_exi3_valid;
assign local_bb4_c2_exit_c2_exi3_valid_out_2 = local_bb4_c2_exit_c2_exi3_valid;
assign local_bb4_c2_exi3_stall_in = 1'b0;
assign SFC_3_VALID_166_167_0_stall_in = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb4_c2_exe1_stall_local;
wire [31:0] local_bb4_c2_exe1;

assign local_bb4_c2_exe1[31:0] = local_bb4_c2_exit_c2_exi3[63:32];

// This section implements an unregistered operation.
// 
wire local_bb4_c2_exe2_stall_local;
wire [31:0] local_bb4_c2_exe2;

assign local_bb4_c2_exe2[31:0] = local_bb4_c2_exit_c2_exi3[95:64];

// This section implements an unregistered operation.
// 
wire local_bb4_c2_exe3_stall_local;
wire [31:0] local_bb4_c2_exe3;

assign local_bb4_c2_exe3[31:0] = local_bb4_c2_exit_c2_exi3[127:96];

// This section implements an unregistered operation.
// 
wire local_bb4_c3_eni1_stall_local;
wire [127:0] local_bb4_c3_eni1;

assign local_bb4_c3_eni1[31:0] = 32'bx;
assign local_bb4_c3_eni1[63:32] = local_bb4_c2_exe1;
assign local_bb4_c3_eni1[127:64] = 64'bx;

// This section implements an unregistered operation.
// 
wire local_bb4_c3_eni2_stall_local;
wire [127:0] local_bb4_c3_eni2;

assign local_bb4_c3_eni2[63:0] = local_bb4_c3_eni1[63:0];
assign local_bb4_c3_eni2[95:64] = local_bb4_c2_exe2;
assign local_bb4_c3_eni2[127:96] = local_bb4_c3_eni1[127:96];

// This section implements an unregistered operation.
// 
wire local_bb4_c3_eni3_valid_out;
wire local_bb4_c3_eni3_stall_in;
wire local_bb4_c3_eni3_inputs_ready;
wire local_bb4_c3_eni3_stall_local;
wire [127:0] local_bb4_c3_eni3;

assign local_bb4_c3_eni3_inputs_ready = (local_bb4_c2_exit_c2_exi3_valid_out_0 & local_bb4_c2_exit_c2_exi3_valid_out_1 & local_bb4_c2_exit_c2_exi3_valid_out_2);
assign local_bb4_c3_eni3[95:0] = local_bb4_c3_eni2[95:0];
assign local_bb4_c3_eni3[127:96] = local_bb4_c2_exe3;
assign local_bb4_c3_eni3_valid_out = local_bb4_c3_eni3_inputs_ready;
assign local_bb4_c3_eni3_stall_local = local_bb4_c3_eni3_stall_in;
assign local_bb4_c2_exit_c2_exi3_stall_in_0 = (local_bb4_c3_eni3_stall_local | ~(local_bb4_c3_eni3_inputs_ready));
assign local_bb4_c2_exit_c2_exi3_stall_in_1 = (local_bb4_c3_eni3_stall_local | ~(local_bb4_c3_eni3_inputs_ready));
assign local_bb4_c2_exit_c2_exi3_stall_in_2 = (local_bb4_c3_eni3_stall_local | ~(local_bb4_c3_eni3_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb4_c3_enter_c3_eni3_valid_out_0;
wire local_bb4_c3_enter_c3_eni3_stall_in_0;
wire local_bb4_c3_enter_c3_eni3_valid_out_1;
wire local_bb4_c3_enter_c3_eni3_stall_in_1;
wire local_bb4_c3_enter_c3_eni3_valid_out_2;
wire local_bb4_c3_enter_c3_eni3_stall_in_2;
wire local_bb4_c3_enter_c3_eni3_valid_out_3;
wire local_bb4_c3_enter_c3_eni3_stall_in_3;
wire local_bb4_c3_enter_c3_eni3_inputs_ready;
wire local_bb4_c3_enter_c3_eni3_stall_local;
wire local_bb4_c3_enter_c3_eni3_input_accepted;
wire [127:0] local_bb4_c3_enter_c3_eni3;
wire local_bb4_c3_exit_c3_exi2_enable;
wire local_bb4_c3_exit_c3_exi2_entry_stall;
wire local_bb4_c3_enter_c3_eni3_valid_bit;
wire local_bb4_c3_exit_c3_exi2_output_regs_ready;
wire local_bb4_c3_exit_c3_exi2_valid_in;
wire local_bb4_c3_exit_c3_exi2_phases;
wire local_bb4_c3_enter_c3_eni3_inc_pipelined_thread;
wire local_bb4_c3_enter_c3_eni3_dec_pipelined_thread;
wire local_bb4_c3_enter_c3_eni3_fu_stall_out;

assign local_bb4_c3_enter_c3_eni3_inputs_ready = local_bb4_c3_eni3_valid_out;
assign local_bb4_c3_enter_c3_eni3 = local_bb4_c3_eni3;
assign local_bb4_c3_enter_c3_eni3_input_accepted = (local_bb4_c3_enter_c3_eni3_inputs_ready && !(local_bb4_c3_exit_c3_exi2_entry_stall));
assign local_bb4_c3_enter_c3_eni3_valid_bit = local_bb4_c3_enter_c3_eni3_input_accepted;
assign local_bb4_c3_enter_c3_eni3_inc_pipelined_thread = 1'b1;
assign local_bb4_c3_enter_c3_eni3_dec_pipelined_thread = ~(1'b0);
assign local_bb4_c3_enter_c3_eni3_fu_stall_out = (~(local_bb4_c3_enter_c3_eni3_inputs_ready) | local_bb4_c3_exit_c3_exi2_entry_stall);
assign local_bb4_c3_enter_c3_eni3_stall_local = (local_bb4_c3_enter_c3_eni3_stall_in_0 | local_bb4_c3_enter_c3_eni3_stall_in_1 | local_bb4_c3_enter_c3_eni3_stall_in_2 | local_bb4_c3_enter_c3_eni3_stall_in_3);
assign local_bb4_c3_enter_c3_eni3_valid_out_0 = local_bb4_c3_enter_c3_eni3_inputs_ready;
assign local_bb4_c3_enter_c3_eni3_valid_out_1 = local_bb4_c3_enter_c3_eni3_inputs_ready;
assign local_bb4_c3_enter_c3_eni3_valid_out_2 = local_bb4_c3_enter_c3_eni3_inputs_ready;
assign local_bb4_c3_enter_c3_eni3_valid_out_3 = local_bb4_c3_enter_c3_eni3_inputs_ready;
assign local_bb4_c3_eni3_stall_in = (|local_bb4_c3_enter_c3_eni3_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb4_c3_ene1_valid_out;
wire local_bb4_c3_ene1_stall_in;
wire local_bb4_c3_ene1_inputs_ready;
wire local_bb4_c3_ene1_stall_local;
wire [31:0] local_bb4_c3_ene1;

assign local_bb4_c3_ene1_inputs_ready = local_bb4_c3_enter_c3_eni3_valid_out_0;
assign local_bb4_c3_ene1[31:0] = local_bb4_c3_enter_c3_eni3[63:32];
assign local_bb4_c3_ene1_valid_out = 1'b1;
assign local_bb4_c3_enter_c3_eni3_stall_in_0 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb4_c3_ene2_valid_out;
wire local_bb4_c3_ene2_stall_in;
wire local_bb4_c3_ene2_inputs_ready;
wire local_bb4_c3_ene2_stall_local;
wire [31:0] local_bb4_c3_ene2;

assign local_bb4_c3_ene2_inputs_ready = local_bb4_c3_enter_c3_eni3_valid_out_1;
assign local_bb4_c3_ene2[31:0] = local_bb4_c3_enter_c3_eni3[95:64];
assign local_bb4_c3_ene2_valid_out = 1'b1;
assign local_bb4_c3_enter_c3_eni3_stall_in_1 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb4_c3_ene3_valid_out;
wire local_bb4_c3_ene3_stall_in;
wire local_bb4_c3_ene3_inputs_ready;
wire local_bb4_c3_ene3_stall_local;
wire [31:0] local_bb4_c3_ene3;

assign local_bb4_c3_ene3_inputs_ready = local_bb4_c3_enter_c3_eni3_valid_out_2;
assign local_bb4_c3_ene3[31:0] = local_bb4_c3_enter_c3_eni3[127:96];
assign local_bb4_c3_ene3_valid_out = 1'b1;
assign local_bb4_c3_enter_c3_eni3_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire SFC_4_VALID_167_167_0_valid_out;
wire SFC_4_VALID_167_167_0_stall_in;
wire SFC_4_VALID_167_167_0_inputs_ready;
wire SFC_4_VALID_167_167_0_stall_local;
wire SFC_4_VALID_167_167_0;

assign SFC_4_VALID_167_167_0_inputs_ready = local_bb4_c3_enter_c3_eni3_valid_out_3;
assign SFC_4_VALID_167_167_0 = local_bb4_c3_enter_c3_eni3_valid_bit;
assign SFC_4_VALID_167_167_0_valid_out = 1'b1;
assign local_bb4_c3_enter_c3_eni3_stall_in_3 = 1'b0;

// This section implements a registered operation.
// 
wire local_bb4_add_inputs_ready;
 reg local_bb4_add_valid_out_NO_SHIFT_REG;
wire local_bb4_add_stall_in;
wire local_bb4_add_output_regs_ready;
wire [31:0] local_bb4_add;
 reg local_bb4_add_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb4_add_valid_pipe_1_NO_SHIFT_REG;
wire local_bb4_add_causedstall;

acl_int_mult int_module_local_bb4_add (
	.clock(clock),
	.dataa(local_bb4_c3_ene1),
	.datab(local_bb4_c3_ene2),
	.enable(local_bb4_add_output_regs_ready),
	.result(local_bb4_add)
);

defparam int_module_local_bb4_add.INPUT1_WIDTH = 32;
defparam int_module_local_bb4_add.INPUT2_WIDTH = 32;
defparam int_module_local_bb4_add.OUTPUT_WIDTH = 32;
defparam int_module_local_bb4_add.LATENCY = 3;
defparam int_module_local_bb4_add.SIGNED = 0;

assign local_bb4_add_inputs_ready = 1'b1;
assign local_bb4_add_output_regs_ready = local_bb4_c3_exit_c3_exi2_enable;
assign local_bb4_c3_ene1_stall_in = 1'b0;
assign local_bb4_c3_ene2_stall_in = 1'b0;
assign local_bb4_add_causedstall = (1'b1 && (1'b0 && !(~(local_bb4_c3_exit_c3_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_add_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb4_add_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4_add_output_regs_ready)
		begin
			local_bb4_add_valid_pipe_0_NO_SHIFT_REG <= 1'b1;
			local_bb4_add_valid_pipe_1_NO_SHIFT_REG <= local_bb4_add_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_add_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4_add_output_regs_ready)
		begin
			local_bb4_add_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb4_add_stall_in))
			begin
				local_bb4_add_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_167to168_bb4_c3_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_167to168_bb4_c3_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_167to168_bb4_c3_ene3_0_NO_SHIFT_REG;
 logic rnode_167to168_bb4_c3_ene3_0_reg_168_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_167to168_bb4_c3_ene3_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb4_c3_ene3_0_valid_out_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb4_c3_ene3_0_stall_in_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb4_c3_ene3_0_stall_out_reg_168_NO_SHIFT_REG;

acl_data_fifo rnode_167to168_bb4_c3_ene3_0_reg_168_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_167to168_bb4_c3_ene3_0_reg_168_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_167to168_bb4_c3_ene3_0_stall_in_reg_168_NO_SHIFT_REG),
	.valid_out(rnode_167to168_bb4_c3_ene3_0_valid_out_reg_168_NO_SHIFT_REG),
	.stall_out(rnode_167to168_bb4_c3_ene3_0_stall_out_reg_168_NO_SHIFT_REG),
	.data_in(local_bb4_c3_ene3),
	.data_out(rnode_167to168_bb4_c3_ene3_0_reg_168_NO_SHIFT_REG)
);

defparam rnode_167to168_bb4_c3_ene3_0_reg_168_fifo.DEPTH = 1;
defparam rnode_167to168_bb4_c3_ene3_0_reg_168_fifo.DATA_WIDTH = 32;
defparam rnode_167to168_bb4_c3_ene3_0_reg_168_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_167to168_bb4_c3_ene3_0_reg_168_fifo.IMPL = "shift_reg";

assign rnode_167to168_bb4_c3_ene3_0_reg_168_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_c3_ene3_stall_in = 1'b0;
assign rnode_167to168_bb4_c3_ene3_0_NO_SHIFT_REG = rnode_167to168_bb4_c3_ene3_0_reg_168_NO_SHIFT_REG;
assign rnode_167to168_bb4_c3_ene3_0_stall_in_reg_168_NO_SHIFT_REG = ~(local_bb4_c3_exit_c3_exi2_enable);
assign rnode_167to168_bb4_c3_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_4_VALID_167_168_0_inputs_ready;
 reg SFC_4_VALID_167_168_0_valid_out_NO_SHIFT_REG;
wire SFC_4_VALID_167_168_0_stall_in;
wire SFC_4_VALID_167_168_0_output_regs_ready;
 reg SFC_4_VALID_167_168_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_4_VALID_167_168_0_causedstall;

assign SFC_4_VALID_167_168_0_inputs_ready = 1'b1;
assign SFC_4_VALID_167_168_0_output_regs_ready = local_bb4_c3_exit_c3_exi2_enable;
assign SFC_4_VALID_167_167_0_stall_in = 1'b0;
assign SFC_4_VALID_167_168_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb4_c3_exit_c3_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_4_VALID_167_168_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_4_VALID_167_168_0_output_regs_ready)
		begin
			SFC_4_VALID_167_168_0_NO_SHIFT_REG <= SFC_4_VALID_167_167_0;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_168to169_bb4_c3_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_168to169_bb4_c3_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_168to169_bb4_c3_ene3_0_NO_SHIFT_REG;
 logic rnode_168to169_bb4_c3_ene3_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_168to169_bb4_c3_ene3_0_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb4_c3_ene3_0_valid_out_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb4_c3_ene3_0_stall_in_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb4_c3_ene3_0_stall_out_reg_169_NO_SHIFT_REG;

acl_data_fifo rnode_168to169_bb4_c3_ene3_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_168to169_bb4_c3_ene3_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_168to169_bb4_c3_ene3_0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rnode_168to169_bb4_c3_ene3_0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rnode_168to169_bb4_c3_ene3_0_stall_out_reg_169_NO_SHIFT_REG),
	.data_in(rnode_167to168_bb4_c3_ene3_0_NO_SHIFT_REG),
	.data_out(rnode_168to169_bb4_c3_ene3_0_reg_169_NO_SHIFT_REG)
);

defparam rnode_168to169_bb4_c3_ene3_0_reg_169_fifo.DEPTH = 1;
defparam rnode_168to169_bb4_c3_ene3_0_reg_169_fifo.DATA_WIDTH = 32;
defparam rnode_168to169_bb4_c3_ene3_0_reg_169_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_168to169_bb4_c3_ene3_0_reg_169_fifo.IMPL = "shift_reg";

assign rnode_168to169_bb4_c3_ene3_0_reg_169_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_167to168_bb4_c3_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_168to169_bb4_c3_ene3_0_NO_SHIFT_REG = rnode_168to169_bb4_c3_ene3_0_reg_169_NO_SHIFT_REG;
assign rnode_168to169_bb4_c3_ene3_0_stall_in_reg_169_NO_SHIFT_REG = ~(local_bb4_c3_exit_c3_exi2_enable);
assign rnode_168to169_bb4_c3_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_4_VALID_168_169_0_inputs_ready;
 reg SFC_4_VALID_168_169_0_valid_out_NO_SHIFT_REG;
wire SFC_4_VALID_168_169_0_stall_in;
wire SFC_4_VALID_168_169_0_output_regs_ready;
 reg SFC_4_VALID_168_169_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_4_VALID_168_169_0_causedstall;

assign SFC_4_VALID_168_169_0_inputs_ready = 1'b1;
assign SFC_4_VALID_168_169_0_output_regs_ready = local_bb4_c3_exit_c3_exi2_enable;
assign SFC_4_VALID_167_168_0_stall_in = 1'b0;
assign SFC_4_VALID_168_169_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb4_c3_exit_c3_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_4_VALID_168_169_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_4_VALID_168_169_0_output_regs_ready)
		begin
			SFC_4_VALID_168_169_0_NO_SHIFT_REG <= SFC_4_VALID_167_168_0_NO_SHIFT_REG;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_169to170_bb4_c3_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_169to170_bb4_c3_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_169to170_bb4_c3_ene3_0_NO_SHIFT_REG;
 logic rnode_169to170_bb4_c3_ene3_0_reg_170_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_169to170_bb4_c3_ene3_0_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_bb4_c3_ene3_0_valid_out_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_bb4_c3_ene3_0_stall_in_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_bb4_c3_ene3_0_stall_out_reg_170_NO_SHIFT_REG;

acl_data_fifo rnode_169to170_bb4_c3_ene3_0_reg_170_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_169to170_bb4_c3_ene3_0_reg_170_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_169to170_bb4_c3_ene3_0_stall_in_reg_170_NO_SHIFT_REG),
	.valid_out(rnode_169to170_bb4_c3_ene3_0_valid_out_reg_170_NO_SHIFT_REG),
	.stall_out(rnode_169to170_bb4_c3_ene3_0_stall_out_reg_170_NO_SHIFT_REG),
	.data_in(rnode_168to169_bb4_c3_ene3_0_NO_SHIFT_REG),
	.data_out(rnode_169to170_bb4_c3_ene3_0_reg_170_NO_SHIFT_REG)
);

defparam rnode_169to170_bb4_c3_ene3_0_reg_170_fifo.DEPTH = 1;
defparam rnode_169to170_bb4_c3_ene3_0_reg_170_fifo.DATA_WIDTH = 32;
defparam rnode_169to170_bb4_c3_ene3_0_reg_170_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_169to170_bb4_c3_ene3_0_reg_170_fifo.IMPL = "shift_reg";

assign rnode_169to170_bb4_c3_ene3_0_reg_170_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_168to169_bb4_c3_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_169to170_bb4_c3_ene3_0_NO_SHIFT_REG = rnode_169to170_bb4_c3_ene3_0_reg_170_NO_SHIFT_REG;
assign rnode_169to170_bb4_c3_ene3_0_stall_in_reg_170_NO_SHIFT_REG = ~(local_bb4_c3_exit_c3_exi2_enable);
assign rnode_169to170_bb4_c3_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_4_VALID_169_170_0_inputs_ready;
 reg SFC_4_VALID_169_170_0_valid_out_NO_SHIFT_REG;
wire SFC_4_VALID_169_170_0_stall_in;
wire SFC_4_VALID_169_170_0_output_regs_ready;
 reg SFC_4_VALID_169_170_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_4_VALID_169_170_0_causedstall;

assign SFC_4_VALID_169_170_0_inputs_ready = 1'b1;
assign SFC_4_VALID_169_170_0_output_regs_ready = local_bb4_c3_exit_c3_exi2_enable;
assign SFC_4_VALID_168_169_0_stall_in = 1'b0;
assign SFC_4_VALID_169_170_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb4_c3_exit_c3_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_4_VALID_169_170_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_4_VALID_169_170_0_output_regs_ready)
		begin
			SFC_4_VALID_169_170_0_NO_SHIFT_REG <= SFC_4_VALID_168_169_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb4_c3_exi1_stall_local;
wire [95:0] local_bb4_c3_exi1;

assign local_bb4_c3_exi1[31:0] = 32'bx;
assign local_bb4_c3_exi1[63:32] = rnode_169to170_bb4_c3_ene3_0_NO_SHIFT_REG;
assign local_bb4_c3_exi1[95:64] = 32'bx;

// This section implements an unregistered operation.
// 
wire local_bb4_c3_exi2_valid_out;
wire local_bb4_c3_exi2_stall_in;
wire local_bb4_c3_exi2_inputs_ready;
wire local_bb4_c3_exi2_stall_local;
wire [95:0] local_bb4_c3_exi2;

assign local_bb4_c3_exi2_inputs_ready = (local_bb4_add_valid_out_NO_SHIFT_REG & rnode_169to170_bb4_c3_ene3_0_valid_out_NO_SHIFT_REG);
assign local_bb4_c3_exi2[63:0] = local_bb4_c3_exi1[63:0];
assign local_bb4_c3_exi2[95:64] = local_bb4_add;
assign local_bb4_c3_exi2_valid_out = 1'b1;
assign local_bb4_add_stall_in = 1'b0;
assign rnode_169to170_bb4_c3_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb4_c3_exit_c3_exi2_valid_out;
wire local_bb4_c3_exit_c3_exi2_stall_in;
wire local_bb4_c3_exit_c3_exi2_inputs_ready;
wire local_bb4_c3_exit_c3_exi2_stall_local;
wire [95:0] local_bb4_c3_exit_c3_exi2;
wire local_bb4_c3_exit_c3_exi2_valid;
wire local_bb4_c3_exit_c3_exi2_fu_stall_out;

acl_enable_sink local_bb4_c3_exit_c3_exi2_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb4_c3_exi2),
	.data_out(local_bb4_c3_exit_c3_exi2),
	.input_accepted(local_bb4_c3_enter_c3_eni3_input_accepted),
	.valid_out(local_bb4_c3_exit_c3_exi2_valid),
	.stall_in(local_bb4_c3_exit_c3_exi2_stall_local),
	.enable(local_bb4_c3_exit_c3_exi2_enable),
	.valid_in(local_bb4_c3_exit_c3_exi2_valid_in),
	.stall_entry(local_bb4_c3_exit_c3_exi2_entry_stall),
	.inc_pipelined_thread(local_bb4_c3_enter_c3_eni3_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb4_c3_enter_c3_eni3_dec_pipelined_thread)
);

defparam local_bb4_c3_exit_c3_exi2_instance.DATA_WIDTH = 96;
defparam local_bb4_c3_exit_c3_exi2_instance.PIPELINE_DEPTH = 3;
defparam local_bb4_c3_exit_c3_exi2_instance.SCHEDULEII = 1;
defparam local_bb4_c3_exit_c3_exi2_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb4_c3_exit_c3_exi2_inputs_ready = (local_bb4_c3_exi2_valid_out & SFC_4_VALID_169_170_0_valid_out_NO_SHIFT_REG);
assign local_bb4_c3_exit_c3_exi2_valid_in = SFC_4_VALID_169_170_0_NO_SHIFT_REG;
assign local_bb4_c3_exit_c3_exi2_fu_stall_out = ~(local_bb4_c3_exit_c3_exi2_enable);
assign local_bb4_c3_exit_c3_exi2_valid_out = local_bb4_c3_exit_c3_exi2_valid;
assign local_bb4_c3_exit_c3_exi2_stall_local = local_bb4_c3_exit_c3_exi2_stall_in;
assign local_bb4_c3_exi2_stall_in = 1'b0;
assign SFC_4_VALID_169_170_0_stall_in = 1'b0;

// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_170to170_bb4_c3_exit_c3_exi2_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_170to170_bb4_c3_exit_c3_exi2_0_stall_in_0_NO_SHIFT_REG;
 logic [95:0] rnode_170to170_bb4_c3_exit_c3_exi2_0_NO_SHIFT_REG;
 logic rnode_170to170_bb4_c3_exit_c3_exi2_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_170to170_bb4_c3_exit_c3_exi2_0_stall_in_1_NO_SHIFT_REG;
 logic [95:0] rnode_170to170_bb4_c3_exit_c3_exi2_1_NO_SHIFT_REG;
 logic rnode_170to170_bb4_c3_exit_c3_exi2_0_reg_170_inputs_ready_NO_SHIFT_REG;
 logic [95:0] rnode_170to170_bb4_c3_exit_c3_exi2_0_reg_170_NO_SHIFT_REG;
 logic rnode_170to170_bb4_c3_exit_c3_exi2_0_valid_out_0_reg_170_NO_SHIFT_REG;
 logic rnode_170to170_bb4_c3_exit_c3_exi2_0_stall_in_0_reg_170_NO_SHIFT_REG;
 logic rnode_170to170_bb4_c3_exit_c3_exi2_0_stall_out_reg_170_NO_SHIFT_REG;

acl_data_fifo rnode_170to170_bb4_c3_exit_c3_exi2_0_reg_170_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_170to170_bb4_c3_exit_c3_exi2_0_reg_170_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_170to170_bb4_c3_exit_c3_exi2_0_stall_in_0_reg_170_NO_SHIFT_REG),
	.valid_out(rnode_170to170_bb4_c3_exit_c3_exi2_0_valid_out_0_reg_170_NO_SHIFT_REG),
	.stall_out(rnode_170to170_bb4_c3_exit_c3_exi2_0_stall_out_reg_170_NO_SHIFT_REG),
	.data_in(local_bb4_c3_exit_c3_exi2),
	.data_out(rnode_170to170_bb4_c3_exit_c3_exi2_0_reg_170_NO_SHIFT_REG)
);

defparam rnode_170to170_bb4_c3_exit_c3_exi2_0_reg_170_fifo.DEPTH = 3;
defparam rnode_170to170_bb4_c3_exit_c3_exi2_0_reg_170_fifo.DATA_WIDTH = 96;
defparam rnode_170to170_bb4_c3_exit_c3_exi2_0_reg_170_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_170to170_bb4_c3_exit_c3_exi2_0_reg_170_fifo.IMPL = "zl_reg";

assign rnode_170to170_bb4_c3_exit_c3_exi2_0_reg_170_inputs_ready_NO_SHIFT_REG = local_bb4_c3_exit_c3_exi2_valid_out;
assign local_bb4_c3_exit_c3_exi2_stall_in = rnode_170to170_bb4_c3_exit_c3_exi2_0_stall_out_reg_170_NO_SHIFT_REG;
assign rnode_170to170_bb4_c3_exit_c3_exi2_0_stall_in_0_reg_170_NO_SHIFT_REG = (rnode_170to170_bb4_c3_exit_c3_exi2_0_stall_in_0_NO_SHIFT_REG | rnode_170to170_bb4_c3_exit_c3_exi2_0_stall_in_1_NO_SHIFT_REG);
assign rnode_170to170_bb4_c3_exit_c3_exi2_0_valid_out_0_NO_SHIFT_REG = rnode_170to170_bb4_c3_exit_c3_exi2_0_valid_out_0_reg_170_NO_SHIFT_REG;
assign rnode_170to170_bb4_c3_exit_c3_exi2_0_valid_out_1_NO_SHIFT_REG = rnode_170to170_bb4_c3_exit_c3_exi2_0_valid_out_0_reg_170_NO_SHIFT_REG;
assign rnode_170to170_bb4_c3_exit_c3_exi2_0_NO_SHIFT_REG = rnode_170to170_bb4_c3_exit_c3_exi2_0_reg_170_NO_SHIFT_REG;
assign rnode_170to170_bb4_c3_exit_c3_exi2_1_NO_SHIFT_REG = rnode_170to170_bb4_c3_exit_c3_exi2_0_reg_170_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb4_c3_exe2_stall_local;
wire [31:0] local_bb4_c3_exe2;

assign local_bb4_c3_exe2[31:0] = rnode_170to170_bb4_c3_exit_c3_exi2_0_NO_SHIFT_REG[95:64];

// This section implements an unregistered operation.
// 
wire local_bb4_c3_exe1_stall_local;
wire [31:0] local_bb4_c3_exe1;

assign local_bb4_c3_exe1[31:0] = rnode_170to170_bb4_c3_exit_c3_exi2_1_NO_SHIFT_REG[63:32];

// This section implements an unregistered operation.
// 
wire local_bb4_c4_eni1_stall_local;
wire [95:0] local_bb4_c4_eni1;

assign local_bb4_c4_eni1[31:0] = 32'bx;
assign local_bb4_c4_eni1[63:32] = local_bb4_c3_exe1;
assign local_bb4_c4_eni1[95:64] = 32'bx;

// This section implements an unregistered operation.
// 
wire local_bb4_c4_eni2_valid_out;
wire local_bb4_c4_eni2_stall_in;
wire local_bb4_c4_eni2_inputs_ready;
wire local_bb4_c4_eni2_stall_local;
wire [95:0] local_bb4_c4_eni2;

assign local_bb4_c4_eni2_inputs_ready = (rnode_170to170_bb4_c3_exit_c3_exi2_0_valid_out_0_NO_SHIFT_REG & rnode_170to170_bb4_c3_exit_c3_exi2_0_valid_out_1_NO_SHIFT_REG);
assign local_bb4_c4_eni2[63:0] = local_bb4_c4_eni1[63:0];
assign local_bb4_c4_eni2[95:64] = local_bb4_c3_exe2;
assign local_bb4_c4_eni2_valid_out = local_bb4_c4_eni2_inputs_ready;
assign local_bb4_c4_eni2_stall_local = local_bb4_c4_eni2_stall_in;
assign rnode_170to170_bb4_c3_exit_c3_exi2_0_stall_in_0_NO_SHIFT_REG = (local_bb4_c4_eni2_stall_local | ~(local_bb4_c4_eni2_inputs_ready));
assign rnode_170to170_bb4_c3_exit_c3_exi2_0_stall_in_1_NO_SHIFT_REG = (local_bb4_c4_eni2_stall_local | ~(local_bb4_c4_eni2_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb4_c4_enter_c4_eni2_valid_out_0;
wire local_bb4_c4_enter_c4_eni2_stall_in_0;
wire local_bb4_c4_enter_c4_eni2_valid_out_1;
wire local_bb4_c4_enter_c4_eni2_stall_in_1;
wire local_bb4_c4_enter_c4_eni2_valid_out_2;
wire local_bb4_c4_enter_c4_eni2_stall_in_2;
wire local_bb4_c4_enter_c4_eni2_inputs_ready;
wire local_bb4_c4_enter_c4_eni2_stall_local;
wire local_bb4_c4_enter_c4_eni2_input_accepted;
wire [95:0] local_bb4_c4_enter_c4_eni2;
wire local_bb4_c4_exit_c4_exi1_enable;
wire local_bb4_c4_exit_c4_exi1_entry_stall;
wire local_bb4_c4_enter_c4_eni2_valid_bit;
wire local_bb4_c4_exit_c4_exi1_output_regs_ready;
wire local_bb4_c4_exit_c4_exi1_valid_in;
wire local_bb4_c4_exit_c4_exi1_phases;
wire local_bb4_c4_enter_c4_eni2_inc_pipelined_thread;
wire local_bb4_c4_enter_c4_eni2_dec_pipelined_thread;
wire local_bb4_c4_enter_c4_eni2_fu_stall_out;

assign local_bb4_c4_enter_c4_eni2_inputs_ready = local_bb4_c4_eni2_valid_out;
assign local_bb4_c4_enter_c4_eni2 = local_bb4_c4_eni2;
assign local_bb4_c4_enter_c4_eni2_input_accepted = (local_bb4_c4_enter_c4_eni2_inputs_ready && !(local_bb4_c4_exit_c4_exi1_entry_stall));
assign local_bb4_c4_enter_c4_eni2_valid_bit = local_bb4_c4_enter_c4_eni2_input_accepted;
assign local_bb4_c4_enter_c4_eni2_inc_pipelined_thread = 1'b1;
assign local_bb4_c4_enter_c4_eni2_dec_pipelined_thread = ~(1'b0);
assign local_bb4_c4_enter_c4_eni2_fu_stall_out = (~(local_bb4_c4_enter_c4_eni2_inputs_ready) | local_bb4_c4_exit_c4_exi1_entry_stall);
assign local_bb4_c4_enter_c4_eni2_stall_local = (local_bb4_c4_enter_c4_eni2_stall_in_0 | local_bb4_c4_enter_c4_eni2_stall_in_1 | local_bb4_c4_enter_c4_eni2_stall_in_2);
assign local_bb4_c4_enter_c4_eni2_valid_out_0 = local_bb4_c4_enter_c4_eni2_inputs_ready;
assign local_bb4_c4_enter_c4_eni2_valid_out_1 = local_bb4_c4_enter_c4_eni2_inputs_ready;
assign local_bb4_c4_enter_c4_eni2_valid_out_2 = local_bb4_c4_enter_c4_eni2_inputs_ready;
assign local_bb4_c4_eni2_stall_in = (|local_bb4_c4_enter_c4_eni2_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb4_c4_ene1_stall_local;
wire [31:0] local_bb4_c4_ene1;

assign local_bb4_c4_ene1[31:0] = local_bb4_c4_enter_c4_eni2[63:32];

// This section implements an unregistered operation.
// 
wire local_bb4_c4_ene2_stall_local;
wire [31:0] local_bb4_c4_ene2;

assign local_bb4_c4_ene2[31:0] = local_bb4_c4_enter_c4_eni2[95:64];

// This section implements an unregistered operation.
// 
wire SFC_5_VALID_170_170_0_valid_out;
wire SFC_5_VALID_170_170_0_stall_in;
wire SFC_5_VALID_170_170_0_inputs_ready;
wire SFC_5_VALID_170_170_0_stall_local;
wire SFC_5_VALID_170_170_0;

assign SFC_5_VALID_170_170_0_inputs_ready = local_bb4_c4_enter_c4_eni2_valid_out_2;
assign SFC_5_VALID_170_170_0 = local_bb4_c4_enter_c4_eni2_valid_bit;
assign SFC_5_VALID_170_170_0_valid_out = 1'b1;
assign local_bb4_c4_enter_c4_eni2_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb4_add39_valid_out;
wire local_bb4_add39_stall_in;
wire local_bb4_add39_inputs_ready;
wire local_bb4_add39_stall_local;
wire [31:0] local_bb4_add39;

assign local_bb4_add39_inputs_ready = (local_bb4_c4_enter_c4_eni2_valid_out_0 & local_bb4_c4_enter_c4_eni2_valid_out_1);
assign local_bb4_add39 = (local_bb4_c4_ene1 + local_bb4_c4_ene2);
assign local_bb4_add39_valid_out = 1'b1;
assign local_bb4_c4_enter_c4_eni2_stall_in_0 = 1'b0;
assign local_bb4_c4_enter_c4_eni2_stall_in_1 = 1'b0;

// This section implements a registered operation.
// 
wire SFC_5_VALID_170_171_0_inputs_ready;
 reg SFC_5_VALID_170_171_0_valid_out_NO_SHIFT_REG;
wire SFC_5_VALID_170_171_0_stall_in;
wire SFC_5_VALID_170_171_0_output_regs_ready;
 reg SFC_5_VALID_170_171_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_5_VALID_170_171_0_causedstall;

assign SFC_5_VALID_170_171_0_inputs_ready = 1'b1;
assign SFC_5_VALID_170_171_0_output_regs_ready = local_bb4_c4_exit_c4_exi1_enable;
assign SFC_5_VALID_170_170_0_stall_in = 1'b0;
assign SFC_5_VALID_170_171_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb4_c4_exit_c4_exi1_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_5_VALID_170_171_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_5_VALID_170_171_0_output_regs_ready)
		begin
			SFC_5_VALID_170_171_0_NO_SHIFT_REG <= SFC_5_VALID_170_170_0;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_170to171_bb4_add39_0_valid_out_NO_SHIFT_REG;
 logic rnode_170to171_bb4_add39_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_170to171_bb4_add39_0_NO_SHIFT_REG;
 logic rnode_170to171_bb4_add39_0_reg_171_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_170to171_bb4_add39_0_reg_171_NO_SHIFT_REG;
 logic rnode_170to171_bb4_add39_0_valid_out_reg_171_NO_SHIFT_REG;
 logic rnode_170to171_bb4_add39_0_stall_in_reg_171_NO_SHIFT_REG;
 logic rnode_170to171_bb4_add39_0_stall_out_reg_171_NO_SHIFT_REG;

acl_data_fifo rnode_170to171_bb4_add39_0_reg_171_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_170to171_bb4_add39_0_reg_171_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_170to171_bb4_add39_0_stall_in_reg_171_NO_SHIFT_REG),
	.valid_out(rnode_170to171_bb4_add39_0_valid_out_reg_171_NO_SHIFT_REG),
	.stall_out(rnode_170to171_bb4_add39_0_stall_out_reg_171_NO_SHIFT_REG),
	.data_in(local_bb4_add39),
	.data_out(rnode_170to171_bb4_add39_0_reg_171_NO_SHIFT_REG)
);

defparam rnode_170to171_bb4_add39_0_reg_171_fifo.DEPTH = 1;
defparam rnode_170to171_bb4_add39_0_reg_171_fifo.DATA_WIDTH = 32;
defparam rnode_170to171_bb4_add39_0_reg_171_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_170to171_bb4_add39_0_reg_171_fifo.IMPL = "shift_reg";

assign rnode_170to171_bb4_add39_0_reg_171_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_add39_stall_in = 1'b0;
assign rnode_170to171_bb4_add39_0_NO_SHIFT_REG = rnode_170to171_bb4_add39_0_reg_171_NO_SHIFT_REG;
assign rnode_170to171_bb4_add39_0_stall_in_reg_171_NO_SHIFT_REG = ~(local_bb4_c4_exit_c4_exi1_enable);
assign rnode_170to171_bb4_add39_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb4_idxprom_stall_local;
wire [63:0] local_bb4_idxprom;

assign local_bb4_idxprom[32] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[33] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[34] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[35] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[36] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[37] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[38] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[39] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[40] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[41] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[42] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[43] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[44] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[45] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[46] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[47] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[48] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[49] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[50] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[51] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[52] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[53] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[54] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[55] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[56] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[57] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[58] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[59] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[60] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[61] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[62] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[63] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom[31:0] = rnode_170to171_bb4_add39_0_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb4_arrayidx_stall_local;
wire [63:0] local_bb4_arrayidx;

assign local_bb4_arrayidx = ((input_inputFeatureMap & 64'hFFFFFFFFFFFFFC00) + (local_bb4_idxprom << 6'h2));

// This section implements an unregistered operation.
// 
wire local_bb4_c4_exi1_valid_out;
wire local_bb4_c4_exi1_stall_in;
wire local_bb4_c4_exi1_inputs_ready;
wire local_bb4_c4_exi1_stall_local;
wire [127:0] local_bb4_c4_exi1;

assign local_bb4_c4_exi1_inputs_ready = rnode_170to171_bb4_add39_0_valid_out_NO_SHIFT_REG;
assign local_bb4_c4_exi1[63:0] = 64'bx;
assign local_bb4_c4_exi1[127:64] = (local_bb4_arrayidx & 64'hFFFFFFFFFFFFFFFC);
assign local_bb4_c4_exi1_valid_out = 1'b1;
assign rnode_170to171_bb4_add39_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb4_c4_exit_c4_exi1_valid_out;
wire local_bb4_c4_exit_c4_exi1_stall_in;
wire local_bb4_c4_exit_c4_exi1_inputs_ready;
wire local_bb4_c4_exit_c4_exi1_stall_local;
wire [127:0] local_bb4_c4_exit_c4_exi1;
wire local_bb4_c4_exit_c4_exi1_valid;
wire local_bb4_c4_exit_c4_exi1_fu_stall_out;

acl_enable_sink local_bb4_c4_exit_c4_exi1_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb4_c4_exi1),
	.data_out(local_bb4_c4_exit_c4_exi1),
	.input_accepted(local_bb4_c4_enter_c4_eni2_input_accepted),
	.valid_out(local_bb4_c4_exit_c4_exi1_valid),
	.stall_in(local_bb4_c4_exit_c4_exi1_stall_local),
	.enable(local_bb4_c4_exit_c4_exi1_enable),
	.valid_in(local_bb4_c4_exit_c4_exi1_valid_in),
	.stall_entry(local_bb4_c4_exit_c4_exi1_entry_stall),
	.inc_pipelined_thread(local_bb4_c4_enter_c4_eni2_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb4_c4_enter_c4_eni2_dec_pipelined_thread)
);

defparam local_bb4_c4_exit_c4_exi1_instance.DATA_WIDTH = 128;
defparam local_bb4_c4_exit_c4_exi1_instance.PIPELINE_DEPTH = 1;
defparam local_bb4_c4_exit_c4_exi1_instance.SCHEDULEII = 1;
defparam local_bb4_c4_exit_c4_exi1_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb4_c4_exit_c4_exi1_inputs_ready = (local_bb4_c4_exi1_valid_out & SFC_5_VALID_170_171_0_valid_out_NO_SHIFT_REG);
assign local_bb4_c4_exit_c4_exi1_valid_in = SFC_5_VALID_170_171_0_NO_SHIFT_REG;
assign local_bb4_c4_exit_c4_exi1_fu_stall_out = ~(local_bb4_c4_exit_c4_exi1_enable);
assign local_bb4_c4_exit_c4_exi1_valid_out = local_bb4_c4_exit_c4_exi1_valid;
assign local_bb4_c4_exit_c4_exi1_stall_local = local_bb4_c4_exit_c4_exi1_stall_in;
assign local_bb4_c4_exi1_stall_in = 1'b0;
assign SFC_5_VALID_170_171_0_stall_in = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb4_c4_exe1_valid_out;
wire local_bb4_c4_exe1_stall_in;
wire local_bb4_c4_exe1_inputs_ready;
wire local_bb4_c4_exe1_stall_local;
wire [63:0] local_bb4_c4_exe1;

assign local_bb4_c4_exe1_inputs_ready = local_bb4_c4_exit_c4_exi1_valid_out;
assign local_bb4_c4_exe1[63:0] = local_bb4_c4_exit_c4_exi1[127:64];
assign local_bb4_c4_exe1_valid_out = local_bb4_c4_exe1_inputs_ready;
assign local_bb4_c4_exe1_stall_local = local_bb4_c4_exe1_stall_in;
assign local_bb4_c4_exit_c4_exi1_stall_in = (|local_bb4_c4_exe1_stall_local);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_171to172_bb4_c4_exe1_0_valid_out_NO_SHIFT_REG;
 logic rnode_171to172_bb4_c4_exe1_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_171to172_bb4_c4_exe1_0_NO_SHIFT_REG;
 logic rnode_171to172_bb4_c4_exe1_0_reg_172_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_171to172_bb4_c4_exe1_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb4_c4_exe1_0_valid_out_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb4_c4_exe1_0_stall_in_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb4_c4_exe1_0_stall_out_reg_172_NO_SHIFT_REG;

acl_data_fifo rnode_171to172_bb4_c4_exe1_0_reg_172_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_171to172_bb4_c4_exe1_0_reg_172_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_171to172_bb4_c4_exe1_0_stall_in_reg_172_NO_SHIFT_REG),
	.valid_out(rnode_171to172_bb4_c4_exe1_0_valid_out_reg_172_NO_SHIFT_REG),
	.stall_out(rnode_171to172_bb4_c4_exe1_0_stall_out_reg_172_NO_SHIFT_REG),
	.data_in((local_bb4_c4_exe1 & 64'hFFFFFFFFFFFFFFFC)),
	.data_out(rnode_171to172_bb4_c4_exe1_0_reg_172_NO_SHIFT_REG)
);

defparam rnode_171to172_bb4_c4_exe1_0_reg_172_fifo.DEPTH = 2;
defparam rnode_171to172_bb4_c4_exe1_0_reg_172_fifo.DATA_WIDTH = 64;
defparam rnode_171to172_bb4_c4_exe1_0_reg_172_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_171to172_bb4_c4_exe1_0_reg_172_fifo.IMPL = "ll_reg";

assign rnode_171to172_bb4_c4_exe1_0_reg_172_inputs_ready_NO_SHIFT_REG = local_bb4_c4_exe1_valid_out;
assign local_bb4_c4_exe1_stall_in = rnode_171to172_bb4_c4_exe1_0_stall_out_reg_172_NO_SHIFT_REG;
assign rnode_171to172_bb4_c4_exe1_0_NO_SHIFT_REG = rnode_171to172_bb4_c4_exe1_0_reg_172_NO_SHIFT_REG;
assign rnode_171to172_bb4_c4_exe1_0_stall_in_reg_172_NO_SHIFT_REG = rnode_171to172_bb4_c4_exe1_0_stall_in_NO_SHIFT_REG;
assign rnode_171to172_bb4_c4_exe1_0_valid_out_NO_SHIFT_REG = rnode_171to172_bb4_c4_exe1_0_valid_out_reg_172_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb4_ld__inputs_ready;
 reg local_bb4_ld__valid_out_NO_SHIFT_REG;
wire local_bb4_ld__stall_in;
wire local_bb4_ld__output_regs_ready;
wire local_bb4_ld__fu_stall_out;
wire local_bb4_ld__fu_valid_out;
wire [31:0] local_bb4_ld__lsu_dataout;
 reg [31:0] local_bb4_ld__NO_SHIFT_REG;
wire local_bb4_ld__causedstall;

lsu_top lsu_local_bb4_ld_ (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb4_ld__fu_stall_out),
	.i_valid(local_bb4_ld__inputs_ready),
	.i_address((rnode_171to172_bb4_c4_exe1_0_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFFFC)),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(rnode_171to172_bb4__phi_decision47_xor_or_0_NO_SHIFT_REG),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb4_ld__output_regs_ready)),
	.o_valid(local_bb4_ld__fu_valid_out),
	.o_readdata(local_bb4_ld__lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb4_ld__active),
	.avm_address(avm_local_bb4_ld__address),
	.avm_read(avm_local_bb4_ld__read),
	.avm_enable(avm_local_bb4_ld__enable),
	.avm_readdata(avm_local_bb4_ld__readdata),
	.avm_write(avm_local_bb4_ld__write),
	.avm_writeack(avm_local_bb4_ld__writeack),
	.avm_burstcount(avm_local_bb4_ld__burstcount),
	.avm_writedata(avm_local_bb4_ld__writedata),
	.avm_byteenable(avm_local_bb4_ld__byteenable),
	.avm_waitrequest(avm_local_bb4_ld__waitrequest),
	.avm_readdatavalid(avm_local_bb4_ld__readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb4_ld_.AWIDTH = 32;
defparam lsu_local_bb4_ld_.WIDTH_BYTES = 4;
defparam lsu_local_bb4_ld_.MWIDTH_BYTES = 64;
defparam lsu_local_bb4_ld_.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb4_ld_.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb4_ld_.READ = 1;
defparam lsu_local_bb4_ld_.ATOMIC = 0;
defparam lsu_local_bb4_ld_.WIDTH = 32;
defparam lsu_local_bb4_ld_.MWIDTH = 512;
defparam lsu_local_bb4_ld_.ATOMIC_WIDTH = 3;
defparam lsu_local_bb4_ld_.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb4_ld_.KERNEL_SIDE_MEM_LATENCY = 160;
defparam lsu_local_bb4_ld_.MEMORY_SIDE_MEM_LATENCY = 68;
defparam lsu_local_bb4_ld_.USE_WRITE_ACK = 0;
defparam lsu_local_bb4_ld_.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb4_ld_.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb4_ld_.NUMBER_BANKS = 1;
defparam lsu_local_bb4_ld_.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb4_ld_.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb4_ld_.USEINPUTFIFO = 0;
defparam lsu_local_bb4_ld_.USECACHING = 0;
defparam lsu_local_bb4_ld_.USEOUTPUTFIFO = 1;
defparam lsu_local_bb4_ld_.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb4_ld_.ADDRSPACE = 1;
defparam lsu_local_bb4_ld_.STYLE = "BURST-COALESCED";

assign local_bb4_ld__inputs_ready = (rnode_171to172_bb4_c4_exe1_0_valid_out_NO_SHIFT_REG & rnode_171to172_bb4__phi_decision47_xor_or_0_valid_out_NO_SHIFT_REG);
assign local_bb4_ld__output_regs_ready = (&(~(local_bb4_ld__valid_out_NO_SHIFT_REG) | ~(local_bb4_ld__stall_in)));
assign rnode_171to172_bb4_c4_exe1_0_stall_in_NO_SHIFT_REG = (local_bb4_ld__fu_stall_out | ~(local_bb4_ld__inputs_ready));
assign rnode_171to172_bb4__phi_decision47_xor_or_0_stall_in_NO_SHIFT_REG = (local_bb4_ld__fu_stall_out | ~(local_bb4_ld__inputs_ready));
assign local_bb4_ld__causedstall = (local_bb4_ld__inputs_ready && (local_bb4_ld__fu_stall_out && !(~(local_bb4_ld__output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_ld__NO_SHIFT_REG <= 'x;
		local_bb4_ld__valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4_ld__output_regs_ready)
		begin
			local_bb4_ld__NO_SHIFT_REG <= local_bb4_ld__lsu_dataout;
			local_bb4_ld__valid_out_NO_SHIFT_REG <= local_bb4_ld__fu_valid_out;
		end
		else
		begin
			if (~(local_bb4_ld__stall_in))
			begin
				local_bb4_ld__valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_332to332_bb4_ld__valid_out;
wire rstag_332to332_bb4_ld__stall_in;
wire rstag_332to332_bb4_ld__inputs_ready;
wire rstag_332to332_bb4_ld__stall_local;
 reg rstag_332to332_bb4_ld__staging_valid_NO_SHIFT_REG;
wire rstag_332to332_bb4_ld__combined_valid;
 reg [31:0] rstag_332to332_bb4_ld__staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_332to332_bb4_ld_;

assign rstag_332to332_bb4_ld__inputs_ready = local_bb4_ld__valid_out_NO_SHIFT_REG;
assign rstag_332to332_bb4_ld_ = (rstag_332to332_bb4_ld__staging_valid_NO_SHIFT_REG ? rstag_332to332_bb4_ld__staging_reg_NO_SHIFT_REG : local_bb4_ld__NO_SHIFT_REG);
assign rstag_332to332_bb4_ld__combined_valid = (rstag_332to332_bb4_ld__staging_valid_NO_SHIFT_REG | rstag_332to332_bb4_ld__inputs_ready);
assign rstag_332to332_bb4_ld__valid_out = rstag_332to332_bb4_ld__combined_valid;
assign rstag_332to332_bb4_ld__stall_local = rstag_332to332_bb4_ld__stall_in;
assign local_bb4_ld__stall_in = (|rstag_332to332_bb4_ld__staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_332to332_bb4_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_332to332_bb4_ld__staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_332to332_bb4_ld__stall_local)
		begin
			if (~(rstag_332to332_bb4_ld__staging_valid_NO_SHIFT_REG))
			begin
				rstag_332to332_bb4_ld__staging_valid_NO_SHIFT_REG <= rstag_332to332_bb4_ld__inputs_ready;
			end
		end
		else
		begin
			rstag_332to332_bb4_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_332to332_bb4_ld__staging_valid_NO_SHIFT_REG))
		begin
			rstag_332to332_bb4_ld__staging_reg_NO_SHIFT_REG <= local_bb4_ld__NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb4__27_valid_out;
wire local_bb4__27_stall_in;
wire local_bb4__27_inputs_ready;
wire local_bb4__27_stall_local;
wire [31:0] local_bb4__27;

assign local_bb4__27_inputs_ready = (rnode_331to332_bb4__26_0_valid_out_NO_SHIFT_REG & rstag_332to332_bb4_ld__valid_out);
assign local_bb4__27 = (rnode_331to332_bb4__26_0_NO_SHIFT_REG ? rstag_332to332_bb4_ld_ : 32'h0);
assign local_bb4__27_valid_out = local_bb4__27_inputs_ready;
assign local_bb4__27_stall_local = local_bb4__27_stall_in;
assign rnode_331to332_bb4__26_0_stall_in_NO_SHIFT_REG = (local_bb4__27_stall_local | ~(local_bb4__27_inputs_ready));
assign rstag_332to332_bb4_ld__stall_in = (local_bb4__27_stall_local | ~(local_bb4__27_inputs_ready));

// This section implements a staging register.
// 
wire rstag_332to332_bb4__27_valid_out;
wire rstag_332to332_bb4__27_stall_in;
wire rstag_332to332_bb4__27_inputs_ready;
wire rstag_332to332_bb4__27_stall_local;
 reg rstag_332to332_bb4__27_staging_valid_NO_SHIFT_REG;
wire rstag_332to332_bb4__27_combined_valid;
 reg [31:0] rstag_332to332_bb4__27_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_332to332_bb4__27;

assign rstag_332to332_bb4__27_inputs_ready = local_bb4__27_valid_out;
assign rstag_332to332_bb4__27 = (rstag_332to332_bb4__27_staging_valid_NO_SHIFT_REG ? rstag_332to332_bb4__27_staging_reg_NO_SHIFT_REG : local_bb4__27);
assign rstag_332to332_bb4__27_combined_valid = (rstag_332to332_bb4__27_staging_valid_NO_SHIFT_REG | rstag_332to332_bb4__27_inputs_ready);
assign rstag_332to332_bb4__27_valid_out = rstag_332to332_bb4__27_combined_valid;
assign rstag_332to332_bb4__27_stall_local = rstag_332to332_bb4__27_stall_in;
assign local_bb4__27_stall_in = (|rstag_332to332_bb4__27_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_332to332_bb4__27_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_332to332_bb4__27_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_332to332_bb4__27_stall_local)
		begin
			if (~(rstag_332to332_bb4__27_staging_valid_NO_SHIFT_REG))
			begin
				rstag_332to332_bb4__27_staging_valid_NO_SHIFT_REG <= rstag_332to332_bb4__27_inputs_ready;
			end
		end
		else
		begin
			rstag_332to332_bb4__27_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_332to332_bb4__27_staging_valid_NO_SHIFT_REG))
		begin
			rstag_332to332_bb4__27_staging_reg_NO_SHIFT_REG <= local_bb4__27;
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb4_st__27_inputs_ready;
 reg local_bb4_st__27_valid_out_NO_SHIFT_REG;
wire local_bb4_st__27_stall_in;
wire local_bb4_st__27_output_regs_ready;
wire local_bb4_st__27_fu_stall_out;
wire local_bb4_st__27_fu_valid_out;
wire local_bb4_st__27_causedstall;

lsu_top lsu_local_bb4_st__27 (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb4_st__27_fu_stall_out),
	.i_valid(local_bb4_st__27_inputs_ready),
	.i_address((rnode_331to332_bb4_arrayidx49_0_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFFFC)),
	.i_writedata(rstag_332to332_bb4__27),
	.i_cmpdata(),
	.i_predicate(rnode_331to332__phi_decision_xor45_or_0_NO_SHIFT_REG),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb4_st__27_output_regs_ready)),
	.o_valid(local_bb4_st__27_fu_valid_out),
	.o_readdata(),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb4_st__27_active),
	.avm_address(avm_local_bb4_st__27_address),
	.avm_read(avm_local_bb4_st__27_read),
	.avm_enable(avm_local_bb4_st__27_enable),
	.avm_readdata(avm_local_bb4_st__27_readdata),
	.avm_write(avm_local_bb4_st__27_write),
	.avm_writeack(avm_local_bb4_st__27_writeack),
	.avm_burstcount(avm_local_bb4_st__27_burstcount),
	.avm_writedata(avm_local_bb4_st__27_writedata),
	.avm_byteenable(avm_local_bb4_st__27_byteenable),
	.avm_waitrequest(avm_local_bb4_st__27_waitrequest),
	.avm_readdatavalid(avm_local_bb4_st__27_readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb4_st__27.AWIDTH = 32;
defparam lsu_local_bb4_st__27.WIDTH_BYTES = 4;
defparam lsu_local_bb4_st__27.MWIDTH_BYTES = 64;
defparam lsu_local_bb4_st__27.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb4_st__27.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb4_st__27.READ = 0;
defparam lsu_local_bb4_st__27.ATOMIC = 0;
defparam lsu_local_bb4_st__27.WIDTH = 32;
defparam lsu_local_bb4_st__27.MWIDTH = 512;
defparam lsu_local_bb4_st__27.ATOMIC_WIDTH = 3;
defparam lsu_local_bb4_st__27.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb4_st__27.KERNEL_SIDE_MEM_LATENCY = 160;
defparam lsu_local_bb4_st__27.MEMORY_SIDE_MEM_LATENCY = 18;
defparam lsu_local_bb4_st__27.USE_WRITE_ACK = 1;
defparam lsu_local_bb4_st__27.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb4_st__27.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb4_st__27.NUMBER_BANKS = 1;
defparam lsu_local_bb4_st__27.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb4_st__27.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb4_st__27.USEINPUTFIFO = 0;
defparam lsu_local_bb4_st__27.USECACHING = 0;
defparam lsu_local_bb4_st__27.USEOUTPUTFIFO = 1;
defparam lsu_local_bb4_st__27.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb4_st__27.ADDRSPACE = 1;
defparam lsu_local_bb4_st__27.STYLE = "BURST-COALESCED";
defparam lsu_local_bb4_st__27.USE_BYTE_EN = 0;

assign local_bb4_st__27_inputs_ready = (rnode_331to332_bb4_arrayidx49_0_valid_out_NO_SHIFT_REG & rnode_331to332__phi_decision_xor45_or_0_valid_out_0_NO_SHIFT_REG & rstag_332to332_bb4__27_valid_out);
assign local_bb4_st__27_output_regs_ready = (&(~(local_bb4_st__27_valid_out_NO_SHIFT_REG) | ~(local_bb4_st__27_stall_in)));
assign rnode_331to332_bb4_arrayidx49_0_stall_in_NO_SHIFT_REG = (local_bb4_st__27_fu_stall_out | ~(local_bb4_st__27_inputs_ready));
assign rnode_331to332__phi_decision_xor45_or_0_stall_in_0_NO_SHIFT_REG = (local_bb4_st__27_fu_stall_out | ~(local_bb4_st__27_inputs_ready));
assign rstag_332to332_bb4__27_stall_in = (local_bb4_st__27_fu_stall_out | ~(local_bb4_st__27_inputs_ready));
assign local_bb4_st__27_causedstall = (local_bb4_st__27_inputs_ready && (local_bb4_st__27_fu_stall_out && !(~(local_bb4_st__27_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_st__27_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4_st__27_output_regs_ready)
		begin
			local_bb4_st__27_valid_out_NO_SHIFT_REG <= local_bb4_st__27_fu_valid_out;
		end
		else
		begin
			if (~(local_bb4_st__27_stall_in))
			begin
				local_bb4_st__27_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_492to492_bb4_st__27_valid_out;
wire rstag_492to492_bb4_st__27_stall_in;
wire rstag_492to492_bb4_st__27_inputs_ready;
wire rstag_492to492_bb4_st__27_stall_local;
 reg rstag_492to492_bb4_st__27_staging_valid_NO_SHIFT_REG;
wire rstag_492to492_bb4_st__27_combined_valid;

assign rstag_492to492_bb4_st__27_inputs_ready = local_bb4_st__27_valid_out_NO_SHIFT_REG;
assign rstag_492to492_bb4_st__27_combined_valid = (rstag_492to492_bb4_st__27_staging_valid_NO_SHIFT_REG | rstag_492to492_bb4_st__27_inputs_ready);
assign rstag_492to492_bb4_st__27_valid_out = rstag_492to492_bb4_st__27_combined_valid;
assign rstag_492to492_bb4_st__27_stall_local = rstag_492to492_bb4_st__27_stall_in;
assign local_bb4_st__27_stall_in = (|rstag_492to492_bb4_st__27_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_492to492_bb4_st__27_staging_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (rstag_492to492_bb4_st__27_stall_local)
		begin
			if (~(rstag_492to492_bb4_st__27_staging_valid_NO_SHIFT_REG))
			begin
				rstag_492to492_bb4_st__27_staging_valid_NO_SHIFT_REG <= rstag_492to492_bb4_st__27_inputs_ready;
			end
		end
		else
		begin
			rstag_492to492_bb4_st__27_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_0_NO_SHIFT_REG;
 reg branch_compare_result_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg lvb__phi_decision_xor_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_ld__0_reg_NO_SHIFT_REG;
 reg lvb_cmp1116_NEG_0_reg_NO_SHIFT_REG;
 reg lvb__phi_decision_xor45_or_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_ld__u3_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_channelCounter_024_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul41_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_heightCounter_120_0_reg_NO_SHIFT_REG;
 reg lvb_cmp14_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c0_exe1_0_reg_NO_SHIFT_REG;
 reg lvb_cmp29_not_0_reg_NO_SHIFT_REG;
 reg lvb_cmp29_not_not_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb4_add52_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_0_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb4_var__valid_out & rcnode_491to492_rc1_ld__0_valid_out_0_NO_SHIFT_REG & rstag_492to492_bb4_st__27_valid_out);
assign branch_var__output_regs_ready = (~(branch_node_valid_out_0_NO_SHIFT_REG) | (((branch_compare_result_NO_SHIFT_REG != 1'b1) & ~(stall_in_1)) | (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & ~(stall_in_0))));
assign local_bb4_var__stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_491to492_rc1_ld__0_stall_in_0_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rstag_492to492_bb4_st__27_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb__phi_decision_xor_0 = lvb__phi_decision_xor_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor_1 = lvb__phi_decision_xor_0_reg_NO_SHIFT_REG;
assign lvb_ld__0 = lvb_ld__0_reg_NO_SHIFT_REG;
assign lvb_ld__1 = lvb_ld__0_reg_NO_SHIFT_REG;
assign lvb_cmp1116_NEG_0 = lvb_cmp1116_NEG_0_reg_NO_SHIFT_REG;
assign lvb_cmp1116_NEG_1 = lvb_cmp1116_NEG_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor45_or_0 = lvb__phi_decision_xor45_or_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor45_or_1 = lvb__phi_decision_xor45_or_0_reg_NO_SHIFT_REG;
assign lvb_ld__u3_0 = lvb_ld__u3_0_reg_NO_SHIFT_REG;
assign lvb_ld__u3_1 = lvb_ld__u3_0_reg_NO_SHIFT_REG;
assign lvb_channelCounter_024_0 = lvb_channelCounter_024_0_reg_NO_SHIFT_REG;
assign lvb_channelCounter_024_1 = lvb_channelCounter_024_0_reg_NO_SHIFT_REG;
assign lvb_mul41_0 = lvb_mul41_0_reg_NO_SHIFT_REG;
assign lvb_mul41_1 = lvb_mul41_0_reg_NO_SHIFT_REG;
assign lvb_heightCounter_120_0 = lvb_heightCounter_120_0_reg_NO_SHIFT_REG;
assign lvb_heightCounter_120_1 = lvb_heightCounter_120_0_reg_NO_SHIFT_REG;
assign lvb_cmp14_0 = lvb_cmp14_0_reg_NO_SHIFT_REG;
assign lvb_cmp14_1 = lvb_cmp14_0_reg_NO_SHIFT_REG;
assign lvb_c0_exe1_0 = lvb_c0_exe1_0_reg_NO_SHIFT_REG;
assign lvb_c0_exe1_1 = lvb_c0_exe1_0_reg_NO_SHIFT_REG;
assign lvb_cmp29_not_0 = lvb_cmp29_not_0_reg_NO_SHIFT_REG;
assign lvb_cmp29_not_1 = lvb_cmp29_not_0_reg_NO_SHIFT_REG;
assign lvb_cmp29_not_not_0 = lvb_cmp29_not_not_0_reg_NO_SHIFT_REG;
assign lvb_cmp29_not_not_1 = lvb_cmp29_not_not_0_reg_NO_SHIFT_REG;
assign lvb_bb4_add52_0 = lvb_bb4_add52_0_reg_NO_SHIFT_REG;
assign lvb_bb4_add52_1 = lvb_bb4_add52_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0_0 = lvb_input_global_id_0_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0_1 = lvb_input_global_id_0_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1_0 = lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1_1 = lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2_0 = lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2_1 = lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_0 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_1 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign valid_out_0 = (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG);
assign valid_out_1 = ((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG);
assign combined_branch_stall_in_signal = ((((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_1) | ((~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_0));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		lvb__phi_decision_xor_0_reg_NO_SHIFT_REG <= 'x;
		lvb_ld__0_reg_NO_SHIFT_REG <= 'x;
		lvb_cmp1116_NEG_0_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision_xor45_or_0_reg_NO_SHIFT_REG <= 'x;
		lvb_ld__u3_0_reg_NO_SHIFT_REG <= 'x;
		lvb_channelCounter_024_0_reg_NO_SHIFT_REG <= 'x;
		lvb_mul41_0_reg_NO_SHIFT_REG <= 'x;
		lvb_heightCounter_120_0_reg_NO_SHIFT_REG <= 'x;
		lvb_cmp14_0_reg_NO_SHIFT_REG <= 'x;
		lvb_c0_exe1_0_reg_NO_SHIFT_REG <= 'x;
		lvb_cmp29_not_0_reg_NO_SHIFT_REG <= 'x;
		lvb_cmp29_not_not_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb4_add52_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_0_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= 'x;
		branch_compare_result_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_0_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb__phi_decision_xor_0_reg_NO_SHIFT_REG <= rcnode_491to492_rc1_ld__0_NO_SHIFT_REG[259];
			lvb_ld__0_reg_NO_SHIFT_REG <= rcnode_491to492_rc1_ld__0_NO_SHIFT_REG[31:0];
			lvb_cmp1116_NEG_0_reg_NO_SHIFT_REG <= rcnode_491to492_rc1_ld__0_NO_SHIFT_REG[257];
			lvb__phi_decision_xor45_or_0_reg_NO_SHIFT_REG <= rcnode_491to492_rc1_ld__0_NO_SHIFT_REG[325];
			lvb_ld__u3_0_reg_NO_SHIFT_REG <= rcnode_491to492_rc1_ld__0_NO_SHIFT_REG[357:326];
			lvb_channelCounter_024_0_reg_NO_SHIFT_REG <= rcnode_491to492_rc1_ld__0_NO_SHIFT_REG[292:261];
			lvb_mul41_0_reg_NO_SHIFT_REG <= rcnode_491to492_rc1_ld__0_NO_SHIFT_REG[95:64];
			lvb_heightCounter_120_0_reg_NO_SHIFT_REG <= rcnode_491to492_rc1_ld__0_NO_SHIFT_REG[324:293];
			lvb_cmp14_0_reg_NO_SHIFT_REG <= rcnode_491to492_rc1_ld__0_NO_SHIFT_REG[256];
			lvb_c0_exe1_0_reg_NO_SHIFT_REG <= rcnode_491to492_rc1_ld__0_NO_SHIFT_REG[255:224];
			lvb_cmp29_not_0_reg_NO_SHIFT_REG <= rcnode_491to492_rc1_ld__0_NO_SHIFT_REG[260];
			lvb_cmp29_not_not_0_reg_NO_SHIFT_REG <= rcnode_491to492_rc1_ld__0_NO_SHIFT_REG[258];
			lvb_bb4_add52_0_reg_NO_SHIFT_REG <= rcnode_491to492_rc1_ld__0_NO_SHIFT_REG[63:32];
			lvb_input_global_id_0_0_reg_NO_SHIFT_REG <= rcnode_491to492_rc1_ld__0_NO_SHIFT_REG[127:96];
			lvb_input_global_id_1_0_reg_NO_SHIFT_REG <= rcnode_491to492_rc1_ld__0_NO_SHIFT_REG[159:128];
			lvb_input_global_id_2_0_reg_NO_SHIFT_REG <= rcnode_491to492_rc1_ld__0_NO_SHIFT_REG[191:160];
			lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= rcnode_491to492_rc1_ld__0_NO_SHIFT_REG[223:192];
			branch_compare_result_NO_SHIFT_REG <= local_bb4_var_;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module paddingLayer_basic_block_5
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_global_size_1,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_0,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_1,
		input [63:0] 		input_wii_memcoalesce_param_bitcast_059,
		input 		valid_in,
		output 		stall_out,
		input 		input__phi_decision_xor,
		input [31:0] 		input_ld_,
		input 		input_cmp1116_NEG,
		input 		input__phi_decision_xor45_or,
		input [31:0] 		input_ld__u4,
		input [31:0] 		input_channelCounter_024,
		input [31:0] 		input_mul41,
		input [31:0] 		input_heightCounter_120,
		input [31:0] 		input_global_id_0,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out_0,
		input 		stall_in_0,
		output 		lvb__phi_decision_xor_0,
		output [31:0] 		lvb_ld__0,
		output 		lvb_cmp1116_NEG_0,
		output 		lvb__phi_decision_xor45_or_0,
		output [31:0] 		lvb_ld__u4_0,
		output [31:0] 		lvb_channelCounter_024_0,
		output [31:0] 		lvb_mul41_0,
		output [31:0] 		lvb_bb5_add56_0,
		output 		lvb_bb5_cmp22_RM63_0,
		output [31:0] 		lvb_input_global_id_0_0,
		output [31:0] 		lvb_input_global_id_1_0,
		output [31:0] 		lvb_input_global_id_2_0,
		output [31:0] 		lvb_input_acl_hw_wg_id_0,
		output 		valid_out_1,
		input 		stall_in_1,
		output 		lvb__phi_decision_xor_1,
		output [31:0] 		lvb_ld__1,
		output 		lvb_cmp1116_NEG_1,
		output 		lvb__phi_decision_xor45_or_1,
		output [31:0] 		lvb_ld__u4_1,
		output [31:0] 		lvb_channelCounter_024_1,
		output [31:0] 		lvb_mul41_1,
		output [31:0] 		lvb_bb5_add56_1,
		output 		lvb_bb5_cmp22_RM63_1,
		output [31:0] 		lvb_input_global_id_0_1,
		output [31:0] 		lvb_input_global_id_1_1,
		output [31:0] 		lvb_input_global_id_2_1,
		output [31:0] 		lvb_input_acl_hw_wg_id_1,
		input [31:0] 		workgroup_size,
		input 		start
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((valid_out_0 & valid_out_1) & ~((stall_in_0 | stall_in_1)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_node_stall_in_4;
 reg merge_node_valid_out_4_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__staging_reg_NO_SHIFT_REG;
 reg input_cmp1116_NEG_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor45_or_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__u4_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_024_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul41_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_heightCounter_120_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg local_lvm__phi_decision_xor_NO_SHIFT_REG;
 reg [31:0] local_lvm_ld__NO_SHIFT_REG;
 reg local_lvm_cmp1116_NEG_NO_SHIFT_REG;
 reg local_lvm__phi_decision_xor45_or_NO_SHIFT_REG;
 reg [31:0] local_lvm_ld__u4_NO_SHIFT_REG;
 reg [31:0] local_lvm_channelCounter_024_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul41_NO_SHIFT_REG;
 reg [31:0] local_lvm_heightCounter_120_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_0_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG) | (merge_node_stall_in_4 & merge_node_valid_out_4_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input__phi_decision_xor_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1116_NEG_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor45_or_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__u4_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_024_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul41_staging_reg_NO_SHIFT_REG <= 'x;
		input_heightCounter_120_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input__phi_decision_xor_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor;
				input_ld__staging_reg_NO_SHIFT_REG <= input_ld_;
				input_cmp1116_NEG_staging_reg_NO_SHIFT_REG <= input_cmp1116_NEG;
				input__phi_decision_xor45_or_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor45_or;
				input_ld__u4_staging_reg_NO_SHIFT_REG <= input_ld__u4;
				input_channelCounter_024_staging_reg_NO_SHIFT_REG <= input_channelCounter_024;
				input_mul41_staging_reg_NO_SHIFT_REG <= input_mul41;
				input_heightCounter_120_staging_reg_NO_SHIFT_REG <= input_heightCounter_120;
				input_global_id_0_staging_reg_NO_SHIFT_REG <= input_global_id_0;
				input_global_id_1_staging_reg_NO_SHIFT_REG <= input_global_id_1;
				input_global_id_2_staging_reg_NO_SHIFT_REG <= input_global_id_2;
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm__phi_decision_xor_NO_SHIFT_REG <= input__phi_decision_xor_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1116_NEG_NO_SHIFT_REG <= input_cmp1116_NEG_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor45_or_NO_SHIFT_REG <= input__phi_decision_xor45_or_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__u4_NO_SHIFT_REG <= input_ld__u4_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_024_NO_SHIFT_REG <= input_channelCounter_024_staging_reg_NO_SHIFT_REG;
					local_lvm_mul41_NO_SHIFT_REG <= input_mul41_staging_reg_NO_SHIFT_REG;
					local_lvm_heightCounter_120_NO_SHIFT_REG <= input_heightCounter_120_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm__phi_decision_xor_NO_SHIFT_REG <= input__phi_decision_xor;
					local_lvm_ld__NO_SHIFT_REG <= input_ld_;
					local_lvm_cmp1116_NEG_NO_SHIFT_REG <= input_cmp1116_NEG;
					local_lvm__phi_decision_xor45_or_NO_SHIFT_REG <= input__phi_decision_xor45_or;
					local_lvm_ld__u4_NO_SHIFT_REG <= input_ld__u4;
					local_lvm_channelCounter_024_NO_SHIFT_REG <= input_channelCounter_024;
					local_lvm_mul41_NO_SHIFT_REG <= input_mul41;
					local_lvm_heightCounter_120_NO_SHIFT_REG <= input_heightCounter_120;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_4_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_4))
			begin
				merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_add56_valid_out;
wire local_bb5_add56_stall_in;
wire local_bb5_add56_inputs_ready;
wire local_bb5_add56_stall_local;
wire [31:0] local_bb5_add56;

assign local_bb5_add56_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb5_add56 = (local_lvm_heightCounter_120_NO_SHIFT_REG + input_global_size_1);
assign local_bb5_add56_valid_out = local_bb5_add56_inputs_ready;
assign local_bb5_add56_stall_local = local_bb5_add56_stall_in;
assign merge_node_stall_in_0 = (|local_bb5_add56_stall_local);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_memcoalesce_param_extrValue_1_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_param_extrValue_1_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_param_extrValue_1_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_param_extrValue_1_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_param_extrValue_1_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_param_extrValue_1_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_memcoalesce_param_extrValue_1_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_memcoalesce_param_extrValue_1_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_memcoalesce_param_extrValue_1_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_memcoalesce_param_extrValue_1_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_memcoalesce_param_extrValue_1_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(),
	.data_out()
);

defparam rnode_1to2_memcoalesce_param_extrValue_1_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_memcoalesce_param_extrValue_1_0_reg_2_fifo.DATA_WIDTH = 0;
defparam rnode_1to2_memcoalesce_param_extrValue_1_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_memcoalesce_param_extrValue_1_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_memcoalesce_param_extrValue_1_0_reg_2_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_1_NO_SHIFT_REG;
assign merge_node_stall_in_1 = rnode_1to2_memcoalesce_param_extrValue_1_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_memcoalesce_param_extrValue_1_0_stall_in_reg_2_NO_SHIFT_REG = rnode_1to2_memcoalesce_param_extrValue_1_0_stall_in_NO_SHIFT_REG;
assign rnode_1to2_memcoalesce_param_extrValue_1_0_valid_out_NO_SHIFT_REG = rnode_1to2_memcoalesce_param_extrValue_1_0_valid_out_reg_2_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_input_global_id_1_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_input_global_id_1_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_input_global_id_1_0_NO_SHIFT_REG;
 logic rnode_1to2_input_global_id_1_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_input_global_id_1_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_input_global_id_1_1_NO_SHIFT_REG;
 logic rnode_1to2_input_global_id_1_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_input_global_id_1_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_input_global_id_1_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_input_global_id_1_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_input_global_id_1_0_stall_out_reg_2_NO_SHIFT_REG;
 reg rnode_1to2_input_global_id_1_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to2_input_global_id_1_0_consumed_1_NO_SHIFT_REG;
wire [194:0] rci_rcnode_1to3_rc3__phi_decision_xor_0_reg_1;

acl_data_fifo rnode_1to2_input_global_id_1_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_input_global_id_1_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_input_global_id_1_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_input_global_id_1_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_input_global_id_1_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_lvm_input_global_id_1_NO_SHIFT_REG),
	.data_out(rnode_1to2_input_global_id_1_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_input_global_id_1_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_input_global_id_1_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_input_global_id_1_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_input_global_id_1_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_input_global_id_1_0_reg_2_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_2_NO_SHIFT_REG;
assign merge_node_stall_in_2 = rnode_1to2_input_global_id_1_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_input_global_id_1_0_stall_in_0_reg_2_NO_SHIFT_REG = ((rnode_1to2_input_global_id_1_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to2_input_global_id_1_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to2_input_global_id_1_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to2_input_global_id_1_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to2_input_global_id_1_0_valid_out_0_NO_SHIFT_REG = (rnode_1to2_input_global_id_1_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_input_global_id_1_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_input_global_id_1_0_valid_out_1_NO_SHIFT_REG = (rnode_1to2_input_global_id_1_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_input_global_id_1_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to2_input_global_id_1_0_NO_SHIFT_REG = rnode_1to2_input_global_id_1_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_input_global_id_1_1_NO_SHIFT_REG = rnode_1to2_input_global_id_1_0_reg_2_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc3__phi_decision_xor_0_reg_1[0] = local_lvm__phi_decision_xor_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc3__phi_decision_xor_0_reg_1[32:1] = local_lvm_ld__NO_SHIFT_REG;
assign rci_rcnode_1to3_rc3__phi_decision_xor_0_reg_1[33] = local_lvm_cmp1116_NEG_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc3__phi_decision_xor_0_reg_1[34] = local_lvm__phi_decision_xor45_or_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc3__phi_decision_xor_0_reg_1[66:35] = local_lvm_ld__u4_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc3__phi_decision_xor_0_reg_1[98:67] = local_lvm_channelCounter_024_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc3__phi_decision_xor_0_reg_1[130:99] = local_lvm_mul41_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc3__phi_decision_xor_0_reg_1[162:131] = local_lvm_input_global_id_2_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc3__phi_decision_xor_0_reg_1[194:163] = local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to2_input_global_id_1_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_input_global_id_1_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to2_input_global_id_1_0_consumed_0_NO_SHIFT_REG <= (rnode_1to2_input_global_id_1_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_input_global_id_1_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to2_input_global_id_1_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to2_input_global_id_1_0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_input_global_id_1_0_consumed_1_NO_SHIFT_REG <= (rnode_1to2_input_global_id_1_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_input_global_id_1_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to2_input_global_id_1_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to2_input_global_id_1_0_stall_in_0_reg_2_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 2
//  * capacity = 2
 logic rcnode_1to3_rc3__phi_decision_xor_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to3_rc3__phi_decision_xor_0_stall_in_NO_SHIFT_REG;
 logic [194:0] rcnode_1to3_rc3__phi_decision_xor_0_NO_SHIFT_REG;
 logic rcnode_1to3_rc3__phi_decision_xor_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [194:0] rcnode_1to3_rc3__phi_decision_xor_0_reg_3_NO_SHIFT_REG;
 logic rcnode_1to3_rc3__phi_decision_xor_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rcnode_1to3_rc3__phi_decision_xor_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rcnode_1to3_rc3__phi_decision_xor_0_stall_out_reg_3_IP_NO_SHIFT_REG;
 logic rcnode_1to3_rc3__phi_decision_xor_0_stall_out_reg_3_NO_SHIFT_REG;
wire [63:0] rci_rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_reg_1;

acl_data_fifo rcnode_1to3_rc3__phi_decision_xor_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to3_rc3__phi_decision_xor_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to3_rc3__phi_decision_xor_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rcnode_1to3_rc3__phi_decision_xor_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rcnode_1to3_rc3__phi_decision_xor_0_stall_out_reg_3_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to3_rc3__phi_decision_xor_0_reg_1),
	.data_out(rcnode_1to3_rc3__phi_decision_xor_0_reg_3_NO_SHIFT_REG)
);

defparam rcnode_1to3_rc3__phi_decision_xor_0_reg_3_fifo.DEPTH = 3;
defparam rcnode_1to3_rc3__phi_decision_xor_0_reg_3_fifo.DATA_WIDTH = 195;
defparam rcnode_1to3_rc3__phi_decision_xor_0_reg_3_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to3_rc3__phi_decision_xor_0_reg_3_fifo.IMPL = "ll_reg";

assign rcnode_1to3_rc3__phi_decision_xor_0_reg_3_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_3_NO_SHIFT_REG;
assign rcnode_1to3_rc3__phi_decision_xor_0_stall_out_reg_3_NO_SHIFT_REG = (~(rcnode_1to3_rc3__phi_decision_xor_0_reg_3_inputs_ready_NO_SHIFT_REG) | rcnode_1to3_rc3__phi_decision_xor_0_stall_out_reg_3_IP_NO_SHIFT_REG);
assign merge_node_stall_in_3 = rcnode_1to3_rc3__phi_decision_xor_0_stall_out_reg_3_NO_SHIFT_REG;
assign rcnode_1to3_rc3__phi_decision_xor_0_NO_SHIFT_REG = rcnode_1to3_rc3__phi_decision_xor_0_reg_3_NO_SHIFT_REG;
assign rcnode_1to3_rc3__phi_decision_xor_0_stall_in_reg_3_NO_SHIFT_REG = rcnode_1to3_rc3__phi_decision_xor_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to3_rc3__phi_decision_xor_0_valid_out_NO_SHIFT_REG = rcnode_1to3_rc3__phi_decision_xor_0_valid_out_reg_3_NO_SHIFT_REG;
assign rci_rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_reg_1[31:0] = input_wii_memcoalesce_param_extrValue_0;
assign rci_rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_reg_1[63:32] = local_lvm_input_global_id_0_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_valid_out_0_NO_SHIFT_REG;
 logic rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_stall_in_0_NO_SHIFT_REG;
 logic [63:0] rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_NO_SHIFT_REG;
 logic rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_valid_out_1_NO_SHIFT_REG;
 logic rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_stall_in_1_NO_SHIFT_REG;
 logic [63:0] rcnode_1to2_rc4_memcoalesce_param_extrValue_0_1_NO_SHIFT_REG;
 logic rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_reg_2_NO_SHIFT_REG;
 logic rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_stall_out_reg_2_IP_NO_SHIFT_REG;
 logic rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_stall_out_reg_2_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_reg_1),
	.data_out(rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_reg_2_NO_SHIFT_REG)
);

defparam rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_reg_2_fifo.DEPTH = 1;
defparam rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_reg_2_fifo.DATA_WIDTH = 64;
defparam rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_reg_2_fifo.IMPL = "ll_reg";

assign rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_reg_2_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_4_NO_SHIFT_REG;
assign rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_stall_out_reg_2_NO_SHIFT_REG = (~(rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_reg_2_inputs_ready_NO_SHIFT_REG) | rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_stall_out_reg_2_IP_NO_SHIFT_REG);
assign merge_node_stall_in_4 = rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_stall_out_reg_2_NO_SHIFT_REG;
assign rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_stall_in_0_reg_2_NO_SHIFT_REG = (rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_stall_in_0_NO_SHIFT_REG | rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_stall_in_1_NO_SHIFT_REG);
assign rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_valid_out_0_NO_SHIFT_REG = rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_valid_out_0_reg_2_NO_SHIFT_REG;
assign rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_valid_out_1_NO_SHIFT_REG = rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_valid_out_0_reg_2_NO_SHIFT_REG;
assign rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_NO_SHIFT_REG = rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_reg_2_NO_SHIFT_REG;
assign rcnode_1to2_rc4_memcoalesce_param_extrValue_0_1_NO_SHIFT_REG = rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_reg_2_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb5_add56_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_bb5_add56_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb5_add56_0_NO_SHIFT_REG;
 logic rnode_1to2_bb5_add56_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_bb5_add56_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb5_add56_1_NO_SHIFT_REG;
 logic rnode_1to2_bb5_add56_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb5_add56_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb5_add56_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb5_add56_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb5_add56_0_stall_out_reg_2_NO_SHIFT_REG;
 reg rnode_1to2_bb5_add56_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to2_bb5_add56_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb5_add56_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb5_add56_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb5_add56_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb5_add56_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb5_add56_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb5_add56),
	.data_out(rnode_1to2_bb5_add56_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb5_add56_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb5_add56_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb5_add56_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb5_add56_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_bb5_add56_0_reg_2_inputs_ready_NO_SHIFT_REG = local_bb5_add56_valid_out;
assign local_bb5_add56_stall_in = rnode_1to2_bb5_add56_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb5_add56_0_stall_in_0_reg_2_NO_SHIFT_REG = ((rnode_1to2_bb5_add56_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to2_bb5_add56_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to2_bb5_add56_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to2_bb5_add56_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to2_bb5_add56_0_valid_out_0_NO_SHIFT_REG = (rnode_1to2_bb5_add56_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_bb5_add56_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_bb5_add56_0_valid_out_1_NO_SHIFT_REG = (rnode_1to2_bb5_add56_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_bb5_add56_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to2_bb5_add56_0_NO_SHIFT_REG = rnode_1to2_bb5_add56_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb5_add56_1_NO_SHIFT_REG = rnode_1to2_bb5_add56_0_reg_2_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to2_bb5_add56_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_bb5_add56_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to2_bb5_add56_0_consumed_0_NO_SHIFT_REG <= (rnode_1to2_bb5_add56_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_bb5_add56_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to2_bb5_add56_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to2_bb5_add56_0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_bb5_add56_0_consumed_1_NO_SHIFT_REG <= (rnode_1to2_bb5_add56_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_bb5_add56_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to2_bb5_add56_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to2_bb5_add56_0_stall_in_0_reg_2_NO_SHIFT_REG);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_cmp518_RM64_valid_out;
wire local_bb5_cmp518_RM64_stall_in;
wire local_bb5_cmp518_RM64_inputs_ready;
wire local_bb5_cmp518_RM64_stall_local;
wire local_bb5_cmp518_RM64;

assign local_bb5_cmp518_RM64_inputs_ready = (rnode_1to2_memcoalesce_param_extrValue_1_0_valid_out_NO_SHIFT_REG & rnode_1to2_input_global_id_1_0_valid_out_0_NO_SHIFT_REG);
assign local_bb5_cmp518_RM64 = ($signed(input_wii_memcoalesce_param_extrValue_1) > $signed(rnode_1to2_input_global_id_1_0_NO_SHIFT_REG));
assign local_bb5_cmp518_RM64_valid_out = local_bb5_cmp518_RM64_inputs_ready;
assign local_bb5_cmp518_RM64_stall_local = local_bb5_cmp518_RM64_stall_in;
assign rnode_1to2_memcoalesce_param_extrValue_1_0_stall_in_NO_SHIFT_REG = (local_bb5_cmp518_RM64_stall_local | ~(local_bb5_cmp518_RM64_inputs_ready));
assign rnode_1to2_input_global_id_1_0_stall_in_0_NO_SHIFT_REG = (local_bb5_cmp518_RM64_stall_local | ~(local_bb5_cmp518_RM64_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb5_cmp22_RM63_valid_out;
wire local_bb5_cmp22_RM63_stall_in;
wire local_bb5_cmp22_RM63_inputs_ready;
wire local_bb5_cmp22_RM63_stall_local;
wire local_bb5_cmp22_RM63;

assign local_bb5_cmp22_RM63_inputs_ready = rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_valid_out_0_NO_SHIFT_REG;
assign local_bb5_cmp22_RM63 = ($signed(input_wii_memcoalesce_param_extrValue_0) > $signed(rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_NO_SHIFT_REG[63:32]));
assign local_bb5_cmp22_RM63_valid_out = local_bb5_cmp22_RM63_inputs_ready;
assign local_bb5_cmp22_RM63_stall_local = local_bb5_cmp22_RM63_stall_in;
assign rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_stall_in_0_NO_SHIFT_REG = (|local_bb5_cmp22_RM63_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp5_valid_out;
wire local_bb5_cmp5_stall_in;
wire local_bb5_cmp5_inputs_ready;
wire local_bb5_cmp5_stall_local;
wire local_bb5_cmp5;
wire [96:0] rci_rcnode_2to3_rc0_bb5_cmp22_RM63_0_reg_2;

assign local_bb5_cmp5_inputs_ready = rnode_1to2_bb5_add56_0_valid_out_0_NO_SHIFT_REG;
assign local_bb5_cmp5 = ($signed(rnode_1to2_bb5_add56_0_NO_SHIFT_REG) < $signed(input_wii_memcoalesce_param_extrValue_1));
assign local_bb5_cmp5_valid_out = local_bb5_cmp5_inputs_ready;
assign local_bb5_cmp5_stall_local = local_bb5_cmp5_stall_in;
assign rnode_1to2_bb5_add56_0_stall_in_0_NO_SHIFT_REG = (|local_bb5_cmp5_stall_local);
assign rci_rcnode_2to3_rc0_bb5_cmp22_RM63_0_reg_2[0] = local_bb5_cmp22_RM63;
assign rci_rcnode_2to3_rc0_bb5_cmp22_RM63_0_reg_2[32:1] = rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_NO_SHIFT_REG[63:32];
assign rci_rcnode_2to3_rc0_bb5_cmp22_RM63_0_reg_2[64:33] = rnode_1to2_input_global_id_1_1_NO_SHIFT_REG;
assign rci_rcnode_2to3_rc0_bb5_cmp22_RM63_0_reg_2[96:65] = rnode_1to2_bb5_add56_1_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_2to3_rc0_bb5_cmp22_RM63_0_valid_out_0_NO_SHIFT_REG;
 logic rcnode_2to3_rc0_bb5_cmp22_RM63_0_stall_in_0_NO_SHIFT_REG;
 logic [96:0] rcnode_2to3_rc0_bb5_cmp22_RM63_0_NO_SHIFT_REG;
 logic rcnode_2to3_rc0_bb5_cmp22_RM63_0_valid_out_1_NO_SHIFT_REG;
 logic rcnode_2to3_rc0_bb5_cmp22_RM63_0_stall_in_1_NO_SHIFT_REG;
 logic [96:0] rcnode_2to3_rc0_bb5_cmp22_RM63_1_NO_SHIFT_REG;
 logic rcnode_2to3_rc0_bb5_cmp22_RM63_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [96:0] rcnode_2to3_rc0_bb5_cmp22_RM63_0_reg_3_NO_SHIFT_REG;
 logic rcnode_2to3_rc0_bb5_cmp22_RM63_0_valid_out_0_reg_3_NO_SHIFT_REG;
 logic rcnode_2to3_rc0_bb5_cmp22_RM63_0_stall_in_0_reg_3_NO_SHIFT_REG;
 logic rcnode_2to3_rc0_bb5_cmp22_RM63_0_stall_out_0_reg_3_IP_NO_SHIFT_REG;
 logic rcnode_2to3_rc0_bb5_cmp22_RM63_0_stall_out_0_reg_3_NO_SHIFT_REG;
wire [1:0] rci_rcnode_2to3_rc0_bb5_cmp518_RM64_0_reg_2;

acl_data_fifo rcnode_2to3_rc0_bb5_cmp22_RM63_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_2to3_rc0_bb5_cmp22_RM63_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_2to3_rc0_bb5_cmp22_RM63_0_stall_in_0_reg_3_NO_SHIFT_REG),
	.valid_out(rcnode_2to3_rc0_bb5_cmp22_RM63_0_valid_out_0_reg_3_NO_SHIFT_REG),
	.stall_out(rcnode_2to3_rc0_bb5_cmp22_RM63_0_stall_out_0_reg_3_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_2to3_rc0_bb5_cmp22_RM63_0_reg_2),
	.data_out(rcnode_2to3_rc0_bb5_cmp22_RM63_0_reg_3_NO_SHIFT_REG)
);

defparam rcnode_2to3_rc0_bb5_cmp22_RM63_0_reg_3_fifo.DEPTH = 1;
defparam rcnode_2to3_rc0_bb5_cmp22_RM63_0_reg_3_fifo.DATA_WIDTH = 97;
defparam rcnode_2to3_rc0_bb5_cmp22_RM63_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rcnode_2to3_rc0_bb5_cmp22_RM63_0_reg_3_fifo.IMPL = "ll_reg";

assign rcnode_2to3_rc0_bb5_cmp22_RM63_0_reg_3_inputs_ready_NO_SHIFT_REG = (local_bb5_cmp22_RM63_valid_out & rnode_1to2_input_global_id_1_0_valid_out_1_NO_SHIFT_REG & rnode_1to2_bb5_add56_0_valid_out_1_NO_SHIFT_REG & rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_valid_out_1_NO_SHIFT_REG);
assign rcnode_2to3_rc0_bb5_cmp22_RM63_0_stall_out_0_reg_3_NO_SHIFT_REG = (~(rcnode_2to3_rc0_bb5_cmp22_RM63_0_reg_3_inputs_ready_NO_SHIFT_REG) | rcnode_2to3_rc0_bb5_cmp22_RM63_0_stall_out_0_reg_3_IP_NO_SHIFT_REG);
assign local_bb5_cmp22_RM63_stall_in = rcnode_2to3_rc0_bb5_cmp22_RM63_0_stall_out_0_reg_3_NO_SHIFT_REG;
assign rnode_1to2_input_global_id_1_0_stall_in_1_NO_SHIFT_REG = rcnode_2to3_rc0_bb5_cmp22_RM63_0_stall_out_0_reg_3_NO_SHIFT_REG;
assign rnode_1to2_bb5_add56_0_stall_in_1_NO_SHIFT_REG = rcnode_2to3_rc0_bb5_cmp22_RM63_0_stall_out_0_reg_3_NO_SHIFT_REG;
assign rcnode_1to2_rc4_memcoalesce_param_extrValue_0_0_stall_in_1_NO_SHIFT_REG = rcnode_2to3_rc0_bb5_cmp22_RM63_0_stall_out_0_reg_3_NO_SHIFT_REG;
assign rcnode_2to3_rc0_bb5_cmp22_RM63_0_stall_in_0_reg_3_NO_SHIFT_REG = (rcnode_2to3_rc0_bb5_cmp22_RM63_0_stall_in_0_NO_SHIFT_REG | rcnode_2to3_rc0_bb5_cmp22_RM63_0_stall_in_1_NO_SHIFT_REG);
assign rcnode_2to3_rc0_bb5_cmp22_RM63_0_valid_out_0_NO_SHIFT_REG = rcnode_2to3_rc0_bb5_cmp22_RM63_0_valid_out_0_reg_3_NO_SHIFT_REG;
assign rcnode_2to3_rc0_bb5_cmp22_RM63_0_valid_out_1_NO_SHIFT_REG = rcnode_2to3_rc0_bb5_cmp22_RM63_0_valid_out_0_reg_3_NO_SHIFT_REG;
assign rcnode_2to3_rc0_bb5_cmp22_RM63_0_NO_SHIFT_REG = rcnode_2to3_rc0_bb5_cmp22_RM63_0_reg_3_NO_SHIFT_REG;
assign rcnode_2to3_rc0_bb5_cmp22_RM63_1_NO_SHIFT_REG = rcnode_2to3_rc0_bb5_cmp22_RM63_0_reg_3_NO_SHIFT_REG;
assign rci_rcnode_2to3_rc0_bb5_cmp518_RM64_0_reg_2[0] = local_bb5_cmp518_RM64;
assign rci_rcnode_2to3_rc0_bb5_cmp518_RM64_0_reg_2[1] = local_bb5_cmp5;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_2to3_rc0_bb5_cmp518_RM64_0_valid_out_0_NO_SHIFT_REG;
 logic rcnode_2to3_rc0_bb5_cmp518_RM64_0_stall_in_0_NO_SHIFT_REG;
 logic [1:0] rcnode_2to3_rc0_bb5_cmp518_RM64_0_NO_SHIFT_REG;
 logic rcnode_2to3_rc0_bb5_cmp518_RM64_0_valid_out_1_NO_SHIFT_REG;
 logic rcnode_2to3_rc0_bb5_cmp518_RM64_0_stall_in_1_NO_SHIFT_REG;
 logic [1:0] rcnode_2to3_rc0_bb5_cmp518_RM64_1_NO_SHIFT_REG;
 logic rcnode_2to3_rc0_bb5_cmp518_RM64_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [1:0] rcnode_2to3_rc0_bb5_cmp518_RM64_0_reg_3_NO_SHIFT_REG;
 logic rcnode_2to3_rc0_bb5_cmp518_RM64_0_valid_out_0_reg_3_NO_SHIFT_REG;
 logic rcnode_2to3_rc0_bb5_cmp518_RM64_0_stall_in_0_reg_3_NO_SHIFT_REG;
 logic rcnode_2to3_rc0_bb5_cmp518_RM64_0_stall_out_0_reg_3_IP_NO_SHIFT_REG;
 logic rcnode_2to3_rc0_bb5_cmp518_RM64_0_stall_out_0_reg_3_NO_SHIFT_REG;

acl_data_fifo rcnode_2to3_rc0_bb5_cmp518_RM64_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_2to3_rc0_bb5_cmp518_RM64_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_2to3_rc0_bb5_cmp518_RM64_0_stall_in_0_reg_3_NO_SHIFT_REG),
	.valid_out(rcnode_2to3_rc0_bb5_cmp518_RM64_0_valid_out_0_reg_3_NO_SHIFT_REG),
	.stall_out(rcnode_2to3_rc0_bb5_cmp518_RM64_0_stall_out_0_reg_3_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_2to3_rc0_bb5_cmp518_RM64_0_reg_2),
	.data_out(rcnode_2to3_rc0_bb5_cmp518_RM64_0_reg_3_NO_SHIFT_REG)
);

defparam rcnode_2to3_rc0_bb5_cmp518_RM64_0_reg_3_fifo.DEPTH = 1;
defparam rcnode_2to3_rc0_bb5_cmp518_RM64_0_reg_3_fifo.DATA_WIDTH = 2;
defparam rcnode_2to3_rc0_bb5_cmp518_RM64_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rcnode_2to3_rc0_bb5_cmp518_RM64_0_reg_3_fifo.IMPL = "ll_reg";

assign rcnode_2to3_rc0_bb5_cmp518_RM64_0_reg_3_inputs_ready_NO_SHIFT_REG = (local_bb5_cmp518_RM64_valid_out & local_bb5_cmp5_valid_out);
assign rcnode_2to3_rc0_bb5_cmp518_RM64_0_stall_out_0_reg_3_NO_SHIFT_REG = (~(rcnode_2to3_rc0_bb5_cmp518_RM64_0_reg_3_inputs_ready_NO_SHIFT_REG) | rcnode_2to3_rc0_bb5_cmp518_RM64_0_stall_out_0_reg_3_IP_NO_SHIFT_REG);
assign local_bb5_cmp518_RM64_stall_in = rcnode_2to3_rc0_bb5_cmp518_RM64_0_stall_out_0_reg_3_NO_SHIFT_REG;
assign local_bb5_cmp5_stall_in = rcnode_2to3_rc0_bb5_cmp518_RM64_0_stall_out_0_reg_3_NO_SHIFT_REG;
assign rcnode_2to3_rc0_bb5_cmp518_RM64_0_stall_in_0_reg_3_NO_SHIFT_REG = (rcnode_2to3_rc0_bb5_cmp518_RM64_0_stall_in_0_NO_SHIFT_REG | rcnode_2to3_rc0_bb5_cmp518_RM64_0_stall_in_1_NO_SHIFT_REG);
assign rcnode_2to3_rc0_bb5_cmp518_RM64_0_valid_out_0_NO_SHIFT_REG = rcnode_2to3_rc0_bb5_cmp518_RM64_0_valid_out_0_reg_3_NO_SHIFT_REG;
assign rcnode_2to3_rc0_bb5_cmp518_RM64_0_valid_out_1_NO_SHIFT_REG = rcnode_2to3_rc0_bb5_cmp518_RM64_0_valid_out_0_reg_3_NO_SHIFT_REG;
assign rcnode_2to3_rc0_bb5_cmp518_RM64_0_NO_SHIFT_REG = rcnode_2to3_rc0_bb5_cmp518_RM64_0_reg_3_NO_SHIFT_REG;
assign rcnode_2to3_rc0_bb5_cmp518_RM64_1_NO_SHIFT_REG = rcnode_2to3_rc0_bb5_cmp518_RM64_0_reg_3_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_var__stall_local;
wire local_bb5_var_;

assign local_bb5_var_ = (rcnode_2to3_rc0_bb5_cmp22_RM63_0_NO_SHIFT_REG[0] & rcnode_2to3_rc0_bb5_cmp518_RM64_0_NO_SHIFT_REG[0]);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u5_valid_out;
wire local_bb5_var__u5_stall_in;
wire local_bb5_var__u5_inputs_ready;
wire local_bb5_var__u5_stall_local;
wire local_bb5_var__u5;

assign local_bb5_var__u5_inputs_ready = (rcnode_2to3_rc0_bb5_cmp22_RM63_0_valid_out_0_NO_SHIFT_REG & rcnode_2to3_rc0_bb5_cmp518_RM64_0_valid_out_0_NO_SHIFT_REG & rcnode_2to3_rc0_bb5_cmp518_RM64_0_valid_out_1_NO_SHIFT_REG);
assign local_bb5_var__u5 = (local_bb5_var_ & rcnode_2to3_rc0_bb5_cmp518_RM64_0_NO_SHIFT_REG[1]);
assign local_bb5_var__u5_valid_out = local_bb5_var__u5_inputs_ready;
assign local_bb5_var__u5_stall_local = local_bb5_var__u5_stall_in;
assign rcnode_2to3_rc0_bb5_cmp22_RM63_0_stall_in_0_NO_SHIFT_REG = (local_bb5_var__u5_stall_local | ~(local_bb5_var__u5_inputs_ready));
assign rcnode_2to3_rc0_bb5_cmp518_RM64_0_stall_in_0_NO_SHIFT_REG = (local_bb5_var__u5_stall_local | ~(local_bb5_var__u5_inputs_ready));
assign rcnode_2to3_rc0_bb5_cmp518_RM64_0_stall_in_1_NO_SHIFT_REG = (local_bb5_var__u5_stall_local | ~(local_bb5_var__u5_inputs_ready));

// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_0_NO_SHIFT_REG;
 reg branch_compare_result_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg lvb__phi_decision_xor_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_ld__0_reg_NO_SHIFT_REG;
 reg lvb_cmp1116_NEG_0_reg_NO_SHIFT_REG;
 reg lvb__phi_decision_xor45_or_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_ld__u4_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_channelCounter_024_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul41_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb5_add56_0_reg_NO_SHIFT_REG;
 reg lvb_bb5_cmp22_RM63_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_0_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb5_var__u5_valid_out & rcnode_1to3_rc3__phi_decision_xor_0_valid_out_NO_SHIFT_REG & rcnode_2to3_rc0_bb5_cmp22_RM63_0_valid_out_1_NO_SHIFT_REG);
assign branch_var__output_regs_ready = (~(branch_node_valid_out_0_NO_SHIFT_REG) | (((branch_compare_result_NO_SHIFT_REG != 1'b1) & ~(stall_in_1)) | (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & ~(stall_in_0))));
assign local_bb5_var__u5_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_1to3_rc3__phi_decision_xor_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_2to3_rc0_bb5_cmp22_RM63_0_stall_in_1_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb__phi_decision_xor_0 = lvb__phi_decision_xor_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor_1 = lvb__phi_decision_xor_0_reg_NO_SHIFT_REG;
assign lvb_ld__0 = lvb_ld__0_reg_NO_SHIFT_REG;
assign lvb_ld__1 = lvb_ld__0_reg_NO_SHIFT_REG;
assign lvb_cmp1116_NEG_0 = lvb_cmp1116_NEG_0_reg_NO_SHIFT_REG;
assign lvb_cmp1116_NEG_1 = lvb_cmp1116_NEG_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor45_or_0 = lvb__phi_decision_xor45_or_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor45_or_1 = lvb__phi_decision_xor45_or_0_reg_NO_SHIFT_REG;
assign lvb_ld__u4_0 = lvb_ld__u4_0_reg_NO_SHIFT_REG;
assign lvb_ld__u4_1 = lvb_ld__u4_0_reg_NO_SHIFT_REG;
assign lvb_channelCounter_024_0 = lvb_channelCounter_024_0_reg_NO_SHIFT_REG;
assign lvb_channelCounter_024_1 = lvb_channelCounter_024_0_reg_NO_SHIFT_REG;
assign lvb_mul41_0 = lvb_mul41_0_reg_NO_SHIFT_REG;
assign lvb_mul41_1 = lvb_mul41_0_reg_NO_SHIFT_REG;
assign lvb_bb5_add56_0 = lvb_bb5_add56_0_reg_NO_SHIFT_REG;
assign lvb_bb5_add56_1 = lvb_bb5_add56_0_reg_NO_SHIFT_REG;
assign lvb_bb5_cmp22_RM63_0 = lvb_bb5_cmp22_RM63_0_reg_NO_SHIFT_REG;
assign lvb_bb5_cmp22_RM63_1 = lvb_bb5_cmp22_RM63_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0_0 = lvb_input_global_id_0_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0_1 = lvb_input_global_id_0_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1_0 = lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1_1 = lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2_0 = lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2_1 = lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_0 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_1 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign valid_out_0 = (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG);
assign valid_out_1 = ((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG);
assign combined_branch_stall_in_signal = ((((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_1) | ((~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_0));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		lvb__phi_decision_xor_0_reg_NO_SHIFT_REG <= 'x;
		lvb_ld__0_reg_NO_SHIFT_REG <= 'x;
		lvb_cmp1116_NEG_0_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision_xor45_or_0_reg_NO_SHIFT_REG <= 'x;
		lvb_ld__u4_0_reg_NO_SHIFT_REG <= 'x;
		lvb_channelCounter_024_0_reg_NO_SHIFT_REG <= 'x;
		lvb_mul41_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb5_add56_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb5_cmp22_RM63_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_0_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= 'x;
		branch_compare_result_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_0_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb__phi_decision_xor_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc3__phi_decision_xor_0_NO_SHIFT_REG[0];
			lvb_ld__0_reg_NO_SHIFT_REG <= rcnode_1to3_rc3__phi_decision_xor_0_NO_SHIFT_REG[32:1];
			lvb_cmp1116_NEG_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc3__phi_decision_xor_0_NO_SHIFT_REG[33];
			lvb__phi_decision_xor45_or_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc3__phi_decision_xor_0_NO_SHIFT_REG[34];
			lvb_ld__u4_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc3__phi_decision_xor_0_NO_SHIFT_REG[66:35];
			lvb_channelCounter_024_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc3__phi_decision_xor_0_NO_SHIFT_REG[98:67];
			lvb_mul41_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc3__phi_decision_xor_0_NO_SHIFT_REG[130:99];
			lvb_bb5_add56_0_reg_NO_SHIFT_REG <= rcnode_2to3_rc0_bb5_cmp22_RM63_0_NO_SHIFT_REG[96:65];
			lvb_bb5_cmp22_RM63_0_reg_NO_SHIFT_REG <= rcnode_2to3_rc0_bb5_cmp22_RM63_0_NO_SHIFT_REG[0];
			lvb_input_global_id_0_0_reg_NO_SHIFT_REG <= rcnode_2to3_rc0_bb5_cmp22_RM63_0_NO_SHIFT_REG[32:1];
			lvb_input_global_id_1_0_reg_NO_SHIFT_REG <= rcnode_2to3_rc0_bb5_cmp22_RM63_0_NO_SHIFT_REG[64:33];
			lvb_input_global_id_2_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc3__phi_decision_xor_0_NO_SHIFT_REG[162:131];
			lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc3__phi_decision_xor_0_NO_SHIFT_REG[194:163];
			branch_compare_result_NO_SHIFT_REG <= local_bb5_var__u5;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module paddingLayer_basic_block_6
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_global_size_0,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_0,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_1,
		input [63:0] 		input_wii_memcoalesce_param_bitcast_059,
		input 		valid_in,
		output 		stall_out,
		input 		input__phi_decision_xor,
		input [31:0] 		input_ld_,
		input 		input_cmp1116_NEG,
		input 		input__phi_decision_xor45_or,
		input [31:0] 		input_ld__u6,
		input [31:0] 		input_channelCounter_024,
		input 		input_cmp22_RM63,
		input [31:0] 		input_global_id_0,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out_0,
		input 		stall_in_0,
		output 		lvb__phi_decision_xor_0,
		output [31:0] 		lvb_ld__0,
		output 		lvb_cmp1116_NEG_0,
		output 		lvb__phi_decision_xor45_or_0,
		output [31:0] 		lvb_ld__u6_0,
		output [31:0] 		lvb_bb6_add61_0,
		output [31:0] 		lvb_input_global_id_0_0,
		output [31:0] 		lvb_input_global_id_1_0,
		output [31:0] 		lvb_input_global_id_2_0,
		output [31:0] 		lvb_input_acl_hw_wg_id_0,
		output 		valid_out_1,
		input 		stall_in_1,
		output 		lvb__phi_decision_xor_1,
		output [31:0] 		lvb_ld__1,
		output 		lvb_cmp1116_NEG_1,
		output 		lvb__phi_decision_xor45_or_1,
		output [31:0] 		lvb_ld__u6_1,
		output [31:0] 		lvb_bb6_add61_1,
		output [31:0] 		lvb_input_global_id_0_1,
		output [31:0] 		lvb_input_global_id_1_1,
		output [31:0] 		lvb_input_global_id_2_1,
		output [31:0] 		lvb_input_acl_hw_wg_id_1,
		input [31:0] 		workgroup_size,
		input 		start
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((valid_out_0 & valid_out_1) & ~((stall_in_0 | stall_in_1)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__staging_reg_NO_SHIFT_REG;
 reg input_cmp1116_NEG_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor45_or_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__u6_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_024_staging_reg_NO_SHIFT_REG;
 reg input_cmp22_RM63_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg local_lvm__phi_decision_xor_NO_SHIFT_REG;
 reg [31:0] local_lvm_ld__NO_SHIFT_REG;
 reg local_lvm_cmp1116_NEG_NO_SHIFT_REG;
 reg local_lvm__phi_decision_xor45_or_NO_SHIFT_REG;
 reg [31:0] local_lvm_ld__u6_NO_SHIFT_REG;
 reg [31:0] local_lvm_channelCounter_024_NO_SHIFT_REG;
 reg local_lvm_cmp22_RM63_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_0_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input__phi_decision_xor_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1116_NEG_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor45_or_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__u6_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_024_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp22_RM63_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input__phi_decision_xor_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor;
				input_ld__staging_reg_NO_SHIFT_REG <= input_ld_;
				input_cmp1116_NEG_staging_reg_NO_SHIFT_REG <= input_cmp1116_NEG;
				input__phi_decision_xor45_or_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor45_or;
				input_ld__u6_staging_reg_NO_SHIFT_REG <= input_ld__u6;
				input_channelCounter_024_staging_reg_NO_SHIFT_REG <= input_channelCounter_024;
				input_cmp22_RM63_staging_reg_NO_SHIFT_REG <= input_cmp22_RM63;
				input_global_id_0_staging_reg_NO_SHIFT_REG <= input_global_id_0;
				input_global_id_1_staging_reg_NO_SHIFT_REG <= input_global_id_1;
				input_global_id_2_staging_reg_NO_SHIFT_REG <= input_global_id_2;
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm__phi_decision_xor_NO_SHIFT_REG <= input__phi_decision_xor_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1116_NEG_NO_SHIFT_REG <= input_cmp1116_NEG_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor45_or_NO_SHIFT_REG <= input__phi_decision_xor45_or_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__u6_NO_SHIFT_REG <= input_ld__u6_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_024_NO_SHIFT_REG <= input_channelCounter_024_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp22_RM63_NO_SHIFT_REG <= input_cmp22_RM63_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm__phi_decision_xor_NO_SHIFT_REG <= input__phi_decision_xor;
					local_lvm_ld__NO_SHIFT_REG <= input_ld_;
					local_lvm_cmp1116_NEG_NO_SHIFT_REG <= input_cmp1116_NEG;
					local_lvm__phi_decision_xor45_or_NO_SHIFT_REG <= input__phi_decision_xor45_or;
					local_lvm_ld__u6_NO_SHIFT_REG <= input_ld__u6;
					local_lvm_channelCounter_024_NO_SHIFT_REG <= input_channelCounter_024;
					local_lvm_cmp22_RM63_NO_SHIFT_REG <= input_cmp22_RM63;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb6_add61_valid_out;
wire local_bb6_add61_stall_in;
wire local_bb6_add61_inputs_ready;
wire local_bb6_add61_stall_local;
wire [31:0] local_bb6_add61;

assign local_bb6_add61_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb6_add61 = (local_lvm_channelCounter_024_NO_SHIFT_REG + input_global_size_0);
assign local_bb6_add61_valid_out = local_bb6_add61_inputs_ready;
assign local_bb6_add61_stall_local = local_bb6_add61_stall_in;
assign merge_node_stall_in_0 = (|local_bb6_add61_stall_local);

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_1to3_cmp22_RM63_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to3_cmp22_RM63_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to3_cmp22_RM63_0_NO_SHIFT_REG;
 logic rnode_1to3_cmp22_RM63_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to3_cmp22_RM63_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_cmp22_RM63_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_cmp22_RM63_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_cmp22_RM63_0_stall_out_reg_3_NO_SHIFT_REG;
wire [194:0] rci_rcnode_1to3_rc2__phi_decision_xor_0_reg_1;

acl_data_fifo rnode_1to3_cmp22_RM63_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to3_cmp22_RM63_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to3_cmp22_RM63_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_1to3_cmp22_RM63_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_1to3_cmp22_RM63_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_lvm_cmp22_RM63_NO_SHIFT_REG),
	.data_out(rnode_1to3_cmp22_RM63_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_1to3_cmp22_RM63_0_reg_3_fifo.DEPTH = 3;
defparam rnode_1to3_cmp22_RM63_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_1to3_cmp22_RM63_0_reg_3_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to3_cmp22_RM63_0_reg_3_fifo.IMPL = "ll_reg";

assign rnode_1to3_cmp22_RM63_0_reg_3_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_1_NO_SHIFT_REG;
assign merge_node_stall_in_1 = rnode_1to3_cmp22_RM63_0_stall_out_reg_3_NO_SHIFT_REG;
assign rnode_1to3_cmp22_RM63_0_NO_SHIFT_REG = rnode_1to3_cmp22_RM63_0_reg_3_NO_SHIFT_REG;
assign rnode_1to3_cmp22_RM63_0_stall_in_reg_3_NO_SHIFT_REG = rnode_1to3_cmp22_RM63_0_stall_in_NO_SHIFT_REG;
assign rnode_1to3_cmp22_RM63_0_valid_out_NO_SHIFT_REG = rnode_1to3_cmp22_RM63_0_valid_out_reg_3_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc2__phi_decision_xor_0_reg_1[0] = local_lvm__phi_decision_xor_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc2__phi_decision_xor_0_reg_1[32:1] = local_lvm_ld__NO_SHIFT_REG;
assign rci_rcnode_1to3_rc2__phi_decision_xor_0_reg_1[33] = local_lvm_cmp1116_NEG_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc2__phi_decision_xor_0_reg_1[34] = local_lvm__phi_decision_xor45_or_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc2__phi_decision_xor_0_reg_1[66:35] = local_lvm_ld__u6_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc2__phi_decision_xor_0_reg_1[98:67] = local_lvm_input_global_id_0_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc2__phi_decision_xor_0_reg_1[130:99] = local_lvm_input_global_id_1_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc2__phi_decision_xor_0_reg_1[162:131] = local_lvm_input_global_id_2_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc2__phi_decision_xor_0_reg_1[194:163] = local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rcnode_1to3_rc2__phi_decision_xor_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to3_rc2__phi_decision_xor_0_stall_in_NO_SHIFT_REG;
 logic [194:0] rcnode_1to3_rc2__phi_decision_xor_0_NO_SHIFT_REG;
 logic rcnode_1to3_rc2__phi_decision_xor_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [194:0] rcnode_1to3_rc2__phi_decision_xor_0_reg_3_NO_SHIFT_REG;
 logic rcnode_1to3_rc2__phi_decision_xor_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rcnode_1to3_rc2__phi_decision_xor_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rcnode_1to3_rc2__phi_decision_xor_0_stall_out_reg_3_IP_NO_SHIFT_REG;
 logic rcnode_1to3_rc2__phi_decision_xor_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rcnode_1to3_rc2__phi_decision_xor_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to3_rc2__phi_decision_xor_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to3_rc2__phi_decision_xor_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rcnode_1to3_rc2__phi_decision_xor_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rcnode_1to3_rc2__phi_decision_xor_0_stall_out_reg_3_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to3_rc2__phi_decision_xor_0_reg_1),
	.data_out(rcnode_1to3_rc2__phi_decision_xor_0_reg_3_NO_SHIFT_REG)
);

defparam rcnode_1to3_rc2__phi_decision_xor_0_reg_3_fifo.DEPTH = 3;
defparam rcnode_1to3_rc2__phi_decision_xor_0_reg_3_fifo.DATA_WIDTH = 195;
defparam rcnode_1to3_rc2__phi_decision_xor_0_reg_3_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to3_rc2__phi_decision_xor_0_reg_3_fifo.IMPL = "ll_reg";

assign rcnode_1to3_rc2__phi_decision_xor_0_reg_3_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_2_NO_SHIFT_REG;
assign rcnode_1to3_rc2__phi_decision_xor_0_stall_out_reg_3_NO_SHIFT_REG = (~(rcnode_1to3_rc2__phi_decision_xor_0_reg_3_inputs_ready_NO_SHIFT_REG) | rcnode_1to3_rc2__phi_decision_xor_0_stall_out_reg_3_IP_NO_SHIFT_REG);
assign merge_node_stall_in_2 = rcnode_1to3_rc2__phi_decision_xor_0_stall_out_reg_3_NO_SHIFT_REG;
assign rcnode_1to3_rc2__phi_decision_xor_0_NO_SHIFT_REG = rcnode_1to3_rc2__phi_decision_xor_0_reg_3_NO_SHIFT_REG;
assign rcnode_1to3_rc2__phi_decision_xor_0_stall_in_reg_3_NO_SHIFT_REG = rcnode_1to3_rc2__phi_decision_xor_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to3_rc2__phi_decision_xor_0_valid_out_NO_SHIFT_REG = rcnode_1to3_rc2__phi_decision_xor_0_valid_out_reg_3_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb6_add61_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_bb6_add61_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb6_add61_0_NO_SHIFT_REG;
 logic rnode_1to2_bb6_add61_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_bb6_add61_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb6_add61_1_NO_SHIFT_REG;
 logic rnode_1to2_bb6_add61_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb6_add61_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb6_add61_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb6_add61_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb6_add61_0_stall_out_reg_2_NO_SHIFT_REG;
 reg rnode_1to2_bb6_add61_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to2_bb6_add61_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb6_add61_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb6_add61_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb6_add61_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb6_add61_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb6_add61_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb6_add61),
	.data_out(rnode_1to2_bb6_add61_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb6_add61_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb6_add61_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb6_add61_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb6_add61_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_bb6_add61_0_reg_2_inputs_ready_NO_SHIFT_REG = local_bb6_add61_valid_out;
assign local_bb6_add61_stall_in = rnode_1to2_bb6_add61_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb6_add61_0_stall_in_0_reg_2_NO_SHIFT_REG = ((rnode_1to2_bb6_add61_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to2_bb6_add61_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to2_bb6_add61_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to2_bb6_add61_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to2_bb6_add61_0_valid_out_0_NO_SHIFT_REG = (rnode_1to2_bb6_add61_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_bb6_add61_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_bb6_add61_0_valid_out_1_NO_SHIFT_REG = (rnode_1to2_bb6_add61_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_bb6_add61_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to2_bb6_add61_0_NO_SHIFT_REG = rnode_1to2_bb6_add61_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb6_add61_1_NO_SHIFT_REG = rnode_1to2_bb6_add61_0_reg_2_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to2_bb6_add61_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_bb6_add61_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to2_bb6_add61_0_consumed_0_NO_SHIFT_REG <= (rnode_1to2_bb6_add61_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_bb6_add61_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to2_bb6_add61_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to2_bb6_add61_0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_bb6_add61_0_consumed_1_NO_SHIFT_REG <= (rnode_1to2_bb6_add61_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_bb6_add61_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to2_bb6_add61_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to2_bb6_add61_0_stall_in_0_reg_2_NO_SHIFT_REG);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb6_cmp_valid_out;
wire local_bb6_cmp_stall_in;
wire local_bb6_cmp_inputs_ready;
wire local_bb6_cmp_stall_local;
wire local_bb6_cmp;

assign local_bb6_cmp_inputs_ready = rnode_1to2_bb6_add61_0_valid_out_0_NO_SHIFT_REG;
assign local_bb6_cmp = ($signed(rnode_1to2_bb6_add61_0_NO_SHIFT_REG) < $signed(input_wii_memcoalesce_param_extrValue_0));
assign local_bb6_cmp_valid_out = local_bb6_cmp_inputs_ready;
assign local_bb6_cmp_stall_local = local_bb6_cmp_stall_in;
assign rnode_1to2_bb6_add61_0_stall_in_0_NO_SHIFT_REG = (|local_bb6_cmp_stall_local);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb6_add61_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb6_add61_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb6_add61_0_NO_SHIFT_REG;
 logic rnode_2to3_bb6_add61_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb6_add61_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb6_add61_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb6_add61_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb6_add61_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb6_add61_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb6_add61_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb6_add61_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb6_add61_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb6_add61_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb6_add61_1_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb6_add61_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb6_add61_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb6_add61_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb6_add61_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb6_add61_0_reg_3_fifo.IMPL = "ll_reg";

assign rnode_2to3_bb6_add61_0_reg_3_inputs_ready_NO_SHIFT_REG = rnode_1to2_bb6_add61_0_valid_out_1_NO_SHIFT_REG;
assign rnode_1to2_bb6_add61_0_stall_in_1_NO_SHIFT_REG = rnode_2to3_bb6_add61_0_stall_out_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb6_add61_0_NO_SHIFT_REG = rnode_2to3_bb6_add61_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb6_add61_0_stall_in_reg_3_NO_SHIFT_REG = rnode_2to3_bb6_add61_0_stall_in_NO_SHIFT_REG;
assign rnode_2to3_bb6_add61_0_valid_out_NO_SHIFT_REG = rnode_2to3_bb6_add61_0_valid_out_reg_3_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb6_cmp_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb6_cmp_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to3_bb6_cmp_0_NO_SHIFT_REG;
 logic rnode_2to3_bb6_cmp_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to3_bb6_cmp_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb6_cmp_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb6_cmp_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb6_cmp_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb6_cmp_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb6_cmp_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb6_cmp_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb6_cmp_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb6_cmp_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb6_cmp),
	.data_out(rnode_2to3_bb6_cmp_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb6_cmp_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb6_cmp_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_2to3_bb6_cmp_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb6_cmp_0_reg_3_fifo.IMPL = "ll_reg";

assign rnode_2to3_bb6_cmp_0_reg_3_inputs_ready_NO_SHIFT_REG = local_bb6_cmp_valid_out;
assign local_bb6_cmp_stall_in = rnode_2to3_bb6_cmp_0_stall_out_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb6_cmp_0_NO_SHIFT_REG = rnode_2to3_bb6_cmp_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb6_cmp_0_stall_in_reg_3_NO_SHIFT_REG = rnode_2to3_bb6_cmp_0_stall_in_NO_SHIFT_REG;
assign rnode_2to3_bb6_cmp_0_valid_out_NO_SHIFT_REG = rnode_2to3_bb6_cmp_0_valid_out_reg_3_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_var__valid_out;
wire local_bb6_var__stall_in;
wire local_bb6_var__inputs_ready;
wire local_bb6_var__stall_local;
wire local_bb6_var_;

assign local_bb6_var__inputs_ready = (rnode_1to3_cmp22_RM63_0_valid_out_NO_SHIFT_REG & rnode_2to3_bb6_cmp_0_valid_out_NO_SHIFT_REG);
assign local_bb6_var_ = (rnode_1to3_cmp22_RM63_0_NO_SHIFT_REG & rnode_2to3_bb6_cmp_0_NO_SHIFT_REG);
assign local_bb6_var__valid_out = local_bb6_var__inputs_ready;
assign local_bb6_var__stall_local = local_bb6_var__stall_in;
assign rnode_1to3_cmp22_RM63_0_stall_in_NO_SHIFT_REG = (local_bb6_var__stall_local | ~(local_bb6_var__inputs_ready));
assign rnode_2to3_bb6_cmp_0_stall_in_NO_SHIFT_REG = (local_bb6_var__stall_local | ~(local_bb6_var__inputs_ready));

// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_0_NO_SHIFT_REG;
 reg branch_compare_result_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg lvb__phi_decision_xor_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_ld__0_reg_NO_SHIFT_REG;
 reg lvb_cmp1116_NEG_0_reg_NO_SHIFT_REG;
 reg lvb__phi_decision_xor45_or_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_ld__u6_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb6_add61_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_0_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb6_var__valid_out & rnode_2to3_bb6_add61_0_valid_out_NO_SHIFT_REG & rcnode_1to3_rc2__phi_decision_xor_0_valid_out_NO_SHIFT_REG);
assign branch_var__output_regs_ready = (~(branch_node_valid_out_0_NO_SHIFT_REG) | (((branch_compare_result_NO_SHIFT_REG != 1'b1) & ~(stall_in_1)) | (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & ~(stall_in_0))));
assign local_bb6_var__stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_2to3_bb6_add61_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_1to3_rc2__phi_decision_xor_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb__phi_decision_xor_0 = lvb__phi_decision_xor_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor_1 = lvb__phi_decision_xor_0_reg_NO_SHIFT_REG;
assign lvb_ld__0 = lvb_ld__0_reg_NO_SHIFT_REG;
assign lvb_ld__1 = lvb_ld__0_reg_NO_SHIFT_REG;
assign lvb_cmp1116_NEG_0 = lvb_cmp1116_NEG_0_reg_NO_SHIFT_REG;
assign lvb_cmp1116_NEG_1 = lvb_cmp1116_NEG_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor45_or_0 = lvb__phi_decision_xor45_or_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor45_or_1 = lvb__phi_decision_xor45_or_0_reg_NO_SHIFT_REG;
assign lvb_ld__u6_0 = lvb_ld__u6_0_reg_NO_SHIFT_REG;
assign lvb_ld__u6_1 = lvb_ld__u6_0_reg_NO_SHIFT_REG;
assign lvb_bb6_add61_0 = lvb_bb6_add61_0_reg_NO_SHIFT_REG;
assign lvb_bb6_add61_1 = lvb_bb6_add61_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0_0 = lvb_input_global_id_0_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0_1 = lvb_input_global_id_0_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1_0 = lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1_1 = lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2_0 = lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2_1 = lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_0 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_1 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign valid_out_0 = (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG);
assign valid_out_1 = ((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG);
assign combined_branch_stall_in_signal = ((((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_1) | ((~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_0));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		lvb__phi_decision_xor_0_reg_NO_SHIFT_REG <= 'x;
		lvb_ld__0_reg_NO_SHIFT_REG <= 'x;
		lvb_cmp1116_NEG_0_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision_xor45_or_0_reg_NO_SHIFT_REG <= 'x;
		lvb_ld__u6_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb6_add61_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_0_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= 'x;
		branch_compare_result_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_0_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb__phi_decision_xor_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc2__phi_decision_xor_0_NO_SHIFT_REG[0];
			lvb_ld__0_reg_NO_SHIFT_REG <= rcnode_1to3_rc2__phi_decision_xor_0_NO_SHIFT_REG[32:1];
			lvb_cmp1116_NEG_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc2__phi_decision_xor_0_NO_SHIFT_REG[33];
			lvb__phi_decision_xor45_or_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc2__phi_decision_xor_0_NO_SHIFT_REG[34];
			lvb_ld__u6_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc2__phi_decision_xor_0_NO_SHIFT_REG[66:35];
			lvb_bb6_add61_0_reg_NO_SHIFT_REG <= rnode_2to3_bb6_add61_0_NO_SHIFT_REG;
			lvb_input_global_id_0_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc2__phi_decision_xor_0_NO_SHIFT_REG[98:67];
			lvb_input_global_id_1_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc2__phi_decision_xor_0_NO_SHIFT_REG[130:99];
			lvb_input_global_id_2_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc2__phi_decision_xor_0_NO_SHIFT_REG[162:131];
			lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc2__phi_decision_xor_0_NO_SHIFT_REG[194:163];
			branch_compare_result_NO_SHIFT_REG <= local_bb6_var_;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module paddingLayer_basic_block_7
	(
		input 		clock,
		input 		resetn,
		input 		valid_in,
		output 		stall_out,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out,
		input 		stall_in,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		input 		start
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in;
 reg merge_node_valid_out_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = (|(merge_node_stall_in & merge_node_valid_out_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in))
			begin
				merge_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
wire branch_var__output_regs_ready;

assign branch_var__inputs_ready = merge_node_valid_out_NO_SHIFT_REG;
assign branch_var__output_regs_ready = ~(stall_in);
assign merge_node_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign valid_out = branch_var__inputs_ready;
assign lvb_input_acl_hw_wg_id = local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;

endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module paddingLayer_function
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_global_id_0,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		stall_out,
		input 		valid_in,
		output [31:0] 		output_0,
		output 		valid_out,
		input 		stall_in,
		input [31:0] 		workgroup_size,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_enable,
		input [511:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_readdata,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_readdatavalid,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_waitrequest,
		output [31:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_address,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_read,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_write,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_writeack,
		output [511:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_writedata,
		output [63:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_byteenable,
		output [4:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_burstcount,
		output 		avm_local_bb1_ld__enable,
		input [511:0] 		avm_local_bb1_ld__readdata,
		input 		avm_local_bb1_ld__readdatavalid,
		input 		avm_local_bb1_ld__waitrequest,
		output [31:0] 		avm_local_bb1_ld__address,
		output 		avm_local_bb1_ld__read,
		output 		avm_local_bb1_ld__write,
		input 		avm_local_bb1_ld__writeack,
		output [511:0] 		avm_local_bb1_ld__writedata,
		output [63:0] 		avm_local_bb1_ld__byteenable,
		output [4:0] 		avm_local_bb1_ld__burstcount,
		output 		avm_local_bb1_ld__u0_enable,
		input [511:0] 		avm_local_bb1_ld__u0_readdata,
		input 		avm_local_bb1_ld__u0_readdatavalid,
		input 		avm_local_bb1_ld__u0_waitrequest,
		output [31:0] 		avm_local_bb1_ld__u0_address,
		output 		avm_local_bb1_ld__u0_read,
		output 		avm_local_bb1_ld__u0_write,
		input 		avm_local_bb1_ld__u0_writeack,
		output [511:0] 		avm_local_bb1_ld__u0_writedata,
		output [63:0] 		avm_local_bb1_ld__u0_byteenable,
		output [4:0] 		avm_local_bb1_ld__u0_burstcount,
		output 		avm_local_bb4_ld_memcoalesce_param_load_060_enable,
		input [511:0] 		avm_local_bb4_ld_memcoalesce_param_load_060_readdata,
		input 		avm_local_bb4_ld_memcoalesce_param_load_060_readdatavalid,
		input 		avm_local_bb4_ld_memcoalesce_param_load_060_waitrequest,
		output [31:0] 		avm_local_bb4_ld_memcoalesce_param_load_060_address,
		output 		avm_local_bb4_ld_memcoalesce_param_load_060_read,
		output 		avm_local_bb4_ld_memcoalesce_param_load_060_write,
		input 		avm_local_bb4_ld_memcoalesce_param_load_060_writeack,
		output [511:0] 		avm_local_bb4_ld_memcoalesce_param_load_060_writedata,
		output [63:0] 		avm_local_bb4_ld_memcoalesce_param_load_060_byteenable,
		output [4:0] 		avm_local_bb4_ld_memcoalesce_param_load_060_burstcount,
		output 		avm_local_bb4_ld__enable,
		input [511:0] 		avm_local_bb4_ld__readdata,
		input 		avm_local_bb4_ld__readdatavalid,
		input 		avm_local_bb4_ld__waitrequest,
		output [31:0] 		avm_local_bb4_ld__address,
		output 		avm_local_bb4_ld__read,
		output 		avm_local_bb4_ld__write,
		input 		avm_local_bb4_ld__writeack,
		output [511:0] 		avm_local_bb4_ld__writedata,
		output [63:0] 		avm_local_bb4_ld__byteenable,
		output [4:0] 		avm_local_bb4_ld__burstcount,
		output 		avm_local_bb4_st__27_enable,
		input [511:0] 		avm_local_bb4_st__27_readdata,
		input 		avm_local_bb4_st__27_readdatavalid,
		input 		avm_local_bb4_st__27_waitrequest,
		output [31:0] 		avm_local_bb4_st__27_address,
		output 		avm_local_bb4_st__27_read,
		output 		avm_local_bb4_st__27_write,
		input 		avm_local_bb4_st__27_writeack,
		output [511:0] 		avm_local_bb4_st__27_writedata,
		output [63:0] 		avm_local_bb4_st__27_byteenable,
		output [4:0] 		avm_local_bb4_st__27_burstcount,
		input 		clock2x,
		input 		start,
		input [63:0] 		input_param,
		input [31:0] 		input_global_size_2,
		input [63:0] 		input_outputFeatureMap,
		input [63:0] 		input_inputFeatureMap,
		input [31:0] 		input_global_size_1,
		input [31:0] 		input_global_size_0,
		output reg 		has_a_write_pending,
		output reg 		has_a_lsu_active
	);


wire [31:0] cur_cycle;
wire bb_0_stall_out;
wire bb_0_valid_out;
wire [31:0] bb_0_lvb_bb0_memcoalesce_param_extrValue_0;
wire [31:0] bb_0_lvb_bb0_memcoalesce_param_extrValue_1;
wire [63:0] bb_0_lvb_bb0_outputWidth;
wire [63:0] bb_0_lvb_bb0_pad;
wire [63:0] bb_0_lvb_bb0_memcoalesce_param_bitcast_059;
wire [31:0] bb_0_lvb_input_global_id_0;
wire [31:0] bb_0_lvb_input_global_id_1;
wire [31:0] bb_0_lvb_input_global_id_2;
wire [31:0] bb_0_lvb_input_acl_hw_wg_id;
wire bb_0_local_bb0_ld_memcoalesce_param_load_0_active;
wire bb_1_stall_out;
wire bb_1_valid_out;
wire bb_1_lvb_bb1__phi_decision_xor;
wire [31:0] bb_1_lvb_bb1_ld_;
wire bb_1_lvb_bb1_cmp1116_NEG;
wire bb_1_lvb_bb1__phi_decision_xor45_or;
wire [31:0] bb_1_lvb_bb1_ld__u0;
wire [31:0] bb_1_lvb_input_global_id_0;
wire [31:0] bb_1_lvb_input_global_id_1;
wire [31:0] bb_1_lvb_input_global_id_2;
wire [31:0] bb_1_lvb_input_acl_hw_wg_id;
wire bb_1_local_bb1_ld__active;
wire bb_1_local_bb1_ld__u0_active;
wire bb_2_stall_out_0;
wire bb_2_stall_out_1;
wire bb_2_valid_out;
wire bb_2_lvb__phi_decision_xor;
wire [31:0] bb_2_lvb_ld_;
wire bb_2_lvb_cmp1116_NEG;
wire bb_2_lvb__phi_decision_xor45_or;
wire [31:0] bb_2_lvb_ld__u1;
wire [31:0] bb_2_lvb_channelCounter_024;
wire [31:0] bb_2_lvb_bb2_mul41;
wire [31:0] bb_2_lvb_input_global_id_0;
wire [31:0] bb_2_lvb_input_global_id_1;
wire [31:0] bb_2_lvb_input_global_id_2;
wire [31:0] bb_2_lvb_input_acl_hw_wg_id;
wire bb_3_stall_out_0;
wire bb_3_stall_out_1;
wire bb_3_valid_out;
wire bb_3_lvb__phi_decision_xor;
wire [31:0] bb_3_lvb_ld_;
wire bb_3_lvb_cmp1116_NEG;
wire bb_3_lvb__phi_decision_xor45_or;
wire [31:0] bb_3_lvb_ld__u2;
wire [31:0] bb_3_lvb_channelCounter_024;
wire [31:0] bb_3_lvb_mul41;
wire [31:0] bb_3_lvb_heightCounter_120;
wire bb_3_lvb_bb3_cmp14;
wire [31:0] bb_3_lvb_bb3_c0_exe1;
wire bb_3_lvb_bb3_cmp29_not;
wire bb_3_lvb_bb3_cmp29_not_not;
wire [31:0] bb_3_lvb_input_global_id_0;
wire [31:0] bb_3_lvb_input_global_id_1;
wire [31:0] bb_3_lvb_input_global_id_2;
wire [31:0] bb_3_lvb_input_acl_hw_wg_id;
wire bb_4_stall_out_0;
wire bb_4_stall_out_1;
wire bb_4_valid_out_0;
wire bb_4_lvb__phi_decision_xor_0;
wire [31:0] bb_4_lvb_ld__0;
wire bb_4_lvb_cmp1116_NEG_0;
wire bb_4_lvb__phi_decision_xor45_or_0;
wire [31:0] bb_4_lvb_ld__u3_0;
wire [31:0] bb_4_lvb_channelCounter_024_0;
wire [31:0] bb_4_lvb_mul41_0;
wire [31:0] bb_4_lvb_heightCounter_120_0;
wire bb_4_lvb_cmp14_0;
wire [31:0] bb_4_lvb_c0_exe1_0;
wire bb_4_lvb_cmp29_not_0;
wire bb_4_lvb_cmp29_not_not_0;
wire [31:0] bb_4_lvb_bb4_add52_0;
wire [31:0] bb_4_lvb_input_global_id_0_0;
wire [31:0] bb_4_lvb_input_global_id_1_0;
wire [31:0] bb_4_lvb_input_global_id_2_0;
wire [31:0] bb_4_lvb_input_acl_hw_wg_id_0;
wire bb_4_valid_out_1;
wire bb_4_lvb__phi_decision_xor_1;
wire [31:0] bb_4_lvb_ld__1;
wire bb_4_lvb_cmp1116_NEG_1;
wire bb_4_lvb__phi_decision_xor45_or_1;
wire [31:0] bb_4_lvb_ld__u3_1;
wire [31:0] bb_4_lvb_channelCounter_024_1;
wire [31:0] bb_4_lvb_mul41_1;
wire [31:0] bb_4_lvb_heightCounter_120_1;
wire bb_4_lvb_cmp14_1;
wire [31:0] bb_4_lvb_c0_exe1_1;
wire bb_4_lvb_cmp29_not_1;
wire bb_4_lvb_cmp29_not_not_1;
wire [31:0] bb_4_lvb_bb4_add52_1;
wire [31:0] bb_4_lvb_input_global_id_0_1;
wire [31:0] bb_4_lvb_input_global_id_1_1;
wire [31:0] bb_4_lvb_input_global_id_2_1;
wire [31:0] bb_4_lvb_input_acl_hw_wg_id_1;
wire bb_4_local_bb4_ld_memcoalesce_param_load_060_active;
wire bb_4_local_bb4_ld__active;
wire bb_4_local_bb4_st__27_active;
wire bb_5_stall_out;
wire bb_5_valid_out_0;
wire bb_5_lvb__phi_decision_xor_0;
wire [31:0] bb_5_lvb_ld__0;
wire bb_5_lvb_cmp1116_NEG_0;
wire bb_5_lvb__phi_decision_xor45_or_0;
wire [31:0] bb_5_lvb_ld__u4_0;
wire [31:0] bb_5_lvb_channelCounter_024_0;
wire [31:0] bb_5_lvb_mul41_0;
wire [31:0] bb_5_lvb_bb5_add56_0;
wire bb_5_lvb_bb5_cmp22_RM63_0;
wire [31:0] bb_5_lvb_input_global_id_0_0;
wire [31:0] bb_5_lvb_input_global_id_1_0;
wire [31:0] bb_5_lvb_input_global_id_2_0;
wire [31:0] bb_5_lvb_input_acl_hw_wg_id_0;
wire bb_5_valid_out_1;
wire bb_5_lvb__phi_decision_xor_1;
wire [31:0] bb_5_lvb_ld__1;
wire bb_5_lvb_cmp1116_NEG_1;
wire bb_5_lvb__phi_decision_xor45_or_1;
wire [31:0] bb_5_lvb_ld__u4_1;
wire [31:0] bb_5_lvb_channelCounter_024_1;
wire [31:0] bb_5_lvb_mul41_1;
wire [31:0] bb_5_lvb_bb5_add56_1;
wire bb_5_lvb_bb5_cmp22_RM63_1;
wire [31:0] bb_5_lvb_input_global_id_0_1;
wire [31:0] bb_5_lvb_input_global_id_1_1;
wire [31:0] bb_5_lvb_input_global_id_2_1;
wire [31:0] bb_5_lvb_input_acl_hw_wg_id_1;
wire bb_6_stall_out;
wire bb_6_valid_out_0;
wire bb_6_lvb__phi_decision_xor_0;
wire [31:0] bb_6_lvb_ld__0;
wire bb_6_lvb_cmp1116_NEG_0;
wire bb_6_lvb__phi_decision_xor45_or_0;
wire [31:0] bb_6_lvb_ld__u6_0;
wire [31:0] bb_6_lvb_bb6_add61_0;
wire [31:0] bb_6_lvb_input_global_id_0_0;
wire [31:0] bb_6_lvb_input_global_id_1_0;
wire [31:0] bb_6_lvb_input_global_id_2_0;
wire [31:0] bb_6_lvb_input_acl_hw_wg_id_0;
wire bb_6_valid_out_1;
wire bb_6_lvb__phi_decision_xor_1;
wire [31:0] bb_6_lvb_ld__1;
wire bb_6_lvb_cmp1116_NEG_1;
wire bb_6_lvb__phi_decision_xor45_or_1;
wire [31:0] bb_6_lvb_ld__u6_1;
wire [31:0] bb_6_lvb_bb6_add61_1;
wire [31:0] bb_6_lvb_input_global_id_0_1;
wire [31:0] bb_6_lvb_input_global_id_1_1;
wire [31:0] bb_6_lvb_input_global_id_2_1;
wire [31:0] bb_6_lvb_input_acl_hw_wg_id_1;
wire bb_7_stall_out;
wire bb_7_valid_out;
wire [31:0] bb_7_lvb_input_acl_hw_wg_id;
wire loop_limiter_0_stall_out;
wire loop_limiter_0_valid_out;
wire loop_limiter_1_stall_out;
wire loop_limiter_1_valid_out;
wire loop_limiter_2_stall_out;
wire loop_limiter_2_valid_out;
wire writes_pending;
wire [5:0] lsus_active;

acl_loop_limiter loop_limiter_0 (
	.clock(clock),
	.resetn(resetn),
	.i_valid(bb_1_valid_out),
	.i_stall(bb_2_stall_out_1),
	.i_valid_exit(bb_6_valid_out_1),
	.i_stall_exit(bb_7_stall_out),
	.o_valid(loop_limiter_0_valid_out),
	.o_stall(loop_limiter_0_stall_out)
);

defparam loop_limiter_0.ENTRY_WIDTH = 1;
defparam loop_limiter_0.EXIT_WIDTH = 1;
defparam loop_limiter_0.THRESHOLD = 511;

acl_loop_limiter loop_limiter_1 (
	.clock(clock),
	.resetn(resetn),
	.i_valid(bb_2_valid_out),
	.i_stall(bb_3_stall_out_1),
	.i_valid_exit(bb_5_valid_out_1),
	.i_stall_exit(bb_6_stall_out),
	.o_valid(loop_limiter_1_valid_out),
	.o_stall(loop_limiter_1_stall_out)
);

defparam loop_limiter_1.ENTRY_WIDTH = 1;
defparam loop_limiter_1.EXIT_WIDTH = 1;
defparam loop_limiter_1.THRESHOLD = 502;

acl_loop_limiter loop_limiter_2 (
	.clock(clock),
	.resetn(resetn),
	.i_valid(bb_3_valid_out),
	.i_stall(bb_4_stall_out_1),
	.i_valid_exit(bb_4_valid_out_0),
	.i_stall_exit(bb_5_stall_out),
	.o_valid(loop_limiter_2_valid_out),
	.o_stall(loop_limiter_2_stall_out)
);

defparam loop_limiter_2.ENTRY_WIDTH = 1;
defparam loop_limiter_2.EXIT_WIDTH = 1;
defparam loop_limiter_2.THRESHOLD = 493;

paddingLayer_basic_block_0 paddingLayer_basic_block_0 (
	.clock(clock),
	.resetn(resetn),
	.start(start),
	.input_param(input_param),
	.valid_in(valid_in),
	.stall_out(bb_0_stall_out),
	.input_global_id_0(input_global_id_0),
	.input_global_id_1(input_global_id_1),
	.input_global_id_2(input_global_id_2),
	.input_acl_hw_wg_id(input_acl_hw_wg_id),
	.valid_out(bb_0_valid_out),
	.stall_in(bb_1_stall_out),
	.lvb_bb0_memcoalesce_param_extrValue_0(bb_0_lvb_bb0_memcoalesce_param_extrValue_0),
	.lvb_bb0_memcoalesce_param_extrValue_1(bb_0_lvb_bb0_memcoalesce_param_extrValue_1),
	.lvb_bb0_outputWidth(bb_0_lvb_bb0_outputWidth),
	.lvb_bb0_pad(bb_0_lvb_bb0_pad),
	.lvb_bb0_memcoalesce_param_bitcast_059(bb_0_lvb_bb0_memcoalesce_param_bitcast_059),
	.lvb_input_global_id_0(bb_0_lvb_input_global_id_0),
	.lvb_input_global_id_1(bb_0_lvb_input_global_id_1),
	.lvb_input_global_id_2(bb_0_lvb_input_global_id_2),
	.lvb_input_acl_hw_wg_id(bb_0_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.avm_local_bb0_ld_memcoalesce_param_load_0_enable(avm_local_bb0_ld_memcoalesce_param_load_0_enable),
	.avm_local_bb0_ld_memcoalesce_param_load_0_readdata(avm_local_bb0_ld_memcoalesce_param_load_0_readdata),
	.avm_local_bb0_ld_memcoalesce_param_load_0_readdatavalid(avm_local_bb0_ld_memcoalesce_param_load_0_readdatavalid),
	.avm_local_bb0_ld_memcoalesce_param_load_0_waitrequest(avm_local_bb0_ld_memcoalesce_param_load_0_waitrequest),
	.avm_local_bb0_ld_memcoalesce_param_load_0_address(avm_local_bb0_ld_memcoalesce_param_load_0_address),
	.avm_local_bb0_ld_memcoalesce_param_load_0_read(avm_local_bb0_ld_memcoalesce_param_load_0_read),
	.avm_local_bb0_ld_memcoalesce_param_load_0_write(avm_local_bb0_ld_memcoalesce_param_load_0_write),
	.avm_local_bb0_ld_memcoalesce_param_load_0_writeack(avm_local_bb0_ld_memcoalesce_param_load_0_writeack),
	.avm_local_bb0_ld_memcoalesce_param_load_0_writedata(avm_local_bb0_ld_memcoalesce_param_load_0_writedata),
	.avm_local_bb0_ld_memcoalesce_param_load_0_byteenable(avm_local_bb0_ld_memcoalesce_param_load_0_byteenable),
	.avm_local_bb0_ld_memcoalesce_param_load_0_burstcount(avm_local_bb0_ld_memcoalesce_param_load_0_burstcount),
	.local_bb0_ld_memcoalesce_param_load_0_active(bb_0_local_bb0_ld_memcoalesce_param_load_0_active),
	.clock2x(clock2x)
);


paddingLayer_basic_block_1 paddingLayer_basic_block_1 (
	.clock(clock),
	.resetn(resetn),
	.input_wii_memcoalesce_param_extrValue_0(bb_0_lvb_bb0_memcoalesce_param_extrValue_0),
	.input_wii_memcoalesce_param_extrValue_1(bb_0_lvb_bb0_memcoalesce_param_extrValue_1),
	.input_wii_outputWidth(bb_0_lvb_bb0_outputWidth),
	.input_wii_pad(bb_0_lvb_bb0_pad),
	.input_wii_memcoalesce_param_bitcast_059(bb_0_lvb_bb0_memcoalesce_param_bitcast_059),
	.valid_in(bb_0_valid_out),
	.stall_out(bb_1_stall_out),
	.input_global_id_0(bb_0_lvb_input_global_id_0),
	.input_global_id_1(bb_0_lvb_input_global_id_1),
	.input_global_id_2(bb_0_lvb_input_global_id_2),
	.input_acl_hw_wg_id(bb_0_lvb_input_acl_hw_wg_id),
	.valid_out(bb_1_valid_out),
	.stall_in(loop_limiter_0_stall_out),
	.lvb_bb1__phi_decision_xor(bb_1_lvb_bb1__phi_decision_xor),
	.lvb_bb1_ld_(bb_1_lvb_bb1_ld_),
	.lvb_bb1_cmp1116_NEG(bb_1_lvb_bb1_cmp1116_NEG),
	.lvb_bb1__phi_decision_xor45_or(bb_1_lvb_bb1__phi_decision_xor45_or),
	.lvb_bb1_ld__u0(bb_1_lvb_bb1_ld__u0),
	.lvb_input_global_id_0(bb_1_lvb_input_global_id_0),
	.lvb_input_global_id_1(bb_1_lvb_input_global_id_1),
	.lvb_input_global_id_2(bb_1_lvb_input_global_id_2),
	.lvb_input_acl_hw_wg_id(bb_1_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.start(start),
	.avm_local_bb1_ld__enable(avm_local_bb1_ld__enable),
	.avm_local_bb1_ld__readdata(avm_local_bb1_ld__readdata),
	.avm_local_bb1_ld__readdatavalid(avm_local_bb1_ld__readdatavalid),
	.avm_local_bb1_ld__waitrequest(avm_local_bb1_ld__waitrequest),
	.avm_local_bb1_ld__address(avm_local_bb1_ld__address),
	.avm_local_bb1_ld__read(avm_local_bb1_ld__read),
	.avm_local_bb1_ld__write(avm_local_bb1_ld__write),
	.avm_local_bb1_ld__writeack(avm_local_bb1_ld__writeack),
	.avm_local_bb1_ld__writedata(avm_local_bb1_ld__writedata),
	.avm_local_bb1_ld__byteenable(avm_local_bb1_ld__byteenable),
	.avm_local_bb1_ld__burstcount(avm_local_bb1_ld__burstcount),
	.local_bb1_ld__active(bb_1_local_bb1_ld__active),
	.clock2x(clock2x),
	.avm_local_bb1_ld__u0_enable(avm_local_bb1_ld__u0_enable),
	.avm_local_bb1_ld__u0_readdata(avm_local_bb1_ld__u0_readdata),
	.avm_local_bb1_ld__u0_readdatavalid(avm_local_bb1_ld__u0_readdatavalid),
	.avm_local_bb1_ld__u0_waitrequest(avm_local_bb1_ld__u0_waitrequest),
	.avm_local_bb1_ld__u0_address(avm_local_bb1_ld__u0_address),
	.avm_local_bb1_ld__u0_read(avm_local_bb1_ld__u0_read),
	.avm_local_bb1_ld__u0_write(avm_local_bb1_ld__u0_write),
	.avm_local_bb1_ld__u0_writeack(avm_local_bb1_ld__u0_writeack),
	.avm_local_bb1_ld__u0_writedata(avm_local_bb1_ld__u0_writedata),
	.avm_local_bb1_ld__u0_byteenable(avm_local_bb1_ld__u0_byteenable),
	.avm_local_bb1_ld__u0_burstcount(avm_local_bb1_ld__u0_burstcount),
	.local_bb1_ld__u0_active(bb_1_local_bb1_ld__u0_active)
);


paddingLayer_basic_block_2 paddingLayer_basic_block_2 (
	.clock(clock),
	.resetn(resetn),
	.input_wii_memcoalesce_param_extrValue_0(bb_0_lvb_bb0_memcoalesce_param_extrValue_0),
	.input_wii_memcoalesce_param_extrValue_1(bb_0_lvb_bb0_memcoalesce_param_extrValue_1),
	.input_wii_memcoalesce_param_bitcast_059(bb_0_lvb_bb0_memcoalesce_param_bitcast_059),
	.valid_in_0(bb_6_valid_out_0),
	.stall_out_0(bb_2_stall_out_0),
	.input__phi_decision_xor_0(bb_6_lvb__phi_decision_xor_0),
	.input_ld__0(bb_6_lvb_ld__0),
	.input_cmp1116_NEG_0(bb_6_lvb_cmp1116_NEG_0),
	.input__phi_decision_xor45_or_0(bb_6_lvb__phi_decision_xor45_or_0),
	.input_ld__u1_0(bb_6_lvb_ld__u6_0),
	.input_channelCounter_024_0(bb_6_lvb_bb6_add61_0),
	.input_global_id_0_0(bb_6_lvb_input_global_id_0_0),
	.input_global_id_1_0(bb_6_lvb_input_global_id_1_0),
	.input_global_id_2_0(bb_6_lvb_input_global_id_2_0),
	.input_acl_hw_wg_id_0(bb_6_lvb_input_acl_hw_wg_id_0),
	.valid_in_1(loop_limiter_0_valid_out),
	.stall_out_1(bb_2_stall_out_1),
	.input__phi_decision_xor_1(bb_1_lvb_bb1__phi_decision_xor),
	.input_ld__1(bb_1_lvb_bb1_ld_),
	.input_cmp1116_NEG_1(bb_1_lvb_bb1_cmp1116_NEG),
	.input__phi_decision_xor45_or_1(bb_1_lvb_bb1__phi_decision_xor45_or),
	.input_ld__u1_1(bb_1_lvb_bb1_ld__u0),
	.input_channelCounter_024_1(bb_1_lvb_input_global_id_0),
	.input_global_id_0_1(bb_1_lvb_input_global_id_0),
	.input_global_id_1_1(bb_1_lvb_input_global_id_1),
	.input_global_id_2_1(bb_1_lvb_input_global_id_2),
	.input_acl_hw_wg_id_1(bb_1_lvb_input_acl_hw_wg_id),
	.valid_out(bb_2_valid_out),
	.stall_in(loop_limiter_1_stall_out),
	.lvb__phi_decision_xor(bb_2_lvb__phi_decision_xor),
	.lvb_ld_(bb_2_lvb_ld_),
	.lvb_cmp1116_NEG(bb_2_lvb_cmp1116_NEG),
	.lvb__phi_decision_xor45_or(bb_2_lvb__phi_decision_xor45_or),
	.lvb_ld__u1(bb_2_lvb_ld__u1),
	.lvb_channelCounter_024(bb_2_lvb_channelCounter_024),
	.lvb_bb2_mul41(bb_2_lvb_bb2_mul41),
	.lvb_input_global_id_0(bb_2_lvb_input_global_id_0),
	.lvb_input_global_id_1(bb_2_lvb_input_global_id_1),
	.lvb_input_global_id_2(bb_2_lvb_input_global_id_2),
	.lvb_input_acl_hw_wg_id(bb_2_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.start(start)
);


paddingLayer_basic_block_3 paddingLayer_basic_block_3 (
	.clock(clock),
	.resetn(resetn),
	.input_wii_memcoalesce_param_extrValue_0(bb_0_lvb_bb0_memcoalesce_param_extrValue_0),
	.input_wii_memcoalesce_param_extrValue_1(bb_0_lvb_bb0_memcoalesce_param_extrValue_1),
	.input_wii_memcoalesce_param_bitcast_059(bb_0_lvb_bb0_memcoalesce_param_bitcast_059),
	.valid_in_0(bb_5_valid_out_0),
	.stall_out_0(bb_3_stall_out_0),
	.input__phi_decision_xor_0(bb_5_lvb__phi_decision_xor_0),
	.input_ld__0(bb_5_lvb_ld__0),
	.input_cmp1116_NEG_0(bb_5_lvb_cmp1116_NEG_0),
	.input__phi_decision_xor45_or_0(bb_5_lvb__phi_decision_xor45_or_0),
	.input_ld__u2_0(bb_5_lvb_ld__u4_0),
	.input_channelCounter_024_0(bb_5_lvb_channelCounter_024_0),
	.input_mul41_0(bb_5_lvb_mul41_0),
	.input_heightCounter_120_0(bb_5_lvb_bb5_add56_0),
	.input_global_id_0_0(bb_5_lvb_input_global_id_0_0),
	.input_global_id_1_0(bb_5_lvb_input_global_id_1_0),
	.input_global_id_2_0(bb_5_lvb_input_global_id_2_0),
	.input_acl_hw_wg_id_0(bb_5_lvb_input_acl_hw_wg_id_0),
	.valid_in_1(loop_limiter_1_valid_out),
	.stall_out_1(bb_3_stall_out_1),
	.input__phi_decision_xor_1(bb_2_lvb__phi_decision_xor),
	.input_ld__1(bb_2_lvb_ld_),
	.input_cmp1116_NEG_1(bb_2_lvb_cmp1116_NEG),
	.input__phi_decision_xor45_or_1(bb_2_lvb__phi_decision_xor45_or),
	.input_ld__u2_1(bb_2_lvb_ld__u1),
	.input_channelCounter_024_1(bb_2_lvb_channelCounter_024),
	.input_mul41_1(bb_2_lvb_bb2_mul41),
	.input_heightCounter_120_1(bb_2_lvb_input_global_id_1),
	.input_global_id_0_1(bb_2_lvb_input_global_id_0),
	.input_global_id_1_1(bb_2_lvb_input_global_id_1),
	.input_global_id_2_1(bb_2_lvb_input_global_id_2),
	.input_acl_hw_wg_id_1(bb_2_lvb_input_acl_hw_wg_id),
	.valid_out(bb_3_valid_out),
	.stall_in(loop_limiter_2_stall_out),
	.lvb__phi_decision_xor(bb_3_lvb__phi_decision_xor),
	.lvb_ld_(bb_3_lvb_ld_),
	.lvb_cmp1116_NEG(bb_3_lvb_cmp1116_NEG),
	.lvb__phi_decision_xor45_or(bb_3_lvb__phi_decision_xor45_or),
	.lvb_ld__u2(bb_3_lvb_ld__u2),
	.lvb_channelCounter_024(bb_3_lvb_channelCounter_024),
	.lvb_mul41(bb_3_lvb_mul41),
	.lvb_heightCounter_120(bb_3_lvb_heightCounter_120),
	.lvb_bb3_cmp14(bb_3_lvb_bb3_cmp14),
	.lvb_bb3_c0_exe1(bb_3_lvb_bb3_c0_exe1),
	.lvb_bb3_cmp29_not(bb_3_lvb_bb3_cmp29_not),
	.lvb_bb3_cmp29_not_not(bb_3_lvb_bb3_cmp29_not_not),
	.lvb_input_global_id_0(bb_3_lvb_input_global_id_0),
	.lvb_input_global_id_1(bb_3_lvb_input_global_id_1),
	.lvb_input_global_id_2(bb_3_lvb_input_global_id_2),
	.lvb_input_acl_hw_wg_id(bb_3_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.start(start)
);


paddingLayer_basic_block_4 paddingLayer_basic_block_4 (
	.clock(clock),
	.resetn(resetn),
	.input_global_size_2(input_global_size_2),
	.input_outputFeatureMap(input_outputFeatureMap),
	.input_inputFeatureMap(input_inputFeatureMap),
	.input_wii_memcoalesce_param_extrValue_0(bb_0_lvb_bb0_memcoalesce_param_extrValue_0),
	.input_wii_memcoalesce_param_extrValue_1(bb_0_lvb_bb0_memcoalesce_param_extrValue_1),
	.input_wii_memcoalesce_param_bitcast_059(bb_0_lvb_bb0_memcoalesce_param_bitcast_059),
	.valid_in_0(bb_4_valid_out_1),
	.stall_out_0(bb_4_stall_out_0),
	.input__phi_decision_xor_0(bb_4_lvb__phi_decision_xor_1),
	.input_ld__0(bb_4_lvb_ld__1),
	.input_cmp1116_NEG_0(bb_4_lvb_cmp1116_NEG_1),
	.input__phi_decision_xor45_or_0(bb_4_lvb__phi_decision_xor45_or_1),
	.input_ld__u3_0(bb_4_lvb_ld__u3_1),
	.input_channelCounter_024_0(bb_4_lvb_channelCounter_024_1),
	.input_mul41_0(bb_4_lvb_mul41_1),
	.input_heightCounter_120_0(bb_4_lvb_heightCounter_120_1),
	.input_cmp14_0(bb_4_lvb_cmp14_1),
	.input_c0_exe1_0(bb_4_lvb_c0_exe1_1),
	.input_cmp29_not_0(bb_4_lvb_cmp29_not_1),
	.input_cmp29_not_not_0(bb_4_lvb_cmp29_not_not_1),
	.input_widthCounter_217_0(bb_4_lvb_bb4_add52_1),
	.input_global_id_0_0(bb_4_lvb_input_global_id_0_1),
	.input_global_id_1_0(bb_4_lvb_input_global_id_1_1),
	.input_global_id_2_0(bb_4_lvb_input_global_id_2_1),
	.input_acl_hw_wg_id_0(bb_4_lvb_input_acl_hw_wg_id_1),
	.valid_in_1(loop_limiter_2_valid_out),
	.stall_out_1(bb_4_stall_out_1),
	.input__phi_decision_xor_1(bb_3_lvb__phi_decision_xor),
	.input_ld__1(bb_3_lvb_ld_),
	.input_cmp1116_NEG_1(bb_3_lvb_cmp1116_NEG),
	.input__phi_decision_xor45_or_1(bb_3_lvb__phi_decision_xor45_or),
	.input_ld__u3_1(bb_3_lvb_ld__u2),
	.input_channelCounter_024_1(bb_3_lvb_channelCounter_024),
	.input_mul41_1(bb_3_lvb_mul41),
	.input_heightCounter_120_1(bb_3_lvb_heightCounter_120),
	.input_cmp14_1(bb_3_lvb_bb3_cmp14),
	.input_c0_exe1_1(bb_3_lvb_bb3_c0_exe1),
	.input_cmp29_not_1(bb_3_lvb_bb3_cmp29_not),
	.input_cmp29_not_not_1(bb_3_lvb_bb3_cmp29_not_not),
	.input_widthCounter_217_1(bb_3_lvb_input_global_id_2),
	.input_global_id_0_1(bb_3_lvb_input_global_id_0),
	.input_global_id_1_1(bb_3_lvb_input_global_id_1),
	.input_global_id_2_1(bb_3_lvb_input_global_id_2),
	.input_acl_hw_wg_id_1(bb_3_lvb_input_acl_hw_wg_id),
	.valid_out_0(bb_4_valid_out_0),
	.stall_in_0(bb_5_stall_out),
	.lvb__phi_decision_xor_0(bb_4_lvb__phi_decision_xor_0),
	.lvb_ld__0(bb_4_lvb_ld__0),
	.lvb_cmp1116_NEG_0(bb_4_lvb_cmp1116_NEG_0),
	.lvb__phi_decision_xor45_or_0(bb_4_lvb__phi_decision_xor45_or_0),
	.lvb_ld__u3_0(bb_4_lvb_ld__u3_0),
	.lvb_channelCounter_024_0(bb_4_lvb_channelCounter_024_0),
	.lvb_mul41_0(bb_4_lvb_mul41_0),
	.lvb_heightCounter_120_0(bb_4_lvb_heightCounter_120_0),
	.lvb_cmp14_0(bb_4_lvb_cmp14_0),
	.lvb_c0_exe1_0(bb_4_lvb_c0_exe1_0),
	.lvb_cmp29_not_0(bb_4_lvb_cmp29_not_0),
	.lvb_cmp29_not_not_0(bb_4_lvb_cmp29_not_not_0),
	.lvb_bb4_add52_0(bb_4_lvb_bb4_add52_0),
	.lvb_input_global_id_0_0(bb_4_lvb_input_global_id_0_0),
	.lvb_input_global_id_1_0(bb_4_lvb_input_global_id_1_0),
	.lvb_input_global_id_2_0(bb_4_lvb_input_global_id_2_0),
	.lvb_input_acl_hw_wg_id_0(bb_4_lvb_input_acl_hw_wg_id_0),
	.valid_out_1(bb_4_valid_out_1),
	.stall_in_1(bb_4_stall_out_0),
	.lvb__phi_decision_xor_1(bb_4_lvb__phi_decision_xor_1),
	.lvb_ld__1(bb_4_lvb_ld__1),
	.lvb_cmp1116_NEG_1(bb_4_lvb_cmp1116_NEG_1),
	.lvb__phi_decision_xor45_or_1(bb_4_lvb__phi_decision_xor45_or_1),
	.lvb_ld__u3_1(bb_4_lvb_ld__u3_1),
	.lvb_channelCounter_024_1(bb_4_lvb_channelCounter_024_1),
	.lvb_mul41_1(bb_4_lvb_mul41_1),
	.lvb_heightCounter_120_1(bb_4_lvb_heightCounter_120_1),
	.lvb_cmp14_1(bb_4_lvb_cmp14_1),
	.lvb_c0_exe1_1(bb_4_lvb_c0_exe1_1),
	.lvb_cmp29_not_1(bb_4_lvb_cmp29_not_1),
	.lvb_cmp29_not_not_1(bb_4_lvb_cmp29_not_not_1),
	.lvb_bb4_add52_1(bb_4_lvb_bb4_add52_1),
	.lvb_input_global_id_0_1(bb_4_lvb_input_global_id_0_1),
	.lvb_input_global_id_1_1(bb_4_lvb_input_global_id_1_1),
	.lvb_input_global_id_2_1(bb_4_lvb_input_global_id_2_1),
	.lvb_input_acl_hw_wg_id_1(bb_4_lvb_input_acl_hw_wg_id_1),
	.workgroup_size(workgroup_size),
	.start(start),
	.avm_local_bb4_ld_memcoalesce_param_load_060_enable(avm_local_bb4_ld_memcoalesce_param_load_060_enable),
	.avm_local_bb4_ld_memcoalesce_param_load_060_readdata(avm_local_bb4_ld_memcoalesce_param_load_060_readdata),
	.avm_local_bb4_ld_memcoalesce_param_load_060_readdatavalid(avm_local_bb4_ld_memcoalesce_param_load_060_readdatavalid),
	.avm_local_bb4_ld_memcoalesce_param_load_060_waitrequest(avm_local_bb4_ld_memcoalesce_param_load_060_waitrequest),
	.avm_local_bb4_ld_memcoalesce_param_load_060_address(avm_local_bb4_ld_memcoalesce_param_load_060_address),
	.avm_local_bb4_ld_memcoalesce_param_load_060_read(avm_local_bb4_ld_memcoalesce_param_load_060_read),
	.avm_local_bb4_ld_memcoalesce_param_load_060_write(avm_local_bb4_ld_memcoalesce_param_load_060_write),
	.avm_local_bb4_ld_memcoalesce_param_load_060_writeack(avm_local_bb4_ld_memcoalesce_param_load_060_writeack),
	.avm_local_bb4_ld_memcoalesce_param_load_060_writedata(avm_local_bb4_ld_memcoalesce_param_load_060_writedata),
	.avm_local_bb4_ld_memcoalesce_param_load_060_byteenable(avm_local_bb4_ld_memcoalesce_param_load_060_byteenable),
	.avm_local_bb4_ld_memcoalesce_param_load_060_burstcount(avm_local_bb4_ld_memcoalesce_param_load_060_burstcount),
	.local_bb4_ld_memcoalesce_param_load_060_active(bb_4_local_bb4_ld_memcoalesce_param_load_060_active),
	.clock2x(clock2x),
	.avm_local_bb4_ld__enable(avm_local_bb4_ld__enable),
	.avm_local_bb4_ld__readdata(avm_local_bb4_ld__readdata),
	.avm_local_bb4_ld__readdatavalid(avm_local_bb4_ld__readdatavalid),
	.avm_local_bb4_ld__waitrequest(avm_local_bb4_ld__waitrequest),
	.avm_local_bb4_ld__address(avm_local_bb4_ld__address),
	.avm_local_bb4_ld__read(avm_local_bb4_ld__read),
	.avm_local_bb4_ld__write(avm_local_bb4_ld__write),
	.avm_local_bb4_ld__writeack(avm_local_bb4_ld__writeack),
	.avm_local_bb4_ld__writedata(avm_local_bb4_ld__writedata),
	.avm_local_bb4_ld__byteenable(avm_local_bb4_ld__byteenable),
	.avm_local_bb4_ld__burstcount(avm_local_bb4_ld__burstcount),
	.local_bb4_ld__active(bb_4_local_bb4_ld__active),
	.avm_local_bb4_st__27_enable(avm_local_bb4_st__27_enable),
	.avm_local_bb4_st__27_readdata(avm_local_bb4_st__27_readdata),
	.avm_local_bb4_st__27_readdatavalid(avm_local_bb4_st__27_readdatavalid),
	.avm_local_bb4_st__27_waitrequest(avm_local_bb4_st__27_waitrequest),
	.avm_local_bb4_st__27_address(avm_local_bb4_st__27_address),
	.avm_local_bb4_st__27_read(avm_local_bb4_st__27_read),
	.avm_local_bb4_st__27_write(avm_local_bb4_st__27_write),
	.avm_local_bb4_st__27_writeack(avm_local_bb4_st__27_writeack),
	.avm_local_bb4_st__27_writedata(avm_local_bb4_st__27_writedata),
	.avm_local_bb4_st__27_byteenable(avm_local_bb4_st__27_byteenable),
	.avm_local_bb4_st__27_burstcount(avm_local_bb4_st__27_burstcount),
	.local_bb4_st__27_active(bb_4_local_bb4_st__27_active)
);


paddingLayer_basic_block_5 paddingLayer_basic_block_5 (
	.clock(clock),
	.resetn(resetn),
	.input_global_size_1(input_global_size_1),
	.input_wii_memcoalesce_param_extrValue_0(bb_0_lvb_bb0_memcoalesce_param_extrValue_0),
	.input_wii_memcoalesce_param_extrValue_1(bb_0_lvb_bb0_memcoalesce_param_extrValue_1),
	.input_wii_memcoalesce_param_bitcast_059(bb_0_lvb_bb0_memcoalesce_param_bitcast_059),
	.valid_in(bb_4_valid_out_0),
	.stall_out(bb_5_stall_out),
	.input__phi_decision_xor(bb_4_lvb__phi_decision_xor_0),
	.input_ld_(bb_4_lvb_ld__0),
	.input_cmp1116_NEG(bb_4_lvb_cmp1116_NEG_0),
	.input__phi_decision_xor45_or(bb_4_lvb__phi_decision_xor45_or_0),
	.input_ld__u4(bb_4_lvb_ld__u3_0),
	.input_channelCounter_024(bb_4_lvb_channelCounter_024_0),
	.input_mul41(bb_4_lvb_mul41_0),
	.input_heightCounter_120(bb_4_lvb_heightCounter_120_0),
	.input_global_id_0(bb_4_lvb_input_global_id_0_0),
	.input_global_id_1(bb_4_lvb_input_global_id_1_0),
	.input_global_id_2(bb_4_lvb_input_global_id_2_0),
	.input_acl_hw_wg_id(bb_4_lvb_input_acl_hw_wg_id_0),
	.valid_out_0(bb_5_valid_out_0),
	.stall_in_0(bb_3_stall_out_0),
	.lvb__phi_decision_xor_0(bb_5_lvb__phi_decision_xor_0),
	.lvb_ld__0(bb_5_lvb_ld__0),
	.lvb_cmp1116_NEG_0(bb_5_lvb_cmp1116_NEG_0),
	.lvb__phi_decision_xor45_or_0(bb_5_lvb__phi_decision_xor45_or_0),
	.lvb_ld__u4_0(bb_5_lvb_ld__u4_0),
	.lvb_channelCounter_024_0(bb_5_lvb_channelCounter_024_0),
	.lvb_mul41_0(bb_5_lvb_mul41_0),
	.lvb_bb5_add56_0(bb_5_lvb_bb5_add56_0),
	.lvb_bb5_cmp22_RM63_0(bb_5_lvb_bb5_cmp22_RM63_0),
	.lvb_input_global_id_0_0(bb_5_lvb_input_global_id_0_0),
	.lvb_input_global_id_1_0(bb_5_lvb_input_global_id_1_0),
	.lvb_input_global_id_2_0(bb_5_lvb_input_global_id_2_0),
	.lvb_input_acl_hw_wg_id_0(bb_5_lvb_input_acl_hw_wg_id_0),
	.valid_out_1(bb_5_valid_out_1),
	.stall_in_1(bb_6_stall_out),
	.lvb__phi_decision_xor_1(bb_5_lvb__phi_decision_xor_1),
	.lvb_ld__1(bb_5_lvb_ld__1),
	.lvb_cmp1116_NEG_1(bb_5_lvb_cmp1116_NEG_1),
	.lvb__phi_decision_xor45_or_1(bb_5_lvb__phi_decision_xor45_or_1),
	.lvb_ld__u4_1(bb_5_lvb_ld__u4_1),
	.lvb_channelCounter_024_1(bb_5_lvb_channelCounter_024_1),
	.lvb_mul41_1(bb_5_lvb_mul41_1),
	.lvb_bb5_add56_1(bb_5_lvb_bb5_add56_1),
	.lvb_bb5_cmp22_RM63_1(bb_5_lvb_bb5_cmp22_RM63_1),
	.lvb_input_global_id_0_1(bb_5_lvb_input_global_id_0_1),
	.lvb_input_global_id_1_1(bb_5_lvb_input_global_id_1_1),
	.lvb_input_global_id_2_1(bb_5_lvb_input_global_id_2_1),
	.lvb_input_acl_hw_wg_id_1(bb_5_lvb_input_acl_hw_wg_id_1),
	.workgroup_size(workgroup_size),
	.start(start)
);


paddingLayer_basic_block_6 paddingLayer_basic_block_6 (
	.clock(clock),
	.resetn(resetn),
	.input_global_size_0(input_global_size_0),
	.input_wii_memcoalesce_param_extrValue_0(bb_0_lvb_bb0_memcoalesce_param_extrValue_0),
	.input_wii_memcoalesce_param_extrValue_1(bb_0_lvb_bb0_memcoalesce_param_extrValue_1),
	.input_wii_memcoalesce_param_bitcast_059(bb_0_lvb_bb0_memcoalesce_param_bitcast_059),
	.valid_in(bb_5_valid_out_1),
	.stall_out(bb_6_stall_out),
	.input__phi_decision_xor(bb_5_lvb__phi_decision_xor_1),
	.input_ld_(bb_5_lvb_ld__1),
	.input_cmp1116_NEG(bb_5_lvb_cmp1116_NEG_1),
	.input__phi_decision_xor45_or(bb_5_lvb__phi_decision_xor45_or_1),
	.input_ld__u6(bb_5_lvb_ld__u4_1),
	.input_channelCounter_024(bb_5_lvb_channelCounter_024_1),
	.input_cmp22_RM63(bb_5_lvb_bb5_cmp22_RM63_1),
	.input_global_id_0(bb_5_lvb_input_global_id_0_1),
	.input_global_id_1(bb_5_lvb_input_global_id_1_1),
	.input_global_id_2(bb_5_lvb_input_global_id_2_1),
	.input_acl_hw_wg_id(bb_5_lvb_input_acl_hw_wg_id_1),
	.valid_out_0(bb_6_valid_out_0),
	.stall_in_0(bb_2_stall_out_0),
	.lvb__phi_decision_xor_0(bb_6_lvb__phi_decision_xor_0),
	.lvb_ld__0(bb_6_lvb_ld__0),
	.lvb_cmp1116_NEG_0(bb_6_lvb_cmp1116_NEG_0),
	.lvb__phi_decision_xor45_or_0(bb_6_lvb__phi_decision_xor45_or_0),
	.lvb_ld__u6_0(bb_6_lvb_ld__u6_0),
	.lvb_bb6_add61_0(bb_6_lvb_bb6_add61_0),
	.lvb_input_global_id_0_0(bb_6_lvb_input_global_id_0_0),
	.lvb_input_global_id_1_0(bb_6_lvb_input_global_id_1_0),
	.lvb_input_global_id_2_0(bb_6_lvb_input_global_id_2_0),
	.lvb_input_acl_hw_wg_id_0(bb_6_lvb_input_acl_hw_wg_id_0),
	.valid_out_1(bb_6_valid_out_1),
	.stall_in_1(bb_7_stall_out),
	.lvb__phi_decision_xor_1(bb_6_lvb__phi_decision_xor_1),
	.lvb_ld__1(bb_6_lvb_ld__1),
	.lvb_cmp1116_NEG_1(bb_6_lvb_cmp1116_NEG_1),
	.lvb__phi_decision_xor45_or_1(bb_6_lvb__phi_decision_xor45_or_1),
	.lvb_ld__u6_1(bb_6_lvb_ld__u6_1),
	.lvb_bb6_add61_1(bb_6_lvb_bb6_add61_1),
	.lvb_input_global_id_0_1(bb_6_lvb_input_global_id_0_1),
	.lvb_input_global_id_1_1(bb_6_lvb_input_global_id_1_1),
	.lvb_input_global_id_2_1(bb_6_lvb_input_global_id_2_1),
	.lvb_input_acl_hw_wg_id_1(bb_6_lvb_input_acl_hw_wg_id_1),
	.workgroup_size(workgroup_size),
	.start(start)
);


paddingLayer_basic_block_7 paddingLayer_basic_block_7 (
	.clock(clock),
	.resetn(resetn),
	.valid_in(bb_6_valid_out_1),
	.stall_out(bb_7_stall_out),
	.input_acl_hw_wg_id(bb_6_lvb_input_acl_hw_wg_id_1),
	.valid_out(bb_7_valid_out),
	.stall_in(stall_in),
	.lvb_input_acl_hw_wg_id(bb_7_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.start(start)
);


paddingLayer_sys_cycle_time system_cycle_time_module (
	.clock(clock),
	.resetn(resetn),
	.cur_cycle(cur_cycle)
);


assign valid_out = bb_7_valid_out;
assign output_0 = bb_7_lvb_input_acl_hw_wg_id;
assign stall_out = bb_0_stall_out;
assign writes_pending = bb_4_local_bb4_st__27_active;
assign lsus_active[0] = bb_0_local_bb0_ld_memcoalesce_param_load_0_active;
assign lsus_active[1] = bb_1_local_bb1_ld__active;
assign lsus_active[2] = bb_1_local_bb1_ld__u0_active;
assign lsus_active[3] = bb_4_local_bb4_ld_memcoalesce_param_load_060_active;
assign lsus_active[4] = bb_4_local_bb4_ld__active;
assign lsus_active[5] = bb_4_local_bb4_st__27_active;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		has_a_write_pending <= 1'b0;
		has_a_lsu_active <= 1'b0;
	end
	else
	begin
		has_a_write_pending <= (|writes_pending);
		has_a_lsu_active <= (|lsus_active);
	end
end

endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module paddingLayer_function_cra_slave
	(
		input 		clock,
		input 		resetn,
		output reg [255:0] 		kernel_arguments,
		output reg 		start,
		input 		finish,
		output reg [31:0] 		global_size_0,
		output reg [31:0] 		global_size_1,
		output reg [31:0] 		global_size_2,
		output reg [31:0] 		num_groups_0,
		output reg [31:0] 		num_groups_1,
		output reg [31:0] 		num_groups_2,
		output reg [31:0] 		local_size_0,
		output reg [31:0] 		local_size_1,
		output reg [31:0] 		local_size_2,
		output reg [31:0] 		global_offset_0,
		output reg [31:0] 		global_offset_1,
		output reg [31:0] 		global_offset_2,
		output reg [31:0] 		work_dim,
		output reg [31:0] 		workgroup_size,
		input 		has_a_lsu_active,
		input 		has_a_write_pending,
		input 		valid_in,
		input 		avs_cra_enable,
		input 		avs_cra_read,
		input 		avs_cra_write,
		input [4:0] 		avs_cra_address,
		input [63:0] 		avs_cra_writedata,
		input [7:0] 		avs_cra_byteenable,
		output reg [63:0] 		avs_cra_readdata,
		output reg 		avs_cra_readdatavalid,
		output 		cra_irq
	);


// This section of the wrapper implements an Avalon Slave Interface used to configure a kernel invocation.
// The few words words contain the status and the workgroup size registers.
// The remaining addressable space is reserved for kernel arguments.
 reg started_NO_SHIFT_REG;
 reg [31:0] status_NO_SHIFT_REG;
 reg [63:0] profile_data_NO_SHIFT_REG;
 reg [31:0] profile_ctrl_NO_SHIFT_REG;
 reg [63:0] profile_start_cycle_NO_SHIFT_REG;
 reg [63:0] profile_stop_cycle_NO_SHIFT_REG;
 reg [63:0] cra_readdata_st1_NO_SHIFT_REG;
 reg [4:0] cra_addr_st1_NO_SHIFT_REG;
 reg cra_read_st1_NO_SHIFT_REG;
wire [63:0] bitenable;

assign bitenable[7:0] = (avs_cra_byteenable[0] ? 8'hFF : 8'h0);
assign bitenable[15:8] = (avs_cra_byteenable[1] ? 8'hFF : 8'h0);
assign bitenable[23:16] = (avs_cra_byteenable[2] ? 8'hFF : 8'h0);
assign bitenable[31:24] = (avs_cra_byteenable[3] ? 8'hFF : 8'h0);
assign bitenable[39:32] = (avs_cra_byteenable[4] ? 8'hFF : 8'h0);
assign bitenable[47:40] = (avs_cra_byteenable[5] ? 8'hFF : 8'h0);
assign bitenable[55:48] = (avs_cra_byteenable[6] ? 8'hFF : 8'h0);
assign bitenable[63:56] = (avs_cra_byteenable[7] ? 8'hFF : 8'h0);
assign cra_irq = (status_NO_SHIFT_REG[1] | status_NO_SHIFT_REG[3]);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		start <= 1'b0;
		started_NO_SHIFT_REG <= 1'b0;
		kernel_arguments <= 256'h0;
		status_NO_SHIFT_REG <= 32'h30000;
		profile_ctrl_NO_SHIFT_REG <= 32'h4;
		profile_start_cycle_NO_SHIFT_REG <= 64'h0;
		profile_stop_cycle_NO_SHIFT_REG <= 64'hFFFFFFFFFFFFFFFF;
		work_dim <= 32'h0;
		workgroup_size <= 32'h0;
		global_size_0 <= 32'h0;
		global_size_1 <= 32'h0;
		global_size_2 <= 32'h0;
		num_groups_0 <= 32'h0;
		num_groups_1 <= 32'h0;
		num_groups_2 <= 32'h0;
		local_size_0 <= 32'h0;
		local_size_1 <= 32'h0;
		local_size_2 <= 32'h0;
		global_offset_0 <= 32'h0;
		global_offset_1 <= 32'h0;
		global_offset_2 <= 32'h0;
	end
	else
	begin
		if (avs_cra_write)
		begin
			case (avs_cra_address)
				5'h0:
				begin
					status_NO_SHIFT_REG[31:16] <= 16'h3;
					status_NO_SHIFT_REG[15:0] <= ((status_NO_SHIFT_REG[15:0] & ~(bitenable[15:0])) | (avs_cra_writedata[15:0] & bitenable[15:0]));
				end

				5'h1:
				begin
					profile_ctrl_NO_SHIFT_REG <= ((profile_ctrl_NO_SHIFT_REG & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h3:
				begin
					profile_start_cycle_NO_SHIFT_REG[31:0] <= ((profile_start_cycle_NO_SHIFT_REG[31:0] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					profile_start_cycle_NO_SHIFT_REG[63:32] <= ((profile_start_cycle_NO_SHIFT_REG[63:32] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h4:
				begin
					profile_stop_cycle_NO_SHIFT_REG[31:0] <= ((profile_stop_cycle_NO_SHIFT_REG[31:0] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					profile_stop_cycle_NO_SHIFT_REG[63:32] <= ((profile_stop_cycle_NO_SHIFT_REG[63:32] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h5:
				begin
					work_dim <= ((work_dim & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					workgroup_size <= ((workgroup_size & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h6:
				begin
					global_size_0 <= ((global_size_0 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					global_size_1 <= ((global_size_1 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h7:
				begin
					global_size_2 <= ((global_size_2 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					num_groups_0 <= ((num_groups_0 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h8:
				begin
					num_groups_1 <= ((num_groups_1 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					num_groups_2 <= ((num_groups_2 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h9:
				begin
					local_size_0 <= ((local_size_0 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					local_size_1 <= ((local_size_1 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hA:
				begin
					local_size_2 <= ((local_size_2 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					global_offset_0 <= ((global_offset_0 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hB:
				begin
					global_offset_1 <= ((global_offset_1 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					global_offset_2 <= ((global_offset_2 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hC:
				begin
					kernel_arguments[31:0] <= ((kernel_arguments[31:0] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[63:32] <= ((kernel_arguments[63:32] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hD:
				begin
					kernel_arguments[95:64] <= ((kernel_arguments[95:64] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[127:96] <= ((kernel_arguments[127:96] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hE:
				begin
					kernel_arguments[159:128] <= ((kernel_arguments[159:128] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[191:160] <= ((kernel_arguments[191:160] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hF:
				begin
					kernel_arguments[223:192] <= ((kernel_arguments[223:192] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[255:224] <= ((kernel_arguments[255:224] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				default:
				begin
				end

			endcase
		end
		else
		begin
			if (status_NO_SHIFT_REG[0])
			begin
				start <= 1'b1;
			end
			if (start)
			begin
				status_NO_SHIFT_REG[0] <= 1'b0;
				started_NO_SHIFT_REG <= 1'b1;
			end
			if (started_NO_SHIFT_REG)
			begin
				start <= 1'b0;
			end
			if (finish)
			begin
				status_NO_SHIFT_REG[1] <= 1'b1;
				started_NO_SHIFT_REG <= 1'b0;
			end
		end
		status_NO_SHIFT_REG[11] <= 1'b0;
		status_NO_SHIFT_REG[12] <= (|has_a_lsu_active);
		status_NO_SHIFT_REG[13] <= (|has_a_write_pending);
		status_NO_SHIFT_REG[14] <= (|valid_in);
		status_NO_SHIFT_REG[15] <= started_NO_SHIFT_REG;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		cra_read_st1_NO_SHIFT_REG <= 1'b0;
		cra_addr_st1_NO_SHIFT_REG <= 5'h0;
		cra_readdata_st1_NO_SHIFT_REG <= 64'h0;
	end
	else
	begin
		cra_read_st1_NO_SHIFT_REG <= avs_cra_read;
		cra_addr_st1_NO_SHIFT_REG <= avs_cra_address;
		case (avs_cra_address)
			5'h0:
			begin
				cra_readdata_st1_NO_SHIFT_REG[31:0] <= status_NO_SHIFT_REG;
				cra_readdata_st1_NO_SHIFT_REG[63:32] <= 32'h0;
			end

			5'h1:
			begin
				cra_readdata_st1_NO_SHIFT_REG[31:0] <= 'x;
				cra_readdata_st1_NO_SHIFT_REG[63:32] <= 32'h0;
			end

			5'h2:
			begin
				cra_readdata_st1_NO_SHIFT_REG[63:0] <= 64'h0;
			end

			5'h3:
			begin
				cra_readdata_st1_NO_SHIFT_REG[63:0] <= 64'h0;
			end

			5'h4:
			begin
				cra_readdata_st1_NO_SHIFT_REG[63:0] <= 64'h0;
			end

			default:
			begin
				cra_readdata_st1_NO_SHIFT_REG <= status_NO_SHIFT_REG;
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		avs_cra_readdatavalid <= 1'b0;
		avs_cra_readdata <= 64'h0;
	end
	else
	begin
		avs_cra_readdatavalid <= cra_read_st1_NO_SHIFT_REG;
		case (cra_addr_st1_NO_SHIFT_REG)
			5'h2:
			begin
				avs_cra_readdata[63:0] <= profile_data_NO_SHIFT_REG;
			end

			default:
			begin
				avs_cra_readdata <= cra_readdata_st1_NO_SHIFT_REG;
			end

		endcase
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module paddingLayer_function_wrapper
	(
		input 		clock,
		input 		resetn,
		input 		clock2x,
		input 		local_router_hang,
		output 		has_a_write_pending,
		output 		has_a_lsu_active,
		input [255:0] 		kernel_arguments,
		input 		start,
		input [31:0] 		global_offset_0,
		input [31:0] 		global_offset_1,
		input [31:0] 		global_offset_2,
		input [31:0] 		work_dim,
		output 		kernel_valid_out,
		input [31:0] 		workgroup_size,
		input [31:0] 		global_size_0,
		input [31:0] 		global_size_1,
		input [31:0] 		global_size_2,
		input [31:0] 		num_groups_0,
		input [31:0] 		num_groups_1,
		input [31:0] 		num_groups_2,
		input [31:0] 		local_size_0,
		input [31:0] 		local_size_1,
		input [31:0] 		local_size_2,
		input [31:0] 		local_id_0,
		input [31:0] 		local_id_1,
		input [31:0] 		local_id_2,
		input [31:0] 		global_id_0,
		input [31:0] 		global_id_1,
		input [31:0] 		global_id_2,
		input [31:0] 		group_id_0,
		input [31:0] 		group_id_1,
		input [31:0] 		group_id_2,
		output 		kernel_stall_out,
		input 		kernel_valid_in,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_enable,
		input [511:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_readdata,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_readdatavalid,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_waitrequest,
		output [31:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_address,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_read,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_write,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_writeack,
		output [511:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_writedata,
		output [63:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_byteenable,
		output [4:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_burstcount,
		output 		avm_local_bb1_ld__inst0_enable,
		input [511:0] 		avm_local_bb1_ld__inst0_readdata,
		input 		avm_local_bb1_ld__inst0_readdatavalid,
		input 		avm_local_bb1_ld__inst0_waitrequest,
		output [31:0] 		avm_local_bb1_ld__inst0_address,
		output 		avm_local_bb1_ld__inst0_read,
		output 		avm_local_bb1_ld__inst0_write,
		input 		avm_local_bb1_ld__inst0_writeack,
		output [511:0] 		avm_local_bb1_ld__inst0_writedata,
		output [63:0] 		avm_local_bb1_ld__inst0_byteenable,
		output [4:0] 		avm_local_bb1_ld__inst0_burstcount,
		output 		avm_local_bb1_ld__u0_inst0_enable,
		input [511:0] 		avm_local_bb1_ld__u0_inst0_readdata,
		input 		avm_local_bb1_ld__u0_inst0_readdatavalid,
		input 		avm_local_bb1_ld__u0_inst0_waitrequest,
		output [31:0] 		avm_local_bb1_ld__u0_inst0_address,
		output 		avm_local_bb1_ld__u0_inst0_read,
		output 		avm_local_bb1_ld__u0_inst0_write,
		input 		avm_local_bb1_ld__u0_inst0_writeack,
		output [511:0] 		avm_local_bb1_ld__u0_inst0_writedata,
		output [63:0] 		avm_local_bb1_ld__u0_inst0_byteenable,
		output [4:0] 		avm_local_bb1_ld__u0_inst0_burstcount,
		output 		avm_local_bb4_ld_memcoalesce_param_load_060_inst0_enable,
		input [511:0] 		avm_local_bb4_ld_memcoalesce_param_load_060_inst0_readdata,
		input 		avm_local_bb4_ld_memcoalesce_param_load_060_inst0_readdatavalid,
		input 		avm_local_bb4_ld_memcoalesce_param_load_060_inst0_waitrequest,
		output [31:0] 		avm_local_bb4_ld_memcoalesce_param_load_060_inst0_address,
		output 		avm_local_bb4_ld_memcoalesce_param_load_060_inst0_read,
		output 		avm_local_bb4_ld_memcoalesce_param_load_060_inst0_write,
		input 		avm_local_bb4_ld_memcoalesce_param_load_060_inst0_writeack,
		output [511:0] 		avm_local_bb4_ld_memcoalesce_param_load_060_inst0_writedata,
		output [63:0] 		avm_local_bb4_ld_memcoalesce_param_load_060_inst0_byteenable,
		output [4:0] 		avm_local_bb4_ld_memcoalesce_param_load_060_inst0_burstcount,
		output 		avm_local_bb4_ld__inst0_enable,
		input [511:0] 		avm_local_bb4_ld__inst0_readdata,
		input 		avm_local_bb4_ld__inst0_readdatavalid,
		input 		avm_local_bb4_ld__inst0_waitrequest,
		output [31:0] 		avm_local_bb4_ld__inst0_address,
		output 		avm_local_bb4_ld__inst0_read,
		output 		avm_local_bb4_ld__inst0_write,
		input 		avm_local_bb4_ld__inst0_writeack,
		output [511:0] 		avm_local_bb4_ld__inst0_writedata,
		output [63:0] 		avm_local_bb4_ld__inst0_byteenable,
		output [4:0] 		avm_local_bb4_ld__inst0_burstcount,
		output 		avm_local_bb4_st__27_inst0_enable,
		input [511:0] 		avm_local_bb4_st__27_inst0_readdata,
		input 		avm_local_bb4_st__27_inst0_readdatavalid,
		input 		avm_local_bb4_st__27_inst0_waitrequest,
		output [31:0] 		avm_local_bb4_st__27_inst0_address,
		output 		avm_local_bb4_st__27_inst0_read,
		output 		avm_local_bb4_st__27_inst0_write,
		input 		avm_local_bb4_st__27_inst0_writeack,
		output [511:0] 		avm_local_bb4_st__27_inst0_writedata,
		output [63:0] 		avm_local_bb4_st__27_inst0_byteenable,
		output [4:0] 		avm_local_bb4_st__27_inst0_burstcount
	);

// Responsible for interfacing a kernel with the outside world.

// twoXclock_consumer uses clock2x, even if nobody inside the kernel does. Keeps interface to acl_iface consistent for all kernels.
 reg twoXclock_consumer_NO_SHIFT_REG /* synthesis  preserve  noprune  */;
wire stall_in;
wire stall_out;
wire valid_in;
wire valid_out;

assign kernel_valid_out = valid_out;
assign valid_in = kernel_valid_in;
assign kernel_stall_out = stall_out;
assign stall_in = 1'b0;

always @(posedge clock2x or negedge resetn)
begin
	if (~(resetn))
	begin
		twoXclock_consumer_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		twoXclock_consumer_NO_SHIFT_REG <= 1'b1;
	end
end



// This section instantiates a kernel function block
paddingLayer_function paddingLayer_function_inst0 (
	.clock(clock),
	.resetn(resetn),
	.input_global_id_0(global_id_0),
	.input_global_id_1(global_id_1),
	.input_global_id_2(global_id_2),
	.input_acl_hw_wg_id(),
	.stall_out(stall_out),
	.valid_in(valid_in),
	.output_0(),
	.valid_out(valid_out),
	.stall_in(stall_in),
	.workgroup_size(workgroup_size),
	.avm_local_bb0_ld_memcoalesce_param_load_0_enable(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_enable),
	.avm_local_bb0_ld_memcoalesce_param_load_0_readdata(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_readdata),
	.avm_local_bb0_ld_memcoalesce_param_load_0_readdatavalid(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_readdatavalid),
	.avm_local_bb0_ld_memcoalesce_param_load_0_waitrequest(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_waitrequest),
	.avm_local_bb0_ld_memcoalesce_param_load_0_address(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_address),
	.avm_local_bb0_ld_memcoalesce_param_load_0_read(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_read),
	.avm_local_bb0_ld_memcoalesce_param_load_0_write(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_write),
	.avm_local_bb0_ld_memcoalesce_param_load_0_writeack(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_writeack),
	.avm_local_bb0_ld_memcoalesce_param_load_0_writedata(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_writedata),
	.avm_local_bb0_ld_memcoalesce_param_load_0_byteenable(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_byteenable),
	.avm_local_bb0_ld_memcoalesce_param_load_0_burstcount(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_burstcount),
	.avm_local_bb1_ld__enable(avm_local_bb1_ld__inst0_enable),
	.avm_local_bb1_ld__readdata(avm_local_bb1_ld__inst0_readdata),
	.avm_local_bb1_ld__readdatavalid(avm_local_bb1_ld__inst0_readdatavalid),
	.avm_local_bb1_ld__waitrequest(avm_local_bb1_ld__inst0_waitrequest),
	.avm_local_bb1_ld__address(avm_local_bb1_ld__inst0_address),
	.avm_local_bb1_ld__read(avm_local_bb1_ld__inst0_read),
	.avm_local_bb1_ld__write(avm_local_bb1_ld__inst0_write),
	.avm_local_bb1_ld__writeack(avm_local_bb1_ld__inst0_writeack),
	.avm_local_bb1_ld__writedata(avm_local_bb1_ld__inst0_writedata),
	.avm_local_bb1_ld__byteenable(avm_local_bb1_ld__inst0_byteenable),
	.avm_local_bb1_ld__burstcount(avm_local_bb1_ld__inst0_burstcount),
	.avm_local_bb1_ld__u0_enable(avm_local_bb1_ld__u0_inst0_enable),
	.avm_local_bb1_ld__u0_readdata(avm_local_bb1_ld__u0_inst0_readdata),
	.avm_local_bb1_ld__u0_readdatavalid(avm_local_bb1_ld__u0_inst0_readdatavalid),
	.avm_local_bb1_ld__u0_waitrequest(avm_local_bb1_ld__u0_inst0_waitrequest),
	.avm_local_bb1_ld__u0_address(avm_local_bb1_ld__u0_inst0_address),
	.avm_local_bb1_ld__u0_read(avm_local_bb1_ld__u0_inst0_read),
	.avm_local_bb1_ld__u0_write(avm_local_bb1_ld__u0_inst0_write),
	.avm_local_bb1_ld__u0_writeack(avm_local_bb1_ld__u0_inst0_writeack),
	.avm_local_bb1_ld__u0_writedata(avm_local_bb1_ld__u0_inst0_writedata),
	.avm_local_bb1_ld__u0_byteenable(avm_local_bb1_ld__u0_inst0_byteenable),
	.avm_local_bb1_ld__u0_burstcount(avm_local_bb1_ld__u0_inst0_burstcount),
	.avm_local_bb4_ld_memcoalesce_param_load_060_enable(avm_local_bb4_ld_memcoalesce_param_load_060_inst0_enable),
	.avm_local_bb4_ld_memcoalesce_param_load_060_readdata(avm_local_bb4_ld_memcoalesce_param_load_060_inst0_readdata),
	.avm_local_bb4_ld_memcoalesce_param_load_060_readdatavalid(avm_local_bb4_ld_memcoalesce_param_load_060_inst0_readdatavalid),
	.avm_local_bb4_ld_memcoalesce_param_load_060_waitrequest(avm_local_bb4_ld_memcoalesce_param_load_060_inst0_waitrequest),
	.avm_local_bb4_ld_memcoalesce_param_load_060_address(avm_local_bb4_ld_memcoalesce_param_load_060_inst0_address),
	.avm_local_bb4_ld_memcoalesce_param_load_060_read(avm_local_bb4_ld_memcoalesce_param_load_060_inst0_read),
	.avm_local_bb4_ld_memcoalesce_param_load_060_write(avm_local_bb4_ld_memcoalesce_param_load_060_inst0_write),
	.avm_local_bb4_ld_memcoalesce_param_load_060_writeack(avm_local_bb4_ld_memcoalesce_param_load_060_inst0_writeack),
	.avm_local_bb4_ld_memcoalesce_param_load_060_writedata(avm_local_bb4_ld_memcoalesce_param_load_060_inst0_writedata),
	.avm_local_bb4_ld_memcoalesce_param_load_060_byteenable(avm_local_bb4_ld_memcoalesce_param_load_060_inst0_byteenable),
	.avm_local_bb4_ld_memcoalesce_param_load_060_burstcount(avm_local_bb4_ld_memcoalesce_param_load_060_inst0_burstcount),
	.avm_local_bb4_ld__enable(avm_local_bb4_ld__inst0_enable),
	.avm_local_bb4_ld__readdata(avm_local_bb4_ld__inst0_readdata),
	.avm_local_bb4_ld__readdatavalid(avm_local_bb4_ld__inst0_readdatavalid),
	.avm_local_bb4_ld__waitrequest(avm_local_bb4_ld__inst0_waitrequest),
	.avm_local_bb4_ld__address(avm_local_bb4_ld__inst0_address),
	.avm_local_bb4_ld__read(avm_local_bb4_ld__inst0_read),
	.avm_local_bb4_ld__write(avm_local_bb4_ld__inst0_write),
	.avm_local_bb4_ld__writeack(avm_local_bb4_ld__inst0_writeack),
	.avm_local_bb4_ld__writedata(avm_local_bb4_ld__inst0_writedata),
	.avm_local_bb4_ld__byteenable(avm_local_bb4_ld__inst0_byteenable),
	.avm_local_bb4_ld__burstcount(avm_local_bb4_ld__inst0_burstcount),
	.avm_local_bb4_st__27_enable(avm_local_bb4_st__27_inst0_enable),
	.avm_local_bb4_st__27_readdata(avm_local_bb4_st__27_inst0_readdata),
	.avm_local_bb4_st__27_readdatavalid(avm_local_bb4_st__27_inst0_readdatavalid),
	.avm_local_bb4_st__27_waitrequest(avm_local_bb4_st__27_inst0_waitrequest),
	.avm_local_bb4_st__27_address(avm_local_bb4_st__27_inst0_address),
	.avm_local_bb4_st__27_read(avm_local_bb4_st__27_inst0_read),
	.avm_local_bb4_st__27_write(avm_local_bb4_st__27_inst0_write),
	.avm_local_bb4_st__27_writeack(avm_local_bb4_st__27_inst0_writeack),
	.avm_local_bb4_st__27_writedata(avm_local_bb4_st__27_inst0_writedata),
	.avm_local_bb4_st__27_byteenable(avm_local_bb4_st__27_inst0_byteenable),
	.avm_local_bb4_st__27_burstcount(avm_local_bb4_st__27_inst0_burstcount),
	.clock2x(clock2x),
	.start(start),
	.input_param(kernel_arguments[191:128]),
	.input_global_size_2(global_size_2),
	.input_outputFeatureMap(kernel_arguments[127:64]),
	.input_inputFeatureMap(kernel_arguments[63:0]),
	.input_global_size_1(global_size_1),
	.input_global_size_0(global_size_0),
	.has_a_write_pending(has_a_write_pending),
	.has_a_lsu_active(has_a_lsu_active)
);



endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module paddingLayer_sys_cycle_time
	(
		input 		clock,
		input 		resetn,
		output [31:0] 		cur_cycle
	);


 reg [31:0] cur_count_NO_SHIFT_REG;

assign cur_cycle = cur_count_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		cur_count_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		cur_count_NO_SHIFT_REG <= (cur_count_NO_SHIFT_REG + 32'h1);
	end
end

endmodule

// (C) 1992-2016 Intel Corporation.                            
// Intel, the Intel logo, Intel, MegaCore, NIOS II, Quartus and TalkBack words    
// and logos are trademarks of Intel Corporation or its subsidiaries in the U.S.  
// and/or other countries. Other marks and brands may be claimed as the property  
// of others. See Trademarks on intel.com for full list of Intel trademarks or    
// the Trademarks & Brands Names Database (if Intel) or See www.Intel.com/legal (if Altera) 
// Your use of Intel Corporation's design tools, logic functions and other        
// software and tools, and its AMPP partner logic functions, and any output       
// files any of the foregoing (including device programming or simulation         
// files), and any associated documentation or information are expressly subject  
// to the terms and conditions of the Altera Program License Subscription         
// Agreement, Intel MegaCore Function License Agreement, or other applicable      
// license agreement, including, without limitation, that your use is for the     
// sole purpose of programming logic devices manufactured by Intel and sold by    
// Intel or its authorized distributors.  Please refer to the applicable          
// agreement for further details.                                                 
    

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module poolingLayer_basic_block_0
	(
		input 		clock,
		input 		resetn,
		input 		start,
		input [63:0] 		input_param,
		input 		valid_in,
		output 		stall_out,
		input [31:0] 		input_global_id_0,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out,
		input 		stall_in,
		output [31:0] 		lvb_bb0_memcoalesce_param_extrValue_0,
		output [31:0] 		lvb_bb0_memcoalesce_param_extrValue_1,
		output [63:0] 		lvb_bb0_memcoalesce_param_bitcast_092,
		output [31:0] 		lvb_input_global_id_0,
		output [31:0] 		lvb_input_global_id_1,
		output [31:0] 		lvb_input_global_id_2,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_enable,
		input [511:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_readdata,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_readdatavalid,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_waitrequest,
		output [31:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_address,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_read,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_write,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_writeack,
		output [511:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_writedata,
		output [63:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_byteenable,
		output [4:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_burstcount,
		output 		local_bb0_ld_memcoalesce_param_load_0_active,
		input 		clock2x
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_0_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_global_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_global_id_0_staging_reg_NO_SHIFT_REG <= input_global_id_0;
				input_global_id_1_staging_reg_NO_SHIFT_REG <= input_global_id_1;
				input_global_id_2_staging_reg_NO_SHIFT_REG <= input_global_id_2;
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements a registered operation.
// 
wire local_bb0_outputChannel_inputs_ready;
 reg local_bb0_outputChannel_wii_reg_NO_SHIFT_REG;
 reg local_bb0_outputChannel_valid_out_NO_SHIFT_REG;
wire local_bb0_outputChannel_stall_in;
wire local_bb0_outputChannel_output_regs_ready;
 reg [63:0] local_bb0_outputChannel_NO_SHIFT_REG;
wire [63:0] local_bb0_outputChannel_op_wire;
wire local_bb0_outputChannel_causedstall;

assign local_bb0_outputChannel_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb0_outputChannel_output_regs_ready = (~(local_bb0_outputChannel_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_outputChannel_valid_out_NO_SHIFT_REG) | ~(local_bb0_outputChannel_stall_in))));
assign local_bb0_outputChannel_op_wire = ((input_param & 64'hFFFFFFFFFFFFFC00) + 64'h20);
assign merge_node_stall_in_0 = (~(local_bb0_outputChannel_wii_reg_NO_SHIFT_REG) & (~(local_bb0_outputChannel_output_regs_ready) | ~(local_bb0_outputChannel_inputs_ready)));
assign local_bb0_outputChannel_causedstall = (local_bb0_outputChannel_inputs_ready && (~(local_bb0_outputChannel_output_regs_ready) && !(~(local_bb0_outputChannel_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_outputChannel_NO_SHIFT_REG <= 'x;
		local_bb0_outputChannel_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_outputChannel_NO_SHIFT_REG <= 'x;
			local_bb0_outputChannel_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_outputChannel_output_regs_ready)
			begin
				local_bb0_outputChannel_NO_SHIFT_REG <= local_bb0_outputChannel_op_wire;
				local_bb0_outputChannel_valid_out_NO_SHIFT_REG <= local_bb0_outputChannel_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_outputChannel_stall_in))
				begin
					local_bb0_outputChannel_valid_out_NO_SHIFT_REG <= local_bb0_outputChannel_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_outputChannel_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_outputChannel_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_outputChannel_inputs_ready)
			begin
				local_bb0_outputChannel_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_memcoalesce_param_bitcast_092_inputs_ready;
 reg local_bb0_memcoalesce_param_bitcast_092_wii_reg_NO_SHIFT_REG;
 reg local_bb0_memcoalesce_param_bitcast_092_valid_out_NO_SHIFT_REG;
wire local_bb0_memcoalesce_param_bitcast_092_stall_in;
wire local_bb0_memcoalesce_param_bitcast_092_output_regs_ready;
 reg [63:0] local_bb0_memcoalesce_param_bitcast_092_NO_SHIFT_REG;
wire local_bb0_memcoalesce_param_bitcast_092_causedstall;

assign local_bb0_memcoalesce_param_bitcast_092_inputs_ready = merge_node_valid_out_1_NO_SHIFT_REG;
assign local_bb0_memcoalesce_param_bitcast_092_output_regs_ready = (~(local_bb0_memcoalesce_param_bitcast_092_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_memcoalesce_param_bitcast_092_valid_out_NO_SHIFT_REG) | ~(local_bb0_memcoalesce_param_bitcast_092_stall_in))));
assign merge_node_stall_in_1 = (~(local_bb0_memcoalesce_param_bitcast_092_wii_reg_NO_SHIFT_REG) & (~(local_bb0_memcoalesce_param_bitcast_092_output_regs_ready) | ~(local_bb0_memcoalesce_param_bitcast_092_inputs_ready)));
assign local_bb0_memcoalesce_param_bitcast_092_causedstall = (local_bb0_memcoalesce_param_bitcast_092_inputs_ready && (~(local_bb0_memcoalesce_param_bitcast_092_output_regs_ready) && !(~(local_bb0_memcoalesce_param_bitcast_092_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_memcoalesce_param_bitcast_092_NO_SHIFT_REG <= 'x;
		local_bb0_memcoalesce_param_bitcast_092_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_memcoalesce_param_bitcast_092_NO_SHIFT_REG <= 'x;
			local_bb0_memcoalesce_param_bitcast_092_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_memcoalesce_param_bitcast_092_output_regs_ready)
			begin
				local_bb0_memcoalesce_param_bitcast_092_NO_SHIFT_REG <= (input_param & 64'hFFFFFFFFFFFFFC00);
				local_bb0_memcoalesce_param_bitcast_092_valid_out_NO_SHIFT_REG <= local_bb0_memcoalesce_param_bitcast_092_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_memcoalesce_param_bitcast_092_stall_in))
				begin
					local_bb0_memcoalesce_param_bitcast_092_valid_out_NO_SHIFT_REG <= local_bb0_memcoalesce_param_bitcast_092_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_memcoalesce_param_bitcast_092_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_memcoalesce_param_bitcast_092_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_memcoalesce_param_bitcast_092_inputs_ready)
			begin
				local_bb0_memcoalesce_param_bitcast_092_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_2to2_bb0_outputChannel_valid_out;
wire rstag_2to2_bb0_outputChannel_stall_in;
wire rstag_2to2_bb0_outputChannel_inputs_ready;
wire rstag_2to2_bb0_outputChannel_stall_local;
 reg rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG;
wire rstag_2to2_bb0_outputChannel_combined_valid;
 reg [63:0] rstag_2to2_bb0_outputChannel_staging_reg_NO_SHIFT_REG;
wire [63:0] rstag_2to2_bb0_outputChannel;

assign rstag_2to2_bb0_outputChannel_inputs_ready = local_bb0_outputChannel_valid_out_NO_SHIFT_REG;
assign rstag_2to2_bb0_outputChannel = (rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG ? rstag_2to2_bb0_outputChannel_staging_reg_NO_SHIFT_REG : ((local_bb0_outputChannel_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFC20) | 64'h20));
assign rstag_2to2_bb0_outputChannel_combined_valid = (rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG | rstag_2to2_bb0_outputChannel_inputs_ready);
assign rstag_2to2_bb0_outputChannel_valid_out = rstag_2to2_bb0_outputChannel_combined_valid;
assign rstag_2to2_bb0_outputChannel_stall_local = rstag_2to2_bb0_outputChannel_stall_in;
assign local_bb0_outputChannel_stall_in = (|rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_2to2_bb0_outputChannel_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (start)
		begin
			rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (rstag_2to2_bb0_outputChannel_stall_local)
			begin
				if (~(rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG))
				begin
					rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG <= rstag_2to2_bb0_outputChannel_inputs_ready;
				end
			end
			else
			begin
				rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG <= 1'b0;
			end
		end
		if (~(rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG))
		begin
			rstag_2to2_bb0_outputChannel_staging_reg_NO_SHIFT_REG <= ((local_bb0_outputChannel_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFC20) | 64'h20);
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb0_memcoalesce_param_bitcast_0_valid_out;
wire local_bb0_memcoalesce_param_bitcast_0_stall_in;
wire local_bb0_memcoalesce_param_bitcast_0_inputs_ready;
wire local_bb0_memcoalesce_param_bitcast_0_stall_local;
wire [63:0] local_bb0_memcoalesce_param_bitcast_0;

assign local_bb0_memcoalesce_param_bitcast_0_inputs_ready = rstag_2to2_bb0_outputChannel_valid_out;
assign local_bb0_memcoalesce_param_bitcast_0 = ((rstag_2to2_bb0_outputChannel & 64'hFFFFFFFFFFFFFC20) | 64'h20);
assign local_bb0_memcoalesce_param_bitcast_0_valid_out = local_bb0_memcoalesce_param_bitcast_0_inputs_ready;
assign local_bb0_memcoalesce_param_bitcast_0_stall_local = local_bb0_memcoalesce_param_bitcast_0_stall_in;
assign rstag_2to2_bb0_outputChannel_stall_in = (|local_bb0_memcoalesce_param_bitcast_0_stall_local);

// This section implements a registered operation.
// 
wire local_bb0_ld_memcoalesce_param_load_0_inputs_ready;
 reg local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG;
 reg local_bb0_ld_memcoalesce_param_load_0_valid_out_NO_SHIFT_REG;
wire local_bb0_ld_memcoalesce_param_load_0_stall_in;
wire local_bb0_ld_memcoalesce_param_load_0_output_regs_ready;
wire local_bb0_ld_memcoalesce_param_load_0_fu_stall_out;
wire local_bb0_ld_memcoalesce_param_load_0_fu_valid_out;
wire [63:0] local_bb0_ld_memcoalesce_param_load_0_lsu_dataout;
 reg [63:0] local_bb0_ld_memcoalesce_param_load_0_NO_SHIFT_REG;
wire local_bb0_ld_memcoalesce_param_load_0_causedstall;

lsu_top lsu_local_bb0_ld_memcoalesce_param_load_0 (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb0_ld_memcoalesce_param_load_0_fu_stall_out),
	.i_valid((~(local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG) & local_bb0_ld_memcoalesce_param_load_0_inputs_ready)),
	.i_address(((local_bb0_memcoalesce_param_bitcast_0 & 64'hFFFFFFFFFFFFFC20) | 64'h20)),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(1'b0),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb0_ld_memcoalesce_param_load_0_output_regs_ready)),
	.o_valid(local_bb0_ld_memcoalesce_param_load_0_fu_valid_out),
	.o_readdata(local_bb0_ld_memcoalesce_param_load_0_lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb0_ld_memcoalesce_param_load_0_active),
	.avm_address(avm_local_bb0_ld_memcoalesce_param_load_0_address),
	.avm_read(avm_local_bb0_ld_memcoalesce_param_load_0_read),
	.avm_enable(avm_local_bb0_ld_memcoalesce_param_load_0_enable),
	.avm_readdata(avm_local_bb0_ld_memcoalesce_param_load_0_readdata),
	.avm_write(avm_local_bb0_ld_memcoalesce_param_load_0_write),
	.avm_writeack(avm_local_bb0_ld_memcoalesce_param_load_0_writeack),
	.avm_burstcount(avm_local_bb0_ld_memcoalesce_param_load_0_burstcount),
	.avm_writedata(avm_local_bb0_ld_memcoalesce_param_load_0_writedata),
	.avm_byteenable(avm_local_bb0_ld_memcoalesce_param_load_0_byteenable),
	.avm_waitrequest(avm_local_bb0_ld_memcoalesce_param_load_0_waitrequest),
	.avm_readdatavalid(avm_local_bb0_ld_memcoalesce_param_load_0_readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb0_ld_memcoalesce_param_load_0.AWIDTH = 32;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.WIDTH_BYTES = 8;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.MWIDTH_BYTES = 64;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.ALIGNMENT_BYTES = 32;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.READ = 1;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.ATOMIC = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.WIDTH = 64;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.MWIDTH = 512;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.ATOMIC_WIDTH = 3;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.KERNEL_SIDE_MEM_LATENCY = 1;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.MEMORY_SIDE_MEM_LATENCY = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.USE_WRITE_ACK = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.NUMBER_BANKS = 1;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.USEINPUTFIFO = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.USECACHING = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.USEOUTPUTFIFO = 1;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.ADDRSPACE = 1;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.STYLE = "SIMPLE";

assign local_bb0_ld_memcoalesce_param_load_0_inputs_ready = local_bb0_memcoalesce_param_bitcast_0_valid_out;
assign local_bb0_ld_memcoalesce_param_load_0_output_regs_ready = (~(local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_ld_memcoalesce_param_load_0_valid_out_NO_SHIFT_REG) | ~(local_bb0_ld_memcoalesce_param_load_0_stall_in))));
assign local_bb0_memcoalesce_param_bitcast_0_stall_in = (~(local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG) & (local_bb0_ld_memcoalesce_param_load_0_fu_stall_out | ~((~(local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG) & local_bb0_ld_memcoalesce_param_load_0_inputs_ready))));
assign local_bb0_ld_memcoalesce_param_load_0_causedstall = ((~(local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG) & local_bb0_ld_memcoalesce_param_load_0_inputs_ready) && (local_bb0_ld_memcoalesce_param_load_0_fu_stall_out && !(~(local_bb0_ld_memcoalesce_param_load_0_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_ld_memcoalesce_param_load_0_NO_SHIFT_REG <= 'x;
		local_bb0_ld_memcoalesce_param_load_0_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_ld_memcoalesce_param_load_0_NO_SHIFT_REG <= 'x;
			local_bb0_ld_memcoalesce_param_load_0_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_ld_memcoalesce_param_load_0_output_regs_ready)
			begin
				local_bb0_ld_memcoalesce_param_load_0_NO_SHIFT_REG <= local_bb0_ld_memcoalesce_param_load_0_lsu_dataout;
				local_bb0_ld_memcoalesce_param_load_0_valid_out_NO_SHIFT_REG <= local_bb0_ld_memcoalesce_param_load_0_fu_valid_out;
			end
			else
			begin
				if (~(local_bb0_ld_memcoalesce_param_load_0_stall_in))
				begin
					local_bb0_ld_memcoalesce_param_load_0_valid_out_NO_SHIFT_REG <= local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_ld_memcoalesce_param_load_0_fu_valid_out)
			begin
				local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_3to3_bb0_ld_memcoalesce_param_load_0_valid_out_0;
wire rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_in_0;
wire rstag_3to3_bb0_ld_memcoalesce_param_load_0_valid_out_1;
wire rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_in_1;
wire rstag_3to3_bb0_ld_memcoalesce_param_load_0_inputs_ready;
wire rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_local;
 reg rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG;
wire rstag_3to3_bb0_ld_memcoalesce_param_load_0_combined_valid;
 reg [63:0] rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_reg_NO_SHIFT_REG;
wire [63:0] rstag_3to3_bb0_ld_memcoalesce_param_load_0;
 reg rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_0_NO_SHIFT_REG;
 reg rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_1_NO_SHIFT_REG;

assign rstag_3to3_bb0_ld_memcoalesce_param_load_0_inputs_ready = local_bb0_ld_memcoalesce_param_load_0_valid_out_NO_SHIFT_REG;
assign rstag_3to3_bb0_ld_memcoalesce_param_load_0 = (rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG ? rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_reg_NO_SHIFT_REG : local_bb0_ld_memcoalesce_param_load_0_NO_SHIFT_REG);
assign rstag_3to3_bb0_ld_memcoalesce_param_load_0_combined_valid = (rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG | rstag_3to3_bb0_ld_memcoalesce_param_load_0_inputs_ready);
assign rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_local = ((rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_in_0 & ~(rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_0_NO_SHIFT_REG)) | (rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_in_1 & ~(rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_1_NO_SHIFT_REG)));
assign rstag_3to3_bb0_ld_memcoalesce_param_load_0_valid_out_0 = (rstag_3to3_bb0_ld_memcoalesce_param_load_0_combined_valid & ~(rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_0_NO_SHIFT_REG));
assign rstag_3to3_bb0_ld_memcoalesce_param_load_0_valid_out_1 = (rstag_3to3_bb0_ld_memcoalesce_param_load_0_combined_valid & ~(rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_1_NO_SHIFT_REG));
assign local_bb0_ld_memcoalesce_param_load_0_stall_in = (|rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (start)
		begin
			rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_local)
			begin
				if (~(rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG))
				begin
					rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG <= rstag_3to3_bb0_ld_memcoalesce_param_load_0_inputs_ready;
				end
			end
			else
			begin
				rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG <= 1'b0;
			end
		end
		if (~(rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG))
		begin
			rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_reg_NO_SHIFT_REG <= local_bb0_ld_memcoalesce_param_load_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_0_NO_SHIFT_REG <= 1'b0;
			rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_1_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_0_NO_SHIFT_REG <= (rstag_3to3_bb0_ld_memcoalesce_param_load_0_combined_valid & (rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_0_NO_SHIFT_REG | ~(rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_in_0)) & rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_local);
			rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_1_NO_SHIFT_REG <= (rstag_3to3_bb0_ld_memcoalesce_param_load_0_combined_valid & (rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_1_NO_SHIFT_REG | ~(rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_in_1)) & rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_local);
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_memcoalesce_param_extrValue_1_inputs_ready;
 reg local_bb0_memcoalesce_param_extrValue_1_wii_reg_NO_SHIFT_REG;
 reg local_bb0_memcoalesce_param_extrValue_1_valid_out_NO_SHIFT_REG;
wire local_bb0_memcoalesce_param_extrValue_1_stall_in;
wire local_bb0_memcoalesce_param_extrValue_1_output_regs_ready;
 reg [31:0] local_bb0_memcoalesce_param_extrValue_1_NO_SHIFT_REG;
wire [31:0] local_bb0_memcoalesce_param_extrValue_1_op_wire;
wire local_bb0_memcoalesce_param_extrValue_1_causedstall;

assign local_bb0_memcoalesce_param_extrValue_1_inputs_ready = rstag_3to3_bb0_ld_memcoalesce_param_load_0_valid_out_0;
assign local_bb0_memcoalesce_param_extrValue_1_output_regs_ready = (~(local_bb0_memcoalesce_param_extrValue_1_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_memcoalesce_param_extrValue_1_valid_out_NO_SHIFT_REG) | ~(local_bb0_memcoalesce_param_extrValue_1_stall_in))));
assign local_bb0_memcoalesce_param_extrValue_1_op_wire[31:0] = rstag_3to3_bb0_ld_memcoalesce_param_load_0[63:32];
assign rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_in_0 = (~(local_bb0_memcoalesce_param_extrValue_1_wii_reg_NO_SHIFT_REG) & (~(local_bb0_memcoalesce_param_extrValue_1_output_regs_ready) | ~(local_bb0_memcoalesce_param_extrValue_1_inputs_ready)));
assign local_bb0_memcoalesce_param_extrValue_1_causedstall = (local_bb0_memcoalesce_param_extrValue_1_inputs_ready && (~(local_bb0_memcoalesce_param_extrValue_1_output_regs_ready) && !(~(local_bb0_memcoalesce_param_extrValue_1_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_memcoalesce_param_extrValue_1_NO_SHIFT_REG <= 'x;
		local_bb0_memcoalesce_param_extrValue_1_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_memcoalesce_param_extrValue_1_NO_SHIFT_REG <= 'x;
			local_bb0_memcoalesce_param_extrValue_1_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_memcoalesce_param_extrValue_1_output_regs_ready)
			begin
				local_bb0_memcoalesce_param_extrValue_1_NO_SHIFT_REG <= local_bb0_memcoalesce_param_extrValue_1_op_wire;
				local_bb0_memcoalesce_param_extrValue_1_valid_out_NO_SHIFT_REG <= local_bb0_memcoalesce_param_extrValue_1_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_memcoalesce_param_extrValue_1_stall_in))
				begin
					local_bb0_memcoalesce_param_extrValue_1_valid_out_NO_SHIFT_REG <= local_bb0_memcoalesce_param_extrValue_1_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_memcoalesce_param_extrValue_1_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_memcoalesce_param_extrValue_1_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_memcoalesce_param_extrValue_1_inputs_ready)
			begin
				local_bb0_memcoalesce_param_extrValue_1_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_memcoalesce_param_extrValue_0_inputs_ready;
 reg local_bb0_memcoalesce_param_extrValue_0_wii_reg_NO_SHIFT_REG;
 reg local_bb0_memcoalesce_param_extrValue_0_valid_out_NO_SHIFT_REG;
wire local_bb0_memcoalesce_param_extrValue_0_stall_in;
wire local_bb0_memcoalesce_param_extrValue_0_output_regs_ready;
 reg [31:0] local_bb0_memcoalesce_param_extrValue_0_NO_SHIFT_REG;
wire [31:0] local_bb0_memcoalesce_param_extrValue_0_op_wire;
wire local_bb0_memcoalesce_param_extrValue_0_causedstall;

assign local_bb0_memcoalesce_param_extrValue_0_inputs_ready = rstag_3to3_bb0_ld_memcoalesce_param_load_0_valid_out_1;
assign local_bb0_memcoalesce_param_extrValue_0_output_regs_ready = (~(local_bb0_memcoalesce_param_extrValue_0_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_memcoalesce_param_extrValue_0_valid_out_NO_SHIFT_REG) | ~(local_bb0_memcoalesce_param_extrValue_0_stall_in))));
assign local_bb0_memcoalesce_param_extrValue_0_op_wire[31:0] = rstag_3to3_bb0_ld_memcoalesce_param_load_0[31:0];
assign rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_in_1 = (~(local_bb0_memcoalesce_param_extrValue_0_wii_reg_NO_SHIFT_REG) & (~(local_bb0_memcoalesce_param_extrValue_0_output_regs_ready) | ~(local_bb0_memcoalesce_param_extrValue_0_inputs_ready)));
assign local_bb0_memcoalesce_param_extrValue_0_causedstall = (local_bb0_memcoalesce_param_extrValue_0_inputs_ready && (~(local_bb0_memcoalesce_param_extrValue_0_output_regs_ready) && !(~(local_bb0_memcoalesce_param_extrValue_0_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_memcoalesce_param_extrValue_0_NO_SHIFT_REG <= 'x;
		local_bb0_memcoalesce_param_extrValue_0_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_memcoalesce_param_extrValue_0_NO_SHIFT_REG <= 'x;
			local_bb0_memcoalesce_param_extrValue_0_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_memcoalesce_param_extrValue_0_output_regs_ready)
			begin
				local_bb0_memcoalesce_param_extrValue_0_NO_SHIFT_REG <= local_bb0_memcoalesce_param_extrValue_0_op_wire;
				local_bb0_memcoalesce_param_extrValue_0_valid_out_NO_SHIFT_REG <= local_bb0_memcoalesce_param_extrValue_0_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_memcoalesce_param_extrValue_0_stall_in))
				begin
					local_bb0_memcoalesce_param_extrValue_0_valid_out_NO_SHIFT_REG <= local_bb0_memcoalesce_param_extrValue_0_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_memcoalesce_param_extrValue_0_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_memcoalesce_param_extrValue_0_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_memcoalesce_param_extrValue_0_inputs_ready)
			begin
				local_bb0_memcoalesce_param_extrValue_0_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg [31:0] lvb_bb0_memcoalesce_param_extrValue_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb0_memcoalesce_param_extrValue_1_reg_NO_SHIFT_REG;
 reg [63:0] lvb_bb0_memcoalesce_param_bitcast_092_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (merge_node_valid_out_2_NO_SHIFT_REG & local_bb0_memcoalesce_param_bitcast_092_valid_out_NO_SHIFT_REG & local_bb0_memcoalesce_param_extrValue_1_valid_out_NO_SHIFT_REG & local_bb0_memcoalesce_param_extrValue_0_valid_out_NO_SHIFT_REG);
assign branch_var__output_regs_ready = (~(stall_in) | ~(branch_node_valid_out_NO_SHIFT_REG));
assign merge_node_stall_in_2 = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb0_memcoalesce_param_bitcast_092_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb0_memcoalesce_param_extrValue_1_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb0_memcoalesce_param_extrValue_0_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_bb0_memcoalesce_param_extrValue_0 = lvb_bb0_memcoalesce_param_extrValue_0_reg_NO_SHIFT_REG;
assign lvb_bb0_memcoalesce_param_extrValue_1 = lvb_bb0_memcoalesce_param_extrValue_1_reg_NO_SHIFT_REG;
assign lvb_bb0_memcoalesce_param_bitcast_092 = lvb_bb0_memcoalesce_param_bitcast_092_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0 = lvb_input_global_id_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1 = lvb_input_global_id_1_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2 = lvb_input_global_id_2_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id = lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;
assign combined_branch_stall_in_signal = stall_in;
assign valid_out = branch_node_valid_out_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
		lvb_bb0_memcoalesce_param_extrValue_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb0_memcoalesce_param_extrValue_1_reg_NO_SHIFT_REG <= 'x;
		lvb_bb0_memcoalesce_param_bitcast_092_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_bb0_memcoalesce_param_extrValue_0_reg_NO_SHIFT_REG <= local_bb0_memcoalesce_param_extrValue_0_NO_SHIFT_REG;
			lvb_bb0_memcoalesce_param_extrValue_1_reg_NO_SHIFT_REG <= local_bb0_memcoalesce_param_extrValue_1_NO_SHIFT_REG;
			lvb_bb0_memcoalesce_param_bitcast_092_reg_NO_SHIFT_REG <= (local_bb0_memcoalesce_param_bitcast_092_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFC00);
			lvb_input_global_id_0_reg_NO_SHIFT_REG <= local_lvm_input_global_id_0_NO_SHIFT_REG;
			lvb_input_global_id_1_reg_NO_SHIFT_REG <= local_lvm_input_global_id_1_NO_SHIFT_REG;
			lvb_input_global_id_2_reg_NO_SHIFT_REG <= local_lvm_input_global_id_2_NO_SHIFT_REG;
			lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module poolingLayer_basic_block_1
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_0,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_1,
		input [63:0] 		input_wii_memcoalesce_param_bitcast_092,
		input 		valid_in,
		output 		stall_out,
		input [31:0] 		input_global_id_0,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out,
		input 		stall_in,
		output 		lvb_bb1_cmp48,
		output 		lvb_bb1_var_,
		output [31:0] 		lvb_bb1_memcoalesce_param_extrValue_8,
		output [31:0] 		lvb_bb1_memcoalesce_param_extrValue_5,
		output [31:0] 		lvb_bb1_memcoalesce_param_extrValue_6,
		output [31:0] 		lvb_bb1_c0_exe1,
		output [31:0] 		lvb_bb1_c0_exe2,
		output [31:0] 		lvb_bb1_memcoalesce_param_extrValue_2,
		output 		lvb_bb1_cmp2122,
		output 		lvb_bb1_var__u0,
		output 		lvb_bb1__phi_decision77_xor,
		output 		lvb_bb1__phi_decision76_xor_or,
		output [31:0] 		lvb_input_global_id_0,
		output [31:0] 		lvb_input_global_id_1,
		output [31:0] 		lvb_input_global_id_2,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		input 		start,
		output 		avm_local_bb1_ld_memcoalesce_param_load_093_enable,
		input [511:0] 		avm_local_bb1_ld_memcoalesce_param_load_093_readdata,
		input 		avm_local_bb1_ld_memcoalesce_param_load_093_readdatavalid,
		input 		avm_local_bb1_ld_memcoalesce_param_load_093_waitrequest,
		output [31:0] 		avm_local_bb1_ld_memcoalesce_param_load_093_address,
		output 		avm_local_bb1_ld_memcoalesce_param_load_093_read,
		output 		avm_local_bb1_ld_memcoalesce_param_load_093_write,
		input 		avm_local_bb1_ld_memcoalesce_param_load_093_writeack,
		output [511:0] 		avm_local_bb1_ld_memcoalesce_param_load_093_writedata,
		output [63:0] 		avm_local_bb1_ld_memcoalesce_param_load_093_byteenable,
		output [4:0] 		avm_local_bb1_ld_memcoalesce_param_load_093_burstcount,
		output 		local_bb1_ld_memcoalesce_param_load_093_active,
		input 		clock2x
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_node_stall_in_4;
 reg merge_node_valid_out_4_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_0_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG) | (merge_node_stall_in_4 & merge_node_valid_out_4_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_global_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_global_id_0_staging_reg_NO_SHIFT_REG <= input_global_id_0;
				input_global_id_1_staging_reg_NO_SHIFT_REG <= input_global_id_1;
				input_global_id_2_staging_reg_NO_SHIFT_REG <= input_global_id_2;
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_4_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_4))
			begin
				merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1_cmp48_valid_out;
wire local_bb1_cmp48_stall_in;
wire local_bb1_cmp48_inputs_ready;
wire local_bb1_cmp48_stall_local;
wire local_bb1_cmp48;

assign local_bb1_cmp48_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb1_cmp48 = ($signed(input_wii_memcoalesce_param_extrValue_0) > $signed(local_lvm_input_global_id_0_NO_SHIFT_REG));
assign local_bb1_cmp48_valid_out = local_bb1_cmp48_inputs_ready;
assign local_bb1_cmp48_stall_local = local_bb1_cmp48_stall_in;
assign merge_node_stall_in_0 = (|local_bb1_cmp48_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb1_cmp538_valid_out;
wire local_bb1_cmp538_stall_in;
wire local_bb1_cmp538_inputs_ready;
wire local_bb1_cmp538_stall_local;
wire local_bb1_cmp538;

assign local_bb1_cmp538_inputs_ready = merge_node_valid_out_1_NO_SHIFT_REG;
assign local_bb1_cmp538 = ($signed(input_wii_memcoalesce_param_extrValue_1) > $signed(local_lvm_input_global_id_1_NO_SHIFT_REG));
assign local_bb1_cmp538_valid_out = local_bb1_cmp538_inputs_ready;
assign local_bb1_cmp538_stall_local = local_bb1_cmp538_stall_in;
assign merge_node_stall_in_1 = (|local_bb1_cmp538_stall_local);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_memcoalesce_param_bitcast_092_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_param_bitcast_092_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_param_bitcast_092_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_param_bitcast_092_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_param_bitcast_092_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_param_bitcast_092_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_memcoalesce_param_bitcast_092_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_memcoalesce_param_bitcast_092_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_memcoalesce_param_bitcast_092_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_memcoalesce_param_bitcast_092_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_memcoalesce_param_bitcast_092_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(),
	.data_out()
);

defparam rnode_1to2_memcoalesce_param_bitcast_092_0_reg_2_fifo.DEPTH = 2;
defparam rnode_1to2_memcoalesce_param_bitcast_092_0_reg_2_fifo.DATA_WIDTH = 0;
defparam rnode_1to2_memcoalesce_param_bitcast_092_0_reg_2_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to2_memcoalesce_param_bitcast_092_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_memcoalesce_param_bitcast_092_0_reg_2_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_2_NO_SHIFT_REG;
assign merge_node_stall_in_2 = rnode_1to2_memcoalesce_param_bitcast_092_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_memcoalesce_param_bitcast_092_0_stall_in_reg_2_NO_SHIFT_REG = rnode_1to2_memcoalesce_param_bitcast_092_0_stall_in_NO_SHIFT_REG;
assign rnode_1to2_memcoalesce_param_bitcast_092_0_valid_out_NO_SHIFT_REG = rnode_1to2_memcoalesce_param_bitcast_092_0_valid_out_reg_2_NO_SHIFT_REG;

// Register node:
//  * latency = 4
//  * capacity = 4
 logic rnode_1to5_input_global_id_2_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to5_input_global_id_2_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to5_input_global_id_2_0_NO_SHIFT_REG;
 logic rnode_1to5_input_global_id_2_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to5_input_global_id_2_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to5_input_global_id_2_1_NO_SHIFT_REG;
 logic rnode_1to5_input_global_id_2_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to5_input_global_id_2_0_reg_5_NO_SHIFT_REG;
 logic rnode_1to5_input_global_id_2_0_valid_out_0_reg_5_NO_SHIFT_REG;
 logic rnode_1to5_input_global_id_2_0_stall_in_0_reg_5_NO_SHIFT_REG;
 logic rnode_1to5_input_global_id_2_0_stall_out_reg_5_NO_SHIFT_REG;
 reg rnode_1to5_input_global_id_2_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to5_input_global_id_2_0_consumed_1_NO_SHIFT_REG;
wire [95:0] rci_rcnode_1to8_rc4_input_global_id_0_0_reg_1;

acl_data_fifo rnode_1to5_input_global_id_2_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to5_input_global_id_2_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to5_input_global_id_2_0_stall_in_0_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_1to5_input_global_id_2_0_valid_out_0_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_1to5_input_global_id_2_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_lvm_input_global_id_2_NO_SHIFT_REG),
	.data_out(rnode_1to5_input_global_id_2_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_1to5_input_global_id_2_0_reg_5_fifo.DEPTH = 5;
defparam rnode_1to5_input_global_id_2_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_1to5_input_global_id_2_0_reg_5_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to5_input_global_id_2_0_reg_5_fifo.IMPL = "ll_reg";

assign rnode_1to5_input_global_id_2_0_reg_5_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_3_NO_SHIFT_REG;
assign merge_node_stall_in_3 = rnode_1to5_input_global_id_2_0_stall_out_reg_5_NO_SHIFT_REG;
assign rnode_1to5_input_global_id_2_0_stall_in_0_reg_5_NO_SHIFT_REG = ((rnode_1to5_input_global_id_2_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to5_input_global_id_2_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to5_input_global_id_2_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to5_input_global_id_2_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to5_input_global_id_2_0_valid_out_0_NO_SHIFT_REG = (rnode_1to5_input_global_id_2_0_valid_out_0_reg_5_NO_SHIFT_REG & ~(rnode_1to5_input_global_id_2_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to5_input_global_id_2_0_valid_out_1_NO_SHIFT_REG = (rnode_1to5_input_global_id_2_0_valid_out_0_reg_5_NO_SHIFT_REG & ~(rnode_1to5_input_global_id_2_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to5_input_global_id_2_0_NO_SHIFT_REG = rnode_1to5_input_global_id_2_0_reg_5_NO_SHIFT_REG;
assign rnode_1to5_input_global_id_2_1_NO_SHIFT_REG = rnode_1to5_input_global_id_2_0_reg_5_NO_SHIFT_REG;
assign rci_rcnode_1to8_rc4_input_global_id_0_0_reg_1[31:0] = local_lvm_input_global_id_0_NO_SHIFT_REG;
assign rci_rcnode_1to8_rc4_input_global_id_0_0_reg_1[63:32] = local_lvm_input_global_id_1_NO_SHIFT_REG;
assign rci_rcnode_1to8_rc4_input_global_id_0_0_reg_1[95:64] = local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to5_input_global_id_2_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to5_input_global_id_2_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to5_input_global_id_2_0_consumed_0_NO_SHIFT_REG <= (rnode_1to5_input_global_id_2_0_valid_out_0_reg_5_NO_SHIFT_REG & (rnode_1to5_input_global_id_2_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to5_input_global_id_2_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to5_input_global_id_2_0_stall_in_0_reg_5_NO_SHIFT_REG);
		rnode_1to5_input_global_id_2_0_consumed_1_NO_SHIFT_REG <= (rnode_1to5_input_global_id_2_0_valid_out_0_reg_5_NO_SHIFT_REG & (rnode_1to5_input_global_id_2_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to5_input_global_id_2_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to5_input_global_id_2_0_stall_in_0_reg_5_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 7
//  * capacity = 7
 logic rcnode_1to8_rc4_input_global_id_0_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to8_rc4_input_global_id_0_0_stall_in_NO_SHIFT_REG;
 logic [95:0] rcnode_1to8_rc4_input_global_id_0_0_NO_SHIFT_REG;
 logic rcnode_1to8_rc4_input_global_id_0_0_reg_8_inputs_ready_NO_SHIFT_REG;
 logic [95:0] rcnode_1to8_rc4_input_global_id_0_0_reg_8_NO_SHIFT_REG;
 logic rcnode_1to8_rc4_input_global_id_0_0_valid_out_reg_8_NO_SHIFT_REG;
 logic rcnode_1to8_rc4_input_global_id_0_0_stall_in_reg_8_NO_SHIFT_REG;
 logic rcnode_1to8_rc4_input_global_id_0_0_stall_out_reg_8_IP_NO_SHIFT_REG;
 logic rcnode_1to8_rc4_input_global_id_0_0_stall_out_reg_8_NO_SHIFT_REG;

acl_data_fifo rcnode_1to8_rc4_input_global_id_0_0_reg_8_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to8_rc4_input_global_id_0_0_reg_8_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to8_rc4_input_global_id_0_0_stall_in_reg_8_NO_SHIFT_REG),
	.valid_out(rcnode_1to8_rc4_input_global_id_0_0_valid_out_reg_8_NO_SHIFT_REG),
	.stall_out(rcnode_1to8_rc4_input_global_id_0_0_stall_out_reg_8_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to8_rc4_input_global_id_0_0_reg_1),
	.data_out(rcnode_1to8_rc4_input_global_id_0_0_reg_8_NO_SHIFT_REG)
);

defparam rcnode_1to8_rc4_input_global_id_0_0_reg_8_fifo.DEPTH = 8;
defparam rcnode_1to8_rc4_input_global_id_0_0_reg_8_fifo.DATA_WIDTH = 96;
defparam rcnode_1to8_rc4_input_global_id_0_0_reg_8_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to8_rc4_input_global_id_0_0_reg_8_fifo.IMPL = "ll_reg";

assign rcnode_1to8_rc4_input_global_id_0_0_reg_8_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_4_NO_SHIFT_REG;
assign rcnode_1to8_rc4_input_global_id_0_0_stall_out_reg_8_NO_SHIFT_REG = (~(rcnode_1to8_rc4_input_global_id_0_0_reg_8_inputs_ready_NO_SHIFT_REG) | rcnode_1to8_rc4_input_global_id_0_0_stall_out_reg_8_IP_NO_SHIFT_REG);
assign merge_node_stall_in_4 = rcnode_1to8_rc4_input_global_id_0_0_stall_out_reg_8_NO_SHIFT_REG;
assign rcnode_1to8_rc4_input_global_id_0_0_NO_SHIFT_REG = rcnode_1to8_rc4_input_global_id_0_0_reg_8_NO_SHIFT_REG;
assign rcnode_1to8_rc4_input_global_id_0_0_stall_in_reg_8_NO_SHIFT_REG = rcnode_1to8_rc4_input_global_id_0_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to8_rc4_input_global_id_0_0_valid_out_NO_SHIFT_REG = rcnode_1to8_rc4_input_global_id_0_0_valid_out_reg_8_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb1_cmp48_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp48_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp48_0_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp48_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp48_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp48_1_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp48_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp48_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp48_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp48_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp48_0_stall_out_reg_2_NO_SHIFT_REG;
 reg rnode_1to2_bb1_cmp48_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to2_bb1_cmp48_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb1_cmp48_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb1_cmp48_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb1_cmp48_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb1_cmp48_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb1_cmp48_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb1_cmp48),
	.data_out(rnode_1to2_bb1_cmp48_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb1_cmp48_0_reg_2_fifo.DEPTH = 2;
defparam rnode_1to2_bb1_cmp48_0_reg_2_fifo.DATA_WIDTH = 1;
defparam rnode_1to2_bb1_cmp48_0_reg_2_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to2_bb1_cmp48_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_bb1_cmp48_0_reg_2_inputs_ready_NO_SHIFT_REG = local_bb1_cmp48_valid_out;
assign local_bb1_cmp48_stall_in = rnode_1to2_bb1_cmp48_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb1_cmp48_0_stall_in_0_reg_2_NO_SHIFT_REG = ((rnode_1to2_bb1_cmp48_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to2_bb1_cmp48_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to2_bb1_cmp48_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to2_bb1_cmp48_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to2_bb1_cmp48_0_valid_out_0_NO_SHIFT_REG = (rnode_1to2_bb1_cmp48_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_bb1_cmp48_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_bb1_cmp48_0_valid_out_1_NO_SHIFT_REG = (rnode_1to2_bb1_cmp48_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_bb1_cmp48_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to2_bb1_cmp48_0_NO_SHIFT_REG = rnode_1to2_bb1_cmp48_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb1_cmp48_1_NO_SHIFT_REG = rnode_1to2_bb1_cmp48_0_reg_2_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to2_bb1_cmp48_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_bb1_cmp48_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to2_bb1_cmp48_0_consumed_0_NO_SHIFT_REG <= (rnode_1to2_bb1_cmp48_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_bb1_cmp48_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to2_bb1_cmp48_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to2_bb1_cmp48_0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_bb1_cmp48_0_consumed_1_NO_SHIFT_REG <= (rnode_1to2_bb1_cmp48_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_bb1_cmp48_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to2_bb1_cmp48_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to2_bb1_cmp48_0_stall_in_0_reg_2_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb1_cmp538_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp538_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp538_0_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp538_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp538_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp538_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp538_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp538_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb1_cmp538_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb1_cmp538_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb1_cmp538_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb1_cmp538_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb1_cmp538_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb1_cmp538),
	.data_out(rnode_1to2_bb1_cmp538_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb1_cmp538_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb1_cmp538_0_reg_2_fifo.DATA_WIDTH = 1;
defparam rnode_1to2_bb1_cmp538_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb1_cmp538_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_bb1_cmp538_0_reg_2_inputs_ready_NO_SHIFT_REG = local_bb1_cmp538_valid_out;
assign local_bb1_cmp538_stall_in = rnode_1to2_bb1_cmp538_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb1_cmp538_0_NO_SHIFT_REG = rnode_1to2_bb1_cmp538_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb1_cmp538_0_stall_in_reg_2_NO_SHIFT_REG = rnode_1to2_bb1_cmp538_0_stall_in_NO_SHIFT_REG;
assign rnode_1to2_bb1_cmp538_0_valid_out_NO_SHIFT_REG = rnode_1to2_bb1_cmp538_0_valid_out_reg_2_NO_SHIFT_REG;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_5to7_input_global_id_2_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_5to7_input_global_id_2_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_5to7_input_global_id_2_0_NO_SHIFT_REG;
 logic rnode_5to7_input_global_id_2_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_5to7_input_global_id_2_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_5to7_input_global_id_2_1_NO_SHIFT_REG;
 logic rnode_5to7_input_global_id_2_0_reg_7_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_5to7_input_global_id_2_0_reg_7_NO_SHIFT_REG;
 logic rnode_5to7_input_global_id_2_0_valid_out_0_reg_7_NO_SHIFT_REG;
 logic rnode_5to7_input_global_id_2_0_stall_in_0_reg_7_NO_SHIFT_REG;
 logic rnode_5to7_input_global_id_2_0_stall_out_reg_7_NO_SHIFT_REG;
 reg rnode_5to7_input_global_id_2_0_consumed_0_NO_SHIFT_REG;
 reg rnode_5to7_input_global_id_2_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_5to7_input_global_id_2_0_reg_7_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_5to7_input_global_id_2_0_reg_7_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_5to7_input_global_id_2_0_stall_in_0_reg_7_NO_SHIFT_REG),
	.valid_out(rnode_5to7_input_global_id_2_0_valid_out_0_reg_7_NO_SHIFT_REG),
	.stall_out(rnode_5to7_input_global_id_2_0_stall_out_reg_7_NO_SHIFT_REG),
	.data_in(rnode_1to5_input_global_id_2_1_NO_SHIFT_REG),
	.data_out(rnode_5to7_input_global_id_2_0_reg_7_NO_SHIFT_REG)
);

defparam rnode_5to7_input_global_id_2_0_reg_7_fifo.DEPTH = 3;
defparam rnode_5to7_input_global_id_2_0_reg_7_fifo.DATA_WIDTH = 32;
defparam rnode_5to7_input_global_id_2_0_reg_7_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_5to7_input_global_id_2_0_reg_7_fifo.IMPL = "ll_reg";

assign rnode_5to7_input_global_id_2_0_reg_7_inputs_ready_NO_SHIFT_REG = rnode_1to5_input_global_id_2_0_valid_out_1_NO_SHIFT_REG;
assign rnode_1to5_input_global_id_2_0_stall_in_1_NO_SHIFT_REG = rnode_5to7_input_global_id_2_0_stall_out_reg_7_NO_SHIFT_REG;
assign rnode_5to7_input_global_id_2_0_stall_in_0_reg_7_NO_SHIFT_REG = ((rnode_5to7_input_global_id_2_0_stall_in_0_NO_SHIFT_REG & ~(rnode_5to7_input_global_id_2_0_consumed_0_NO_SHIFT_REG)) | (rnode_5to7_input_global_id_2_0_stall_in_1_NO_SHIFT_REG & ~(rnode_5to7_input_global_id_2_0_consumed_1_NO_SHIFT_REG)));
assign rnode_5to7_input_global_id_2_0_valid_out_0_NO_SHIFT_REG = (rnode_5to7_input_global_id_2_0_valid_out_0_reg_7_NO_SHIFT_REG & ~(rnode_5to7_input_global_id_2_0_consumed_0_NO_SHIFT_REG));
assign rnode_5to7_input_global_id_2_0_valid_out_1_NO_SHIFT_REG = (rnode_5to7_input_global_id_2_0_valid_out_0_reg_7_NO_SHIFT_REG & ~(rnode_5to7_input_global_id_2_0_consumed_1_NO_SHIFT_REG));
assign rnode_5to7_input_global_id_2_0_NO_SHIFT_REG = rnode_5to7_input_global_id_2_0_reg_7_NO_SHIFT_REG;
assign rnode_5to7_input_global_id_2_1_NO_SHIFT_REG = rnode_5to7_input_global_id_2_0_reg_7_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_5to7_input_global_id_2_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_5to7_input_global_id_2_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_5to7_input_global_id_2_0_consumed_0_NO_SHIFT_REG <= (rnode_5to7_input_global_id_2_0_valid_out_0_reg_7_NO_SHIFT_REG & (rnode_5to7_input_global_id_2_0_consumed_0_NO_SHIFT_REG | ~(rnode_5to7_input_global_id_2_0_stall_in_0_NO_SHIFT_REG)) & rnode_5to7_input_global_id_2_0_stall_in_0_reg_7_NO_SHIFT_REG);
		rnode_5to7_input_global_id_2_0_consumed_1_NO_SHIFT_REG <= (rnode_5to7_input_global_id_2_0_valid_out_0_reg_7_NO_SHIFT_REG & (rnode_5to7_input_global_id_2_0_consumed_1_NO_SHIFT_REG | ~(rnode_5to7_input_global_id_2_0_stall_in_1_NO_SHIFT_REG)) & rnode_5to7_input_global_id_2_0_stall_in_0_reg_7_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 6
//  * capacity = 6
 logic rnode_2to8_bb1_cmp48_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to8_bb1_cmp48_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to8_bb1_cmp48_0_NO_SHIFT_REG;
 logic rnode_2to8_bb1_cmp48_0_reg_8_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to8_bb1_cmp48_0_reg_8_NO_SHIFT_REG;
 logic rnode_2to8_bb1_cmp48_0_valid_out_reg_8_NO_SHIFT_REG;
 logic rnode_2to8_bb1_cmp48_0_stall_in_reg_8_NO_SHIFT_REG;
 logic rnode_2to8_bb1_cmp48_0_stall_out_reg_8_NO_SHIFT_REG;

acl_data_fifo rnode_2to8_bb1_cmp48_0_reg_8_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to8_bb1_cmp48_0_reg_8_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to8_bb1_cmp48_0_stall_in_reg_8_NO_SHIFT_REG),
	.valid_out(rnode_2to8_bb1_cmp48_0_valid_out_reg_8_NO_SHIFT_REG),
	.stall_out(rnode_2to8_bb1_cmp48_0_stall_out_reg_8_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb1_cmp48_1_NO_SHIFT_REG),
	.data_out(rnode_2to8_bb1_cmp48_0_reg_8_NO_SHIFT_REG)
);

defparam rnode_2to8_bb1_cmp48_0_reg_8_fifo.DEPTH = 7;
defparam rnode_2to8_bb1_cmp48_0_reg_8_fifo.DATA_WIDTH = 1;
defparam rnode_2to8_bb1_cmp48_0_reg_8_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_2to8_bb1_cmp48_0_reg_8_fifo.IMPL = "ll_reg";

assign rnode_2to8_bb1_cmp48_0_reg_8_inputs_ready_NO_SHIFT_REG = rnode_1to2_bb1_cmp48_0_valid_out_1_NO_SHIFT_REG;
assign rnode_1to2_bb1_cmp48_0_stall_in_1_NO_SHIFT_REG = rnode_2to8_bb1_cmp48_0_stall_out_reg_8_NO_SHIFT_REG;
assign rnode_2to8_bb1_cmp48_0_NO_SHIFT_REG = rnode_2to8_bb1_cmp48_0_reg_8_NO_SHIFT_REG;
assign rnode_2to8_bb1_cmp48_0_stall_in_reg_8_NO_SHIFT_REG = rnode_2to8_bb1_cmp48_0_stall_in_NO_SHIFT_REG;
assign rnode_2to8_bb1_cmp48_0_valid_out_NO_SHIFT_REG = rnode_2to8_bb1_cmp48_0_valid_out_reg_8_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb1_var__stall_local;
wire local_bb1_var_;

assign local_bb1_var_ = (rnode_1to2_bb1_cmp48_0_NO_SHIFT_REG & rnode_1to2_bb1_cmp538_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb1_var__valid_out_1;
wire local_bb1_var__stall_in_1;
wire local_bb1__phi_decision_xor_valid_out;
wire local_bb1__phi_decision_xor_stall_in;
wire local_bb1__phi_decision_xor_inputs_ready;
wire local_bb1__phi_decision_xor_stall_local;
wire local_bb1__phi_decision_xor;
 reg local_bb1_var__consumed_1_NO_SHIFT_REG;
 reg local_bb1__phi_decision_xor_consumed_0_NO_SHIFT_REG;

assign local_bb1__phi_decision_xor_inputs_ready = (rnode_1to2_bb1_cmp538_0_valid_out_NO_SHIFT_REG & rnode_1to2_bb1_cmp48_0_valid_out_0_NO_SHIFT_REG);
assign local_bb1__phi_decision_xor = (local_bb1_var_ ^ 1'b1);
assign local_bb1__phi_decision_xor_stall_local = ((local_bb1_var__stall_in_1 & ~(local_bb1_var__consumed_1_NO_SHIFT_REG)) | (local_bb1__phi_decision_xor_stall_in & ~(local_bb1__phi_decision_xor_consumed_0_NO_SHIFT_REG)));
assign local_bb1_var__valid_out_1 = (local_bb1__phi_decision_xor_inputs_ready & ~(local_bb1_var__consumed_1_NO_SHIFT_REG));
assign local_bb1__phi_decision_xor_valid_out = (local_bb1__phi_decision_xor_inputs_ready & ~(local_bb1__phi_decision_xor_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_bb1_cmp538_0_stall_in_NO_SHIFT_REG = (local_bb1__phi_decision_xor_stall_local | ~(local_bb1__phi_decision_xor_inputs_ready));
assign rnode_1to2_bb1_cmp48_0_stall_in_0_NO_SHIFT_REG = (local_bb1__phi_decision_xor_stall_local | ~(local_bb1__phi_decision_xor_inputs_ready));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb1_var__consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb1__phi_decision_xor_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb1_var__consumed_1_NO_SHIFT_REG <= (local_bb1__phi_decision_xor_inputs_ready & (local_bb1_var__consumed_1_NO_SHIFT_REG | ~(local_bb1_var__stall_in_1)) & local_bb1__phi_decision_xor_stall_local);
		local_bb1__phi_decision_xor_consumed_0_NO_SHIFT_REG <= (local_bb1__phi_decision_xor_inputs_ready & (local_bb1__phi_decision_xor_consumed_0_NO_SHIFT_REG | ~(local_bb1__phi_decision_xor_stall_in)) & local_bb1__phi_decision_xor_stall_local);
	end
end


// Register node:
//  * latency = 6
//  * capacity = 6
 logic rnode_2to8_bb1_var__0_valid_out_0_NO_SHIFT_REG;
 logic rnode_2to8_bb1_var__0_stall_in_0_NO_SHIFT_REG;
 logic rnode_2to8_bb1_var__0_NO_SHIFT_REG;
 logic rnode_2to8_bb1_var__0_valid_out_1_NO_SHIFT_REG;
 logic rnode_2to8_bb1_var__0_stall_in_1_NO_SHIFT_REG;
 logic rnode_2to8_bb1_var__1_NO_SHIFT_REG;
 logic rnode_2to8_bb1_var__0_reg_8_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to8_bb1_var__0_reg_8_NO_SHIFT_REG;
 logic rnode_2to8_bb1_var__0_valid_out_0_reg_8_NO_SHIFT_REG;
 logic rnode_2to8_bb1_var__0_stall_in_0_reg_8_NO_SHIFT_REG;
 logic rnode_2to8_bb1_var__0_stall_out_reg_8_NO_SHIFT_REG;

acl_data_fifo rnode_2to8_bb1_var__0_reg_8_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to8_bb1_var__0_reg_8_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to8_bb1_var__0_stall_in_0_reg_8_NO_SHIFT_REG),
	.valid_out(rnode_2to8_bb1_var__0_valid_out_0_reg_8_NO_SHIFT_REG),
	.stall_out(rnode_2to8_bb1_var__0_stall_out_reg_8_NO_SHIFT_REG),
	.data_in(local_bb1_var_),
	.data_out(rnode_2to8_bb1_var__0_reg_8_NO_SHIFT_REG)
);

defparam rnode_2to8_bb1_var__0_reg_8_fifo.DEPTH = 7;
defparam rnode_2to8_bb1_var__0_reg_8_fifo.DATA_WIDTH = 1;
defparam rnode_2to8_bb1_var__0_reg_8_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_2to8_bb1_var__0_reg_8_fifo.IMPL = "ll_reg";

assign rnode_2to8_bb1_var__0_reg_8_inputs_ready_NO_SHIFT_REG = local_bb1_var__valid_out_1;
assign local_bb1_var__stall_in_1 = rnode_2to8_bb1_var__0_stall_out_reg_8_NO_SHIFT_REG;
assign rnode_2to8_bb1_var__0_stall_in_0_reg_8_NO_SHIFT_REG = (rnode_2to8_bb1_var__0_stall_in_0_NO_SHIFT_REG | rnode_2to8_bb1_var__0_stall_in_1_NO_SHIFT_REG);
assign rnode_2to8_bb1_var__0_valid_out_0_NO_SHIFT_REG = rnode_2to8_bb1_var__0_valid_out_0_reg_8_NO_SHIFT_REG;
assign rnode_2to8_bb1_var__0_valid_out_1_NO_SHIFT_REG = rnode_2to8_bb1_var__0_valid_out_0_reg_8_NO_SHIFT_REG;
assign rnode_2to8_bb1_var__0_NO_SHIFT_REG = rnode_2to8_bb1_var__0_reg_8_NO_SHIFT_REG;
assign rnode_2to8_bb1_var__1_NO_SHIFT_REG = rnode_2to8_bb1_var__0_reg_8_NO_SHIFT_REG;

// This section implements a staging register.
// 
wire rstag_2to2_bb1__phi_decision_xor_valid_out;
wire rstag_2to2_bb1__phi_decision_xor_stall_in;
wire rstag_2to2_bb1__phi_decision_xor_inputs_ready;
wire rstag_2to2_bb1__phi_decision_xor_stall_local;
 reg rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG;
wire rstag_2to2_bb1__phi_decision_xor_combined_valid;
 reg rstag_2to2_bb1__phi_decision_xor_staging_reg_NO_SHIFT_REG;
wire rstag_2to2_bb1__phi_decision_xor;

assign rstag_2to2_bb1__phi_decision_xor_inputs_ready = local_bb1__phi_decision_xor_valid_out;
assign rstag_2to2_bb1__phi_decision_xor = (rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG ? rstag_2to2_bb1__phi_decision_xor_staging_reg_NO_SHIFT_REG : local_bb1__phi_decision_xor);
assign rstag_2to2_bb1__phi_decision_xor_combined_valid = (rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG | rstag_2to2_bb1__phi_decision_xor_inputs_ready);
assign rstag_2to2_bb1__phi_decision_xor_valid_out = rstag_2to2_bb1__phi_decision_xor_combined_valid;
assign rstag_2to2_bb1__phi_decision_xor_stall_local = rstag_2to2_bb1__phi_decision_xor_stall_in;
assign local_bb1__phi_decision_xor_stall_in = (|rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_2to2_bb1__phi_decision_xor_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_2to2_bb1__phi_decision_xor_stall_local)
		begin
			if (~(rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG))
			begin
				rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG <= rstag_2to2_bb1__phi_decision_xor_inputs_ready;
			end
		end
		else
		begin
			rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG))
		begin
			rstag_2to2_bb1__phi_decision_xor_staging_reg_NO_SHIFT_REG <= local_bb1__phi_decision_xor;
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb1_ld_memcoalesce_param_load_093_inputs_ready;
 reg local_bb1_ld_memcoalesce_param_load_093_valid_out_NO_SHIFT_REG;
wire local_bb1_ld_memcoalesce_param_load_093_stall_in;
wire local_bb1_ld_memcoalesce_param_load_093_output_regs_ready;
wire local_bb1_ld_memcoalesce_param_load_093_fu_stall_out;
wire local_bb1_ld_memcoalesce_param_load_093_fu_valid_out;
wire [511:0] local_bb1_ld_memcoalesce_param_load_093_lsu_dataout;
 reg [511:0] local_bb1_ld_memcoalesce_param_load_093_NO_SHIFT_REG;
wire local_bb1_ld_memcoalesce_param_load_093_causedstall;

lsu_top lsu_local_bb1_ld_memcoalesce_param_load_093 (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb1_ld_memcoalesce_param_load_093_fu_stall_out),
	.i_valid(local_bb1_ld_memcoalesce_param_load_093_inputs_ready),
	.i_address((input_wii_memcoalesce_param_bitcast_092 & 64'hFFFFFFFFFFFFFC00)),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(rstag_2to2_bb1__phi_decision_xor),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb1_ld_memcoalesce_param_load_093_output_regs_ready)),
	.o_valid(local_bb1_ld_memcoalesce_param_load_093_fu_valid_out),
	.o_readdata(local_bb1_ld_memcoalesce_param_load_093_lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb1_ld_memcoalesce_param_load_093_active),
	.avm_address(avm_local_bb1_ld_memcoalesce_param_load_093_address),
	.avm_read(avm_local_bb1_ld_memcoalesce_param_load_093_read),
	.avm_enable(avm_local_bb1_ld_memcoalesce_param_load_093_enable),
	.avm_readdata(avm_local_bb1_ld_memcoalesce_param_load_093_readdata),
	.avm_write(avm_local_bb1_ld_memcoalesce_param_load_093_write),
	.avm_writeack(avm_local_bb1_ld_memcoalesce_param_load_093_writeack),
	.avm_burstcount(avm_local_bb1_ld_memcoalesce_param_load_093_burstcount),
	.avm_writedata(avm_local_bb1_ld_memcoalesce_param_load_093_writedata),
	.avm_byteenable(avm_local_bb1_ld_memcoalesce_param_load_093_byteenable),
	.avm_waitrequest(avm_local_bb1_ld_memcoalesce_param_load_093_waitrequest),
	.avm_readdatavalid(avm_local_bb1_ld_memcoalesce_param_load_093_readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb1_ld_memcoalesce_param_load_093.AWIDTH = 32;
defparam lsu_local_bb1_ld_memcoalesce_param_load_093.WIDTH_BYTES = 64;
defparam lsu_local_bb1_ld_memcoalesce_param_load_093.MWIDTH_BYTES = 64;
defparam lsu_local_bb1_ld_memcoalesce_param_load_093.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb1_ld_memcoalesce_param_load_093.ALIGNMENT_BYTES = 64;
defparam lsu_local_bb1_ld_memcoalesce_param_load_093.READ = 1;
defparam lsu_local_bb1_ld_memcoalesce_param_load_093.ATOMIC = 0;
defparam lsu_local_bb1_ld_memcoalesce_param_load_093.WIDTH = 512;
defparam lsu_local_bb1_ld_memcoalesce_param_load_093.MWIDTH = 512;
defparam lsu_local_bb1_ld_memcoalesce_param_load_093.ATOMIC_WIDTH = 3;
defparam lsu_local_bb1_ld_memcoalesce_param_load_093.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb1_ld_memcoalesce_param_load_093.KERNEL_SIDE_MEM_LATENCY = 3;
defparam lsu_local_bb1_ld_memcoalesce_param_load_093.MEMORY_SIDE_MEM_LATENCY = 84;
defparam lsu_local_bb1_ld_memcoalesce_param_load_093.USE_WRITE_ACK = 0;
defparam lsu_local_bb1_ld_memcoalesce_param_load_093.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb1_ld_memcoalesce_param_load_093.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb1_ld_memcoalesce_param_load_093.NUMBER_BANKS = 1;
defparam lsu_local_bb1_ld_memcoalesce_param_load_093.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb1_ld_memcoalesce_param_load_093.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb1_ld_memcoalesce_param_load_093.USEINPUTFIFO = 0;
defparam lsu_local_bb1_ld_memcoalesce_param_load_093.USECACHING = 1;
defparam lsu_local_bb1_ld_memcoalesce_param_load_093.CACHESIZE = 128;
defparam lsu_local_bb1_ld_memcoalesce_param_load_093.USEOUTPUTFIFO = 1;
defparam lsu_local_bb1_ld_memcoalesce_param_load_093.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb1_ld_memcoalesce_param_load_093.ADDRSPACE = 1;
defparam lsu_local_bb1_ld_memcoalesce_param_load_093.STYLE = "SEMI-STREAMING";

assign local_bb1_ld_memcoalesce_param_load_093_inputs_ready = (rnode_1to2_memcoalesce_param_bitcast_092_0_valid_out_NO_SHIFT_REG & rstag_2to2_bb1__phi_decision_xor_valid_out);
assign local_bb1_ld_memcoalesce_param_load_093_output_regs_ready = (&(~(local_bb1_ld_memcoalesce_param_load_093_valid_out_NO_SHIFT_REG) | ~(local_bb1_ld_memcoalesce_param_load_093_stall_in)));
assign rnode_1to2_memcoalesce_param_bitcast_092_0_stall_in_NO_SHIFT_REG = (local_bb1_ld_memcoalesce_param_load_093_fu_stall_out | ~(local_bb1_ld_memcoalesce_param_load_093_inputs_ready));
assign rstag_2to2_bb1__phi_decision_xor_stall_in = (local_bb1_ld_memcoalesce_param_load_093_fu_stall_out | ~(local_bb1_ld_memcoalesce_param_load_093_inputs_ready));
assign local_bb1_ld_memcoalesce_param_load_093_causedstall = (local_bb1_ld_memcoalesce_param_load_093_inputs_ready && (local_bb1_ld_memcoalesce_param_load_093_fu_stall_out && !(~(local_bb1_ld_memcoalesce_param_load_093_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb1_ld_memcoalesce_param_load_093_NO_SHIFT_REG <= 'x;
		local_bb1_ld_memcoalesce_param_load_093_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb1_ld_memcoalesce_param_load_093_output_regs_ready)
		begin
			local_bb1_ld_memcoalesce_param_load_093_NO_SHIFT_REG <= local_bb1_ld_memcoalesce_param_load_093_lsu_dataout;
			local_bb1_ld_memcoalesce_param_load_093_valid_out_NO_SHIFT_REG <= local_bb1_ld_memcoalesce_param_load_093_fu_valid_out;
		end
		else
		begin
			if (~(local_bb1_ld_memcoalesce_param_load_093_stall_in))
			begin
				local_bb1_ld_memcoalesce_param_load_093_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_5to5_bb1_ld_memcoalesce_param_load_093_valid_out_0;
wire rstag_5to5_bb1_ld_memcoalesce_param_load_093_stall_in_0;
wire rstag_5to5_bb1_ld_memcoalesce_param_load_093_valid_out_1;
wire rstag_5to5_bb1_ld_memcoalesce_param_load_093_stall_in_1;
wire rstag_5to5_bb1_ld_memcoalesce_param_load_093_valid_out_2;
wire rstag_5to5_bb1_ld_memcoalesce_param_load_093_stall_in_2;
wire rstag_5to5_bb1_ld_memcoalesce_param_load_093_valid_out_3;
wire rstag_5to5_bb1_ld_memcoalesce_param_load_093_stall_in_3;
wire rstag_5to5_bb1_ld_memcoalesce_param_load_093_valid_out_4;
wire rstag_5to5_bb1_ld_memcoalesce_param_load_093_stall_in_4;
wire rstag_5to5_bb1_ld_memcoalesce_param_load_093_inputs_ready;
wire rstag_5to5_bb1_ld_memcoalesce_param_load_093_stall_local;
 reg rstag_5to5_bb1_ld_memcoalesce_param_load_093_staging_valid_NO_SHIFT_REG;
wire rstag_5to5_bb1_ld_memcoalesce_param_load_093_combined_valid;
 reg [511:0] rstag_5to5_bb1_ld_memcoalesce_param_load_093_staging_reg_NO_SHIFT_REG;
wire [511:0] rstag_5to5_bb1_ld_memcoalesce_param_load_093;
 reg rstag_5to5_bb1_ld_memcoalesce_param_load_093_consumed_0_NO_SHIFT_REG;
 reg rstag_5to5_bb1_ld_memcoalesce_param_load_093_consumed_1_NO_SHIFT_REG;
 reg rstag_5to5_bb1_ld_memcoalesce_param_load_093_consumed_2_NO_SHIFT_REG;
 reg rstag_5to5_bb1_ld_memcoalesce_param_load_093_consumed_4_NO_SHIFT_REG;

assign rstag_5to5_bb1_ld_memcoalesce_param_load_093_inputs_ready = local_bb1_ld_memcoalesce_param_load_093_valid_out_NO_SHIFT_REG;
assign rstag_5to5_bb1_ld_memcoalesce_param_load_093 = (rstag_5to5_bb1_ld_memcoalesce_param_load_093_staging_valid_NO_SHIFT_REG ? rstag_5to5_bb1_ld_memcoalesce_param_load_093_staging_reg_NO_SHIFT_REG : local_bb1_ld_memcoalesce_param_load_093_NO_SHIFT_REG);
assign rstag_5to5_bb1_ld_memcoalesce_param_load_093_combined_valid = (rstag_5to5_bb1_ld_memcoalesce_param_load_093_staging_valid_NO_SHIFT_REG | rstag_5to5_bb1_ld_memcoalesce_param_load_093_inputs_ready);
assign rstag_5to5_bb1_ld_memcoalesce_param_load_093_stall_local = ((rstag_5to5_bb1_ld_memcoalesce_param_load_093_stall_in_0 & ~(rstag_5to5_bb1_ld_memcoalesce_param_load_093_consumed_0_NO_SHIFT_REG)) | (rstag_5to5_bb1_ld_memcoalesce_param_load_093_stall_in_1 & ~(rstag_5to5_bb1_ld_memcoalesce_param_load_093_consumed_1_NO_SHIFT_REG)) | (rstag_5to5_bb1_ld_memcoalesce_param_load_093_stall_in_2 & ~(rstag_5to5_bb1_ld_memcoalesce_param_load_093_consumed_2_NO_SHIFT_REG)) | 1'b0 | (rstag_5to5_bb1_ld_memcoalesce_param_load_093_stall_in_4 & ~(rstag_5to5_bb1_ld_memcoalesce_param_load_093_consumed_4_NO_SHIFT_REG)));
assign rstag_5to5_bb1_ld_memcoalesce_param_load_093_valid_out_0 = (rstag_5to5_bb1_ld_memcoalesce_param_load_093_combined_valid & ~(rstag_5to5_bb1_ld_memcoalesce_param_load_093_consumed_0_NO_SHIFT_REG));
assign rstag_5to5_bb1_ld_memcoalesce_param_load_093_valid_out_1 = (rstag_5to5_bb1_ld_memcoalesce_param_load_093_combined_valid & ~(rstag_5to5_bb1_ld_memcoalesce_param_load_093_consumed_1_NO_SHIFT_REG));
assign rstag_5to5_bb1_ld_memcoalesce_param_load_093_valid_out_2 = (rstag_5to5_bb1_ld_memcoalesce_param_load_093_combined_valid & ~(rstag_5to5_bb1_ld_memcoalesce_param_load_093_consumed_2_NO_SHIFT_REG));
assign rstag_5to5_bb1_ld_memcoalesce_param_load_093_valid_out_3 = rstag_5to5_bb1_ld_memcoalesce_param_load_093_combined_valid;
assign rstag_5to5_bb1_ld_memcoalesce_param_load_093_valid_out_4 = (rstag_5to5_bb1_ld_memcoalesce_param_load_093_combined_valid & ~(rstag_5to5_bb1_ld_memcoalesce_param_load_093_consumed_4_NO_SHIFT_REG));
assign local_bb1_ld_memcoalesce_param_load_093_stall_in = (|rstag_5to5_bb1_ld_memcoalesce_param_load_093_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_5to5_bb1_ld_memcoalesce_param_load_093_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_5to5_bb1_ld_memcoalesce_param_load_093_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_5to5_bb1_ld_memcoalesce_param_load_093_stall_local)
		begin
			if (~(rstag_5to5_bb1_ld_memcoalesce_param_load_093_staging_valid_NO_SHIFT_REG))
			begin
				rstag_5to5_bb1_ld_memcoalesce_param_load_093_staging_valid_NO_SHIFT_REG <= rstag_5to5_bb1_ld_memcoalesce_param_load_093_inputs_ready;
			end
		end
		else
		begin
			rstag_5to5_bb1_ld_memcoalesce_param_load_093_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_5to5_bb1_ld_memcoalesce_param_load_093_staging_valid_NO_SHIFT_REG))
		begin
			rstag_5to5_bb1_ld_memcoalesce_param_load_093_staging_reg_NO_SHIFT_REG <= local_bb1_ld_memcoalesce_param_load_093_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_5to5_bb1_ld_memcoalesce_param_load_093_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_5to5_bb1_ld_memcoalesce_param_load_093_consumed_1_NO_SHIFT_REG <= 1'b0;
		rstag_5to5_bb1_ld_memcoalesce_param_load_093_consumed_2_NO_SHIFT_REG <= 1'b0;
		rstag_5to5_bb1_ld_memcoalesce_param_load_093_consumed_4_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_5to5_bb1_ld_memcoalesce_param_load_093_consumed_0_NO_SHIFT_REG <= (rstag_5to5_bb1_ld_memcoalesce_param_load_093_combined_valid & (rstag_5to5_bb1_ld_memcoalesce_param_load_093_consumed_0_NO_SHIFT_REG | ~(rstag_5to5_bb1_ld_memcoalesce_param_load_093_stall_in_0)) & rstag_5to5_bb1_ld_memcoalesce_param_load_093_stall_local);
		rstag_5to5_bb1_ld_memcoalesce_param_load_093_consumed_1_NO_SHIFT_REG <= (rstag_5to5_bb1_ld_memcoalesce_param_load_093_combined_valid & (rstag_5to5_bb1_ld_memcoalesce_param_load_093_consumed_1_NO_SHIFT_REG | ~(rstag_5to5_bb1_ld_memcoalesce_param_load_093_stall_in_1)) & rstag_5to5_bb1_ld_memcoalesce_param_load_093_stall_local);
		rstag_5to5_bb1_ld_memcoalesce_param_load_093_consumed_2_NO_SHIFT_REG <= (rstag_5to5_bb1_ld_memcoalesce_param_load_093_combined_valid & (rstag_5to5_bb1_ld_memcoalesce_param_load_093_consumed_2_NO_SHIFT_REG | ~(rstag_5to5_bb1_ld_memcoalesce_param_load_093_stall_in_2)) & rstag_5to5_bb1_ld_memcoalesce_param_load_093_stall_local);
		rstag_5to5_bb1_ld_memcoalesce_param_load_093_consumed_4_NO_SHIFT_REG <= (rstag_5to5_bb1_ld_memcoalesce_param_load_093_combined_valid & (rstag_5to5_bb1_ld_memcoalesce_param_load_093_consumed_4_NO_SHIFT_REG | ~(rstag_5to5_bb1_ld_memcoalesce_param_load_093_stall_in_4)) & rstag_5to5_bb1_ld_memcoalesce_param_load_093_stall_local);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1_memcoalesce_param_extrValue_2_valid_out;
wire local_bb1_memcoalesce_param_extrValue_2_stall_in;
wire local_bb1_memcoalesce_param_extrValue_2_inputs_ready;
wire local_bb1_memcoalesce_param_extrValue_2_stall_local;
wire [31:0] local_bb1_memcoalesce_param_extrValue_2;

assign local_bb1_memcoalesce_param_extrValue_2_inputs_ready = rstag_5to5_bb1_ld_memcoalesce_param_load_093_valid_out_0;
assign local_bb1_memcoalesce_param_extrValue_2[31:0] = rstag_5to5_bb1_ld_memcoalesce_param_load_093[95:64];
assign local_bb1_memcoalesce_param_extrValue_2_valid_out = local_bb1_memcoalesce_param_extrValue_2_inputs_ready;
assign local_bb1_memcoalesce_param_extrValue_2_stall_local = local_bb1_memcoalesce_param_extrValue_2_stall_in;
assign rstag_5to5_bb1_ld_memcoalesce_param_load_093_stall_in_0 = (|local_bb1_memcoalesce_param_extrValue_2_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb1_c0_eni1_stall_local;
wire [575:0] local_bb1_c0_eni1;

assign local_bb1_c0_eni1[7:0] = 8'bx;
assign local_bb1_c0_eni1[519:8] = rstag_5to5_bb1_ld_memcoalesce_param_load_093;
assign local_bb1_c0_eni1[575:520] = 56'bx;

// This section implements an unregistered operation.
// 
wire local_bb1_memcoalesce_param_extrValue_6_stall_local;
wire [31:0] local_bb1_memcoalesce_param_extrValue_6;

assign local_bb1_memcoalesce_param_extrValue_6[31:0] = rstag_5to5_bb1_ld_memcoalesce_param_load_093[255:224];

// This section implements an unregistered operation.
// 
wire local_bb1_memcoalesce_param_extrValue_6_valid_out;
wire local_bb1_memcoalesce_param_extrValue_6_stall_in;
wire local_bb1_memcoalesce_param_extrValue_5_valid_out;
wire local_bb1_memcoalesce_param_extrValue_5_stall_in;
wire local_bb1_memcoalesce_param_extrValue_5_inputs_ready;
wire local_bb1_memcoalesce_param_extrValue_5_stall_local;
wire [31:0] local_bb1_memcoalesce_param_extrValue_5;

assign local_bb1_memcoalesce_param_extrValue_5_inputs_ready = (rstag_5to5_bb1_ld_memcoalesce_param_load_093_valid_out_2 & rstag_5to5_bb1_ld_memcoalesce_param_load_093_valid_out_3);
assign local_bb1_memcoalesce_param_extrValue_5[31:0] = rstag_5to5_bb1_ld_memcoalesce_param_load_093[223:192];
assign local_bb1_memcoalesce_param_extrValue_5_stall_local = (local_bb1_memcoalesce_param_extrValue_6_stall_in | local_bb1_memcoalesce_param_extrValue_5_stall_in);
assign local_bb1_memcoalesce_param_extrValue_6_valid_out = local_bb1_memcoalesce_param_extrValue_5_inputs_ready;
assign local_bb1_memcoalesce_param_extrValue_5_valid_out = local_bb1_memcoalesce_param_extrValue_5_inputs_ready;
assign rstag_5to5_bb1_ld_memcoalesce_param_load_093_stall_in_2 = (local_bb1_memcoalesce_param_extrValue_5_stall_local | ~(local_bb1_memcoalesce_param_extrValue_5_inputs_ready));
assign rstag_5to5_bb1_ld_memcoalesce_param_load_093_stall_in_3 = (local_bb1_memcoalesce_param_extrValue_5_stall_local | ~(local_bb1_memcoalesce_param_extrValue_5_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb1_memcoalesce_param_extrValue_8_valid_out;
wire local_bb1_memcoalesce_param_extrValue_8_stall_in;
wire local_bb1_memcoalesce_param_extrValue_8_inputs_ready;
wire local_bb1_memcoalesce_param_extrValue_8_stall_local;
wire [31:0] local_bb1_memcoalesce_param_extrValue_8;

assign local_bb1_memcoalesce_param_extrValue_8_inputs_ready = rstag_5to5_bb1_ld_memcoalesce_param_load_093_valid_out_4;
assign local_bb1_memcoalesce_param_extrValue_8[31:0] = rstag_5to5_bb1_ld_memcoalesce_param_load_093[351:320];
assign local_bb1_memcoalesce_param_extrValue_8_valid_out = local_bb1_memcoalesce_param_extrValue_8_inputs_ready;
assign local_bb1_memcoalesce_param_extrValue_8_stall_local = local_bb1_memcoalesce_param_extrValue_8_stall_in;
assign rstag_5to5_bb1_ld_memcoalesce_param_load_093_stall_in_4 = (|local_bb1_memcoalesce_param_extrValue_8_stall_local);

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_NO_SHIFT_REG;
 logic rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_5to7_bb1_memcoalesce_param_extrValue_2_1_NO_SHIFT_REG;
 logic rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_reg_7_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_reg_7_NO_SHIFT_REG;
 logic rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_valid_out_0_reg_7_NO_SHIFT_REG;
 logic rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_stall_in_0_reg_7_NO_SHIFT_REG;
 logic rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_stall_out_reg_7_NO_SHIFT_REG;

acl_data_fifo rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_reg_7_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_reg_7_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_stall_in_0_reg_7_NO_SHIFT_REG),
	.valid_out(rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_valid_out_0_reg_7_NO_SHIFT_REG),
	.stall_out(rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_stall_out_reg_7_NO_SHIFT_REG),
	.data_in(local_bb1_memcoalesce_param_extrValue_2),
	.data_out(rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_reg_7_NO_SHIFT_REG)
);

defparam rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_reg_7_fifo.DEPTH = 3;
defparam rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_reg_7_fifo.DATA_WIDTH = 32;
defparam rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_reg_7_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_reg_7_fifo.IMPL = "ll_reg";

assign rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_reg_7_inputs_ready_NO_SHIFT_REG = local_bb1_memcoalesce_param_extrValue_2_valid_out;
assign local_bb1_memcoalesce_param_extrValue_2_stall_in = rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_stall_out_reg_7_NO_SHIFT_REG;
assign rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_stall_in_0_reg_7_NO_SHIFT_REG = (rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_stall_in_0_NO_SHIFT_REG | rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_stall_in_1_NO_SHIFT_REG);
assign rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_valid_out_0_NO_SHIFT_REG = rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_valid_out_0_reg_7_NO_SHIFT_REG;
assign rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_valid_out_1_NO_SHIFT_REG = rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_valid_out_0_reg_7_NO_SHIFT_REG;
assign rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_NO_SHIFT_REG = rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_reg_7_NO_SHIFT_REG;
assign rnode_5to7_bb1_memcoalesce_param_extrValue_2_1_NO_SHIFT_REG = rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_reg_7_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb1_c0_eni2_valid_out;
wire local_bb1_c0_eni2_stall_in;
wire local_bb1_c0_eni2_inputs_ready;
wire local_bb1_c0_eni2_stall_local;
wire [575:0] local_bb1_c0_eni2;
wire [63:0] rci_rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_reg_5;

assign local_bb1_c0_eni2_inputs_ready = (rnode_1to5_input_global_id_2_0_valid_out_0_NO_SHIFT_REG & rstag_5to5_bb1_ld_memcoalesce_param_load_093_valid_out_1);
assign local_bb1_c0_eni2[543:0] = local_bb1_c0_eni1[543:0];
assign local_bb1_c0_eni2[575:544] = rnode_1to5_input_global_id_2_0_NO_SHIFT_REG;
assign local_bb1_c0_eni2_valid_out = local_bb1_c0_eni2_inputs_ready;
assign local_bb1_c0_eni2_stall_local = local_bb1_c0_eni2_stall_in;
assign rnode_1to5_input_global_id_2_0_stall_in_0_NO_SHIFT_REG = (local_bb1_c0_eni2_stall_local | ~(local_bb1_c0_eni2_inputs_ready));
assign rstag_5to5_bb1_ld_memcoalesce_param_load_093_stall_in_1 = (local_bb1_c0_eni2_stall_local | ~(local_bb1_c0_eni2_inputs_ready));
assign rci_rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_reg_5[31:0] = local_bb1_memcoalesce_param_extrValue_5;
assign rci_rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_reg_5[63:32] = local_bb1_memcoalesce_param_extrValue_6;

// Register node:
//  * latency = 3
//  * capacity = 3
 logic rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_valid_out_NO_SHIFT_REG;
 logic rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_NO_SHIFT_REG;
 logic rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_reg_8_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_reg_8_NO_SHIFT_REG;
 logic rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_valid_out_reg_8_NO_SHIFT_REG;
 logic rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_stall_in_reg_8_NO_SHIFT_REG;
 logic rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_stall_out_0_reg_8_IP_NO_SHIFT_REG;
 logic rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_stall_out_0_reg_8_NO_SHIFT_REG;

acl_data_fifo rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_reg_8_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_reg_8_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_stall_in_reg_8_NO_SHIFT_REG),
	.valid_out(rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_valid_out_reg_8_NO_SHIFT_REG),
	.stall_out(rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_stall_out_0_reg_8_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_reg_5),
	.data_out(rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_reg_8_NO_SHIFT_REG)
);

defparam rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_reg_8_fifo.DEPTH = 4;
defparam rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_reg_8_fifo.DATA_WIDTH = 64;
defparam rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_reg_8_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_reg_8_fifo.IMPL = "ll_reg";

assign rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_reg_8_inputs_ready_NO_SHIFT_REG = (local_bb1_memcoalesce_param_extrValue_5_valid_out & local_bb1_memcoalesce_param_extrValue_6_valid_out);
assign rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_stall_out_0_reg_8_NO_SHIFT_REG = (~(rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_reg_8_inputs_ready_NO_SHIFT_REG) | rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_stall_out_0_reg_8_IP_NO_SHIFT_REG);
assign local_bb1_memcoalesce_param_extrValue_5_stall_in = rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_stall_out_0_reg_8_NO_SHIFT_REG;
assign local_bb1_memcoalesce_param_extrValue_6_stall_in = rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_stall_out_0_reg_8_NO_SHIFT_REG;
assign rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_NO_SHIFT_REG = rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_reg_8_NO_SHIFT_REG;
assign rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_stall_in_reg_8_NO_SHIFT_REG = rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_stall_in_NO_SHIFT_REG;
assign rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_valid_out_NO_SHIFT_REG = rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_valid_out_reg_8_NO_SHIFT_REG;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG;
 logic rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_5to7_bb1_memcoalesce_param_extrValue_8_1_NO_SHIFT_REG;
 logic rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_reg_7_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_reg_7_NO_SHIFT_REG;
 logic rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_valid_out_0_reg_7_NO_SHIFT_REG;
 logic rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_stall_in_0_reg_7_NO_SHIFT_REG;
 logic rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_stall_out_reg_7_NO_SHIFT_REG;
 reg rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_consumed_0_NO_SHIFT_REG;
 reg rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_reg_7_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_reg_7_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_stall_in_0_reg_7_NO_SHIFT_REG),
	.valid_out(rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_valid_out_0_reg_7_NO_SHIFT_REG),
	.stall_out(rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_stall_out_reg_7_NO_SHIFT_REG),
	.data_in(local_bb1_memcoalesce_param_extrValue_8),
	.data_out(rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_reg_7_NO_SHIFT_REG)
);

defparam rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_reg_7_fifo.DEPTH = 3;
defparam rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_reg_7_fifo.DATA_WIDTH = 32;
defparam rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_reg_7_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_reg_7_fifo.IMPL = "ll_reg";

assign rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_reg_7_inputs_ready_NO_SHIFT_REG = local_bb1_memcoalesce_param_extrValue_8_valid_out;
assign local_bb1_memcoalesce_param_extrValue_8_stall_in = rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_stall_out_reg_7_NO_SHIFT_REG;
assign rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_stall_in_0_reg_7_NO_SHIFT_REG = ((rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_stall_in_0_NO_SHIFT_REG & ~(rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_consumed_0_NO_SHIFT_REG)) | (rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_stall_in_1_NO_SHIFT_REG & ~(rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_consumed_1_NO_SHIFT_REG)));
assign rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_valid_out_0_NO_SHIFT_REG = (rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_valid_out_0_reg_7_NO_SHIFT_REG & ~(rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_consumed_0_NO_SHIFT_REG));
assign rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_valid_out_1_NO_SHIFT_REG = (rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_valid_out_0_reg_7_NO_SHIFT_REG & ~(rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_consumed_1_NO_SHIFT_REG));
assign rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG = rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_reg_7_NO_SHIFT_REG;
assign rnode_5to7_bb1_memcoalesce_param_extrValue_8_1_NO_SHIFT_REG = rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_reg_7_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_consumed_0_NO_SHIFT_REG <= (rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_valid_out_0_reg_7_NO_SHIFT_REG & (rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_consumed_0_NO_SHIFT_REG | ~(rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_stall_in_0_NO_SHIFT_REG)) & rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_stall_in_0_reg_7_NO_SHIFT_REG);
		rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_consumed_1_NO_SHIFT_REG <= (rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_valid_out_0_reg_7_NO_SHIFT_REG & (rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_consumed_1_NO_SHIFT_REG | ~(rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_stall_in_1_NO_SHIFT_REG)) & rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_stall_in_0_reg_7_NO_SHIFT_REG);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1_cmp2122_valid_out;
wire local_bb1_cmp2122_stall_in;
wire local_bb1_cmp2122_inputs_ready;
wire local_bb1_cmp2122_stall_local;
wire local_bb1_cmp2122;

assign local_bb1_cmp2122_inputs_ready = rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_valid_out_0_NO_SHIFT_REG;
assign local_bb1_cmp2122 = ($signed(rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_NO_SHIFT_REG) > $signed(32'h0));
assign local_bb1_cmp2122_valid_out = local_bb1_cmp2122_inputs_ready;
assign local_bb1_cmp2122_stall_local = local_bb1_cmp2122_stall_in;
assign rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_stall_in_0_NO_SHIFT_REG = (|local_bb1_cmp2122_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb1_c0_enter_c0_eni2_valid_out_0;
wire local_bb1_c0_enter_c0_eni2_stall_in_0;
wire local_bb1_c0_enter_c0_eni2_valid_out_1;
wire local_bb1_c0_enter_c0_eni2_stall_in_1;
wire local_bb1_c0_enter_c0_eni2_valid_out_2;
wire local_bb1_c0_enter_c0_eni2_stall_in_2;
wire local_bb1_c0_enter_c0_eni2_inputs_ready;
wire local_bb1_c0_enter_c0_eni2_stall_local;
wire local_bb1_c0_enter_c0_eni2_input_accepted;
wire [575:0] local_bb1_c0_enter_c0_eni2;
wire local_bb1_c0_exit_c0_exi2_enable;
wire local_bb1_c0_exit_c0_exi2_entry_stall;
wire local_bb1_c0_enter_c0_eni2_valid_bit;
wire local_bb1_c0_exit_c0_exi2_output_regs_ready;
wire local_bb1_c0_exit_c0_exi2_valid_in;
wire local_bb1_c0_exit_c0_exi2_phases;
wire local_bb1_c0_enter_c0_eni2_inc_pipelined_thread;
wire local_bb1_c0_enter_c0_eni2_dec_pipelined_thread;
wire local_bb1_c0_enter_c0_eni2_fu_stall_out;

assign local_bb1_c0_enter_c0_eni2_inputs_ready = local_bb1_c0_eni2_valid_out;
assign local_bb1_c0_enter_c0_eni2 = local_bb1_c0_eni2;
assign local_bb1_c0_enter_c0_eni2_input_accepted = (local_bb1_c0_enter_c0_eni2_inputs_ready && !(local_bb1_c0_exit_c0_exi2_entry_stall));
assign local_bb1_c0_enter_c0_eni2_valid_bit = local_bb1_c0_enter_c0_eni2_input_accepted;
assign local_bb1_c0_enter_c0_eni2_inc_pipelined_thread = 1'b1;
assign local_bb1_c0_enter_c0_eni2_dec_pipelined_thread = ~(1'b0);
assign local_bb1_c0_enter_c0_eni2_fu_stall_out = (~(local_bb1_c0_enter_c0_eni2_inputs_ready) | local_bb1_c0_exit_c0_exi2_entry_stall);
assign local_bb1_c0_enter_c0_eni2_stall_local = (local_bb1_c0_enter_c0_eni2_stall_in_0 | local_bb1_c0_enter_c0_eni2_stall_in_1 | local_bb1_c0_enter_c0_eni2_stall_in_2);
assign local_bb1_c0_enter_c0_eni2_valid_out_0 = local_bb1_c0_enter_c0_eni2_inputs_ready;
assign local_bb1_c0_enter_c0_eni2_valid_out_1 = local_bb1_c0_enter_c0_eni2_inputs_ready;
assign local_bb1_c0_enter_c0_eni2_valid_out_2 = local_bb1_c0_enter_c0_eni2_inputs_ready;
assign local_bb1_c0_eni2_stall_in = (|local_bb1_c0_enter_c0_eni2_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb1_cmp1130_valid_out;
wire local_bb1_cmp1130_stall_in;
wire local_bb1_cmp1130_inputs_ready;
wire local_bb1_cmp1130_stall_local;
wire local_bb1_cmp1130;
wire [96:0] rci_rcnode_7to8_rc0_bb1_cmp2122_0_reg_7;

assign local_bb1_cmp1130_inputs_ready = (rnode_5to7_input_global_id_2_0_valid_out_0_NO_SHIFT_REG & rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_valid_out_0_NO_SHIFT_REG);
assign local_bb1_cmp1130 = ($signed(rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG) > $signed(rnode_5to7_input_global_id_2_0_NO_SHIFT_REG));
assign local_bb1_cmp1130_valid_out = local_bb1_cmp1130_inputs_ready;
assign local_bb1_cmp1130_stall_local = local_bb1_cmp1130_stall_in;
assign rnode_5to7_input_global_id_2_0_stall_in_0_NO_SHIFT_REG = (local_bb1_cmp1130_stall_local | ~(local_bb1_cmp1130_inputs_ready));
assign rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_stall_in_0_NO_SHIFT_REG = (local_bb1_cmp1130_stall_local | ~(local_bb1_cmp1130_inputs_ready));
assign rci_rcnode_7to8_rc0_bb1_cmp2122_0_reg_7[0] = local_bb1_cmp2122;
assign rci_rcnode_7to8_rc0_bb1_cmp2122_0_reg_7[32:1] = rnode_5to7_input_global_id_2_1_NO_SHIFT_REG;
assign rci_rcnode_7to8_rc0_bb1_cmp2122_0_reg_7[64:33] = rnode_5to7_bb1_memcoalesce_param_extrValue_8_1_NO_SHIFT_REG;
assign rci_rcnode_7to8_rc0_bb1_cmp2122_0_reg_7[96:65] = rnode_5to7_bb1_memcoalesce_param_extrValue_2_1_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_7to8_rc0_bb1_cmp2122_0_valid_out_0_NO_SHIFT_REG;
 logic rcnode_7to8_rc0_bb1_cmp2122_0_stall_in_0_NO_SHIFT_REG;
 logic [96:0] rcnode_7to8_rc0_bb1_cmp2122_0_NO_SHIFT_REG;
 logic rcnode_7to8_rc0_bb1_cmp2122_0_valid_out_1_NO_SHIFT_REG;
 logic rcnode_7to8_rc0_bb1_cmp2122_0_stall_in_1_NO_SHIFT_REG;
 logic [96:0] rcnode_7to8_rc0_bb1_cmp2122_1_NO_SHIFT_REG;
 logic rcnode_7to8_rc0_bb1_cmp2122_0_reg_8_inputs_ready_NO_SHIFT_REG;
 logic [96:0] rcnode_7to8_rc0_bb1_cmp2122_0_reg_8_NO_SHIFT_REG;
 logic rcnode_7to8_rc0_bb1_cmp2122_0_valid_out_0_reg_8_NO_SHIFT_REG;
 logic rcnode_7to8_rc0_bb1_cmp2122_0_stall_in_0_reg_8_NO_SHIFT_REG;
 logic rcnode_7to8_rc0_bb1_cmp2122_0_stall_out_0_reg_8_IP_NO_SHIFT_REG;
 logic rcnode_7to8_rc0_bb1_cmp2122_0_stall_out_0_reg_8_NO_SHIFT_REG;

acl_data_fifo rcnode_7to8_rc0_bb1_cmp2122_0_reg_8_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_7to8_rc0_bb1_cmp2122_0_reg_8_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_7to8_rc0_bb1_cmp2122_0_stall_in_0_reg_8_NO_SHIFT_REG),
	.valid_out(rcnode_7to8_rc0_bb1_cmp2122_0_valid_out_0_reg_8_NO_SHIFT_REG),
	.stall_out(rcnode_7to8_rc0_bb1_cmp2122_0_stall_out_0_reg_8_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_7to8_rc0_bb1_cmp2122_0_reg_7),
	.data_out(rcnode_7to8_rc0_bb1_cmp2122_0_reg_8_NO_SHIFT_REG)
);

defparam rcnode_7to8_rc0_bb1_cmp2122_0_reg_8_fifo.DEPTH = 1;
defparam rcnode_7to8_rc0_bb1_cmp2122_0_reg_8_fifo.DATA_WIDTH = 97;
defparam rcnode_7to8_rc0_bb1_cmp2122_0_reg_8_fifo.ALLOW_FULL_WRITE = 1;
defparam rcnode_7to8_rc0_bb1_cmp2122_0_reg_8_fifo.IMPL = "ll_reg";

assign rcnode_7to8_rc0_bb1_cmp2122_0_reg_8_inputs_ready_NO_SHIFT_REG = (local_bb1_cmp2122_valid_out & rnode_5to7_input_global_id_2_0_valid_out_1_NO_SHIFT_REG & rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_valid_out_1_NO_SHIFT_REG & rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_valid_out_1_NO_SHIFT_REG);
assign rcnode_7to8_rc0_bb1_cmp2122_0_stall_out_0_reg_8_NO_SHIFT_REG = (~(rcnode_7to8_rc0_bb1_cmp2122_0_reg_8_inputs_ready_NO_SHIFT_REG) | rcnode_7to8_rc0_bb1_cmp2122_0_stall_out_0_reg_8_IP_NO_SHIFT_REG);
assign local_bb1_cmp2122_stall_in = rcnode_7to8_rc0_bb1_cmp2122_0_stall_out_0_reg_8_NO_SHIFT_REG;
assign rnode_5to7_input_global_id_2_0_stall_in_1_NO_SHIFT_REG = rcnode_7to8_rc0_bb1_cmp2122_0_stall_out_0_reg_8_NO_SHIFT_REG;
assign rnode_5to7_bb1_memcoalesce_param_extrValue_8_0_stall_in_1_NO_SHIFT_REG = rcnode_7to8_rc0_bb1_cmp2122_0_stall_out_0_reg_8_NO_SHIFT_REG;
assign rnode_5to7_bb1_memcoalesce_param_extrValue_2_0_stall_in_1_NO_SHIFT_REG = rcnode_7to8_rc0_bb1_cmp2122_0_stall_out_0_reg_8_NO_SHIFT_REG;
assign rcnode_7to8_rc0_bb1_cmp2122_0_stall_in_0_reg_8_NO_SHIFT_REG = (rcnode_7to8_rc0_bb1_cmp2122_0_stall_in_0_NO_SHIFT_REG | rcnode_7to8_rc0_bb1_cmp2122_0_stall_in_1_NO_SHIFT_REG);
assign rcnode_7to8_rc0_bb1_cmp2122_0_valid_out_0_NO_SHIFT_REG = rcnode_7to8_rc0_bb1_cmp2122_0_valid_out_0_reg_8_NO_SHIFT_REG;
assign rcnode_7to8_rc0_bb1_cmp2122_0_valid_out_1_NO_SHIFT_REG = rcnode_7to8_rc0_bb1_cmp2122_0_valid_out_0_reg_8_NO_SHIFT_REG;
assign rcnode_7to8_rc0_bb1_cmp2122_0_NO_SHIFT_REG = rcnode_7to8_rc0_bb1_cmp2122_0_reg_8_NO_SHIFT_REG;
assign rcnode_7to8_rc0_bb1_cmp2122_1_NO_SHIFT_REG = rcnode_7to8_rc0_bb1_cmp2122_0_reg_8_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb1_c0_ene1_stall_local;
wire [511:0] local_bb1_c0_ene1;

assign local_bb1_c0_ene1[31:0] = local_bb1_c0_enter_c0_eni2[39:8];
assign local_bb1_c0_ene1[63:32] = local_bb1_c0_enter_c0_eni2[71:40];
assign local_bb1_c0_ene1[95:64] = local_bb1_c0_enter_c0_eni2[103:72];
assign local_bb1_c0_ene1[127:96] = local_bb1_c0_enter_c0_eni2[135:104];
assign local_bb1_c0_ene1[191:128] = local_bb1_c0_enter_c0_eni2[199:136];
assign local_bb1_c0_ene1[223:192] = local_bb1_c0_enter_c0_eni2[231:200];
assign local_bb1_c0_ene1[255:224] = local_bb1_c0_enter_c0_eni2[263:232];
assign local_bb1_c0_ene1[319:256] = local_bb1_c0_enter_c0_eni2[327:264];
assign local_bb1_c0_ene1[351:320] = local_bb1_c0_enter_c0_eni2[359:328];
assign local_bb1_c0_ene1[383:352] = local_bb1_c0_enter_c0_eni2[391:360];
assign local_bb1_c0_ene1[447:384] = local_bb1_c0_enter_c0_eni2[455:392];
assign local_bb1_c0_ene1[511:448] = local_bb1_c0_enter_c0_eni2[519:456];

// This section implements an unregistered operation.
// 
wire local_bb1_c0_ene2_valid_out;
wire local_bb1_c0_ene2_stall_in;
wire local_bb1_c0_ene2_inputs_ready;
wire local_bb1_c0_ene2_stall_local;
wire [31:0] local_bb1_c0_ene2;

assign local_bb1_c0_ene2_inputs_ready = local_bb1_c0_enter_c0_eni2_valid_out_1;
assign local_bb1_c0_ene2[31:0] = local_bb1_c0_enter_c0_eni2[575:544];
assign local_bb1_c0_ene2_valid_out = 1'b1;
assign local_bb1_c0_enter_c0_eni2_stall_in_1 = 1'b0;

// This section implements an unregistered operation.
// 
wire SFC_1_VALID_5_5_0_valid_out;
wire SFC_1_VALID_5_5_0_stall_in;
wire SFC_1_VALID_5_5_0_inputs_ready;
wire SFC_1_VALID_5_5_0_stall_local;
wire SFC_1_VALID_5_5_0;

assign SFC_1_VALID_5_5_0_inputs_ready = local_bb1_c0_enter_c0_eni2_valid_out_2;
assign SFC_1_VALID_5_5_0 = local_bb1_c0_enter_c0_eni2_valid_bit;
assign SFC_1_VALID_5_5_0_valid_out = 1'b1;
assign local_bb1_c0_enter_c0_eni2_stall_in_2 = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_7to8_bb1_cmp1130_0_valid_out_NO_SHIFT_REG;
 logic rnode_7to8_bb1_cmp1130_0_stall_in_NO_SHIFT_REG;
 logic rnode_7to8_bb1_cmp1130_0_NO_SHIFT_REG;
 logic rnode_7to8_bb1_cmp1130_0_reg_8_inputs_ready_NO_SHIFT_REG;
 logic rnode_7to8_bb1_cmp1130_0_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb1_cmp1130_0_valid_out_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb1_cmp1130_0_stall_in_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb1_cmp1130_0_stall_out_reg_8_NO_SHIFT_REG;

acl_data_fifo rnode_7to8_bb1_cmp1130_0_reg_8_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_7to8_bb1_cmp1130_0_reg_8_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_7to8_bb1_cmp1130_0_stall_in_reg_8_NO_SHIFT_REG),
	.valid_out(rnode_7to8_bb1_cmp1130_0_valid_out_reg_8_NO_SHIFT_REG),
	.stall_out(rnode_7to8_bb1_cmp1130_0_stall_out_reg_8_NO_SHIFT_REG),
	.data_in(local_bb1_cmp1130),
	.data_out(rnode_7to8_bb1_cmp1130_0_reg_8_NO_SHIFT_REG)
);

defparam rnode_7to8_bb1_cmp1130_0_reg_8_fifo.DEPTH = 2;
defparam rnode_7to8_bb1_cmp1130_0_reg_8_fifo.DATA_WIDTH = 1;
defparam rnode_7to8_bb1_cmp1130_0_reg_8_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_7to8_bb1_cmp1130_0_reg_8_fifo.IMPL = "ll_reg";

assign rnode_7to8_bb1_cmp1130_0_reg_8_inputs_ready_NO_SHIFT_REG = local_bb1_cmp1130_valid_out;
assign local_bb1_cmp1130_stall_in = rnode_7to8_bb1_cmp1130_0_stall_out_reg_8_NO_SHIFT_REG;
assign rnode_7to8_bb1_cmp1130_0_NO_SHIFT_REG = rnode_7to8_bb1_cmp1130_0_reg_8_NO_SHIFT_REG;
assign rnode_7to8_bb1_cmp1130_0_stall_in_reg_8_NO_SHIFT_REG = rnode_7to8_bb1_cmp1130_0_stall_in_NO_SHIFT_REG;
assign rnode_7to8_bb1_cmp1130_0_valid_out_NO_SHIFT_REG = rnode_7to8_bb1_cmp1130_0_valid_out_reg_8_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb1_memcoalesce_param_extrValue_194_valid_out_0;
wire local_bb1_memcoalesce_param_extrValue_194_stall_in_0;
wire local_bb1_memcoalesce_param_extrValue_194_valid_out_1;
wire local_bb1_memcoalesce_param_extrValue_194_stall_in_1;
wire local_bb1_memcoalesce_param_extrValue_194_inputs_ready;
wire local_bb1_memcoalesce_param_extrValue_194_stall_local;
wire [31:0] local_bb1_memcoalesce_param_extrValue_194;

assign local_bb1_memcoalesce_param_extrValue_194_inputs_ready = local_bb1_c0_enter_c0_eni2_valid_out_0;
assign local_bb1_memcoalesce_param_extrValue_194[31:0] = local_bb1_c0_ene1[63:32];
assign local_bb1_memcoalesce_param_extrValue_194_valid_out_0 = 1'b1;
assign local_bb1_memcoalesce_param_extrValue_194_valid_out_1 = 1'b1;
assign local_bb1_c0_enter_c0_eni2_stall_in_0 = 1'b0;

// This section implements a registered operation.
// 
wire SFC_1_VALID_5_6_0_inputs_ready;
 reg SFC_1_VALID_5_6_0_valid_out_NO_SHIFT_REG;
wire SFC_1_VALID_5_6_0_stall_in;
wire SFC_1_VALID_5_6_0_output_regs_ready;
 reg SFC_1_VALID_5_6_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_1_VALID_5_6_0_causedstall;

assign SFC_1_VALID_5_6_0_inputs_ready = 1'b1;
assign SFC_1_VALID_5_6_0_output_regs_ready = local_bb1_c0_exit_c0_exi2_enable;
assign SFC_1_VALID_5_5_0_stall_in = 1'b0;
assign SFC_1_VALID_5_6_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c0_exit_c0_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_1_VALID_5_6_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_1_VALID_5_6_0_output_regs_ready)
		begin
			SFC_1_VALID_5_6_0_NO_SHIFT_REG <= SFC_1_VALID_5_5_0;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1_var__u0_stall_local;
wire local_bb1_var__u0;

assign local_bb1_var__u0 = (rnode_2to8_bb1_var__0_NO_SHIFT_REG & rnode_7to8_bb1_cmp1130_0_NO_SHIFT_REG);

// This section implements a registered operation.
// 
wire local_bb1_var__u1_inputs_ready;
 reg local_bb1_var__u1_valid_out_NO_SHIFT_REG;
wire local_bb1_var__u1_stall_in;
wire local_bb1_var__u1_output_regs_ready;
wire [31:0] local_bb1_var__u1;
 reg local_bb1_var__u1_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb1_var__u1_valid_pipe_1_NO_SHIFT_REG;
wire local_bb1_var__u1_causedstall;

acl_int_mult int_module_local_bb1_var__u1 (
	.clock(clock),
	.dataa(local_bb1_memcoalesce_param_extrValue_194),
	.datab(local_bb1_c0_ene2),
	.enable(local_bb1_var__u1_output_regs_ready),
	.result(local_bb1_var__u1)
);

defparam int_module_local_bb1_var__u1.INPUT1_WIDTH = 32;
defparam int_module_local_bb1_var__u1.INPUT2_WIDTH = 32;
defparam int_module_local_bb1_var__u1.OUTPUT_WIDTH = 32;
defparam int_module_local_bb1_var__u1.LATENCY = 3;
defparam int_module_local_bb1_var__u1.SIGNED = 0;

assign local_bb1_var__u1_inputs_ready = 1'b1;
assign local_bb1_var__u1_output_regs_ready = local_bb1_c0_exit_c0_exi2_enable;
assign local_bb1_memcoalesce_param_extrValue_194_stall_in_0 = 1'b0;
assign local_bb1_c0_ene2_stall_in = 1'b0;
assign local_bb1_var__u1_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c0_exit_c0_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb1_var__u1_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb1_var__u1_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb1_var__u1_output_regs_ready)
		begin
			local_bb1_var__u1_valid_pipe_0_NO_SHIFT_REG <= 1'b1;
			local_bb1_var__u1_valid_pipe_1_NO_SHIFT_REG <= local_bb1_var__u1_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb1_var__u1_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb1_var__u1_output_regs_ready)
		begin
			local_bb1_var__u1_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb1_var__u1_stall_in))
			begin
				local_bb1_var__u1_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_5to6_bb1_memcoalesce_param_extrValue_194_0_valid_out_NO_SHIFT_REG;
 logic rnode_5to6_bb1_memcoalesce_param_extrValue_194_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_5to6_bb1_memcoalesce_param_extrValue_194_0_NO_SHIFT_REG;
 logic rnode_5to6_bb1_memcoalesce_param_extrValue_194_0_reg_6_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_5to6_bb1_memcoalesce_param_extrValue_194_0_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb1_memcoalesce_param_extrValue_194_0_valid_out_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb1_memcoalesce_param_extrValue_194_0_stall_in_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb1_memcoalesce_param_extrValue_194_0_stall_out_reg_6_NO_SHIFT_REG;

acl_data_fifo rnode_5to6_bb1_memcoalesce_param_extrValue_194_0_reg_6_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_5to6_bb1_memcoalesce_param_extrValue_194_0_reg_6_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_5to6_bb1_memcoalesce_param_extrValue_194_0_stall_in_reg_6_NO_SHIFT_REG),
	.valid_out(rnode_5to6_bb1_memcoalesce_param_extrValue_194_0_valid_out_reg_6_NO_SHIFT_REG),
	.stall_out(rnode_5to6_bb1_memcoalesce_param_extrValue_194_0_stall_out_reg_6_NO_SHIFT_REG),
	.data_in(local_bb1_memcoalesce_param_extrValue_194),
	.data_out(rnode_5to6_bb1_memcoalesce_param_extrValue_194_0_reg_6_NO_SHIFT_REG)
);

defparam rnode_5to6_bb1_memcoalesce_param_extrValue_194_0_reg_6_fifo.DEPTH = 1;
defparam rnode_5to6_bb1_memcoalesce_param_extrValue_194_0_reg_6_fifo.DATA_WIDTH = 32;
defparam rnode_5to6_bb1_memcoalesce_param_extrValue_194_0_reg_6_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_5to6_bb1_memcoalesce_param_extrValue_194_0_reg_6_fifo.IMPL = "shift_reg";

assign rnode_5to6_bb1_memcoalesce_param_extrValue_194_0_reg_6_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb1_memcoalesce_param_extrValue_194_stall_in_1 = 1'b0;
assign rnode_5to6_bb1_memcoalesce_param_extrValue_194_0_NO_SHIFT_REG = rnode_5to6_bb1_memcoalesce_param_extrValue_194_0_reg_6_NO_SHIFT_REG;
assign rnode_5to6_bb1_memcoalesce_param_extrValue_194_0_stall_in_reg_6_NO_SHIFT_REG = ~(local_bb1_c0_exit_c0_exi2_enable);
assign rnode_5to6_bb1_memcoalesce_param_extrValue_194_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_1_VALID_6_7_0_inputs_ready;
 reg SFC_1_VALID_6_7_0_valid_out_NO_SHIFT_REG;
wire SFC_1_VALID_6_7_0_stall_in;
wire SFC_1_VALID_6_7_0_output_regs_ready;
 reg SFC_1_VALID_6_7_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_1_VALID_6_7_0_causedstall;

assign SFC_1_VALID_6_7_0_inputs_ready = 1'b1;
assign SFC_1_VALID_6_7_0_output_regs_ready = local_bb1_c0_exit_c0_exi2_enable;
assign SFC_1_VALID_5_6_0_stall_in = 1'b0;
assign SFC_1_VALID_6_7_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c0_exit_c0_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_1_VALID_6_7_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_1_VALID_6_7_0_output_regs_ready)
		begin
			SFC_1_VALID_6_7_0_NO_SHIFT_REG <= SFC_1_VALID_5_6_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1__phi_decision76_xor_or_demorgan_stall_local;
wire local_bb1__phi_decision76_xor_or_demorgan;

assign local_bb1__phi_decision76_xor_or_demorgan = (rcnode_7to8_rc0_bb1_cmp2122_0_NO_SHIFT_REG[0] & local_bb1_var__u0);

// This section implements an unregistered operation.
// 
wire local_bb1__phi_decision77_xor_stall_local;
wire local_bb1__phi_decision77_xor;

assign local_bb1__phi_decision77_xor = (local_bb1_var__u0 ^ 1'b1);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_6to7_bb1_memcoalesce_param_extrValue_194_0_valid_out_NO_SHIFT_REG;
 logic rnode_6to7_bb1_memcoalesce_param_extrValue_194_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_6to7_bb1_memcoalesce_param_extrValue_194_0_NO_SHIFT_REG;
 logic rnode_6to7_bb1_memcoalesce_param_extrValue_194_0_reg_7_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_6to7_bb1_memcoalesce_param_extrValue_194_0_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb1_memcoalesce_param_extrValue_194_0_valid_out_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb1_memcoalesce_param_extrValue_194_0_stall_in_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb1_memcoalesce_param_extrValue_194_0_stall_out_reg_7_NO_SHIFT_REG;

acl_data_fifo rnode_6to7_bb1_memcoalesce_param_extrValue_194_0_reg_7_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_6to7_bb1_memcoalesce_param_extrValue_194_0_reg_7_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_6to7_bb1_memcoalesce_param_extrValue_194_0_stall_in_reg_7_NO_SHIFT_REG),
	.valid_out(rnode_6to7_bb1_memcoalesce_param_extrValue_194_0_valid_out_reg_7_NO_SHIFT_REG),
	.stall_out(rnode_6to7_bb1_memcoalesce_param_extrValue_194_0_stall_out_reg_7_NO_SHIFT_REG),
	.data_in(rnode_5to6_bb1_memcoalesce_param_extrValue_194_0_NO_SHIFT_REG),
	.data_out(rnode_6to7_bb1_memcoalesce_param_extrValue_194_0_reg_7_NO_SHIFT_REG)
);

defparam rnode_6to7_bb1_memcoalesce_param_extrValue_194_0_reg_7_fifo.DEPTH = 1;
defparam rnode_6to7_bb1_memcoalesce_param_extrValue_194_0_reg_7_fifo.DATA_WIDTH = 32;
defparam rnode_6to7_bb1_memcoalesce_param_extrValue_194_0_reg_7_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_6to7_bb1_memcoalesce_param_extrValue_194_0_reg_7_fifo.IMPL = "shift_reg";

assign rnode_6to7_bb1_memcoalesce_param_extrValue_194_0_reg_7_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_5to6_bb1_memcoalesce_param_extrValue_194_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_6to7_bb1_memcoalesce_param_extrValue_194_0_NO_SHIFT_REG = rnode_6to7_bb1_memcoalesce_param_extrValue_194_0_reg_7_NO_SHIFT_REG;
assign rnode_6to7_bb1_memcoalesce_param_extrValue_194_0_stall_in_reg_7_NO_SHIFT_REG = ~(local_bb1_c0_exit_c0_exi2_enable);
assign rnode_6to7_bb1_memcoalesce_param_extrValue_194_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_1_VALID_7_8_0_inputs_ready;
 reg SFC_1_VALID_7_8_0_valid_out_NO_SHIFT_REG;
wire SFC_1_VALID_7_8_0_stall_in;
wire SFC_1_VALID_7_8_0_output_regs_ready;
 reg SFC_1_VALID_7_8_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_1_VALID_7_8_0_causedstall;

assign SFC_1_VALID_7_8_0_inputs_ready = 1'b1;
assign SFC_1_VALID_7_8_0_output_regs_ready = local_bb1_c0_exit_c0_exi2_enable;
assign SFC_1_VALID_6_7_0_stall_in = 1'b0;
assign SFC_1_VALID_7_8_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c0_exit_c0_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_1_VALID_7_8_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_1_VALID_7_8_0_output_regs_ready)
		begin
			SFC_1_VALID_7_8_0_NO_SHIFT_REG <= SFC_1_VALID_6_7_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1__phi_decision76_xor_or_valid_out;
wire local_bb1__phi_decision76_xor_or_stall_in;
wire local_bb1_var__u0_valid_out_2;
wire local_bb1_var__u0_stall_in_2;
wire local_bb1__phi_decision77_xor_valid_out;
wire local_bb1__phi_decision77_xor_stall_in;
wire local_bb1__phi_decision76_xor_or_inputs_ready;
wire local_bb1__phi_decision76_xor_or_stall_local;
wire local_bb1__phi_decision76_xor_or;

assign local_bb1__phi_decision76_xor_or_inputs_ready = (rcnode_7to8_rc0_bb1_cmp2122_0_valid_out_0_NO_SHIFT_REG & rnode_2to8_bb1_var__0_valid_out_0_NO_SHIFT_REG & rnode_7to8_bb1_cmp1130_0_valid_out_NO_SHIFT_REG);
assign local_bb1__phi_decision76_xor_or = (local_bb1__phi_decision76_xor_or_demorgan ^ 1'b1);
assign local_bb1__phi_decision76_xor_or_stall_local = (local_bb1__phi_decision76_xor_or_stall_in | local_bb1_var__u0_stall_in_2 | local_bb1__phi_decision77_xor_stall_in);
assign local_bb1__phi_decision76_xor_or_valid_out = local_bb1__phi_decision76_xor_or_inputs_ready;
assign local_bb1_var__u0_valid_out_2 = local_bb1__phi_decision76_xor_or_inputs_ready;
assign local_bb1__phi_decision77_xor_valid_out = local_bb1__phi_decision76_xor_or_inputs_ready;
assign rcnode_7to8_rc0_bb1_cmp2122_0_stall_in_0_NO_SHIFT_REG = (local_bb1__phi_decision76_xor_or_stall_local | ~(local_bb1__phi_decision76_xor_or_inputs_ready));
assign rnode_2to8_bb1_var__0_stall_in_0_NO_SHIFT_REG = (local_bb1__phi_decision76_xor_or_stall_local | ~(local_bb1__phi_decision76_xor_or_inputs_ready));
assign rnode_7to8_bb1_cmp1130_0_stall_in_NO_SHIFT_REG = (local_bb1__phi_decision76_xor_or_stall_local | ~(local_bb1__phi_decision76_xor_or_inputs_ready));

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_valid_out_NO_SHIFT_REG;
 logic rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_NO_SHIFT_REG;
 logic rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_reg_8_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_valid_out_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_stall_in_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_stall_out_reg_8_NO_SHIFT_REG;

acl_data_fifo rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_reg_8_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_reg_8_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_stall_in_reg_8_NO_SHIFT_REG),
	.valid_out(rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_valid_out_reg_8_NO_SHIFT_REG),
	.stall_out(rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_stall_out_reg_8_NO_SHIFT_REG),
	.data_in(rnode_6to7_bb1_memcoalesce_param_extrValue_194_0_NO_SHIFT_REG),
	.data_out(rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_reg_8_NO_SHIFT_REG)
);

defparam rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_reg_8_fifo.DEPTH = 1;
defparam rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_reg_8_fifo.DATA_WIDTH = 32;
defparam rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_reg_8_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_reg_8_fifo.IMPL = "shift_reg";

assign rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_reg_8_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_6to7_bb1_memcoalesce_param_extrValue_194_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_NO_SHIFT_REG = rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_reg_8_NO_SHIFT_REG;
assign rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_stall_in_reg_8_NO_SHIFT_REG = ~(local_bb1_c0_exit_c0_exi2_enable);
assign rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb1_c0_exi1_stall_local;
wire [95:0] local_bb1_c0_exi1;

assign local_bb1_c0_exi1[31:0] = 32'bx;
assign local_bb1_c0_exi1[63:32] = rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_NO_SHIFT_REG;
assign local_bb1_c0_exi1[95:64] = 32'bx;

// This section implements an unregistered operation.
// 
wire local_bb1_c0_exi2_valid_out;
wire local_bb1_c0_exi2_stall_in;
wire local_bb1_c0_exi2_inputs_ready;
wire local_bb1_c0_exi2_stall_local;
wire [95:0] local_bb1_c0_exi2;

assign local_bb1_c0_exi2_inputs_ready = (local_bb1_var__u1_valid_out_NO_SHIFT_REG & rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_valid_out_NO_SHIFT_REG);
assign local_bb1_c0_exi2[63:0] = local_bb1_c0_exi1[63:0];
assign local_bb1_c0_exi2[95:64] = local_bb1_var__u1;
assign local_bb1_c0_exi2_valid_out = 1'b1;
assign local_bb1_var__u1_stall_in = 1'b0;
assign rnode_7to8_bb1_memcoalesce_param_extrValue_194_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c0_exit_c0_exi2_valid_out;
wire local_bb1_c0_exit_c0_exi2_stall_in;
wire local_bb1_c0_exit_c0_exi2_inputs_ready;
wire local_bb1_c0_exit_c0_exi2_stall_local;
wire [95:0] local_bb1_c0_exit_c0_exi2;
wire local_bb1_c0_exit_c0_exi2_valid;
wire local_bb1_c0_exit_c0_exi2_fu_stall_out;

acl_enable_sink local_bb1_c0_exit_c0_exi2_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb1_c0_exi2),
	.data_out(local_bb1_c0_exit_c0_exi2),
	.input_accepted(local_bb1_c0_enter_c0_eni2_input_accepted),
	.valid_out(local_bb1_c0_exit_c0_exi2_valid),
	.stall_in(local_bb1_c0_exit_c0_exi2_stall_local),
	.enable(local_bb1_c0_exit_c0_exi2_enable),
	.valid_in(local_bb1_c0_exit_c0_exi2_valid_in),
	.stall_entry(local_bb1_c0_exit_c0_exi2_entry_stall),
	.inc_pipelined_thread(local_bb1_c0_enter_c0_eni2_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb1_c0_enter_c0_eni2_dec_pipelined_thread)
);

defparam local_bb1_c0_exit_c0_exi2_instance.DATA_WIDTH = 96;
defparam local_bb1_c0_exit_c0_exi2_instance.PIPELINE_DEPTH = 3;
defparam local_bb1_c0_exit_c0_exi2_instance.SCHEDULEII = 1;
defparam local_bb1_c0_exit_c0_exi2_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb1_c0_exit_c0_exi2_inputs_ready = (local_bb1_c0_exi2_valid_out & SFC_1_VALID_7_8_0_valid_out_NO_SHIFT_REG);
assign local_bb1_c0_exit_c0_exi2_valid_in = SFC_1_VALID_7_8_0_NO_SHIFT_REG;
assign local_bb1_c0_exit_c0_exi2_fu_stall_out = ~(local_bb1_c0_exit_c0_exi2_enable);
assign local_bb1_c0_exit_c0_exi2_valid_out = local_bb1_c0_exit_c0_exi2_valid;
assign local_bb1_c0_exit_c0_exi2_stall_local = local_bb1_c0_exit_c0_exi2_stall_in;
assign local_bb1_c0_exi2_stall_in = 1'b0;
assign SFC_1_VALID_7_8_0_stall_in = 1'b0;

// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_8to8_bb1_c0_exit_c0_exi2_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_8to8_bb1_c0_exit_c0_exi2_0_stall_in_0_NO_SHIFT_REG;
 logic [95:0] rnode_8to8_bb1_c0_exit_c0_exi2_0_NO_SHIFT_REG;
 logic rnode_8to8_bb1_c0_exit_c0_exi2_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_8to8_bb1_c0_exit_c0_exi2_0_stall_in_1_NO_SHIFT_REG;
 logic [95:0] rnode_8to8_bb1_c0_exit_c0_exi2_1_NO_SHIFT_REG;
 logic rnode_8to8_bb1_c0_exit_c0_exi2_0_reg_8_inputs_ready_NO_SHIFT_REG;
 logic [95:0] rnode_8to8_bb1_c0_exit_c0_exi2_0_reg_8_NO_SHIFT_REG;
 logic rnode_8to8_bb1_c0_exit_c0_exi2_0_valid_out_0_reg_8_NO_SHIFT_REG;
 logic rnode_8to8_bb1_c0_exit_c0_exi2_0_stall_in_0_reg_8_NO_SHIFT_REG;
 logic rnode_8to8_bb1_c0_exit_c0_exi2_0_stall_out_reg_8_NO_SHIFT_REG;

acl_data_fifo rnode_8to8_bb1_c0_exit_c0_exi2_0_reg_8_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_8to8_bb1_c0_exit_c0_exi2_0_reg_8_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_8to8_bb1_c0_exit_c0_exi2_0_stall_in_0_reg_8_NO_SHIFT_REG),
	.valid_out(rnode_8to8_bb1_c0_exit_c0_exi2_0_valid_out_0_reg_8_NO_SHIFT_REG),
	.stall_out(rnode_8to8_bb1_c0_exit_c0_exi2_0_stall_out_reg_8_NO_SHIFT_REG),
	.data_in(local_bb1_c0_exit_c0_exi2),
	.data_out(rnode_8to8_bb1_c0_exit_c0_exi2_0_reg_8_NO_SHIFT_REG)
);

defparam rnode_8to8_bb1_c0_exit_c0_exi2_0_reg_8_fifo.DEPTH = 3;
defparam rnode_8to8_bb1_c0_exit_c0_exi2_0_reg_8_fifo.DATA_WIDTH = 96;
defparam rnode_8to8_bb1_c0_exit_c0_exi2_0_reg_8_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_8to8_bb1_c0_exit_c0_exi2_0_reg_8_fifo.IMPL = "zl_reg";

assign rnode_8to8_bb1_c0_exit_c0_exi2_0_reg_8_inputs_ready_NO_SHIFT_REG = local_bb1_c0_exit_c0_exi2_valid_out;
assign local_bb1_c0_exit_c0_exi2_stall_in = rnode_8to8_bb1_c0_exit_c0_exi2_0_stall_out_reg_8_NO_SHIFT_REG;
assign rnode_8to8_bb1_c0_exit_c0_exi2_0_stall_in_0_reg_8_NO_SHIFT_REG = (rnode_8to8_bb1_c0_exit_c0_exi2_0_stall_in_0_NO_SHIFT_REG | rnode_8to8_bb1_c0_exit_c0_exi2_0_stall_in_1_NO_SHIFT_REG);
assign rnode_8to8_bb1_c0_exit_c0_exi2_0_valid_out_0_NO_SHIFT_REG = rnode_8to8_bb1_c0_exit_c0_exi2_0_valid_out_0_reg_8_NO_SHIFT_REG;
assign rnode_8to8_bb1_c0_exit_c0_exi2_0_valid_out_1_NO_SHIFT_REG = rnode_8to8_bb1_c0_exit_c0_exi2_0_valid_out_0_reg_8_NO_SHIFT_REG;
assign rnode_8to8_bb1_c0_exit_c0_exi2_0_NO_SHIFT_REG = rnode_8to8_bb1_c0_exit_c0_exi2_0_reg_8_NO_SHIFT_REG;
assign rnode_8to8_bb1_c0_exit_c0_exi2_1_NO_SHIFT_REG = rnode_8to8_bb1_c0_exit_c0_exi2_0_reg_8_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb1_c0_exe2_stall_local;
wire [31:0] local_bb1_c0_exe2;

assign local_bb1_c0_exe2[31:0] = rnode_8to8_bb1_c0_exit_c0_exi2_0_NO_SHIFT_REG[95:64];

// This section implements an unregistered operation.
// 
wire local_bb1_c0_exe2_valid_out;
wire local_bb1_c0_exe2_stall_in;
wire local_bb1_c0_exe1_valid_out;
wire local_bb1_c0_exe1_stall_in;
wire local_bb1_c0_exe1_inputs_ready;
wire local_bb1_c0_exe1_stall_local;
wire [31:0] local_bb1_c0_exe1;

assign local_bb1_c0_exe1_inputs_ready = (rnode_8to8_bb1_c0_exit_c0_exi2_0_valid_out_0_NO_SHIFT_REG & rnode_8to8_bb1_c0_exit_c0_exi2_0_valid_out_1_NO_SHIFT_REG);
assign local_bb1_c0_exe1[31:0] = rnode_8to8_bb1_c0_exit_c0_exi2_1_NO_SHIFT_REG[63:32];
assign local_bb1_c0_exe1_stall_local = (local_bb1_c0_exe2_stall_in | local_bb1_c0_exe1_stall_in);
assign local_bb1_c0_exe2_valid_out = local_bb1_c0_exe1_inputs_ready;
assign local_bb1_c0_exe1_valid_out = local_bb1_c0_exe1_inputs_ready;
assign rnode_8to8_bb1_c0_exit_c0_exi2_0_stall_in_0_NO_SHIFT_REG = (local_bb1_c0_exe1_stall_local | ~(local_bb1_c0_exe1_inputs_ready));
assign rnode_8to8_bb1_c0_exit_c0_exi2_0_stall_in_1_NO_SHIFT_REG = (local_bb1_c0_exe1_stall_local | ~(local_bb1_c0_exe1_inputs_ready));

// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg lvb_bb1_cmp48_reg_NO_SHIFT_REG;
 reg lvb_bb1_var__reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb1_memcoalesce_param_extrValue_8_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb1_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb1_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb1_c0_exe1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb1_c0_exe2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb1_memcoalesce_param_extrValue_2_reg_NO_SHIFT_REG;
 reg lvb_bb1_cmp2122_reg_NO_SHIFT_REG;
 reg lvb_bb1_var__u0_reg_NO_SHIFT_REG;
 reg lvb_bb1__phi_decision77_xor_reg_NO_SHIFT_REG;
 reg lvb_bb1__phi_decision76_xor_or_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb1__phi_decision76_xor_or_valid_out & local_bb1__phi_decision77_xor_valid_out & local_bb1_c0_exe2_valid_out & local_bb1_c0_exe1_valid_out & local_bb1_var__u0_valid_out_2 & rnode_2to8_bb1_var__0_valid_out_1_NO_SHIFT_REG & rnode_2to8_bb1_cmp48_0_valid_out_NO_SHIFT_REG & rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_valid_out_NO_SHIFT_REG & rcnode_7to8_rc0_bb1_cmp2122_0_valid_out_1_NO_SHIFT_REG & rcnode_1to8_rc4_input_global_id_0_0_valid_out_NO_SHIFT_REG);
assign branch_var__output_regs_ready = (~(stall_in) | ~(branch_node_valid_out_NO_SHIFT_REG));
assign local_bb1__phi_decision76_xor_or_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb1__phi_decision77_xor_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb1_c0_exe2_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb1_c0_exe1_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb1_var__u0_stall_in_2 = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_2to8_bb1_var__0_stall_in_1_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_2to8_bb1_cmp48_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_7to8_rc0_bb1_cmp2122_0_stall_in_1_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_1to8_rc4_input_global_id_0_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_bb1_cmp48 = lvb_bb1_cmp48_reg_NO_SHIFT_REG;
assign lvb_bb1_var_ = lvb_bb1_var__reg_NO_SHIFT_REG;
assign lvb_bb1_memcoalesce_param_extrValue_8 = lvb_bb1_memcoalesce_param_extrValue_8_reg_NO_SHIFT_REG;
assign lvb_bb1_memcoalesce_param_extrValue_5 = lvb_bb1_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG;
assign lvb_bb1_memcoalesce_param_extrValue_6 = lvb_bb1_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG;
assign lvb_bb1_c0_exe1 = lvb_bb1_c0_exe1_reg_NO_SHIFT_REG;
assign lvb_bb1_c0_exe2 = lvb_bb1_c0_exe2_reg_NO_SHIFT_REG;
assign lvb_bb1_memcoalesce_param_extrValue_2 = lvb_bb1_memcoalesce_param_extrValue_2_reg_NO_SHIFT_REG;
assign lvb_bb1_cmp2122 = lvb_bb1_cmp2122_reg_NO_SHIFT_REG;
assign lvb_bb1_var__u0 = lvb_bb1_var__u0_reg_NO_SHIFT_REG;
assign lvb_bb1__phi_decision77_xor = lvb_bb1__phi_decision77_xor_reg_NO_SHIFT_REG;
assign lvb_bb1__phi_decision76_xor_or = lvb_bb1__phi_decision76_xor_or_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0 = lvb_input_global_id_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1 = lvb_input_global_id_1_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2 = lvb_input_global_id_2_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id = lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;
assign combined_branch_stall_in_signal = stall_in;
assign valid_out = branch_node_valid_out_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
		lvb_bb1_cmp48_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_var__reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_memcoalesce_param_extrValue_8_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_c0_exe1_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_c0_exe2_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_memcoalesce_param_extrValue_2_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_cmp2122_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_var__u0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1__phi_decision77_xor_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1__phi_decision76_xor_or_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_bb1_cmp48_reg_NO_SHIFT_REG <= rnode_2to8_bb1_cmp48_0_NO_SHIFT_REG;
			lvb_bb1_var__reg_NO_SHIFT_REG <= rnode_2to8_bb1_var__1_NO_SHIFT_REG;
			lvb_bb1_memcoalesce_param_extrValue_8_reg_NO_SHIFT_REG <= rcnode_7to8_rc0_bb1_cmp2122_0_NO_SHIFT_REG[64:33];
			lvb_bb1_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG <= rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_NO_SHIFT_REG[31:0];
			lvb_bb1_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG <= rcnode_5to8_rc0_bb1_memcoalesce_param_extrValue_5_0_NO_SHIFT_REG[63:32];
			lvb_bb1_c0_exe1_reg_NO_SHIFT_REG <= local_bb1_c0_exe1;
			lvb_bb1_c0_exe2_reg_NO_SHIFT_REG <= local_bb1_c0_exe2;
			lvb_bb1_memcoalesce_param_extrValue_2_reg_NO_SHIFT_REG <= rcnode_7to8_rc0_bb1_cmp2122_0_NO_SHIFT_REG[96:65];
			lvb_bb1_cmp2122_reg_NO_SHIFT_REG <= rcnode_7to8_rc0_bb1_cmp2122_0_NO_SHIFT_REG[0];
			lvb_bb1_var__u0_reg_NO_SHIFT_REG <= local_bb1_var__u0;
			lvb_bb1__phi_decision77_xor_reg_NO_SHIFT_REG <= local_bb1__phi_decision77_xor;
			lvb_bb1__phi_decision76_xor_or_reg_NO_SHIFT_REG <= local_bb1__phi_decision76_xor_or;
			lvb_input_global_id_0_reg_NO_SHIFT_REG <= rcnode_1to8_rc4_input_global_id_0_0_NO_SHIFT_REG[31:0];
			lvb_input_global_id_1_reg_NO_SHIFT_REG <= rcnode_1to8_rc4_input_global_id_0_0_NO_SHIFT_REG[63:32];
			lvb_input_global_id_2_reg_NO_SHIFT_REG <= rcnode_7to8_rc0_bb1_cmp2122_0_NO_SHIFT_REG[32:1];
			lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= rcnode_1to8_rc4_input_global_id_0_0_NO_SHIFT_REG[95:64];
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module poolingLayer_basic_block_2
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_0,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_1,
		input 		valid_in_0,
		output 		stall_out_0,
		input 		input_cmp48_0,
		input 		input_var__0,
		input [31:0] 		input_memcoalesce_param_extrValue_8_0,
		input [31:0] 		input_memcoalesce_param_extrValue_5_0,
		input [31:0] 		input_memcoalesce_param_extrValue_6_0,
		input [31:0] 		input_c0_exe1_0,
		input [31:0] 		input_c0_exe2_0,
		input [31:0] 		input_memcoalesce_param_extrValue_2_0,
		input 		input_cmp2122_0,
		input 		input_var__u2_0,
		input 		input__phi_decision77_xor_0,
		input 		input__phi_decision76_xor_or_0,
		input [31:0] 		input_channelCounter_049_0,
		input [31:0] 		input_global_id_0_0,
		input [31:0] 		input_global_id_1_0,
		input [31:0] 		input_global_id_2_0,
		input [31:0] 		input_acl_hw_wg_id_0,
		input 		valid_in_1,
		output 		stall_out_1,
		input 		input_cmp48_1,
		input 		input_var__1,
		input [31:0] 		input_memcoalesce_param_extrValue_8_1,
		input [31:0] 		input_memcoalesce_param_extrValue_5_1,
		input [31:0] 		input_memcoalesce_param_extrValue_6_1,
		input [31:0] 		input_c0_exe1_1,
		input [31:0] 		input_c0_exe2_1,
		input [31:0] 		input_memcoalesce_param_extrValue_2_1,
		input 		input_cmp2122_1,
		input 		input_var__u2_1,
		input 		input__phi_decision77_xor_1,
		input 		input__phi_decision76_xor_or_1,
		input [31:0] 		input_channelCounter_049_1,
		input [31:0] 		input_global_id_0_1,
		input [31:0] 		input_global_id_1_1,
		input [31:0] 		input_global_id_2_1,
		input [31:0] 		input_acl_hw_wg_id_1,
		output 		valid_out,
		input 		stall_in,
		output 		lvb_cmp48,
		output 		lvb_var_,
		output [31:0] 		lvb_memcoalesce_param_extrValue_8,
		output [31:0] 		lvb_memcoalesce_param_extrValue_5,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6,
		output [31:0] 		lvb_c0_exe1,
		output [31:0] 		lvb_c0_exe2,
		output [31:0] 		lvb_memcoalesce_param_extrValue_2,
		output 		lvb_cmp2122,
		output 		lvb_var__u2,
		output 		lvb__phi_decision77_xor,
		output 		lvb__phi_decision76_xor_or,
		output [31:0] 		lvb_channelCounter_049,
		output [31:0] 		lvb_bb2_mul50,
		output [31:0] 		lvb_bb2_mul,
		output [31:0] 		lvb_input_global_id_0,
		output [31:0] 		lvb_input_global_id_1,
		output [31:0] 		lvb_input_global_id_2,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		input 		start
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((valid_in_0 & valid_in_1) & ~((stall_out_0 | stall_out_1)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
 reg input_cmp48_0_staging_reg_NO_SHIFT_REG;
 reg input_var__0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_8_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe1_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe2_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_2_0_staging_reg_NO_SHIFT_REG;
 reg input_cmp2122_0_staging_reg_NO_SHIFT_REG;
 reg input_var__u2_0_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision77_xor_0_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision76_xor_or_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_049_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
 reg local_lvm_cmp48_NO_SHIFT_REG;
 reg local_lvm_var__NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
 reg [31:0] local_lvm_c0_exe1_NO_SHIFT_REG;
 reg [31:0] local_lvm_c0_exe2_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG;
 reg local_lvm_cmp2122_NO_SHIFT_REG;
 reg local_lvm_var__u2_NO_SHIFT_REG;
 reg local_lvm__phi_decision77_xor_NO_SHIFT_REG;
 reg local_lvm__phi_decision76_xor_or_NO_SHIFT_REG;
 reg [31:0] local_lvm_channelCounter_049_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_0_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;
 reg input_cmp48_1_staging_reg_NO_SHIFT_REG;
 reg input_var__1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_8_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe1_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe2_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_2_1_staging_reg_NO_SHIFT_REG;
 reg input_cmp2122_1_staging_reg_NO_SHIFT_REG;
 reg input_var__u2_1_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision77_xor_1_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision76_xor_or_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_049_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG));
assign stall_out_0 = merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
assign stall_out_1 = merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_0_staging_reg_NO_SHIFT_REG | valid_in_0))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		if ((merge_node_valid_in_1_staging_reg_NO_SHIFT_REG | valid_in_1))
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b1;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
		end
		else
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b0;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_cmp48_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_8_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe1_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp2122_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision77_xor_0_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision76_xor_or_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_049_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_0_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		input_cmp48_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_8_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe1_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp2122_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision77_xor_1_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision76_xor_or_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_049_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_0_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_0_staging_reg_NO_SHIFT_REG))
			begin
				input_cmp48_0_staging_reg_NO_SHIFT_REG <= input_cmp48_0;
				input_var__0_staging_reg_NO_SHIFT_REG <= input_var__0;
				input_memcoalesce_param_extrValue_8_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_0;
				input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_0;
				input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_0;
				input_c0_exe1_0_staging_reg_NO_SHIFT_REG <= input_c0_exe1_0;
				input_c0_exe2_0_staging_reg_NO_SHIFT_REG <= input_c0_exe2_0;
				input_memcoalesce_param_extrValue_2_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_0;
				input_cmp2122_0_staging_reg_NO_SHIFT_REG <= input_cmp2122_0;
				input_var__u2_0_staging_reg_NO_SHIFT_REG <= input_var__u2_0;
				input__phi_decision77_xor_0_staging_reg_NO_SHIFT_REG <= input__phi_decision77_xor_0;
				input__phi_decision76_xor_or_0_staging_reg_NO_SHIFT_REG <= input__phi_decision76_xor_or_0;
				input_channelCounter_049_0_staging_reg_NO_SHIFT_REG <= input_channelCounter_049_0;
				input_global_id_0_0_staging_reg_NO_SHIFT_REG <= input_global_id_0_0;
				input_global_id_1_0_staging_reg_NO_SHIFT_REG <= input_global_id_1_0;
				input_global_id_2_0_staging_reg_NO_SHIFT_REG <= input_global_id_2_0;
				input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= valid_in_0;
			end
		end
		else
		begin
			merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
		if (((merge_block_selector_NO_SHIFT_REG != 1'b1) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_1_staging_reg_NO_SHIFT_REG))
			begin
				input_cmp48_1_staging_reg_NO_SHIFT_REG <= input_cmp48_1;
				input_var__1_staging_reg_NO_SHIFT_REG <= input_var__1;
				input_memcoalesce_param_extrValue_8_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_1;
				input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_1;
				input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_1;
				input_c0_exe1_1_staging_reg_NO_SHIFT_REG <= input_c0_exe1_1;
				input_c0_exe2_1_staging_reg_NO_SHIFT_REG <= input_c0_exe2_1;
				input_memcoalesce_param_extrValue_2_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_1;
				input_cmp2122_1_staging_reg_NO_SHIFT_REG <= input_cmp2122_1;
				input_var__u2_1_staging_reg_NO_SHIFT_REG <= input_var__u2_1;
				input__phi_decision77_xor_1_staging_reg_NO_SHIFT_REG <= input__phi_decision77_xor_1;
				input__phi_decision76_xor_or_1_staging_reg_NO_SHIFT_REG <= input__phi_decision76_xor_or_1;
				input_channelCounter_049_1_staging_reg_NO_SHIFT_REG <= input_channelCounter_049_1;
				input_global_id_0_1_staging_reg_NO_SHIFT_REG <= input_global_id_0_1;
				input_global_id_1_1_staging_reg_NO_SHIFT_REG <= input_global_id_1_1;
				input_global_id_2_1_staging_reg_NO_SHIFT_REG <= input_global_id_2_1;
				input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= valid_in_1;
			end
		end
		else
		begin
			merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_0_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_cmp48_NO_SHIFT_REG <= input_cmp48_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_0_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe2_NO_SHIFT_REG <= input_c0_exe2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp2122_NO_SHIFT_REG <= input_cmp2122_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u2_NO_SHIFT_REG <= input_var__u2_0_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision77_xor_NO_SHIFT_REG <= input__phi_decision77_xor_0_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision76_xor_or_NO_SHIFT_REG <= input__phi_decision76_xor_or_0_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_049_NO_SHIFT_REG <= input_channelCounter_049_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_cmp48_NO_SHIFT_REG <= input_cmp48_0;
					local_lvm_var__NO_SHIFT_REG <= input_var__0;
					local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_0;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_0;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_0;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_0;
					local_lvm_c0_exe2_NO_SHIFT_REG <= input_c0_exe2_0;
					local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_0;
					local_lvm_cmp2122_NO_SHIFT_REG <= input_cmp2122_0;
					local_lvm_var__u2_NO_SHIFT_REG <= input_var__u2_0;
					local_lvm__phi_decision77_xor_NO_SHIFT_REG <= input__phi_decision77_xor_0;
					local_lvm__phi_decision76_xor_or_NO_SHIFT_REG <= input__phi_decision76_xor_or_0;
					local_lvm_channelCounter_049_NO_SHIFT_REG <= input_channelCounter_049_0;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_0;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_0;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				end
			end

			1'b1:
			begin
				if (merge_node_valid_in_1_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_cmp48_NO_SHIFT_REG <= input_cmp48_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_1_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe2_NO_SHIFT_REG <= input_c0_exe2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp2122_NO_SHIFT_REG <= input_cmp2122_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u2_NO_SHIFT_REG <= input_var__u2_1_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision77_xor_NO_SHIFT_REG <= input__phi_decision77_xor_1_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision76_xor_or_NO_SHIFT_REG <= input__phi_decision76_xor_or_1_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_049_NO_SHIFT_REG <= input_channelCounter_049_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_cmp48_NO_SHIFT_REG <= input_cmp48_1;
					local_lvm_var__NO_SHIFT_REG <= input_var__1;
					local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_1;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_1;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_1;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_1;
					local_lvm_c0_exe2_NO_SHIFT_REG <= input_c0_exe2_1;
					local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_1;
					local_lvm_cmp2122_NO_SHIFT_REG <= input_cmp2122_1;
					local_lvm_var__u2_NO_SHIFT_REG <= input_var__u2_1;
					local_lvm__phi_decision77_xor_NO_SHIFT_REG <= input__phi_decision77_xor_1;
					local_lvm__phi_decision76_xor_or_NO_SHIFT_REG <= input__phi_decision76_xor_or_1;
					local_lvm_channelCounter_049_NO_SHIFT_REG <= input_channelCounter_049_1;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_1;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_1;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements a registered operation.
// 
wire local_bb2_mul50_inputs_ready;
 reg local_bb2_mul50_valid_out_NO_SHIFT_REG;
wire local_bb2_mul50_stall_in;
wire local_bb2_mul50_output_regs_ready;
wire [31:0] local_bb2_mul50;
 reg local_bb2_mul50_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb2_mul50_valid_pipe_1_NO_SHIFT_REG;
wire local_bb2_mul50_causedstall;

acl_int_mult int_module_local_bb2_mul50 (
	.clock(clock),
	.dataa(input_wii_memcoalesce_param_extrValue_1),
	.datab(local_lvm_channelCounter_049_NO_SHIFT_REG),
	.enable(local_bb2_mul50_output_regs_ready),
	.result(local_bb2_mul50)
);

defparam int_module_local_bb2_mul50.INPUT1_WIDTH = 32;
defparam int_module_local_bb2_mul50.INPUT2_WIDTH = 32;
defparam int_module_local_bb2_mul50.OUTPUT_WIDTH = 32;
defparam int_module_local_bb2_mul50.LATENCY = 3;
defparam int_module_local_bb2_mul50.SIGNED = 0;

assign local_bb2_mul50_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb2_mul50_output_regs_ready = (&(~(local_bb2_mul50_valid_out_NO_SHIFT_REG) | ~(local_bb2_mul50_stall_in)));
assign merge_node_stall_in_0 = (~(local_bb2_mul50_output_regs_ready) | ~(local_bb2_mul50_inputs_ready));
assign local_bb2_mul50_causedstall = (local_bb2_mul50_inputs_ready && (~(local_bb2_mul50_output_regs_ready) && !(~(local_bb2_mul50_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_mul50_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_mul50_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_mul50_output_regs_ready)
		begin
			local_bb2_mul50_valid_pipe_0_NO_SHIFT_REG <= local_bb2_mul50_inputs_ready;
			local_bb2_mul50_valid_pipe_1_NO_SHIFT_REG <= local_bb2_mul50_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_mul50_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_mul50_output_regs_ready)
		begin
			local_bb2_mul50_valid_out_NO_SHIFT_REG <= local_bb2_mul50_valid_pipe_1_NO_SHIFT_REG;
		end
		else
		begin
			if (~(local_bb2_mul50_stall_in))
			begin
				local_bb2_mul50_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb2_mul_inputs_ready;
 reg local_bb2_mul_valid_out_NO_SHIFT_REG;
wire local_bb2_mul_stall_in;
wire local_bb2_mul_output_regs_ready;
wire [31:0] local_bb2_mul;
 reg local_bb2_mul_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb2_mul_valid_pipe_1_NO_SHIFT_REG;
wire local_bb2_mul_causedstall;
wire [357:0] rci_rcnode_1to4_rc2_cmp48_0_reg_1;

acl_int_mult int_module_local_bb2_mul (
	.clock(clock),
	.dataa(local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG),
	.datab(local_lvm_channelCounter_049_NO_SHIFT_REG),
	.enable(local_bb2_mul_output_regs_ready),
	.result(local_bb2_mul)
);

defparam int_module_local_bb2_mul.INPUT1_WIDTH = 32;
defparam int_module_local_bb2_mul.INPUT2_WIDTH = 32;
defparam int_module_local_bb2_mul.OUTPUT_WIDTH = 32;
defparam int_module_local_bb2_mul.LATENCY = 3;
defparam int_module_local_bb2_mul.SIGNED = 0;

assign local_bb2_mul_inputs_ready = merge_node_valid_out_1_NO_SHIFT_REG;
assign local_bb2_mul_output_regs_ready = (&(~(local_bb2_mul_valid_out_NO_SHIFT_REG) | ~(local_bb2_mul_stall_in)));
assign merge_node_stall_in_1 = (~(local_bb2_mul_output_regs_ready) | ~(local_bb2_mul_inputs_ready));
assign local_bb2_mul_causedstall = (local_bb2_mul_inputs_ready && (~(local_bb2_mul_output_regs_ready) && !(~(local_bb2_mul_output_regs_ready))));
assign rci_rcnode_1to4_rc2_cmp48_0_reg_1[0] = local_lvm_cmp48_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc2_cmp48_0_reg_1[1] = local_lvm_var__NO_SHIFT_REG;
assign rci_rcnode_1to4_rc2_cmp48_0_reg_1[33:2] = local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc2_cmp48_0_reg_1[65:34] = local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc2_cmp48_0_reg_1[97:66] = local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc2_cmp48_0_reg_1[129:98] = local_lvm_c0_exe1_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc2_cmp48_0_reg_1[161:130] = local_lvm_c0_exe2_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc2_cmp48_0_reg_1[193:162] = local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc2_cmp48_0_reg_1[194] = local_lvm_cmp2122_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc2_cmp48_0_reg_1[195] = local_lvm_var__u2_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc2_cmp48_0_reg_1[196] = local_lvm__phi_decision77_xor_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc2_cmp48_0_reg_1[197] = local_lvm__phi_decision76_xor_or_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc2_cmp48_0_reg_1[229:198] = local_lvm_channelCounter_049_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc2_cmp48_0_reg_1[261:230] = local_lvm_input_global_id_0_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc2_cmp48_0_reg_1[293:262] = local_lvm_input_global_id_1_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc2_cmp48_0_reg_1[325:294] = local_lvm_input_global_id_2_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc2_cmp48_0_reg_1[357:326] = local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_mul_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_mul_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_mul_output_regs_ready)
		begin
			local_bb2_mul_valid_pipe_0_NO_SHIFT_REG <= local_bb2_mul_inputs_ready;
			local_bb2_mul_valid_pipe_1_NO_SHIFT_REG <= local_bb2_mul_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_mul_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_mul_output_regs_ready)
		begin
			local_bb2_mul_valid_out_NO_SHIFT_REG <= local_bb2_mul_valid_pipe_1_NO_SHIFT_REG;
		end
		else
		begin
			if (~(local_bb2_mul_stall_in))
			begin
				local_bb2_mul_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 3
//  * capacity = 3
 logic rcnode_1to4_rc2_cmp48_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to4_rc2_cmp48_0_stall_in_NO_SHIFT_REG;
 logic [357:0] rcnode_1to4_rc2_cmp48_0_NO_SHIFT_REG;
 logic rcnode_1to4_rc2_cmp48_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [357:0] rcnode_1to4_rc2_cmp48_0_reg_4_NO_SHIFT_REG;
 logic rcnode_1to4_rc2_cmp48_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rcnode_1to4_rc2_cmp48_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rcnode_1to4_rc2_cmp48_0_stall_out_reg_4_IP_NO_SHIFT_REG;
 logic rcnode_1to4_rc2_cmp48_0_stall_out_reg_4_NO_SHIFT_REG;
wire [63:0] rci_rcnode_4to4_rc0_bb2_mul50_0_reg_4;

acl_data_fifo rcnode_1to4_rc2_cmp48_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to4_rc2_cmp48_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to4_rc2_cmp48_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rcnode_1to4_rc2_cmp48_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rcnode_1to4_rc2_cmp48_0_stall_out_reg_4_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to4_rc2_cmp48_0_reg_1),
	.data_out(rcnode_1to4_rc2_cmp48_0_reg_4_NO_SHIFT_REG)
);

defparam rcnode_1to4_rc2_cmp48_0_reg_4_fifo.DEPTH = 4;
defparam rcnode_1to4_rc2_cmp48_0_reg_4_fifo.DATA_WIDTH = 358;
defparam rcnode_1to4_rc2_cmp48_0_reg_4_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to4_rc2_cmp48_0_reg_4_fifo.IMPL = "ll_reg";

assign rcnode_1to4_rc2_cmp48_0_reg_4_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_2_NO_SHIFT_REG;
assign rcnode_1to4_rc2_cmp48_0_stall_out_reg_4_NO_SHIFT_REG = (~(rcnode_1to4_rc2_cmp48_0_reg_4_inputs_ready_NO_SHIFT_REG) | rcnode_1to4_rc2_cmp48_0_stall_out_reg_4_IP_NO_SHIFT_REG);
assign merge_node_stall_in_2 = rcnode_1to4_rc2_cmp48_0_stall_out_reg_4_NO_SHIFT_REG;
assign rcnode_1to4_rc2_cmp48_0_NO_SHIFT_REG = rcnode_1to4_rc2_cmp48_0_reg_4_NO_SHIFT_REG;
assign rcnode_1to4_rc2_cmp48_0_stall_in_reg_4_NO_SHIFT_REG = rcnode_1to4_rc2_cmp48_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to4_rc2_cmp48_0_valid_out_NO_SHIFT_REG = rcnode_1to4_rc2_cmp48_0_valid_out_reg_4_NO_SHIFT_REG;
assign rci_rcnode_4to4_rc0_bb2_mul50_0_reg_4[31:0] = local_bb2_mul50;
assign rci_rcnode_4to4_rc0_bb2_mul50_0_reg_4[63:32] = local_bb2_mul;

// Register node:
//  * latency = 0
//  * capacity = 2
 logic rcnode_4to4_rc0_bb2_mul50_0_valid_out_NO_SHIFT_REG;
 logic rcnode_4to4_rc0_bb2_mul50_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rcnode_4to4_rc0_bb2_mul50_0_NO_SHIFT_REG;
 logic rcnode_4to4_rc0_bb2_mul50_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rcnode_4to4_rc0_bb2_mul50_0_reg_4_NO_SHIFT_REG;
 logic rcnode_4to4_rc0_bb2_mul50_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rcnode_4to4_rc0_bb2_mul50_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rcnode_4to4_rc0_bb2_mul50_0_stall_out_0_reg_4_IP_NO_SHIFT_REG;
 logic rcnode_4to4_rc0_bb2_mul50_0_stall_out_0_reg_4_NO_SHIFT_REG;

acl_data_fifo rcnode_4to4_rc0_bb2_mul50_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_4to4_rc0_bb2_mul50_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_4to4_rc0_bb2_mul50_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rcnode_4to4_rc0_bb2_mul50_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rcnode_4to4_rc0_bb2_mul50_0_stall_out_0_reg_4_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_4to4_rc0_bb2_mul50_0_reg_4),
	.data_out(rcnode_4to4_rc0_bb2_mul50_0_reg_4_NO_SHIFT_REG)
);

defparam rcnode_4to4_rc0_bb2_mul50_0_reg_4_fifo.DEPTH = 3;
defparam rcnode_4to4_rc0_bb2_mul50_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rcnode_4to4_rc0_bb2_mul50_0_reg_4_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_4to4_rc0_bb2_mul50_0_reg_4_fifo.IMPL = "zl_reg";

assign rcnode_4to4_rc0_bb2_mul50_0_reg_4_inputs_ready_NO_SHIFT_REG = (local_bb2_mul50_valid_out_NO_SHIFT_REG & local_bb2_mul_valid_out_NO_SHIFT_REG);
assign rcnode_4to4_rc0_bb2_mul50_0_stall_out_0_reg_4_NO_SHIFT_REG = (~(rcnode_4to4_rc0_bb2_mul50_0_reg_4_inputs_ready_NO_SHIFT_REG) | rcnode_4to4_rc0_bb2_mul50_0_stall_out_0_reg_4_IP_NO_SHIFT_REG);
assign local_bb2_mul50_stall_in = rcnode_4to4_rc0_bb2_mul50_0_stall_out_0_reg_4_NO_SHIFT_REG;
assign local_bb2_mul_stall_in = rcnode_4to4_rc0_bb2_mul50_0_stall_out_0_reg_4_NO_SHIFT_REG;
assign rcnode_4to4_rc0_bb2_mul50_0_NO_SHIFT_REG = rcnode_4to4_rc0_bb2_mul50_0_reg_4_NO_SHIFT_REG;
assign rcnode_4to4_rc0_bb2_mul50_0_stall_in_reg_4_NO_SHIFT_REG = rcnode_4to4_rc0_bb2_mul50_0_stall_in_NO_SHIFT_REG;
assign rcnode_4to4_rc0_bb2_mul50_0_valid_out_NO_SHIFT_REG = rcnode_4to4_rc0_bb2_mul50_0_valid_out_reg_4_NO_SHIFT_REG;

// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg lvb_cmp48_reg_NO_SHIFT_REG;
 reg lvb_var__reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_8_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c0_exe1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c0_exe2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_2_reg_NO_SHIFT_REG;
 reg lvb_cmp2122_reg_NO_SHIFT_REG;
 reg lvb_var__u2_reg_NO_SHIFT_REG;
 reg lvb__phi_decision77_xor_reg_NO_SHIFT_REG;
 reg lvb__phi_decision76_xor_or_reg_NO_SHIFT_REG;
 reg [31:0] lvb_channelCounter_049_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb2_mul50_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb2_mul_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (rcnode_1to4_rc2_cmp48_0_valid_out_NO_SHIFT_REG & rcnode_4to4_rc0_bb2_mul50_0_valid_out_NO_SHIFT_REG);
assign branch_var__output_regs_ready = (~(stall_in) | ~(branch_node_valid_out_NO_SHIFT_REG));
assign rcnode_1to4_rc2_cmp48_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_4to4_rc0_bb2_mul50_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_cmp48 = lvb_cmp48_reg_NO_SHIFT_REG;
assign lvb_var_ = lvb_var__reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_8 = lvb_memcoalesce_param_extrValue_8_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_5 = lvb_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6 = lvb_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG;
assign lvb_c0_exe1 = lvb_c0_exe1_reg_NO_SHIFT_REG;
assign lvb_c0_exe2 = lvb_c0_exe2_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_2 = lvb_memcoalesce_param_extrValue_2_reg_NO_SHIFT_REG;
assign lvb_cmp2122 = lvb_cmp2122_reg_NO_SHIFT_REG;
assign lvb_var__u2 = lvb_var__u2_reg_NO_SHIFT_REG;
assign lvb__phi_decision77_xor = lvb__phi_decision77_xor_reg_NO_SHIFT_REG;
assign lvb__phi_decision76_xor_or = lvb__phi_decision76_xor_or_reg_NO_SHIFT_REG;
assign lvb_channelCounter_049 = lvb_channelCounter_049_reg_NO_SHIFT_REG;
assign lvb_bb2_mul50 = lvb_bb2_mul50_reg_NO_SHIFT_REG;
assign lvb_bb2_mul = lvb_bb2_mul_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0 = lvb_input_global_id_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1 = lvb_input_global_id_1_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2 = lvb_input_global_id_2_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id = lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;
assign combined_branch_stall_in_signal = stall_in;
assign valid_out = branch_node_valid_out_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
		lvb_cmp48_reg_NO_SHIFT_REG <= 'x;
		lvb_var__reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_8_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG <= 'x;
		lvb_c0_exe1_reg_NO_SHIFT_REG <= 'x;
		lvb_c0_exe2_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_2_reg_NO_SHIFT_REG <= 'x;
		lvb_cmp2122_reg_NO_SHIFT_REG <= 'x;
		lvb_var__u2_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision77_xor_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision76_xor_or_reg_NO_SHIFT_REG <= 'x;
		lvb_channelCounter_049_reg_NO_SHIFT_REG <= 'x;
		lvb_bb2_mul50_reg_NO_SHIFT_REG <= 'x;
		lvb_bb2_mul_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_cmp48_reg_NO_SHIFT_REG <= rcnode_1to4_rc2_cmp48_0_NO_SHIFT_REG[0];
			lvb_var__reg_NO_SHIFT_REG <= rcnode_1to4_rc2_cmp48_0_NO_SHIFT_REG[1];
			lvb_memcoalesce_param_extrValue_8_reg_NO_SHIFT_REG <= rcnode_1to4_rc2_cmp48_0_NO_SHIFT_REG[33:2];
			lvb_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG <= rcnode_1to4_rc2_cmp48_0_NO_SHIFT_REG[65:34];
			lvb_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG <= rcnode_1to4_rc2_cmp48_0_NO_SHIFT_REG[97:66];
			lvb_c0_exe1_reg_NO_SHIFT_REG <= rcnode_1to4_rc2_cmp48_0_NO_SHIFT_REG[129:98];
			lvb_c0_exe2_reg_NO_SHIFT_REG <= rcnode_1to4_rc2_cmp48_0_NO_SHIFT_REG[161:130];
			lvb_memcoalesce_param_extrValue_2_reg_NO_SHIFT_REG <= rcnode_1to4_rc2_cmp48_0_NO_SHIFT_REG[193:162];
			lvb_cmp2122_reg_NO_SHIFT_REG <= rcnode_1to4_rc2_cmp48_0_NO_SHIFT_REG[194];
			lvb_var__u2_reg_NO_SHIFT_REG <= rcnode_1to4_rc2_cmp48_0_NO_SHIFT_REG[195];
			lvb__phi_decision77_xor_reg_NO_SHIFT_REG <= rcnode_1to4_rc2_cmp48_0_NO_SHIFT_REG[196];
			lvb__phi_decision76_xor_or_reg_NO_SHIFT_REG <= rcnode_1to4_rc2_cmp48_0_NO_SHIFT_REG[197];
			lvb_channelCounter_049_reg_NO_SHIFT_REG <= rcnode_1to4_rc2_cmp48_0_NO_SHIFT_REG[229:198];
			lvb_bb2_mul50_reg_NO_SHIFT_REG <= rcnode_4to4_rc0_bb2_mul50_0_NO_SHIFT_REG[31:0];
			lvb_bb2_mul_reg_NO_SHIFT_REG <= rcnode_4to4_rc0_bb2_mul50_0_NO_SHIFT_REG[63:32];
			lvb_input_global_id_0_reg_NO_SHIFT_REG <= rcnode_1to4_rc2_cmp48_0_NO_SHIFT_REG[261:230];
			lvb_input_global_id_1_reg_NO_SHIFT_REG <= rcnode_1to4_rc2_cmp48_0_NO_SHIFT_REG[293:262];
			lvb_input_global_id_2_reg_NO_SHIFT_REG <= rcnode_1to4_rc2_cmp48_0_NO_SHIFT_REG[325:294];
			lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= rcnode_1to4_rc2_cmp48_0_NO_SHIFT_REG[357:326];
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module poolingLayer_basic_block_3
	(
		input 		clock,
		input 		resetn,
		input [63:0] 		input_inputFeatureMap,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_0,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_1,
		input 		valid_in_0,
		output 		stall_out_0,
		input 		input_cmp48_0,
		input 		input_var__0,
		input [31:0] 		input_memcoalesce_param_extrValue_8_0,
		input [31:0] 		input_memcoalesce_param_extrValue_5_0,
		input [31:0] 		input_memcoalesce_param_extrValue_6_0,
		input [31:0] 		input_c0_exe1_0,
		input [31:0] 		input_c0_exe2_0,
		input [31:0] 		input_memcoalesce_param_extrValue_2_0,
		input 		input_cmp2122_0,
		input 		input_var__u3_0,
		input 		input__phi_decision77_xor_0,
		input 		input__phi_decision76_xor_or_0,
		input [31:0] 		input_channelCounter_049_0,
		input [31:0] 		input_mul50_0,
		input [31:0] 		input_mul_0,
		input [31:0] 		input_heightCounter_141_0,
		input [31:0] 		input_global_id_0_0,
		input [31:0] 		input_global_id_1_0,
		input [31:0] 		input_global_id_2_0,
		input [31:0] 		input_acl_hw_wg_id_0,
		input 		valid_in_1,
		output 		stall_out_1,
		input 		input_cmp48_1,
		input 		input_var__1,
		input [31:0] 		input_memcoalesce_param_extrValue_8_1,
		input [31:0] 		input_memcoalesce_param_extrValue_5_1,
		input [31:0] 		input_memcoalesce_param_extrValue_6_1,
		input [31:0] 		input_c0_exe1_1,
		input [31:0] 		input_c0_exe2_1,
		input [31:0] 		input_memcoalesce_param_extrValue_2_1,
		input 		input_cmp2122_1,
		input 		input_var__u3_1,
		input 		input__phi_decision77_xor_1,
		input 		input__phi_decision76_xor_or_1,
		input [31:0] 		input_channelCounter_049_1,
		input [31:0] 		input_mul50_1,
		input [31:0] 		input_mul_1,
		input [31:0] 		input_heightCounter_141_1,
		input [31:0] 		input_global_id_0_1,
		input [31:0] 		input_global_id_1_1,
		input [31:0] 		input_global_id_2_1,
		input [31:0] 		input_acl_hw_wg_id_1,
		output 		valid_out,
		input 		stall_in,
		output 		lvb_cmp48,
		output 		lvb_var_,
		output [31:0] 		lvb_memcoalesce_param_extrValue_8,
		output [31:0] 		lvb_memcoalesce_param_extrValue_5,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6,
		output [31:0] 		lvb_c0_exe1,
		output [31:0] 		lvb_c0_exe2,
		output [31:0] 		lvb_memcoalesce_param_extrValue_2,
		output 		lvb_cmp2122,
		output 		lvb_var__u3,
		output 		lvb__phi_decision77_xor,
		output 		lvb__phi_decision76_xor_or,
		output [31:0] 		lvb_channelCounter_049,
		output [31:0] 		lvb_mul50,
		output [31:0] 		lvb_mul,
		output [31:0] 		lvb_heightCounter_141,
		output [31:0] 		lvb_bb3_c3_exe1,
		output [31:0] 		lvb_bb3_c3_exe2,
		output [31:0] 		lvb_bb3_c1_exe1,
		output [31:0] 		lvb_bb3_ld_,
		output [31:0] 		lvb_input_global_id_0,
		output [31:0] 		lvb_input_global_id_1,
		output [31:0] 		lvb_input_global_id_2,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		input 		start,
		output 		avm_local_bb3_ld__enable,
		input [511:0] 		avm_local_bb3_ld__readdata,
		input 		avm_local_bb3_ld__readdatavalid,
		input 		avm_local_bb3_ld__waitrequest,
		output [31:0] 		avm_local_bb3_ld__address,
		output 		avm_local_bb3_ld__read,
		output 		avm_local_bb3_ld__write,
		input 		avm_local_bb3_ld__writeack,
		output [511:0] 		avm_local_bb3_ld__writedata,
		output [63:0] 		avm_local_bb3_ld__byteenable,
		output [4:0] 		avm_local_bb3_ld__burstcount,
		output 		local_bb3_ld__active,
		input 		clock2x
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((valid_in_0 & valid_in_1) & ~((stall_out_0 | stall_out_1)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_node_stall_in_4;
 reg merge_node_valid_out_4_NO_SHIFT_REG;
wire merge_node_stall_in_5;
 reg merge_node_valid_out_5_NO_SHIFT_REG;
wire merge_node_stall_in_6;
 reg merge_node_valid_out_6_NO_SHIFT_REG;
wire merge_node_stall_in_7;
 reg merge_node_valid_out_7_NO_SHIFT_REG;
wire merge_node_stall_in_8;
 reg merge_node_valid_out_8_NO_SHIFT_REG;
wire merge_node_stall_in_9;
 reg merge_node_valid_out_9_NO_SHIFT_REG;
wire merge_node_stall_in_10;
 reg merge_node_valid_out_10_NO_SHIFT_REG;
wire merge_node_stall_in_11;
 reg merge_node_valid_out_11_NO_SHIFT_REG;
wire merge_node_stall_in_12;
 reg merge_node_valid_out_12_NO_SHIFT_REG;
wire merge_node_stall_in_13;
 reg merge_node_valid_out_13_NO_SHIFT_REG;
wire merge_node_stall_in_14;
 reg merge_node_valid_out_14_NO_SHIFT_REG;
wire merge_node_stall_in_15;
 reg merge_node_valid_out_15_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
 reg input_cmp48_0_staging_reg_NO_SHIFT_REG;
 reg input_var__0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_8_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe1_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe2_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_2_0_staging_reg_NO_SHIFT_REG;
 reg input_cmp2122_0_staging_reg_NO_SHIFT_REG;
 reg input_var__u3_0_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision77_xor_0_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision76_xor_or_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_049_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul50_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_heightCounter_141_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
 reg local_lvm_cmp48_NO_SHIFT_REG;
 reg local_lvm_var__NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
 reg [31:0] local_lvm_c0_exe1_NO_SHIFT_REG;
 reg [31:0] local_lvm_c0_exe2_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG;
 reg local_lvm_cmp2122_NO_SHIFT_REG;
 reg local_lvm_var__u3_NO_SHIFT_REG;
 reg local_lvm__phi_decision77_xor_NO_SHIFT_REG;
 reg local_lvm__phi_decision76_xor_or_NO_SHIFT_REG;
 reg [31:0] local_lvm_channelCounter_049_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul50_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul_NO_SHIFT_REG;
 reg [31:0] local_lvm_heightCounter_141_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_0_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;
 reg input_cmp48_1_staging_reg_NO_SHIFT_REG;
 reg input_var__1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_8_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe1_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe2_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_2_1_staging_reg_NO_SHIFT_REG;
 reg input_cmp2122_1_staging_reg_NO_SHIFT_REG;
 reg input_var__u3_1_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision77_xor_1_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision76_xor_or_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_049_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul50_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_heightCounter_141_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG) | (merge_node_stall_in_4 & merge_node_valid_out_4_NO_SHIFT_REG) | (merge_node_stall_in_5 & merge_node_valid_out_5_NO_SHIFT_REG) | (merge_node_stall_in_6 & merge_node_valid_out_6_NO_SHIFT_REG) | (merge_node_stall_in_7 & merge_node_valid_out_7_NO_SHIFT_REG) | (merge_node_stall_in_8 & merge_node_valid_out_8_NO_SHIFT_REG) | (merge_node_stall_in_9 & merge_node_valid_out_9_NO_SHIFT_REG) | (merge_node_stall_in_10 & merge_node_valid_out_10_NO_SHIFT_REG) | (merge_node_stall_in_11 & merge_node_valid_out_11_NO_SHIFT_REG) | (merge_node_stall_in_12 & merge_node_valid_out_12_NO_SHIFT_REG) | (merge_node_stall_in_13 & merge_node_valid_out_13_NO_SHIFT_REG) | (merge_node_stall_in_14 & merge_node_valid_out_14_NO_SHIFT_REG) | (merge_node_stall_in_15 & merge_node_valid_out_15_NO_SHIFT_REG));
assign stall_out_0 = merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
assign stall_out_1 = merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_0_staging_reg_NO_SHIFT_REG | valid_in_0))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		if ((merge_node_valid_in_1_staging_reg_NO_SHIFT_REG | valid_in_1))
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b1;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
		end
		else
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b0;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_cmp48_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_8_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe1_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp2122_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u3_0_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision77_xor_0_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision76_xor_or_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_049_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul50_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_heightCounter_141_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_0_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		input_cmp48_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_8_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe1_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp2122_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u3_1_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision77_xor_1_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision76_xor_or_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_049_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul50_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_heightCounter_141_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_0_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_0_staging_reg_NO_SHIFT_REG))
			begin
				input_cmp48_0_staging_reg_NO_SHIFT_REG <= input_cmp48_0;
				input_var__0_staging_reg_NO_SHIFT_REG <= input_var__0;
				input_memcoalesce_param_extrValue_8_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_0;
				input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_0;
				input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_0;
				input_c0_exe1_0_staging_reg_NO_SHIFT_REG <= input_c0_exe1_0;
				input_c0_exe2_0_staging_reg_NO_SHIFT_REG <= input_c0_exe2_0;
				input_memcoalesce_param_extrValue_2_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_0;
				input_cmp2122_0_staging_reg_NO_SHIFT_REG <= input_cmp2122_0;
				input_var__u3_0_staging_reg_NO_SHIFT_REG <= input_var__u3_0;
				input__phi_decision77_xor_0_staging_reg_NO_SHIFT_REG <= input__phi_decision77_xor_0;
				input__phi_decision76_xor_or_0_staging_reg_NO_SHIFT_REG <= input__phi_decision76_xor_or_0;
				input_channelCounter_049_0_staging_reg_NO_SHIFT_REG <= input_channelCounter_049_0;
				input_mul50_0_staging_reg_NO_SHIFT_REG <= input_mul50_0;
				input_mul_0_staging_reg_NO_SHIFT_REG <= input_mul_0;
				input_heightCounter_141_0_staging_reg_NO_SHIFT_REG <= input_heightCounter_141_0;
				input_global_id_0_0_staging_reg_NO_SHIFT_REG <= input_global_id_0_0;
				input_global_id_1_0_staging_reg_NO_SHIFT_REG <= input_global_id_1_0;
				input_global_id_2_0_staging_reg_NO_SHIFT_REG <= input_global_id_2_0;
				input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= valid_in_0;
			end
		end
		else
		begin
			merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
		if (((merge_block_selector_NO_SHIFT_REG != 1'b1) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_1_staging_reg_NO_SHIFT_REG))
			begin
				input_cmp48_1_staging_reg_NO_SHIFT_REG <= input_cmp48_1;
				input_var__1_staging_reg_NO_SHIFT_REG <= input_var__1;
				input_memcoalesce_param_extrValue_8_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_1;
				input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_1;
				input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_1;
				input_c0_exe1_1_staging_reg_NO_SHIFT_REG <= input_c0_exe1_1;
				input_c0_exe2_1_staging_reg_NO_SHIFT_REG <= input_c0_exe2_1;
				input_memcoalesce_param_extrValue_2_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_1;
				input_cmp2122_1_staging_reg_NO_SHIFT_REG <= input_cmp2122_1;
				input_var__u3_1_staging_reg_NO_SHIFT_REG <= input_var__u3_1;
				input__phi_decision77_xor_1_staging_reg_NO_SHIFT_REG <= input__phi_decision77_xor_1;
				input__phi_decision76_xor_or_1_staging_reg_NO_SHIFT_REG <= input__phi_decision76_xor_or_1;
				input_channelCounter_049_1_staging_reg_NO_SHIFT_REG <= input_channelCounter_049_1;
				input_mul50_1_staging_reg_NO_SHIFT_REG <= input_mul50_1;
				input_mul_1_staging_reg_NO_SHIFT_REG <= input_mul_1;
				input_heightCounter_141_1_staging_reg_NO_SHIFT_REG <= input_heightCounter_141_1;
				input_global_id_0_1_staging_reg_NO_SHIFT_REG <= input_global_id_0_1;
				input_global_id_1_1_staging_reg_NO_SHIFT_REG <= input_global_id_1_1;
				input_global_id_2_1_staging_reg_NO_SHIFT_REG <= input_global_id_2_1;
				input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= valid_in_1;
			end
		end
		else
		begin
			merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_0_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_cmp48_NO_SHIFT_REG <= input_cmp48_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_0_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe2_NO_SHIFT_REG <= input_c0_exe2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp2122_NO_SHIFT_REG <= input_cmp2122_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u3_NO_SHIFT_REG <= input_var__u3_0_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision77_xor_NO_SHIFT_REG <= input__phi_decision77_xor_0_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision76_xor_or_NO_SHIFT_REG <= input__phi_decision76_xor_or_0_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_049_NO_SHIFT_REG <= input_channelCounter_049_0_staging_reg_NO_SHIFT_REG;
					local_lvm_mul50_NO_SHIFT_REG <= input_mul50_0_staging_reg_NO_SHIFT_REG;
					local_lvm_mul_NO_SHIFT_REG <= input_mul_0_staging_reg_NO_SHIFT_REG;
					local_lvm_heightCounter_141_NO_SHIFT_REG <= input_heightCounter_141_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_cmp48_NO_SHIFT_REG <= input_cmp48_0;
					local_lvm_var__NO_SHIFT_REG <= input_var__0;
					local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_0;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_0;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_0;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_0;
					local_lvm_c0_exe2_NO_SHIFT_REG <= input_c0_exe2_0;
					local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_0;
					local_lvm_cmp2122_NO_SHIFT_REG <= input_cmp2122_0;
					local_lvm_var__u3_NO_SHIFT_REG <= input_var__u3_0;
					local_lvm__phi_decision77_xor_NO_SHIFT_REG <= input__phi_decision77_xor_0;
					local_lvm__phi_decision76_xor_or_NO_SHIFT_REG <= input__phi_decision76_xor_or_0;
					local_lvm_channelCounter_049_NO_SHIFT_REG <= input_channelCounter_049_0;
					local_lvm_mul50_NO_SHIFT_REG <= input_mul50_0;
					local_lvm_mul_NO_SHIFT_REG <= input_mul_0;
					local_lvm_heightCounter_141_NO_SHIFT_REG <= input_heightCounter_141_0;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_0;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_0;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				end
			end

			1'b1:
			begin
				if (merge_node_valid_in_1_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_cmp48_NO_SHIFT_REG <= input_cmp48_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_1_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe2_NO_SHIFT_REG <= input_c0_exe2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp2122_NO_SHIFT_REG <= input_cmp2122_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u3_NO_SHIFT_REG <= input_var__u3_1_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision77_xor_NO_SHIFT_REG <= input__phi_decision77_xor_1_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision76_xor_or_NO_SHIFT_REG <= input__phi_decision76_xor_or_1_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_049_NO_SHIFT_REG <= input_channelCounter_049_1_staging_reg_NO_SHIFT_REG;
					local_lvm_mul50_NO_SHIFT_REG <= input_mul50_1_staging_reg_NO_SHIFT_REG;
					local_lvm_mul_NO_SHIFT_REG <= input_mul_1_staging_reg_NO_SHIFT_REG;
					local_lvm_heightCounter_141_NO_SHIFT_REG <= input_heightCounter_141_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_cmp48_NO_SHIFT_REG <= input_cmp48_1;
					local_lvm_var__NO_SHIFT_REG <= input_var__1;
					local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_1;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_1;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_1;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_1;
					local_lvm_c0_exe2_NO_SHIFT_REG <= input_c0_exe2_1;
					local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_1;
					local_lvm_cmp2122_NO_SHIFT_REG <= input_cmp2122_1;
					local_lvm_var__u3_NO_SHIFT_REG <= input_var__u3_1;
					local_lvm__phi_decision77_xor_NO_SHIFT_REG <= input__phi_decision77_xor_1;
					local_lvm__phi_decision76_xor_or_NO_SHIFT_REG <= input__phi_decision76_xor_or_1;
					local_lvm_channelCounter_049_NO_SHIFT_REG <= input_channelCounter_049_1;
					local_lvm_mul50_NO_SHIFT_REG <= input_mul50_1;
					local_lvm_mul_NO_SHIFT_REG <= input_mul_1;
					local_lvm_heightCounter_141_NO_SHIFT_REG <= input_heightCounter_141_1;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_1;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_1;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_5_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_6_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_7_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_8_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_9_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_10_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_11_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_12_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_13_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_14_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_15_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_5_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_6_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_7_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_8_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_9_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_10_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_11_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_12_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_13_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_14_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_15_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_5))
			begin
				merge_node_valid_out_5_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_6))
			begin
				merge_node_valid_out_6_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_7))
			begin
				merge_node_valid_out_7_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_8))
			begin
				merge_node_valid_out_8_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_9))
			begin
				merge_node_valid_out_9_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_10))
			begin
				merge_node_valid_out_10_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_11))
			begin
				merge_node_valid_out_11_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_12))
			begin
				merge_node_valid_out_12_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_13))
			begin
				merge_node_valid_out_13_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_14))
			begin
				merge_node_valid_out_14_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_15))
			begin
				merge_node_valid_out_15_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(*)
begin
	merge_node_valid_out_1_NO_SHIFT_REG = merge_node_valid_out_0_NO_SHIFT_REG;
	merge_node_valid_out_2_NO_SHIFT_REG = merge_node_valid_out_0_NO_SHIFT_REG;
	merge_node_valid_out_3_NO_SHIFT_REG = merge_node_valid_out_0_NO_SHIFT_REG;
	merge_node_valid_out_4_NO_SHIFT_REG = merge_node_valid_out_0_NO_SHIFT_REG;
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb3_c1_eni17_stall_local;
wire [191:0] local_bb3_c1_eni17;

assign local_bb3_c1_eni17[31:0] = 32'bx;
assign local_bb3_c1_eni17[63:32] = local_lvm_c0_exe1_NO_SHIFT_REG;
assign local_bb3_c1_eni17[191:64] = 128'bx;

// Register node:
//  * latency = 7
//  * capacity = 7
 logic rnode_1to8_memcoalesce_param_extrValue_0_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to8_memcoalesce_param_extrValue_0_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to8_memcoalesce_param_extrValue_0_0_reg_8_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to8_memcoalesce_param_extrValue_0_0_valid_out_reg_8_NO_SHIFT_REG;
 logic rnode_1to8_memcoalesce_param_extrValue_0_0_stall_in_reg_8_NO_SHIFT_REG;
 logic rnode_1to8_memcoalesce_param_extrValue_0_0_stall_out_reg_8_NO_SHIFT_REG;

acl_data_fifo rnode_1to8_memcoalesce_param_extrValue_0_0_reg_8_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to8_memcoalesce_param_extrValue_0_0_reg_8_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to8_memcoalesce_param_extrValue_0_0_stall_in_reg_8_NO_SHIFT_REG),
	.valid_out(rnode_1to8_memcoalesce_param_extrValue_0_0_valid_out_reg_8_NO_SHIFT_REG),
	.stall_out(rnode_1to8_memcoalesce_param_extrValue_0_0_stall_out_reg_8_NO_SHIFT_REG),
	.data_in(),
	.data_out()
);

defparam rnode_1to8_memcoalesce_param_extrValue_0_0_reg_8_fifo.DEPTH = 8;
defparam rnode_1to8_memcoalesce_param_extrValue_0_0_reg_8_fifo.DATA_WIDTH = 0;
defparam rnode_1to8_memcoalesce_param_extrValue_0_0_reg_8_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to8_memcoalesce_param_extrValue_0_0_reg_8_fifo.IMPL = "ll_reg";

assign rnode_1to8_memcoalesce_param_extrValue_0_0_reg_8_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_5_NO_SHIFT_REG;
assign merge_node_stall_in_5 = rnode_1to8_memcoalesce_param_extrValue_0_0_stall_out_reg_8_NO_SHIFT_REG;
assign rnode_1to8_memcoalesce_param_extrValue_0_0_stall_in_reg_8_NO_SHIFT_REG = rnode_1to8_memcoalesce_param_extrValue_0_0_stall_in_NO_SHIFT_REG;
assign rnode_1to8_memcoalesce_param_extrValue_0_0_valid_out_NO_SHIFT_REG = rnode_1to8_memcoalesce_param_extrValue_0_0_valid_out_reg_8_NO_SHIFT_REG;

// Register node:
//  * latency = 7
//  * capacity = 7
 logic rnode_1to8_memcoalesce_param_extrValue_1_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to8_memcoalesce_param_extrValue_1_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to8_memcoalesce_param_extrValue_1_0_reg_8_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to8_memcoalesce_param_extrValue_1_0_valid_out_reg_8_NO_SHIFT_REG;
 logic rnode_1to8_memcoalesce_param_extrValue_1_0_stall_in_reg_8_NO_SHIFT_REG;
 logic rnode_1to8_memcoalesce_param_extrValue_1_0_stall_out_reg_8_NO_SHIFT_REG;

acl_data_fifo rnode_1to8_memcoalesce_param_extrValue_1_0_reg_8_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to8_memcoalesce_param_extrValue_1_0_reg_8_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to8_memcoalesce_param_extrValue_1_0_stall_in_reg_8_NO_SHIFT_REG),
	.valid_out(rnode_1to8_memcoalesce_param_extrValue_1_0_valid_out_reg_8_NO_SHIFT_REG),
	.stall_out(rnode_1to8_memcoalesce_param_extrValue_1_0_stall_out_reg_8_NO_SHIFT_REG),
	.data_in(),
	.data_out()
);

defparam rnode_1to8_memcoalesce_param_extrValue_1_0_reg_8_fifo.DEPTH = 8;
defparam rnode_1to8_memcoalesce_param_extrValue_1_0_reg_8_fifo.DATA_WIDTH = 0;
defparam rnode_1to8_memcoalesce_param_extrValue_1_0_reg_8_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to8_memcoalesce_param_extrValue_1_0_reg_8_fifo.IMPL = "ll_reg";

assign rnode_1to8_memcoalesce_param_extrValue_1_0_reg_8_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_6_NO_SHIFT_REG;
assign merge_node_stall_in_6 = rnode_1to8_memcoalesce_param_extrValue_1_0_stall_out_reg_8_NO_SHIFT_REG;
assign rnode_1to8_memcoalesce_param_extrValue_1_0_stall_in_reg_8_NO_SHIFT_REG = rnode_1to8_memcoalesce_param_extrValue_1_0_stall_in_NO_SHIFT_REG;
assign rnode_1to8_memcoalesce_param_extrValue_1_0_valid_out_NO_SHIFT_REG = rnode_1to8_memcoalesce_param_extrValue_1_0_valid_out_reg_8_NO_SHIFT_REG;

// Register node:
//  * latency = 7
//  * capacity = 7
 logic rnode_1to8_input_global_id_0_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to8_input_global_id_0_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to8_input_global_id_0_0_NO_SHIFT_REG;
 logic rnode_1to8_input_global_id_0_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to8_input_global_id_0_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to8_input_global_id_0_1_NO_SHIFT_REG;
 logic rnode_1to8_input_global_id_0_0_reg_8_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to8_input_global_id_0_0_reg_8_NO_SHIFT_REG;
 logic rnode_1to8_input_global_id_0_0_valid_out_0_reg_8_NO_SHIFT_REG;
 logic rnode_1to8_input_global_id_0_0_stall_in_0_reg_8_NO_SHIFT_REG;
 logic rnode_1to8_input_global_id_0_0_stall_out_reg_8_NO_SHIFT_REG;
 reg rnode_1to8_input_global_id_0_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to8_input_global_id_0_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to8_input_global_id_0_0_reg_8_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to8_input_global_id_0_0_reg_8_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to8_input_global_id_0_0_stall_in_0_reg_8_NO_SHIFT_REG),
	.valid_out(rnode_1to8_input_global_id_0_0_valid_out_0_reg_8_NO_SHIFT_REG),
	.stall_out(rnode_1to8_input_global_id_0_0_stall_out_reg_8_NO_SHIFT_REG),
	.data_in(local_lvm_input_global_id_0_NO_SHIFT_REG),
	.data_out(rnode_1to8_input_global_id_0_0_reg_8_NO_SHIFT_REG)
);

defparam rnode_1to8_input_global_id_0_0_reg_8_fifo.DEPTH = 8;
defparam rnode_1to8_input_global_id_0_0_reg_8_fifo.DATA_WIDTH = 32;
defparam rnode_1to8_input_global_id_0_0_reg_8_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to8_input_global_id_0_0_reg_8_fifo.IMPL = "ll_reg";

assign rnode_1to8_input_global_id_0_0_reg_8_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_7_NO_SHIFT_REG;
assign merge_node_stall_in_7 = rnode_1to8_input_global_id_0_0_stall_out_reg_8_NO_SHIFT_REG;
assign rnode_1to8_input_global_id_0_0_stall_in_0_reg_8_NO_SHIFT_REG = ((rnode_1to8_input_global_id_0_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to8_input_global_id_0_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to8_input_global_id_0_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to8_input_global_id_0_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to8_input_global_id_0_0_valid_out_0_NO_SHIFT_REG = (rnode_1to8_input_global_id_0_0_valid_out_0_reg_8_NO_SHIFT_REG & ~(rnode_1to8_input_global_id_0_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to8_input_global_id_0_0_valid_out_1_NO_SHIFT_REG = (rnode_1to8_input_global_id_0_0_valid_out_0_reg_8_NO_SHIFT_REG & ~(rnode_1to8_input_global_id_0_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to8_input_global_id_0_0_NO_SHIFT_REG = rnode_1to8_input_global_id_0_0_reg_8_NO_SHIFT_REG;
assign rnode_1to8_input_global_id_0_1_NO_SHIFT_REG = rnode_1to8_input_global_id_0_0_reg_8_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to8_input_global_id_0_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to8_input_global_id_0_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to8_input_global_id_0_0_consumed_0_NO_SHIFT_REG <= (rnode_1to8_input_global_id_0_0_valid_out_0_reg_8_NO_SHIFT_REG & (rnode_1to8_input_global_id_0_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to8_input_global_id_0_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to8_input_global_id_0_0_stall_in_0_reg_8_NO_SHIFT_REG);
		rnode_1to8_input_global_id_0_0_consumed_1_NO_SHIFT_REG <= (rnode_1to8_input_global_id_0_0_valid_out_0_reg_8_NO_SHIFT_REG & (rnode_1to8_input_global_id_0_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to8_input_global_id_0_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to8_input_global_id_0_0_stall_in_0_reg_8_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 7
//  * capacity = 7
 logic rnode_1to8_input_global_id_1_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to8_input_global_id_1_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to8_input_global_id_1_0_NO_SHIFT_REG;
 logic rnode_1to8_input_global_id_1_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to8_input_global_id_1_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to8_input_global_id_1_1_NO_SHIFT_REG;
 logic rnode_1to8_input_global_id_1_0_reg_8_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to8_input_global_id_1_0_reg_8_NO_SHIFT_REG;
 logic rnode_1to8_input_global_id_1_0_valid_out_0_reg_8_NO_SHIFT_REG;
 logic rnode_1to8_input_global_id_1_0_stall_in_0_reg_8_NO_SHIFT_REG;
 logic rnode_1to8_input_global_id_1_0_stall_out_reg_8_NO_SHIFT_REG;
 reg rnode_1to8_input_global_id_1_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to8_input_global_id_1_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to8_input_global_id_1_0_reg_8_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to8_input_global_id_1_0_reg_8_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to8_input_global_id_1_0_stall_in_0_reg_8_NO_SHIFT_REG),
	.valid_out(rnode_1to8_input_global_id_1_0_valid_out_0_reg_8_NO_SHIFT_REG),
	.stall_out(rnode_1to8_input_global_id_1_0_stall_out_reg_8_NO_SHIFT_REG),
	.data_in(local_lvm_input_global_id_1_NO_SHIFT_REG),
	.data_out(rnode_1to8_input_global_id_1_0_reg_8_NO_SHIFT_REG)
);

defparam rnode_1to8_input_global_id_1_0_reg_8_fifo.DEPTH = 8;
defparam rnode_1to8_input_global_id_1_0_reg_8_fifo.DATA_WIDTH = 32;
defparam rnode_1to8_input_global_id_1_0_reg_8_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to8_input_global_id_1_0_reg_8_fifo.IMPL = "ll_reg";

assign rnode_1to8_input_global_id_1_0_reg_8_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_8_NO_SHIFT_REG;
assign merge_node_stall_in_8 = rnode_1to8_input_global_id_1_0_stall_out_reg_8_NO_SHIFT_REG;
assign rnode_1to8_input_global_id_1_0_stall_in_0_reg_8_NO_SHIFT_REG = ((rnode_1to8_input_global_id_1_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to8_input_global_id_1_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to8_input_global_id_1_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to8_input_global_id_1_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to8_input_global_id_1_0_valid_out_0_NO_SHIFT_REG = (rnode_1to8_input_global_id_1_0_valid_out_0_reg_8_NO_SHIFT_REG & ~(rnode_1to8_input_global_id_1_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to8_input_global_id_1_0_valid_out_1_NO_SHIFT_REG = (rnode_1to8_input_global_id_1_0_valid_out_0_reg_8_NO_SHIFT_REG & ~(rnode_1to8_input_global_id_1_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to8_input_global_id_1_0_NO_SHIFT_REG = rnode_1to8_input_global_id_1_0_reg_8_NO_SHIFT_REG;
assign rnode_1to8_input_global_id_1_1_NO_SHIFT_REG = rnode_1to8_input_global_id_1_0_reg_8_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to8_input_global_id_1_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to8_input_global_id_1_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to8_input_global_id_1_0_consumed_0_NO_SHIFT_REG <= (rnode_1to8_input_global_id_1_0_valid_out_0_reg_8_NO_SHIFT_REG & (rnode_1to8_input_global_id_1_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to8_input_global_id_1_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to8_input_global_id_1_0_stall_in_0_reg_8_NO_SHIFT_REG);
		rnode_1to8_input_global_id_1_0_consumed_1_NO_SHIFT_REG <= (rnode_1to8_input_global_id_1_0_valid_out_0_reg_8_NO_SHIFT_REG & (rnode_1to8_input_global_id_1_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to8_input_global_id_1_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to8_input_global_id_1_0_stall_in_0_reg_8_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 164
//  * capacity = 164
 logic rnode_1to165_mul50_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to165_mul50_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to165_mul50_0_NO_SHIFT_REG;
 logic rnode_1to165_mul50_0_reg_165_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to165_mul50_0_reg_165_NO_SHIFT_REG;
 logic rnode_1to165_mul50_0_valid_out_reg_165_NO_SHIFT_REG;
 logic rnode_1to165_mul50_0_stall_in_reg_165_NO_SHIFT_REG;
 logic rnode_1to165_mul50_0_stall_out_reg_165_NO_SHIFT_REG;

acl_data_fifo rnode_1to165_mul50_0_reg_165_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to165_mul50_0_reg_165_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to165_mul50_0_stall_in_reg_165_NO_SHIFT_REG),
	.valid_out(rnode_1to165_mul50_0_valid_out_reg_165_NO_SHIFT_REG),
	.stall_out(rnode_1to165_mul50_0_stall_out_reg_165_NO_SHIFT_REG),
	.data_in(local_lvm_mul50_NO_SHIFT_REG),
	.data_out(rnode_1to165_mul50_0_reg_165_NO_SHIFT_REG)
);

defparam rnode_1to165_mul50_0_reg_165_fifo.DEPTH = 165;
defparam rnode_1to165_mul50_0_reg_165_fifo.DATA_WIDTH = 32;
defparam rnode_1to165_mul50_0_reg_165_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to165_mul50_0_reg_165_fifo.IMPL = "ram";

assign rnode_1to165_mul50_0_reg_165_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_9_NO_SHIFT_REG;
assign merge_node_stall_in_9 = rnode_1to165_mul50_0_stall_out_reg_165_NO_SHIFT_REG;
assign rnode_1to165_mul50_0_NO_SHIFT_REG = rnode_1to165_mul50_0_reg_165_NO_SHIFT_REG;
assign rnode_1to165_mul50_0_stall_in_reg_165_NO_SHIFT_REG = rnode_1to165_mul50_0_stall_in_NO_SHIFT_REG;
assign rnode_1to165_mul50_0_valid_out_NO_SHIFT_REG = rnode_1to165_mul50_0_valid_out_reg_165_NO_SHIFT_REG;

// Register node:
//  * latency = 164
//  * capacity = 164
 logic rnode_1to165_heightCounter_141_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to165_heightCounter_141_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to165_heightCounter_141_0_NO_SHIFT_REG;
 logic rnode_1to165_heightCounter_141_0_reg_165_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to165_heightCounter_141_0_reg_165_NO_SHIFT_REG;
 logic rnode_1to165_heightCounter_141_0_valid_out_reg_165_NO_SHIFT_REG;
 logic rnode_1to165_heightCounter_141_0_stall_in_reg_165_NO_SHIFT_REG;
 logic rnode_1to165_heightCounter_141_0_stall_out_reg_165_NO_SHIFT_REG;

acl_data_fifo rnode_1to165_heightCounter_141_0_reg_165_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to165_heightCounter_141_0_reg_165_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to165_heightCounter_141_0_stall_in_reg_165_NO_SHIFT_REG),
	.valid_out(rnode_1to165_heightCounter_141_0_valid_out_reg_165_NO_SHIFT_REG),
	.stall_out(rnode_1to165_heightCounter_141_0_stall_out_reg_165_NO_SHIFT_REG),
	.data_in(local_lvm_heightCounter_141_NO_SHIFT_REG),
	.data_out(rnode_1to165_heightCounter_141_0_reg_165_NO_SHIFT_REG)
);

defparam rnode_1to165_heightCounter_141_0_reg_165_fifo.DEPTH = 165;
defparam rnode_1to165_heightCounter_141_0_reg_165_fifo.DATA_WIDTH = 32;
defparam rnode_1to165_heightCounter_141_0_reg_165_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to165_heightCounter_141_0_reg_165_fifo.IMPL = "ram";

assign rnode_1to165_heightCounter_141_0_reg_165_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_10_NO_SHIFT_REG;
assign merge_node_stall_in_10 = rnode_1to165_heightCounter_141_0_stall_out_reg_165_NO_SHIFT_REG;
assign rnode_1to165_heightCounter_141_0_NO_SHIFT_REG = rnode_1to165_heightCounter_141_0_reg_165_NO_SHIFT_REG;
assign rnode_1to165_heightCounter_141_0_stall_in_reg_165_NO_SHIFT_REG = rnode_1to165_heightCounter_141_0_stall_in_NO_SHIFT_REG;
assign rnode_1to165_heightCounter_141_0_valid_out_NO_SHIFT_REG = rnode_1to165_heightCounter_141_0_valid_out_reg_165_NO_SHIFT_REG;

// Register node:
//  * latency = 164
//  * capacity = 164
 logic rnode_1to165_memcoalesce_param_extrValue_8_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to165_memcoalesce_param_extrValue_8_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to165_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG;
 logic rnode_1to165_memcoalesce_param_extrValue_8_0_reg_165_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to165_memcoalesce_param_extrValue_8_0_reg_165_NO_SHIFT_REG;
 logic rnode_1to165_memcoalesce_param_extrValue_8_0_valid_out_reg_165_NO_SHIFT_REG;
 logic rnode_1to165_memcoalesce_param_extrValue_8_0_stall_in_reg_165_NO_SHIFT_REG;
 logic rnode_1to165_memcoalesce_param_extrValue_8_0_stall_out_reg_165_NO_SHIFT_REG;
wire [65:0] rci_rcnode_1to168_rc12_cmp48_0_reg_1;

acl_data_fifo rnode_1to165_memcoalesce_param_extrValue_8_0_reg_165_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to165_memcoalesce_param_extrValue_8_0_reg_165_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to165_memcoalesce_param_extrValue_8_0_stall_in_reg_165_NO_SHIFT_REG),
	.valid_out(rnode_1to165_memcoalesce_param_extrValue_8_0_valid_out_reg_165_NO_SHIFT_REG),
	.stall_out(rnode_1to165_memcoalesce_param_extrValue_8_0_stall_out_reg_165_NO_SHIFT_REG),
	.data_in(local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG),
	.data_out(rnode_1to165_memcoalesce_param_extrValue_8_0_reg_165_NO_SHIFT_REG)
);

defparam rnode_1to165_memcoalesce_param_extrValue_8_0_reg_165_fifo.DEPTH = 165;
defparam rnode_1to165_memcoalesce_param_extrValue_8_0_reg_165_fifo.DATA_WIDTH = 32;
defparam rnode_1to165_memcoalesce_param_extrValue_8_0_reg_165_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to165_memcoalesce_param_extrValue_8_0_reg_165_fifo.IMPL = "ram";

assign rnode_1to165_memcoalesce_param_extrValue_8_0_reg_165_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_11_NO_SHIFT_REG;
assign merge_node_stall_in_11 = rnode_1to165_memcoalesce_param_extrValue_8_0_stall_out_reg_165_NO_SHIFT_REG;
assign rnode_1to165_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG = rnode_1to165_memcoalesce_param_extrValue_8_0_reg_165_NO_SHIFT_REG;
assign rnode_1to165_memcoalesce_param_extrValue_8_0_stall_in_reg_165_NO_SHIFT_REG = rnode_1to165_memcoalesce_param_extrValue_8_0_stall_in_NO_SHIFT_REG;
assign rnode_1to165_memcoalesce_param_extrValue_8_0_valid_out_NO_SHIFT_REG = rnode_1to165_memcoalesce_param_extrValue_8_0_valid_out_reg_165_NO_SHIFT_REG;
assign rci_rcnode_1to168_rc12_cmp48_0_reg_1[0] = local_lvm_cmp48_NO_SHIFT_REG;
assign rci_rcnode_1to168_rc12_cmp48_0_reg_1[1] = local_lvm_var__NO_SHIFT_REG;
assign rci_rcnode_1to168_rc12_cmp48_0_reg_1[33:2] = local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
assign rci_rcnode_1to168_rc12_cmp48_0_reg_1[65:34] = local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;

// Register node:
//  * latency = 167
//  * capacity = 167
 logic rcnode_1to168_rc12_cmp48_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to168_rc12_cmp48_0_stall_in_NO_SHIFT_REG;
 logic [65:0] rcnode_1to168_rc12_cmp48_0_NO_SHIFT_REG;
 logic rcnode_1to168_rc12_cmp48_0_reg_168_inputs_ready_NO_SHIFT_REG;
 logic [65:0] rcnode_1to168_rc12_cmp48_0_reg_168_NO_SHIFT_REG;
 logic rcnode_1to168_rc12_cmp48_0_valid_out_reg_168_NO_SHIFT_REG;
 logic rcnode_1to168_rc12_cmp48_0_stall_in_reg_168_NO_SHIFT_REG;
 logic rcnode_1to168_rc12_cmp48_0_stall_out_reg_168_IP_NO_SHIFT_REG;
 logic rcnode_1to168_rc12_cmp48_0_stall_out_reg_168_NO_SHIFT_REG;
wire [96:0] rci_rcnode_1to168_rc13_c0_exe1_0_reg_1;

acl_data_fifo rcnode_1to168_rc12_cmp48_0_reg_168_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to168_rc12_cmp48_0_reg_168_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to168_rc12_cmp48_0_stall_in_reg_168_NO_SHIFT_REG),
	.valid_out(rcnode_1to168_rc12_cmp48_0_valid_out_reg_168_NO_SHIFT_REG),
	.stall_out(rcnode_1to168_rc12_cmp48_0_stall_out_reg_168_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to168_rc12_cmp48_0_reg_1),
	.data_out(rcnode_1to168_rc12_cmp48_0_reg_168_NO_SHIFT_REG)
);

defparam rcnode_1to168_rc12_cmp48_0_reg_168_fifo.DEPTH = 168;
defparam rcnode_1to168_rc12_cmp48_0_reg_168_fifo.DATA_WIDTH = 66;
defparam rcnode_1to168_rc12_cmp48_0_reg_168_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to168_rc12_cmp48_0_reg_168_fifo.IMPL = "ram";

assign rcnode_1to168_rc12_cmp48_0_reg_168_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_12_NO_SHIFT_REG;
assign rcnode_1to168_rc12_cmp48_0_stall_out_reg_168_NO_SHIFT_REG = (~(rcnode_1to168_rc12_cmp48_0_reg_168_inputs_ready_NO_SHIFT_REG) | rcnode_1to168_rc12_cmp48_0_stall_out_reg_168_IP_NO_SHIFT_REG);
assign merge_node_stall_in_12 = rcnode_1to168_rc12_cmp48_0_stall_out_reg_168_NO_SHIFT_REG;
assign rcnode_1to168_rc12_cmp48_0_NO_SHIFT_REG = rcnode_1to168_rc12_cmp48_0_reg_168_NO_SHIFT_REG;
assign rcnode_1to168_rc12_cmp48_0_stall_in_reg_168_NO_SHIFT_REG = rcnode_1to168_rc12_cmp48_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to168_rc12_cmp48_0_valid_out_NO_SHIFT_REG = rcnode_1to168_rc12_cmp48_0_valid_out_reg_168_NO_SHIFT_REG;
assign rci_rcnode_1to168_rc13_c0_exe1_0_reg_1[31:0] = local_lvm_c0_exe1_NO_SHIFT_REG;
assign rci_rcnode_1to168_rc13_c0_exe1_0_reg_1[63:32] = local_lvm_c0_exe2_NO_SHIFT_REG;
assign rci_rcnode_1to168_rc13_c0_exe1_0_reg_1[95:64] = local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG;
assign rci_rcnode_1to168_rc13_c0_exe1_0_reg_1[96] = local_lvm_cmp2122_NO_SHIFT_REG;

// Register node:
//  * latency = 167
//  * capacity = 167
 logic rcnode_1to168_rc13_c0_exe1_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to168_rc13_c0_exe1_0_stall_in_NO_SHIFT_REG;
 logic [96:0] rcnode_1to168_rc13_c0_exe1_0_NO_SHIFT_REG;
 logic rcnode_1to168_rc13_c0_exe1_0_reg_168_inputs_ready_NO_SHIFT_REG;
 logic [96:0] rcnode_1to168_rc13_c0_exe1_0_reg_168_NO_SHIFT_REG;
 logic rcnode_1to168_rc13_c0_exe1_0_valid_out_reg_168_NO_SHIFT_REG;
 logic rcnode_1to168_rc13_c0_exe1_0_stall_in_reg_168_NO_SHIFT_REG;
 logic rcnode_1to168_rc13_c0_exe1_0_stall_out_reg_168_IP_NO_SHIFT_REG;
 logic rcnode_1to168_rc13_c0_exe1_0_stall_out_reg_168_NO_SHIFT_REG;
wire [34:0] rci_rcnode_1to168_rc14_var__u3_0_reg_1;

acl_data_fifo rcnode_1to168_rc13_c0_exe1_0_reg_168_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to168_rc13_c0_exe1_0_reg_168_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to168_rc13_c0_exe1_0_stall_in_reg_168_NO_SHIFT_REG),
	.valid_out(rcnode_1to168_rc13_c0_exe1_0_valid_out_reg_168_NO_SHIFT_REG),
	.stall_out(rcnode_1to168_rc13_c0_exe1_0_stall_out_reg_168_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to168_rc13_c0_exe1_0_reg_1),
	.data_out(rcnode_1to168_rc13_c0_exe1_0_reg_168_NO_SHIFT_REG)
);

defparam rcnode_1to168_rc13_c0_exe1_0_reg_168_fifo.DEPTH = 168;
defparam rcnode_1to168_rc13_c0_exe1_0_reg_168_fifo.DATA_WIDTH = 97;
defparam rcnode_1to168_rc13_c0_exe1_0_reg_168_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to168_rc13_c0_exe1_0_reg_168_fifo.IMPL = "ram";

assign rcnode_1to168_rc13_c0_exe1_0_reg_168_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_13_NO_SHIFT_REG;
assign rcnode_1to168_rc13_c0_exe1_0_stall_out_reg_168_NO_SHIFT_REG = (~(rcnode_1to168_rc13_c0_exe1_0_reg_168_inputs_ready_NO_SHIFT_REG) | rcnode_1to168_rc13_c0_exe1_0_stall_out_reg_168_IP_NO_SHIFT_REG);
assign merge_node_stall_in_13 = rcnode_1to168_rc13_c0_exe1_0_stall_out_reg_168_NO_SHIFT_REG;
assign rcnode_1to168_rc13_c0_exe1_0_NO_SHIFT_REG = rcnode_1to168_rc13_c0_exe1_0_reg_168_NO_SHIFT_REG;
assign rcnode_1to168_rc13_c0_exe1_0_stall_in_reg_168_NO_SHIFT_REG = rcnode_1to168_rc13_c0_exe1_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to168_rc13_c0_exe1_0_valid_out_NO_SHIFT_REG = rcnode_1to168_rc13_c0_exe1_0_valid_out_reg_168_NO_SHIFT_REG;
assign rci_rcnode_1to168_rc14_var__u3_0_reg_1[0] = local_lvm_var__u3_NO_SHIFT_REG;
assign rci_rcnode_1to168_rc14_var__u3_0_reg_1[1] = local_lvm__phi_decision77_xor_NO_SHIFT_REG;
assign rci_rcnode_1to168_rc14_var__u3_0_reg_1[2] = local_lvm__phi_decision76_xor_or_NO_SHIFT_REG;
assign rci_rcnode_1to168_rc14_var__u3_0_reg_1[34:3] = local_lvm_channelCounter_049_NO_SHIFT_REG;

// Register node:
//  * latency = 167
//  * capacity = 167
 logic rcnode_1to168_rc14_var__u3_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to168_rc14_var__u3_0_stall_in_NO_SHIFT_REG;
 logic [34:0] rcnode_1to168_rc14_var__u3_0_NO_SHIFT_REG;
 logic rcnode_1to168_rc14_var__u3_0_reg_168_inputs_ready_NO_SHIFT_REG;
 logic [34:0] rcnode_1to168_rc14_var__u3_0_reg_168_NO_SHIFT_REG;
 logic rcnode_1to168_rc14_var__u3_0_valid_out_reg_168_NO_SHIFT_REG;
 logic rcnode_1to168_rc14_var__u3_0_stall_in_reg_168_NO_SHIFT_REG;
 logic rcnode_1to168_rc14_var__u3_0_stall_out_reg_168_IP_NO_SHIFT_REG;
 logic rcnode_1to168_rc14_var__u3_0_stall_out_reg_168_NO_SHIFT_REG;
wire [95:0] rci_rcnode_1to168_rc15_mul_0_reg_1;

acl_data_fifo rcnode_1to168_rc14_var__u3_0_reg_168_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to168_rc14_var__u3_0_reg_168_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to168_rc14_var__u3_0_stall_in_reg_168_NO_SHIFT_REG),
	.valid_out(rcnode_1to168_rc14_var__u3_0_valid_out_reg_168_NO_SHIFT_REG),
	.stall_out(rcnode_1to168_rc14_var__u3_0_stall_out_reg_168_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to168_rc14_var__u3_0_reg_1),
	.data_out(rcnode_1to168_rc14_var__u3_0_reg_168_NO_SHIFT_REG)
);

defparam rcnode_1to168_rc14_var__u3_0_reg_168_fifo.DEPTH = 168;
defparam rcnode_1to168_rc14_var__u3_0_reg_168_fifo.DATA_WIDTH = 35;
defparam rcnode_1to168_rc14_var__u3_0_reg_168_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to168_rc14_var__u3_0_reg_168_fifo.IMPL = "ram";

assign rcnode_1to168_rc14_var__u3_0_reg_168_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_14_NO_SHIFT_REG;
assign rcnode_1to168_rc14_var__u3_0_stall_out_reg_168_NO_SHIFT_REG = (~(rcnode_1to168_rc14_var__u3_0_reg_168_inputs_ready_NO_SHIFT_REG) | rcnode_1to168_rc14_var__u3_0_stall_out_reg_168_IP_NO_SHIFT_REG);
assign merge_node_stall_in_14 = rcnode_1to168_rc14_var__u3_0_stall_out_reg_168_NO_SHIFT_REG;
assign rcnode_1to168_rc14_var__u3_0_NO_SHIFT_REG = rcnode_1to168_rc14_var__u3_0_reg_168_NO_SHIFT_REG;
assign rcnode_1to168_rc14_var__u3_0_stall_in_reg_168_NO_SHIFT_REG = rcnode_1to168_rc14_var__u3_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to168_rc14_var__u3_0_valid_out_NO_SHIFT_REG = rcnode_1to168_rc14_var__u3_0_valid_out_reg_168_NO_SHIFT_REG;
assign rci_rcnode_1to168_rc15_mul_0_reg_1[31:0] = local_lvm_mul_NO_SHIFT_REG;
assign rci_rcnode_1to168_rc15_mul_0_reg_1[63:32] = local_lvm_input_global_id_2_NO_SHIFT_REG;
assign rci_rcnode_1to168_rc15_mul_0_reg_1[95:64] = local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;

// Register node:
//  * latency = 167
//  * capacity = 167
 logic rcnode_1to168_rc15_mul_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to168_rc15_mul_0_stall_in_NO_SHIFT_REG;
 logic [95:0] rcnode_1to168_rc15_mul_0_NO_SHIFT_REG;
 logic rcnode_1to168_rc15_mul_0_reg_168_inputs_ready_NO_SHIFT_REG;
 logic [95:0] rcnode_1to168_rc15_mul_0_reg_168_NO_SHIFT_REG;
 logic rcnode_1to168_rc15_mul_0_valid_out_reg_168_NO_SHIFT_REG;
 logic rcnode_1to168_rc15_mul_0_stall_in_reg_168_NO_SHIFT_REG;
 logic rcnode_1to168_rc15_mul_0_stall_out_reg_168_IP_NO_SHIFT_REG;
 logic rcnode_1to168_rc15_mul_0_stall_out_reg_168_NO_SHIFT_REG;

acl_data_fifo rcnode_1to168_rc15_mul_0_reg_168_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to168_rc15_mul_0_reg_168_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to168_rc15_mul_0_stall_in_reg_168_NO_SHIFT_REG),
	.valid_out(rcnode_1to168_rc15_mul_0_valid_out_reg_168_NO_SHIFT_REG),
	.stall_out(rcnode_1to168_rc15_mul_0_stall_out_reg_168_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to168_rc15_mul_0_reg_1),
	.data_out(rcnode_1to168_rc15_mul_0_reg_168_NO_SHIFT_REG)
);

defparam rcnode_1to168_rc15_mul_0_reg_168_fifo.DEPTH = 168;
defparam rcnode_1to168_rc15_mul_0_reg_168_fifo.DATA_WIDTH = 96;
defparam rcnode_1to168_rc15_mul_0_reg_168_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to168_rc15_mul_0_reg_168_fifo.IMPL = "ram";

assign rcnode_1to168_rc15_mul_0_reg_168_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_15_NO_SHIFT_REG;
assign rcnode_1to168_rc15_mul_0_stall_out_reg_168_NO_SHIFT_REG = (~(rcnode_1to168_rc15_mul_0_reg_168_inputs_ready_NO_SHIFT_REG) | rcnode_1to168_rc15_mul_0_stall_out_reg_168_IP_NO_SHIFT_REG);
assign merge_node_stall_in_15 = rcnode_1to168_rc15_mul_0_stall_out_reg_168_NO_SHIFT_REG;
assign rcnode_1to168_rc15_mul_0_NO_SHIFT_REG = rcnode_1to168_rc15_mul_0_reg_168_NO_SHIFT_REG;
assign rcnode_1to168_rc15_mul_0_stall_in_reg_168_NO_SHIFT_REG = rcnode_1to168_rc15_mul_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to168_rc15_mul_0_valid_out_NO_SHIFT_REG = rcnode_1to168_rc15_mul_0_valid_out_reg_168_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb3_c1_eni26_stall_local;
wire [191:0] local_bb3_c1_eni26;

assign local_bb3_c1_eni26[63:0] = local_bb3_c1_eni17[63:0];
assign local_bb3_c1_eni26[95:64] = local_lvm_heightCounter_141_NO_SHIFT_REG;
assign local_bb3_c1_eni26[191:96] = local_bb3_c1_eni17[191:96];

// This section implements an unregistered operation.
// 
wire local_bb3_notlhs_valid_out;
wire local_bb3_notlhs_stall_in;
wire local_bb3_notlhs_inputs_ready;
wire local_bb3_notlhs_stall_local;
wire local_bb3_notlhs;

assign local_bb3_notlhs_inputs_ready = (rnode_1to8_memcoalesce_param_extrValue_0_0_valid_out_NO_SHIFT_REG & rnode_1to8_input_global_id_0_0_valid_out_0_NO_SHIFT_REG);
assign local_bb3_notlhs = ($signed(input_wii_memcoalesce_param_extrValue_0) <= $signed(rnode_1to8_input_global_id_0_0_NO_SHIFT_REG));
assign local_bb3_notlhs_valid_out = local_bb3_notlhs_inputs_ready;
assign local_bb3_notlhs_stall_local = local_bb3_notlhs_stall_in;
assign rnode_1to8_memcoalesce_param_extrValue_0_0_stall_in_NO_SHIFT_REG = (local_bb3_notlhs_stall_local | ~(local_bb3_notlhs_inputs_ready));
assign rnode_1to8_input_global_id_0_0_stall_in_0_NO_SHIFT_REG = (local_bb3_notlhs_stall_local | ~(local_bb3_notlhs_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb3_notrhs_valid_out;
wire local_bb3_notrhs_stall_in;
wire local_bb3_notrhs_inputs_ready;
wire local_bb3_notrhs_stall_local;
wire local_bb3_notrhs;

assign local_bb3_notrhs_inputs_ready = (rnode_1to8_memcoalesce_param_extrValue_1_0_valid_out_NO_SHIFT_REG & rnode_1to8_input_global_id_1_0_valid_out_0_NO_SHIFT_REG);
assign local_bb3_notrhs = ($signed(input_wii_memcoalesce_param_extrValue_1) <= $signed(rnode_1to8_input_global_id_1_0_NO_SHIFT_REG));
assign local_bb3_notrhs_valid_out = local_bb3_notrhs_inputs_ready;
assign local_bb3_notrhs_stall_local = local_bb3_notrhs_stall_in;
assign rnode_1to8_memcoalesce_param_extrValue_1_0_stall_in_NO_SHIFT_REG = (local_bb3_notrhs_stall_local | ~(local_bb3_notrhs_inputs_ready));
assign rnode_1to8_input_global_id_1_0_stall_in_0_NO_SHIFT_REG = (local_bb3_notrhs_stall_local | ~(local_bb3_notrhs_inputs_ready));

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_165to166_mul50_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_165to166_mul50_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_mul50_0_NO_SHIFT_REG;
 logic rnode_165to166_mul50_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_165to166_mul50_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_mul50_1_NO_SHIFT_REG;
 logic rnode_165to166_mul50_0_reg_166_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_mul50_0_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_mul50_0_valid_out_0_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_mul50_0_stall_in_0_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_mul50_0_stall_out_reg_166_NO_SHIFT_REG;
 reg rnode_165to166_mul50_0_consumed_0_NO_SHIFT_REG;
 reg rnode_165to166_mul50_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_165to166_mul50_0_reg_166_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_165to166_mul50_0_reg_166_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_165to166_mul50_0_stall_in_0_reg_166_NO_SHIFT_REG),
	.valid_out(rnode_165to166_mul50_0_valid_out_0_reg_166_NO_SHIFT_REG),
	.stall_out(rnode_165to166_mul50_0_stall_out_reg_166_NO_SHIFT_REG),
	.data_in(rnode_1to165_mul50_0_NO_SHIFT_REG),
	.data_out(rnode_165to166_mul50_0_reg_166_NO_SHIFT_REG)
);

defparam rnode_165to166_mul50_0_reg_166_fifo.DEPTH = 1;
defparam rnode_165to166_mul50_0_reg_166_fifo.DATA_WIDTH = 32;
defparam rnode_165to166_mul50_0_reg_166_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_165to166_mul50_0_reg_166_fifo.IMPL = "ll_reg";

assign rnode_165to166_mul50_0_reg_166_inputs_ready_NO_SHIFT_REG = rnode_1to165_mul50_0_valid_out_NO_SHIFT_REG;
assign rnode_1to165_mul50_0_stall_in_NO_SHIFT_REG = rnode_165to166_mul50_0_stall_out_reg_166_NO_SHIFT_REG;
assign rnode_165to166_mul50_0_stall_in_0_reg_166_NO_SHIFT_REG = ((rnode_165to166_mul50_0_stall_in_0_NO_SHIFT_REG & ~(rnode_165to166_mul50_0_consumed_0_NO_SHIFT_REG)) | (rnode_165to166_mul50_0_stall_in_1_NO_SHIFT_REG & ~(rnode_165to166_mul50_0_consumed_1_NO_SHIFT_REG)));
assign rnode_165to166_mul50_0_valid_out_0_NO_SHIFT_REG = (rnode_165to166_mul50_0_valid_out_0_reg_166_NO_SHIFT_REG & ~(rnode_165to166_mul50_0_consumed_0_NO_SHIFT_REG));
assign rnode_165to166_mul50_0_valid_out_1_NO_SHIFT_REG = (rnode_165to166_mul50_0_valid_out_0_reg_166_NO_SHIFT_REG & ~(rnode_165to166_mul50_0_consumed_1_NO_SHIFT_REG));
assign rnode_165to166_mul50_0_NO_SHIFT_REG = rnode_165to166_mul50_0_reg_166_NO_SHIFT_REG;
assign rnode_165to166_mul50_1_NO_SHIFT_REG = rnode_165to166_mul50_0_reg_166_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_165to166_mul50_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_165to166_mul50_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_165to166_mul50_0_consumed_0_NO_SHIFT_REG <= (rnode_165to166_mul50_0_valid_out_0_reg_166_NO_SHIFT_REG & (rnode_165to166_mul50_0_consumed_0_NO_SHIFT_REG | ~(rnode_165to166_mul50_0_stall_in_0_NO_SHIFT_REG)) & rnode_165to166_mul50_0_stall_in_0_reg_166_NO_SHIFT_REG);
		rnode_165to166_mul50_0_consumed_1_NO_SHIFT_REG <= (rnode_165to166_mul50_0_valid_out_0_reg_166_NO_SHIFT_REG & (rnode_165to166_mul50_0_consumed_1_NO_SHIFT_REG | ~(rnode_165to166_mul50_0_stall_in_1_NO_SHIFT_REG)) & rnode_165to166_mul50_0_stall_in_0_reg_166_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_165to166_heightCounter_141_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_165to166_heightCounter_141_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_heightCounter_141_0_NO_SHIFT_REG;
 logic rnode_165to166_heightCounter_141_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_165to166_heightCounter_141_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_heightCounter_141_1_NO_SHIFT_REG;
 logic rnode_165to166_heightCounter_141_0_reg_166_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_heightCounter_141_0_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_heightCounter_141_0_valid_out_0_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_heightCounter_141_0_stall_in_0_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_heightCounter_141_0_stall_out_reg_166_NO_SHIFT_REG;
 reg rnode_165to166_heightCounter_141_0_consumed_0_NO_SHIFT_REG;
 reg rnode_165to166_heightCounter_141_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_165to166_heightCounter_141_0_reg_166_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_165to166_heightCounter_141_0_reg_166_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_165to166_heightCounter_141_0_stall_in_0_reg_166_NO_SHIFT_REG),
	.valid_out(rnode_165to166_heightCounter_141_0_valid_out_0_reg_166_NO_SHIFT_REG),
	.stall_out(rnode_165to166_heightCounter_141_0_stall_out_reg_166_NO_SHIFT_REG),
	.data_in(rnode_1to165_heightCounter_141_0_NO_SHIFT_REG),
	.data_out(rnode_165to166_heightCounter_141_0_reg_166_NO_SHIFT_REG)
);

defparam rnode_165to166_heightCounter_141_0_reg_166_fifo.DEPTH = 1;
defparam rnode_165to166_heightCounter_141_0_reg_166_fifo.DATA_WIDTH = 32;
defparam rnode_165to166_heightCounter_141_0_reg_166_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_165to166_heightCounter_141_0_reg_166_fifo.IMPL = "ll_reg";

assign rnode_165to166_heightCounter_141_0_reg_166_inputs_ready_NO_SHIFT_REG = rnode_1to165_heightCounter_141_0_valid_out_NO_SHIFT_REG;
assign rnode_1to165_heightCounter_141_0_stall_in_NO_SHIFT_REG = rnode_165to166_heightCounter_141_0_stall_out_reg_166_NO_SHIFT_REG;
assign rnode_165to166_heightCounter_141_0_stall_in_0_reg_166_NO_SHIFT_REG = ((rnode_165to166_heightCounter_141_0_stall_in_0_NO_SHIFT_REG & ~(rnode_165to166_heightCounter_141_0_consumed_0_NO_SHIFT_REG)) | (rnode_165to166_heightCounter_141_0_stall_in_1_NO_SHIFT_REG & ~(rnode_165to166_heightCounter_141_0_consumed_1_NO_SHIFT_REG)));
assign rnode_165to166_heightCounter_141_0_valid_out_0_NO_SHIFT_REG = (rnode_165to166_heightCounter_141_0_valid_out_0_reg_166_NO_SHIFT_REG & ~(rnode_165to166_heightCounter_141_0_consumed_0_NO_SHIFT_REG));
assign rnode_165to166_heightCounter_141_0_valid_out_1_NO_SHIFT_REG = (rnode_165to166_heightCounter_141_0_valid_out_0_reg_166_NO_SHIFT_REG & ~(rnode_165to166_heightCounter_141_0_consumed_1_NO_SHIFT_REG));
assign rnode_165to166_heightCounter_141_0_NO_SHIFT_REG = rnode_165to166_heightCounter_141_0_reg_166_NO_SHIFT_REG;
assign rnode_165to166_heightCounter_141_1_NO_SHIFT_REG = rnode_165to166_heightCounter_141_0_reg_166_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_165to166_heightCounter_141_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_165to166_heightCounter_141_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_165to166_heightCounter_141_0_consumed_0_NO_SHIFT_REG <= (rnode_165to166_heightCounter_141_0_valid_out_0_reg_166_NO_SHIFT_REG & (rnode_165to166_heightCounter_141_0_consumed_0_NO_SHIFT_REG | ~(rnode_165to166_heightCounter_141_0_stall_in_0_NO_SHIFT_REG)) & rnode_165to166_heightCounter_141_0_stall_in_0_reg_166_NO_SHIFT_REG);
		rnode_165to166_heightCounter_141_0_consumed_1_NO_SHIFT_REG <= (rnode_165to166_heightCounter_141_0_valid_out_0_reg_166_NO_SHIFT_REG & (rnode_165to166_heightCounter_141_0_consumed_1_NO_SHIFT_REG | ~(rnode_165to166_heightCounter_141_0_stall_in_1_NO_SHIFT_REG)) & rnode_165to166_heightCounter_141_0_stall_in_0_reg_166_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_165to166_memcoalesce_param_extrValue_8_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_165to166_memcoalesce_param_extrValue_8_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG;
 logic rnode_165to166_memcoalesce_param_extrValue_8_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_165to166_memcoalesce_param_extrValue_8_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_memcoalesce_param_extrValue_8_1_NO_SHIFT_REG;
 logic rnode_165to166_memcoalesce_param_extrValue_8_0_reg_166_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_memcoalesce_param_extrValue_8_0_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_memcoalesce_param_extrValue_8_0_valid_out_0_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_memcoalesce_param_extrValue_8_0_stall_in_0_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_memcoalesce_param_extrValue_8_0_stall_out_reg_166_NO_SHIFT_REG;
 reg rnode_165to166_memcoalesce_param_extrValue_8_0_consumed_0_NO_SHIFT_REG;
 reg rnode_165to166_memcoalesce_param_extrValue_8_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_165to166_memcoalesce_param_extrValue_8_0_reg_166_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_165to166_memcoalesce_param_extrValue_8_0_reg_166_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_165to166_memcoalesce_param_extrValue_8_0_stall_in_0_reg_166_NO_SHIFT_REG),
	.valid_out(rnode_165to166_memcoalesce_param_extrValue_8_0_valid_out_0_reg_166_NO_SHIFT_REG),
	.stall_out(rnode_165to166_memcoalesce_param_extrValue_8_0_stall_out_reg_166_NO_SHIFT_REG),
	.data_in(rnode_1to165_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG),
	.data_out(rnode_165to166_memcoalesce_param_extrValue_8_0_reg_166_NO_SHIFT_REG)
);

defparam rnode_165to166_memcoalesce_param_extrValue_8_0_reg_166_fifo.DEPTH = 1;
defparam rnode_165to166_memcoalesce_param_extrValue_8_0_reg_166_fifo.DATA_WIDTH = 32;
defparam rnode_165to166_memcoalesce_param_extrValue_8_0_reg_166_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_165to166_memcoalesce_param_extrValue_8_0_reg_166_fifo.IMPL = "ll_reg";

assign rnode_165to166_memcoalesce_param_extrValue_8_0_reg_166_inputs_ready_NO_SHIFT_REG = rnode_1to165_memcoalesce_param_extrValue_8_0_valid_out_NO_SHIFT_REG;
assign rnode_1to165_memcoalesce_param_extrValue_8_0_stall_in_NO_SHIFT_REG = rnode_165to166_memcoalesce_param_extrValue_8_0_stall_out_reg_166_NO_SHIFT_REG;
assign rnode_165to166_memcoalesce_param_extrValue_8_0_stall_in_0_reg_166_NO_SHIFT_REG = ((rnode_165to166_memcoalesce_param_extrValue_8_0_stall_in_0_NO_SHIFT_REG & ~(rnode_165to166_memcoalesce_param_extrValue_8_0_consumed_0_NO_SHIFT_REG)) | (rnode_165to166_memcoalesce_param_extrValue_8_0_stall_in_1_NO_SHIFT_REG & ~(rnode_165to166_memcoalesce_param_extrValue_8_0_consumed_1_NO_SHIFT_REG)));
assign rnode_165to166_memcoalesce_param_extrValue_8_0_valid_out_0_NO_SHIFT_REG = (rnode_165to166_memcoalesce_param_extrValue_8_0_valid_out_0_reg_166_NO_SHIFT_REG & ~(rnode_165to166_memcoalesce_param_extrValue_8_0_consumed_0_NO_SHIFT_REG));
assign rnode_165to166_memcoalesce_param_extrValue_8_0_valid_out_1_NO_SHIFT_REG = (rnode_165to166_memcoalesce_param_extrValue_8_0_valid_out_0_reg_166_NO_SHIFT_REG & ~(rnode_165to166_memcoalesce_param_extrValue_8_0_consumed_1_NO_SHIFT_REG));
assign rnode_165to166_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG = rnode_165to166_memcoalesce_param_extrValue_8_0_reg_166_NO_SHIFT_REG;
assign rnode_165to166_memcoalesce_param_extrValue_8_1_NO_SHIFT_REG = rnode_165to166_memcoalesce_param_extrValue_8_0_reg_166_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_165to166_memcoalesce_param_extrValue_8_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_165to166_memcoalesce_param_extrValue_8_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_165to166_memcoalesce_param_extrValue_8_0_consumed_0_NO_SHIFT_REG <= (rnode_165to166_memcoalesce_param_extrValue_8_0_valid_out_0_reg_166_NO_SHIFT_REG & (rnode_165to166_memcoalesce_param_extrValue_8_0_consumed_0_NO_SHIFT_REG | ~(rnode_165to166_memcoalesce_param_extrValue_8_0_stall_in_0_NO_SHIFT_REG)) & rnode_165to166_memcoalesce_param_extrValue_8_0_stall_in_0_reg_166_NO_SHIFT_REG);
		rnode_165to166_memcoalesce_param_extrValue_8_0_consumed_1_NO_SHIFT_REG <= (rnode_165to166_memcoalesce_param_extrValue_8_0_valid_out_0_reg_166_NO_SHIFT_REG & (rnode_165to166_memcoalesce_param_extrValue_8_0_consumed_1_NO_SHIFT_REG | ~(rnode_165to166_memcoalesce_param_extrValue_8_0_stall_in_1_NO_SHIFT_REG)) & rnode_165to166_memcoalesce_param_extrValue_8_0_stall_in_0_reg_166_NO_SHIFT_REG);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb3_c1_eni35_stall_local;
wire [191:0] local_bb3_c1_eni35;
wire [1:0] rci_rcnode_8to9_rc0_bb3_notrhs_0_reg_8;

assign local_bb3_c1_eni35[95:0] = local_bb3_c1_eni26[95:0];
assign local_bb3_c1_eni35[127:96] = local_lvm_mul_NO_SHIFT_REG;
assign local_bb3_c1_eni35[191:128] = local_bb3_c1_eni26[191:128];
assign rci_rcnode_8to9_rc0_bb3_notrhs_0_reg_8[0] = local_bb3_notrhs;
assign rci_rcnode_8to9_rc0_bb3_notrhs_0_reg_8[1] = local_bb3_notlhs;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_8to9_rc0_bb3_notrhs_0_valid_out_NO_SHIFT_REG;
 logic rcnode_8to9_rc0_bb3_notrhs_0_stall_in_NO_SHIFT_REG;
 logic [1:0] rcnode_8to9_rc0_bb3_notrhs_0_NO_SHIFT_REG;
 logic rcnode_8to9_rc0_bb3_notrhs_0_reg_9_inputs_ready_NO_SHIFT_REG;
 logic [1:0] rcnode_8to9_rc0_bb3_notrhs_0_reg_9_NO_SHIFT_REG;
 logic rcnode_8to9_rc0_bb3_notrhs_0_valid_out_reg_9_NO_SHIFT_REG;
 logic rcnode_8to9_rc0_bb3_notrhs_0_stall_in_reg_9_NO_SHIFT_REG;
 logic rcnode_8to9_rc0_bb3_notrhs_0_stall_out_0_reg_9_IP_NO_SHIFT_REG;
 logic rcnode_8to9_rc0_bb3_notrhs_0_stall_out_0_reg_9_NO_SHIFT_REG;

acl_data_fifo rcnode_8to9_rc0_bb3_notrhs_0_reg_9_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_8to9_rc0_bb3_notrhs_0_reg_9_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_8to9_rc0_bb3_notrhs_0_stall_in_reg_9_NO_SHIFT_REG),
	.valid_out(rcnode_8to9_rc0_bb3_notrhs_0_valid_out_reg_9_NO_SHIFT_REG),
	.stall_out(rcnode_8to9_rc0_bb3_notrhs_0_stall_out_0_reg_9_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_8to9_rc0_bb3_notrhs_0_reg_8),
	.data_out(rcnode_8to9_rc0_bb3_notrhs_0_reg_9_NO_SHIFT_REG)
);

defparam rcnode_8to9_rc0_bb3_notrhs_0_reg_9_fifo.DEPTH = 2;
defparam rcnode_8to9_rc0_bb3_notrhs_0_reg_9_fifo.DATA_WIDTH = 2;
defparam rcnode_8to9_rc0_bb3_notrhs_0_reg_9_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_8to9_rc0_bb3_notrhs_0_reg_9_fifo.IMPL = "ll_reg";

assign rcnode_8to9_rc0_bb3_notrhs_0_reg_9_inputs_ready_NO_SHIFT_REG = (local_bb3_notrhs_valid_out & local_bb3_notlhs_valid_out);
assign rcnode_8to9_rc0_bb3_notrhs_0_stall_out_0_reg_9_NO_SHIFT_REG = (~(rcnode_8to9_rc0_bb3_notrhs_0_reg_9_inputs_ready_NO_SHIFT_REG) | rcnode_8to9_rc0_bb3_notrhs_0_stall_out_0_reg_9_IP_NO_SHIFT_REG);
assign local_bb3_notrhs_stall_in = rcnode_8to9_rc0_bb3_notrhs_0_stall_out_0_reg_9_NO_SHIFT_REG;
assign local_bb3_notlhs_stall_in = rcnode_8to9_rc0_bb3_notrhs_0_stall_out_0_reg_9_NO_SHIFT_REG;
assign rcnode_8to9_rc0_bb3_notrhs_0_NO_SHIFT_REG = rcnode_8to9_rc0_bb3_notrhs_0_reg_9_NO_SHIFT_REG;
assign rcnode_8to9_rc0_bb3_notrhs_0_stall_in_reg_9_NO_SHIFT_REG = rcnode_8to9_rc0_bb3_notrhs_0_stall_in_NO_SHIFT_REG;
assign rcnode_8to9_rc0_bb3_notrhs_0_valid_out_NO_SHIFT_REG = rcnode_8to9_rc0_bb3_notrhs_0_valid_out_reg_9_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb3_c1_eni1_stall_local;
wire [127:0] local_bb3_c1_eni1;
wire [95:0] rci_rcnode_166to169_rc1_mul50_0_reg_166;

assign local_bb3_c1_eni1[31:0] = 32'bx;
assign local_bb3_c1_eni1[63:32] = rnode_165to166_mul50_0_NO_SHIFT_REG;
assign local_bb3_c1_eni1[127:64] = 64'bx;
assign rci_rcnode_166to169_rc1_mul50_0_reg_166[31:0] = rnode_165to166_mul50_1_NO_SHIFT_REG;
assign rci_rcnode_166to169_rc1_mul50_0_reg_166[63:32] = rnode_165to166_heightCounter_141_1_NO_SHIFT_REG;
assign rci_rcnode_166to169_rc1_mul50_0_reg_166[95:64] = rnode_165to166_memcoalesce_param_extrValue_8_1_NO_SHIFT_REG;

// Register node:
//  * latency = 3
//  * capacity = 3
 logic rcnode_166to169_rc1_mul50_0_valid_out_NO_SHIFT_REG;
 logic rcnode_166to169_rc1_mul50_0_stall_in_NO_SHIFT_REG;
 logic [95:0] rcnode_166to169_rc1_mul50_0_NO_SHIFT_REG;
 logic rcnode_166to169_rc1_mul50_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic [95:0] rcnode_166to169_rc1_mul50_0_reg_169_NO_SHIFT_REG;
 logic rcnode_166to169_rc1_mul50_0_valid_out_reg_169_NO_SHIFT_REG;
 logic rcnode_166to169_rc1_mul50_0_stall_in_reg_169_NO_SHIFT_REG;
 logic rcnode_166to169_rc1_mul50_0_stall_out_0_reg_169_IP_NO_SHIFT_REG;
 logic rcnode_166to169_rc1_mul50_0_stall_out_0_reg_169_NO_SHIFT_REG;

acl_data_fifo rcnode_166to169_rc1_mul50_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_166to169_rc1_mul50_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_166to169_rc1_mul50_0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rcnode_166to169_rc1_mul50_0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rcnode_166to169_rc1_mul50_0_stall_out_0_reg_169_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_166to169_rc1_mul50_0_reg_166),
	.data_out(rcnode_166to169_rc1_mul50_0_reg_169_NO_SHIFT_REG)
);

defparam rcnode_166to169_rc1_mul50_0_reg_169_fifo.DEPTH = 4;
defparam rcnode_166to169_rc1_mul50_0_reg_169_fifo.DATA_WIDTH = 96;
defparam rcnode_166to169_rc1_mul50_0_reg_169_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_166to169_rc1_mul50_0_reg_169_fifo.IMPL = "ll_reg";

assign rcnode_166to169_rc1_mul50_0_reg_169_inputs_ready_NO_SHIFT_REG = (rnode_165to166_mul50_0_valid_out_1_NO_SHIFT_REG & rnode_165to166_heightCounter_141_0_valid_out_1_NO_SHIFT_REG & rnode_165to166_memcoalesce_param_extrValue_8_0_valid_out_1_NO_SHIFT_REG);
assign rcnode_166to169_rc1_mul50_0_stall_out_0_reg_169_NO_SHIFT_REG = (~(rcnode_166to169_rc1_mul50_0_reg_169_inputs_ready_NO_SHIFT_REG) | rcnode_166to169_rc1_mul50_0_stall_out_0_reg_169_IP_NO_SHIFT_REG);
assign rnode_165to166_mul50_0_stall_in_1_NO_SHIFT_REG = rcnode_166to169_rc1_mul50_0_stall_out_0_reg_169_NO_SHIFT_REG;
assign rnode_165to166_heightCounter_141_0_stall_in_1_NO_SHIFT_REG = rcnode_166to169_rc1_mul50_0_stall_out_0_reg_169_NO_SHIFT_REG;
assign rnode_165to166_memcoalesce_param_extrValue_8_0_stall_in_1_NO_SHIFT_REG = rcnode_166to169_rc1_mul50_0_stall_out_0_reg_169_NO_SHIFT_REG;
assign rcnode_166to169_rc1_mul50_0_NO_SHIFT_REG = rcnode_166to169_rc1_mul50_0_reg_169_NO_SHIFT_REG;
assign rcnode_166to169_rc1_mul50_0_stall_in_reg_169_NO_SHIFT_REG = rcnode_166to169_rc1_mul50_0_stall_in_NO_SHIFT_REG;
assign rcnode_166to169_rc1_mul50_0_valid_out_NO_SHIFT_REG = rcnode_166to169_rc1_mul50_0_valid_out_reg_169_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb3_c1_eni4_stall_local;
wire [191:0] local_bb3_c1_eni4;

assign local_bb3_c1_eni4[127:0] = local_bb3_c1_eni35[127:0];
assign local_bb3_c1_eni4[159:128] = local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
assign local_bb3_c1_eni4[191:160] = local_bb3_c1_eni35[191:160];

// This section implements an unregistered operation.
// 
wire local_bb3__phi_decision_xor_RM_valid_out;
wire local_bb3__phi_decision_xor_RM_stall_in;
wire local_bb3__phi_decision_xor_RM_inputs_ready;
wire local_bb3__phi_decision_xor_RM_stall_local;
wire local_bb3__phi_decision_xor_RM;

assign local_bb3__phi_decision_xor_RM_inputs_ready = rcnode_8to9_rc0_bb3_notrhs_0_valid_out_NO_SHIFT_REG;
assign local_bb3__phi_decision_xor_RM = (rcnode_8to9_rc0_bb3_notrhs_0_NO_SHIFT_REG[0] | rcnode_8to9_rc0_bb3_notrhs_0_NO_SHIFT_REG[1]);
assign local_bb3__phi_decision_xor_RM_valid_out = local_bb3__phi_decision_xor_RM_inputs_ready;
assign local_bb3__phi_decision_xor_RM_stall_local = local_bb3__phi_decision_xor_RM_stall_in;
assign rcnode_8to9_rc0_bb3_notrhs_0_stall_in_NO_SHIFT_REG = (|local_bb3__phi_decision_xor_RM_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb3_c1_eni2_stall_local;
wire [127:0] local_bb3_c1_eni2;

assign local_bb3_c1_eni2[63:0] = local_bb3_c1_eni1[63:0];
assign local_bb3_c1_eni2[95:64] = rnode_165to166_heightCounter_141_0_NO_SHIFT_REG;
assign local_bb3_c1_eni2[127:96] = local_bb3_c1_eni1[127:96];

// This section implements an unregistered operation.
// 
wire local_bb3_c1_eni5_valid_out;
wire local_bb3_c1_eni5_stall_in;
wire local_bb3_c1_eni5_inputs_ready;
wire local_bb3_c1_eni5_stall_local;
wire [191:0] local_bb3_c1_eni5;

assign local_bb3_c1_eni5_inputs_ready = (merge_node_valid_out_0_NO_SHIFT_REG & merge_node_valid_out_1_NO_SHIFT_REG & merge_node_valid_out_2_NO_SHIFT_REG & merge_node_valid_out_3_NO_SHIFT_REG & merge_node_valid_out_4_NO_SHIFT_REG);
assign local_bb3_c1_eni5[159:0] = local_bb3_c1_eni4[159:0];
assign local_bb3_c1_eni5[191:160] = local_lvm_c0_exe2_NO_SHIFT_REG;
assign local_bb3_c1_eni5_valid_out = local_bb3_c1_eni5_inputs_ready;
assign local_bb3_c1_eni5_stall_local = local_bb3_c1_eni5_stall_in;
assign merge_node_stall_in_0 = (local_bb3_c1_eni5_stall_local | ~(local_bb3_c1_eni5_inputs_ready));
assign merge_node_stall_in_1 = (local_bb3_c1_eni5_stall_local | ~(local_bb3_c1_eni5_inputs_ready));
assign merge_node_stall_in_2 = (local_bb3_c1_eni5_stall_local | ~(local_bb3_c1_eni5_inputs_ready));
assign merge_node_stall_in_3 = (local_bb3_c1_eni5_stall_local | ~(local_bb3_c1_eni5_inputs_ready));
assign merge_node_stall_in_4 = (local_bb3_c1_eni5_stall_local | ~(local_bb3_c1_eni5_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb3_c1_eni3_valid_out;
wire local_bb3_c1_eni3_stall_in;
wire local_bb3_c1_eni3_inputs_ready;
wire local_bb3_c1_eni3_stall_local;
wire [127:0] local_bb3_c1_eni3;

assign local_bb3_c1_eni3_inputs_ready = (rnode_165to166_mul50_0_valid_out_0_NO_SHIFT_REG & rnode_165to166_heightCounter_141_0_valid_out_0_NO_SHIFT_REG & rnode_165to166_memcoalesce_param_extrValue_8_0_valid_out_0_NO_SHIFT_REG);
assign local_bb3_c1_eni3[95:0] = local_bb3_c1_eni2[95:0];
assign local_bb3_c1_eni3[127:96] = rnode_165to166_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG;
assign local_bb3_c1_eni3_valid_out = local_bb3_c1_eni3_inputs_ready;
assign local_bb3_c1_eni3_stall_local = local_bb3_c1_eni3_stall_in;
assign rnode_165to166_mul50_0_stall_in_0_NO_SHIFT_REG = (local_bb3_c1_eni3_stall_local | ~(local_bb3_c1_eni3_inputs_ready));
assign rnode_165to166_heightCounter_141_0_stall_in_0_NO_SHIFT_REG = (local_bb3_c1_eni3_stall_local | ~(local_bb3_c1_eni3_inputs_ready));
assign rnode_165to166_memcoalesce_param_extrValue_8_0_stall_in_0_NO_SHIFT_REG = (local_bb3_c1_eni3_stall_local | ~(local_bb3_c1_eni3_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb3_c1_enter4_c1_eni5_valid_out_0;
wire local_bb3_c1_enter4_c1_eni5_stall_in_0;
wire local_bb3_c1_enter4_c1_eni5_valid_out_1;
wire local_bb3_c1_enter4_c1_eni5_stall_in_1;
wire local_bb3_c1_enter4_c1_eni5_valid_out_2;
wire local_bb3_c1_enter4_c1_eni5_stall_in_2;
wire local_bb3_c1_enter4_c1_eni5_valid_out_3;
wire local_bb3_c1_enter4_c1_eni5_stall_in_3;
wire local_bb3_c1_enter4_c1_eni5_valid_out_4;
wire local_bb3_c1_enter4_c1_eni5_stall_in_4;
wire local_bb3_c1_enter4_c1_eni5_valid_out_5;
wire local_bb3_c1_enter4_c1_eni5_stall_in_5;
wire local_bb3_c1_enter4_c1_eni5_inputs_ready;
wire local_bb3_c1_enter4_c1_eni5_stall_local;
wire local_bb3_c1_enter4_c1_eni5_input_accepted;
wire [191:0] local_bb3_c1_enter4_c1_eni5;
wire local_bb3_c1_exit2_c1_exi4_enable;
wire local_bb3_c1_exit2_c1_exi4_entry_stall;
wire local_bb3_c1_enter4_c1_eni5_valid_bit;
wire local_bb3_c1_exit2_c1_exi4_output_regs_ready;
wire local_bb3_c1_exit2_c1_exi4_valid_in;
wire local_bb3_c1_exit2_c1_exi4_phases;
wire local_bb3_c1_enter4_c1_eni5_inc_pipelined_thread;
wire local_bb3_c1_enter4_c1_eni5_dec_pipelined_thread;
wire local_bb3_c1_enter4_c1_eni5_fu_stall_out;

assign local_bb3_c1_enter4_c1_eni5_inputs_ready = local_bb3_c1_eni5_valid_out;
assign local_bb3_c1_enter4_c1_eni5 = local_bb3_c1_eni5;
assign local_bb3_c1_enter4_c1_eni5_input_accepted = (local_bb3_c1_enter4_c1_eni5_inputs_ready && !(local_bb3_c1_exit2_c1_exi4_entry_stall));
assign local_bb3_c1_enter4_c1_eni5_valid_bit = local_bb3_c1_enter4_c1_eni5_input_accepted;
assign local_bb3_c1_enter4_c1_eni5_inc_pipelined_thread = 1'b1;
assign local_bb3_c1_enter4_c1_eni5_dec_pipelined_thread = ~(1'b0);
assign local_bb3_c1_enter4_c1_eni5_fu_stall_out = (~(local_bb3_c1_enter4_c1_eni5_inputs_ready) | local_bb3_c1_exit2_c1_exi4_entry_stall);
assign local_bb3_c1_enter4_c1_eni5_stall_local = (local_bb3_c1_enter4_c1_eni5_stall_in_0 | local_bb3_c1_enter4_c1_eni5_stall_in_1 | local_bb3_c1_enter4_c1_eni5_stall_in_2 | local_bb3_c1_enter4_c1_eni5_stall_in_3 | local_bb3_c1_enter4_c1_eni5_stall_in_4 | local_bb3_c1_enter4_c1_eni5_stall_in_5);
assign local_bb3_c1_enter4_c1_eni5_valid_out_0 = local_bb3_c1_enter4_c1_eni5_inputs_ready;
assign local_bb3_c1_enter4_c1_eni5_valid_out_1 = local_bb3_c1_enter4_c1_eni5_inputs_ready;
assign local_bb3_c1_enter4_c1_eni5_valid_out_2 = local_bb3_c1_enter4_c1_eni5_inputs_ready;
assign local_bb3_c1_enter4_c1_eni5_valid_out_3 = local_bb3_c1_enter4_c1_eni5_inputs_ready;
assign local_bb3_c1_enter4_c1_eni5_valid_out_4 = local_bb3_c1_enter4_c1_eni5_inputs_ready;
assign local_bb3_c1_enter4_c1_eni5_valid_out_5 = local_bb3_c1_enter4_c1_eni5_inputs_ready;
assign local_bb3_c1_eni5_stall_in = (|local_bb3_c1_enter4_c1_eni5_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb3_c1_enter_c1_eni3_valid_out_0;
wire local_bb3_c1_enter_c1_eni3_stall_in_0;
wire local_bb3_c1_enter_c1_eni3_valid_out_1;
wire local_bb3_c1_enter_c1_eni3_stall_in_1;
wire local_bb3_c1_enter_c1_eni3_valid_out_2;
wire local_bb3_c1_enter_c1_eni3_stall_in_2;
wire local_bb3_c1_enter_c1_eni3_valid_out_3;
wire local_bb3_c1_enter_c1_eni3_stall_in_3;
wire local_bb3_c1_enter_c1_eni3_inputs_ready;
wire local_bb3_c1_enter_c1_eni3_stall_local;
wire local_bb3_c1_enter_c1_eni3_input_accepted;
wire [127:0] local_bb3_c1_enter_c1_eni3;
wire local_bb3_c1_exit_c1_exi1_enable;
wire local_bb3_c1_exit_c1_exi1_entry_stall;
wire local_bb3_c1_enter_c1_eni3_valid_bit;
wire local_bb3_c1_exit_c1_exi1_output_regs_ready;
wire local_bb3_c1_exit_c1_exi1_valid_in;
wire local_bb3_c1_exit_c1_exi1_phases;
wire local_bb3_c1_enter_c1_eni3_inc_pipelined_thread;
wire local_bb3_c1_enter_c1_eni3_dec_pipelined_thread;
wire local_bb3_c1_enter_c1_eni3_fu_stall_out;

assign local_bb3_c1_enter_c1_eni3_inputs_ready = local_bb3_c1_eni3_valid_out;
assign local_bb3_c1_enter_c1_eni3 = local_bb3_c1_eni3;
assign local_bb3_c1_enter_c1_eni3_input_accepted = (local_bb3_c1_enter_c1_eni3_inputs_ready && !(local_bb3_c1_exit_c1_exi1_entry_stall));
assign local_bb3_c1_enter_c1_eni3_valid_bit = local_bb3_c1_enter_c1_eni3_input_accepted;
assign local_bb3_c1_enter_c1_eni3_inc_pipelined_thread = 1'b1;
assign local_bb3_c1_enter_c1_eni3_dec_pipelined_thread = ~(1'b0);
assign local_bb3_c1_enter_c1_eni3_fu_stall_out = (~(local_bb3_c1_enter_c1_eni3_inputs_ready) | local_bb3_c1_exit_c1_exi1_entry_stall);
assign local_bb3_c1_enter_c1_eni3_stall_local = (local_bb3_c1_enter_c1_eni3_stall_in_0 | local_bb3_c1_enter_c1_eni3_stall_in_1 | local_bb3_c1_enter_c1_eni3_stall_in_2 | local_bb3_c1_enter_c1_eni3_stall_in_3);
assign local_bb3_c1_enter_c1_eni3_valid_out_0 = local_bb3_c1_enter_c1_eni3_inputs_ready;
assign local_bb3_c1_enter_c1_eni3_valid_out_1 = local_bb3_c1_enter_c1_eni3_inputs_ready;
assign local_bb3_c1_enter_c1_eni3_valid_out_2 = local_bb3_c1_enter_c1_eni3_inputs_ready;
assign local_bb3_c1_enter_c1_eni3_valid_out_3 = local_bb3_c1_enter_c1_eni3_inputs_ready;
assign local_bb3_c1_eni3_stall_in = (|local_bb3_c1_enter_c1_eni3_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb3_c1_ene110_valid_out;
wire local_bb3_c1_ene110_stall_in;
wire local_bb3_c1_ene110_inputs_ready;
wire local_bb3_c1_ene110_stall_local;
wire [31:0] local_bb3_c1_ene110;

assign local_bb3_c1_ene110_inputs_ready = local_bb3_c1_enter4_c1_eni5_valid_out_0;
assign local_bb3_c1_ene110[31:0] = local_bb3_c1_enter4_c1_eni5[63:32];
assign local_bb3_c1_ene110_valid_out = 1'b1;
assign local_bb3_c1_enter4_c1_eni5_stall_in_0 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb3_c1_ene29_valid_out;
wire local_bb3_c1_ene29_stall_in;
wire local_bb3_c1_ene29_inputs_ready;
wire local_bb3_c1_ene29_stall_local;
wire [31:0] local_bb3_c1_ene29;

assign local_bb3_c1_ene29_inputs_ready = local_bb3_c1_enter4_c1_eni5_valid_out_1;
assign local_bb3_c1_ene29[31:0] = local_bb3_c1_enter4_c1_eni5[95:64];
assign local_bb3_c1_ene29_valid_out = 1'b1;
assign local_bb3_c1_enter4_c1_eni5_stall_in_1 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb3_c1_ene38_valid_out;
wire local_bb3_c1_ene38_stall_in;
wire local_bb3_c1_ene38_inputs_ready;
wire local_bb3_c1_ene38_stall_local;
wire [31:0] local_bb3_c1_ene38;

assign local_bb3_c1_ene38_inputs_ready = local_bb3_c1_enter4_c1_eni5_valid_out_2;
assign local_bb3_c1_ene38[31:0] = local_bb3_c1_enter4_c1_eni5[127:96];
assign local_bb3_c1_ene38_valid_out = 1'b1;
assign local_bb3_c1_enter4_c1_eni5_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb3_c1_ene4_valid_out;
wire local_bb3_c1_ene4_stall_in;
wire local_bb3_c1_ene4_inputs_ready;
wire local_bb3_c1_ene4_stall_local;
wire [31:0] local_bb3_c1_ene4;

assign local_bb3_c1_ene4_inputs_ready = local_bb3_c1_enter4_c1_eni5_valid_out_3;
assign local_bb3_c1_ene4[31:0] = local_bb3_c1_enter4_c1_eni5[159:128];
assign local_bb3_c1_ene4_valid_out = 1'b1;
assign local_bb3_c1_enter4_c1_eni5_stall_in_3 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb3_c1_ene5_valid_out;
wire local_bb3_c1_ene5_stall_in;
wire local_bb3_c1_ene5_inputs_ready;
wire local_bb3_c1_ene5_stall_local;
wire [31:0] local_bb3_c1_ene5;

assign local_bb3_c1_ene5_inputs_ready = local_bb3_c1_enter4_c1_eni5_valid_out_4;
assign local_bb3_c1_ene5[31:0] = local_bb3_c1_enter4_c1_eni5[191:160];
assign local_bb3_c1_ene5_valid_out = 1'b1;
assign local_bb3_c1_enter4_c1_eni5_stall_in_4 = 1'b0;

// This section implements an unregistered operation.
// 
wire SFC_2_VALID_1_1_0_valid_out;
wire SFC_2_VALID_1_1_0_stall_in;
wire SFC_2_VALID_1_1_0_inputs_ready;
wire SFC_2_VALID_1_1_0_stall_local;
wire SFC_2_VALID_1_1_0;

assign SFC_2_VALID_1_1_0_inputs_ready = local_bb3_c1_enter4_c1_eni5_valid_out_5;
assign SFC_2_VALID_1_1_0 = local_bb3_c1_enter4_c1_eni5_valid_bit;
assign SFC_2_VALID_1_1_0_valid_out = 1'b1;
assign local_bb3_c1_enter4_c1_eni5_stall_in_5 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb3_c1_ene1_stall_local;
wire [31:0] local_bb3_c1_ene1;

assign local_bb3_c1_ene1[31:0] = local_bb3_c1_enter_c1_eni3[63:32];

// This section implements an unregistered operation.
// 
wire local_bb3_c1_ene2_stall_local;
wire [31:0] local_bb3_c1_ene2;

assign local_bb3_c1_ene2[31:0] = local_bb3_c1_enter_c1_eni3[95:64];

// This section implements an unregistered operation.
// 
wire local_bb3_c1_ene3_valid_out;
wire local_bb3_c1_ene3_stall_in;
wire local_bb3_c1_ene3_inputs_ready;
wire local_bb3_c1_ene3_stall_local;
wire [31:0] local_bb3_c1_ene3;

assign local_bb3_c1_ene3_inputs_ready = local_bb3_c1_enter_c1_eni3_valid_out_2;
assign local_bb3_c1_ene3[31:0] = local_bb3_c1_enter_c1_eni3[127:96];
assign local_bb3_c1_ene3_valid_out = 1'b1;
assign local_bb3_c1_enter_c1_eni3_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire SFC_5_VALID_166_166_0_valid_out;
wire SFC_5_VALID_166_166_0_stall_in;
wire SFC_5_VALID_166_166_0_inputs_ready;
wire SFC_5_VALID_166_166_0_stall_local;
wire SFC_5_VALID_166_166_0;

assign SFC_5_VALID_166_166_0_inputs_ready = local_bb3_c1_enter_c1_eni3_valid_out_3;
assign SFC_5_VALID_166_166_0 = local_bb3_c1_enter_c1_eni3_valid_bit;
assign SFC_5_VALID_166_166_0_valid_out = 1'b1;
assign local_bb3_c1_enter_c1_eni3_stall_in_3 = 1'b0;

// This section implements a registered operation.
// 
wire local_bb3_mul15_inputs_ready;
 reg local_bb3_mul15_valid_out_NO_SHIFT_REG;
wire local_bb3_mul15_stall_in;
wire local_bb3_mul15_output_regs_ready;
wire [31:0] local_bb3_mul15;
 reg local_bb3_mul15_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb3_mul15_valid_pipe_1_NO_SHIFT_REG;
wire local_bb3_mul15_causedstall;

acl_int_mult int_module_local_bb3_mul15 (
	.clock(clock),
	.dataa(local_bb3_c1_ene110),
	.datab(local_bb3_c1_ene29),
	.enable(local_bb3_mul15_output_regs_ready),
	.result(local_bb3_mul15)
);

defparam int_module_local_bb3_mul15.INPUT1_WIDTH = 32;
defparam int_module_local_bb3_mul15.INPUT2_WIDTH = 32;
defparam int_module_local_bb3_mul15.OUTPUT_WIDTH = 32;
defparam int_module_local_bb3_mul15.LATENCY = 3;
defparam int_module_local_bb3_mul15.SIGNED = 0;

assign local_bb3_mul15_inputs_ready = 1'b1;
assign local_bb3_mul15_output_regs_ready = local_bb3_c1_exit2_c1_exi4_enable;
assign local_bb3_c1_ene110_stall_in = 1'b0;
assign local_bb3_c1_ene29_stall_in = 1'b0;
assign local_bb3_mul15_causedstall = (1'b1 && (1'b0 && !(~(local_bb3_c1_exit2_c1_exi4_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb3_mul15_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb3_mul15_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb3_mul15_output_regs_ready)
		begin
			local_bb3_mul15_valid_pipe_0_NO_SHIFT_REG <= 1'b1;
			local_bb3_mul15_valid_pipe_1_NO_SHIFT_REG <= local_bb3_mul15_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb3_mul15_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb3_mul15_output_regs_ready)
		begin
			local_bb3_mul15_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb3_mul15_stall_in))
			begin
				local_bb3_mul15_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb3_c1_ene38_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb3_c1_ene38_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb3_c1_ene38_0_NO_SHIFT_REG;
 logic rnode_1to2_bb3_c1_ene38_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb3_c1_ene38_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb3_c1_ene38_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb3_c1_ene38_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb3_c1_ene38_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb3_c1_ene38_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb3_c1_ene38_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb3_c1_ene38_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb3_c1_ene38_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb3_c1_ene38_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb3_c1_ene38),
	.data_out(rnode_1to2_bb3_c1_ene38_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb3_c1_ene38_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb3_c1_ene38_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb3_c1_ene38_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb3_c1_ene38_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb3_c1_ene38_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb3_c1_ene38_stall_in = 1'b0;
assign rnode_1to2_bb3_c1_ene38_0_NO_SHIFT_REG = rnode_1to2_bb3_c1_ene38_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb3_c1_ene38_0_stall_in_reg_2_NO_SHIFT_REG = ~(local_bb3_c1_exit2_c1_exi4_enable);
assign rnode_1to2_bb3_c1_ene38_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb3_c1_ene4_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb3_c1_ene4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb3_c1_ene4_0_NO_SHIFT_REG;
 logic rnode_1to2_bb3_c1_ene4_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb3_c1_ene4_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb3_c1_ene4_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb3_c1_ene4_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb3_c1_ene4_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb3_c1_ene4_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb3_c1_ene4_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb3_c1_ene4_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb3_c1_ene4_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb3_c1_ene4_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb3_c1_ene4),
	.data_out(rnode_1to2_bb3_c1_ene4_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb3_c1_ene4_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb3_c1_ene4_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb3_c1_ene4_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb3_c1_ene4_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb3_c1_ene4_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb3_c1_ene4_stall_in = 1'b0;
assign rnode_1to2_bb3_c1_ene4_0_NO_SHIFT_REG = rnode_1to2_bb3_c1_ene4_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb3_c1_ene4_0_stall_in_reg_2_NO_SHIFT_REG = ~(local_bb3_c1_exit2_c1_exi4_enable);
assign rnode_1to2_bb3_c1_ene4_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb3_c1_ene5_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb3_c1_ene5_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb3_c1_ene5_0_NO_SHIFT_REG;
 logic rnode_1to2_bb3_c1_ene5_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb3_c1_ene5_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb3_c1_ene5_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb3_c1_ene5_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb3_c1_ene5_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb3_c1_ene5_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb3_c1_ene5_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb3_c1_ene5_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb3_c1_ene5_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb3_c1_ene5_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb3_c1_ene5),
	.data_out(rnode_1to2_bb3_c1_ene5_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb3_c1_ene5_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb3_c1_ene5_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb3_c1_ene5_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb3_c1_ene5_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb3_c1_ene5_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb3_c1_ene5_stall_in = 1'b0;
assign rnode_1to2_bb3_c1_ene5_0_NO_SHIFT_REG = rnode_1to2_bb3_c1_ene5_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb3_c1_ene5_0_stall_in_reg_2_NO_SHIFT_REG = ~(local_bb3_c1_exit2_c1_exi4_enable);
assign rnode_1to2_bb3_c1_ene5_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_2_VALID_1_2_0_inputs_ready;
 reg SFC_2_VALID_1_2_0_valid_out_NO_SHIFT_REG;
wire SFC_2_VALID_1_2_0_stall_in;
wire SFC_2_VALID_1_2_0_output_regs_ready;
 reg SFC_2_VALID_1_2_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_2_VALID_1_2_0_causedstall;

assign SFC_2_VALID_1_2_0_inputs_ready = 1'b1;
assign SFC_2_VALID_1_2_0_output_regs_ready = local_bb3_c1_exit2_c1_exi4_enable;
assign SFC_2_VALID_1_1_0_stall_in = 1'b0;
assign SFC_2_VALID_1_2_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb3_c1_exit2_c1_exi4_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_2_VALID_1_2_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_2_VALID_1_2_0_output_regs_ready)
		begin
			SFC_2_VALID_1_2_0_NO_SHIFT_REG <= SFC_2_VALID_1_1_0;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb3_mul5214_valid_out;
wire local_bb3_mul5214_stall_in;
wire local_bb3_mul5214_inputs_ready;
wire local_bb3_mul5214_stall_local;
wire [31:0] local_bb3_mul5214;

assign local_bb3_mul5214_inputs_ready = (local_bb3_c1_enter_c1_eni3_valid_out_0 & local_bb3_c1_enter_c1_eni3_valid_out_1);
assign local_bb3_mul5214 = (local_bb3_c1_ene1 + local_bb3_c1_ene2);
assign local_bb3_mul5214_valid_out = 1'b1;
assign local_bb3_c1_enter_c1_eni3_stall_in_0 = 1'b0;
assign local_bb3_c1_enter_c1_eni3_stall_in_1 = 1'b0;

// This section implements a registered operation.
// 
wire SFC_5_VALID_166_167_0_inputs_ready;
 reg SFC_5_VALID_166_167_0_valid_out_NO_SHIFT_REG;
wire SFC_5_VALID_166_167_0_stall_in;
wire SFC_5_VALID_166_167_0_output_regs_ready;
 reg SFC_5_VALID_166_167_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_5_VALID_166_167_0_causedstall;

assign SFC_5_VALID_166_167_0_inputs_ready = 1'b1;
assign SFC_5_VALID_166_167_0_output_regs_ready = local_bb3_c1_exit_c1_exi1_enable;
assign SFC_5_VALID_166_166_0_stall_in = 1'b0;
assign SFC_5_VALID_166_167_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb3_c1_exit_c1_exi1_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_5_VALID_166_167_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_5_VALID_166_167_0_output_regs_ready)
		begin
			SFC_5_VALID_166_167_0_NO_SHIFT_REG <= SFC_5_VALID_166_166_0;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb3_c1_exi11_stall_local;
wire [159:0] local_bb3_c1_exi11;

assign local_bb3_c1_exi11[31:0] = 32'bx;
assign local_bb3_c1_exi11[63:32] = local_bb3_mul15;
assign local_bb3_c1_exi11[159:64] = 96'bx;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb3_c1_ene38_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb3_c1_ene38_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb3_c1_ene38_0_NO_SHIFT_REG;
 logic rnode_2to3_bb3_c1_ene38_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb3_c1_ene38_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb3_c1_ene38_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb3_c1_ene38_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb3_c1_ene38_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb3_c1_ene38_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb3_c1_ene38_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb3_c1_ene38_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb3_c1_ene38_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb3_c1_ene38_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb3_c1_ene38_0_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb3_c1_ene38_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb3_c1_ene38_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb3_c1_ene38_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb3_c1_ene38_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb3_c1_ene38_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb3_c1_ene38_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb3_c1_ene38_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb3_c1_ene38_0_NO_SHIFT_REG = rnode_2to3_bb3_c1_ene38_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb3_c1_ene38_0_stall_in_reg_3_NO_SHIFT_REG = ~(local_bb3_c1_exit2_c1_exi4_enable);
assign rnode_2to3_bb3_c1_ene38_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb3_c1_ene4_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb3_c1_ene4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb3_c1_ene4_0_NO_SHIFT_REG;
 logic rnode_2to3_bb3_c1_ene4_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb3_c1_ene4_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb3_c1_ene4_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb3_c1_ene4_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb3_c1_ene4_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb3_c1_ene4_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb3_c1_ene4_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb3_c1_ene4_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb3_c1_ene4_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb3_c1_ene4_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb3_c1_ene4_0_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb3_c1_ene4_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb3_c1_ene4_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb3_c1_ene4_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb3_c1_ene4_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb3_c1_ene4_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb3_c1_ene4_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb3_c1_ene4_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb3_c1_ene4_0_NO_SHIFT_REG = rnode_2to3_bb3_c1_ene4_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb3_c1_ene4_0_stall_in_reg_3_NO_SHIFT_REG = ~(local_bb3_c1_exit2_c1_exi4_enable);
assign rnode_2to3_bb3_c1_ene4_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb3_c1_ene5_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb3_c1_ene5_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb3_c1_ene5_0_NO_SHIFT_REG;
 logic rnode_2to3_bb3_c1_ene5_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb3_c1_ene5_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb3_c1_ene5_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb3_c1_ene5_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb3_c1_ene5_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb3_c1_ene5_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb3_c1_ene5_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb3_c1_ene5_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb3_c1_ene5_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb3_c1_ene5_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb3_c1_ene5_0_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb3_c1_ene5_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb3_c1_ene5_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb3_c1_ene5_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb3_c1_ene5_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb3_c1_ene5_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb3_c1_ene5_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb3_c1_ene5_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb3_c1_ene5_0_NO_SHIFT_REG = rnode_2to3_bb3_c1_ene5_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb3_c1_ene5_0_stall_in_reg_3_NO_SHIFT_REG = ~(local_bb3_c1_exit2_c1_exi4_enable);
assign rnode_2to3_bb3_c1_ene5_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_2_VALID_2_3_0_inputs_ready;
 reg SFC_2_VALID_2_3_0_valid_out_NO_SHIFT_REG;
wire SFC_2_VALID_2_3_0_stall_in;
wire SFC_2_VALID_2_3_0_output_regs_ready;
 reg SFC_2_VALID_2_3_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_2_VALID_2_3_0_causedstall;

assign SFC_2_VALID_2_3_0_inputs_ready = 1'b1;
assign SFC_2_VALID_2_3_0_output_regs_ready = local_bb3_c1_exit2_c1_exi4_enable;
assign SFC_2_VALID_1_2_0_stall_in = 1'b0;
assign SFC_2_VALID_2_3_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb3_c1_exit2_c1_exi4_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_2_VALID_2_3_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_2_VALID_2_3_0_output_regs_ready)
		begin
			SFC_2_VALID_2_3_0_NO_SHIFT_REG <= SFC_2_VALID_1_2_0_NO_SHIFT_REG;
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb3_add55_inputs_ready;
 reg local_bb3_add55_valid_out_NO_SHIFT_REG;
wire local_bb3_add55_stall_in;
wire local_bb3_add55_output_regs_ready;
wire [31:0] local_bb3_add55;
 reg local_bb3_add55_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb3_add55_valid_pipe_1_NO_SHIFT_REG;
wire local_bb3_add55_causedstall;

acl_int_mult int_module_local_bb3_add55 (
	.clock(clock),
	.dataa(local_bb3_mul5214),
	.datab(local_bb3_c1_ene3),
	.enable(local_bb3_add55_output_regs_ready),
	.result(local_bb3_add55)
);

defparam int_module_local_bb3_add55.INPUT1_WIDTH = 32;
defparam int_module_local_bb3_add55.INPUT2_WIDTH = 32;
defparam int_module_local_bb3_add55.OUTPUT_WIDTH = 32;
defparam int_module_local_bb3_add55.LATENCY = 3;
defparam int_module_local_bb3_add55.SIGNED = 0;

assign local_bb3_add55_inputs_ready = 1'b1;
assign local_bb3_add55_output_regs_ready = local_bb3_c1_exit_c1_exi1_enable;
assign local_bb3_mul5214_stall_in = 1'b0;
assign local_bb3_c1_ene3_stall_in = 1'b0;
assign local_bb3_add55_causedstall = (1'b1 && (1'b0 && !(~(local_bb3_c1_exit_c1_exi1_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb3_add55_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb3_add55_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb3_add55_output_regs_ready)
		begin
			local_bb3_add55_valid_pipe_0_NO_SHIFT_REG <= 1'b1;
			local_bb3_add55_valid_pipe_1_NO_SHIFT_REG <= local_bb3_add55_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb3_add55_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb3_add55_output_regs_ready)
		begin
			local_bb3_add55_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb3_add55_stall_in))
			begin
				local_bb3_add55_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire SFC_5_VALID_167_168_0_inputs_ready;
 reg SFC_5_VALID_167_168_0_valid_out_NO_SHIFT_REG;
wire SFC_5_VALID_167_168_0_stall_in;
wire SFC_5_VALID_167_168_0_output_regs_ready;
 reg SFC_5_VALID_167_168_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_5_VALID_167_168_0_causedstall;

assign SFC_5_VALID_167_168_0_inputs_ready = 1'b1;
assign SFC_5_VALID_167_168_0_output_regs_ready = local_bb3_c1_exit_c1_exi1_enable;
assign SFC_5_VALID_166_167_0_stall_in = 1'b0;
assign SFC_5_VALID_167_168_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb3_c1_exit_c1_exi1_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_5_VALID_167_168_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_5_VALID_167_168_0_output_regs_ready)
		begin
			SFC_5_VALID_167_168_0_NO_SHIFT_REG <= SFC_5_VALID_166_167_0_NO_SHIFT_REG;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb3_c1_ene38_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb3_c1_ene38_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb3_c1_ene38_0_NO_SHIFT_REG;
 logic rnode_3to4_bb3_c1_ene38_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb3_c1_ene38_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb3_c1_ene38_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb3_c1_ene38_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb3_c1_ene38_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb3_c1_ene38_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb3_c1_ene38_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb3_c1_ene38_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb3_c1_ene38_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb3_c1_ene38_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb3_c1_ene38_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb3_c1_ene38_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb3_c1_ene38_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb3_c1_ene38_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb3_c1_ene38_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb3_c1_ene38_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb3_c1_ene38_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb3_c1_ene38_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb3_c1_ene38_0_NO_SHIFT_REG = rnode_3to4_bb3_c1_ene38_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb3_c1_ene38_0_stall_in_reg_4_NO_SHIFT_REG = ~(local_bb3_c1_exit2_c1_exi4_enable);
assign rnode_3to4_bb3_c1_ene38_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb3_c1_ene4_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb3_c1_ene4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb3_c1_ene4_0_NO_SHIFT_REG;
 logic rnode_3to4_bb3_c1_ene4_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb3_c1_ene4_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb3_c1_ene4_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb3_c1_ene4_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb3_c1_ene4_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb3_c1_ene4_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb3_c1_ene4_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb3_c1_ene4_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb3_c1_ene4_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb3_c1_ene4_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb3_c1_ene4_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb3_c1_ene4_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb3_c1_ene4_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb3_c1_ene4_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb3_c1_ene4_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb3_c1_ene4_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb3_c1_ene4_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb3_c1_ene4_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb3_c1_ene4_0_NO_SHIFT_REG = rnode_3to4_bb3_c1_ene4_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb3_c1_ene4_0_stall_in_reg_4_NO_SHIFT_REG = ~(local_bb3_c1_exit2_c1_exi4_enable);
assign rnode_3to4_bb3_c1_ene4_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb3_c1_ene5_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb3_c1_ene5_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb3_c1_ene5_0_NO_SHIFT_REG;
 logic rnode_3to4_bb3_c1_ene5_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb3_c1_ene5_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb3_c1_ene5_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb3_c1_ene5_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb3_c1_ene5_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb3_c1_ene5_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb3_c1_ene5_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb3_c1_ene5_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb3_c1_ene5_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb3_c1_ene5_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb3_c1_ene5_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb3_c1_ene5_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb3_c1_ene5_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb3_c1_ene5_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb3_c1_ene5_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb3_c1_ene5_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb3_c1_ene5_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb3_c1_ene5_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb3_c1_ene5_0_NO_SHIFT_REG = rnode_3to4_bb3_c1_ene5_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb3_c1_ene5_0_stall_in_reg_4_NO_SHIFT_REG = ~(local_bb3_c1_exit2_c1_exi4_enable);
assign rnode_3to4_bb3_c1_ene5_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_2_VALID_3_4_0_inputs_ready;
 reg SFC_2_VALID_3_4_0_valid_out_NO_SHIFT_REG;
wire SFC_2_VALID_3_4_0_stall_in;
wire SFC_2_VALID_3_4_0_output_regs_ready;
 reg SFC_2_VALID_3_4_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_2_VALID_3_4_0_causedstall;

assign SFC_2_VALID_3_4_0_inputs_ready = 1'b1;
assign SFC_2_VALID_3_4_0_output_regs_ready = local_bb3_c1_exit2_c1_exi4_enable;
assign SFC_2_VALID_2_3_0_stall_in = 1'b0;
assign SFC_2_VALID_3_4_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb3_c1_exit2_c1_exi4_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_2_VALID_3_4_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_2_VALID_3_4_0_output_regs_ready)
		begin
			SFC_2_VALID_3_4_0_NO_SHIFT_REG <= SFC_2_VALID_2_3_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb3_c1_exi1_valid_out;
wire local_bb3_c1_exi1_stall_in;
wire local_bb3_c1_exi1_inputs_ready;
wire local_bb3_c1_exi1_stall_local;
wire [63:0] local_bb3_c1_exi1;

assign local_bb3_c1_exi1_inputs_ready = local_bb3_add55_valid_out_NO_SHIFT_REG;
assign local_bb3_c1_exi1[31:0] = 32'bx;
assign local_bb3_c1_exi1[63:32] = local_bb3_add55;
assign local_bb3_c1_exi1_valid_out = 1'b1;
assign local_bb3_add55_stall_in = 1'b0;

// This section implements a registered operation.
// 
wire SFC_5_VALID_168_169_0_inputs_ready;
 reg SFC_5_VALID_168_169_0_valid_out_NO_SHIFT_REG;
wire SFC_5_VALID_168_169_0_stall_in;
wire SFC_5_VALID_168_169_0_output_regs_ready;
 reg SFC_5_VALID_168_169_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_5_VALID_168_169_0_causedstall;

assign SFC_5_VALID_168_169_0_inputs_ready = 1'b1;
assign SFC_5_VALID_168_169_0_output_regs_ready = local_bb3_c1_exit_c1_exi1_enable;
assign SFC_5_VALID_167_168_0_stall_in = 1'b0;
assign SFC_5_VALID_168_169_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb3_c1_exit_c1_exi1_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_5_VALID_168_169_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_5_VALID_168_169_0_output_regs_ready)
		begin
			SFC_5_VALID_168_169_0_NO_SHIFT_REG <= SFC_5_VALID_167_168_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb3_c1_exi2_stall_local;
wire [159:0] local_bb3_c1_exi2;

assign local_bb3_c1_exi2[63:0] = local_bb3_c1_exi11[63:0];
assign local_bb3_c1_exi2[95:64] = rnode_3to4_bb3_c1_ene38_0_NO_SHIFT_REG;
assign local_bb3_c1_exi2[159:96] = local_bb3_c1_exi11[159:96];

// This section implements an unregistered operation.
// 
wire local_bb3_c1_exit_c1_exi1_valid_out;
wire local_bb3_c1_exit_c1_exi1_stall_in;
wire local_bb3_c1_exit_c1_exi1_inputs_ready;
wire local_bb3_c1_exit_c1_exi1_stall_local;
wire [63:0] local_bb3_c1_exit_c1_exi1;
wire local_bb3_c1_exit_c1_exi1_valid;
wire local_bb3_c1_exit_c1_exi1_fu_stall_out;

acl_enable_sink local_bb3_c1_exit_c1_exi1_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb3_c1_exi1),
	.data_out(local_bb3_c1_exit_c1_exi1),
	.input_accepted(local_bb3_c1_enter_c1_eni3_input_accepted),
	.valid_out(local_bb3_c1_exit_c1_exi1_valid),
	.stall_in(local_bb3_c1_exit_c1_exi1_stall_local),
	.enable(local_bb3_c1_exit_c1_exi1_enable),
	.valid_in(local_bb3_c1_exit_c1_exi1_valid_in),
	.stall_entry(local_bb3_c1_exit_c1_exi1_entry_stall),
	.inc_pipelined_thread(local_bb3_c1_enter_c1_eni3_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb3_c1_enter_c1_eni3_dec_pipelined_thread)
);

defparam local_bb3_c1_exit_c1_exi1_instance.DATA_WIDTH = 64;
defparam local_bb3_c1_exit_c1_exi1_instance.PIPELINE_DEPTH = 3;
defparam local_bb3_c1_exit_c1_exi1_instance.SCHEDULEII = 1;
defparam local_bb3_c1_exit_c1_exi1_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb3_c1_exit_c1_exi1_inputs_ready = (local_bb3_c1_exi1_valid_out & SFC_5_VALID_168_169_0_valid_out_NO_SHIFT_REG);
assign local_bb3_c1_exit_c1_exi1_valid_in = SFC_5_VALID_168_169_0_NO_SHIFT_REG;
assign local_bb3_c1_exit_c1_exi1_fu_stall_out = ~(local_bb3_c1_exit_c1_exi1_enable);
assign local_bb3_c1_exit_c1_exi1_valid_out = local_bb3_c1_exit_c1_exi1_valid;
assign local_bb3_c1_exit_c1_exi1_stall_local = local_bb3_c1_exit_c1_exi1_stall_in;
assign local_bb3_c1_exi1_stall_in = 1'b0;
assign SFC_5_VALID_168_169_0_stall_in = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb3_c1_exi3_stall_local;
wire [159:0] local_bb3_c1_exi3;

assign local_bb3_c1_exi3[95:0] = local_bb3_c1_exi2[95:0];
assign local_bb3_c1_exi3[127:96] = rnode_3to4_bb3_c1_ene4_0_NO_SHIFT_REG;
assign local_bb3_c1_exi3[159:128] = local_bb3_c1_exi2[159:128];

// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_169to169_bb3_c1_exit_c1_exi1_0_valid_out_NO_SHIFT_REG;
 logic rnode_169to169_bb3_c1_exit_c1_exi1_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_169to169_bb3_c1_exit_c1_exi1_0_NO_SHIFT_REG;
 logic rnode_169to169_bb3_c1_exit_c1_exi1_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_169to169_bb3_c1_exit_c1_exi1_0_reg_169_NO_SHIFT_REG;
 logic rnode_169to169_bb3_c1_exit_c1_exi1_0_valid_out_reg_169_NO_SHIFT_REG;
 logic rnode_169to169_bb3_c1_exit_c1_exi1_0_stall_in_reg_169_NO_SHIFT_REG;
 logic rnode_169to169_bb3_c1_exit_c1_exi1_0_stall_out_reg_169_NO_SHIFT_REG;

acl_data_fifo rnode_169to169_bb3_c1_exit_c1_exi1_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_169to169_bb3_c1_exit_c1_exi1_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_169to169_bb3_c1_exit_c1_exi1_0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rnode_169to169_bb3_c1_exit_c1_exi1_0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rnode_169to169_bb3_c1_exit_c1_exi1_0_stall_out_reg_169_NO_SHIFT_REG),
	.data_in(local_bb3_c1_exit_c1_exi1),
	.data_out(rnode_169to169_bb3_c1_exit_c1_exi1_0_reg_169_NO_SHIFT_REG)
);

defparam rnode_169to169_bb3_c1_exit_c1_exi1_0_reg_169_fifo.DEPTH = 3;
defparam rnode_169to169_bb3_c1_exit_c1_exi1_0_reg_169_fifo.DATA_WIDTH = 64;
defparam rnode_169to169_bb3_c1_exit_c1_exi1_0_reg_169_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_169to169_bb3_c1_exit_c1_exi1_0_reg_169_fifo.IMPL = "zl_reg";

assign rnode_169to169_bb3_c1_exit_c1_exi1_0_reg_169_inputs_ready_NO_SHIFT_REG = local_bb3_c1_exit_c1_exi1_valid_out;
assign local_bb3_c1_exit_c1_exi1_stall_in = rnode_169to169_bb3_c1_exit_c1_exi1_0_stall_out_reg_169_NO_SHIFT_REG;
assign rnode_169to169_bb3_c1_exit_c1_exi1_0_NO_SHIFT_REG = rnode_169to169_bb3_c1_exit_c1_exi1_0_reg_169_NO_SHIFT_REG;
assign rnode_169to169_bb3_c1_exit_c1_exi1_0_stall_in_reg_169_NO_SHIFT_REG = rnode_169to169_bb3_c1_exit_c1_exi1_0_stall_in_NO_SHIFT_REG;
assign rnode_169to169_bb3_c1_exit_c1_exi1_0_valid_out_NO_SHIFT_REG = rnode_169to169_bb3_c1_exit_c1_exi1_0_valid_out_reg_169_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb3_c1_exi4_valid_out;
wire local_bb3_c1_exi4_stall_in;
wire local_bb3_c1_exi4_inputs_ready;
wire local_bb3_c1_exi4_stall_local;
wire [159:0] local_bb3_c1_exi4;

assign local_bb3_c1_exi4_inputs_ready = (local_bb3_mul15_valid_out_NO_SHIFT_REG & rnode_3to4_bb3_c1_ene38_0_valid_out_NO_SHIFT_REG & rnode_3to4_bb3_c1_ene4_0_valid_out_NO_SHIFT_REG & rnode_3to4_bb3_c1_ene5_0_valid_out_NO_SHIFT_REG);
assign local_bb3_c1_exi4[127:0] = local_bb3_c1_exi3[127:0];
assign local_bb3_c1_exi4[159:128] = rnode_3to4_bb3_c1_ene5_0_NO_SHIFT_REG;
assign local_bb3_c1_exi4_valid_out = 1'b1;
assign local_bb3_mul15_stall_in = 1'b0;
assign rnode_3to4_bb3_c1_ene38_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb3_c1_ene4_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb3_c1_ene5_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb3_c1_exe1_valid_out;
wire local_bb3_c1_exe1_stall_in;
wire local_bb3_c1_exe1_inputs_ready;
wire local_bb3_c1_exe1_stall_local;
wire [31:0] local_bb3_c1_exe1;

assign local_bb3_c1_exe1_inputs_ready = rnode_169to169_bb3_c1_exit_c1_exi1_0_valid_out_NO_SHIFT_REG;
assign local_bb3_c1_exe1[31:0] = rnode_169to169_bb3_c1_exit_c1_exi1_0_NO_SHIFT_REG[63:32];
assign local_bb3_c1_exe1_valid_out = local_bb3_c1_exe1_inputs_ready;
assign local_bb3_c1_exe1_stall_local = local_bb3_c1_exe1_stall_in;
assign rnode_169to169_bb3_c1_exit_c1_exi1_0_stall_in_NO_SHIFT_REG = (|local_bb3_c1_exe1_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb3_c1_exit2_c1_exi4_valid_out;
wire local_bb3_c1_exit2_c1_exi4_stall_in;
wire local_bb3_c1_exit2_c1_exi4_inputs_ready;
wire local_bb3_c1_exit2_c1_exi4_stall_local;
wire [159:0] local_bb3_c1_exit2_c1_exi4;
wire local_bb3_c1_exit2_c1_exi4_valid;
wire local_bb3_c1_exit2_c1_exi4_fu_stall_out;

acl_enable_sink local_bb3_c1_exit2_c1_exi4_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb3_c1_exi4),
	.data_out(local_bb3_c1_exit2_c1_exi4),
	.input_accepted(local_bb3_c1_enter4_c1_eni5_input_accepted),
	.valid_out(local_bb3_c1_exit2_c1_exi4_valid),
	.stall_in(local_bb3_c1_exit2_c1_exi4_stall_local),
	.enable(local_bb3_c1_exit2_c1_exi4_enable),
	.valid_in(local_bb3_c1_exit2_c1_exi4_valid_in),
	.stall_entry(local_bb3_c1_exit2_c1_exi4_entry_stall),
	.inc_pipelined_thread(local_bb3_c1_enter4_c1_eni5_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb3_c1_enter4_c1_eni5_dec_pipelined_thread)
);

defparam local_bb3_c1_exit2_c1_exi4_instance.DATA_WIDTH = 160;
defparam local_bb3_c1_exit2_c1_exi4_instance.PIPELINE_DEPTH = 3;
defparam local_bb3_c1_exit2_c1_exi4_instance.SCHEDULEII = 1;
defparam local_bb3_c1_exit2_c1_exi4_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb3_c1_exit2_c1_exi4_inputs_ready = (local_bb3_c1_exi4_valid_out & SFC_2_VALID_3_4_0_valid_out_NO_SHIFT_REG);
assign local_bb3_c1_exit2_c1_exi4_valid_in = SFC_2_VALID_3_4_0_NO_SHIFT_REG;
assign local_bb3_c1_exit2_c1_exi4_fu_stall_out = ~(local_bb3_c1_exit2_c1_exi4_enable);
assign local_bb3_c1_exit2_c1_exi4_valid_out = local_bb3_c1_exit2_c1_exi4_valid;
assign local_bb3_c1_exit2_c1_exi4_stall_local = local_bb3_c1_exit2_c1_exi4_stall_in;
assign local_bb3_c1_exi4_stall_in = 1'b0;
assign SFC_2_VALID_3_4_0_stall_in = 1'b0;

// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_4to4_bb3_c1_exit2_c1_exi4_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_4to4_bb3_c1_exit2_c1_exi4_0_stall_in_0_NO_SHIFT_REG;
 logic [159:0] rnode_4to4_bb3_c1_exit2_c1_exi4_0_NO_SHIFT_REG;
 logic rnode_4to4_bb3_c1_exit2_c1_exi4_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_4to4_bb3_c1_exit2_c1_exi4_0_stall_in_1_NO_SHIFT_REG;
 logic [159:0] rnode_4to4_bb3_c1_exit2_c1_exi4_1_NO_SHIFT_REG;
 logic rnode_4to4_bb3_c1_exit2_c1_exi4_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_4to4_bb3_c1_exit2_c1_exi4_0_stall_in_2_NO_SHIFT_REG;
 logic [159:0] rnode_4to4_bb3_c1_exit2_c1_exi4_2_NO_SHIFT_REG;
 logic rnode_4to4_bb3_c1_exit2_c1_exi4_0_valid_out_3_NO_SHIFT_REG;
 logic rnode_4to4_bb3_c1_exit2_c1_exi4_0_stall_in_3_NO_SHIFT_REG;
 logic [159:0] rnode_4to4_bb3_c1_exit2_c1_exi4_3_NO_SHIFT_REG;
 logic rnode_4to4_bb3_c1_exit2_c1_exi4_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [159:0] rnode_4to4_bb3_c1_exit2_c1_exi4_0_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb3_c1_exit2_c1_exi4_0_valid_out_0_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb3_c1_exit2_c1_exi4_0_stall_in_0_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb3_c1_exit2_c1_exi4_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_4to4_bb3_c1_exit2_c1_exi4_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to4_bb3_c1_exit2_c1_exi4_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to4_bb3_c1_exit2_c1_exi4_0_stall_in_0_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_4to4_bb3_c1_exit2_c1_exi4_0_valid_out_0_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_4to4_bb3_c1_exit2_c1_exi4_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb3_c1_exit2_c1_exi4),
	.data_out(rnode_4to4_bb3_c1_exit2_c1_exi4_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_4to4_bb3_c1_exit2_c1_exi4_0_reg_4_fifo.DEPTH = 3;
defparam rnode_4to4_bb3_c1_exit2_c1_exi4_0_reg_4_fifo.DATA_WIDTH = 160;
defparam rnode_4to4_bb3_c1_exit2_c1_exi4_0_reg_4_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_4to4_bb3_c1_exit2_c1_exi4_0_reg_4_fifo.IMPL = "zl_reg";

assign rnode_4to4_bb3_c1_exit2_c1_exi4_0_reg_4_inputs_ready_NO_SHIFT_REG = local_bb3_c1_exit2_c1_exi4_valid_out;
assign local_bb3_c1_exit2_c1_exi4_stall_in = rnode_4to4_bb3_c1_exit2_c1_exi4_0_stall_out_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb3_c1_exit2_c1_exi4_0_stall_in_0_reg_4_NO_SHIFT_REG = (rnode_4to4_bb3_c1_exit2_c1_exi4_0_stall_in_0_NO_SHIFT_REG | rnode_4to4_bb3_c1_exit2_c1_exi4_0_stall_in_1_NO_SHIFT_REG | rnode_4to4_bb3_c1_exit2_c1_exi4_0_stall_in_2_NO_SHIFT_REG | rnode_4to4_bb3_c1_exit2_c1_exi4_0_stall_in_3_NO_SHIFT_REG);
assign rnode_4to4_bb3_c1_exit2_c1_exi4_0_valid_out_0_NO_SHIFT_REG = rnode_4to4_bb3_c1_exit2_c1_exi4_0_valid_out_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb3_c1_exit2_c1_exi4_0_valid_out_1_NO_SHIFT_REG = rnode_4to4_bb3_c1_exit2_c1_exi4_0_valid_out_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb3_c1_exit2_c1_exi4_0_valid_out_2_NO_SHIFT_REG = rnode_4to4_bb3_c1_exit2_c1_exi4_0_valid_out_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb3_c1_exit2_c1_exi4_0_valid_out_3_NO_SHIFT_REG = rnode_4to4_bb3_c1_exit2_c1_exi4_0_valid_out_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb3_c1_exit2_c1_exi4_0_NO_SHIFT_REG = rnode_4to4_bb3_c1_exit2_c1_exi4_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb3_c1_exit2_c1_exi4_1_NO_SHIFT_REG = rnode_4to4_bb3_c1_exit2_c1_exi4_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb3_c1_exit2_c1_exi4_2_NO_SHIFT_REG = rnode_4to4_bb3_c1_exit2_c1_exi4_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb3_c1_exit2_c1_exi4_3_NO_SHIFT_REG = rnode_4to4_bb3_c1_exit2_c1_exi4_0_reg_4_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb3_c1_exe4_stall_local;
wire [31:0] local_bb3_c1_exe4;

assign local_bb3_c1_exe4[31:0] = rnode_4to4_bb3_c1_exit2_c1_exi4_0_NO_SHIFT_REG[159:128];

// This section implements an unregistered operation.
// 
wire local_bb3_c1_exe3_stall_local;
wire [31:0] local_bb3_c1_exe3;

assign local_bb3_c1_exe3[31:0] = rnode_4to4_bb3_c1_exit2_c1_exi4_1_NO_SHIFT_REG[127:96];

// This section implements an unregistered operation.
// 
wire local_bb3_c1_exe2_stall_local;
wire [31:0] local_bb3_c1_exe2;

assign local_bb3_c1_exe2[31:0] = rnode_4to4_bb3_c1_exit2_c1_exi4_2_NO_SHIFT_REG[95:64];

// This section implements an unregistered operation.
// 
wire local_bb3_c1_exe13_stall_local;
wire [31:0] local_bb3_c1_exe13;

assign local_bb3_c1_exe13[31:0] = rnode_4to4_bb3_c1_exit2_c1_exi4_3_NO_SHIFT_REG[63:32];

// This section implements an unregistered operation.
// 
wire local_bb3_c2_eni1_stall_local;
wire [159:0] local_bb3_c2_eni1;

assign local_bb3_c2_eni1[31:0] = 32'bx;
assign local_bb3_c2_eni1[63:32] = local_bb3_c1_exe13;
assign local_bb3_c2_eni1[159:64] = 96'bx;

// This section implements an unregistered operation.
// 
wire local_bb3_c2_eni2_stall_local;
wire [159:0] local_bb3_c2_eni2;

assign local_bb3_c2_eni2[63:0] = local_bb3_c2_eni1[63:0];
assign local_bb3_c2_eni2[95:64] = local_bb3_c1_exe2;
assign local_bb3_c2_eni2[159:96] = local_bb3_c2_eni1[159:96];

// This section implements an unregistered operation.
// 
wire local_bb3_c2_eni3_stall_local;
wire [159:0] local_bb3_c2_eni3;

assign local_bb3_c2_eni3[95:0] = local_bb3_c2_eni2[95:0];
assign local_bb3_c2_eni3[127:96] = local_bb3_c1_exe3;
assign local_bb3_c2_eni3[159:128] = local_bb3_c2_eni2[159:128];

// This section implements an unregistered operation.
// 
wire local_bb3_c2_eni4_valid_out;
wire local_bb3_c2_eni4_stall_in;
wire local_bb3_c2_eni4_inputs_ready;
wire local_bb3_c2_eni4_stall_local;
wire [159:0] local_bb3_c2_eni4;

assign local_bb3_c2_eni4_inputs_ready = (rnode_4to4_bb3_c1_exit2_c1_exi4_0_valid_out_0_NO_SHIFT_REG & rnode_4to4_bb3_c1_exit2_c1_exi4_0_valid_out_1_NO_SHIFT_REG & rnode_4to4_bb3_c1_exit2_c1_exi4_0_valid_out_2_NO_SHIFT_REG & rnode_4to4_bb3_c1_exit2_c1_exi4_0_valid_out_3_NO_SHIFT_REG);
assign local_bb3_c2_eni4[127:0] = local_bb3_c2_eni3[127:0];
assign local_bb3_c2_eni4[159:128] = local_bb3_c1_exe4;
assign local_bb3_c2_eni4_valid_out = local_bb3_c2_eni4_inputs_ready;
assign local_bb3_c2_eni4_stall_local = local_bb3_c2_eni4_stall_in;
assign rnode_4to4_bb3_c1_exit2_c1_exi4_0_stall_in_0_NO_SHIFT_REG = (local_bb3_c2_eni4_stall_local | ~(local_bb3_c2_eni4_inputs_ready));
assign rnode_4to4_bb3_c1_exit2_c1_exi4_0_stall_in_1_NO_SHIFT_REG = (local_bb3_c2_eni4_stall_local | ~(local_bb3_c2_eni4_inputs_ready));
assign rnode_4to4_bb3_c1_exit2_c1_exi4_0_stall_in_2_NO_SHIFT_REG = (local_bb3_c2_eni4_stall_local | ~(local_bb3_c2_eni4_inputs_ready));
assign rnode_4to4_bb3_c1_exit2_c1_exi4_0_stall_in_3_NO_SHIFT_REG = (local_bb3_c2_eni4_stall_local | ~(local_bb3_c2_eni4_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb3_c2_enter_c2_eni4_valid_out_0;
wire local_bb3_c2_enter_c2_eni4_stall_in_0;
wire local_bb3_c2_enter_c2_eni4_valid_out_1;
wire local_bb3_c2_enter_c2_eni4_stall_in_1;
wire local_bb3_c2_enter_c2_eni4_valid_out_2;
wire local_bb3_c2_enter_c2_eni4_stall_in_2;
wire local_bb3_c2_enter_c2_eni4_valid_out_3;
wire local_bb3_c2_enter_c2_eni4_stall_in_3;
wire local_bb3_c2_enter_c2_eni4_valid_out_4;
wire local_bb3_c2_enter_c2_eni4_stall_in_4;
wire local_bb3_c2_enter_c2_eni4_inputs_ready;
wire local_bb3_c2_enter_c2_eni4_stall_local;
wire local_bb3_c2_enter_c2_eni4_input_accepted;
wire [159:0] local_bb3_c2_enter_c2_eni4;
wire local_bb3_c2_exit_c2_exi3_enable;
wire local_bb3_c2_exit_c2_exi3_entry_stall;
wire local_bb3_c2_enter_c2_eni4_valid_bit;
wire local_bb3_c2_exit_c2_exi3_output_regs_ready;
wire local_bb3_c2_exit_c2_exi3_valid_in;
wire local_bb3_c2_exit_c2_exi3_phases;
wire local_bb3_c2_enter_c2_eni4_inc_pipelined_thread;
wire local_bb3_c2_enter_c2_eni4_dec_pipelined_thread;
wire local_bb3_c2_enter_c2_eni4_fu_stall_out;

assign local_bb3_c2_enter_c2_eni4_inputs_ready = local_bb3_c2_eni4_valid_out;
assign local_bb3_c2_enter_c2_eni4 = local_bb3_c2_eni4;
assign local_bb3_c2_enter_c2_eni4_input_accepted = (local_bb3_c2_enter_c2_eni4_inputs_ready && !(local_bb3_c2_exit_c2_exi3_entry_stall));
assign local_bb3_c2_enter_c2_eni4_valid_bit = local_bb3_c2_enter_c2_eni4_input_accepted;
assign local_bb3_c2_enter_c2_eni4_inc_pipelined_thread = 1'b1;
assign local_bb3_c2_enter_c2_eni4_dec_pipelined_thread = ~(1'b0);
assign local_bb3_c2_enter_c2_eni4_fu_stall_out = (~(local_bb3_c2_enter_c2_eni4_inputs_ready) | local_bb3_c2_exit_c2_exi3_entry_stall);
assign local_bb3_c2_enter_c2_eni4_stall_local = (local_bb3_c2_enter_c2_eni4_stall_in_0 | local_bb3_c2_enter_c2_eni4_stall_in_1 | local_bb3_c2_enter_c2_eni4_stall_in_2 | local_bb3_c2_enter_c2_eni4_stall_in_3 | local_bb3_c2_enter_c2_eni4_stall_in_4);
assign local_bb3_c2_enter_c2_eni4_valid_out_0 = local_bb3_c2_enter_c2_eni4_inputs_ready;
assign local_bb3_c2_enter_c2_eni4_valid_out_1 = local_bb3_c2_enter_c2_eni4_inputs_ready;
assign local_bb3_c2_enter_c2_eni4_valid_out_2 = local_bb3_c2_enter_c2_eni4_inputs_ready;
assign local_bb3_c2_enter_c2_eni4_valid_out_3 = local_bb3_c2_enter_c2_eni4_inputs_ready;
assign local_bb3_c2_enter_c2_eni4_valid_out_4 = local_bb3_c2_enter_c2_eni4_inputs_ready;
assign local_bb3_c2_eni4_stall_in = (|local_bb3_c2_enter_c2_eni4_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb3_c2_ene1_stall_local;
wire [31:0] local_bb3_c2_ene1;

assign local_bb3_c2_ene1[31:0] = local_bb3_c2_enter_c2_eni4[63:32];

// This section implements an unregistered operation.
// 
wire local_bb3_c2_ene2_stall_local;
wire [31:0] local_bb3_c2_ene2;

assign local_bb3_c2_ene2[31:0] = local_bb3_c2_enter_c2_eni4[95:64];

// This section implements an unregistered operation.
// 
wire local_bb3_c2_ene3_valid_out;
wire local_bb3_c2_ene3_stall_in;
wire local_bb3_c2_ene3_inputs_ready;
wire local_bb3_c2_ene3_stall_local;
wire [31:0] local_bb3_c2_ene3;

assign local_bb3_c2_ene3_inputs_ready = local_bb3_c2_enter_c2_eni4_valid_out_2;
assign local_bb3_c2_ene3[31:0] = local_bb3_c2_enter_c2_eni4[127:96];
assign local_bb3_c2_ene3_valid_out = 1'b1;
assign local_bb3_c2_enter_c2_eni4_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb3_c2_ene4_valid_out;
wire local_bb3_c2_ene4_stall_in;
wire local_bb3_c2_ene4_inputs_ready;
wire local_bb3_c2_ene4_stall_local;
wire [31:0] local_bb3_c2_ene4;

assign local_bb3_c2_ene4_inputs_ready = local_bb3_c2_enter_c2_eni4_valid_out_3;
assign local_bb3_c2_ene4[31:0] = local_bb3_c2_enter_c2_eni4[159:128];
assign local_bb3_c2_ene4_valid_out = 1'b1;
assign local_bb3_c2_enter_c2_eni4_stall_in_3 = 1'b0;

// This section implements an unregistered operation.
// 
wire SFC_3_VALID_4_4_0_valid_out;
wire SFC_3_VALID_4_4_0_stall_in;
wire SFC_3_VALID_4_4_0_inputs_ready;
wire SFC_3_VALID_4_4_0_stall_local;
wire SFC_3_VALID_4_4_0;

assign SFC_3_VALID_4_4_0_inputs_ready = local_bb3_c2_enter_c2_eni4_valid_out_4;
assign SFC_3_VALID_4_4_0 = local_bb3_c2_enter_c2_eni4_valid_bit;
assign SFC_3_VALID_4_4_0_valid_out = 1'b1;
assign local_bb3_c2_enter_c2_eni4_stall_in_4 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb3_c2_ene1_valid_out_1;
wire local_bb3_c2_ene1_stall_in_1;
wire local_bb3_mul1413_valid_out;
wire local_bb3_mul1413_stall_in;
wire local_bb3_mul1413_inputs_ready;
wire local_bb3_mul1413_stall_local;
wire [31:0] local_bb3_mul1413;

assign local_bb3_mul1413_inputs_ready = (local_bb3_c2_enter_c2_eni4_valid_out_0 & local_bb3_c2_enter_c2_eni4_valid_out_1);
assign local_bb3_mul1413 = (local_bb3_c2_ene1 + local_bb3_c2_ene2);
assign local_bb3_c2_ene1_valid_out_1 = 1'b1;
assign local_bb3_mul1413_valid_out = 1'b1;
assign local_bb3_c2_enter_c2_eni4_stall_in_0 = 1'b0;
assign local_bb3_c2_enter_c2_eni4_stall_in_1 = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb3_c2_ene4_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb3_c2_ene4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb3_c2_ene4_0_NO_SHIFT_REG;
 logic rnode_4to5_bb3_c2_ene4_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb3_c2_ene4_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb3_c2_ene4_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb3_c2_ene4_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb3_c2_ene4_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb3_c2_ene4_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb3_c2_ene4_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb3_c2_ene4_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb3_c2_ene4_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb3_c2_ene4_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb3_c2_ene4),
	.data_out(rnode_4to5_bb3_c2_ene4_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb3_c2_ene4_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb3_c2_ene4_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_4to5_bb3_c2_ene4_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb3_c2_ene4_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb3_c2_ene4_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb3_c2_ene4_stall_in = 1'b0;
assign rnode_4to5_bb3_c2_ene4_0_NO_SHIFT_REG = rnode_4to5_bb3_c2_ene4_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb3_c2_ene4_0_stall_in_reg_5_NO_SHIFT_REG = ~(local_bb3_c2_exit_c2_exi3_enable);
assign rnode_4to5_bb3_c2_ene4_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_3_VALID_4_5_0_inputs_ready;
 reg SFC_3_VALID_4_5_0_valid_out_NO_SHIFT_REG;
wire SFC_3_VALID_4_5_0_stall_in;
wire SFC_3_VALID_4_5_0_output_regs_ready;
 reg SFC_3_VALID_4_5_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_3_VALID_4_5_0_causedstall;

assign SFC_3_VALID_4_5_0_inputs_ready = 1'b1;
assign SFC_3_VALID_4_5_0_output_regs_ready = local_bb3_c2_exit_c2_exi3_enable;
assign SFC_3_VALID_4_4_0_stall_in = 1'b0;
assign SFC_3_VALID_4_5_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb3_c2_exit_c2_exi3_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_3_VALID_4_5_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_3_VALID_4_5_0_output_regs_ready)
		begin
			SFC_3_VALID_4_5_0_NO_SHIFT_REG <= SFC_3_VALID_4_4_0;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb3_c2_ene1_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb3_c2_ene1_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb3_c2_ene1_0_NO_SHIFT_REG;
 logic rnode_4to5_bb3_c2_ene1_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb3_c2_ene1_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb3_c2_ene1_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb3_c2_ene1_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb3_c2_ene1_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb3_c2_ene1_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb3_c2_ene1_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb3_c2_ene1_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb3_c2_ene1_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb3_c2_ene1_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb3_c2_ene1),
	.data_out(rnode_4to5_bb3_c2_ene1_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb3_c2_ene1_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb3_c2_ene1_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_4to5_bb3_c2_ene1_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb3_c2_ene1_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb3_c2_ene1_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb3_c2_ene1_stall_in_1 = 1'b0;
assign rnode_4to5_bb3_c2_ene1_0_NO_SHIFT_REG = rnode_4to5_bb3_c2_ene1_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb3_c2_ene1_0_stall_in_reg_5_NO_SHIFT_REG = ~(local_bb3_c2_exit_c2_exi3_enable);
assign rnode_4to5_bb3_c2_ene1_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire local_bb3_add_inputs_ready;
 reg local_bb3_add_valid_out_NO_SHIFT_REG;
wire local_bb3_add_stall_in;
wire local_bb3_add_output_regs_ready;
wire [31:0] local_bb3_add;
 reg local_bb3_add_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb3_add_valid_pipe_1_NO_SHIFT_REG;
wire local_bb3_add_causedstall;

acl_int_mult int_module_local_bb3_add (
	.clock(clock),
	.dataa(local_bb3_mul1413),
	.datab(local_bb3_c2_ene3),
	.enable(local_bb3_add_output_regs_ready),
	.result(local_bb3_add)
);

defparam int_module_local_bb3_add.INPUT1_WIDTH = 32;
defparam int_module_local_bb3_add.INPUT2_WIDTH = 32;
defparam int_module_local_bb3_add.OUTPUT_WIDTH = 32;
defparam int_module_local_bb3_add.LATENCY = 3;
defparam int_module_local_bb3_add.SIGNED = 0;

assign local_bb3_add_inputs_ready = 1'b1;
assign local_bb3_add_output_regs_ready = local_bb3_c2_exit_c2_exi3_enable;
assign local_bb3_mul1413_stall_in = 1'b0;
assign local_bb3_c2_ene3_stall_in = 1'b0;
assign local_bb3_add_causedstall = (1'b1 && (1'b0 && !(~(local_bb3_c2_exit_c2_exi3_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb3_add_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb3_add_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb3_add_output_regs_ready)
		begin
			local_bb3_add_valid_pipe_0_NO_SHIFT_REG <= 1'b1;
			local_bb3_add_valid_pipe_1_NO_SHIFT_REG <= local_bb3_add_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb3_add_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb3_add_output_regs_ready)
		begin
			local_bb3_add_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb3_add_stall_in))
			begin
				local_bb3_add_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_5to6_bb3_c2_ene4_0_valid_out_NO_SHIFT_REG;
 logic rnode_5to6_bb3_c2_ene4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_5to6_bb3_c2_ene4_0_NO_SHIFT_REG;
 logic rnode_5to6_bb3_c2_ene4_0_reg_6_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_5to6_bb3_c2_ene4_0_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb3_c2_ene4_0_valid_out_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb3_c2_ene4_0_stall_in_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb3_c2_ene4_0_stall_out_reg_6_NO_SHIFT_REG;

acl_data_fifo rnode_5to6_bb3_c2_ene4_0_reg_6_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_5to6_bb3_c2_ene4_0_reg_6_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_5to6_bb3_c2_ene4_0_stall_in_reg_6_NO_SHIFT_REG),
	.valid_out(rnode_5to6_bb3_c2_ene4_0_valid_out_reg_6_NO_SHIFT_REG),
	.stall_out(rnode_5to6_bb3_c2_ene4_0_stall_out_reg_6_NO_SHIFT_REG),
	.data_in(rnode_4to5_bb3_c2_ene4_0_NO_SHIFT_REG),
	.data_out(rnode_5to6_bb3_c2_ene4_0_reg_6_NO_SHIFT_REG)
);

defparam rnode_5to6_bb3_c2_ene4_0_reg_6_fifo.DEPTH = 1;
defparam rnode_5to6_bb3_c2_ene4_0_reg_6_fifo.DATA_WIDTH = 32;
defparam rnode_5to6_bb3_c2_ene4_0_reg_6_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_5to6_bb3_c2_ene4_0_reg_6_fifo.IMPL = "shift_reg";

assign rnode_5to6_bb3_c2_ene4_0_reg_6_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to5_bb3_c2_ene4_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_5to6_bb3_c2_ene4_0_NO_SHIFT_REG = rnode_5to6_bb3_c2_ene4_0_reg_6_NO_SHIFT_REG;
assign rnode_5to6_bb3_c2_ene4_0_stall_in_reg_6_NO_SHIFT_REG = ~(local_bb3_c2_exit_c2_exi3_enable);
assign rnode_5to6_bb3_c2_ene4_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_3_VALID_5_6_0_inputs_ready;
 reg SFC_3_VALID_5_6_0_valid_out_NO_SHIFT_REG;
wire SFC_3_VALID_5_6_0_stall_in;
wire SFC_3_VALID_5_6_0_output_regs_ready;
 reg SFC_3_VALID_5_6_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_3_VALID_5_6_0_causedstall;

assign SFC_3_VALID_5_6_0_inputs_ready = 1'b1;
assign SFC_3_VALID_5_6_0_output_regs_ready = local_bb3_c2_exit_c2_exi3_enable;
assign SFC_3_VALID_4_5_0_stall_in = 1'b0;
assign SFC_3_VALID_5_6_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb3_c2_exit_c2_exi3_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_3_VALID_5_6_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_3_VALID_5_6_0_output_regs_ready)
		begin
			SFC_3_VALID_5_6_0_NO_SHIFT_REG <= SFC_3_VALID_4_5_0_NO_SHIFT_REG;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_5to6_bb3_c2_ene1_0_valid_out_NO_SHIFT_REG;
 logic rnode_5to6_bb3_c2_ene1_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_5to6_bb3_c2_ene1_0_NO_SHIFT_REG;
 logic rnode_5to6_bb3_c2_ene1_0_reg_6_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_5to6_bb3_c2_ene1_0_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb3_c2_ene1_0_valid_out_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb3_c2_ene1_0_stall_in_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb3_c2_ene1_0_stall_out_reg_6_NO_SHIFT_REG;

acl_data_fifo rnode_5to6_bb3_c2_ene1_0_reg_6_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_5to6_bb3_c2_ene1_0_reg_6_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_5to6_bb3_c2_ene1_0_stall_in_reg_6_NO_SHIFT_REG),
	.valid_out(rnode_5to6_bb3_c2_ene1_0_valid_out_reg_6_NO_SHIFT_REG),
	.stall_out(rnode_5to6_bb3_c2_ene1_0_stall_out_reg_6_NO_SHIFT_REG),
	.data_in(rnode_4to5_bb3_c2_ene1_0_NO_SHIFT_REG),
	.data_out(rnode_5to6_bb3_c2_ene1_0_reg_6_NO_SHIFT_REG)
);

defparam rnode_5to6_bb3_c2_ene1_0_reg_6_fifo.DEPTH = 1;
defparam rnode_5to6_bb3_c2_ene1_0_reg_6_fifo.DATA_WIDTH = 32;
defparam rnode_5to6_bb3_c2_ene1_0_reg_6_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_5to6_bb3_c2_ene1_0_reg_6_fifo.IMPL = "shift_reg";

assign rnode_5to6_bb3_c2_ene1_0_reg_6_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to5_bb3_c2_ene1_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_5to6_bb3_c2_ene1_0_NO_SHIFT_REG = rnode_5to6_bb3_c2_ene1_0_reg_6_NO_SHIFT_REG;
assign rnode_5to6_bb3_c2_ene1_0_stall_in_reg_6_NO_SHIFT_REG = ~(local_bb3_c2_exit_c2_exi3_enable);
assign rnode_5to6_bb3_c2_ene1_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb3_c2_exi1_stall_local;
wire [127:0] local_bb3_c2_exi1;

assign local_bb3_c2_exi1[31:0] = 32'bx;
assign local_bb3_c2_exi1[63:32] = local_bb3_add;
assign local_bb3_c2_exi1[127:64] = 64'bx;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_6to7_bb3_c2_ene4_0_valid_out_NO_SHIFT_REG;
 logic rnode_6to7_bb3_c2_ene4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_6to7_bb3_c2_ene4_0_NO_SHIFT_REG;
 logic rnode_6to7_bb3_c2_ene4_0_reg_7_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_6to7_bb3_c2_ene4_0_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb3_c2_ene4_0_valid_out_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb3_c2_ene4_0_stall_in_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb3_c2_ene4_0_stall_out_reg_7_NO_SHIFT_REG;

acl_data_fifo rnode_6to7_bb3_c2_ene4_0_reg_7_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_6to7_bb3_c2_ene4_0_reg_7_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_6to7_bb3_c2_ene4_0_stall_in_reg_7_NO_SHIFT_REG),
	.valid_out(rnode_6to7_bb3_c2_ene4_0_valid_out_reg_7_NO_SHIFT_REG),
	.stall_out(rnode_6to7_bb3_c2_ene4_0_stall_out_reg_7_NO_SHIFT_REG),
	.data_in(rnode_5to6_bb3_c2_ene4_0_NO_SHIFT_REG),
	.data_out(rnode_6to7_bb3_c2_ene4_0_reg_7_NO_SHIFT_REG)
);

defparam rnode_6to7_bb3_c2_ene4_0_reg_7_fifo.DEPTH = 1;
defparam rnode_6to7_bb3_c2_ene4_0_reg_7_fifo.DATA_WIDTH = 32;
defparam rnode_6to7_bb3_c2_ene4_0_reg_7_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_6to7_bb3_c2_ene4_0_reg_7_fifo.IMPL = "shift_reg";

assign rnode_6to7_bb3_c2_ene4_0_reg_7_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_5to6_bb3_c2_ene4_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_6to7_bb3_c2_ene4_0_NO_SHIFT_REG = rnode_6to7_bb3_c2_ene4_0_reg_7_NO_SHIFT_REG;
assign rnode_6to7_bb3_c2_ene4_0_stall_in_reg_7_NO_SHIFT_REG = ~(local_bb3_c2_exit_c2_exi3_enable);
assign rnode_6to7_bb3_c2_ene4_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_3_VALID_6_7_0_inputs_ready;
 reg SFC_3_VALID_6_7_0_valid_out_NO_SHIFT_REG;
wire SFC_3_VALID_6_7_0_stall_in;
wire SFC_3_VALID_6_7_0_output_regs_ready;
 reg SFC_3_VALID_6_7_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_3_VALID_6_7_0_causedstall;

assign SFC_3_VALID_6_7_0_inputs_ready = 1'b1;
assign SFC_3_VALID_6_7_0_output_regs_ready = local_bb3_c2_exit_c2_exi3_enable;
assign SFC_3_VALID_5_6_0_stall_in = 1'b0;
assign SFC_3_VALID_6_7_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb3_c2_exit_c2_exi3_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_3_VALID_6_7_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_3_VALID_6_7_0_output_regs_ready)
		begin
			SFC_3_VALID_6_7_0_NO_SHIFT_REG <= SFC_3_VALID_5_6_0_NO_SHIFT_REG;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_6to7_bb3_c2_ene1_0_valid_out_NO_SHIFT_REG;
 logic rnode_6to7_bb3_c2_ene1_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_6to7_bb3_c2_ene1_0_NO_SHIFT_REG;
 logic rnode_6to7_bb3_c2_ene1_0_reg_7_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_6to7_bb3_c2_ene1_0_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb3_c2_ene1_0_valid_out_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb3_c2_ene1_0_stall_in_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb3_c2_ene1_0_stall_out_reg_7_NO_SHIFT_REG;

acl_data_fifo rnode_6to7_bb3_c2_ene1_0_reg_7_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_6to7_bb3_c2_ene1_0_reg_7_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_6to7_bb3_c2_ene1_0_stall_in_reg_7_NO_SHIFT_REG),
	.valid_out(rnode_6to7_bb3_c2_ene1_0_valid_out_reg_7_NO_SHIFT_REG),
	.stall_out(rnode_6to7_bb3_c2_ene1_0_stall_out_reg_7_NO_SHIFT_REG),
	.data_in(rnode_5to6_bb3_c2_ene1_0_NO_SHIFT_REG),
	.data_out(rnode_6to7_bb3_c2_ene1_0_reg_7_NO_SHIFT_REG)
);

defparam rnode_6to7_bb3_c2_ene1_0_reg_7_fifo.DEPTH = 1;
defparam rnode_6to7_bb3_c2_ene1_0_reg_7_fifo.DATA_WIDTH = 32;
defparam rnode_6to7_bb3_c2_ene1_0_reg_7_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_6to7_bb3_c2_ene1_0_reg_7_fifo.IMPL = "shift_reg";

assign rnode_6to7_bb3_c2_ene1_0_reg_7_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_5to6_bb3_c2_ene1_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_6to7_bb3_c2_ene1_0_NO_SHIFT_REG = rnode_6to7_bb3_c2_ene1_0_reg_7_NO_SHIFT_REG;
assign rnode_6to7_bb3_c2_ene1_0_stall_in_reg_7_NO_SHIFT_REG = ~(local_bb3_c2_exit_c2_exi3_enable);
assign rnode_6to7_bb3_c2_ene1_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb3_c2_exi2_stall_local;
wire [127:0] local_bb3_c2_exi2;

assign local_bb3_c2_exi2[63:0] = local_bb3_c2_exi1[63:0];
assign local_bb3_c2_exi2[95:64] = rnode_6to7_bb3_c2_ene4_0_NO_SHIFT_REG;
assign local_bb3_c2_exi2[127:96] = local_bb3_c2_exi1[127:96];

// This section implements an unregistered operation.
// 
wire local_bb3_c2_exi3_valid_out;
wire local_bb3_c2_exi3_stall_in;
wire local_bb3_c2_exi3_inputs_ready;
wire local_bb3_c2_exi3_stall_local;
wire [127:0] local_bb3_c2_exi3;

assign local_bb3_c2_exi3_inputs_ready = (local_bb3_add_valid_out_NO_SHIFT_REG & rnode_6to7_bb3_c2_ene4_0_valid_out_NO_SHIFT_REG & rnode_6to7_bb3_c2_ene1_0_valid_out_NO_SHIFT_REG);
assign local_bb3_c2_exi3[95:0] = local_bb3_c2_exi2[95:0];
assign local_bb3_c2_exi3[127:96] = rnode_6to7_bb3_c2_ene1_0_NO_SHIFT_REG;
assign local_bb3_c2_exi3_valid_out = 1'b1;
assign local_bb3_add_stall_in = 1'b0;
assign rnode_6to7_bb3_c2_ene4_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_6to7_bb3_c2_ene1_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb3_c2_exit_c2_exi3_valid_out;
wire local_bb3_c2_exit_c2_exi3_stall_in;
wire local_bb3_c2_exit_c2_exi3_inputs_ready;
wire local_bb3_c2_exit_c2_exi3_stall_local;
wire [127:0] local_bb3_c2_exit_c2_exi3;
wire local_bb3_c2_exit_c2_exi3_valid;
wire local_bb3_c2_exit_c2_exi3_fu_stall_out;

acl_enable_sink local_bb3_c2_exit_c2_exi3_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb3_c2_exi3),
	.data_out(local_bb3_c2_exit_c2_exi3),
	.input_accepted(local_bb3_c2_enter_c2_eni4_input_accepted),
	.valid_out(local_bb3_c2_exit_c2_exi3_valid),
	.stall_in(local_bb3_c2_exit_c2_exi3_stall_local),
	.enable(local_bb3_c2_exit_c2_exi3_enable),
	.valid_in(local_bb3_c2_exit_c2_exi3_valid_in),
	.stall_entry(local_bb3_c2_exit_c2_exi3_entry_stall),
	.inc_pipelined_thread(local_bb3_c2_enter_c2_eni4_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb3_c2_enter_c2_eni4_dec_pipelined_thread)
);

defparam local_bb3_c2_exit_c2_exi3_instance.DATA_WIDTH = 128;
defparam local_bb3_c2_exit_c2_exi3_instance.PIPELINE_DEPTH = 3;
defparam local_bb3_c2_exit_c2_exi3_instance.SCHEDULEII = 1;
defparam local_bb3_c2_exit_c2_exi3_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb3_c2_exit_c2_exi3_inputs_ready = (local_bb3_c2_exi3_valid_out & SFC_3_VALID_6_7_0_valid_out_NO_SHIFT_REG);
assign local_bb3_c2_exit_c2_exi3_valid_in = SFC_3_VALID_6_7_0_NO_SHIFT_REG;
assign local_bb3_c2_exit_c2_exi3_fu_stall_out = ~(local_bb3_c2_exit_c2_exi3_enable);
assign local_bb3_c2_exit_c2_exi3_valid_out = local_bb3_c2_exit_c2_exi3_valid;
assign local_bb3_c2_exit_c2_exi3_stall_local = local_bb3_c2_exit_c2_exi3_stall_in;
assign local_bb3_c2_exi3_stall_in = 1'b0;
assign SFC_3_VALID_6_7_0_stall_in = 1'b0;

// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_7to7_bb3_c2_exit_c2_exi3_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_7to7_bb3_c2_exit_c2_exi3_0_stall_in_0_NO_SHIFT_REG;
 logic [127:0] rnode_7to7_bb3_c2_exit_c2_exi3_0_NO_SHIFT_REG;
 logic rnode_7to7_bb3_c2_exit_c2_exi3_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_7to7_bb3_c2_exit_c2_exi3_0_stall_in_1_NO_SHIFT_REG;
 logic [127:0] rnode_7to7_bb3_c2_exit_c2_exi3_1_NO_SHIFT_REG;
 logic rnode_7to7_bb3_c2_exit_c2_exi3_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_7to7_bb3_c2_exit_c2_exi3_0_stall_in_2_NO_SHIFT_REG;
 logic [127:0] rnode_7to7_bb3_c2_exit_c2_exi3_2_NO_SHIFT_REG;
 logic rnode_7to7_bb3_c2_exit_c2_exi3_0_reg_7_inputs_ready_NO_SHIFT_REG;
 logic [127:0] rnode_7to7_bb3_c2_exit_c2_exi3_0_reg_7_NO_SHIFT_REG;
 logic rnode_7to7_bb3_c2_exit_c2_exi3_0_valid_out_0_reg_7_NO_SHIFT_REG;
 logic rnode_7to7_bb3_c2_exit_c2_exi3_0_stall_in_0_reg_7_NO_SHIFT_REG;
 logic rnode_7to7_bb3_c2_exit_c2_exi3_0_stall_out_reg_7_NO_SHIFT_REG;

acl_data_fifo rnode_7to7_bb3_c2_exit_c2_exi3_0_reg_7_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_7to7_bb3_c2_exit_c2_exi3_0_reg_7_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_7to7_bb3_c2_exit_c2_exi3_0_stall_in_0_reg_7_NO_SHIFT_REG),
	.valid_out(rnode_7to7_bb3_c2_exit_c2_exi3_0_valid_out_0_reg_7_NO_SHIFT_REG),
	.stall_out(rnode_7to7_bb3_c2_exit_c2_exi3_0_stall_out_reg_7_NO_SHIFT_REG),
	.data_in(local_bb3_c2_exit_c2_exi3),
	.data_out(rnode_7to7_bb3_c2_exit_c2_exi3_0_reg_7_NO_SHIFT_REG)
);

defparam rnode_7to7_bb3_c2_exit_c2_exi3_0_reg_7_fifo.DEPTH = 3;
defparam rnode_7to7_bb3_c2_exit_c2_exi3_0_reg_7_fifo.DATA_WIDTH = 128;
defparam rnode_7to7_bb3_c2_exit_c2_exi3_0_reg_7_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_7to7_bb3_c2_exit_c2_exi3_0_reg_7_fifo.IMPL = "zl_reg";

assign rnode_7to7_bb3_c2_exit_c2_exi3_0_reg_7_inputs_ready_NO_SHIFT_REG = local_bb3_c2_exit_c2_exi3_valid_out;
assign local_bb3_c2_exit_c2_exi3_stall_in = rnode_7to7_bb3_c2_exit_c2_exi3_0_stall_out_reg_7_NO_SHIFT_REG;
assign rnode_7to7_bb3_c2_exit_c2_exi3_0_stall_in_0_reg_7_NO_SHIFT_REG = (rnode_7to7_bb3_c2_exit_c2_exi3_0_stall_in_0_NO_SHIFT_REG | rnode_7to7_bb3_c2_exit_c2_exi3_0_stall_in_1_NO_SHIFT_REG | rnode_7to7_bb3_c2_exit_c2_exi3_0_stall_in_2_NO_SHIFT_REG);
assign rnode_7to7_bb3_c2_exit_c2_exi3_0_valid_out_0_NO_SHIFT_REG = rnode_7to7_bb3_c2_exit_c2_exi3_0_valid_out_0_reg_7_NO_SHIFT_REG;
assign rnode_7to7_bb3_c2_exit_c2_exi3_0_valid_out_1_NO_SHIFT_REG = rnode_7to7_bb3_c2_exit_c2_exi3_0_valid_out_0_reg_7_NO_SHIFT_REG;
assign rnode_7to7_bb3_c2_exit_c2_exi3_0_valid_out_2_NO_SHIFT_REG = rnode_7to7_bb3_c2_exit_c2_exi3_0_valid_out_0_reg_7_NO_SHIFT_REG;
assign rnode_7to7_bb3_c2_exit_c2_exi3_0_NO_SHIFT_REG = rnode_7to7_bb3_c2_exit_c2_exi3_0_reg_7_NO_SHIFT_REG;
assign rnode_7to7_bb3_c2_exit_c2_exi3_1_NO_SHIFT_REG = rnode_7to7_bb3_c2_exit_c2_exi3_0_reg_7_NO_SHIFT_REG;
assign rnode_7to7_bb3_c2_exit_c2_exi3_2_NO_SHIFT_REG = rnode_7to7_bb3_c2_exit_c2_exi3_0_reg_7_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb3_c2_exe3_stall_local;
wire [31:0] local_bb3_c2_exe3;

assign local_bb3_c2_exe3[31:0] = rnode_7to7_bb3_c2_exit_c2_exi3_0_NO_SHIFT_REG[127:96];

// This section implements an unregistered operation.
// 
wire local_bb3_c2_exe2_stall_local;
wire [31:0] local_bb3_c2_exe2;

assign local_bb3_c2_exe2[31:0] = rnode_7to7_bb3_c2_exit_c2_exi3_1_NO_SHIFT_REG[95:64];

// This section implements an unregistered operation.
// 
wire local_bb3_c2_exe1_stall_local;
wire [31:0] local_bb3_c2_exe1;

assign local_bb3_c2_exe1[31:0] = rnode_7to7_bb3_c2_exit_c2_exi3_2_NO_SHIFT_REG[63:32];

// This section implements an unregistered operation.
// 
wire local_bb3_c3_eni1_stall_local;
wire [127:0] local_bb3_c3_eni1;

assign local_bb3_c3_eni1[31:0] = 32'bx;
assign local_bb3_c3_eni1[63:32] = local_bb3_c2_exe1;
assign local_bb3_c3_eni1[127:64] = 64'bx;

// This section implements an unregistered operation.
// 
wire local_bb3_c3_eni2_stall_local;
wire [127:0] local_bb3_c3_eni2;

assign local_bb3_c3_eni2[63:0] = local_bb3_c3_eni1[63:0];
assign local_bb3_c3_eni2[95:64] = local_bb3_c2_exe2;
assign local_bb3_c3_eni2[127:96] = local_bb3_c3_eni1[127:96];

// This section implements an unregistered operation.
// 
wire local_bb3_c3_eni3_valid_out;
wire local_bb3_c3_eni3_stall_in;
wire local_bb3_c3_eni3_inputs_ready;
wire local_bb3_c3_eni3_stall_local;
wire [127:0] local_bb3_c3_eni3;

assign local_bb3_c3_eni3_inputs_ready = (rnode_7to7_bb3_c2_exit_c2_exi3_0_valid_out_0_NO_SHIFT_REG & rnode_7to7_bb3_c2_exit_c2_exi3_0_valid_out_1_NO_SHIFT_REG & rnode_7to7_bb3_c2_exit_c2_exi3_0_valid_out_2_NO_SHIFT_REG);
assign local_bb3_c3_eni3[95:0] = local_bb3_c3_eni2[95:0];
assign local_bb3_c3_eni3[127:96] = local_bb3_c2_exe3;
assign local_bb3_c3_eni3_valid_out = local_bb3_c3_eni3_inputs_ready;
assign local_bb3_c3_eni3_stall_local = local_bb3_c3_eni3_stall_in;
assign rnode_7to7_bb3_c2_exit_c2_exi3_0_stall_in_0_NO_SHIFT_REG = (local_bb3_c3_eni3_stall_local | ~(local_bb3_c3_eni3_inputs_ready));
assign rnode_7to7_bb3_c2_exit_c2_exi3_0_stall_in_1_NO_SHIFT_REG = (local_bb3_c3_eni3_stall_local | ~(local_bb3_c3_eni3_inputs_ready));
assign rnode_7to7_bb3_c2_exit_c2_exi3_0_stall_in_2_NO_SHIFT_REG = (local_bb3_c3_eni3_stall_local | ~(local_bb3_c3_eni3_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb3_c3_enter_c3_eni3_valid_out_0;
wire local_bb3_c3_enter_c3_eni3_stall_in_0;
wire local_bb3_c3_enter_c3_eni3_valid_out_1;
wire local_bb3_c3_enter_c3_eni3_stall_in_1;
wire local_bb3_c3_enter_c3_eni3_valid_out_2;
wire local_bb3_c3_enter_c3_eni3_stall_in_2;
wire local_bb3_c3_enter_c3_eni3_valid_out_3;
wire local_bb3_c3_enter_c3_eni3_stall_in_3;
wire local_bb3_c3_enter_c3_eni3_inputs_ready;
wire local_bb3_c3_enter_c3_eni3_stall_local;
wire local_bb3_c3_enter_c3_eni3_input_accepted;
wire [127:0] local_bb3_c3_enter_c3_eni3;
wire local_bb3_c3_exit_c3_exi3_enable;
wire local_bb3_c3_exit_c3_exi3_entry_stall;
wire local_bb3_c3_enter_c3_eni3_valid_bit;
wire local_bb3_c3_exit_c3_exi3_output_regs_ready;
wire local_bb3_c3_exit_c3_exi3_valid_in;
wire local_bb3_c3_exit_c3_exi3_phases;
wire local_bb3_c3_enter_c3_eni3_inc_pipelined_thread;
wire local_bb3_c3_enter_c3_eni3_dec_pipelined_thread;
wire local_bb3_c3_enter_c3_eni3_fu_stall_out;

assign local_bb3_c3_enter_c3_eni3_inputs_ready = local_bb3_c3_eni3_valid_out;
assign local_bb3_c3_enter_c3_eni3 = local_bb3_c3_eni3;
assign local_bb3_c3_enter_c3_eni3_input_accepted = (local_bb3_c3_enter_c3_eni3_inputs_ready && !(local_bb3_c3_exit_c3_exi3_entry_stall));
assign local_bb3_c3_enter_c3_eni3_valid_bit = local_bb3_c3_enter_c3_eni3_input_accepted;
assign local_bb3_c3_enter_c3_eni3_inc_pipelined_thread = 1'b1;
assign local_bb3_c3_enter_c3_eni3_dec_pipelined_thread = ~(1'b0);
assign local_bb3_c3_enter_c3_eni3_fu_stall_out = (~(local_bb3_c3_enter_c3_eni3_inputs_ready) | local_bb3_c3_exit_c3_exi3_entry_stall);
assign local_bb3_c3_enter_c3_eni3_stall_local = (local_bb3_c3_enter_c3_eni3_stall_in_0 | local_bb3_c3_enter_c3_eni3_stall_in_1 | local_bb3_c3_enter_c3_eni3_stall_in_2 | local_bb3_c3_enter_c3_eni3_stall_in_3);
assign local_bb3_c3_enter_c3_eni3_valid_out_0 = local_bb3_c3_enter_c3_eni3_inputs_ready;
assign local_bb3_c3_enter_c3_eni3_valid_out_1 = local_bb3_c3_enter_c3_eni3_inputs_ready;
assign local_bb3_c3_enter_c3_eni3_valid_out_2 = local_bb3_c3_enter_c3_eni3_inputs_ready;
assign local_bb3_c3_enter_c3_eni3_valid_out_3 = local_bb3_c3_enter_c3_eni3_inputs_ready;
assign local_bb3_c3_eni3_stall_in = (|local_bb3_c3_enter_c3_eni3_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb3_c3_ene1_stall_local;
wire [31:0] local_bb3_c3_ene1;

assign local_bb3_c3_ene1[31:0] = local_bb3_c3_enter_c3_eni3[63:32];

// This section implements an unregistered operation.
// 
wire local_bb3_c3_ene2_stall_local;
wire [31:0] local_bb3_c3_ene2;

assign local_bb3_c3_ene2[31:0] = local_bb3_c3_enter_c3_eni3[95:64];

// This section implements an unregistered operation.
// 
wire local_bb3_c3_ene3_valid_out;
wire local_bb3_c3_ene3_stall_in;
wire local_bb3_c3_ene3_inputs_ready;
wire local_bb3_c3_ene3_stall_local;
wire [31:0] local_bb3_c3_ene3;

assign local_bb3_c3_ene3_inputs_ready = local_bb3_c3_enter_c3_eni3_valid_out_2;
assign local_bb3_c3_ene3[31:0] = local_bb3_c3_enter_c3_eni3[127:96];
assign local_bb3_c3_ene3_valid_out = 1'b1;
assign local_bb3_c3_enter_c3_eni3_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire SFC_4_VALID_7_7_0_valid_out;
wire SFC_4_VALID_7_7_0_stall_in;
wire SFC_4_VALID_7_7_0_inputs_ready;
wire SFC_4_VALID_7_7_0_stall_local;
wire SFC_4_VALID_7_7_0;

assign SFC_4_VALID_7_7_0_inputs_ready = local_bb3_c3_enter_c3_eni3_valid_out_3;
assign SFC_4_VALID_7_7_0 = local_bb3_c3_enter_c3_eni3_valid_bit;
assign SFC_4_VALID_7_7_0_valid_out = 1'b1;
assign local_bb3_c3_enter_c3_eni3_stall_in_3 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb3_c3_ene1_valid_out_1;
wire local_bb3_c3_ene1_stall_in_1;
wire local_bb3_var__valid_out;
wire local_bb3_var__stall_in;
wire local_bb3_var__inputs_ready;
wire local_bb3_var__stall_local;
wire [31:0] local_bb3_var_;

assign local_bb3_var__inputs_ready = (local_bb3_c3_enter_c3_eni3_valid_out_0 & local_bb3_c3_enter_c3_eni3_valid_out_1);
assign local_bb3_var_ = (local_bb3_c3_ene1 + local_bb3_c3_ene2);
assign local_bb3_c3_ene1_valid_out_1 = 1'b1;
assign local_bb3_var__valid_out = 1'b1;
assign local_bb3_c3_enter_c3_eni3_stall_in_0 = 1'b0;
assign local_bb3_c3_enter_c3_eni3_stall_in_1 = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_7to8_bb3_c3_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_7to8_bb3_c3_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_7to8_bb3_c3_ene3_0_NO_SHIFT_REG;
 logic rnode_7to8_bb3_c3_ene3_0_reg_8_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_7to8_bb3_c3_ene3_0_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb3_c3_ene3_0_valid_out_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb3_c3_ene3_0_stall_in_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb3_c3_ene3_0_stall_out_reg_8_NO_SHIFT_REG;

acl_data_fifo rnode_7to8_bb3_c3_ene3_0_reg_8_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_7to8_bb3_c3_ene3_0_reg_8_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_7to8_bb3_c3_ene3_0_stall_in_reg_8_NO_SHIFT_REG),
	.valid_out(rnode_7to8_bb3_c3_ene3_0_valid_out_reg_8_NO_SHIFT_REG),
	.stall_out(rnode_7to8_bb3_c3_ene3_0_stall_out_reg_8_NO_SHIFT_REG),
	.data_in(local_bb3_c3_ene3),
	.data_out(rnode_7to8_bb3_c3_ene3_0_reg_8_NO_SHIFT_REG)
);

defparam rnode_7to8_bb3_c3_ene3_0_reg_8_fifo.DEPTH = 1;
defparam rnode_7to8_bb3_c3_ene3_0_reg_8_fifo.DATA_WIDTH = 32;
defparam rnode_7to8_bb3_c3_ene3_0_reg_8_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_7to8_bb3_c3_ene3_0_reg_8_fifo.IMPL = "shift_reg";

assign rnode_7to8_bb3_c3_ene3_0_reg_8_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb3_c3_ene3_stall_in = 1'b0;
assign rnode_7to8_bb3_c3_ene3_0_NO_SHIFT_REG = rnode_7to8_bb3_c3_ene3_0_reg_8_NO_SHIFT_REG;
assign rnode_7to8_bb3_c3_ene3_0_stall_in_reg_8_NO_SHIFT_REG = ~(local_bb3_c3_exit_c3_exi3_enable);
assign rnode_7to8_bb3_c3_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_4_VALID_7_8_0_inputs_ready;
 reg SFC_4_VALID_7_8_0_valid_out_NO_SHIFT_REG;
wire SFC_4_VALID_7_8_0_stall_in;
wire SFC_4_VALID_7_8_0_output_regs_ready;
 reg SFC_4_VALID_7_8_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_4_VALID_7_8_0_causedstall;

assign SFC_4_VALID_7_8_0_inputs_ready = 1'b1;
assign SFC_4_VALID_7_8_0_output_regs_ready = local_bb3_c3_exit_c3_exi3_enable;
assign SFC_4_VALID_7_7_0_stall_in = 1'b0;
assign SFC_4_VALID_7_8_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb3_c3_exit_c3_exi3_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_4_VALID_7_8_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_4_VALID_7_8_0_output_regs_ready)
		begin
			SFC_4_VALID_7_8_0_NO_SHIFT_REG <= SFC_4_VALID_7_7_0;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_7to8_bb3_c3_ene1_0_valid_out_NO_SHIFT_REG;
 logic rnode_7to8_bb3_c3_ene1_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_7to8_bb3_c3_ene1_0_NO_SHIFT_REG;
 logic rnode_7to8_bb3_c3_ene1_0_reg_8_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_7to8_bb3_c3_ene1_0_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb3_c3_ene1_0_valid_out_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb3_c3_ene1_0_stall_in_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb3_c3_ene1_0_stall_out_reg_8_NO_SHIFT_REG;

acl_data_fifo rnode_7to8_bb3_c3_ene1_0_reg_8_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_7to8_bb3_c3_ene1_0_reg_8_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_7to8_bb3_c3_ene1_0_stall_in_reg_8_NO_SHIFT_REG),
	.valid_out(rnode_7to8_bb3_c3_ene1_0_valid_out_reg_8_NO_SHIFT_REG),
	.stall_out(rnode_7to8_bb3_c3_ene1_0_stall_out_reg_8_NO_SHIFT_REG),
	.data_in(local_bb3_c3_ene1),
	.data_out(rnode_7to8_bb3_c3_ene1_0_reg_8_NO_SHIFT_REG)
);

defparam rnode_7to8_bb3_c3_ene1_0_reg_8_fifo.DEPTH = 1;
defparam rnode_7to8_bb3_c3_ene1_0_reg_8_fifo.DATA_WIDTH = 32;
defparam rnode_7to8_bb3_c3_ene1_0_reg_8_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_7to8_bb3_c3_ene1_0_reg_8_fifo.IMPL = "shift_reg";

assign rnode_7to8_bb3_c3_ene1_0_reg_8_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb3_c3_ene1_stall_in_1 = 1'b0;
assign rnode_7to8_bb3_c3_ene1_0_NO_SHIFT_REG = rnode_7to8_bb3_c3_ene1_0_reg_8_NO_SHIFT_REG;
assign rnode_7to8_bb3_c3_ene1_0_stall_in_reg_8_NO_SHIFT_REG = ~(local_bb3_c3_exit_c3_exi3_enable);
assign rnode_7to8_bb3_c3_ene1_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_7to8_bb3_var__0_valid_out_NO_SHIFT_REG;
 logic rnode_7to8_bb3_var__0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_7to8_bb3_var__0_NO_SHIFT_REG;
 logic rnode_7to8_bb3_var__0_reg_8_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_7to8_bb3_var__0_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb3_var__0_valid_out_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb3_var__0_stall_in_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb3_var__0_stall_out_reg_8_NO_SHIFT_REG;

acl_data_fifo rnode_7to8_bb3_var__0_reg_8_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_7to8_bb3_var__0_reg_8_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_7to8_bb3_var__0_stall_in_reg_8_NO_SHIFT_REG),
	.valid_out(rnode_7to8_bb3_var__0_valid_out_reg_8_NO_SHIFT_REG),
	.stall_out(rnode_7to8_bb3_var__0_stall_out_reg_8_NO_SHIFT_REG),
	.data_in(local_bb3_var_),
	.data_out(rnode_7to8_bb3_var__0_reg_8_NO_SHIFT_REG)
);

defparam rnode_7to8_bb3_var__0_reg_8_fifo.DEPTH = 1;
defparam rnode_7to8_bb3_var__0_reg_8_fifo.DATA_WIDTH = 32;
defparam rnode_7to8_bb3_var__0_reg_8_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_7to8_bb3_var__0_reg_8_fifo.IMPL = "shift_reg";

assign rnode_7to8_bb3_var__0_reg_8_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb3_var__stall_in = 1'b0;
assign rnode_7to8_bb3_var__0_NO_SHIFT_REG = rnode_7to8_bb3_var__0_reg_8_NO_SHIFT_REG;
assign rnode_7to8_bb3_var__0_stall_in_reg_8_NO_SHIFT_REG = ~(local_bb3_c3_exit_c3_exi3_enable);
assign rnode_7to8_bb3_var__0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb3_c3_exi1_stall_local;
wire [191:0] local_bb3_c3_exi1;

assign local_bb3_c3_exi1[31:0] = 32'bx;
assign local_bb3_c3_exi1[63:32] = rnode_7to8_bb3_c3_ene3_0_NO_SHIFT_REG;
assign local_bb3_c3_exi1[191:64] = 128'bx;

// This section implements an unregistered operation.
// 
wire local_bb3_var__u4_stall_local;
wire [63:0] local_bb3_var__u4;

assign local_bb3_var__u4[32] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[33] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[34] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[35] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[36] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[37] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[38] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[39] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[40] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[41] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[42] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[43] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[44] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[45] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[46] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[47] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[48] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[49] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[50] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[51] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[52] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[53] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[54] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[55] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[56] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[57] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[58] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[59] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[60] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[61] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[62] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[63] = rnode_7to8_bb3_var__0_NO_SHIFT_REG[31];
assign local_bb3_var__u4[31:0] = rnode_7to8_bb3_var__0_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb3_c3_exi2_stall_local;
wire [191:0] local_bb3_c3_exi2;

assign local_bb3_c3_exi2[63:0] = local_bb3_c3_exi1[63:0];
assign local_bb3_c3_exi2[95:64] = rnode_7to8_bb3_c3_ene1_0_NO_SHIFT_REG;
assign local_bb3_c3_exi2[191:96] = local_bb3_c3_exi1[191:96];

// This section implements an unregistered operation.
// 
wire local_bb3_var__u5_stall_local;
wire [63:0] local_bb3_var__u5;

assign local_bb3_var__u5 = ((input_inputFeatureMap & 64'hFFFFFFFFFFFFFC00) + (local_bb3_var__u4 << 6'h2));

// This section implements an unregistered operation.
// 
wire local_bb3_c3_exi3_valid_out;
wire local_bb3_c3_exi3_stall_in;
wire local_bb3_c3_exi3_inputs_ready;
wire local_bb3_c3_exi3_stall_local;
wire [191:0] local_bb3_c3_exi3;

assign local_bb3_c3_exi3_inputs_ready = (rnode_7to8_bb3_c3_ene1_0_valid_out_NO_SHIFT_REG & rnode_7to8_bb3_c3_ene3_0_valid_out_NO_SHIFT_REG & rnode_7to8_bb3_var__0_valid_out_NO_SHIFT_REG);
assign local_bb3_c3_exi3[127:0] = local_bb3_c3_exi2[127:0];
assign local_bb3_c3_exi3[191:128] = (local_bb3_var__u5 & 64'hFFFFFFFFFFFFFFFC);
assign local_bb3_c3_exi3_valid_out = 1'b1;
assign rnode_7to8_bb3_c3_ene1_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_7to8_bb3_c3_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_7to8_bb3_var__0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb3_c3_exit_c3_exi3_valid_out_0;
wire local_bb3_c3_exit_c3_exi3_stall_in_0;
wire local_bb3_c3_exit_c3_exi3_valid_out_1;
wire local_bb3_c3_exit_c3_exi3_stall_in_1;
wire local_bb3_c3_exit_c3_exi3_valid_out_2;
wire local_bb3_c3_exit_c3_exi3_stall_in_2;
wire local_bb3_c3_exit_c3_exi3_inputs_ready;
wire local_bb3_c3_exit_c3_exi3_stall_local;
wire [191:0] local_bb3_c3_exit_c3_exi3;
wire local_bb3_c3_exit_c3_exi3_valid;
wire local_bb3_c3_exit_c3_exi3_fu_stall_out;
 reg local_bb3_c3_exit_c3_exi3_consumed_0_NO_SHIFT_REG;
 reg local_bb3_c3_exit_c3_exi3_consumed_2_NO_SHIFT_REG;

acl_enable_sink local_bb3_c3_exit_c3_exi3_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb3_c3_exi3),
	.data_out(local_bb3_c3_exit_c3_exi3),
	.input_accepted(local_bb3_c3_enter_c3_eni3_input_accepted),
	.valid_out(local_bb3_c3_exit_c3_exi3_valid),
	.stall_in(local_bb3_c3_exit_c3_exi3_stall_local),
	.enable(local_bb3_c3_exit_c3_exi3_enable),
	.valid_in(local_bb3_c3_exit_c3_exi3_valid_in),
	.stall_entry(local_bb3_c3_exit_c3_exi3_entry_stall),
	.inc_pipelined_thread(local_bb3_c3_enter_c3_eni3_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb3_c3_enter_c3_eni3_dec_pipelined_thread)
);

defparam local_bb3_c3_exit_c3_exi3_instance.DATA_WIDTH = 192;
defparam local_bb3_c3_exit_c3_exi3_instance.PIPELINE_DEPTH = 1;
defparam local_bb3_c3_exit_c3_exi3_instance.SCHEDULEII = 1;
defparam local_bb3_c3_exit_c3_exi3_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb3_c3_exit_c3_exi3_inputs_ready = (local_bb3_c3_exi3_valid_out & SFC_4_VALID_7_8_0_valid_out_NO_SHIFT_REG);
assign local_bb3_c3_exit_c3_exi3_valid_in = SFC_4_VALID_7_8_0_NO_SHIFT_REG;
assign local_bb3_c3_exit_c3_exi3_fu_stall_out = ~(local_bb3_c3_exit_c3_exi3_enable);
assign local_bb3_c3_exit_c3_exi3_stall_local = ((local_bb3_c3_exit_c3_exi3_stall_in_0 & ~(local_bb3_c3_exit_c3_exi3_consumed_0_NO_SHIFT_REG)) | 1'b0 | (local_bb3_c3_exit_c3_exi3_stall_in_2 & ~(local_bb3_c3_exit_c3_exi3_consumed_2_NO_SHIFT_REG)));
assign local_bb3_c3_exit_c3_exi3_valid_out_0 = (local_bb3_c3_exit_c3_exi3_valid & ~(local_bb3_c3_exit_c3_exi3_consumed_0_NO_SHIFT_REG));
assign local_bb3_c3_exit_c3_exi3_valid_out_1 = local_bb3_c3_exit_c3_exi3_valid;
assign local_bb3_c3_exit_c3_exi3_valid_out_2 = (local_bb3_c3_exit_c3_exi3_valid & ~(local_bb3_c3_exit_c3_exi3_consumed_2_NO_SHIFT_REG));
assign local_bb3_c3_exi3_stall_in = 1'b0;
assign SFC_4_VALID_7_8_0_stall_in = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb3_c3_exit_c3_exi3_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb3_c3_exit_c3_exi3_consumed_2_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb3_c3_exit_c3_exi3_consumed_0_NO_SHIFT_REG <= (local_bb3_c3_exit_c3_exi3_valid & (local_bb3_c3_exit_c3_exi3_consumed_0_NO_SHIFT_REG | ~(local_bb3_c3_exit_c3_exi3_stall_in_0)) & local_bb3_c3_exit_c3_exi3_stall_local);
		local_bb3_c3_exit_c3_exi3_consumed_2_NO_SHIFT_REG <= (local_bb3_c3_exit_c3_exi3_valid & (local_bb3_c3_exit_c3_exi3_consumed_2_NO_SHIFT_REG | ~(local_bb3_c3_exit_c3_exi3_stall_in_2)) & local_bb3_c3_exit_c3_exi3_stall_local);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb3_c3_exe1_stall_local;
wire [31:0] local_bb3_c3_exe1;

assign local_bb3_c3_exe1[31:0] = local_bb3_c3_exit_c3_exi3[63:32];

// This section implements an unregistered operation.
// 
wire local_bb3_c3_exe1_valid_out;
wire local_bb3_c3_exe1_stall_in;
wire local_bb3_c3_exe2_valid_out;
wire local_bb3_c3_exe2_stall_in;
wire local_bb3_c3_exe2_inputs_ready;
wire local_bb3_c3_exe2_stall_local;
wire [31:0] local_bb3_c3_exe2;

assign local_bb3_c3_exe2_inputs_ready = (local_bb3_c3_exit_c3_exi3_valid_out_0 & local_bb3_c3_exit_c3_exi3_valid_out_1);
assign local_bb3_c3_exe2[31:0] = local_bb3_c3_exit_c3_exi3[95:64];
assign local_bb3_c3_exe2_stall_local = (local_bb3_c3_exe1_stall_in | local_bb3_c3_exe2_stall_in);
assign local_bb3_c3_exe1_valid_out = local_bb3_c3_exe2_inputs_ready;
assign local_bb3_c3_exe2_valid_out = local_bb3_c3_exe2_inputs_ready;
assign local_bb3_c3_exit_c3_exi3_stall_in_0 = (local_bb3_c3_exe2_stall_local | ~(local_bb3_c3_exe2_inputs_ready));
assign local_bb3_c3_exit_c3_exi3_stall_in_1 = (local_bb3_c3_exe2_stall_local | ~(local_bb3_c3_exe2_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb3_c3_exe3_valid_out;
wire local_bb3_c3_exe3_stall_in;
wire local_bb3_c3_exe3_inputs_ready;
wire local_bb3_c3_exe3_stall_local;
wire [63:0] local_bb3_c3_exe3;
wire [127:0] rci_rcnode_8to168_rc1_input_global_id_0_0_reg_8;

assign local_bb3_c3_exe3_inputs_ready = local_bb3_c3_exit_c3_exi3_valid_out_2;
assign local_bb3_c3_exe3[63:0] = local_bb3_c3_exit_c3_exi3[191:128];
assign local_bb3_c3_exe3_valid_out = local_bb3_c3_exe3_inputs_ready;
assign local_bb3_c3_exe3_stall_local = local_bb3_c3_exe3_stall_in;
assign local_bb3_c3_exit_c3_exi3_stall_in_2 = (|local_bb3_c3_exe3_stall_local);
assign rci_rcnode_8to168_rc1_input_global_id_0_0_reg_8[31:0] = rnode_1to8_input_global_id_0_1_NO_SHIFT_REG;
assign rci_rcnode_8to168_rc1_input_global_id_0_0_reg_8[63:32] = rnode_1to8_input_global_id_1_1_NO_SHIFT_REG;
assign rci_rcnode_8to168_rc1_input_global_id_0_0_reg_8[95:64] = local_bb3_c3_exe1;
assign rci_rcnode_8to168_rc1_input_global_id_0_0_reg_8[127:96] = local_bb3_c3_exe2;

// Register node:
//  * latency = 160
//  * capacity = 160
 logic rcnode_8to168_rc1_input_global_id_0_0_valid_out_NO_SHIFT_REG;
 logic rcnode_8to168_rc1_input_global_id_0_0_stall_in_NO_SHIFT_REG;
 logic [127:0] rcnode_8to168_rc1_input_global_id_0_0_NO_SHIFT_REG;
 logic rcnode_8to168_rc1_input_global_id_0_0_reg_168_inputs_ready_NO_SHIFT_REG;
 logic [127:0] rcnode_8to168_rc1_input_global_id_0_0_reg_168_NO_SHIFT_REG;
 logic rcnode_8to168_rc1_input_global_id_0_0_valid_out_reg_168_NO_SHIFT_REG;
 logic rcnode_8to168_rc1_input_global_id_0_0_stall_in_reg_168_NO_SHIFT_REG;
 logic rcnode_8to168_rc1_input_global_id_0_0_stall_out_0_reg_168_IP_NO_SHIFT_REG;
 logic rcnode_8to168_rc1_input_global_id_0_0_stall_out_0_reg_168_NO_SHIFT_REG;

acl_data_fifo rcnode_8to168_rc1_input_global_id_0_0_reg_168_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_8to168_rc1_input_global_id_0_0_reg_168_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_8to168_rc1_input_global_id_0_0_stall_in_reg_168_NO_SHIFT_REG),
	.valid_out(rcnode_8to168_rc1_input_global_id_0_0_valid_out_reg_168_NO_SHIFT_REG),
	.stall_out(rcnode_8to168_rc1_input_global_id_0_0_stall_out_0_reg_168_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_8to168_rc1_input_global_id_0_0_reg_8),
	.data_out(rcnode_8to168_rc1_input_global_id_0_0_reg_168_NO_SHIFT_REG)
);

defparam rcnode_8to168_rc1_input_global_id_0_0_reg_168_fifo.DEPTH = 161;
defparam rcnode_8to168_rc1_input_global_id_0_0_reg_168_fifo.DATA_WIDTH = 128;
defparam rcnode_8to168_rc1_input_global_id_0_0_reg_168_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_8to168_rc1_input_global_id_0_0_reg_168_fifo.IMPL = "ram";

assign rcnode_8to168_rc1_input_global_id_0_0_reg_168_inputs_ready_NO_SHIFT_REG = (rnode_1to8_input_global_id_0_0_valid_out_1_NO_SHIFT_REG & rnode_1to8_input_global_id_1_0_valid_out_1_NO_SHIFT_REG & local_bb3_c3_exe1_valid_out & local_bb3_c3_exe2_valid_out);
assign rcnode_8to168_rc1_input_global_id_0_0_stall_out_0_reg_168_NO_SHIFT_REG = (~(rcnode_8to168_rc1_input_global_id_0_0_reg_168_inputs_ready_NO_SHIFT_REG) | rcnode_8to168_rc1_input_global_id_0_0_stall_out_0_reg_168_IP_NO_SHIFT_REG);
assign rnode_1to8_input_global_id_0_0_stall_in_1_NO_SHIFT_REG = rcnode_8to168_rc1_input_global_id_0_0_stall_out_0_reg_168_NO_SHIFT_REG;
assign rnode_1to8_input_global_id_1_0_stall_in_1_NO_SHIFT_REG = rcnode_8to168_rc1_input_global_id_0_0_stall_out_0_reg_168_NO_SHIFT_REG;
assign local_bb3_c3_exe1_stall_in = rcnode_8to168_rc1_input_global_id_0_0_stall_out_0_reg_168_NO_SHIFT_REG;
assign local_bb3_c3_exe2_stall_in = rcnode_8to168_rc1_input_global_id_0_0_stall_out_0_reg_168_NO_SHIFT_REG;
assign rcnode_8to168_rc1_input_global_id_0_0_NO_SHIFT_REG = rcnode_8to168_rc1_input_global_id_0_0_reg_168_NO_SHIFT_REG;
assign rcnode_8to168_rc1_input_global_id_0_0_stall_in_reg_168_NO_SHIFT_REG = rcnode_8to168_rc1_input_global_id_0_0_stall_in_NO_SHIFT_REG;
assign rcnode_8to168_rc1_input_global_id_0_0_valid_out_NO_SHIFT_REG = rcnode_8to168_rc1_input_global_id_0_0_valid_out_reg_168_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_8to9_bb3_c3_exe3_0_valid_out_NO_SHIFT_REG;
 logic rnode_8to9_bb3_c3_exe3_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_8to9_bb3_c3_exe3_0_NO_SHIFT_REG;
 logic rnode_8to9_bb3_c3_exe3_0_reg_9_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_8to9_bb3_c3_exe3_0_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb3_c3_exe3_0_valid_out_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb3_c3_exe3_0_stall_in_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb3_c3_exe3_0_stall_out_reg_9_NO_SHIFT_REG;
wire [421:0] rci_rcnode_168to169_rc0_cmp48_0_reg_168;

acl_data_fifo rnode_8to9_bb3_c3_exe3_0_reg_9_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_8to9_bb3_c3_exe3_0_reg_9_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_8to9_bb3_c3_exe3_0_stall_in_reg_9_NO_SHIFT_REG),
	.valid_out(rnode_8to9_bb3_c3_exe3_0_valid_out_reg_9_NO_SHIFT_REG),
	.stall_out(rnode_8to9_bb3_c3_exe3_0_stall_out_reg_9_NO_SHIFT_REG),
	.data_in((local_bb3_c3_exe3 & 64'hFFFFFFFFFFFFFFFC)),
	.data_out(rnode_8to9_bb3_c3_exe3_0_reg_9_NO_SHIFT_REG)
);

defparam rnode_8to9_bb3_c3_exe3_0_reg_9_fifo.DEPTH = 2;
defparam rnode_8to9_bb3_c3_exe3_0_reg_9_fifo.DATA_WIDTH = 64;
defparam rnode_8to9_bb3_c3_exe3_0_reg_9_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_8to9_bb3_c3_exe3_0_reg_9_fifo.IMPL = "ll_reg";

assign rnode_8to9_bb3_c3_exe3_0_reg_9_inputs_ready_NO_SHIFT_REG = local_bb3_c3_exe3_valid_out;
assign local_bb3_c3_exe3_stall_in = rnode_8to9_bb3_c3_exe3_0_stall_out_reg_9_NO_SHIFT_REG;
assign rnode_8to9_bb3_c3_exe3_0_NO_SHIFT_REG = rnode_8to9_bb3_c3_exe3_0_reg_9_NO_SHIFT_REG;
assign rnode_8to9_bb3_c3_exe3_0_stall_in_reg_9_NO_SHIFT_REG = rnode_8to9_bb3_c3_exe3_0_stall_in_NO_SHIFT_REG;
assign rnode_8to9_bb3_c3_exe3_0_valid_out_NO_SHIFT_REG = rnode_8to9_bb3_c3_exe3_0_valid_out_reg_9_NO_SHIFT_REG;
assign rci_rcnode_168to169_rc0_cmp48_0_reg_168[0] = rcnode_1to168_rc12_cmp48_0_NO_SHIFT_REG[0];
assign rci_rcnode_168to169_rc0_cmp48_0_reg_168[1] = rcnode_1to168_rc12_cmp48_0_NO_SHIFT_REG[1];
assign rci_rcnode_168to169_rc0_cmp48_0_reg_168[33:2] = rcnode_1to168_rc12_cmp48_0_NO_SHIFT_REG[33:2];
assign rci_rcnode_168to169_rc0_cmp48_0_reg_168[65:34] = rcnode_1to168_rc12_cmp48_0_NO_SHIFT_REG[65:34];
assign rci_rcnode_168to169_rc0_cmp48_0_reg_168[97:66] = rcnode_1to168_rc13_c0_exe1_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_168to169_rc0_cmp48_0_reg_168[129:98] = rcnode_1to168_rc13_c0_exe1_0_NO_SHIFT_REG[63:32];
assign rci_rcnode_168to169_rc0_cmp48_0_reg_168[161:130] = rcnode_1to168_rc13_c0_exe1_0_NO_SHIFT_REG[95:64];
assign rci_rcnode_168to169_rc0_cmp48_0_reg_168[162] = rcnode_1to168_rc13_c0_exe1_0_NO_SHIFT_REG[96];
assign rci_rcnode_168to169_rc0_cmp48_0_reg_168[163] = rcnode_1to168_rc14_var__u3_0_NO_SHIFT_REG[0];
assign rci_rcnode_168to169_rc0_cmp48_0_reg_168[164] = rcnode_1to168_rc14_var__u3_0_NO_SHIFT_REG[1];
assign rci_rcnode_168to169_rc0_cmp48_0_reg_168[165] = rcnode_1to168_rc14_var__u3_0_NO_SHIFT_REG[2];
assign rci_rcnode_168to169_rc0_cmp48_0_reg_168[197:166] = rcnode_1to168_rc14_var__u3_0_NO_SHIFT_REG[34:3];
assign rci_rcnode_168to169_rc0_cmp48_0_reg_168[229:198] = rcnode_1to168_rc15_mul_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_168to169_rc0_cmp48_0_reg_168[261:230] = rcnode_1to168_rc15_mul_0_NO_SHIFT_REG[63:32];
assign rci_rcnode_168to169_rc0_cmp48_0_reg_168[293:262] = rcnode_1to168_rc15_mul_0_NO_SHIFT_REG[95:64];
assign rci_rcnode_168to169_rc0_cmp48_0_reg_168[325:294] = rcnode_8to168_rc1_input_global_id_0_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_168to169_rc0_cmp48_0_reg_168[357:326] = rcnode_8to168_rc1_input_global_id_0_0_NO_SHIFT_REG[63:32];
assign rci_rcnode_168to169_rc0_cmp48_0_reg_168[389:358] = rcnode_8to168_rc1_input_global_id_0_0_NO_SHIFT_REG[95:64];
assign rci_rcnode_168to169_rc0_cmp48_0_reg_168[421:390] = rcnode_8to168_rc1_input_global_id_0_0_NO_SHIFT_REG[127:96];

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_168to169_rc0_cmp48_0_valid_out_NO_SHIFT_REG;
 logic rcnode_168to169_rc0_cmp48_0_stall_in_NO_SHIFT_REG;
 logic [421:0] rcnode_168to169_rc0_cmp48_0_NO_SHIFT_REG;
 logic rcnode_168to169_rc0_cmp48_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic [421:0] rcnode_168to169_rc0_cmp48_0_reg_169_NO_SHIFT_REG;
 logic rcnode_168to169_rc0_cmp48_0_valid_out_reg_169_NO_SHIFT_REG;
 logic rcnode_168to169_rc0_cmp48_0_stall_in_reg_169_NO_SHIFT_REG;
 logic rcnode_168to169_rc0_cmp48_0_stall_out_0_reg_169_IP_NO_SHIFT_REG;
 logic rcnode_168to169_rc0_cmp48_0_stall_out_0_reg_169_NO_SHIFT_REG;

acl_data_fifo rcnode_168to169_rc0_cmp48_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_168to169_rc0_cmp48_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_168to169_rc0_cmp48_0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rcnode_168to169_rc0_cmp48_0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rcnode_168to169_rc0_cmp48_0_stall_out_0_reg_169_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_168to169_rc0_cmp48_0_reg_168),
	.data_out(rcnode_168to169_rc0_cmp48_0_reg_169_NO_SHIFT_REG)
);

defparam rcnode_168to169_rc0_cmp48_0_reg_169_fifo.DEPTH = 1;
defparam rcnode_168to169_rc0_cmp48_0_reg_169_fifo.DATA_WIDTH = 422;
defparam rcnode_168to169_rc0_cmp48_0_reg_169_fifo.ALLOW_FULL_WRITE = 1;
defparam rcnode_168to169_rc0_cmp48_0_reg_169_fifo.IMPL = "ll_reg";

assign rcnode_168to169_rc0_cmp48_0_reg_169_inputs_ready_NO_SHIFT_REG = (rcnode_1to168_rc12_cmp48_0_valid_out_NO_SHIFT_REG & rcnode_1to168_rc13_c0_exe1_0_valid_out_NO_SHIFT_REG & rcnode_1to168_rc14_var__u3_0_valid_out_NO_SHIFT_REG & rcnode_1to168_rc15_mul_0_valid_out_NO_SHIFT_REG & rcnode_8to168_rc1_input_global_id_0_0_valid_out_NO_SHIFT_REG);
assign rcnode_168to169_rc0_cmp48_0_stall_out_0_reg_169_NO_SHIFT_REG = (~(rcnode_168to169_rc0_cmp48_0_reg_169_inputs_ready_NO_SHIFT_REG) | rcnode_168to169_rc0_cmp48_0_stall_out_0_reg_169_IP_NO_SHIFT_REG);
assign rcnode_1to168_rc12_cmp48_0_stall_in_NO_SHIFT_REG = rcnode_168to169_rc0_cmp48_0_stall_out_0_reg_169_NO_SHIFT_REG;
assign rcnode_1to168_rc13_c0_exe1_0_stall_in_NO_SHIFT_REG = rcnode_168to169_rc0_cmp48_0_stall_out_0_reg_169_NO_SHIFT_REG;
assign rcnode_1to168_rc14_var__u3_0_stall_in_NO_SHIFT_REG = rcnode_168to169_rc0_cmp48_0_stall_out_0_reg_169_NO_SHIFT_REG;
assign rcnode_1to168_rc15_mul_0_stall_in_NO_SHIFT_REG = rcnode_168to169_rc0_cmp48_0_stall_out_0_reg_169_NO_SHIFT_REG;
assign rcnode_8to168_rc1_input_global_id_0_0_stall_in_NO_SHIFT_REG = rcnode_168to169_rc0_cmp48_0_stall_out_0_reg_169_NO_SHIFT_REG;
assign rcnode_168to169_rc0_cmp48_0_NO_SHIFT_REG = rcnode_168to169_rc0_cmp48_0_reg_169_NO_SHIFT_REG;
assign rcnode_168to169_rc0_cmp48_0_stall_in_reg_169_NO_SHIFT_REG = rcnode_168to169_rc0_cmp48_0_stall_in_NO_SHIFT_REG;
assign rcnode_168to169_rc0_cmp48_0_valid_out_NO_SHIFT_REG = rcnode_168to169_rc0_cmp48_0_valid_out_reg_169_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb3_ld__inputs_ready;
 reg local_bb3_ld__valid_out_NO_SHIFT_REG;
wire local_bb3_ld__stall_in;
wire local_bb3_ld__output_regs_ready;
wire local_bb3_ld__fu_stall_out;
wire local_bb3_ld__fu_valid_out;
wire [31:0] local_bb3_ld__lsu_dataout;
 reg [31:0] local_bb3_ld__NO_SHIFT_REG;
wire local_bb3_ld__causedstall;

lsu_top lsu_local_bb3_ld_ (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb3_ld__fu_stall_out),
	.i_valid(local_bb3_ld__inputs_ready),
	.i_address((rnode_8to9_bb3_c3_exe3_0_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFFFC)),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(local_bb3__phi_decision_xor_RM),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb3_ld__output_regs_ready)),
	.o_valid(local_bb3_ld__fu_valid_out),
	.o_readdata(local_bb3_ld__lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb3_ld__active),
	.avm_address(avm_local_bb3_ld__address),
	.avm_read(avm_local_bb3_ld__read),
	.avm_enable(avm_local_bb3_ld__enable),
	.avm_readdata(avm_local_bb3_ld__readdata),
	.avm_write(avm_local_bb3_ld__write),
	.avm_writeack(avm_local_bb3_ld__writeack),
	.avm_burstcount(avm_local_bb3_ld__burstcount),
	.avm_writedata(avm_local_bb3_ld__writedata),
	.avm_byteenable(avm_local_bb3_ld__byteenable),
	.avm_waitrequest(avm_local_bb3_ld__waitrequest),
	.avm_readdatavalid(avm_local_bb3_ld__readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb3_ld_.AWIDTH = 32;
defparam lsu_local_bb3_ld_.WIDTH_BYTES = 4;
defparam lsu_local_bb3_ld_.MWIDTH_BYTES = 64;
defparam lsu_local_bb3_ld_.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb3_ld_.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb3_ld_.READ = 1;
defparam lsu_local_bb3_ld_.ATOMIC = 0;
defparam lsu_local_bb3_ld_.WIDTH = 32;
defparam lsu_local_bb3_ld_.MWIDTH = 512;
defparam lsu_local_bb3_ld_.ATOMIC_WIDTH = 3;
defparam lsu_local_bb3_ld_.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb3_ld_.KERNEL_SIDE_MEM_LATENCY = 160;
defparam lsu_local_bb3_ld_.MEMORY_SIDE_MEM_LATENCY = 69;
defparam lsu_local_bb3_ld_.USE_WRITE_ACK = 0;
defparam lsu_local_bb3_ld_.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb3_ld_.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb3_ld_.NUMBER_BANKS = 1;
defparam lsu_local_bb3_ld_.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb3_ld_.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb3_ld_.USEINPUTFIFO = 0;
defparam lsu_local_bb3_ld_.USECACHING = 0;
defparam lsu_local_bb3_ld_.USEOUTPUTFIFO = 1;
defparam lsu_local_bb3_ld_.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb3_ld_.ADDRSPACE = 1;
defparam lsu_local_bb3_ld_.STYLE = "BURST-COALESCED";

assign local_bb3_ld__inputs_ready = (local_bb3__phi_decision_xor_RM_valid_out & rnode_8to9_bb3_c3_exe3_0_valid_out_NO_SHIFT_REG);
assign local_bb3_ld__output_regs_ready = (&(~(local_bb3_ld__valid_out_NO_SHIFT_REG) | ~(local_bb3_ld__stall_in)));
assign local_bb3__phi_decision_xor_RM_stall_in = (local_bb3_ld__fu_stall_out | ~(local_bb3_ld__inputs_ready));
assign rnode_8to9_bb3_c3_exe3_0_stall_in_NO_SHIFT_REG = (local_bb3_ld__fu_stall_out | ~(local_bb3_ld__inputs_ready));
assign local_bb3_ld__causedstall = (local_bb3_ld__inputs_ready && (local_bb3_ld__fu_stall_out && !(~(local_bb3_ld__output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb3_ld__NO_SHIFT_REG <= 'x;
		local_bb3_ld__valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb3_ld__output_regs_ready)
		begin
			local_bb3_ld__NO_SHIFT_REG <= local_bb3_ld__lsu_dataout;
			local_bb3_ld__valid_out_NO_SHIFT_REG <= local_bb3_ld__fu_valid_out;
		end
		else
		begin
			if (~(local_bb3_ld__stall_in))
			begin
				local_bb3_ld__valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_169to169_bb3_ld__valid_out;
wire rstag_169to169_bb3_ld__stall_in;
wire rstag_169to169_bb3_ld__inputs_ready;
wire rstag_169to169_bb3_ld__stall_local;
 reg rstag_169to169_bb3_ld__staging_valid_NO_SHIFT_REG;
wire rstag_169to169_bb3_ld__combined_valid;
 reg [31:0] rstag_169to169_bb3_ld__staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_169to169_bb3_ld_;

assign rstag_169to169_bb3_ld__inputs_ready = local_bb3_ld__valid_out_NO_SHIFT_REG;
assign rstag_169to169_bb3_ld_ = (rstag_169to169_bb3_ld__staging_valid_NO_SHIFT_REG ? rstag_169to169_bb3_ld__staging_reg_NO_SHIFT_REG : local_bb3_ld__NO_SHIFT_REG);
assign rstag_169to169_bb3_ld__combined_valid = (rstag_169to169_bb3_ld__staging_valid_NO_SHIFT_REG | rstag_169to169_bb3_ld__inputs_ready);
assign rstag_169to169_bb3_ld__valid_out = rstag_169to169_bb3_ld__combined_valid;
assign rstag_169to169_bb3_ld__stall_local = rstag_169to169_bb3_ld__stall_in;
assign local_bb3_ld__stall_in = (|rstag_169to169_bb3_ld__staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_169to169_bb3_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_169to169_bb3_ld__staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_169to169_bb3_ld__stall_local)
		begin
			if (~(rstag_169to169_bb3_ld__staging_valid_NO_SHIFT_REG))
			begin
				rstag_169to169_bb3_ld__staging_valid_NO_SHIFT_REG <= rstag_169to169_bb3_ld__inputs_ready;
			end
		end
		else
		begin
			rstag_169to169_bb3_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_169to169_bb3_ld__staging_valid_NO_SHIFT_REG))
		begin
			rstag_169to169_bb3_ld__staging_reg_NO_SHIFT_REG <= local_bb3_ld__NO_SHIFT_REG;
		end
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg lvb_cmp48_reg_NO_SHIFT_REG;
 reg lvb_var__reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_8_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c0_exe1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c0_exe2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_2_reg_NO_SHIFT_REG;
 reg lvb_cmp2122_reg_NO_SHIFT_REG;
 reg lvb_var__u3_reg_NO_SHIFT_REG;
 reg lvb__phi_decision77_xor_reg_NO_SHIFT_REG;
 reg lvb__phi_decision76_xor_or_reg_NO_SHIFT_REG;
 reg [31:0] lvb_channelCounter_049_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul50_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul_reg_NO_SHIFT_REG;
 reg [31:0] lvb_heightCounter_141_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb3_c3_exe1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb3_c3_exe2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb3_c1_exe1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb3_ld__reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb3_c1_exe1_valid_out & rcnode_166to169_rc1_mul50_0_valid_out_NO_SHIFT_REG & rcnode_168to169_rc0_cmp48_0_valid_out_NO_SHIFT_REG & rstag_169to169_bb3_ld__valid_out);
assign branch_var__output_regs_ready = (~(stall_in) | ~(branch_node_valid_out_NO_SHIFT_REG));
assign local_bb3_c1_exe1_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_166to169_rc1_mul50_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_168to169_rc0_cmp48_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rstag_169to169_bb3_ld__stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_cmp48 = lvb_cmp48_reg_NO_SHIFT_REG;
assign lvb_var_ = lvb_var__reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_8 = lvb_memcoalesce_param_extrValue_8_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_5 = lvb_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6 = lvb_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG;
assign lvb_c0_exe1 = lvb_c0_exe1_reg_NO_SHIFT_REG;
assign lvb_c0_exe2 = lvb_c0_exe2_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_2 = lvb_memcoalesce_param_extrValue_2_reg_NO_SHIFT_REG;
assign lvb_cmp2122 = lvb_cmp2122_reg_NO_SHIFT_REG;
assign lvb_var__u3 = lvb_var__u3_reg_NO_SHIFT_REG;
assign lvb__phi_decision77_xor = lvb__phi_decision77_xor_reg_NO_SHIFT_REG;
assign lvb__phi_decision76_xor_or = lvb__phi_decision76_xor_or_reg_NO_SHIFT_REG;
assign lvb_channelCounter_049 = lvb_channelCounter_049_reg_NO_SHIFT_REG;
assign lvb_mul50 = lvb_mul50_reg_NO_SHIFT_REG;
assign lvb_mul = lvb_mul_reg_NO_SHIFT_REG;
assign lvb_heightCounter_141 = lvb_heightCounter_141_reg_NO_SHIFT_REG;
assign lvb_bb3_c3_exe1 = lvb_bb3_c3_exe1_reg_NO_SHIFT_REG;
assign lvb_bb3_c3_exe2 = lvb_bb3_c3_exe2_reg_NO_SHIFT_REG;
assign lvb_bb3_c1_exe1 = lvb_bb3_c1_exe1_reg_NO_SHIFT_REG;
assign lvb_bb3_ld_ = lvb_bb3_ld__reg_NO_SHIFT_REG;
assign lvb_input_global_id_0 = lvb_input_global_id_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1 = lvb_input_global_id_1_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2 = lvb_input_global_id_2_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id = lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;
assign combined_branch_stall_in_signal = stall_in;
assign valid_out = branch_node_valid_out_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
		lvb_cmp48_reg_NO_SHIFT_REG <= 'x;
		lvb_var__reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_8_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG <= 'x;
		lvb_c0_exe1_reg_NO_SHIFT_REG <= 'x;
		lvb_c0_exe2_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_2_reg_NO_SHIFT_REG <= 'x;
		lvb_cmp2122_reg_NO_SHIFT_REG <= 'x;
		lvb_var__u3_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision77_xor_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision76_xor_or_reg_NO_SHIFT_REG <= 'x;
		lvb_channelCounter_049_reg_NO_SHIFT_REG <= 'x;
		lvb_mul50_reg_NO_SHIFT_REG <= 'x;
		lvb_mul_reg_NO_SHIFT_REG <= 'x;
		lvb_heightCounter_141_reg_NO_SHIFT_REG <= 'x;
		lvb_bb3_c3_exe1_reg_NO_SHIFT_REG <= 'x;
		lvb_bb3_c3_exe2_reg_NO_SHIFT_REG <= 'x;
		lvb_bb3_c1_exe1_reg_NO_SHIFT_REG <= 'x;
		lvb_bb3_ld__reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_cmp48_reg_NO_SHIFT_REG <= rcnode_168to169_rc0_cmp48_0_NO_SHIFT_REG[0];
			lvb_var__reg_NO_SHIFT_REG <= rcnode_168to169_rc0_cmp48_0_NO_SHIFT_REG[1];
			lvb_memcoalesce_param_extrValue_8_reg_NO_SHIFT_REG <= rcnode_166to169_rc1_mul50_0_NO_SHIFT_REG[95:64];
			lvb_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG <= rcnode_168to169_rc0_cmp48_0_NO_SHIFT_REG[33:2];
			lvb_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG <= rcnode_168to169_rc0_cmp48_0_NO_SHIFT_REG[65:34];
			lvb_c0_exe1_reg_NO_SHIFT_REG <= rcnode_168to169_rc0_cmp48_0_NO_SHIFT_REG[97:66];
			lvb_c0_exe2_reg_NO_SHIFT_REG <= rcnode_168to169_rc0_cmp48_0_NO_SHIFT_REG[129:98];
			lvb_memcoalesce_param_extrValue_2_reg_NO_SHIFT_REG <= rcnode_168to169_rc0_cmp48_0_NO_SHIFT_REG[161:130];
			lvb_cmp2122_reg_NO_SHIFT_REG <= rcnode_168to169_rc0_cmp48_0_NO_SHIFT_REG[162];
			lvb_var__u3_reg_NO_SHIFT_REG <= rcnode_168to169_rc0_cmp48_0_NO_SHIFT_REG[163];
			lvb__phi_decision77_xor_reg_NO_SHIFT_REG <= rcnode_168to169_rc0_cmp48_0_NO_SHIFT_REG[164];
			lvb__phi_decision76_xor_or_reg_NO_SHIFT_REG <= rcnode_168to169_rc0_cmp48_0_NO_SHIFT_REG[165];
			lvb_channelCounter_049_reg_NO_SHIFT_REG <= rcnode_168to169_rc0_cmp48_0_NO_SHIFT_REG[197:166];
			lvb_mul50_reg_NO_SHIFT_REG <= rcnode_166to169_rc1_mul50_0_NO_SHIFT_REG[31:0];
			lvb_mul_reg_NO_SHIFT_REG <= rcnode_168to169_rc0_cmp48_0_NO_SHIFT_REG[229:198];
			lvb_heightCounter_141_reg_NO_SHIFT_REG <= rcnode_166to169_rc1_mul50_0_NO_SHIFT_REG[63:32];
			lvb_bb3_c3_exe1_reg_NO_SHIFT_REG <= rcnode_168to169_rc0_cmp48_0_NO_SHIFT_REG[389:358];
			lvb_bb3_c3_exe2_reg_NO_SHIFT_REG <= rcnode_168to169_rc0_cmp48_0_NO_SHIFT_REG[421:390];
			lvb_bb3_c1_exe1_reg_NO_SHIFT_REG <= local_bb3_c1_exe1;
			lvb_bb3_ld__reg_NO_SHIFT_REG <= rstag_169to169_bb3_ld_;
			lvb_input_global_id_0_reg_NO_SHIFT_REG <= rcnode_168to169_rc0_cmp48_0_NO_SHIFT_REG[325:294];
			lvb_input_global_id_1_reg_NO_SHIFT_REG <= rcnode_168to169_rc0_cmp48_0_NO_SHIFT_REG[357:326];
			lvb_input_global_id_2_reg_NO_SHIFT_REG <= rcnode_168to169_rc0_cmp48_0_NO_SHIFT_REG[261:230];
			lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= rcnode_168to169_rc0_cmp48_0_NO_SHIFT_REG[293:262];
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module poolingLayer_basic_block_4
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_0,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_1,
		input 		valid_in_0,
		output 		stall_out_0,
		input 		input_cmp48_0,
		input 		input_var__0,
		input [31:0] 		input_memcoalesce_param_extrValue_8_0,
		input [31:0] 		input_memcoalesce_param_extrValue_5_0,
		input [31:0] 		input_memcoalesce_param_extrValue_6_0,
		input [31:0] 		input_c0_exe1_0,
		input [31:0] 		input_c0_exe2_0,
		input [31:0] 		input_memcoalesce_param_extrValue_2_0,
		input 		input_cmp2122_0,
		input 		input_var__u6_0,
		input 		input__phi_decision77_xor_0,
		input 		input__phi_decision76_xor_or_0,
		input [31:0] 		input_channelCounter_049_0,
		input [31:0] 		input_mul50_0,
		input [31:0] 		input_mul_0,
		input [31:0] 		input_heightCounter_141_0,
		input [31:0] 		input_c3_exe1_0,
		input [31:0] 		input_c3_exe2_0,
		input [31:0] 		input_c1_exe1_0,
		input [31:0] 		input_widthCounter_232_0,
		input [31:0] 		input_var__u7_0,
		input [31:0] 		input_var__u8_0,
		input [31:0] 		input_global_id_0_0,
		input [31:0] 		input_global_id_1_0,
		input [31:0] 		input_global_id_2_0,
		input [31:0] 		input_acl_hw_wg_id_0,
		input 		valid_in_1,
		output 		stall_out_1,
		input 		input_cmp48_1,
		input 		input_var__1,
		input [31:0] 		input_memcoalesce_param_extrValue_8_1,
		input [31:0] 		input_memcoalesce_param_extrValue_5_1,
		input [31:0] 		input_memcoalesce_param_extrValue_6_1,
		input [31:0] 		input_c0_exe1_1,
		input [31:0] 		input_c0_exe2_1,
		input [31:0] 		input_memcoalesce_param_extrValue_2_1,
		input 		input_cmp2122_1,
		input 		input_var__u6_1,
		input 		input__phi_decision77_xor_1,
		input 		input__phi_decision76_xor_or_1,
		input [31:0] 		input_channelCounter_049_1,
		input [31:0] 		input_mul50_1,
		input [31:0] 		input_mul_1,
		input [31:0] 		input_heightCounter_141_1,
		input [31:0] 		input_c3_exe1_1,
		input [31:0] 		input_c3_exe2_1,
		input [31:0] 		input_c1_exe1_1,
		input [31:0] 		input_widthCounter_232_1,
		input [31:0] 		input_var__u7_1,
		input [31:0] 		input_var__u8_1,
		input [31:0] 		input_global_id_0_1,
		input [31:0] 		input_global_id_1_1,
		input [31:0] 		input_global_id_2_1,
		input [31:0] 		input_acl_hw_wg_id_1,
		output 		valid_out,
		input 		stall_in,
		output 		lvb_cmp48,
		output 		lvb_var_,
		output [31:0] 		lvb_memcoalesce_param_extrValue_8,
		output [31:0] 		lvb_memcoalesce_param_extrValue_5,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6,
		output [31:0] 		lvb_c0_exe1,
		output [31:0] 		lvb_c0_exe2,
		output [31:0] 		lvb_memcoalesce_param_extrValue_2,
		output 		lvb_cmp2122,
		output 		lvb_var__u6,
		output 		lvb__phi_decision77_xor,
		output 		lvb__phi_decision76_xor_or,
		output [31:0] 		lvb_channelCounter_049,
		output [31:0] 		lvb_mul50,
		output [31:0] 		lvb_mul,
		output [31:0] 		lvb_heightCounter_141,
		output [31:0] 		lvb_c3_exe1,
		output [31:0] 		lvb_c3_exe2,
		output [31:0] 		lvb_c1_exe1,
		output [31:0] 		lvb_widthCounter_232,
		output [31:0] 		lvb_var__u7,
		output [31:0] 		lvb_var__u8,
		output [31:0] 		lvb_input_global_id_0,
		output [31:0] 		lvb_input_global_id_1,
		output [31:0] 		lvb_input_global_id_2,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		input 		start
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((valid_in_0 & valid_in_1) & ~((stall_out_0 | stall_out_1)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in;
 reg merge_node_valid_out_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
 reg input_cmp48_0_staging_reg_NO_SHIFT_REG;
 reg input_var__0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_8_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe1_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe2_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_2_0_staging_reg_NO_SHIFT_REG;
 reg input_cmp2122_0_staging_reg_NO_SHIFT_REG;
 reg input_var__u6_0_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision77_xor_0_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision76_xor_or_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_049_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul50_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_heightCounter_141_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c3_exe1_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c3_exe2_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c1_exe1_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_widthCounter_232_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__u7_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__u8_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
 reg local_lvm_cmp48_NO_SHIFT_REG;
 reg local_lvm_var__NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
 reg [31:0] local_lvm_c0_exe1_NO_SHIFT_REG;
 reg [31:0] local_lvm_c0_exe2_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG;
 reg local_lvm_cmp2122_NO_SHIFT_REG;
 reg local_lvm_var__u6_NO_SHIFT_REG;
 reg local_lvm__phi_decision77_xor_NO_SHIFT_REG;
 reg local_lvm__phi_decision76_xor_or_NO_SHIFT_REG;
 reg [31:0] local_lvm_channelCounter_049_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul50_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul_NO_SHIFT_REG;
 reg [31:0] local_lvm_heightCounter_141_NO_SHIFT_REG;
 reg [31:0] local_lvm_c3_exe1_NO_SHIFT_REG;
 reg [31:0] local_lvm_c3_exe2_NO_SHIFT_REG;
 reg [31:0] local_lvm_c1_exe1_NO_SHIFT_REG;
 reg [31:0] local_lvm_widthCounter_232_NO_SHIFT_REG;
 reg [31:0] local_lvm_var__u7_NO_SHIFT_REG;
 reg [31:0] local_lvm_var__u8_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_0_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;
 reg input_cmp48_1_staging_reg_NO_SHIFT_REG;
 reg input_var__1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_8_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe1_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe2_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_2_1_staging_reg_NO_SHIFT_REG;
 reg input_cmp2122_1_staging_reg_NO_SHIFT_REG;
 reg input_var__u6_1_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision77_xor_1_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision76_xor_or_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_049_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul50_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_heightCounter_141_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c3_exe1_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c3_exe2_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c1_exe1_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_widthCounter_232_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__u7_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__u8_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = (|(merge_node_stall_in & merge_node_valid_out_NO_SHIFT_REG));
assign stall_out_0 = merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
assign stall_out_1 = merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_0_staging_reg_NO_SHIFT_REG | valid_in_0))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		if ((merge_node_valid_in_1_staging_reg_NO_SHIFT_REG | valid_in_1))
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b1;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
		end
		else
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b0;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_cmp48_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_8_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe1_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp2122_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u6_0_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision77_xor_0_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision76_xor_or_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_049_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul50_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_heightCounter_141_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_c3_exe1_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_c3_exe2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_c1_exe1_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_widthCounter_232_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u7_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u8_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_0_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		input_cmp48_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_8_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe1_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp2122_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u6_1_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision77_xor_1_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision76_xor_or_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_049_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul50_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_heightCounter_141_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_c3_exe1_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_c3_exe2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_c1_exe1_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_widthCounter_232_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u7_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u8_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_0_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_0_staging_reg_NO_SHIFT_REG))
			begin
				input_cmp48_0_staging_reg_NO_SHIFT_REG <= input_cmp48_0;
				input_var__0_staging_reg_NO_SHIFT_REG <= input_var__0;
				input_memcoalesce_param_extrValue_8_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_0;
				input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_0;
				input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_0;
				input_c0_exe1_0_staging_reg_NO_SHIFT_REG <= input_c0_exe1_0;
				input_c0_exe2_0_staging_reg_NO_SHIFT_REG <= input_c0_exe2_0;
				input_memcoalesce_param_extrValue_2_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_0;
				input_cmp2122_0_staging_reg_NO_SHIFT_REG <= input_cmp2122_0;
				input_var__u6_0_staging_reg_NO_SHIFT_REG <= input_var__u6_0;
				input__phi_decision77_xor_0_staging_reg_NO_SHIFT_REG <= input__phi_decision77_xor_0;
				input__phi_decision76_xor_or_0_staging_reg_NO_SHIFT_REG <= input__phi_decision76_xor_or_0;
				input_channelCounter_049_0_staging_reg_NO_SHIFT_REG <= input_channelCounter_049_0;
				input_mul50_0_staging_reg_NO_SHIFT_REG <= input_mul50_0;
				input_mul_0_staging_reg_NO_SHIFT_REG <= input_mul_0;
				input_heightCounter_141_0_staging_reg_NO_SHIFT_REG <= input_heightCounter_141_0;
				input_c3_exe1_0_staging_reg_NO_SHIFT_REG <= input_c3_exe1_0;
				input_c3_exe2_0_staging_reg_NO_SHIFT_REG <= input_c3_exe2_0;
				input_c1_exe1_0_staging_reg_NO_SHIFT_REG <= input_c1_exe1_0;
				input_widthCounter_232_0_staging_reg_NO_SHIFT_REG <= input_widthCounter_232_0;
				input_var__u7_0_staging_reg_NO_SHIFT_REG <= input_var__u7_0;
				input_var__u8_0_staging_reg_NO_SHIFT_REG <= input_var__u8_0;
				input_global_id_0_0_staging_reg_NO_SHIFT_REG <= input_global_id_0_0;
				input_global_id_1_0_staging_reg_NO_SHIFT_REG <= input_global_id_1_0;
				input_global_id_2_0_staging_reg_NO_SHIFT_REG <= input_global_id_2_0;
				input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= valid_in_0;
			end
		end
		else
		begin
			merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
		if (((merge_block_selector_NO_SHIFT_REG != 1'b1) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_1_staging_reg_NO_SHIFT_REG))
			begin
				input_cmp48_1_staging_reg_NO_SHIFT_REG <= input_cmp48_1;
				input_var__1_staging_reg_NO_SHIFT_REG <= input_var__1;
				input_memcoalesce_param_extrValue_8_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_1;
				input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_1;
				input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_1;
				input_c0_exe1_1_staging_reg_NO_SHIFT_REG <= input_c0_exe1_1;
				input_c0_exe2_1_staging_reg_NO_SHIFT_REG <= input_c0_exe2_1;
				input_memcoalesce_param_extrValue_2_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_1;
				input_cmp2122_1_staging_reg_NO_SHIFT_REG <= input_cmp2122_1;
				input_var__u6_1_staging_reg_NO_SHIFT_REG <= input_var__u6_1;
				input__phi_decision77_xor_1_staging_reg_NO_SHIFT_REG <= input__phi_decision77_xor_1;
				input__phi_decision76_xor_or_1_staging_reg_NO_SHIFT_REG <= input__phi_decision76_xor_or_1;
				input_channelCounter_049_1_staging_reg_NO_SHIFT_REG <= input_channelCounter_049_1;
				input_mul50_1_staging_reg_NO_SHIFT_REG <= input_mul50_1;
				input_mul_1_staging_reg_NO_SHIFT_REG <= input_mul_1;
				input_heightCounter_141_1_staging_reg_NO_SHIFT_REG <= input_heightCounter_141_1;
				input_c3_exe1_1_staging_reg_NO_SHIFT_REG <= input_c3_exe1_1;
				input_c3_exe2_1_staging_reg_NO_SHIFT_REG <= input_c3_exe2_1;
				input_c1_exe1_1_staging_reg_NO_SHIFT_REG <= input_c1_exe1_1;
				input_widthCounter_232_1_staging_reg_NO_SHIFT_REG <= input_widthCounter_232_1;
				input_var__u7_1_staging_reg_NO_SHIFT_REG <= input_var__u7_1;
				input_var__u8_1_staging_reg_NO_SHIFT_REG <= input_var__u8_1;
				input_global_id_0_1_staging_reg_NO_SHIFT_REG <= input_global_id_0_1;
				input_global_id_1_1_staging_reg_NO_SHIFT_REG <= input_global_id_1_1;
				input_global_id_2_1_staging_reg_NO_SHIFT_REG <= input_global_id_2_1;
				input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= valid_in_1;
			end
		end
		else
		begin
			merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_0_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_cmp48_NO_SHIFT_REG <= input_cmp48_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_0_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe2_NO_SHIFT_REG <= input_c0_exe2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp2122_NO_SHIFT_REG <= input_cmp2122_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u6_NO_SHIFT_REG <= input_var__u6_0_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision77_xor_NO_SHIFT_REG <= input__phi_decision77_xor_0_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision76_xor_or_NO_SHIFT_REG <= input__phi_decision76_xor_or_0_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_049_NO_SHIFT_REG <= input_channelCounter_049_0_staging_reg_NO_SHIFT_REG;
					local_lvm_mul50_NO_SHIFT_REG <= input_mul50_0_staging_reg_NO_SHIFT_REG;
					local_lvm_mul_NO_SHIFT_REG <= input_mul_0_staging_reg_NO_SHIFT_REG;
					local_lvm_heightCounter_141_NO_SHIFT_REG <= input_heightCounter_141_0_staging_reg_NO_SHIFT_REG;
					local_lvm_c3_exe1_NO_SHIFT_REG <= input_c3_exe1_0_staging_reg_NO_SHIFT_REG;
					local_lvm_c3_exe2_NO_SHIFT_REG <= input_c3_exe2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_c1_exe1_NO_SHIFT_REG <= input_c1_exe1_0_staging_reg_NO_SHIFT_REG;
					local_lvm_widthCounter_232_NO_SHIFT_REG <= input_widthCounter_232_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u7_NO_SHIFT_REG <= input_var__u7_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u8_NO_SHIFT_REG <= input_var__u8_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_cmp48_NO_SHIFT_REG <= input_cmp48_0;
					local_lvm_var__NO_SHIFT_REG <= input_var__0;
					local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_0;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_0;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_0;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_0;
					local_lvm_c0_exe2_NO_SHIFT_REG <= input_c0_exe2_0;
					local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_0;
					local_lvm_cmp2122_NO_SHIFT_REG <= input_cmp2122_0;
					local_lvm_var__u6_NO_SHIFT_REG <= input_var__u6_0;
					local_lvm__phi_decision77_xor_NO_SHIFT_REG <= input__phi_decision77_xor_0;
					local_lvm__phi_decision76_xor_or_NO_SHIFT_REG <= input__phi_decision76_xor_or_0;
					local_lvm_channelCounter_049_NO_SHIFT_REG <= input_channelCounter_049_0;
					local_lvm_mul50_NO_SHIFT_REG <= input_mul50_0;
					local_lvm_mul_NO_SHIFT_REG <= input_mul_0;
					local_lvm_heightCounter_141_NO_SHIFT_REG <= input_heightCounter_141_0;
					local_lvm_c3_exe1_NO_SHIFT_REG <= input_c3_exe1_0;
					local_lvm_c3_exe2_NO_SHIFT_REG <= input_c3_exe2_0;
					local_lvm_c1_exe1_NO_SHIFT_REG <= input_c1_exe1_0;
					local_lvm_widthCounter_232_NO_SHIFT_REG <= input_widthCounter_232_0;
					local_lvm_var__u7_NO_SHIFT_REG <= input_var__u7_0;
					local_lvm_var__u8_NO_SHIFT_REG <= input_var__u8_0;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_0;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_0;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				end
			end

			1'b1:
			begin
				if (merge_node_valid_in_1_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_cmp48_NO_SHIFT_REG <= input_cmp48_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_1_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe2_NO_SHIFT_REG <= input_c0_exe2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp2122_NO_SHIFT_REG <= input_cmp2122_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u6_NO_SHIFT_REG <= input_var__u6_1_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision77_xor_NO_SHIFT_REG <= input__phi_decision77_xor_1_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision76_xor_or_NO_SHIFT_REG <= input__phi_decision76_xor_or_1_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_049_NO_SHIFT_REG <= input_channelCounter_049_1_staging_reg_NO_SHIFT_REG;
					local_lvm_mul50_NO_SHIFT_REG <= input_mul50_1_staging_reg_NO_SHIFT_REG;
					local_lvm_mul_NO_SHIFT_REG <= input_mul_1_staging_reg_NO_SHIFT_REG;
					local_lvm_heightCounter_141_NO_SHIFT_REG <= input_heightCounter_141_1_staging_reg_NO_SHIFT_REG;
					local_lvm_c3_exe1_NO_SHIFT_REG <= input_c3_exe1_1_staging_reg_NO_SHIFT_REG;
					local_lvm_c3_exe2_NO_SHIFT_REG <= input_c3_exe2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_c1_exe1_NO_SHIFT_REG <= input_c1_exe1_1_staging_reg_NO_SHIFT_REG;
					local_lvm_widthCounter_232_NO_SHIFT_REG <= input_widthCounter_232_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u7_NO_SHIFT_REG <= input_var__u7_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u8_NO_SHIFT_REG <= input_var__u8_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_cmp48_NO_SHIFT_REG <= input_cmp48_1;
					local_lvm_var__NO_SHIFT_REG <= input_var__1;
					local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_1;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_1;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_1;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_1;
					local_lvm_c0_exe2_NO_SHIFT_REG <= input_c0_exe2_1;
					local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_1;
					local_lvm_cmp2122_NO_SHIFT_REG <= input_cmp2122_1;
					local_lvm_var__u6_NO_SHIFT_REG <= input_var__u6_1;
					local_lvm__phi_decision77_xor_NO_SHIFT_REG <= input__phi_decision77_xor_1;
					local_lvm__phi_decision76_xor_or_NO_SHIFT_REG <= input__phi_decision76_xor_or_1;
					local_lvm_channelCounter_049_NO_SHIFT_REG <= input_channelCounter_049_1;
					local_lvm_mul50_NO_SHIFT_REG <= input_mul50_1;
					local_lvm_mul_NO_SHIFT_REG <= input_mul_1;
					local_lvm_heightCounter_141_NO_SHIFT_REG <= input_heightCounter_141_1;
					local_lvm_c3_exe1_NO_SHIFT_REG <= input_c3_exe1_1;
					local_lvm_c3_exe2_NO_SHIFT_REG <= input_c3_exe2_1;
					local_lvm_c1_exe1_NO_SHIFT_REG <= input_c1_exe1_1;
					local_lvm_widthCounter_232_NO_SHIFT_REG <= input_widthCounter_232_1;
					local_lvm_var__u7_NO_SHIFT_REG <= input_var__u7_1;
					local_lvm_var__u8_NO_SHIFT_REG <= input_var__u8_1;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_1;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_1;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in))
			begin
				merge_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg lvb_cmp48_reg_NO_SHIFT_REG;
 reg lvb_var__reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_8_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c0_exe1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c0_exe2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_2_reg_NO_SHIFT_REG;
 reg lvb_cmp2122_reg_NO_SHIFT_REG;
 reg lvb_var__u6_reg_NO_SHIFT_REG;
 reg lvb__phi_decision77_xor_reg_NO_SHIFT_REG;
 reg lvb__phi_decision76_xor_or_reg_NO_SHIFT_REG;
 reg [31:0] lvb_channelCounter_049_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul50_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul_reg_NO_SHIFT_REG;
 reg [31:0] lvb_heightCounter_141_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c3_exe1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c3_exe2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c1_exe1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_widthCounter_232_reg_NO_SHIFT_REG;
 reg [31:0] lvb_var__u7_reg_NO_SHIFT_REG;
 reg [31:0] lvb_var__u8_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = merge_node_valid_out_NO_SHIFT_REG;
assign branch_var__output_regs_ready = (~(stall_in) | ~(branch_node_valid_out_NO_SHIFT_REG));
assign merge_node_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_cmp48 = lvb_cmp48_reg_NO_SHIFT_REG;
assign lvb_var_ = lvb_var__reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_8 = lvb_memcoalesce_param_extrValue_8_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_5 = lvb_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6 = lvb_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG;
assign lvb_c0_exe1 = lvb_c0_exe1_reg_NO_SHIFT_REG;
assign lvb_c0_exe2 = lvb_c0_exe2_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_2 = lvb_memcoalesce_param_extrValue_2_reg_NO_SHIFT_REG;
assign lvb_cmp2122 = lvb_cmp2122_reg_NO_SHIFT_REG;
assign lvb_var__u6 = lvb_var__u6_reg_NO_SHIFT_REG;
assign lvb__phi_decision77_xor = lvb__phi_decision77_xor_reg_NO_SHIFT_REG;
assign lvb__phi_decision76_xor_or = lvb__phi_decision76_xor_or_reg_NO_SHIFT_REG;
assign lvb_channelCounter_049 = lvb_channelCounter_049_reg_NO_SHIFT_REG;
assign lvb_mul50 = lvb_mul50_reg_NO_SHIFT_REG;
assign lvb_mul = lvb_mul_reg_NO_SHIFT_REG;
assign lvb_heightCounter_141 = lvb_heightCounter_141_reg_NO_SHIFT_REG;
assign lvb_c3_exe1 = lvb_c3_exe1_reg_NO_SHIFT_REG;
assign lvb_c3_exe2 = lvb_c3_exe2_reg_NO_SHIFT_REG;
assign lvb_c1_exe1 = lvb_c1_exe1_reg_NO_SHIFT_REG;
assign lvb_widthCounter_232 = lvb_widthCounter_232_reg_NO_SHIFT_REG;
assign lvb_var__u7 = lvb_var__u7_reg_NO_SHIFT_REG;
assign lvb_var__u8 = lvb_var__u8_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0 = lvb_input_global_id_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1 = lvb_input_global_id_1_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2 = lvb_input_global_id_2_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id = lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;
assign combined_branch_stall_in_signal = stall_in;
assign valid_out = branch_node_valid_out_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
		lvb_cmp48_reg_NO_SHIFT_REG <= 'x;
		lvb_var__reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_8_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG <= 'x;
		lvb_c0_exe1_reg_NO_SHIFT_REG <= 'x;
		lvb_c0_exe2_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_2_reg_NO_SHIFT_REG <= 'x;
		lvb_cmp2122_reg_NO_SHIFT_REG <= 'x;
		lvb_var__u6_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision77_xor_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision76_xor_or_reg_NO_SHIFT_REG <= 'x;
		lvb_channelCounter_049_reg_NO_SHIFT_REG <= 'x;
		lvb_mul50_reg_NO_SHIFT_REG <= 'x;
		lvb_mul_reg_NO_SHIFT_REG <= 'x;
		lvb_heightCounter_141_reg_NO_SHIFT_REG <= 'x;
		lvb_c3_exe1_reg_NO_SHIFT_REG <= 'x;
		lvb_c3_exe2_reg_NO_SHIFT_REG <= 'x;
		lvb_c1_exe1_reg_NO_SHIFT_REG <= 'x;
		lvb_widthCounter_232_reg_NO_SHIFT_REG <= 'x;
		lvb_var__u7_reg_NO_SHIFT_REG <= 'x;
		lvb_var__u8_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_cmp48_reg_NO_SHIFT_REG <= local_lvm_cmp48_NO_SHIFT_REG;
			lvb_var__reg_NO_SHIFT_REG <= local_lvm_var__NO_SHIFT_REG;
			lvb_memcoalesce_param_extrValue_8_reg_NO_SHIFT_REG <= local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG;
			lvb_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG <= local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
			lvb_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG <= local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
			lvb_c0_exe1_reg_NO_SHIFT_REG <= local_lvm_c0_exe1_NO_SHIFT_REG;
			lvb_c0_exe2_reg_NO_SHIFT_REG <= local_lvm_c0_exe2_NO_SHIFT_REG;
			lvb_memcoalesce_param_extrValue_2_reg_NO_SHIFT_REG <= local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG;
			lvb_cmp2122_reg_NO_SHIFT_REG <= local_lvm_cmp2122_NO_SHIFT_REG;
			lvb_var__u6_reg_NO_SHIFT_REG <= local_lvm_var__u6_NO_SHIFT_REG;
			lvb__phi_decision77_xor_reg_NO_SHIFT_REG <= local_lvm__phi_decision77_xor_NO_SHIFT_REG;
			lvb__phi_decision76_xor_or_reg_NO_SHIFT_REG <= local_lvm__phi_decision76_xor_or_NO_SHIFT_REG;
			lvb_channelCounter_049_reg_NO_SHIFT_REG <= local_lvm_channelCounter_049_NO_SHIFT_REG;
			lvb_mul50_reg_NO_SHIFT_REG <= local_lvm_mul50_NO_SHIFT_REG;
			lvb_mul_reg_NO_SHIFT_REG <= local_lvm_mul_NO_SHIFT_REG;
			lvb_heightCounter_141_reg_NO_SHIFT_REG <= local_lvm_heightCounter_141_NO_SHIFT_REG;
			lvb_c3_exe1_reg_NO_SHIFT_REG <= local_lvm_c3_exe1_NO_SHIFT_REG;
			lvb_c3_exe2_reg_NO_SHIFT_REG <= local_lvm_c3_exe2_NO_SHIFT_REG;
			lvb_c1_exe1_reg_NO_SHIFT_REG <= local_lvm_c1_exe1_NO_SHIFT_REG;
			lvb_widthCounter_232_reg_NO_SHIFT_REG <= local_lvm_widthCounter_232_NO_SHIFT_REG;
			lvb_var__u7_reg_NO_SHIFT_REG <= local_lvm_var__u7_NO_SHIFT_REG;
			lvb_var__u8_reg_NO_SHIFT_REG <= local_lvm_var__u8_NO_SHIFT_REG;
			lvb_input_global_id_0_reg_NO_SHIFT_REG <= local_lvm_input_global_id_0_NO_SHIFT_REG;
			lvb_input_global_id_1_reg_NO_SHIFT_REG <= local_lvm_input_global_id_1_NO_SHIFT_REG;
			lvb_input_global_id_2_reg_NO_SHIFT_REG <= local_lvm_input_global_id_2_NO_SHIFT_REG;
			lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module poolingLayer_basic_block_5
	(
		input 		clock,
		input 		resetn,
		input [63:0] 		input_inputFeatureMap,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_0,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_1,
		input 		valid_in_0,
		output 		stall_out_0,
		input 		input_cmp48_0,
		input 		input_var__0,
		input [31:0] 		input_memcoalesce_param_extrValue_8_0,
		input [31:0] 		input_memcoalesce_param_extrValue_5_0,
		input [31:0] 		input_memcoalesce_param_extrValue_6_0,
		input [31:0] 		input_c0_exe1_0,
		input [31:0] 		input_c0_exe2_0,
		input [31:0] 		input_memcoalesce_param_extrValue_2_0,
		input 		input_cmp2122_0,
		input 		input_var__u9_0,
		input 		input__phi_decision77_xor_0,
		input 		input__phi_decision76_xor_or_0,
		input [31:0] 		input_channelCounter_049_0,
		input [31:0] 		input_mul50_0,
		input [31:0] 		input_mul_0,
		input [31:0] 		input_heightCounter_141_0,
		input [31:0] 		input_c3_exe1_0,
		input [31:0] 		input_c3_exe2_0,
		input [31:0] 		input_c1_exe1_0,
		input [31:0] 		input_widthCounter_232_0,
		input [31:0] 		input_var__u10_0,
		input [31:0] 		input_var__u11_0,
		input [31:0] 		input_i_325_0,
		input [31:0] 		input_j_419_0,
		input [31:0] 		input_maxValue_418_0,
		input [31:0] 		input_global_id_0_0,
		input [31:0] 		input_global_id_1_0,
		input [31:0] 		input_global_id_2_0,
		input [31:0] 		input_acl_hw_wg_id_0,
		input 		valid_in_1,
		output 		stall_out_1,
		input 		input_cmp48_1,
		input 		input_var__1,
		input [31:0] 		input_memcoalesce_param_extrValue_8_1,
		input [31:0] 		input_memcoalesce_param_extrValue_5_1,
		input [31:0] 		input_memcoalesce_param_extrValue_6_1,
		input [31:0] 		input_c0_exe1_1,
		input [31:0] 		input_c0_exe2_1,
		input [31:0] 		input_memcoalesce_param_extrValue_2_1,
		input 		input_cmp2122_1,
		input 		input_var__u9_1,
		input 		input__phi_decision77_xor_1,
		input 		input__phi_decision76_xor_or_1,
		input [31:0] 		input_channelCounter_049_1,
		input [31:0] 		input_mul50_1,
		input [31:0] 		input_mul_1,
		input [31:0] 		input_heightCounter_141_1,
		input [31:0] 		input_c3_exe1_1,
		input [31:0] 		input_c3_exe2_1,
		input [31:0] 		input_c1_exe1_1,
		input [31:0] 		input_widthCounter_232_1,
		input [31:0] 		input_var__u10_1,
		input [31:0] 		input_var__u11_1,
		input [31:0] 		input_i_325_1,
		input [31:0] 		input_j_419_1,
		input [31:0] 		input_maxValue_418_1,
		input [31:0] 		input_global_id_0_1,
		input [31:0] 		input_global_id_1_1,
		input [31:0] 		input_global_id_2_1,
		input [31:0] 		input_acl_hw_wg_id_1,
		output 		valid_out_0,
		input 		stall_in_0,
		output 		lvb_cmp48_0,
		output 		lvb_var__0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_8_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_5_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6_0,
		output [31:0] 		lvb_c0_exe1_0,
		output [31:0] 		lvb_c0_exe2_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_2_0,
		output 		lvb_cmp2122_0,
		output 		lvb_var__u9_0,
		output 		lvb__phi_decision77_xor_0,
		output 		lvb__phi_decision76_xor_or_0,
		output [31:0] 		lvb_channelCounter_049_0,
		output [31:0] 		lvb_mul50_0,
		output [31:0] 		lvb_mul_0,
		output [31:0] 		lvb_heightCounter_141_0,
		output [31:0] 		lvb_c3_exe1_0,
		output [31:0] 		lvb_c3_exe2_0,
		output [31:0] 		lvb_c1_exe1_0,
		output [31:0] 		lvb_widthCounter_232_0,
		output [31:0] 		lvb_var__u10_0,
		output [31:0] 		lvb_var__u11_0,
		output [31:0] 		lvb_bb5_j_419_LC_InnerPHI_0,
		output [31:0] 		lvb_bb5_i_325_LC_OuterPHI_0,
		output [31:0] 		lvb_bb5_maxValue_4__0,
		output [31:0] 		lvb_input_global_id_0_0,
		output [31:0] 		lvb_input_global_id_1_0,
		output [31:0] 		lvb_input_global_id_2_0,
		output [31:0] 		lvb_input_acl_hw_wg_id_0,
		output 		valid_out_1,
		input 		stall_in_1,
		output 		lvb_cmp48_1,
		output 		lvb_var__1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_8_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_5_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6_1,
		output [31:0] 		lvb_c0_exe1_1,
		output [31:0] 		lvb_c0_exe2_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_2_1,
		output 		lvb_cmp2122_1,
		output 		lvb_var__u9_1,
		output 		lvb__phi_decision77_xor_1,
		output 		lvb__phi_decision76_xor_or_1,
		output [31:0] 		lvb_channelCounter_049_1,
		output [31:0] 		lvb_mul50_1,
		output [31:0] 		lvb_mul_1,
		output [31:0] 		lvb_heightCounter_141_1,
		output [31:0] 		lvb_c3_exe1_1,
		output [31:0] 		lvb_c3_exe2_1,
		output [31:0] 		lvb_c1_exe1_1,
		output [31:0] 		lvb_widthCounter_232_1,
		output [31:0] 		lvb_var__u10_1,
		output [31:0] 		lvb_var__u11_1,
		output [31:0] 		lvb_bb5_j_419_LC_InnerPHI_1,
		output [31:0] 		lvb_bb5_i_325_LC_OuterPHI_1,
		output [31:0] 		lvb_bb5_maxValue_4__1,
		output [31:0] 		lvb_input_global_id_0_1,
		output [31:0] 		lvb_input_global_id_1_1,
		output [31:0] 		lvb_input_global_id_2_1,
		output [31:0] 		lvb_input_acl_hw_wg_id_1,
		input [31:0] 		workgroup_size,
		input 		start,
		output 		avm_local_bb5_ld__enable,
		input [511:0] 		avm_local_bb5_ld__readdata,
		input 		avm_local_bb5_ld__readdatavalid,
		input 		avm_local_bb5_ld__waitrequest,
		output [31:0] 		avm_local_bb5_ld__address,
		output 		avm_local_bb5_ld__read,
		output 		avm_local_bb5_ld__write,
		input 		avm_local_bb5_ld__writeack,
		output [511:0] 		avm_local_bb5_ld__writedata,
		output [63:0] 		avm_local_bb5_ld__byteenable,
		output [4:0] 		avm_local_bb5_ld__burstcount,
		output 		local_bb5_ld__active,
		input 		clock2x
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((valid_in_0 & valid_in_1) & ~((stall_out_0 | stall_out_1)));
assign _exit = ((valid_out_0 & valid_out_1) & ~((stall_in_0 | stall_in_1)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_node_stall_in_4;
 reg merge_node_valid_out_4_NO_SHIFT_REG;
wire merge_node_stall_in_5;
 reg merge_node_valid_out_5_NO_SHIFT_REG;
wire merge_node_stall_in_6;
 reg merge_node_valid_out_6_NO_SHIFT_REG;
wire merge_node_stall_in_7;
 reg merge_node_valid_out_7_NO_SHIFT_REG;
wire merge_node_stall_in_8;
 reg merge_node_valid_out_8_NO_SHIFT_REG;
wire merge_node_stall_in_9;
 reg merge_node_valid_out_9_NO_SHIFT_REG;
wire merge_node_stall_in_10;
 reg merge_node_valid_out_10_NO_SHIFT_REG;
wire merge_node_stall_in_11;
 reg merge_node_valid_out_11_NO_SHIFT_REG;
wire merge_node_stall_in_12;
 reg merge_node_valid_out_12_NO_SHIFT_REG;
wire merge_node_stall_in_13;
 reg merge_node_valid_out_13_NO_SHIFT_REG;
wire merge_node_stall_in_14;
 reg merge_node_valid_out_14_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
 reg input_cmp48_0_staging_reg_NO_SHIFT_REG;
 reg input_var__0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_8_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe1_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe2_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_2_0_staging_reg_NO_SHIFT_REG;
 reg input_cmp2122_0_staging_reg_NO_SHIFT_REG;
 reg input_var__u9_0_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision77_xor_0_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision76_xor_or_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_049_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul50_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_heightCounter_141_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c3_exe1_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c3_exe2_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c1_exe1_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_widthCounter_232_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__u10_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__u11_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_i_325_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_j_419_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_maxValue_418_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
 reg local_lvm_cmp48_NO_SHIFT_REG;
 reg local_lvm_var__NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
 reg [31:0] local_lvm_c0_exe1_NO_SHIFT_REG;
 reg [31:0] local_lvm_c0_exe2_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG;
 reg local_lvm_cmp2122_NO_SHIFT_REG;
 reg local_lvm_var__u9_NO_SHIFT_REG;
 reg local_lvm__phi_decision77_xor_NO_SHIFT_REG;
 reg local_lvm__phi_decision76_xor_or_NO_SHIFT_REG;
 reg [31:0] local_lvm_channelCounter_049_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul50_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul_NO_SHIFT_REG;
 reg [31:0] local_lvm_heightCounter_141_NO_SHIFT_REG;
 reg [31:0] local_lvm_c3_exe1_NO_SHIFT_REG;
 reg [31:0] local_lvm_c3_exe2_NO_SHIFT_REG;
 reg [31:0] local_lvm_c1_exe1_NO_SHIFT_REG;
 reg [31:0] local_lvm_widthCounter_232_NO_SHIFT_REG;
 reg [31:0] local_lvm_var__u10_NO_SHIFT_REG;
 reg [31:0] local_lvm_var__u11_NO_SHIFT_REG;
 reg [31:0] local_lvm_i_325_NO_SHIFT_REG;
 reg [31:0] local_lvm_j_419_NO_SHIFT_REG;
 reg [31:0] local_lvm_maxValue_418_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_0_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;
 reg input_cmp48_1_staging_reg_NO_SHIFT_REG;
 reg input_var__1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_8_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe1_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe2_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_2_1_staging_reg_NO_SHIFT_REG;
 reg input_cmp2122_1_staging_reg_NO_SHIFT_REG;
 reg input_var__u9_1_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision77_xor_1_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision76_xor_or_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_049_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul50_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_heightCounter_141_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c3_exe1_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c3_exe2_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c1_exe1_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_widthCounter_232_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__u10_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__u11_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_i_325_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_j_419_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_maxValue_418_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG) | (merge_node_stall_in_4 & merge_node_valid_out_4_NO_SHIFT_REG) | (merge_node_stall_in_5 & merge_node_valid_out_5_NO_SHIFT_REG) | (merge_node_stall_in_6 & merge_node_valid_out_6_NO_SHIFT_REG) | (merge_node_stall_in_7 & merge_node_valid_out_7_NO_SHIFT_REG) | (merge_node_stall_in_8 & merge_node_valid_out_8_NO_SHIFT_REG) | (merge_node_stall_in_9 & merge_node_valid_out_9_NO_SHIFT_REG) | (merge_node_stall_in_10 & merge_node_valid_out_10_NO_SHIFT_REG) | (merge_node_stall_in_11 & merge_node_valid_out_11_NO_SHIFT_REG) | (merge_node_stall_in_12 & merge_node_valid_out_12_NO_SHIFT_REG) | (merge_node_stall_in_13 & merge_node_valid_out_13_NO_SHIFT_REG) | (merge_node_stall_in_14 & merge_node_valid_out_14_NO_SHIFT_REG));
assign stall_out_0 = merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
assign stall_out_1 = merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_0_staging_reg_NO_SHIFT_REG | valid_in_0))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		if ((merge_node_valid_in_1_staging_reg_NO_SHIFT_REG | valid_in_1))
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b1;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
		end
		else
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b0;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_cmp48_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_8_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe1_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp2122_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u9_0_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision77_xor_0_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision76_xor_or_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_049_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul50_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_heightCounter_141_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_c3_exe1_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_c3_exe2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_c1_exe1_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_widthCounter_232_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u10_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u11_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_i_325_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_j_419_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_maxValue_418_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_0_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		input_cmp48_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_8_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe1_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp2122_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u9_1_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision77_xor_1_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision76_xor_or_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_049_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul50_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_heightCounter_141_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_c3_exe1_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_c3_exe2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_c1_exe1_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_widthCounter_232_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u10_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u11_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_i_325_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_j_419_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_maxValue_418_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_0_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_0_staging_reg_NO_SHIFT_REG))
			begin
				input_cmp48_0_staging_reg_NO_SHIFT_REG <= input_cmp48_0;
				input_var__0_staging_reg_NO_SHIFT_REG <= input_var__0;
				input_memcoalesce_param_extrValue_8_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_0;
				input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_0;
				input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_0;
				input_c0_exe1_0_staging_reg_NO_SHIFT_REG <= input_c0_exe1_0;
				input_c0_exe2_0_staging_reg_NO_SHIFT_REG <= input_c0_exe2_0;
				input_memcoalesce_param_extrValue_2_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_0;
				input_cmp2122_0_staging_reg_NO_SHIFT_REG <= input_cmp2122_0;
				input_var__u9_0_staging_reg_NO_SHIFT_REG <= input_var__u9_0;
				input__phi_decision77_xor_0_staging_reg_NO_SHIFT_REG <= input__phi_decision77_xor_0;
				input__phi_decision76_xor_or_0_staging_reg_NO_SHIFT_REG <= input__phi_decision76_xor_or_0;
				input_channelCounter_049_0_staging_reg_NO_SHIFT_REG <= input_channelCounter_049_0;
				input_mul50_0_staging_reg_NO_SHIFT_REG <= input_mul50_0;
				input_mul_0_staging_reg_NO_SHIFT_REG <= input_mul_0;
				input_heightCounter_141_0_staging_reg_NO_SHIFT_REG <= input_heightCounter_141_0;
				input_c3_exe1_0_staging_reg_NO_SHIFT_REG <= input_c3_exe1_0;
				input_c3_exe2_0_staging_reg_NO_SHIFT_REG <= input_c3_exe2_0;
				input_c1_exe1_0_staging_reg_NO_SHIFT_REG <= input_c1_exe1_0;
				input_widthCounter_232_0_staging_reg_NO_SHIFT_REG <= input_widthCounter_232_0;
				input_var__u10_0_staging_reg_NO_SHIFT_REG <= input_var__u10_0;
				input_var__u11_0_staging_reg_NO_SHIFT_REG <= input_var__u11_0;
				input_i_325_0_staging_reg_NO_SHIFT_REG <= input_i_325_0;
				input_j_419_0_staging_reg_NO_SHIFT_REG <= input_j_419_0;
				input_maxValue_418_0_staging_reg_NO_SHIFT_REG <= input_maxValue_418_0;
				input_global_id_0_0_staging_reg_NO_SHIFT_REG <= input_global_id_0_0;
				input_global_id_1_0_staging_reg_NO_SHIFT_REG <= input_global_id_1_0;
				input_global_id_2_0_staging_reg_NO_SHIFT_REG <= input_global_id_2_0;
				input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= valid_in_0;
			end
		end
		else
		begin
			merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
		if (((merge_block_selector_NO_SHIFT_REG != 1'b1) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_1_staging_reg_NO_SHIFT_REG))
			begin
				input_cmp48_1_staging_reg_NO_SHIFT_REG <= input_cmp48_1;
				input_var__1_staging_reg_NO_SHIFT_REG <= input_var__1;
				input_memcoalesce_param_extrValue_8_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_1;
				input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_1;
				input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_1;
				input_c0_exe1_1_staging_reg_NO_SHIFT_REG <= input_c0_exe1_1;
				input_c0_exe2_1_staging_reg_NO_SHIFT_REG <= input_c0_exe2_1;
				input_memcoalesce_param_extrValue_2_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_1;
				input_cmp2122_1_staging_reg_NO_SHIFT_REG <= input_cmp2122_1;
				input_var__u9_1_staging_reg_NO_SHIFT_REG <= input_var__u9_1;
				input__phi_decision77_xor_1_staging_reg_NO_SHIFT_REG <= input__phi_decision77_xor_1;
				input__phi_decision76_xor_or_1_staging_reg_NO_SHIFT_REG <= input__phi_decision76_xor_or_1;
				input_channelCounter_049_1_staging_reg_NO_SHIFT_REG <= input_channelCounter_049_1;
				input_mul50_1_staging_reg_NO_SHIFT_REG <= input_mul50_1;
				input_mul_1_staging_reg_NO_SHIFT_REG <= input_mul_1;
				input_heightCounter_141_1_staging_reg_NO_SHIFT_REG <= input_heightCounter_141_1;
				input_c3_exe1_1_staging_reg_NO_SHIFT_REG <= input_c3_exe1_1;
				input_c3_exe2_1_staging_reg_NO_SHIFT_REG <= input_c3_exe2_1;
				input_c1_exe1_1_staging_reg_NO_SHIFT_REG <= input_c1_exe1_1;
				input_widthCounter_232_1_staging_reg_NO_SHIFT_REG <= input_widthCounter_232_1;
				input_var__u10_1_staging_reg_NO_SHIFT_REG <= input_var__u10_1;
				input_var__u11_1_staging_reg_NO_SHIFT_REG <= input_var__u11_1;
				input_i_325_1_staging_reg_NO_SHIFT_REG <= input_i_325_1;
				input_j_419_1_staging_reg_NO_SHIFT_REG <= input_j_419_1;
				input_maxValue_418_1_staging_reg_NO_SHIFT_REG <= input_maxValue_418_1;
				input_global_id_0_1_staging_reg_NO_SHIFT_REG <= input_global_id_0_1;
				input_global_id_1_1_staging_reg_NO_SHIFT_REG <= input_global_id_1_1;
				input_global_id_2_1_staging_reg_NO_SHIFT_REG <= input_global_id_2_1;
				input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= valid_in_1;
			end
		end
		else
		begin
			merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_0_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_cmp48_NO_SHIFT_REG <= input_cmp48_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_0_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe2_NO_SHIFT_REG <= input_c0_exe2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp2122_NO_SHIFT_REG <= input_cmp2122_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u9_NO_SHIFT_REG <= input_var__u9_0_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision77_xor_NO_SHIFT_REG <= input__phi_decision77_xor_0_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision76_xor_or_NO_SHIFT_REG <= input__phi_decision76_xor_or_0_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_049_NO_SHIFT_REG <= input_channelCounter_049_0_staging_reg_NO_SHIFT_REG;
					local_lvm_mul50_NO_SHIFT_REG <= input_mul50_0_staging_reg_NO_SHIFT_REG;
					local_lvm_mul_NO_SHIFT_REG <= input_mul_0_staging_reg_NO_SHIFT_REG;
					local_lvm_heightCounter_141_NO_SHIFT_REG <= input_heightCounter_141_0_staging_reg_NO_SHIFT_REG;
					local_lvm_c3_exe1_NO_SHIFT_REG <= input_c3_exe1_0_staging_reg_NO_SHIFT_REG;
					local_lvm_c3_exe2_NO_SHIFT_REG <= input_c3_exe2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_c1_exe1_NO_SHIFT_REG <= input_c1_exe1_0_staging_reg_NO_SHIFT_REG;
					local_lvm_widthCounter_232_NO_SHIFT_REG <= input_widthCounter_232_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u10_NO_SHIFT_REG <= input_var__u10_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u11_NO_SHIFT_REG <= input_var__u11_0_staging_reg_NO_SHIFT_REG;
					local_lvm_i_325_NO_SHIFT_REG <= input_i_325_0_staging_reg_NO_SHIFT_REG;
					local_lvm_j_419_NO_SHIFT_REG <= input_j_419_0_staging_reg_NO_SHIFT_REG;
					local_lvm_maxValue_418_NO_SHIFT_REG <= input_maxValue_418_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_cmp48_NO_SHIFT_REG <= input_cmp48_0;
					local_lvm_var__NO_SHIFT_REG <= input_var__0;
					local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_0;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_0;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_0;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_0;
					local_lvm_c0_exe2_NO_SHIFT_REG <= input_c0_exe2_0;
					local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_0;
					local_lvm_cmp2122_NO_SHIFT_REG <= input_cmp2122_0;
					local_lvm_var__u9_NO_SHIFT_REG <= input_var__u9_0;
					local_lvm__phi_decision77_xor_NO_SHIFT_REG <= input__phi_decision77_xor_0;
					local_lvm__phi_decision76_xor_or_NO_SHIFT_REG <= input__phi_decision76_xor_or_0;
					local_lvm_channelCounter_049_NO_SHIFT_REG <= input_channelCounter_049_0;
					local_lvm_mul50_NO_SHIFT_REG <= input_mul50_0;
					local_lvm_mul_NO_SHIFT_REG <= input_mul_0;
					local_lvm_heightCounter_141_NO_SHIFT_REG <= input_heightCounter_141_0;
					local_lvm_c3_exe1_NO_SHIFT_REG <= input_c3_exe1_0;
					local_lvm_c3_exe2_NO_SHIFT_REG <= input_c3_exe2_0;
					local_lvm_c1_exe1_NO_SHIFT_REG <= input_c1_exe1_0;
					local_lvm_widthCounter_232_NO_SHIFT_REG <= input_widthCounter_232_0;
					local_lvm_var__u10_NO_SHIFT_REG <= input_var__u10_0;
					local_lvm_var__u11_NO_SHIFT_REG <= input_var__u11_0;
					local_lvm_i_325_NO_SHIFT_REG <= input_i_325_0;
					local_lvm_j_419_NO_SHIFT_REG <= input_j_419_0;
					local_lvm_maxValue_418_NO_SHIFT_REG <= input_maxValue_418_0;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_0;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_0;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				end
			end

			1'b1:
			begin
				if (merge_node_valid_in_1_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_cmp48_NO_SHIFT_REG <= input_cmp48_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_1_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe2_NO_SHIFT_REG <= input_c0_exe2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp2122_NO_SHIFT_REG <= input_cmp2122_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u9_NO_SHIFT_REG <= input_var__u9_1_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision77_xor_NO_SHIFT_REG <= input__phi_decision77_xor_1_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision76_xor_or_NO_SHIFT_REG <= input__phi_decision76_xor_or_1_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_049_NO_SHIFT_REG <= input_channelCounter_049_1_staging_reg_NO_SHIFT_REG;
					local_lvm_mul50_NO_SHIFT_REG <= input_mul50_1_staging_reg_NO_SHIFT_REG;
					local_lvm_mul_NO_SHIFT_REG <= input_mul_1_staging_reg_NO_SHIFT_REG;
					local_lvm_heightCounter_141_NO_SHIFT_REG <= input_heightCounter_141_1_staging_reg_NO_SHIFT_REG;
					local_lvm_c3_exe1_NO_SHIFT_REG <= input_c3_exe1_1_staging_reg_NO_SHIFT_REG;
					local_lvm_c3_exe2_NO_SHIFT_REG <= input_c3_exe2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_c1_exe1_NO_SHIFT_REG <= input_c1_exe1_1_staging_reg_NO_SHIFT_REG;
					local_lvm_widthCounter_232_NO_SHIFT_REG <= input_widthCounter_232_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u10_NO_SHIFT_REG <= input_var__u10_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u11_NO_SHIFT_REG <= input_var__u11_1_staging_reg_NO_SHIFT_REG;
					local_lvm_i_325_NO_SHIFT_REG <= input_i_325_1_staging_reg_NO_SHIFT_REG;
					local_lvm_j_419_NO_SHIFT_REG <= input_j_419_1_staging_reg_NO_SHIFT_REG;
					local_lvm_maxValue_418_NO_SHIFT_REG <= input_maxValue_418_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_cmp48_NO_SHIFT_REG <= input_cmp48_1;
					local_lvm_var__NO_SHIFT_REG <= input_var__1;
					local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_1;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_1;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_1;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_1;
					local_lvm_c0_exe2_NO_SHIFT_REG <= input_c0_exe2_1;
					local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_1;
					local_lvm_cmp2122_NO_SHIFT_REG <= input_cmp2122_1;
					local_lvm_var__u9_NO_SHIFT_REG <= input_var__u9_1;
					local_lvm__phi_decision77_xor_NO_SHIFT_REG <= input__phi_decision77_xor_1;
					local_lvm__phi_decision76_xor_or_NO_SHIFT_REG <= input__phi_decision76_xor_or_1;
					local_lvm_channelCounter_049_NO_SHIFT_REG <= input_channelCounter_049_1;
					local_lvm_mul50_NO_SHIFT_REG <= input_mul50_1;
					local_lvm_mul_NO_SHIFT_REG <= input_mul_1;
					local_lvm_heightCounter_141_NO_SHIFT_REG <= input_heightCounter_141_1;
					local_lvm_c3_exe1_NO_SHIFT_REG <= input_c3_exe1_1;
					local_lvm_c3_exe2_NO_SHIFT_REG <= input_c3_exe2_1;
					local_lvm_c1_exe1_NO_SHIFT_REG <= input_c1_exe1_1;
					local_lvm_widthCounter_232_NO_SHIFT_REG <= input_widthCounter_232_1;
					local_lvm_var__u10_NO_SHIFT_REG <= input_var__u10_1;
					local_lvm_var__u11_NO_SHIFT_REG <= input_var__u11_1;
					local_lvm_i_325_NO_SHIFT_REG <= input_i_325_1;
					local_lvm_j_419_NO_SHIFT_REG <= input_j_419_1;
					local_lvm_maxValue_418_NO_SHIFT_REG <= input_maxValue_418_1;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_1;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_1;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_5_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_6_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_7_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_8_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_9_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_10_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_11_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_12_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_13_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_14_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_4_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_5_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_6_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_7_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_8_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_9_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_10_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_11_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_12_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_13_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_14_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_4))
			begin
				merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_5))
			begin
				merge_node_valid_out_5_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_6))
			begin
				merge_node_valid_out_6_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_7))
			begin
				merge_node_valid_out_7_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_8))
			begin
				merge_node_valid_out_8_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_9))
			begin
				merge_node_valid_out_9_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_10))
			begin
				merge_node_valid_out_10_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_11))
			begin
				merge_node_valid_out_11_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_12))
			begin
				merge_node_valid_out_12_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_13))
			begin
				merge_node_valid_out_13_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_14))
			begin
				merge_node_valid_out_14_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_c1_eni129_valid_out;
wire local_bb5_c1_eni129_stall_in;
wire local_bb5_c1_eni129_inputs_ready;
wire local_bb5_c1_eni129_stall_local;
wire [223:0] local_bb5_c1_eni129;

assign local_bb5_c1_eni129_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb5_c1_eni129[31:0] = 32'bx;
assign local_bb5_c1_eni129[63:32] = local_lvm_mul_NO_SHIFT_REG;
assign local_bb5_c1_eni129[223:64] = 160'bx;
assign local_bb5_c1_eni129_valid_out = local_bb5_c1_eni129_inputs_ready;
assign local_bb5_c1_eni129_stall_local = local_bb5_c1_eni129_stall_in;
assign merge_node_stall_in_0 = (|local_bb5_c1_eni129_stall_local);

// Register node:
//  * latency = 168
//  * capacity = 168
 logic rnode_1to169_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to169_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to169_input_acl_hw_wg_id_0_NO_SHIFT_REG;
 logic rnode_1to169_input_acl_hw_wg_id_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to169_input_acl_hw_wg_id_0_reg_169_NO_SHIFT_REG;
 logic rnode_1to169_input_acl_hw_wg_id_0_valid_out_reg_169_NO_SHIFT_REG;
 logic rnode_1to169_input_acl_hw_wg_id_0_stall_in_reg_169_NO_SHIFT_REG;
 logic rnode_1to169_input_acl_hw_wg_id_0_stall_out_reg_169_NO_SHIFT_REG;

acl_data_fifo rnode_1to169_input_acl_hw_wg_id_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to169_input_acl_hw_wg_id_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to169_input_acl_hw_wg_id_0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rnode_1to169_input_acl_hw_wg_id_0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rnode_1to169_input_acl_hw_wg_id_0_stall_out_reg_169_NO_SHIFT_REG),
	.data_in(local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG),
	.data_out(rnode_1to169_input_acl_hw_wg_id_0_reg_169_NO_SHIFT_REG)
);

defparam rnode_1to169_input_acl_hw_wg_id_0_reg_169_fifo.DEPTH = 169;
defparam rnode_1to169_input_acl_hw_wg_id_0_reg_169_fifo.DATA_WIDTH = 32;
defparam rnode_1to169_input_acl_hw_wg_id_0_reg_169_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to169_input_acl_hw_wg_id_0_reg_169_fifo.IMPL = "ram";

assign rnode_1to169_input_acl_hw_wg_id_0_reg_169_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_1_NO_SHIFT_REG;
assign merge_node_stall_in_1 = rnode_1to169_input_acl_hw_wg_id_0_stall_out_reg_169_NO_SHIFT_REG;
assign rnode_1to169_input_acl_hw_wg_id_0_NO_SHIFT_REG = rnode_1to169_input_acl_hw_wg_id_0_reg_169_NO_SHIFT_REG;
assign rnode_1to169_input_acl_hw_wg_id_0_stall_in_reg_169_NO_SHIFT_REG = rnode_1to169_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG;
assign rnode_1to169_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG = rnode_1to169_input_acl_hw_wg_id_0_valid_out_reg_169_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_i_325_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_i_325_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_i_325_0_NO_SHIFT_REG;
 logic rnode_1to2_i_325_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_i_325_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_i_325_1_NO_SHIFT_REG;
 logic rnode_1to2_i_325_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_i_325_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_i_325_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_i_325_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_i_325_0_stall_out_reg_2_NO_SHIFT_REG;
 reg rnode_1to2_i_325_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to2_i_325_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_i_325_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_i_325_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_i_325_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_i_325_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_i_325_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_lvm_i_325_NO_SHIFT_REG),
	.data_out(rnode_1to2_i_325_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_i_325_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_i_325_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_i_325_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_i_325_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_i_325_0_reg_2_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_2_NO_SHIFT_REG;
assign merge_node_stall_in_2 = rnode_1to2_i_325_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_i_325_0_stall_in_0_reg_2_NO_SHIFT_REG = ((rnode_1to2_i_325_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to2_i_325_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to2_i_325_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to2_i_325_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to2_i_325_0_valid_out_0_NO_SHIFT_REG = (rnode_1to2_i_325_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_i_325_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_i_325_0_valid_out_1_NO_SHIFT_REG = (rnode_1to2_i_325_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_i_325_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to2_i_325_0_NO_SHIFT_REG = rnode_1to2_i_325_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_i_325_1_NO_SHIFT_REG = rnode_1to2_i_325_0_reg_2_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to2_i_325_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_i_325_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to2_i_325_0_consumed_0_NO_SHIFT_REG <= (rnode_1to2_i_325_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_i_325_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to2_i_325_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to2_i_325_0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_i_325_0_consumed_1_NO_SHIFT_REG <= (rnode_1to2_i_325_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_i_325_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to2_i_325_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to2_i_325_0_stall_in_0_reg_2_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_c3_exe1_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_c3_exe1_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_c3_exe1_0_NO_SHIFT_REG;
 logic rnode_1to2_c3_exe1_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_c3_exe1_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_c3_exe1_1_NO_SHIFT_REG;
 logic rnode_1to2_c3_exe1_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_c3_exe1_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_c3_exe1_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_c3_exe1_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_c3_exe1_0_stall_out_reg_2_NO_SHIFT_REG;
 reg rnode_1to2_c3_exe1_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to2_c3_exe1_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_c3_exe1_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_c3_exe1_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_c3_exe1_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_c3_exe1_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_c3_exe1_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_lvm_c3_exe1_NO_SHIFT_REG),
	.data_out(rnode_1to2_c3_exe1_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_c3_exe1_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_c3_exe1_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_c3_exe1_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_c3_exe1_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_c3_exe1_0_reg_2_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_3_NO_SHIFT_REG;
assign merge_node_stall_in_3 = rnode_1to2_c3_exe1_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_c3_exe1_0_stall_in_0_reg_2_NO_SHIFT_REG = ((rnode_1to2_c3_exe1_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to2_c3_exe1_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to2_c3_exe1_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to2_c3_exe1_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to2_c3_exe1_0_valid_out_0_NO_SHIFT_REG = (rnode_1to2_c3_exe1_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_c3_exe1_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_c3_exe1_0_valid_out_1_NO_SHIFT_REG = (rnode_1to2_c3_exe1_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_c3_exe1_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to2_c3_exe1_0_NO_SHIFT_REG = rnode_1to2_c3_exe1_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_c3_exe1_1_NO_SHIFT_REG = rnode_1to2_c3_exe1_0_reg_2_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to2_c3_exe1_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_c3_exe1_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to2_c3_exe1_0_consumed_0_NO_SHIFT_REG <= (rnode_1to2_c3_exe1_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_c3_exe1_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to2_c3_exe1_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to2_c3_exe1_0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_c3_exe1_0_consumed_1_NO_SHIFT_REG <= (rnode_1to2_c3_exe1_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_c3_exe1_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to2_c3_exe1_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to2_c3_exe1_0_stall_in_0_reg_2_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_memcoalesce_param_extrValue_6_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_param_extrValue_6_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_param_extrValue_6_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_param_extrValue_6_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_memcoalesce_param_extrValue_6_1_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_param_extrValue_6_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_memcoalesce_param_extrValue_6_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_param_extrValue_6_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_param_extrValue_6_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_param_extrValue_6_0_stall_out_reg_2_NO_SHIFT_REG;
 reg rnode_1to2_memcoalesce_param_extrValue_6_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to2_memcoalesce_param_extrValue_6_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_memcoalesce_param_extrValue_6_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_memcoalesce_param_extrValue_6_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_memcoalesce_param_extrValue_6_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_memcoalesce_param_extrValue_6_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_memcoalesce_param_extrValue_6_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG),
	.data_out(rnode_1to2_memcoalesce_param_extrValue_6_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_memcoalesce_param_extrValue_6_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_memcoalesce_param_extrValue_6_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_memcoalesce_param_extrValue_6_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_memcoalesce_param_extrValue_6_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_memcoalesce_param_extrValue_6_0_reg_2_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_4_NO_SHIFT_REG;
assign merge_node_stall_in_4 = rnode_1to2_memcoalesce_param_extrValue_6_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_memcoalesce_param_extrValue_6_0_stall_in_0_reg_2_NO_SHIFT_REG = ((rnode_1to2_memcoalesce_param_extrValue_6_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to2_memcoalesce_param_extrValue_6_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to2_memcoalesce_param_extrValue_6_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to2_memcoalesce_param_extrValue_6_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to2_memcoalesce_param_extrValue_6_0_valid_out_0_NO_SHIFT_REG = (rnode_1to2_memcoalesce_param_extrValue_6_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_memcoalesce_param_extrValue_6_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_memcoalesce_param_extrValue_6_0_valid_out_1_NO_SHIFT_REG = (rnode_1to2_memcoalesce_param_extrValue_6_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_memcoalesce_param_extrValue_6_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to2_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG = rnode_1to2_memcoalesce_param_extrValue_6_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_memcoalesce_param_extrValue_6_1_NO_SHIFT_REG = rnode_1to2_memcoalesce_param_extrValue_6_0_reg_2_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to2_memcoalesce_param_extrValue_6_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_memcoalesce_param_extrValue_6_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to2_memcoalesce_param_extrValue_6_0_consumed_0_NO_SHIFT_REG <= (rnode_1to2_memcoalesce_param_extrValue_6_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_memcoalesce_param_extrValue_6_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to2_memcoalesce_param_extrValue_6_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to2_memcoalesce_param_extrValue_6_0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_memcoalesce_param_extrValue_6_0_consumed_1_NO_SHIFT_REG <= (rnode_1to2_memcoalesce_param_extrValue_6_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_memcoalesce_param_extrValue_6_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to2_memcoalesce_param_extrValue_6_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to2_memcoalesce_param_extrValue_6_0_stall_in_0_reg_2_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_var__u10_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_var__u10_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_var__u10_0_NO_SHIFT_REG;
 logic rnode_1to2_var__u10_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_var__u10_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_var__u10_1_NO_SHIFT_REG;
 logic rnode_1to2_var__u10_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_var__u10_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_var__u10_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_var__u10_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_var__u10_0_stall_out_reg_2_NO_SHIFT_REG;
 reg rnode_1to2_var__u10_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to2_var__u10_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_var__u10_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_var__u10_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_var__u10_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_var__u10_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_var__u10_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_lvm_var__u10_NO_SHIFT_REG),
	.data_out(rnode_1to2_var__u10_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_var__u10_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_var__u10_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_var__u10_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_var__u10_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_var__u10_0_reg_2_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_5_NO_SHIFT_REG;
assign merge_node_stall_in_5 = rnode_1to2_var__u10_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_var__u10_0_stall_in_0_reg_2_NO_SHIFT_REG = ((rnode_1to2_var__u10_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to2_var__u10_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to2_var__u10_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to2_var__u10_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to2_var__u10_0_valid_out_0_NO_SHIFT_REG = (rnode_1to2_var__u10_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_var__u10_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_var__u10_0_valid_out_1_NO_SHIFT_REG = (rnode_1to2_var__u10_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_var__u10_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to2_var__u10_0_NO_SHIFT_REG = rnode_1to2_var__u10_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_var__u10_1_NO_SHIFT_REG = rnode_1to2_var__u10_0_reg_2_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to2_var__u10_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_var__u10_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to2_var__u10_0_consumed_0_NO_SHIFT_REG <= (rnode_1to2_var__u10_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_var__u10_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to2_var__u10_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to2_var__u10_0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_var__u10_0_consumed_1_NO_SHIFT_REG <= (rnode_1to2_var__u10_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_var__u10_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to2_var__u10_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to2_var__u10_0_stall_in_0_reg_2_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_j_419_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_j_419_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_j_419_0_NO_SHIFT_REG;
 logic rnode_1to2_j_419_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_j_419_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_j_419_1_NO_SHIFT_REG;
 logic rnode_1to2_j_419_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_j_419_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_j_419_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_j_419_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_j_419_0_stall_out_reg_2_NO_SHIFT_REG;
 reg rnode_1to2_j_419_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to2_j_419_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_j_419_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_j_419_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_j_419_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_j_419_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_j_419_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_lvm_j_419_NO_SHIFT_REG),
	.data_out(rnode_1to2_j_419_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_j_419_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_j_419_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_j_419_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_j_419_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_j_419_0_reg_2_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_6_NO_SHIFT_REG;
assign merge_node_stall_in_6 = rnode_1to2_j_419_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_j_419_0_stall_in_0_reg_2_NO_SHIFT_REG = ((rnode_1to2_j_419_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to2_j_419_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to2_j_419_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to2_j_419_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to2_j_419_0_valid_out_0_NO_SHIFT_REG = (rnode_1to2_j_419_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_j_419_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_j_419_0_valid_out_1_NO_SHIFT_REG = (rnode_1to2_j_419_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_j_419_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to2_j_419_0_NO_SHIFT_REG = rnode_1to2_j_419_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_j_419_1_NO_SHIFT_REG = rnode_1to2_j_419_0_reg_2_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to2_j_419_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_j_419_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to2_j_419_0_consumed_0_NO_SHIFT_REG <= (rnode_1to2_j_419_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_j_419_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to2_j_419_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to2_j_419_0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_j_419_0_consumed_1_NO_SHIFT_REG <= (rnode_1to2_j_419_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_j_419_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to2_j_419_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to2_j_419_0_stall_in_0_reg_2_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 166
//  * capacity = 166
 logic rnode_1to167_memcoalesce_param_extrValue_2_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to167_memcoalesce_param_extrValue_2_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to167_memcoalesce_param_extrValue_2_0_NO_SHIFT_REG;
 logic rnode_1to167_memcoalesce_param_extrValue_2_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to167_memcoalesce_param_extrValue_2_0_reg_167_NO_SHIFT_REG;
 logic rnode_1to167_memcoalesce_param_extrValue_2_0_valid_out_reg_167_NO_SHIFT_REG;
 logic rnode_1to167_memcoalesce_param_extrValue_2_0_stall_in_reg_167_NO_SHIFT_REG;
 logic rnode_1to167_memcoalesce_param_extrValue_2_0_stall_out_reg_167_NO_SHIFT_REG;

acl_data_fifo rnode_1to167_memcoalesce_param_extrValue_2_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to167_memcoalesce_param_extrValue_2_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to167_memcoalesce_param_extrValue_2_0_stall_in_reg_167_NO_SHIFT_REG),
	.valid_out(rnode_1to167_memcoalesce_param_extrValue_2_0_valid_out_reg_167_NO_SHIFT_REG),
	.stall_out(rnode_1to167_memcoalesce_param_extrValue_2_0_stall_out_reg_167_NO_SHIFT_REG),
	.data_in(local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG),
	.data_out(rnode_1to167_memcoalesce_param_extrValue_2_0_reg_167_NO_SHIFT_REG)
);

defparam rnode_1to167_memcoalesce_param_extrValue_2_0_reg_167_fifo.DEPTH = 167;
defparam rnode_1to167_memcoalesce_param_extrValue_2_0_reg_167_fifo.DATA_WIDTH = 32;
defparam rnode_1to167_memcoalesce_param_extrValue_2_0_reg_167_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to167_memcoalesce_param_extrValue_2_0_reg_167_fifo.IMPL = "ram";

assign rnode_1to167_memcoalesce_param_extrValue_2_0_reg_167_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_7_NO_SHIFT_REG;
assign merge_node_stall_in_7 = rnode_1to167_memcoalesce_param_extrValue_2_0_stall_out_reg_167_NO_SHIFT_REG;
assign rnode_1to167_memcoalesce_param_extrValue_2_0_NO_SHIFT_REG = rnode_1to167_memcoalesce_param_extrValue_2_0_reg_167_NO_SHIFT_REG;
assign rnode_1to167_memcoalesce_param_extrValue_2_0_stall_in_reg_167_NO_SHIFT_REG = rnode_1to167_memcoalesce_param_extrValue_2_0_stall_in_NO_SHIFT_REG;
assign rnode_1to167_memcoalesce_param_extrValue_2_0_valid_out_NO_SHIFT_REG = rnode_1to167_memcoalesce_param_extrValue_2_0_valid_out_reg_167_NO_SHIFT_REG;

// Register node:
//  * latency = 6
//  * capacity = 6
 logic rnode_1to7__phi_decision76_xor_or_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to7__phi_decision76_xor_or_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_1to7__phi_decision76_xor_or_0_NO_SHIFT_REG;
 logic rnode_1to7__phi_decision76_xor_or_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to7__phi_decision76_xor_or_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_1to7__phi_decision76_xor_or_1_NO_SHIFT_REG;
 logic rnode_1to7__phi_decision76_xor_or_0_reg_7_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to7__phi_decision76_xor_or_0_reg_7_NO_SHIFT_REG;
 logic rnode_1to7__phi_decision76_xor_or_0_valid_out_0_reg_7_NO_SHIFT_REG;
 logic rnode_1to7__phi_decision76_xor_or_0_stall_in_0_reg_7_NO_SHIFT_REG;
 logic rnode_1to7__phi_decision76_xor_or_0_stall_out_reg_7_NO_SHIFT_REG;
 reg rnode_1to7__phi_decision76_xor_or_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to7__phi_decision76_xor_or_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to7__phi_decision76_xor_or_0_reg_7_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to7__phi_decision76_xor_or_0_reg_7_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to7__phi_decision76_xor_or_0_stall_in_0_reg_7_NO_SHIFT_REG),
	.valid_out(rnode_1to7__phi_decision76_xor_or_0_valid_out_0_reg_7_NO_SHIFT_REG),
	.stall_out(rnode_1to7__phi_decision76_xor_or_0_stall_out_reg_7_NO_SHIFT_REG),
	.data_in(local_lvm__phi_decision76_xor_or_NO_SHIFT_REG),
	.data_out(rnode_1to7__phi_decision76_xor_or_0_reg_7_NO_SHIFT_REG)
);

defparam rnode_1to7__phi_decision76_xor_or_0_reg_7_fifo.DEPTH = 7;
defparam rnode_1to7__phi_decision76_xor_or_0_reg_7_fifo.DATA_WIDTH = 1;
defparam rnode_1to7__phi_decision76_xor_or_0_reg_7_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to7__phi_decision76_xor_or_0_reg_7_fifo.IMPL = "ll_reg";

assign rnode_1to7__phi_decision76_xor_or_0_reg_7_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_8_NO_SHIFT_REG;
assign merge_node_stall_in_8 = rnode_1to7__phi_decision76_xor_or_0_stall_out_reg_7_NO_SHIFT_REG;
assign rnode_1to7__phi_decision76_xor_or_0_stall_in_0_reg_7_NO_SHIFT_REG = ((rnode_1to7__phi_decision76_xor_or_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to7__phi_decision76_xor_or_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to7__phi_decision76_xor_or_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to7__phi_decision76_xor_or_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to7__phi_decision76_xor_or_0_valid_out_0_NO_SHIFT_REG = (rnode_1to7__phi_decision76_xor_or_0_valid_out_0_reg_7_NO_SHIFT_REG & ~(rnode_1to7__phi_decision76_xor_or_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to7__phi_decision76_xor_or_0_valid_out_1_NO_SHIFT_REG = (rnode_1to7__phi_decision76_xor_or_0_valid_out_0_reg_7_NO_SHIFT_REG & ~(rnode_1to7__phi_decision76_xor_or_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to7__phi_decision76_xor_or_0_NO_SHIFT_REG = rnode_1to7__phi_decision76_xor_or_0_reg_7_NO_SHIFT_REG;
assign rnode_1to7__phi_decision76_xor_or_1_NO_SHIFT_REG = rnode_1to7__phi_decision76_xor_or_0_reg_7_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to7__phi_decision76_xor_or_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to7__phi_decision76_xor_or_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to7__phi_decision76_xor_or_0_consumed_0_NO_SHIFT_REG <= (rnode_1to7__phi_decision76_xor_or_0_valid_out_0_reg_7_NO_SHIFT_REG & (rnode_1to7__phi_decision76_xor_or_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to7__phi_decision76_xor_or_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to7__phi_decision76_xor_or_0_stall_in_0_reg_7_NO_SHIFT_REG);
		rnode_1to7__phi_decision76_xor_or_0_consumed_1_NO_SHIFT_REG <= (rnode_1to7__phi_decision76_xor_or_0_valid_out_0_reg_7_NO_SHIFT_REG & (rnode_1to7__phi_decision76_xor_or_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to7__phi_decision76_xor_or_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to7__phi_decision76_xor_or_0_stall_in_0_reg_7_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 165
//  * capacity = 165
 logic rnode_1to166_maxValue_418_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to166_maxValue_418_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to166_maxValue_418_0_NO_SHIFT_REG;
 logic rnode_1to166_maxValue_418_0_reg_166_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to166_maxValue_418_0_reg_166_NO_SHIFT_REG;
 logic rnode_1to166_maxValue_418_0_valid_out_reg_166_NO_SHIFT_REG;
 logic rnode_1to166_maxValue_418_0_stall_in_reg_166_NO_SHIFT_REG;
 logic rnode_1to166_maxValue_418_0_stall_out_reg_166_NO_SHIFT_REG;
wire [3:0] rci_rcnode_1to169_rc10_cmp2122_0_reg_1;

acl_data_fifo rnode_1to166_maxValue_418_0_reg_166_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to166_maxValue_418_0_reg_166_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to166_maxValue_418_0_stall_in_reg_166_NO_SHIFT_REG),
	.valid_out(rnode_1to166_maxValue_418_0_valid_out_reg_166_NO_SHIFT_REG),
	.stall_out(rnode_1to166_maxValue_418_0_stall_out_reg_166_NO_SHIFT_REG),
	.data_in(local_lvm_maxValue_418_NO_SHIFT_REG),
	.data_out(rnode_1to166_maxValue_418_0_reg_166_NO_SHIFT_REG)
);

defparam rnode_1to166_maxValue_418_0_reg_166_fifo.DEPTH = 166;
defparam rnode_1to166_maxValue_418_0_reg_166_fifo.DATA_WIDTH = 32;
defparam rnode_1to166_maxValue_418_0_reg_166_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to166_maxValue_418_0_reg_166_fifo.IMPL = "ram";

assign rnode_1to166_maxValue_418_0_reg_166_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_9_NO_SHIFT_REG;
assign merge_node_stall_in_9 = rnode_1to166_maxValue_418_0_stall_out_reg_166_NO_SHIFT_REG;
assign rnode_1to166_maxValue_418_0_NO_SHIFT_REG = rnode_1to166_maxValue_418_0_reg_166_NO_SHIFT_REG;
assign rnode_1to166_maxValue_418_0_stall_in_reg_166_NO_SHIFT_REG = rnode_1to166_maxValue_418_0_stall_in_NO_SHIFT_REG;
assign rnode_1to166_maxValue_418_0_valid_out_NO_SHIFT_REG = rnode_1to166_maxValue_418_0_valid_out_reg_166_NO_SHIFT_REG;
assign rci_rcnode_1to169_rc10_cmp2122_0_reg_1[0] = local_lvm_cmp2122_NO_SHIFT_REG;
assign rci_rcnode_1to169_rc10_cmp2122_0_reg_1[1] = local_lvm_var__u9_NO_SHIFT_REG;
assign rci_rcnode_1to169_rc10_cmp2122_0_reg_1[2] = local_lvm_cmp48_NO_SHIFT_REG;
assign rci_rcnode_1to169_rc10_cmp2122_0_reg_1[3] = local_lvm_var__NO_SHIFT_REG;

// Register node:
//  * latency = 168
//  * capacity = 168
 logic rcnode_1to169_rc10_cmp2122_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to169_rc10_cmp2122_0_stall_in_NO_SHIFT_REG;
 logic [3:0] rcnode_1to169_rc10_cmp2122_0_NO_SHIFT_REG;
 logic rcnode_1to169_rc10_cmp2122_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic [3:0] rcnode_1to169_rc10_cmp2122_0_reg_169_NO_SHIFT_REG;
 logic rcnode_1to169_rc10_cmp2122_0_valid_out_reg_169_NO_SHIFT_REG;
 logic rcnode_1to169_rc10_cmp2122_0_stall_in_reg_169_NO_SHIFT_REG;
 logic rcnode_1to169_rc10_cmp2122_0_stall_out_reg_169_IP_NO_SHIFT_REG;
 logic rcnode_1to169_rc10_cmp2122_0_stall_out_reg_169_NO_SHIFT_REG;
wire [127:0] rci_rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_reg_1;

acl_data_fifo rcnode_1to169_rc10_cmp2122_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to169_rc10_cmp2122_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to169_rc10_cmp2122_0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rcnode_1to169_rc10_cmp2122_0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rcnode_1to169_rc10_cmp2122_0_stall_out_reg_169_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to169_rc10_cmp2122_0_reg_1),
	.data_out(rcnode_1to169_rc10_cmp2122_0_reg_169_NO_SHIFT_REG)
);

defparam rcnode_1to169_rc10_cmp2122_0_reg_169_fifo.DEPTH = 169;
defparam rcnode_1to169_rc10_cmp2122_0_reg_169_fifo.DATA_WIDTH = 4;
defparam rcnode_1to169_rc10_cmp2122_0_reg_169_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to169_rc10_cmp2122_0_reg_169_fifo.IMPL = "ram";

assign rcnode_1to169_rc10_cmp2122_0_reg_169_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_10_NO_SHIFT_REG;
assign rcnode_1to169_rc10_cmp2122_0_stall_out_reg_169_NO_SHIFT_REG = (~(rcnode_1to169_rc10_cmp2122_0_reg_169_inputs_ready_NO_SHIFT_REG) | rcnode_1to169_rc10_cmp2122_0_stall_out_reg_169_IP_NO_SHIFT_REG);
assign merge_node_stall_in_10 = rcnode_1to169_rc10_cmp2122_0_stall_out_reg_169_NO_SHIFT_REG;
assign rcnode_1to169_rc10_cmp2122_0_NO_SHIFT_REG = rcnode_1to169_rc10_cmp2122_0_reg_169_NO_SHIFT_REG;
assign rcnode_1to169_rc10_cmp2122_0_stall_in_reg_169_NO_SHIFT_REG = rcnode_1to169_rc10_cmp2122_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to169_rc10_cmp2122_0_valid_out_NO_SHIFT_REG = rcnode_1to169_rc10_cmp2122_0_valid_out_reg_169_NO_SHIFT_REG;
assign rci_rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_reg_1[31:0] = local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG;
assign rci_rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_reg_1[63:32] = local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
assign rci_rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_reg_1[95:64] = local_lvm_c0_exe1_NO_SHIFT_REG;
assign rci_rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_reg_1[127:96] = local_lvm_c0_exe2_NO_SHIFT_REG;

// Register node:
//  * latency = 168
//  * capacity = 168
 logic rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_stall_in_NO_SHIFT_REG;
 logic [127:0] rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG;
 logic rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic [127:0] rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_reg_169_NO_SHIFT_REG;
 logic rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_valid_out_reg_169_NO_SHIFT_REG;
 logic rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_stall_in_reg_169_NO_SHIFT_REG;
 logic rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_stall_out_reg_169_IP_NO_SHIFT_REG;
 logic rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_stall_out_reg_169_NO_SHIFT_REG;
wire [96:0] rci_rcnode_1to169_rc12__phi_decision77_xor_0_reg_1;

acl_data_fifo rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_stall_out_reg_169_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_reg_1),
	.data_out(rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_reg_169_NO_SHIFT_REG)
);

defparam rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_reg_169_fifo.DEPTH = 169;
defparam rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_reg_169_fifo.DATA_WIDTH = 128;
defparam rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_reg_169_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_reg_169_fifo.IMPL = "ram";

assign rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_reg_169_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_11_NO_SHIFT_REG;
assign rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_stall_out_reg_169_NO_SHIFT_REG = (~(rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_reg_169_inputs_ready_NO_SHIFT_REG) | rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_stall_out_reg_169_IP_NO_SHIFT_REG);
assign merge_node_stall_in_11 = rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_stall_out_reg_169_NO_SHIFT_REG;
assign rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG = rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_reg_169_NO_SHIFT_REG;
assign rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_stall_in_reg_169_NO_SHIFT_REG = rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_valid_out_NO_SHIFT_REG = rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_valid_out_reg_169_NO_SHIFT_REG;
assign rci_rcnode_1to169_rc12__phi_decision77_xor_0_reg_1[0] = local_lvm__phi_decision77_xor_NO_SHIFT_REG;
assign rci_rcnode_1to169_rc12__phi_decision77_xor_0_reg_1[32:1] = local_lvm_channelCounter_049_NO_SHIFT_REG;
assign rci_rcnode_1to169_rc12__phi_decision77_xor_0_reg_1[64:33] = local_lvm_mul50_NO_SHIFT_REG;
assign rci_rcnode_1to169_rc12__phi_decision77_xor_0_reg_1[96:65] = local_lvm_mul_NO_SHIFT_REG;

// Register node:
//  * latency = 168
//  * capacity = 168
 logic rcnode_1to169_rc12__phi_decision77_xor_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to169_rc12__phi_decision77_xor_0_stall_in_NO_SHIFT_REG;
 logic [96:0] rcnode_1to169_rc12__phi_decision77_xor_0_NO_SHIFT_REG;
 logic rcnode_1to169_rc12__phi_decision77_xor_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic [96:0] rcnode_1to169_rc12__phi_decision77_xor_0_reg_169_NO_SHIFT_REG;
 logic rcnode_1to169_rc12__phi_decision77_xor_0_valid_out_reg_169_NO_SHIFT_REG;
 logic rcnode_1to169_rc12__phi_decision77_xor_0_stall_in_reg_169_NO_SHIFT_REG;
 logic rcnode_1to169_rc12__phi_decision77_xor_0_stall_out_reg_169_IP_NO_SHIFT_REG;
 logic rcnode_1to169_rc12__phi_decision77_xor_0_stall_out_reg_169_NO_SHIFT_REG;
wire [127:0] rci_rcnode_1to169_rc13_heightCounter_141_0_reg_1;

acl_data_fifo rcnode_1to169_rc12__phi_decision77_xor_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to169_rc12__phi_decision77_xor_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to169_rc12__phi_decision77_xor_0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rcnode_1to169_rc12__phi_decision77_xor_0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rcnode_1to169_rc12__phi_decision77_xor_0_stall_out_reg_169_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to169_rc12__phi_decision77_xor_0_reg_1),
	.data_out(rcnode_1to169_rc12__phi_decision77_xor_0_reg_169_NO_SHIFT_REG)
);

defparam rcnode_1to169_rc12__phi_decision77_xor_0_reg_169_fifo.DEPTH = 169;
defparam rcnode_1to169_rc12__phi_decision77_xor_0_reg_169_fifo.DATA_WIDTH = 97;
defparam rcnode_1to169_rc12__phi_decision77_xor_0_reg_169_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to169_rc12__phi_decision77_xor_0_reg_169_fifo.IMPL = "ram";

assign rcnode_1to169_rc12__phi_decision77_xor_0_reg_169_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_12_NO_SHIFT_REG;
assign rcnode_1to169_rc12__phi_decision77_xor_0_stall_out_reg_169_NO_SHIFT_REG = (~(rcnode_1to169_rc12__phi_decision77_xor_0_reg_169_inputs_ready_NO_SHIFT_REG) | rcnode_1to169_rc12__phi_decision77_xor_0_stall_out_reg_169_IP_NO_SHIFT_REG);
assign merge_node_stall_in_12 = rcnode_1to169_rc12__phi_decision77_xor_0_stall_out_reg_169_NO_SHIFT_REG;
assign rcnode_1to169_rc12__phi_decision77_xor_0_NO_SHIFT_REG = rcnode_1to169_rc12__phi_decision77_xor_0_reg_169_NO_SHIFT_REG;
assign rcnode_1to169_rc12__phi_decision77_xor_0_stall_in_reg_169_NO_SHIFT_REG = rcnode_1to169_rc12__phi_decision77_xor_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to169_rc12__phi_decision77_xor_0_valid_out_NO_SHIFT_REG = rcnode_1to169_rc12__phi_decision77_xor_0_valid_out_reg_169_NO_SHIFT_REG;
assign rci_rcnode_1to169_rc13_heightCounter_141_0_reg_1[31:0] = local_lvm_heightCounter_141_NO_SHIFT_REG;
assign rci_rcnode_1to169_rc13_heightCounter_141_0_reg_1[63:32] = local_lvm_c3_exe2_NO_SHIFT_REG;
assign rci_rcnode_1to169_rc13_heightCounter_141_0_reg_1[95:64] = local_lvm_c1_exe1_NO_SHIFT_REG;
assign rci_rcnode_1to169_rc13_heightCounter_141_0_reg_1[127:96] = local_lvm_widthCounter_232_NO_SHIFT_REG;

// Register node:
//  * latency = 168
//  * capacity = 168
 logic rcnode_1to169_rc13_heightCounter_141_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to169_rc13_heightCounter_141_0_stall_in_NO_SHIFT_REG;
 logic [127:0] rcnode_1to169_rc13_heightCounter_141_0_NO_SHIFT_REG;
 logic rcnode_1to169_rc13_heightCounter_141_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic [127:0] rcnode_1to169_rc13_heightCounter_141_0_reg_169_NO_SHIFT_REG;
 logic rcnode_1to169_rc13_heightCounter_141_0_valid_out_reg_169_NO_SHIFT_REG;
 logic rcnode_1to169_rc13_heightCounter_141_0_stall_in_reg_169_NO_SHIFT_REG;
 logic rcnode_1to169_rc13_heightCounter_141_0_stall_out_reg_169_IP_NO_SHIFT_REG;
 logic rcnode_1to169_rc13_heightCounter_141_0_stall_out_reg_169_NO_SHIFT_REG;
wire [127:0] rci_rcnode_1to169_rc14_var__u11_0_reg_1;

acl_data_fifo rcnode_1to169_rc13_heightCounter_141_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to169_rc13_heightCounter_141_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to169_rc13_heightCounter_141_0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rcnode_1to169_rc13_heightCounter_141_0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rcnode_1to169_rc13_heightCounter_141_0_stall_out_reg_169_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to169_rc13_heightCounter_141_0_reg_1),
	.data_out(rcnode_1to169_rc13_heightCounter_141_0_reg_169_NO_SHIFT_REG)
);

defparam rcnode_1to169_rc13_heightCounter_141_0_reg_169_fifo.DEPTH = 169;
defparam rcnode_1to169_rc13_heightCounter_141_0_reg_169_fifo.DATA_WIDTH = 128;
defparam rcnode_1to169_rc13_heightCounter_141_0_reg_169_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to169_rc13_heightCounter_141_0_reg_169_fifo.IMPL = "ram";

assign rcnode_1to169_rc13_heightCounter_141_0_reg_169_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_13_NO_SHIFT_REG;
assign rcnode_1to169_rc13_heightCounter_141_0_stall_out_reg_169_NO_SHIFT_REG = (~(rcnode_1to169_rc13_heightCounter_141_0_reg_169_inputs_ready_NO_SHIFT_REG) | rcnode_1to169_rc13_heightCounter_141_0_stall_out_reg_169_IP_NO_SHIFT_REG);
assign merge_node_stall_in_13 = rcnode_1to169_rc13_heightCounter_141_0_stall_out_reg_169_NO_SHIFT_REG;
assign rcnode_1to169_rc13_heightCounter_141_0_NO_SHIFT_REG = rcnode_1to169_rc13_heightCounter_141_0_reg_169_NO_SHIFT_REG;
assign rcnode_1to169_rc13_heightCounter_141_0_stall_in_reg_169_NO_SHIFT_REG = rcnode_1to169_rc13_heightCounter_141_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to169_rc13_heightCounter_141_0_valid_out_NO_SHIFT_REG = rcnode_1to169_rc13_heightCounter_141_0_valid_out_reg_169_NO_SHIFT_REG;
assign rci_rcnode_1to169_rc14_var__u11_0_reg_1[31:0] = local_lvm_var__u11_NO_SHIFT_REG;
assign rci_rcnode_1to169_rc14_var__u11_0_reg_1[63:32] = local_lvm_input_global_id_0_NO_SHIFT_REG;
assign rci_rcnode_1to169_rc14_var__u11_0_reg_1[95:64] = local_lvm_input_global_id_1_NO_SHIFT_REG;
assign rci_rcnode_1to169_rc14_var__u11_0_reg_1[127:96] = local_lvm_input_global_id_2_NO_SHIFT_REG;

// Register node:
//  * latency = 168
//  * capacity = 168
 logic rcnode_1to169_rc14_var__u11_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to169_rc14_var__u11_0_stall_in_NO_SHIFT_REG;
 logic [127:0] rcnode_1to169_rc14_var__u11_0_NO_SHIFT_REG;
 logic rcnode_1to169_rc14_var__u11_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic [127:0] rcnode_1to169_rc14_var__u11_0_reg_169_NO_SHIFT_REG;
 logic rcnode_1to169_rc14_var__u11_0_valid_out_reg_169_NO_SHIFT_REG;
 logic rcnode_1to169_rc14_var__u11_0_stall_in_reg_169_NO_SHIFT_REG;
 logic rcnode_1to169_rc14_var__u11_0_stall_out_reg_169_IP_NO_SHIFT_REG;
 logic rcnode_1to169_rc14_var__u11_0_stall_out_reg_169_NO_SHIFT_REG;

acl_data_fifo rcnode_1to169_rc14_var__u11_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to169_rc14_var__u11_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to169_rc14_var__u11_0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rcnode_1to169_rc14_var__u11_0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rcnode_1to169_rc14_var__u11_0_stall_out_reg_169_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to169_rc14_var__u11_0_reg_1),
	.data_out(rcnode_1to169_rc14_var__u11_0_reg_169_NO_SHIFT_REG)
);

defparam rcnode_1to169_rc14_var__u11_0_reg_169_fifo.DEPTH = 169;
defparam rcnode_1to169_rc14_var__u11_0_reg_169_fifo.DATA_WIDTH = 128;
defparam rcnode_1to169_rc14_var__u11_0_reg_169_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to169_rc14_var__u11_0_reg_169_fifo.IMPL = "ram";

assign rcnode_1to169_rc14_var__u11_0_reg_169_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_14_NO_SHIFT_REG;
assign rcnode_1to169_rc14_var__u11_0_stall_out_reg_169_NO_SHIFT_REG = (~(rcnode_1to169_rc14_var__u11_0_reg_169_inputs_ready_NO_SHIFT_REG) | rcnode_1to169_rc14_var__u11_0_stall_out_reg_169_IP_NO_SHIFT_REG);
assign merge_node_stall_in_14 = rcnode_1to169_rc14_var__u11_0_stall_out_reg_169_NO_SHIFT_REG;
assign rcnode_1to169_rc14_var__u11_0_NO_SHIFT_REG = rcnode_1to169_rc14_var__u11_0_reg_169_NO_SHIFT_REG;
assign rcnode_1to169_rc14_var__u11_0_stall_in_reg_169_NO_SHIFT_REG = rcnode_1to169_rc14_var__u11_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to169_rc14_var__u11_0_valid_out_NO_SHIFT_REG = rcnode_1to169_rc14_var__u11_0_valid_out_reg_169_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb5_c1_eni129_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb5_c1_eni129_0_stall_in_NO_SHIFT_REG;
 logic [223:0] rnode_1to2_bb5_c1_eni129_0_NO_SHIFT_REG;
 logic rnode_1to2_bb5_c1_eni129_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [223:0] rnode_1to2_bb5_c1_eni129_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb5_c1_eni129_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb5_c1_eni129_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb5_c1_eni129_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb5_c1_eni129_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb5_c1_eni129_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb5_c1_eni129_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb5_c1_eni129_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb5_c1_eni129_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb5_c1_eni129),
	.data_out(rnode_1to2_bb5_c1_eni129_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb5_c1_eni129_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb5_c1_eni129_0_reg_2_fifo.DATA_WIDTH = 224;
defparam rnode_1to2_bb5_c1_eni129_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb5_c1_eni129_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_bb5_c1_eni129_0_reg_2_inputs_ready_NO_SHIFT_REG = local_bb5_c1_eni129_valid_out;
assign local_bb5_c1_eni129_stall_in = rnode_1to2_bb5_c1_eni129_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb5_c1_eni129_0_NO_SHIFT_REG = rnode_1to2_bb5_c1_eni129_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb5_c1_eni129_0_stall_in_reg_2_NO_SHIFT_REG = rnode_1to2_bb5_c1_eni129_0_stall_in_NO_SHIFT_REG;
assign rnode_1to2_bb5_c1_eni129_0_valid_out_NO_SHIFT_REG = rnode_1to2_bb5_c1_eni129_0_valid_out_reg_2_NO_SHIFT_REG;

// Register node:
//  * latency = 165
//  * capacity = 165
 logic rnode_2to167_i_325_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to167_i_325_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to167_i_325_0_NO_SHIFT_REG;
 logic rnode_2to167_i_325_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to167_i_325_0_reg_167_NO_SHIFT_REG;
 logic rnode_2to167_i_325_0_valid_out_reg_167_NO_SHIFT_REG;
 logic rnode_2to167_i_325_0_stall_in_reg_167_NO_SHIFT_REG;
 logic rnode_2to167_i_325_0_stall_out_reg_167_NO_SHIFT_REG;
wire [95:0] rci_rcnode_2to169_rc1_c3_exe1_0_reg_2;

acl_data_fifo rnode_2to167_i_325_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to167_i_325_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to167_i_325_0_stall_in_reg_167_NO_SHIFT_REG),
	.valid_out(rnode_2to167_i_325_0_valid_out_reg_167_NO_SHIFT_REG),
	.stall_out(rnode_2to167_i_325_0_stall_out_reg_167_NO_SHIFT_REG),
	.data_in(rnode_1to2_i_325_1_NO_SHIFT_REG),
	.data_out(rnode_2to167_i_325_0_reg_167_NO_SHIFT_REG)
);

defparam rnode_2to167_i_325_0_reg_167_fifo.DEPTH = 166;
defparam rnode_2to167_i_325_0_reg_167_fifo.DATA_WIDTH = 32;
defparam rnode_2to167_i_325_0_reg_167_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_2to167_i_325_0_reg_167_fifo.IMPL = "ram";

assign rnode_2to167_i_325_0_reg_167_inputs_ready_NO_SHIFT_REG = rnode_1to2_i_325_0_valid_out_1_NO_SHIFT_REG;
assign rnode_1to2_i_325_0_stall_in_1_NO_SHIFT_REG = rnode_2to167_i_325_0_stall_out_reg_167_NO_SHIFT_REG;
assign rnode_2to167_i_325_0_NO_SHIFT_REG = rnode_2to167_i_325_0_reg_167_NO_SHIFT_REG;
assign rnode_2to167_i_325_0_stall_in_reg_167_NO_SHIFT_REG = rnode_2to167_i_325_0_stall_in_NO_SHIFT_REG;
assign rnode_2to167_i_325_0_valid_out_NO_SHIFT_REG = rnode_2to167_i_325_0_valid_out_reg_167_NO_SHIFT_REG;
assign rci_rcnode_2to169_rc1_c3_exe1_0_reg_2[31:0] = rnode_1to2_c3_exe1_1_NO_SHIFT_REG;
assign rci_rcnode_2to169_rc1_c3_exe1_0_reg_2[63:32] = rnode_1to2_memcoalesce_param_extrValue_6_1_NO_SHIFT_REG;
assign rci_rcnode_2to169_rc1_c3_exe1_0_reg_2[95:64] = rnode_1to2_var__u10_1_NO_SHIFT_REG;

// Register node:
//  * latency = 167
//  * capacity = 167
 logic rcnode_2to169_rc1_c3_exe1_0_valid_out_NO_SHIFT_REG;
 logic rcnode_2to169_rc1_c3_exe1_0_stall_in_NO_SHIFT_REG;
 logic [95:0] rcnode_2to169_rc1_c3_exe1_0_NO_SHIFT_REG;
 logic rcnode_2to169_rc1_c3_exe1_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic [95:0] rcnode_2to169_rc1_c3_exe1_0_reg_169_NO_SHIFT_REG;
 logic rcnode_2to169_rc1_c3_exe1_0_valid_out_reg_169_NO_SHIFT_REG;
 logic rcnode_2to169_rc1_c3_exe1_0_stall_in_reg_169_NO_SHIFT_REG;
 logic rcnode_2to169_rc1_c3_exe1_0_stall_out_0_reg_169_IP_NO_SHIFT_REG;
 logic rcnode_2to169_rc1_c3_exe1_0_stall_out_0_reg_169_NO_SHIFT_REG;

acl_data_fifo rcnode_2to169_rc1_c3_exe1_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_2to169_rc1_c3_exe1_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_2to169_rc1_c3_exe1_0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rcnode_2to169_rc1_c3_exe1_0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rcnode_2to169_rc1_c3_exe1_0_stall_out_0_reg_169_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_2to169_rc1_c3_exe1_0_reg_2),
	.data_out(rcnode_2to169_rc1_c3_exe1_0_reg_169_NO_SHIFT_REG)
);

defparam rcnode_2to169_rc1_c3_exe1_0_reg_169_fifo.DEPTH = 168;
defparam rcnode_2to169_rc1_c3_exe1_0_reg_169_fifo.DATA_WIDTH = 96;
defparam rcnode_2to169_rc1_c3_exe1_0_reg_169_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_2to169_rc1_c3_exe1_0_reg_169_fifo.IMPL = "ram";

assign rcnode_2to169_rc1_c3_exe1_0_reg_169_inputs_ready_NO_SHIFT_REG = (rnode_1to2_c3_exe1_0_valid_out_1_NO_SHIFT_REG & rnode_1to2_memcoalesce_param_extrValue_6_0_valid_out_1_NO_SHIFT_REG & rnode_1to2_var__u10_0_valid_out_1_NO_SHIFT_REG);
assign rcnode_2to169_rc1_c3_exe1_0_stall_out_0_reg_169_NO_SHIFT_REG = (~(rcnode_2to169_rc1_c3_exe1_0_reg_169_inputs_ready_NO_SHIFT_REG) | rcnode_2to169_rc1_c3_exe1_0_stall_out_0_reg_169_IP_NO_SHIFT_REG);
assign rnode_1to2_c3_exe1_0_stall_in_1_NO_SHIFT_REG = rcnode_2to169_rc1_c3_exe1_0_stall_out_0_reg_169_NO_SHIFT_REG;
assign rnode_1to2_memcoalesce_param_extrValue_6_0_stall_in_1_NO_SHIFT_REG = rcnode_2to169_rc1_c3_exe1_0_stall_out_0_reg_169_NO_SHIFT_REG;
assign rnode_1to2_var__u10_0_stall_in_1_NO_SHIFT_REG = rcnode_2to169_rc1_c3_exe1_0_stall_out_0_reg_169_NO_SHIFT_REG;
assign rcnode_2to169_rc1_c3_exe1_0_NO_SHIFT_REG = rcnode_2to169_rc1_c3_exe1_0_reg_169_NO_SHIFT_REG;
assign rcnode_2to169_rc1_c3_exe1_0_stall_in_reg_169_NO_SHIFT_REG = rcnode_2to169_rc1_c3_exe1_0_stall_in_NO_SHIFT_REG;
assign rcnode_2to169_rc1_c3_exe1_0_valid_out_NO_SHIFT_REG = rcnode_2to169_rc1_c3_exe1_0_valid_out_reg_169_NO_SHIFT_REG;

// Register node:
//  * latency = 164
//  * capacity = 164
 logic rnode_2to166_j_419_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to166_j_419_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to166_j_419_0_NO_SHIFT_REG;
 logic rnode_2to166_j_419_0_reg_166_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to166_j_419_0_reg_166_NO_SHIFT_REG;
 logic rnode_2to166_j_419_0_valid_out_reg_166_NO_SHIFT_REG;
 logic rnode_2to166_j_419_0_stall_in_reg_166_NO_SHIFT_REG;
 logic rnode_2to166_j_419_0_stall_out_reg_166_NO_SHIFT_REG;

acl_data_fifo rnode_2to166_j_419_0_reg_166_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to166_j_419_0_reg_166_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to166_j_419_0_stall_in_reg_166_NO_SHIFT_REG),
	.valid_out(rnode_2to166_j_419_0_valid_out_reg_166_NO_SHIFT_REG),
	.stall_out(rnode_2to166_j_419_0_stall_out_reg_166_NO_SHIFT_REG),
	.data_in(rnode_1to2_j_419_1_NO_SHIFT_REG),
	.data_out(rnode_2to166_j_419_0_reg_166_NO_SHIFT_REG)
);

defparam rnode_2to166_j_419_0_reg_166_fifo.DEPTH = 165;
defparam rnode_2to166_j_419_0_reg_166_fifo.DATA_WIDTH = 32;
defparam rnode_2to166_j_419_0_reg_166_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_2to166_j_419_0_reg_166_fifo.IMPL = "ram";

assign rnode_2to166_j_419_0_reg_166_inputs_ready_NO_SHIFT_REG = rnode_1to2_j_419_0_valid_out_1_NO_SHIFT_REG;
assign rnode_1to2_j_419_0_stall_in_1_NO_SHIFT_REG = rnode_2to166_j_419_0_stall_out_reg_166_NO_SHIFT_REG;
assign rnode_2to166_j_419_0_NO_SHIFT_REG = rnode_2to166_j_419_0_reg_166_NO_SHIFT_REG;
assign rnode_2to166_j_419_0_stall_in_reg_166_NO_SHIFT_REG = rnode_2to166_j_419_0_stall_in_NO_SHIFT_REG;
assign rnode_2to166_j_419_0_valid_out_NO_SHIFT_REG = rnode_2to166_j_419_0_valid_out_reg_166_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_167to168_memcoalesce_param_extrValue_2_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_167to168_memcoalesce_param_extrValue_2_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_167to168_memcoalesce_param_extrValue_2_0_NO_SHIFT_REG;
 logic rnode_167to168_memcoalesce_param_extrValue_2_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_167to168_memcoalesce_param_extrValue_2_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_167to168_memcoalesce_param_extrValue_2_1_NO_SHIFT_REG;
 logic rnode_167to168_memcoalesce_param_extrValue_2_0_reg_168_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_167to168_memcoalesce_param_extrValue_2_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_memcoalesce_param_extrValue_2_0_valid_out_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_memcoalesce_param_extrValue_2_0_stall_in_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_memcoalesce_param_extrValue_2_0_stall_out_reg_168_NO_SHIFT_REG;
 reg rnode_167to168_memcoalesce_param_extrValue_2_0_consumed_0_NO_SHIFT_REG;
 reg rnode_167to168_memcoalesce_param_extrValue_2_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_167to168_memcoalesce_param_extrValue_2_0_reg_168_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_167to168_memcoalesce_param_extrValue_2_0_reg_168_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_167to168_memcoalesce_param_extrValue_2_0_stall_in_0_reg_168_NO_SHIFT_REG),
	.valid_out(rnode_167to168_memcoalesce_param_extrValue_2_0_valid_out_0_reg_168_NO_SHIFT_REG),
	.stall_out(rnode_167to168_memcoalesce_param_extrValue_2_0_stall_out_reg_168_NO_SHIFT_REG),
	.data_in(rnode_1to167_memcoalesce_param_extrValue_2_0_NO_SHIFT_REG),
	.data_out(rnode_167to168_memcoalesce_param_extrValue_2_0_reg_168_NO_SHIFT_REG)
);

defparam rnode_167to168_memcoalesce_param_extrValue_2_0_reg_168_fifo.DEPTH = 1;
defparam rnode_167to168_memcoalesce_param_extrValue_2_0_reg_168_fifo.DATA_WIDTH = 32;
defparam rnode_167to168_memcoalesce_param_extrValue_2_0_reg_168_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_167to168_memcoalesce_param_extrValue_2_0_reg_168_fifo.IMPL = "ll_reg";

assign rnode_167to168_memcoalesce_param_extrValue_2_0_reg_168_inputs_ready_NO_SHIFT_REG = rnode_1to167_memcoalesce_param_extrValue_2_0_valid_out_NO_SHIFT_REG;
assign rnode_1to167_memcoalesce_param_extrValue_2_0_stall_in_NO_SHIFT_REG = rnode_167to168_memcoalesce_param_extrValue_2_0_stall_out_reg_168_NO_SHIFT_REG;
assign rnode_167to168_memcoalesce_param_extrValue_2_0_stall_in_0_reg_168_NO_SHIFT_REG = ((rnode_167to168_memcoalesce_param_extrValue_2_0_stall_in_0_NO_SHIFT_REG & ~(rnode_167to168_memcoalesce_param_extrValue_2_0_consumed_0_NO_SHIFT_REG)) | (rnode_167to168_memcoalesce_param_extrValue_2_0_stall_in_1_NO_SHIFT_REG & ~(rnode_167to168_memcoalesce_param_extrValue_2_0_consumed_1_NO_SHIFT_REG)));
assign rnode_167to168_memcoalesce_param_extrValue_2_0_valid_out_0_NO_SHIFT_REG = (rnode_167to168_memcoalesce_param_extrValue_2_0_valid_out_0_reg_168_NO_SHIFT_REG & ~(rnode_167to168_memcoalesce_param_extrValue_2_0_consumed_0_NO_SHIFT_REG));
assign rnode_167to168_memcoalesce_param_extrValue_2_0_valid_out_1_NO_SHIFT_REG = (rnode_167to168_memcoalesce_param_extrValue_2_0_valid_out_0_reg_168_NO_SHIFT_REG & ~(rnode_167to168_memcoalesce_param_extrValue_2_0_consumed_1_NO_SHIFT_REG));
assign rnode_167to168_memcoalesce_param_extrValue_2_0_NO_SHIFT_REG = rnode_167to168_memcoalesce_param_extrValue_2_0_reg_168_NO_SHIFT_REG;
assign rnode_167to168_memcoalesce_param_extrValue_2_1_NO_SHIFT_REG = rnode_167to168_memcoalesce_param_extrValue_2_0_reg_168_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_167to168_memcoalesce_param_extrValue_2_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_167to168_memcoalesce_param_extrValue_2_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_167to168_memcoalesce_param_extrValue_2_0_consumed_0_NO_SHIFT_REG <= (rnode_167to168_memcoalesce_param_extrValue_2_0_valid_out_0_reg_168_NO_SHIFT_REG & (rnode_167to168_memcoalesce_param_extrValue_2_0_consumed_0_NO_SHIFT_REG | ~(rnode_167to168_memcoalesce_param_extrValue_2_0_stall_in_0_NO_SHIFT_REG)) & rnode_167to168_memcoalesce_param_extrValue_2_0_stall_in_0_reg_168_NO_SHIFT_REG);
		rnode_167to168_memcoalesce_param_extrValue_2_0_consumed_1_NO_SHIFT_REG <= (rnode_167to168_memcoalesce_param_extrValue_2_0_valid_out_0_reg_168_NO_SHIFT_REG & (rnode_167to168_memcoalesce_param_extrValue_2_0_consumed_1_NO_SHIFT_REG | ~(rnode_167to168_memcoalesce_param_extrValue_2_0_stall_in_1_NO_SHIFT_REG)) & rnode_167to168_memcoalesce_param_extrValue_2_0_stall_in_0_reg_168_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 162
//  * capacity = 162
 logic rnode_7to169__phi_decision76_xor_or_0_valid_out_NO_SHIFT_REG;
 logic rnode_7to169__phi_decision76_xor_or_0_stall_in_NO_SHIFT_REG;
 logic rnode_7to169__phi_decision76_xor_or_0_NO_SHIFT_REG;
 logic rnode_7to169__phi_decision76_xor_or_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic rnode_7to169__phi_decision76_xor_or_0_reg_169_NO_SHIFT_REG;
 logic rnode_7to169__phi_decision76_xor_or_0_valid_out_reg_169_NO_SHIFT_REG;
 logic rnode_7to169__phi_decision76_xor_or_0_stall_in_reg_169_NO_SHIFT_REG;
 logic rnode_7to169__phi_decision76_xor_or_0_stall_out_reg_169_NO_SHIFT_REG;

acl_data_fifo rnode_7to169__phi_decision76_xor_or_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_7to169__phi_decision76_xor_or_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_7to169__phi_decision76_xor_or_0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rnode_7to169__phi_decision76_xor_or_0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rnode_7to169__phi_decision76_xor_or_0_stall_out_reg_169_NO_SHIFT_REG),
	.data_in(rnode_1to7__phi_decision76_xor_or_1_NO_SHIFT_REG),
	.data_out(rnode_7to169__phi_decision76_xor_or_0_reg_169_NO_SHIFT_REG)
);

defparam rnode_7to169__phi_decision76_xor_or_0_reg_169_fifo.DEPTH = 163;
defparam rnode_7to169__phi_decision76_xor_or_0_reg_169_fifo.DATA_WIDTH = 1;
defparam rnode_7to169__phi_decision76_xor_or_0_reg_169_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_7to169__phi_decision76_xor_or_0_reg_169_fifo.IMPL = "ram";

assign rnode_7to169__phi_decision76_xor_or_0_reg_169_inputs_ready_NO_SHIFT_REG = rnode_1to7__phi_decision76_xor_or_0_valid_out_1_NO_SHIFT_REG;
assign rnode_1to7__phi_decision76_xor_or_0_stall_in_1_NO_SHIFT_REG = rnode_7to169__phi_decision76_xor_or_0_stall_out_reg_169_NO_SHIFT_REG;
assign rnode_7to169__phi_decision76_xor_or_0_NO_SHIFT_REG = rnode_7to169__phi_decision76_xor_or_0_reg_169_NO_SHIFT_REG;
assign rnode_7to169__phi_decision76_xor_or_0_stall_in_reg_169_NO_SHIFT_REG = rnode_7to169__phi_decision76_xor_or_0_stall_in_NO_SHIFT_REG;
assign rnode_7to169__phi_decision76_xor_or_0_valid_out_NO_SHIFT_REG = rnode_7to169__phi_decision76_xor_or_0_valid_out_reg_169_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_166to167_maxValue_418_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_166to167_maxValue_418_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_maxValue_418_0_NO_SHIFT_REG;
 logic rnode_166to167_maxValue_418_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_166to167_maxValue_418_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_maxValue_418_1_NO_SHIFT_REG;
 logic rnode_166to167_maxValue_418_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_maxValue_418_0_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_maxValue_418_0_valid_out_0_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_maxValue_418_0_stall_in_0_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_maxValue_418_0_stall_out_reg_167_NO_SHIFT_REG;
 reg rnode_166to167_maxValue_418_0_consumed_0_NO_SHIFT_REG;
 reg rnode_166to167_maxValue_418_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_166to167_maxValue_418_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_166to167_maxValue_418_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_166to167_maxValue_418_0_stall_in_0_reg_167_NO_SHIFT_REG),
	.valid_out(rnode_166to167_maxValue_418_0_valid_out_0_reg_167_NO_SHIFT_REG),
	.stall_out(rnode_166to167_maxValue_418_0_stall_out_reg_167_NO_SHIFT_REG),
	.data_in(rnode_1to166_maxValue_418_0_NO_SHIFT_REG),
	.data_out(rnode_166to167_maxValue_418_0_reg_167_NO_SHIFT_REG)
);

defparam rnode_166to167_maxValue_418_0_reg_167_fifo.DEPTH = 1;
defparam rnode_166to167_maxValue_418_0_reg_167_fifo.DATA_WIDTH = 32;
defparam rnode_166to167_maxValue_418_0_reg_167_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_166to167_maxValue_418_0_reg_167_fifo.IMPL = "ll_reg";

assign rnode_166to167_maxValue_418_0_reg_167_inputs_ready_NO_SHIFT_REG = rnode_1to166_maxValue_418_0_valid_out_NO_SHIFT_REG;
assign rnode_1to166_maxValue_418_0_stall_in_NO_SHIFT_REG = rnode_166to167_maxValue_418_0_stall_out_reg_167_NO_SHIFT_REG;
assign rnode_166to167_maxValue_418_0_stall_in_0_reg_167_NO_SHIFT_REG = ((rnode_166to167_maxValue_418_0_stall_in_0_NO_SHIFT_REG & ~(rnode_166to167_maxValue_418_0_consumed_0_NO_SHIFT_REG)) | (rnode_166to167_maxValue_418_0_stall_in_1_NO_SHIFT_REG & ~(rnode_166to167_maxValue_418_0_consumed_1_NO_SHIFT_REG)));
assign rnode_166to167_maxValue_418_0_valid_out_0_NO_SHIFT_REG = (rnode_166to167_maxValue_418_0_valid_out_0_reg_167_NO_SHIFT_REG & ~(rnode_166to167_maxValue_418_0_consumed_0_NO_SHIFT_REG));
assign rnode_166to167_maxValue_418_0_valid_out_1_NO_SHIFT_REG = (rnode_166to167_maxValue_418_0_valid_out_0_reg_167_NO_SHIFT_REG & ~(rnode_166to167_maxValue_418_0_consumed_1_NO_SHIFT_REG));
assign rnode_166to167_maxValue_418_0_NO_SHIFT_REG = rnode_166to167_maxValue_418_0_reg_167_NO_SHIFT_REG;
assign rnode_166to167_maxValue_418_1_NO_SHIFT_REG = rnode_166to167_maxValue_418_0_reg_167_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_166to167_maxValue_418_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_166to167_maxValue_418_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_166to167_maxValue_418_0_consumed_0_NO_SHIFT_REG <= (rnode_166to167_maxValue_418_0_valid_out_0_reg_167_NO_SHIFT_REG & (rnode_166to167_maxValue_418_0_consumed_0_NO_SHIFT_REG | ~(rnode_166to167_maxValue_418_0_stall_in_0_NO_SHIFT_REG)) & rnode_166to167_maxValue_418_0_stall_in_0_reg_167_NO_SHIFT_REG);
		rnode_166to167_maxValue_418_0_consumed_1_NO_SHIFT_REG <= (rnode_166to167_maxValue_418_0_valid_out_0_reg_167_NO_SHIFT_REG & (rnode_166to167_maxValue_418_0_consumed_1_NO_SHIFT_REG | ~(rnode_166to167_maxValue_418_0_stall_in_1_NO_SHIFT_REG)) & rnode_166to167_maxValue_418_0_stall_in_0_reg_167_NO_SHIFT_REG);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_c1_eni228_stall_local;
wire [223:0] local_bb5_c1_eni228;

assign local_bb5_c1_eni228[63:0] = rnode_1to2_bb5_c1_eni129_0_NO_SHIFT_REG[63:0];
assign local_bb5_c1_eni228[95:64] = rnode_1to2_i_325_0_NO_SHIFT_REG;
assign local_bb5_c1_eni228[223:96] = rnode_1to2_bb5_c1_eni129_0_NO_SHIFT_REG[223:96];

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_167to168_i_325_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_167to168_i_325_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_167to168_i_325_0_NO_SHIFT_REG;
 logic rnode_167to168_i_325_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_167to168_i_325_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_167to168_i_325_1_NO_SHIFT_REG;
 logic rnode_167to168_i_325_0_reg_168_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_167to168_i_325_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_i_325_0_valid_out_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_i_325_0_stall_in_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_i_325_0_stall_out_reg_168_NO_SHIFT_REG;
 reg rnode_167to168_i_325_0_consumed_0_NO_SHIFT_REG;
 reg rnode_167to168_i_325_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_167to168_i_325_0_reg_168_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_167to168_i_325_0_reg_168_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_167to168_i_325_0_stall_in_0_reg_168_NO_SHIFT_REG),
	.valid_out(rnode_167to168_i_325_0_valid_out_0_reg_168_NO_SHIFT_REG),
	.stall_out(rnode_167to168_i_325_0_stall_out_reg_168_NO_SHIFT_REG),
	.data_in(rnode_2to167_i_325_0_NO_SHIFT_REG),
	.data_out(rnode_167to168_i_325_0_reg_168_NO_SHIFT_REG)
);

defparam rnode_167to168_i_325_0_reg_168_fifo.DEPTH = 1;
defparam rnode_167to168_i_325_0_reg_168_fifo.DATA_WIDTH = 32;
defparam rnode_167to168_i_325_0_reg_168_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_167to168_i_325_0_reg_168_fifo.IMPL = "ll_reg";

assign rnode_167to168_i_325_0_reg_168_inputs_ready_NO_SHIFT_REG = rnode_2to167_i_325_0_valid_out_NO_SHIFT_REG;
assign rnode_2to167_i_325_0_stall_in_NO_SHIFT_REG = rnode_167to168_i_325_0_stall_out_reg_168_NO_SHIFT_REG;
assign rnode_167to168_i_325_0_stall_in_0_reg_168_NO_SHIFT_REG = ((rnode_167to168_i_325_0_stall_in_0_NO_SHIFT_REG & ~(rnode_167to168_i_325_0_consumed_0_NO_SHIFT_REG)) | (rnode_167to168_i_325_0_stall_in_1_NO_SHIFT_REG & ~(rnode_167to168_i_325_0_consumed_1_NO_SHIFT_REG)));
assign rnode_167to168_i_325_0_valid_out_0_NO_SHIFT_REG = (rnode_167to168_i_325_0_valid_out_0_reg_168_NO_SHIFT_REG & ~(rnode_167to168_i_325_0_consumed_0_NO_SHIFT_REG));
assign rnode_167to168_i_325_0_valid_out_1_NO_SHIFT_REG = (rnode_167to168_i_325_0_valid_out_0_reg_168_NO_SHIFT_REG & ~(rnode_167to168_i_325_0_consumed_1_NO_SHIFT_REG));
assign rnode_167to168_i_325_0_NO_SHIFT_REG = rnode_167to168_i_325_0_reg_168_NO_SHIFT_REG;
assign rnode_167to168_i_325_1_NO_SHIFT_REG = rnode_167to168_i_325_0_reg_168_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_167to168_i_325_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_167to168_i_325_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_167to168_i_325_0_consumed_0_NO_SHIFT_REG <= (rnode_167to168_i_325_0_valid_out_0_reg_168_NO_SHIFT_REG & (rnode_167to168_i_325_0_consumed_0_NO_SHIFT_REG | ~(rnode_167to168_i_325_0_stall_in_0_NO_SHIFT_REG)) & rnode_167to168_i_325_0_stall_in_0_reg_168_NO_SHIFT_REG);
		rnode_167to168_i_325_0_consumed_1_NO_SHIFT_REG <= (rnode_167to168_i_325_0_valid_out_0_reg_168_NO_SHIFT_REG & (rnode_167to168_i_325_0_consumed_1_NO_SHIFT_REG | ~(rnode_167to168_i_325_0_stall_in_1_NO_SHIFT_REG)) & rnode_167to168_i_325_0_stall_in_0_reg_168_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_166to167_j_419_0_valid_out_NO_SHIFT_REG;
 logic rnode_166to167_j_419_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_j_419_0_NO_SHIFT_REG;
 logic rnode_166to167_j_419_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_j_419_0_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_j_419_0_valid_out_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_j_419_0_stall_in_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_j_419_0_stall_out_reg_167_NO_SHIFT_REG;

acl_data_fifo rnode_166to167_j_419_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_166to167_j_419_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_166to167_j_419_0_stall_in_reg_167_NO_SHIFT_REG),
	.valid_out(rnode_166to167_j_419_0_valid_out_reg_167_NO_SHIFT_REG),
	.stall_out(rnode_166to167_j_419_0_stall_out_reg_167_NO_SHIFT_REG),
	.data_in(rnode_2to166_j_419_0_NO_SHIFT_REG),
	.data_out(rnode_166to167_j_419_0_reg_167_NO_SHIFT_REG)
);

defparam rnode_166to167_j_419_0_reg_167_fifo.DEPTH = 1;
defparam rnode_166to167_j_419_0_reg_167_fifo.DATA_WIDTH = 32;
defparam rnode_166to167_j_419_0_reg_167_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_166to167_j_419_0_reg_167_fifo.IMPL = "ll_reg";

assign rnode_166to167_j_419_0_reg_167_inputs_ready_NO_SHIFT_REG = rnode_2to166_j_419_0_valid_out_NO_SHIFT_REG;
assign rnode_2to166_j_419_0_stall_in_NO_SHIFT_REG = rnode_166to167_j_419_0_stall_out_reg_167_NO_SHIFT_REG;
assign rnode_166to167_j_419_0_NO_SHIFT_REG = rnode_166to167_j_419_0_reg_167_NO_SHIFT_REG;
assign rnode_166to167_j_419_0_stall_in_reg_167_NO_SHIFT_REG = rnode_166to167_j_419_0_stall_in_NO_SHIFT_REG;
assign rnode_166to167_j_419_0_valid_out_NO_SHIFT_REG = rnode_166to167_j_419_0_valid_out_reg_167_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_168to169_memcoalesce_param_extrValue_2_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_168to169_memcoalesce_param_extrValue_2_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_168to169_memcoalesce_param_extrValue_2_0_NO_SHIFT_REG;
 logic rnode_168to169_memcoalesce_param_extrValue_2_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_168to169_memcoalesce_param_extrValue_2_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_168to169_memcoalesce_param_extrValue_2_1_NO_SHIFT_REG;
 logic rnode_168to169_memcoalesce_param_extrValue_2_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_168to169_memcoalesce_param_extrValue_2_0_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_memcoalesce_param_extrValue_2_0_valid_out_0_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_memcoalesce_param_extrValue_2_0_stall_in_0_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_memcoalesce_param_extrValue_2_0_stall_out_reg_169_NO_SHIFT_REG;
 reg rnode_168to169_memcoalesce_param_extrValue_2_0_consumed_0_NO_SHIFT_REG;
 reg rnode_168to169_memcoalesce_param_extrValue_2_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_168to169_memcoalesce_param_extrValue_2_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_168to169_memcoalesce_param_extrValue_2_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_168to169_memcoalesce_param_extrValue_2_0_stall_in_0_reg_169_NO_SHIFT_REG),
	.valid_out(rnode_168to169_memcoalesce_param_extrValue_2_0_valid_out_0_reg_169_NO_SHIFT_REG),
	.stall_out(rnode_168to169_memcoalesce_param_extrValue_2_0_stall_out_reg_169_NO_SHIFT_REG),
	.data_in(rnode_167to168_memcoalesce_param_extrValue_2_1_NO_SHIFT_REG),
	.data_out(rnode_168to169_memcoalesce_param_extrValue_2_0_reg_169_NO_SHIFT_REG)
);

defparam rnode_168to169_memcoalesce_param_extrValue_2_0_reg_169_fifo.DEPTH = 2;
defparam rnode_168to169_memcoalesce_param_extrValue_2_0_reg_169_fifo.DATA_WIDTH = 32;
defparam rnode_168to169_memcoalesce_param_extrValue_2_0_reg_169_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_168to169_memcoalesce_param_extrValue_2_0_reg_169_fifo.IMPL = "ll_reg";

assign rnode_168to169_memcoalesce_param_extrValue_2_0_reg_169_inputs_ready_NO_SHIFT_REG = rnode_167to168_memcoalesce_param_extrValue_2_0_valid_out_1_NO_SHIFT_REG;
assign rnode_167to168_memcoalesce_param_extrValue_2_0_stall_in_1_NO_SHIFT_REG = rnode_168to169_memcoalesce_param_extrValue_2_0_stall_out_reg_169_NO_SHIFT_REG;
assign rnode_168to169_memcoalesce_param_extrValue_2_0_stall_in_0_reg_169_NO_SHIFT_REG = ((rnode_168to169_memcoalesce_param_extrValue_2_0_stall_in_0_NO_SHIFT_REG & ~(rnode_168to169_memcoalesce_param_extrValue_2_0_consumed_0_NO_SHIFT_REG)) | (rnode_168to169_memcoalesce_param_extrValue_2_0_stall_in_1_NO_SHIFT_REG & ~(rnode_168to169_memcoalesce_param_extrValue_2_0_consumed_1_NO_SHIFT_REG)));
assign rnode_168to169_memcoalesce_param_extrValue_2_0_valid_out_0_NO_SHIFT_REG = (rnode_168to169_memcoalesce_param_extrValue_2_0_valid_out_0_reg_169_NO_SHIFT_REG & ~(rnode_168to169_memcoalesce_param_extrValue_2_0_consumed_0_NO_SHIFT_REG));
assign rnode_168to169_memcoalesce_param_extrValue_2_0_valid_out_1_NO_SHIFT_REG = (rnode_168to169_memcoalesce_param_extrValue_2_0_valid_out_0_reg_169_NO_SHIFT_REG & ~(rnode_168to169_memcoalesce_param_extrValue_2_0_consumed_1_NO_SHIFT_REG));
assign rnode_168to169_memcoalesce_param_extrValue_2_0_NO_SHIFT_REG = rnode_168to169_memcoalesce_param_extrValue_2_0_reg_169_NO_SHIFT_REG;
assign rnode_168to169_memcoalesce_param_extrValue_2_1_NO_SHIFT_REG = rnode_168to169_memcoalesce_param_extrValue_2_0_reg_169_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_168to169_memcoalesce_param_extrValue_2_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_168to169_memcoalesce_param_extrValue_2_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_168to169_memcoalesce_param_extrValue_2_0_consumed_0_NO_SHIFT_REG <= (rnode_168to169_memcoalesce_param_extrValue_2_0_valid_out_0_reg_169_NO_SHIFT_REG & (rnode_168to169_memcoalesce_param_extrValue_2_0_consumed_0_NO_SHIFT_REG | ~(rnode_168to169_memcoalesce_param_extrValue_2_0_stall_in_0_NO_SHIFT_REG)) & rnode_168to169_memcoalesce_param_extrValue_2_0_stall_in_0_reg_169_NO_SHIFT_REG);
		rnode_168to169_memcoalesce_param_extrValue_2_0_consumed_1_NO_SHIFT_REG <= (rnode_168to169_memcoalesce_param_extrValue_2_0_valid_out_0_reg_169_NO_SHIFT_REG & (rnode_168to169_memcoalesce_param_extrValue_2_0_consumed_1_NO_SHIFT_REG | ~(rnode_168to169_memcoalesce_param_extrValue_2_0_stall_in_1_NO_SHIFT_REG)) & rnode_168to169_memcoalesce_param_extrValue_2_0_stall_in_0_reg_169_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 3
//  * capacity = 3
 logic rnode_167to170_maxValue_418_0_valid_out_NO_SHIFT_REG;
 logic rnode_167to170_maxValue_418_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_167to170_maxValue_418_0_NO_SHIFT_REG;
 logic rnode_167to170_maxValue_418_0_reg_170_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_167to170_maxValue_418_0_reg_170_NO_SHIFT_REG;
 logic rnode_167to170_maxValue_418_0_valid_out_reg_170_NO_SHIFT_REG;
 logic rnode_167to170_maxValue_418_0_stall_in_reg_170_NO_SHIFT_REG;
 logic rnode_167to170_maxValue_418_0_stall_out_reg_170_NO_SHIFT_REG;

acl_data_fifo rnode_167to170_maxValue_418_0_reg_170_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_167to170_maxValue_418_0_reg_170_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_167to170_maxValue_418_0_stall_in_reg_170_NO_SHIFT_REG),
	.valid_out(rnode_167to170_maxValue_418_0_valid_out_reg_170_NO_SHIFT_REG),
	.stall_out(rnode_167to170_maxValue_418_0_stall_out_reg_170_NO_SHIFT_REG),
	.data_in(rnode_166to167_maxValue_418_1_NO_SHIFT_REG),
	.data_out(rnode_167to170_maxValue_418_0_reg_170_NO_SHIFT_REG)
);

defparam rnode_167to170_maxValue_418_0_reg_170_fifo.DEPTH = 4;
defparam rnode_167to170_maxValue_418_0_reg_170_fifo.DATA_WIDTH = 32;
defparam rnode_167to170_maxValue_418_0_reg_170_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_167to170_maxValue_418_0_reg_170_fifo.IMPL = "ll_reg";

assign rnode_167to170_maxValue_418_0_reg_170_inputs_ready_NO_SHIFT_REG = rnode_166to167_maxValue_418_0_valid_out_1_NO_SHIFT_REG;
assign rnode_166to167_maxValue_418_0_stall_in_1_NO_SHIFT_REG = rnode_167to170_maxValue_418_0_stall_out_reg_170_NO_SHIFT_REG;
assign rnode_167to170_maxValue_418_0_NO_SHIFT_REG = rnode_167to170_maxValue_418_0_reg_170_NO_SHIFT_REG;
assign rnode_167to170_maxValue_418_0_stall_in_reg_170_NO_SHIFT_REG = rnode_167to170_maxValue_418_0_stall_in_NO_SHIFT_REG;
assign rnode_167to170_maxValue_418_0_valid_out_NO_SHIFT_REG = rnode_167to170_maxValue_418_0_valid_out_reg_170_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_c1_eni327_stall_local;
wire [223:0] local_bb5_c1_eni327;

assign local_bb5_c1_eni327[95:0] = local_bb5_c1_eni228[95:0];
assign local_bb5_c1_eni327[127:96] = rnode_1to2_c3_exe1_0_NO_SHIFT_REG;
assign local_bb5_c1_eni327[223:128] = local_bb5_c1_eni228[223:128];

// This section implements an unregistered operation.
// 
wire local_bb5_inc47_valid_out;
wire local_bb5_inc47_stall_in;
wire local_bb5_inc47_inputs_ready;
wire local_bb5_inc47_stall_local;
wire [31:0] local_bb5_inc47;

assign local_bb5_inc47_inputs_ready = rnode_167to168_i_325_0_valid_out_0_NO_SHIFT_REG;
assign local_bb5_inc47 = (rnode_167to168_i_325_0_NO_SHIFT_REG + 32'h1);
assign local_bb5_inc47_valid_out = local_bb5_inc47_inputs_ready;
assign local_bb5_inc47_stall_local = local_bb5_inc47_stall_in;
assign rnode_167to168_i_325_0_stall_in_0_NO_SHIFT_REG = (|local_bb5_inc47_stall_local);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_168to169_i_325_0_valid_out_NO_SHIFT_REG;
 logic rnode_168to169_i_325_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_168to169_i_325_0_NO_SHIFT_REG;
 logic rnode_168to169_i_325_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_168to169_i_325_0_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_i_325_0_valid_out_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_i_325_0_stall_in_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_i_325_0_stall_out_reg_169_NO_SHIFT_REG;

acl_data_fifo rnode_168to169_i_325_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_168to169_i_325_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_168to169_i_325_0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rnode_168to169_i_325_0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rnode_168to169_i_325_0_stall_out_reg_169_NO_SHIFT_REG),
	.data_in(rnode_167to168_i_325_1_NO_SHIFT_REG),
	.data_out(rnode_168to169_i_325_0_reg_169_NO_SHIFT_REG)
);

defparam rnode_168to169_i_325_0_reg_169_fifo.DEPTH = 2;
defparam rnode_168to169_i_325_0_reg_169_fifo.DATA_WIDTH = 32;
defparam rnode_168to169_i_325_0_reg_169_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_168to169_i_325_0_reg_169_fifo.IMPL = "ll_reg";

assign rnode_168to169_i_325_0_reg_169_inputs_ready_NO_SHIFT_REG = rnode_167to168_i_325_0_valid_out_1_NO_SHIFT_REG;
assign rnode_167to168_i_325_0_stall_in_1_NO_SHIFT_REG = rnode_168to169_i_325_0_stall_out_reg_169_NO_SHIFT_REG;
assign rnode_168to169_i_325_0_NO_SHIFT_REG = rnode_168to169_i_325_0_reg_169_NO_SHIFT_REG;
assign rnode_168to169_i_325_0_stall_in_reg_169_NO_SHIFT_REG = rnode_168to169_i_325_0_stall_in_NO_SHIFT_REG;
assign rnode_168to169_i_325_0_valid_out_NO_SHIFT_REG = rnode_168to169_i_325_0_valid_out_reg_169_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_inc_valid_out;
wire local_bb5_inc_stall_in;
wire local_bb5_inc_inputs_ready;
wire local_bb5_inc_stall_local;
wire [31:0] local_bb5_inc;

assign local_bb5_inc_inputs_ready = rnode_166to167_j_419_0_valid_out_NO_SHIFT_REG;
assign local_bb5_inc = (rnode_166to167_j_419_0_NO_SHIFT_REG + 32'h1);
assign local_bb5_inc_valid_out = local_bb5_inc_inputs_ready;
assign local_bb5_inc_stall_local = local_bb5_inc_stall_in;
assign rnode_166to167_j_419_0_stall_in_NO_SHIFT_REG = (|local_bb5_inc_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb5_c1_eni426_stall_local;
wire [223:0] local_bb5_c1_eni426;

assign local_bb5_c1_eni426[127:0] = local_bb5_c1_eni327[127:0];
assign local_bb5_c1_eni426[159:128] = rnode_1to2_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG;
assign local_bb5_c1_eni426[223:160] = local_bb5_c1_eni327[223:160];

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_168to169_bb5_inc47_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_168to169_bb5_inc47_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_168to169_bb5_inc47_0_NO_SHIFT_REG;
 logic rnode_168to169_bb5_inc47_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_168to169_bb5_inc47_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_168to169_bb5_inc47_1_NO_SHIFT_REG;
 logic rnode_168to169_bb5_inc47_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_168to169_bb5_inc47_0_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb5_inc47_0_valid_out_0_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb5_inc47_0_stall_in_0_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb5_inc47_0_stall_out_reg_169_NO_SHIFT_REG;
 reg rnode_168to169_bb5_inc47_0_consumed_0_NO_SHIFT_REG;
 reg rnode_168to169_bb5_inc47_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_168to169_bb5_inc47_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_168to169_bb5_inc47_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_168to169_bb5_inc47_0_stall_in_0_reg_169_NO_SHIFT_REG),
	.valid_out(rnode_168to169_bb5_inc47_0_valid_out_0_reg_169_NO_SHIFT_REG),
	.stall_out(rnode_168to169_bb5_inc47_0_stall_out_reg_169_NO_SHIFT_REG),
	.data_in(local_bb5_inc47),
	.data_out(rnode_168to169_bb5_inc47_0_reg_169_NO_SHIFT_REG)
);

defparam rnode_168to169_bb5_inc47_0_reg_169_fifo.DEPTH = 2;
defparam rnode_168to169_bb5_inc47_0_reg_169_fifo.DATA_WIDTH = 32;
defparam rnode_168to169_bb5_inc47_0_reg_169_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_168to169_bb5_inc47_0_reg_169_fifo.IMPL = "ll_reg";

assign rnode_168to169_bb5_inc47_0_reg_169_inputs_ready_NO_SHIFT_REG = local_bb5_inc47_valid_out;
assign local_bb5_inc47_stall_in = rnode_168to169_bb5_inc47_0_stall_out_reg_169_NO_SHIFT_REG;
assign rnode_168to169_bb5_inc47_0_stall_in_0_reg_169_NO_SHIFT_REG = ((rnode_168to169_bb5_inc47_0_stall_in_0_NO_SHIFT_REG & ~(rnode_168to169_bb5_inc47_0_consumed_0_NO_SHIFT_REG)) | (rnode_168to169_bb5_inc47_0_stall_in_1_NO_SHIFT_REG & ~(rnode_168to169_bb5_inc47_0_consumed_1_NO_SHIFT_REG)));
assign rnode_168to169_bb5_inc47_0_valid_out_0_NO_SHIFT_REG = (rnode_168to169_bb5_inc47_0_valid_out_0_reg_169_NO_SHIFT_REG & ~(rnode_168to169_bb5_inc47_0_consumed_0_NO_SHIFT_REG));
assign rnode_168to169_bb5_inc47_0_valid_out_1_NO_SHIFT_REG = (rnode_168to169_bb5_inc47_0_valid_out_0_reg_169_NO_SHIFT_REG & ~(rnode_168to169_bb5_inc47_0_consumed_1_NO_SHIFT_REG));
assign rnode_168to169_bb5_inc47_0_NO_SHIFT_REG = rnode_168to169_bb5_inc47_0_reg_169_NO_SHIFT_REG;
assign rnode_168to169_bb5_inc47_1_NO_SHIFT_REG = rnode_168to169_bb5_inc47_0_reg_169_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_168to169_bb5_inc47_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_168to169_bb5_inc47_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_168to169_bb5_inc47_0_consumed_0_NO_SHIFT_REG <= (rnode_168to169_bb5_inc47_0_valid_out_0_reg_169_NO_SHIFT_REG & (rnode_168to169_bb5_inc47_0_consumed_0_NO_SHIFT_REG | ~(rnode_168to169_bb5_inc47_0_stall_in_0_NO_SHIFT_REG)) & rnode_168to169_bb5_inc47_0_stall_in_0_reg_169_NO_SHIFT_REG);
		rnode_168to169_bb5_inc47_0_consumed_1_NO_SHIFT_REG <= (rnode_168to169_bb5_inc47_0_valid_out_0_reg_169_NO_SHIFT_REG & (rnode_168to169_bb5_inc47_0_consumed_1_NO_SHIFT_REG | ~(rnode_168to169_bb5_inc47_0_stall_in_1_NO_SHIFT_REG)) & rnode_168to169_bb5_inc47_0_stall_in_0_reg_169_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_167to168_bb5_inc_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_167to168_bb5_inc_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_167to168_bb5_inc_0_NO_SHIFT_REG;
 logic rnode_167to168_bb5_inc_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_167to168_bb5_inc_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_167to168_bb5_inc_1_NO_SHIFT_REG;
 logic rnode_167to168_bb5_inc_0_reg_168_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_167to168_bb5_inc_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb5_inc_0_valid_out_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb5_inc_0_stall_in_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb5_inc_0_stall_out_reg_168_NO_SHIFT_REG;
 reg rnode_167to168_bb5_inc_0_consumed_0_NO_SHIFT_REG;
 reg rnode_167to168_bb5_inc_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_167to168_bb5_inc_0_reg_168_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_167to168_bb5_inc_0_reg_168_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_167to168_bb5_inc_0_stall_in_0_reg_168_NO_SHIFT_REG),
	.valid_out(rnode_167to168_bb5_inc_0_valid_out_0_reg_168_NO_SHIFT_REG),
	.stall_out(rnode_167to168_bb5_inc_0_stall_out_reg_168_NO_SHIFT_REG),
	.data_in(local_bb5_inc),
	.data_out(rnode_167to168_bb5_inc_0_reg_168_NO_SHIFT_REG)
);

defparam rnode_167to168_bb5_inc_0_reg_168_fifo.DEPTH = 1;
defparam rnode_167to168_bb5_inc_0_reg_168_fifo.DATA_WIDTH = 32;
defparam rnode_167to168_bb5_inc_0_reg_168_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_167to168_bb5_inc_0_reg_168_fifo.IMPL = "ll_reg";

assign rnode_167to168_bb5_inc_0_reg_168_inputs_ready_NO_SHIFT_REG = local_bb5_inc_valid_out;
assign local_bb5_inc_stall_in = rnode_167to168_bb5_inc_0_stall_out_reg_168_NO_SHIFT_REG;
assign rnode_167to168_bb5_inc_0_stall_in_0_reg_168_NO_SHIFT_REG = ((rnode_167to168_bb5_inc_0_stall_in_0_NO_SHIFT_REG & ~(rnode_167to168_bb5_inc_0_consumed_0_NO_SHIFT_REG)) | (rnode_167to168_bb5_inc_0_stall_in_1_NO_SHIFT_REG & ~(rnode_167to168_bb5_inc_0_consumed_1_NO_SHIFT_REG)));
assign rnode_167to168_bb5_inc_0_valid_out_0_NO_SHIFT_REG = (rnode_167to168_bb5_inc_0_valid_out_0_reg_168_NO_SHIFT_REG & ~(rnode_167to168_bb5_inc_0_consumed_0_NO_SHIFT_REG));
assign rnode_167to168_bb5_inc_0_valid_out_1_NO_SHIFT_REG = (rnode_167to168_bb5_inc_0_valid_out_0_reg_168_NO_SHIFT_REG & ~(rnode_167to168_bb5_inc_0_consumed_1_NO_SHIFT_REG));
assign rnode_167to168_bb5_inc_0_NO_SHIFT_REG = rnode_167to168_bb5_inc_0_reg_168_NO_SHIFT_REG;
assign rnode_167to168_bb5_inc_1_NO_SHIFT_REG = rnode_167to168_bb5_inc_0_reg_168_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_167to168_bb5_inc_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_167to168_bb5_inc_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_167to168_bb5_inc_0_consumed_0_NO_SHIFT_REG <= (rnode_167to168_bb5_inc_0_valid_out_0_reg_168_NO_SHIFT_REG & (rnode_167to168_bb5_inc_0_consumed_0_NO_SHIFT_REG | ~(rnode_167to168_bb5_inc_0_stall_in_0_NO_SHIFT_REG)) & rnode_167to168_bb5_inc_0_stall_in_0_reg_168_NO_SHIFT_REG);
		rnode_167to168_bb5_inc_0_consumed_1_NO_SHIFT_REG <= (rnode_167to168_bb5_inc_0_valid_out_0_reg_168_NO_SHIFT_REG & (rnode_167to168_bb5_inc_0_consumed_1_NO_SHIFT_REG | ~(rnode_167to168_bb5_inc_0_stall_in_1_NO_SHIFT_REG)) & rnode_167to168_bb5_inc_0_stall_in_0_reg_168_NO_SHIFT_REG);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_c1_eni525_stall_local;
wire [223:0] local_bb5_c1_eni525;

assign local_bb5_c1_eni525[159:0] = local_bb5_c1_eni426[159:0];
assign local_bb5_c1_eni525[191:160] = rnode_1to2_var__u10_0_NO_SHIFT_REG;
assign local_bb5_c1_eni525[223:192] = local_bb5_c1_eni426[223:192];

// This section implements an unregistered operation.
// 
wire local_bb5_cmp21_valid_out;
wire local_bb5_cmp21_stall_in;
wire local_bb5_cmp21_inputs_ready;
wire local_bb5_cmp21_stall_local;
wire local_bb5_cmp21;

assign local_bb5_cmp21_inputs_ready = (rnode_168to169_bb5_inc47_0_valid_out_0_NO_SHIFT_REG & rnode_168to169_memcoalesce_param_extrValue_2_0_valid_out_0_NO_SHIFT_REG);
assign local_bb5_cmp21 = ($signed(rnode_168to169_bb5_inc47_0_NO_SHIFT_REG) < $signed(rnode_168to169_memcoalesce_param_extrValue_2_0_NO_SHIFT_REG));
assign local_bb5_cmp21_valid_out = local_bb5_cmp21_inputs_ready;
assign local_bb5_cmp21_stall_local = local_bb5_cmp21_stall_in;
assign rnode_168to169_bb5_inc47_0_stall_in_0_NO_SHIFT_REG = (local_bb5_cmp21_stall_local | ~(local_bb5_cmp21_inputs_ready));
assign rnode_168to169_memcoalesce_param_extrValue_2_0_stall_in_0_NO_SHIFT_REG = (local_bb5_cmp21_stall_local | ~(local_bb5_cmp21_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb5_cmp25_valid_out;
wire local_bb5_cmp25_stall_in;
wire local_bb5_cmp25_inputs_ready;
wire local_bb5_cmp25_stall_local;
wire local_bb5_cmp25;

assign local_bb5_cmp25_inputs_ready = (rnode_167to168_bb5_inc_0_valid_out_0_NO_SHIFT_REG & rnode_167to168_memcoalesce_param_extrValue_2_0_valid_out_0_NO_SHIFT_REG);
assign local_bb5_cmp25 = ($signed(rnode_167to168_bb5_inc_0_NO_SHIFT_REG) < $signed(rnode_167to168_memcoalesce_param_extrValue_2_0_NO_SHIFT_REG));
assign local_bb5_cmp25_valid_out = local_bb5_cmp25_inputs_ready;
assign local_bb5_cmp25_stall_local = local_bb5_cmp25_stall_in;
assign rnode_167to168_bb5_inc_0_stall_in_0_NO_SHIFT_REG = (local_bb5_cmp25_stall_local | ~(local_bb5_cmp25_inputs_ready));
assign rnode_167to168_memcoalesce_param_extrValue_2_0_stall_in_0_NO_SHIFT_REG = (local_bb5_cmp25_stall_local | ~(local_bb5_cmp25_inputs_ready));

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_168to170_bb5_inc_0_valid_out_NO_SHIFT_REG;
 logic rnode_168to170_bb5_inc_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_168to170_bb5_inc_0_NO_SHIFT_REG;
 logic rnode_168to170_bb5_inc_0_reg_170_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_168to170_bb5_inc_0_reg_170_NO_SHIFT_REG;
 logic rnode_168to170_bb5_inc_0_valid_out_reg_170_NO_SHIFT_REG;
 logic rnode_168to170_bb5_inc_0_stall_in_reg_170_NO_SHIFT_REG;
 logic rnode_168to170_bb5_inc_0_stall_out_reg_170_NO_SHIFT_REG;

acl_data_fifo rnode_168to170_bb5_inc_0_reg_170_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_168to170_bb5_inc_0_reg_170_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_168to170_bb5_inc_0_stall_in_reg_170_NO_SHIFT_REG),
	.valid_out(rnode_168to170_bb5_inc_0_valid_out_reg_170_NO_SHIFT_REG),
	.stall_out(rnode_168to170_bb5_inc_0_stall_out_reg_170_NO_SHIFT_REG),
	.data_in(rnode_167to168_bb5_inc_1_NO_SHIFT_REG),
	.data_out(rnode_168to170_bb5_inc_0_reg_170_NO_SHIFT_REG)
);

defparam rnode_168to170_bb5_inc_0_reg_170_fifo.DEPTH = 3;
defparam rnode_168to170_bb5_inc_0_reg_170_fifo.DATA_WIDTH = 32;
defparam rnode_168to170_bb5_inc_0_reg_170_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_168to170_bb5_inc_0_reg_170_fifo.IMPL = "ll_reg";

assign rnode_168to170_bb5_inc_0_reg_170_inputs_ready_NO_SHIFT_REG = rnode_167to168_bb5_inc_0_valid_out_1_NO_SHIFT_REG;
assign rnode_167to168_bb5_inc_0_stall_in_1_NO_SHIFT_REG = rnode_168to170_bb5_inc_0_stall_out_reg_170_NO_SHIFT_REG;
assign rnode_168to170_bb5_inc_0_NO_SHIFT_REG = rnode_168to170_bb5_inc_0_reg_170_NO_SHIFT_REG;
assign rnode_168to170_bb5_inc_0_stall_in_reg_170_NO_SHIFT_REG = rnode_168to170_bb5_inc_0_stall_in_NO_SHIFT_REG;
assign rnode_168to170_bb5_inc_0_valid_out_NO_SHIFT_REG = rnode_168to170_bb5_inc_0_valid_out_reg_170_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_c1_eni6_valid_out;
wire local_bb5_c1_eni6_stall_in;
wire local_bb5_c1_eni6_inputs_ready;
wire local_bb5_c1_eni6_stall_local;
wire [223:0] local_bb5_c1_eni6;

assign local_bb5_c1_eni6_inputs_ready = (rnode_1to2_bb5_c1_eni129_0_valid_out_NO_SHIFT_REG & rnode_1to2_i_325_0_valid_out_0_NO_SHIFT_REG & rnode_1to2_c3_exe1_0_valid_out_0_NO_SHIFT_REG & rnode_1to2_memcoalesce_param_extrValue_6_0_valid_out_0_NO_SHIFT_REG & rnode_1to2_var__u10_0_valid_out_0_NO_SHIFT_REG & rnode_1to2_j_419_0_valid_out_0_NO_SHIFT_REG);
assign local_bb5_c1_eni6[191:0] = local_bb5_c1_eni525[191:0];
assign local_bb5_c1_eni6[223:192] = rnode_1to2_j_419_0_NO_SHIFT_REG;
assign local_bb5_c1_eni6_valid_out = local_bb5_c1_eni6_inputs_ready;
assign local_bb5_c1_eni6_stall_local = local_bb5_c1_eni6_stall_in;
assign rnode_1to2_bb5_c1_eni129_0_stall_in_NO_SHIFT_REG = (local_bb5_c1_eni6_stall_local | ~(local_bb5_c1_eni6_inputs_ready));
assign rnode_1to2_i_325_0_stall_in_0_NO_SHIFT_REG = (local_bb5_c1_eni6_stall_local | ~(local_bb5_c1_eni6_inputs_ready));
assign rnode_1to2_c3_exe1_0_stall_in_0_NO_SHIFT_REG = (local_bb5_c1_eni6_stall_local | ~(local_bb5_c1_eni6_inputs_ready));
assign rnode_1to2_memcoalesce_param_extrValue_6_0_stall_in_0_NO_SHIFT_REG = (local_bb5_c1_eni6_stall_local | ~(local_bb5_c1_eni6_inputs_ready));
assign rnode_1to2_var__u10_0_stall_in_0_NO_SHIFT_REG = (local_bb5_c1_eni6_stall_local | ~(local_bb5_c1_eni6_inputs_ready));
assign rnode_1to2_j_419_0_stall_in_0_NO_SHIFT_REG = (local_bb5_c1_eni6_stall_local | ~(local_bb5_c1_eni6_inputs_ready));

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_168to169_bb5_cmp25_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_168to169_bb5_cmp25_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_168to169_bb5_cmp25_0_NO_SHIFT_REG;
 logic rnode_168to169_bb5_cmp25_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_168to169_bb5_cmp25_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_168to169_bb5_cmp25_1_NO_SHIFT_REG;
 logic rnode_168to169_bb5_cmp25_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic rnode_168to169_bb5_cmp25_0_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb5_cmp25_0_valid_out_0_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb5_cmp25_0_stall_in_0_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb5_cmp25_0_stall_out_reg_169_NO_SHIFT_REG;
 reg rnode_168to169_bb5_cmp25_0_consumed_0_NO_SHIFT_REG;
 reg rnode_168to169_bb5_cmp25_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_168to169_bb5_cmp25_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_168to169_bb5_cmp25_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_168to169_bb5_cmp25_0_stall_in_0_reg_169_NO_SHIFT_REG),
	.valid_out(rnode_168to169_bb5_cmp25_0_valid_out_0_reg_169_NO_SHIFT_REG),
	.stall_out(rnode_168to169_bb5_cmp25_0_stall_out_reg_169_NO_SHIFT_REG),
	.data_in(local_bb5_cmp25),
	.data_out(rnode_168to169_bb5_cmp25_0_reg_169_NO_SHIFT_REG)
);

defparam rnode_168to169_bb5_cmp25_0_reg_169_fifo.DEPTH = 2;
defparam rnode_168to169_bb5_cmp25_0_reg_169_fifo.DATA_WIDTH = 1;
defparam rnode_168to169_bb5_cmp25_0_reg_169_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_168to169_bb5_cmp25_0_reg_169_fifo.IMPL = "ll_reg";

assign rnode_168to169_bb5_cmp25_0_reg_169_inputs_ready_NO_SHIFT_REG = local_bb5_cmp25_valid_out;
assign local_bb5_cmp25_stall_in = rnode_168to169_bb5_cmp25_0_stall_out_reg_169_NO_SHIFT_REG;
assign rnode_168to169_bb5_cmp25_0_stall_in_0_reg_169_NO_SHIFT_REG = ((rnode_168to169_bb5_cmp25_0_stall_in_0_NO_SHIFT_REG & ~(rnode_168to169_bb5_cmp25_0_consumed_0_NO_SHIFT_REG)) | (rnode_168to169_bb5_cmp25_0_stall_in_1_NO_SHIFT_REG & ~(rnode_168to169_bb5_cmp25_0_consumed_1_NO_SHIFT_REG)));
assign rnode_168to169_bb5_cmp25_0_valid_out_0_NO_SHIFT_REG = (rnode_168to169_bb5_cmp25_0_valid_out_0_reg_169_NO_SHIFT_REG & ~(rnode_168to169_bb5_cmp25_0_consumed_0_NO_SHIFT_REG));
assign rnode_168to169_bb5_cmp25_0_valid_out_1_NO_SHIFT_REG = (rnode_168to169_bb5_cmp25_0_valid_out_0_reg_169_NO_SHIFT_REG & ~(rnode_168to169_bb5_cmp25_0_consumed_1_NO_SHIFT_REG));
assign rnode_168to169_bb5_cmp25_0_NO_SHIFT_REG = rnode_168to169_bb5_cmp25_0_reg_169_NO_SHIFT_REG;
assign rnode_168to169_bb5_cmp25_1_NO_SHIFT_REG = rnode_168to169_bb5_cmp25_0_reg_169_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_168to169_bb5_cmp25_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_168to169_bb5_cmp25_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_168to169_bb5_cmp25_0_consumed_0_NO_SHIFT_REG <= (rnode_168to169_bb5_cmp25_0_valid_out_0_reg_169_NO_SHIFT_REG & (rnode_168to169_bb5_cmp25_0_consumed_0_NO_SHIFT_REG | ~(rnode_168to169_bb5_cmp25_0_stall_in_0_NO_SHIFT_REG)) & rnode_168to169_bb5_cmp25_0_stall_in_0_reg_169_NO_SHIFT_REG);
		rnode_168to169_bb5_cmp25_0_consumed_1_NO_SHIFT_REG <= (rnode_168to169_bb5_cmp25_0_valid_out_0_reg_169_NO_SHIFT_REG & (rnode_168to169_bb5_cmp25_0_consumed_1_NO_SHIFT_REG | ~(rnode_168to169_bb5_cmp25_0_stall_in_1_NO_SHIFT_REG)) & rnode_168to169_bb5_cmp25_0_stall_in_0_reg_169_NO_SHIFT_REG);
	end
end


// This section implements a staging register.
// 
wire rstag_2to2_bb5_c1_eni6_valid_out;
wire rstag_2to2_bb5_c1_eni6_stall_in;
wire rstag_2to2_bb5_c1_eni6_inputs_ready;
wire rstag_2to2_bb5_c1_eni6_stall_local;
 reg rstag_2to2_bb5_c1_eni6_staging_valid_NO_SHIFT_REG;
wire rstag_2to2_bb5_c1_eni6_combined_valid;
 reg [223:0] rstag_2to2_bb5_c1_eni6_staging_reg_NO_SHIFT_REG;
wire [223:0] rstag_2to2_bb5_c1_eni6;

assign rstag_2to2_bb5_c1_eni6_inputs_ready = local_bb5_c1_eni6_valid_out;
assign rstag_2to2_bb5_c1_eni6 = (rstag_2to2_bb5_c1_eni6_staging_valid_NO_SHIFT_REG ? rstag_2to2_bb5_c1_eni6_staging_reg_NO_SHIFT_REG : local_bb5_c1_eni6);
assign rstag_2to2_bb5_c1_eni6_combined_valid = (rstag_2to2_bb5_c1_eni6_staging_valid_NO_SHIFT_REG | rstag_2to2_bb5_c1_eni6_inputs_ready);
assign rstag_2to2_bb5_c1_eni6_valid_out = rstag_2to2_bb5_c1_eni6_combined_valid;
assign rstag_2to2_bb5_c1_eni6_stall_local = rstag_2to2_bb5_c1_eni6_stall_in;
assign local_bb5_c1_eni6_stall_in = (|rstag_2to2_bb5_c1_eni6_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_2to2_bb5_c1_eni6_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_2to2_bb5_c1_eni6_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_2to2_bb5_c1_eni6_stall_local)
		begin
			if (~(rstag_2to2_bb5_c1_eni6_staging_valid_NO_SHIFT_REG))
			begin
				rstag_2to2_bb5_c1_eni6_staging_valid_NO_SHIFT_REG <= rstag_2to2_bb5_c1_eni6_inputs_ready;
			end
		end
		else
		begin
			rstag_2to2_bb5_c1_eni6_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_2to2_bb5_c1_eni6_staging_valid_NO_SHIFT_REG))
		begin
			rstag_2to2_bb5_c1_eni6_staging_reg_NO_SHIFT_REG <= local_bb5_c1_eni6;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_i_325_LC_OuterPHI_valid_out;
wire local_bb5_i_325_LC_OuterPHI_stall_in;
wire local_bb5_i_325_LC_OuterPHI_inputs_ready;
wire local_bb5_i_325_LC_OuterPHI_stall_local;
wire [31:0] local_bb5_i_325_LC_OuterPHI;
wire [1:0] rci_rcnode_169to170_rc0_bb5_cmp21_0_reg_169;

assign local_bb5_i_325_LC_OuterPHI_inputs_ready = (rnode_168to169_bb5_inc47_0_valid_out_1_NO_SHIFT_REG & rnode_168to169_i_325_0_valid_out_NO_SHIFT_REG & rnode_168to169_bb5_cmp25_0_valid_out_0_NO_SHIFT_REG);
assign local_bb5_i_325_LC_OuterPHI = (rnode_168to169_bb5_cmp25_0_NO_SHIFT_REG ? rnode_168to169_i_325_0_NO_SHIFT_REG : rnode_168to169_bb5_inc47_1_NO_SHIFT_REG);
assign local_bb5_i_325_LC_OuterPHI_valid_out = local_bb5_i_325_LC_OuterPHI_inputs_ready;
assign local_bb5_i_325_LC_OuterPHI_stall_local = local_bb5_i_325_LC_OuterPHI_stall_in;
assign rnode_168to169_bb5_inc47_0_stall_in_1_NO_SHIFT_REG = (local_bb5_i_325_LC_OuterPHI_stall_local | ~(local_bb5_i_325_LC_OuterPHI_inputs_ready));
assign rnode_168to169_i_325_0_stall_in_NO_SHIFT_REG = (local_bb5_i_325_LC_OuterPHI_stall_local | ~(local_bb5_i_325_LC_OuterPHI_inputs_ready));
assign rnode_168to169_bb5_cmp25_0_stall_in_0_NO_SHIFT_REG = (local_bb5_i_325_LC_OuterPHI_stall_local | ~(local_bb5_i_325_LC_OuterPHI_inputs_ready));
assign rci_rcnode_169to170_rc0_bb5_cmp21_0_reg_169[0] = local_bb5_cmp21;
assign rci_rcnode_169to170_rc0_bb5_cmp21_0_reg_169[1] = rnode_168to169_bb5_cmp25_1_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_169to170_rc0_bb5_cmp21_0_valid_out_0_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_bb5_cmp21_0_stall_in_0_NO_SHIFT_REG;
 logic [1:0] rcnode_169to170_rc0_bb5_cmp21_0_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_bb5_cmp21_0_valid_out_1_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_bb5_cmp21_0_stall_in_1_NO_SHIFT_REG;
 logic [1:0] rcnode_169to170_rc0_bb5_cmp21_1_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_bb5_cmp21_0_reg_170_inputs_ready_NO_SHIFT_REG;
 logic [1:0] rcnode_169to170_rc0_bb5_cmp21_0_reg_170_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_bb5_cmp21_0_valid_out_0_reg_170_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_bb5_cmp21_0_stall_in_0_reg_170_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_bb5_cmp21_0_stall_out_0_reg_170_IP_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_bb5_cmp21_0_stall_out_0_reg_170_NO_SHIFT_REG;

acl_data_fifo rcnode_169to170_rc0_bb5_cmp21_0_reg_170_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_169to170_rc0_bb5_cmp21_0_reg_170_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_169to170_rc0_bb5_cmp21_0_stall_in_0_reg_170_NO_SHIFT_REG),
	.valid_out(rcnode_169to170_rc0_bb5_cmp21_0_valid_out_0_reg_170_NO_SHIFT_REG),
	.stall_out(rcnode_169to170_rc0_bb5_cmp21_0_stall_out_0_reg_170_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_169to170_rc0_bb5_cmp21_0_reg_169),
	.data_out(rcnode_169to170_rc0_bb5_cmp21_0_reg_170_NO_SHIFT_REG)
);

defparam rcnode_169to170_rc0_bb5_cmp21_0_reg_170_fifo.DEPTH = 1;
defparam rcnode_169to170_rc0_bb5_cmp21_0_reg_170_fifo.DATA_WIDTH = 2;
defparam rcnode_169to170_rc0_bb5_cmp21_0_reg_170_fifo.ALLOW_FULL_WRITE = 1;
defparam rcnode_169to170_rc0_bb5_cmp21_0_reg_170_fifo.IMPL = "ll_reg";

assign rcnode_169to170_rc0_bb5_cmp21_0_reg_170_inputs_ready_NO_SHIFT_REG = (local_bb5_cmp21_valid_out & rnode_168to169_bb5_cmp25_0_valid_out_1_NO_SHIFT_REG);
assign rcnode_169to170_rc0_bb5_cmp21_0_stall_out_0_reg_170_NO_SHIFT_REG = (~(rcnode_169to170_rc0_bb5_cmp21_0_reg_170_inputs_ready_NO_SHIFT_REG) | rcnode_169to170_rc0_bb5_cmp21_0_stall_out_0_reg_170_IP_NO_SHIFT_REG);
assign local_bb5_cmp21_stall_in = rcnode_169to170_rc0_bb5_cmp21_0_stall_out_0_reg_170_NO_SHIFT_REG;
assign rnode_168to169_bb5_cmp25_0_stall_in_1_NO_SHIFT_REG = rcnode_169to170_rc0_bb5_cmp21_0_stall_out_0_reg_170_NO_SHIFT_REG;
assign rcnode_169to170_rc0_bb5_cmp21_0_stall_in_0_reg_170_NO_SHIFT_REG = (rcnode_169to170_rc0_bb5_cmp21_0_stall_in_0_NO_SHIFT_REG | rcnode_169to170_rc0_bb5_cmp21_0_stall_in_1_NO_SHIFT_REG);
assign rcnode_169to170_rc0_bb5_cmp21_0_valid_out_0_NO_SHIFT_REG = rcnode_169to170_rc0_bb5_cmp21_0_valid_out_0_reg_170_NO_SHIFT_REG;
assign rcnode_169to170_rc0_bb5_cmp21_0_valid_out_1_NO_SHIFT_REG = rcnode_169to170_rc0_bb5_cmp21_0_valid_out_0_reg_170_NO_SHIFT_REG;
assign rcnode_169to170_rc0_bb5_cmp21_0_NO_SHIFT_REG = rcnode_169to170_rc0_bb5_cmp21_0_reg_170_NO_SHIFT_REG;
assign rcnode_169to170_rc0_bb5_cmp21_1_NO_SHIFT_REG = rcnode_169to170_rc0_bb5_cmp21_0_reg_170_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_c1_enter24_c1_eni6_valid_out_0;
wire local_bb5_c1_enter24_c1_eni6_stall_in_0;
wire local_bb5_c1_enter24_c1_eni6_valid_out_1;
wire local_bb5_c1_enter24_c1_eni6_stall_in_1;
wire local_bb5_c1_enter24_c1_eni6_valid_out_2;
wire local_bb5_c1_enter24_c1_eni6_stall_in_2;
wire local_bb5_c1_enter24_c1_eni6_valid_out_3;
wire local_bb5_c1_enter24_c1_eni6_stall_in_3;
wire local_bb5_c1_enter24_c1_eni6_valid_out_4;
wire local_bb5_c1_enter24_c1_eni6_stall_in_4;
wire local_bb5_c1_enter24_c1_eni6_valid_out_5;
wire local_bb5_c1_enter24_c1_eni6_stall_in_5;
wire local_bb5_c1_enter24_c1_eni6_valid_out_6;
wire local_bb5_c1_enter24_c1_eni6_stall_in_6;
wire local_bb5_c1_enter24_c1_eni6_inputs_ready;
wire local_bb5_c1_enter24_c1_eni6_stall_local;
wire local_bb5_c1_enter24_c1_eni6_input_accepted;
wire [223:0] local_bb5_c1_enter24_c1_eni6;
wire local_bb5_c1_exit21_c1_exi220_enable;
wire local_bb5_c1_exit21_c1_exi220_entry_stall;
wire local_bb5_c1_enter24_c1_eni6_valid_bit;
wire local_bb5_c1_exit21_c1_exi220_output_regs_ready;
wire local_bb5_c1_exit21_c1_exi220_valid_in;
wire local_bb5_c1_exit21_c1_exi220_phases;
wire local_bb5_c1_enter24_c1_eni6_inc_pipelined_thread;
wire local_bb5_c1_enter24_c1_eni6_dec_pipelined_thread;
wire local_bb5_c1_enter24_c1_eni6_fu_stall_out;
wire [677:0] rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169;

assign local_bb5_c1_enter24_c1_eni6_inputs_ready = rstag_2to2_bb5_c1_eni6_valid_out;
assign local_bb5_c1_enter24_c1_eni6 = rstag_2to2_bb5_c1_eni6;
assign local_bb5_c1_enter24_c1_eni6_input_accepted = (local_bb5_c1_enter24_c1_eni6_inputs_ready && !(local_bb5_c1_exit21_c1_exi220_entry_stall));
assign local_bb5_c1_enter24_c1_eni6_valid_bit = local_bb5_c1_enter24_c1_eni6_input_accepted;
assign local_bb5_c1_enter24_c1_eni6_inc_pipelined_thread = 1'b1;
assign local_bb5_c1_enter24_c1_eni6_dec_pipelined_thread = ~(1'b0);
assign local_bb5_c1_enter24_c1_eni6_fu_stall_out = (~(local_bb5_c1_enter24_c1_eni6_inputs_ready) | local_bb5_c1_exit21_c1_exi220_entry_stall);
assign local_bb5_c1_enter24_c1_eni6_stall_local = (local_bb5_c1_enter24_c1_eni6_stall_in_0 | local_bb5_c1_enter24_c1_eni6_stall_in_1 | local_bb5_c1_enter24_c1_eni6_stall_in_2 | local_bb5_c1_enter24_c1_eni6_stall_in_3 | local_bb5_c1_enter24_c1_eni6_stall_in_4 | local_bb5_c1_enter24_c1_eni6_stall_in_5 | local_bb5_c1_enter24_c1_eni6_stall_in_6);
assign local_bb5_c1_enter24_c1_eni6_valid_out_0 = local_bb5_c1_enter24_c1_eni6_inputs_ready;
assign local_bb5_c1_enter24_c1_eni6_valid_out_1 = local_bb5_c1_enter24_c1_eni6_inputs_ready;
assign local_bb5_c1_enter24_c1_eni6_valid_out_2 = local_bb5_c1_enter24_c1_eni6_inputs_ready;
assign local_bb5_c1_enter24_c1_eni6_valid_out_3 = local_bb5_c1_enter24_c1_eni6_inputs_ready;
assign local_bb5_c1_enter24_c1_eni6_valid_out_4 = local_bb5_c1_enter24_c1_eni6_inputs_ready;
assign local_bb5_c1_enter24_c1_eni6_valid_out_5 = local_bb5_c1_enter24_c1_eni6_inputs_ready;
assign local_bb5_c1_enter24_c1_eni6_valid_out_6 = local_bb5_c1_enter24_c1_eni6_inputs_ready;
assign rstag_2to2_bb5_c1_eni6_stall_in = (|local_bb5_c1_enter24_c1_eni6_fu_stall_out);
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[31:0] = local_bb5_i_325_LC_OuterPHI;
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[63:32] = rnode_168to169_memcoalesce_param_extrValue_2_1_NO_SHIFT_REG;
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[64] = rcnode_1to169_rc10_cmp2122_0_NO_SHIFT_REG[0];
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[65] = rcnode_1to169_rc10_cmp2122_0_NO_SHIFT_REG[1];
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[66] = rcnode_1to169_rc10_cmp2122_0_NO_SHIFT_REG[2];
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[67] = rcnode_1to169_rc10_cmp2122_0_NO_SHIFT_REG[3];
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[99:68] = rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[131:100] = rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG[63:32];
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[163:132] = rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG[95:64];
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[195:164] = rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG[127:96];
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[196] = rcnode_1to169_rc12__phi_decision77_xor_0_NO_SHIFT_REG[0];
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[228:197] = rcnode_1to169_rc12__phi_decision77_xor_0_NO_SHIFT_REG[32:1];
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[260:229] = rcnode_1to169_rc12__phi_decision77_xor_0_NO_SHIFT_REG[64:33];
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[292:261] = rcnode_1to169_rc12__phi_decision77_xor_0_NO_SHIFT_REG[96:65];
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[324:293] = rcnode_1to169_rc13_heightCounter_141_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[356:325] = rcnode_1to169_rc13_heightCounter_141_0_NO_SHIFT_REG[63:32];
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[388:357] = rcnode_1to169_rc13_heightCounter_141_0_NO_SHIFT_REG[95:64];
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[420:389] = rcnode_1to169_rc13_heightCounter_141_0_NO_SHIFT_REG[127:96];
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[452:421] = rcnode_1to169_rc14_var__u11_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[484:453] = rcnode_1to169_rc14_var__u11_0_NO_SHIFT_REG[63:32];
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[516:485] = rcnode_1to169_rc14_var__u11_0_NO_SHIFT_REG[95:64];
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[548:517] = rcnode_1to169_rc14_var__u11_0_NO_SHIFT_REG[127:96];
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[580:549] = rnode_1to169_input_acl_hw_wg_id_0_NO_SHIFT_REG;
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[612:581] = rcnode_2to169_rc1_c3_exe1_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[644:613] = rcnode_2to169_rc1_c3_exe1_0_NO_SHIFT_REG[63:32];
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[676:645] = rcnode_2to169_rc1_c3_exe1_0_NO_SHIFT_REG[95:64];
assign rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169[677] = rnode_7to169__phi_decision76_xor_or_0_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_valid_out_0_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_in_0_NO_SHIFT_REG;
 logic [677:0] rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_valid_out_1_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_in_1_NO_SHIFT_REG;
 logic [677:0] rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_1_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_valid_out_2_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_in_2_NO_SHIFT_REG;
 logic [677:0] rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_2_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_170_inputs_ready_NO_SHIFT_REG;
 logic [677:0] rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_170_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_valid_out_0_reg_170_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_in_0_reg_170_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_out_0_reg_170_IP_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_out_0_reg_170_NO_SHIFT_REG;

acl_data_fifo rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_170_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_170_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_in_0_reg_170_NO_SHIFT_REG),
	.valid_out(rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_valid_out_0_reg_170_NO_SHIFT_REG),
	.stall_out(rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_out_0_reg_170_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_169),
	.data_out(rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_170_NO_SHIFT_REG)
);

defparam rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_170_fifo.DEPTH = 2;
defparam rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_170_fifo.DATA_WIDTH = 678;
defparam rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_170_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_170_fifo.IMPL = "ll_reg";

assign rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_170_inputs_ready_NO_SHIFT_REG = (local_bb5_i_325_LC_OuterPHI_valid_out & rnode_168to169_memcoalesce_param_extrValue_2_0_valid_out_1_NO_SHIFT_REG & rnode_1to169_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG & rnode_7to169__phi_decision76_xor_or_0_valid_out_NO_SHIFT_REG & rcnode_1to169_rc10_cmp2122_0_valid_out_NO_SHIFT_REG & rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_valid_out_NO_SHIFT_REG & rcnode_1to169_rc12__phi_decision77_xor_0_valid_out_NO_SHIFT_REG & rcnode_1to169_rc13_heightCounter_141_0_valid_out_NO_SHIFT_REG & rcnode_1to169_rc14_var__u11_0_valid_out_NO_SHIFT_REG & rcnode_2to169_rc1_c3_exe1_0_valid_out_NO_SHIFT_REG);
assign rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_out_0_reg_170_NO_SHIFT_REG = (~(rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_170_inputs_ready_NO_SHIFT_REG) | rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_out_0_reg_170_IP_NO_SHIFT_REG);
assign local_bb5_i_325_LC_OuterPHI_stall_in = rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_out_0_reg_170_NO_SHIFT_REG;
assign rnode_168to169_memcoalesce_param_extrValue_2_0_stall_in_1_NO_SHIFT_REG = rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_out_0_reg_170_NO_SHIFT_REG;
assign rnode_1to169_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG = rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_out_0_reg_170_NO_SHIFT_REG;
assign rnode_7to169__phi_decision76_xor_or_0_stall_in_NO_SHIFT_REG = rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_out_0_reg_170_NO_SHIFT_REG;
assign rcnode_1to169_rc10_cmp2122_0_stall_in_NO_SHIFT_REG = rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_out_0_reg_170_NO_SHIFT_REG;
assign rcnode_1to169_rc11_memcoalesce_param_extrValue_8_0_stall_in_NO_SHIFT_REG = rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_out_0_reg_170_NO_SHIFT_REG;
assign rcnode_1to169_rc12__phi_decision77_xor_0_stall_in_NO_SHIFT_REG = rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_out_0_reg_170_NO_SHIFT_REG;
assign rcnode_1to169_rc13_heightCounter_141_0_stall_in_NO_SHIFT_REG = rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_out_0_reg_170_NO_SHIFT_REG;
assign rcnode_1to169_rc14_var__u11_0_stall_in_NO_SHIFT_REG = rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_out_0_reg_170_NO_SHIFT_REG;
assign rcnode_2to169_rc1_c3_exe1_0_stall_in_NO_SHIFT_REG = rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_out_0_reg_170_NO_SHIFT_REG;
assign rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_in_0_reg_170_NO_SHIFT_REG = (rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_in_0_NO_SHIFT_REG | rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_in_1_NO_SHIFT_REG | rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_in_2_NO_SHIFT_REG);
assign rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_valid_out_0_NO_SHIFT_REG = rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_valid_out_0_reg_170_NO_SHIFT_REG;
assign rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_valid_out_1_NO_SHIFT_REG = rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_valid_out_0_reg_170_NO_SHIFT_REG;
assign rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_valid_out_2_NO_SHIFT_REG = rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_valid_out_0_reg_170_NO_SHIFT_REG;
assign rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG = rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_170_NO_SHIFT_REG;
assign rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_1_NO_SHIFT_REG = rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_170_NO_SHIFT_REG;
assign rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_2_NO_SHIFT_REG = rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_reg_170_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_for_end48_loopexit_loopexit_LC_COND_stall_local;
wire local_bb5_for_end48_loopexit_loopexit_LC_COND;

assign local_bb5_for_end48_loopexit_loopexit_LC_COND = (rcnode_169to170_rc0_bb5_cmp21_0_NO_SHIFT_REG[1] | rcnode_169to170_rc0_bb5_cmp21_0_NO_SHIFT_REG[0]);

// This section implements an unregistered operation.
// 
wire local_bb5_j_419_LC_InnerPHI_stall_local;
wire [31:0] local_bb5_j_419_LC_InnerPHI;

assign local_bb5_j_419_LC_InnerPHI = (rcnode_169to170_rc0_bb5_cmp21_0_NO_SHIFT_REG[1] ? rnode_168to170_bb5_inc_0_NO_SHIFT_REG : 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_c1_ene134_stall_local;
wire [31:0] local_bb5_c1_ene134;

assign local_bb5_c1_ene134[31:0] = local_bb5_c1_enter24_c1_eni6[63:32];

// This section implements an unregistered operation.
// 
wire local_bb5_c1_ene233_stall_local;
wire [31:0] local_bb5_c1_ene233;

assign local_bb5_c1_ene233[31:0] = local_bb5_c1_enter24_c1_eni6[95:64];

// This section implements an unregistered operation.
// 
wire local_bb5_c1_ene332_stall_local;
wire [31:0] local_bb5_c1_ene332;

assign local_bb5_c1_ene332[31:0] = local_bb5_c1_enter24_c1_eni6[127:96];

// This section implements an unregistered operation.
// 
wire local_bb5_c1_ene431_valid_out;
wire local_bb5_c1_ene431_stall_in;
wire local_bb5_c1_ene431_inputs_ready;
wire local_bb5_c1_ene431_stall_local;
wire [31:0] local_bb5_c1_ene431;

assign local_bb5_c1_ene431_inputs_ready = local_bb5_c1_enter24_c1_eni6_valid_out_3;
assign local_bb5_c1_ene431[31:0] = local_bb5_c1_enter24_c1_eni6[159:128];
assign local_bb5_c1_ene431_valid_out = 1'b1;
assign local_bb5_c1_enter24_c1_eni6_stall_in_3 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c1_ene530_stall_local;
wire [31:0] local_bb5_c1_ene530;

assign local_bb5_c1_ene530[31:0] = local_bb5_c1_enter24_c1_eni6[191:160];

// This section implements an unregistered operation.
// 
wire local_bb5_c1_ene6_stall_local;
wire [31:0] local_bb5_c1_ene6;

assign local_bb5_c1_ene6[31:0] = local_bb5_c1_enter24_c1_eni6[223:192];

// This section implements an unregistered operation.
// 
wire SFC_6_VALID_2_2_0_valid_out;
wire SFC_6_VALID_2_2_0_stall_in;
wire SFC_6_VALID_2_2_0_inputs_ready;
wire SFC_6_VALID_2_2_0_stall_local;
wire SFC_6_VALID_2_2_0;

assign SFC_6_VALID_2_2_0_inputs_ready = local_bb5_c1_enter24_c1_eni6_valid_out_6;
assign SFC_6_VALID_2_2_0 = local_bb5_c1_enter24_c1_eni6_valid_bit;
assign SFC_6_VALID_2_2_0_valid_out = 1'b1;
assign local_bb5_c1_enter24_c1_eni6_stall_in_6 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_for_end48_loopexit_loopexit_LC_COND58_GUARD_demorgan_stall_local;
wire local_bb5_for_end48_loopexit_loopexit_LC_COND58_GUARD_demorgan;

assign local_bb5_for_end48_loopexit_loopexit_LC_COND58_GUARD_demorgan = (local_bb5_for_end48_loopexit_loopexit_LC_COND & rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[64]);

// This section implements an unregistered operation.
// 
wire local_bb5_add34_stall_local;
wire [31:0] local_bb5_add34;

assign local_bb5_add34 = (local_bb5_c1_ene134 + local_bb5_c1_ene233);

// This section implements an unregistered operation.
// 
wire local_bb5_add40_valid_out;
wire local_bb5_add40_stall_in;
wire local_bb5_add40_inputs_ready;
wire local_bb5_add40_stall_local;
wire [31:0] local_bb5_add40;

assign local_bb5_add40_inputs_ready = (local_bb5_c1_enter24_c1_eni6_valid_out_4 & local_bb5_c1_enter24_c1_eni6_valid_out_5);
assign local_bb5_add40 = (local_bb5_c1_ene530 + local_bb5_c1_ene6);
assign local_bb5_add40_valid_out = 1'b1;
assign local_bb5_c1_enter24_c1_eni6_stall_in_4 = 1'b0;
assign local_bb5_c1_enter24_c1_eni6_stall_in_5 = 1'b0;

// This section implements a registered operation.
// 
wire SFC_6_VALID_2_3_0_inputs_ready;
 reg SFC_6_VALID_2_3_0_valid_out_NO_SHIFT_REG;
wire SFC_6_VALID_2_3_0_stall_in;
wire SFC_6_VALID_2_3_0_output_regs_ready;
 reg SFC_6_VALID_2_3_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_6_VALID_2_3_0_causedstall;

assign SFC_6_VALID_2_3_0_inputs_ready = 1'b1;
assign SFC_6_VALID_2_3_0_output_regs_ready = local_bb5_c1_exit21_c1_exi220_enable;
assign SFC_6_VALID_2_2_0_stall_in = 1'b0;
assign SFC_6_VALID_2_3_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c1_exit21_c1_exi220_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_6_VALID_2_3_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_6_VALID_2_3_0_output_regs_ready)
		begin
			SFC_6_VALID_2_3_0_NO_SHIFT_REG <= SFC_6_VALID_2_2_0;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5__demorgan_valid_out;
wire local_bb5__demorgan_stall_in;
wire local_bb5_j_419_LC_InnerPHI_valid_out;
wire local_bb5_j_419_LC_InnerPHI_stall_in;
wire local_bb5__demorgan_inputs_ready;
wire local_bb5__demorgan_stall_local;
wire local_bb5__demorgan;

assign local_bb5__demorgan_inputs_ready = (rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_valid_out_1_NO_SHIFT_REG & rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_valid_out_2_NO_SHIFT_REG & rcnode_169to170_rc0_bb5_cmp21_0_valid_out_0_NO_SHIFT_REG & rnode_168to170_bb5_inc_0_valid_out_NO_SHIFT_REG & rcnode_169to170_rc0_bb5_cmp21_0_valid_out_1_NO_SHIFT_REG);
assign local_bb5__demorgan = (rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[65] & local_bb5_for_end48_loopexit_loopexit_LC_COND58_GUARD_demorgan);
assign local_bb5__demorgan_stall_local = (local_bb5__demorgan_stall_in | local_bb5_j_419_LC_InnerPHI_stall_in);
assign local_bb5__demorgan_valid_out = local_bb5__demorgan_inputs_ready;
assign local_bb5_j_419_LC_InnerPHI_valid_out = local_bb5__demorgan_inputs_ready;
assign rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_in_1_NO_SHIFT_REG = (local_bb5__demorgan_stall_local | ~(local_bb5__demorgan_inputs_ready));
assign rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_in_2_NO_SHIFT_REG = (local_bb5__demorgan_stall_local | ~(local_bb5__demorgan_inputs_ready));
assign rcnode_169to170_rc0_bb5_cmp21_0_stall_in_0_NO_SHIFT_REG = (local_bb5__demorgan_stall_local | ~(local_bb5__demorgan_inputs_ready));
assign rnode_168to170_bb5_inc_0_stall_in_NO_SHIFT_REG = (local_bb5__demorgan_stall_local | ~(local_bb5__demorgan_inputs_ready));
assign rcnode_169to170_rc0_bb5_cmp21_0_stall_in_1_NO_SHIFT_REG = (local_bb5__demorgan_stall_local | ~(local_bb5__demorgan_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb5_mul3116_valid_out;
wire local_bb5_mul3116_stall_in;
wire local_bb5_mul3116_inputs_ready;
wire local_bb5_mul3116_stall_local;
wire [31:0] local_bb5_mul3116;

assign local_bb5_mul3116_inputs_ready = (local_bb5_c1_enter24_c1_eni6_valid_out_0 & local_bb5_c1_enter24_c1_eni6_valid_out_1 & local_bb5_c1_enter24_c1_eni6_valid_out_2);
assign local_bb5_mul3116 = (local_bb5_add34 + local_bb5_c1_ene332);
assign local_bb5_mul3116_valid_out = 1'b1;
assign local_bb5_c1_enter24_c1_eni6_stall_in_0 = 1'b0;
assign local_bb5_c1_enter24_c1_eni6_stall_in_1 = 1'b0;
assign local_bb5_c1_enter24_c1_eni6_stall_in_2 = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb5_add40_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb5_add40_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb5_add40_0_NO_SHIFT_REG;
 logic rnode_2to3_bb5_add40_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb5_add40_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_add40_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_add40_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_add40_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb5_add40_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb5_add40_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb5_add40_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb5_add40_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb5_add40_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb5_add40),
	.data_out(rnode_2to3_bb5_add40_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb5_add40_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb5_add40_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb5_add40_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb5_add40_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb5_add40_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_add40_stall_in = 1'b0;
assign rnode_2to3_bb5_add40_0_NO_SHIFT_REG = rnode_2to3_bb5_add40_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb5_add40_0_stall_in_reg_3_NO_SHIFT_REG = ~(local_bb5_c1_exit21_c1_exi220_enable);
assign rnode_2to3_bb5_add40_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_6_VALID_3_4_0_inputs_ready;
 reg SFC_6_VALID_3_4_0_valid_out_NO_SHIFT_REG;
wire SFC_6_VALID_3_4_0_stall_in;
wire SFC_6_VALID_3_4_0_output_regs_ready;
 reg SFC_6_VALID_3_4_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_6_VALID_3_4_0_causedstall;

assign SFC_6_VALID_3_4_0_inputs_ready = 1'b1;
assign SFC_6_VALID_3_4_0_output_regs_ready = local_bb5_c1_exit21_c1_exi220_enable;
assign SFC_6_VALID_2_3_0_stall_in = 1'b0;
assign SFC_6_VALID_3_4_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c1_exit21_c1_exi220_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_6_VALID_3_4_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_6_VALID_3_4_0_output_regs_ready)
		begin
			SFC_6_VALID_3_4_0_NO_SHIFT_REG <= SFC_6_VALID_2_3_0_NO_SHIFT_REG;
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb5_add37_inputs_ready;
 reg local_bb5_add37_valid_out_NO_SHIFT_REG;
wire local_bb5_add37_stall_in;
wire local_bb5_add37_output_regs_ready;
wire [31:0] local_bb5_add37;
 reg local_bb5_add37_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb5_add37_valid_pipe_1_NO_SHIFT_REG;
wire local_bb5_add37_causedstall;

acl_int_mult int_module_local_bb5_add37 (
	.clock(clock),
	.dataa(local_bb5_mul3116),
	.datab(local_bb5_c1_ene431),
	.enable(local_bb5_add37_output_regs_ready),
	.result(local_bb5_add37)
);

defparam int_module_local_bb5_add37.INPUT1_WIDTH = 32;
defparam int_module_local_bb5_add37.INPUT2_WIDTH = 32;
defparam int_module_local_bb5_add37.OUTPUT_WIDTH = 32;
defparam int_module_local_bb5_add37.LATENCY = 3;
defparam int_module_local_bb5_add37.SIGNED = 0;

assign local_bb5_add37_inputs_ready = 1'b1;
assign local_bb5_add37_output_regs_ready = local_bb5_c1_exit21_c1_exi220_enable;
assign local_bb5_mul3116_stall_in = 1'b0;
assign local_bb5_c1_ene431_stall_in = 1'b0;
assign local_bb5_add37_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c1_exit21_c1_exi220_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_add37_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb5_add37_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_add37_output_regs_ready)
		begin
			local_bb5_add37_valid_pipe_0_NO_SHIFT_REG <= 1'b1;
			local_bb5_add37_valid_pipe_1_NO_SHIFT_REG <= local_bb5_add37_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_add37_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_add37_output_regs_ready)
		begin
			local_bb5_add37_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb5_add37_stall_in))
			begin
				local_bb5_add37_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_add40_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_add40_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb5_add40_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_add40_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb5_add40_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_add40_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_add40_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_add40_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_add40_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_add40_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_add40_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_add40_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_add40_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb5_add40_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb5_add40_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_add40_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_add40_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb5_add40_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_add40_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_add40_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb5_add40_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_add40_0_NO_SHIFT_REG = rnode_3to4_bb5_add40_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_add40_0_stall_in_reg_4_NO_SHIFT_REG = ~(local_bb5_c1_exit21_c1_exi220_enable);
assign rnode_3to4_bb5_add40_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_6_VALID_4_5_0_inputs_ready;
 reg SFC_6_VALID_4_5_0_valid_out_NO_SHIFT_REG;
wire SFC_6_VALID_4_5_0_stall_in;
wire SFC_6_VALID_4_5_0_output_regs_ready;
 reg SFC_6_VALID_4_5_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_6_VALID_4_5_0_causedstall;

assign SFC_6_VALID_4_5_0_inputs_ready = 1'b1;
assign SFC_6_VALID_4_5_0_output_regs_ready = local_bb5_c1_exit21_c1_exi220_enable;
assign SFC_6_VALID_3_4_0_stall_in = 1'b0;
assign SFC_6_VALID_4_5_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c1_exit21_c1_exi220_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_6_VALID_4_5_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_6_VALID_4_5_0_output_regs_ready)
		begin
			SFC_6_VALID_4_5_0_NO_SHIFT_REG <= SFC_6_VALID_3_4_0_NO_SHIFT_REG;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb5_add40_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb5_add40_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb5_add40_0_NO_SHIFT_REG;
 logic rnode_4to5_bb5_add40_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb5_add40_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_add40_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_add40_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_add40_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb5_add40_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb5_add40_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb5_add40_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb5_add40_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb5_add40_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_add40_0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb5_add40_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb5_add40_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb5_add40_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_4to5_bb5_add40_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb5_add40_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb5_add40_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_add40_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb5_add40_0_NO_SHIFT_REG = rnode_4to5_bb5_add40_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb5_add40_0_stall_in_reg_5_NO_SHIFT_REG = ~(local_bb5_c1_exit21_c1_exi220_enable);
assign rnode_4to5_bb5_add40_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_c1_exi119_stall_local;
wire [95:0] local_bb5_c1_exi119;

assign local_bb5_c1_exi119[31:0] = 32'bx;
assign local_bb5_c1_exi119[63:32] = rnode_4to5_bb5_add40_0_NO_SHIFT_REG;
assign local_bb5_c1_exi119[95:64] = 32'bx;

// This section implements an unregistered operation.
// 
wire local_bb5_c1_exi220_valid_out;
wire local_bb5_c1_exi220_stall_in;
wire local_bb5_c1_exi220_inputs_ready;
wire local_bb5_c1_exi220_stall_local;
wire [95:0] local_bb5_c1_exi220;

assign local_bb5_c1_exi220_inputs_ready = (local_bb5_add37_valid_out_NO_SHIFT_REG & rnode_4to5_bb5_add40_0_valid_out_NO_SHIFT_REG);
assign local_bb5_c1_exi220[63:0] = local_bb5_c1_exi119[63:0];
assign local_bb5_c1_exi220[95:64] = local_bb5_add37;
assign local_bb5_c1_exi220_valid_out = 1'b1;
assign local_bb5_add37_stall_in = 1'b0;
assign rnode_4to5_bb5_add40_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c1_exit21_c1_exi220_valid_out;
wire local_bb5_c1_exit21_c1_exi220_stall_in;
wire local_bb5_c1_exit21_c1_exi220_inputs_ready;
wire local_bb5_c1_exit21_c1_exi220_stall_local;
wire [95:0] local_bb5_c1_exit21_c1_exi220;
wire local_bb5_c1_exit21_c1_exi220_valid;
wire local_bb5_c1_exit21_c1_exi220_fu_stall_out;

acl_enable_sink local_bb5_c1_exit21_c1_exi220_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb5_c1_exi220),
	.data_out(local_bb5_c1_exit21_c1_exi220),
	.input_accepted(local_bb5_c1_enter24_c1_eni6_input_accepted),
	.valid_out(local_bb5_c1_exit21_c1_exi220_valid),
	.stall_in(local_bb5_c1_exit21_c1_exi220_stall_local),
	.enable(local_bb5_c1_exit21_c1_exi220_enable),
	.valid_in(local_bb5_c1_exit21_c1_exi220_valid_in),
	.stall_entry(local_bb5_c1_exit21_c1_exi220_entry_stall),
	.inc_pipelined_thread(local_bb5_c1_enter24_c1_eni6_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb5_c1_enter24_c1_eni6_dec_pipelined_thread)
);

defparam local_bb5_c1_exit21_c1_exi220_instance.DATA_WIDTH = 96;
defparam local_bb5_c1_exit21_c1_exi220_instance.PIPELINE_DEPTH = 3;
defparam local_bb5_c1_exit21_c1_exi220_instance.SCHEDULEII = 1;
defparam local_bb5_c1_exit21_c1_exi220_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb5_c1_exit21_c1_exi220_inputs_ready = (local_bb5_c1_exi220_valid_out & SFC_6_VALID_4_5_0_valid_out_NO_SHIFT_REG);
assign local_bb5_c1_exit21_c1_exi220_valid_in = SFC_6_VALID_4_5_0_NO_SHIFT_REG;
assign local_bb5_c1_exit21_c1_exi220_fu_stall_out = ~(local_bb5_c1_exit21_c1_exi220_enable);
assign local_bb5_c1_exit21_c1_exi220_valid_out = local_bb5_c1_exit21_c1_exi220_valid;
assign local_bb5_c1_exit21_c1_exi220_stall_local = local_bb5_c1_exit21_c1_exi220_stall_in;
assign local_bb5_c1_exi220_stall_in = 1'b0;
assign SFC_6_VALID_4_5_0_stall_in = 1'b0;

// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_5to5_bb5_c1_exit21_c1_exi220_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_5to5_bb5_c1_exit21_c1_exi220_0_stall_in_0_NO_SHIFT_REG;
 logic [95:0] rnode_5to5_bb5_c1_exit21_c1_exi220_0_NO_SHIFT_REG;
 logic rnode_5to5_bb5_c1_exit21_c1_exi220_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_5to5_bb5_c1_exit21_c1_exi220_0_stall_in_1_NO_SHIFT_REG;
 logic [95:0] rnode_5to5_bb5_c1_exit21_c1_exi220_1_NO_SHIFT_REG;
 logic rnode_5to5_bb5_c1_exit21_c1_exi220_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [95:0] rnode_5to5_bb5_c1_exit21_c1_exi220_0_reg_5_NO_SHIFT_REG;
 logic rnode_5to5_bb5_c1_exit21_c1_exi220_0_valid_out_0_reg_5_NO_SHIFT_REG;
 logic rnode_5to5_bb5_c1_exit21_c1_exi220_0_stall_in_0_reg_5_NO_SHIFT_REG;
 logic rnode_5to5_bb5_c1_exit21_c1_exi220_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_5to5_bb5_c1_exit21_c1_exi220_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_5to5_bb5_c1_exit21_c1_exi220_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_5to5_bb5_c1_exit21_c1_exi220_0_stall_in_0_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_5to5_bb5_c1_exit21_c1_exi220_0_valid_out_0_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_5to5_bb5_c1_exit21_c1_exi220_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb5_c1_exit21_c1_exi220),
	.data_out(rnode_5to5_bb5_c1_exit21_c1_exi220_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_5to5_bb5_c1_exit21_c1_exi220_0_reg_5_fifo.DEPTH = 3;
defparam rnode_5to5_bb5_c1_exit21_c1_exi220_0_reg_5_fifo.DATA_WIDTH = 96;
defparam rnode_5to5_bb5_c1_exit21_c1_exi220_0_reg_5_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_5to5_bb5_c1_exit21_c1_exi220_0_reg_5_fifo.IMPL = "zl_reg";

assign rnode_5to5_bb5_c1_exit21_c1_exi220_0_reg_5_inputs_ready_NO_SHIFT_REG = local_bb5_c1_exit21_c1_exi220_valid_out;
assign local_bb5_c1_exit21_c1_exi220_stall_in = rnode_5to5_bb5_c1_exit21_c1_exi220_0_stall_out_reg_5_NO_SHIFT_REG;
assign rnode_5to5_bb5_c1_exit21_c1_exi220_0_stall_in_0_reg_5_NO_SHIFT_REG = (rnode_5to5_bb5_c1_exit21_c1_exi220_0_stall_in_0_NO_SHIFT_REG | rnode_5to5_bb5_c1_exit21_c1_exi220_0_stall_in_1_NO_SHIFT_REG);
assign rnode_5to5_bb5_c1_exit21_c1_exi220_0_valid_out_0_NO_SHIFT_REG = rnode_5to5_bb5_c1_exit21_c1_exi220_0_valid_out_0_reg_5_NO_SHIFT_REG;
assign rnode_5to5_bb5_c1_exit21_c1_exi220_0_valid_out_1_NO_SHIFT_REG = rnode_5to5_bb5_c1_exit21_c1_exi220_0_valid_out_0_reg_5_NO_SHIFT_REG;
assign rnode_5to5_bb5_c1_exit21_c1_exi220_0_NO_SHIFT_REG = rnode_5to5_bb5_c1_exit21_c1_exi220_0_reg_5_NO_SHIFT_REG;
assign rnode_5to5_bb5_c1_exit21_c1_exi220_1_NO_SHIFT_REG = rnode_5to5_bb5_c1_exit21_c1_exi220_0_reg_5_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_c1_exe223_stall_local;
wire [31:0] local_bb5_c1_exe223;

assign local_bb5_c1_exe223[31:0] = rnode_5to5_bb5_c1_exit21_c1_exi220_0_NO_SHIFT_REG[95:64];

// This section implements an unregistered operation.
// 
wire local_bb5_c1_exe122_stall_local;
wire [31:0] local_bb5_c1_exe122;

assign local_bb5_c1_exe122[31:0] = rnode_5to5_bb5_c1_exit21_c1_exi220_1_NO_SHIFT_REG[63:32];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_eni114_stall_local;
wire [95:0] local_bb5_c2_eni114;

assign local_bb5_c2_eni114[31:0] = 32'bx;
assign local_bb5_c2_eni114[63:32] = local_bb5_c1_exe122;
assign local_bb5_c2_eni114[95:64] = 32'bx;

// This section implements an unregistered operation.
// 
wire local_bb5_c2_eni215_valid_out;
wire local_bb5_c2_eni215_stall_in;
wire local_bb5_c2_eni215_inputs_ready;
wire local_bb5_c2_eni215_stall_local;
wire [95:0] local_bb5_c2_eni215;

assign local_bb5_c2_eni215_inputs_ready = (rnode_5to5_bb5_c1_exit21_c1_exi220_0_valid_out_0_NO_SHIFT_REG & rnode_5to5_bb5_c1_exit21_c1_exi220_0_valid_out_1_NO_SHIFT_REG);
assign local_bb5_c2_eni215[63:0] = local_bb5_c2_eni114[63:0];
assign local_bb5_c2_eni215[95:64] = local_bb5_c1_exe223;
assign local_bb5_c2_eni215_valid_out = local_bb5_c2_eni215_inputs_ready;
assign local_bb5_c2_eni215_stall_local = local_bb5_c2_eni215_stall_in;
assign rnode_5to5_bb5_c1_exit21_c1_exi220_0_stall_in_0_NO_SHIFT_REG = (local_bb5_c2_eni215_stall_local | ~(local_bb5_c2_eni215_inputs_ready));
assign rnode_5to5_bb5_c1_exit21_c1_exi220_0_stall_in_1_NO_SHIFT_REG = (local_bb5_c2_eni215_stall_local | ~(local_bb5_c2_eni215_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb5_c2_enter16_c2_eni215_valid_out_0;
wire local_bb5_c2_enter16_c2_eni215_stall_in_0;
wire local_bb5_c2_enter16_c2_eni215_valid_out_1;
wire local_bb5_c2_enter16_c2_eni215_stall_in_1;
wire local_bb5_c2_enter16_c2_eni215_valid_out_2;
wire local_bb5_c2_enter16_c2_eni215_stall_in_2;
wire local_bb5_c2_enter16_c2_eni215_inputs_ready;
wire local_bb5_c2_enter16_c2_eni215_stall_local;
wire local_bb5_c2_enter16_c2_eni215_input_accepted;
wire [95:0] local_bb5_c2_enter16_c2_eni215;
wire local_bb5_c2_exit11_c2_exi113_enable;
wire local_bb5_c2_exit11_c2_exi113_entry_stall;
wire local_bb5_c2_enter16_c2_eni215_valid_bit;
wire local_bb5_c2_exit11_c2_exi113_output_regs_ready;
wire local_bb5_c2_exit11_c2_exi113_valid_in;
wire local_bb5_c2_exit11_c2_exi113_phases;
wire local_bb5_c2_enter16_c2_eni215_inc_pipelined_thread;
wire local_bb5_c2_enter16_c2_eni215_dec_pipelined_thread;
wire local_bb5_c2_enter16_c2_eni215_fu_stall_out;

assign local_bb5_c2_enter16_c2_eni215_inputs_ready = local_bb5_c2_eni215_valid_out;
assign local_bb5_c2_enter16_c2_eni215 = local_bb5_c2_eni215;
assign local_bb5_c2_enter16_c2_eni215_input_accepted = (local_bb5_c2_enter16_c2_eni215_inputs_ready && !(local_bb5_c2_exit11_c2_exi113_entry_stall));
assign local_bb5_c2_enter16_c2_eni215_valid_bit = local_bb5_c2_enter16_c2_eni215_input_accepted;
assign local_bb5_c2_enter16_c2_eni215_inc_pipelined_thread = 1'b1;
assign local_bb5_c2_enter16_c2_eni215_dec_pipelined_thread = ~(1'b0);
assign local_bb5_c2_enter16_c2_eni215_fu_stall_out = (~(local_bb5_c2_enter16_c2_eni215_inputs_ready) | local_bb5_c2_exit11_c2_exi113_entry_stall);
assign local_bb5_c2_enter16_c2_eni215_stall_local = (local_bb5_c2_enter16_c2_eni215_stall_in_0 | local_bb5_c2_enter16_c2_eni215_stall_in_1 | local_bb5_c2_enter16_c2_eni215_stall_in_2);
assign local_bb5_c2_enter16_c2_eni215_valid_out_0 = local_bb5_c2_enter16_c2_eni215_inputs_ready;
assign local_bb5_c2_enter16_c2_eni215_valid_out_1 = local_bb5_c2_enter16_c2_eni215_inputs_ready;
assign local_bb5_c2_enter16_c2_eni215_valid_out_2 = local_bb5_c2_enter16_c2_eni215_inputs_ready;
assign local_bb5_c2_eni215_stall_in = (|local_bb5_c2_enter16_c2_eni215_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb5_c2_ene117_stall_local;
wire [31:0] local_bb5_c2_ene117;

assign local_bb5_c2_ene117[31:0] = local_bb5_c2_enter16_c2_eni215[63:32];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_ene218_stall_local;
wire [31:0] local_bb5_c2_ene218;

assign local_bb5_c2_ene218[31:0] = local_bb5_c2_enter16_c2_eni215[95:64];

// This section implements an unregistered operation.
// 
wire SFC_7_VALID_5_5_0_valid_out;
wire SFC_7_VALID_5_5_0_stall_in;
wire SFC_7_VALID_5_5_0_inputs_ready;
wire SFC_7_VALID_5_5_0_stall_local;
wire SFC_7_VALID_5_5_0;

assign SFC_7_VALID_5_5_0_inputs_ready = local_bb5_c2_enter16_c2_eni215_valid_out_2;
assign SFC_7_VALID_5_5_0 = local_bb5_c2_enter16_c2_eni215_valid_bit;
assign SFC_7_VALID_5_5_0_valid_out = 1'b1;
assign local_bb5_c2_enter16_c2_eni215_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_add41_valid_out;
wire local_bb5_add41_stall_in;
wire local_bb5_add41_inputs_ready;
wire local_bb5_add41_stall_local;
wire [31:0] local_bb5_add41;

assign local_bb5_add41_inputs_ready = (local_bb5_c2_enter16_c2_eni215_valid_out_0 & local_bb5_c2_enter16_c2_eni215_valid_out_1);
assign local_bb5_add41 = (local_bb5_c2_ene117 + local_bb5_c2_ene218);
assign local_bb5_add41_valid_out = 1'b1;
assign local_bb5_c2_enter16_c2_eni215_stall_in_0 = 1'b0;
assign local_bb5_c2_enter16_c2_eni215_stall_in_1 = 1'b0;

// This section implements a registered operation.
// 
wire SFC_7_VALID_5_6_0_inputs_ready;
 reg SFC_7_VALID_5_6_0_valid_out_NO_SHIFT_REG;
wire SFC_7_VALID_5_6_0_stall_in;
wire SFC_7_VALID_5_6_0_output_regs_ready;
 reg SFC_7_VALID_5_6_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_7_VALID_5_6_0_causedstall;

assign SFC_7_VALID_5_6_0_inputs_ready = 1'b1;
assign SFC_7_VALID_5_6_0_output_regs_ready = local_bb5_c2_exit11_c2_exi113_enable;
assign SFC_7_VALID_5_5_0_stall_in = 1'b0;
assign SFC_7_VALID_5_6_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c2_exit11_c2_exi113_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_7_VALID_5_6_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_7_VALID_5_6_0_output_regs_ready)
		begin
			SFC_7_VALID_5_6_0_NO_SHIFT_REG <= SFC_7_VALID_5_5_0;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_5to6_bb5_add41_0_valid_out_NO_SHIFT_REG;
 logic rnode_5to6_bb5_add41_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_5to6_bb5_add41_0_NO_SHIFT_REG;
 logic rnode_5to6_bb5_add41_0_reg_6_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_5to6_bb5_add41_0_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb5_add41_0_valid_out_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb5_add41_0_stall_in_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb5_add41_0_stall_out_reg_6_NO_SHIFT_REG;

acl_data_fifo rnode_5to6_bb5_add41_0_reg_6_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_5to6_bb5_add41_0_reg_6_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_5to6_bb5_add41_0_stall_in_reg_6_NO_SHIFT_REG),
	.valid_out(rnode_5to6_bb5_add41_0_valid_out_reg_6_NO_SHIFT_REG),
	.stall_out(rnode_5to6_bb5_add41_0_stall_out_reg_6_NO_SHIFT_REG),
	.data_in(local_bb5_add41),
	.data_out(rnode_5to6_bb5_add41_0_reg_6_NO_SHIFT_REG)
);

defparam rnode_5to6_bb5_add41_0_reg_6_fifo.DEPTH = 1;
defparam rnode_5to6_bb5_add41_0_reg_6_fifo.DATA_WIDTH = 32;
defparam rnode_5to6_bb5_add41_0_reg_6_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_5to6_bb5_add41_0_reg_6_fifo.IMPL = "shift_reg";

assign rnode_5to6_bb5_add41_0_reg_6_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_add41_stall_in = 1'b0;
assign rnode_5to6_bb5_add41_0_NO_SHIFT_REG = rnode_5to6_bb5_add41_0_reg_6_NO_SHIFT_REG;
assign rnode_5to6_bb5_add41_0_stall_in_reg_6_NO_SHIFT_REG = ~(local_bb5_c2_exit11_c2_exi113_enable);
assign rnode_5to6_bb5_add41_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_idxprom42_stall_local;
wire [63:0] local_bb5_idxprom42;

assign local_bb5_idxprom42[32] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[33] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[34] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[35] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[36] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[37] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[38] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[39] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[40] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[41] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[42] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[43] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[44] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[45] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[46] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[47] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[48] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[49] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[50] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[51] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[52] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[53] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[54] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[55] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[56] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[57] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[58] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[59] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[60] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[61] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[62] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[63] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom42[31:0] = rnode_5to6_bb5_add41_0_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_arrayidx43_stall_local;
wire [63:0] local_bb5_arrayidx43;

assign local_bb5_arrayidx43 = ((input_inputFeatureMap & 64'hFFFFFFFFFFFFFC00) + (local_bb5_idxprom42 << 6'h2));

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exi113_valid_out;
wire local_bb5_c2_exi113_stall_in;
wire local_bb5_c2_exi113_inputs_ready;
wire local_bb5_c2_exi113_stall_local;
wire [127:0] local_bb5_c2_exi113;

assign local_bb5_c2_exi113_inputs_ready = rnode_5to6_bb5_add41_0_valid_out_NO_SHIFT_REG;
assign local_bb5_c2_exi113[63:0] = 64'bx;
assign local_bb5_c2_exi113[127:64] = (local_bb5_arrayidx43 & 64'hFFFFFFFFFFFFFFFC);
assign local_bb5_c2_exi113_valid_out = 1'b1;
assign rnode_5to6_bb5_add41_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exit11_c2_exi113_valid_out;
wire local_bb5_c2_exit11_c2_exi113_stall_in;
wire local_bb5_c2_exit11_c2_exi113_inputs_ready;
wire local_bb5_c2_exit11_c2_exi113_stall_local;
wire [127:0] local_bb5_c2_exit11_c2_exi113;
wire local_bb5_c2_exit11_c2_exi113_valid;
wire local_bb5_c2_exit11_c2_exi113_fu_stall_out;

acl_enable_sink local_bb5_c2_exit11_c2_exi113_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb5_c2_exi113),
	.data_out(local_bb5_c2_exit11_c2_exi113),
	.input_accepted(local_bb5_c2_enter16_c2_eni215_input_accepted),
	.valid_out(local_bb5_c2_exit11_c2_exi113_valid),
	.stall_in(local_bb5_c2_exit11_c2_exi113_stall_local),
	.enable(local_bb5_c2_exit11_c2_exi113_enable),
	.valid_in(local_bb5_c2_exit11_c2_exi113_valid_in),
	.stall_entry(local_bb5_c2_exit11_c2_exi113_entry_stall),
	.inc_pipelined_thread(local_bb5_c2_enter16_c2_eni215_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb5_c2_enter16_c2_eni215_dec_pipelined_thread)
);

defparam local_bb5_c2_exit11_c2_exi113_instance.DATA_WIDTH = 128;
defparam local_bb5_c2_exit11_c2_exi113_instance.PIPELINE_DEPTH = 1;
defparam local_bb5_c2_exit11_c2_exi113_instance.SCHEDULEII = 1;
defparam local_bb5_c2_exit11_c2_exi113_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb5_c2_exit11_c2_exi113_inputs_ready = (local_bb5_c2_exi113_valid_out & SFC_7_VALID_5_6_0_valid_out_NO_SHIFT_REG);
assign local_bb5_c2_exit11_c2_exi113_valid_in = SFC_7_VALID_5_6_0_NO_SHIFT_REG;
assign local_bb5_c2_exit11_c2_exi113_fu_stall_out = ~(local_bb5_c2_exit11_c2_exi113_enable);
assign local_bb5_c2_exit11_c2_exi113_valid_out = local_bb5_c2_exit11_c2_exi113_valid;
assign local_bb5_c2_exit11_c2_exi113_stall_local = local_bb5_c2_exit11_c2_exi113_stall_in;
assign local_bb5_c2_exi113_stall_in = 1'b0;
assign SFC_7_VALID_5_6_0_stall_in = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exe112_valid_out;
wire local_bb5_c2_exe112_stall_in;
wire local_bb5_c2_exe112_inputs_ready;
wire local_bb5_c2_exe112_stall_local;
wire [63:0] local_bb5_c2_exe112;

assign local_bb5_c2_exe112_inputs_ready = local_bb5_c2_exit11_c2_exi113_valid_out;
assign local_bb5_c2_exe112[63:0] = local_bb5_c2_exit11_c2_exi113[127:64];
assign local_bb5_c2_exe112_valid_out = local_bb5_c2_exe112_inputs_ready;
assign local_bb5_c2_exe112_stall_local = local_bb5_c2_exe112_stall_in;
assign local_bb5_c2_exit11_c2_exi113_stall_in = (|local_bb5_c2_exe112_stall_local);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_6to7_bb5_c2_exe112_0_valid_out_NO_SHIFT_REG;
 logic rnode_6to7_bb5_c2_exe112_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_6to7_bb5_c2_exe112_0_NO_SHIFT_REG;
 logic rnode_6to7_bb5_c2_exe112_0_reg_7_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_6to7_bb5_c2_exe112_0_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb5_c2_exe112_0_valid_out_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb5_c2_exe112_0_stall_in_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb5_c2_exe112_0_stall_out_reg_7_NO_SHIFT_REG;

acl_data_fifo rnode_6to7_bb5_c2_exe112_0_reg_7_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_6to7_bb5_c2_exe112_0_reg_7_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_6to7_bb5_c2_exe112_0_stall_in_reg_7_NO_SHIFT_REG),
	.valid_out(rnode_6to7_bb5_c2_exe112_0_valid_out_reg_7_NO_SHIFT_REG),
	.stall_out(rnode_6to7_bb5_c2_exe112_0_stall_out_reg_7_NO_SHIFT_REG),
	.data_in((local_bb5_c2_exe112 & 64'hFFFFFFFFFFFFFFFC)),
	.data_out(rnode_6to7_bb5_c2_exe112_0_reg_7_NO_SHIFT_REG)
);

defparam rnode_6to7_bb5_c2_exe112_0_reg_7_fifo.DEPTH = 2;
defparam rnode_6to7_bb5_c2_exe112_0_reg_7_fifo.DATA_WIDTH = 64;
defparam rnode_6to7_bb5_c2_exe112_0_reg_7_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_6to7_bb5_c2_exe112_0_reg_7_fifo.IMPL = "ll_reg";

assign rnode_6to7_bb5_c2_exe112_0_reg_7_inputs_ready_NO_SHIFT_REG = local_bb5_c2_exe112_valid_out;
assign local_bb5_c2_exe112_stall_in = rnode_6to7_bb5_c2_exe112_0_stall_out_reg_7_NO_SHIFT_REG;
assign rnode_6to7_bb5_c2_exe112_0_NO_SHIFT_REG = rnode_6to7_bb5_c2_exe112_0_reg_7_NO_SHIFT_REG;
assign rnode_6to7_bb5_c2_exe112_0_stall_in_reg_7_NO_SHIFT_REG = rnode_6to7_bb5_c2_exe112_0_stall_in_NO_SHIFT_REG;
assign rnode_6to7_bb5_c2_exe112_0_valid_out_NO_SHIFT_REG = rnode_6to7_bb5_c2_exe112_0_valid_out_reg_7_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb5_ld__inputs_ready;
 reg local_bb5_ld__valid_out_NO_SHIFT_REG;
wire local_bb5_ld__stall_in;
wire local_bb5_ld__output_regs_ready;
wire local_bb5_ld__fu_stall_out;
wire local_bb5_ld__fu_valid_out;
wire [31:0] local_bb5_ld__lsu_dataout;
 reg [31:0] local_bb5_ld__NO_SHIFT_REG;
wire local_bb5_ld__causedstall;

lsu_top lsu_local_bb5_ld_ (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb5_ld__fu_stall_out),
	.i_valid(local_bb5_ld__inputs_ready),
	.i_address((rnode_6to7_bb5_c2_exe112_0_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFFFC)),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(rnode_1to7__phi_decision76_xor_or_0_NO_SHIFT_REG),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb5_ld__output_regs_ready)),
	.o_valid(local_bb5_ld__fu_valid_out),
	.o_readdata(local_bb5_ld__lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb5_ld__active),
	.avm_address(avm_local_bb5_ld__address),
	.avm_read(avm_local_bb5_ld__read),
	.avm_enable(avm_local_bb5_ld__enable),
	.avm_readdata(avm_local_bb5_ld__readdata),
	.avm_write(avm_local_bb5_ld__write),
	.avm_writeack(avm_local_bb5_ld__writeack),
	.avm_burstcount(avm_local_bb5_ld__burstcount),
	.avm_writedata(avm_local_bb5_ld__writedata),
	.avm_byteenable(avm_local_bb5_ld__byteenable),
	.avm_waitrequest(avm_local_bb5_ld__waitrequest),
	.avm_readdatavalid(avm_local_bb5_ld__readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb5_ld_.AWIDTH = 32;
defparam lsu_local_bb5_ld_.WIDTH_BYTES = 4;
defparam lsu_local_bb5_ld_.MWIDTH_BYTES = 64;
defparam lsu_local_bb5_ld_.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb5_ld_.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb5_ld_.READ = 1;
defparam lsu_local_bb5_ld_.ATOMIC = 0;
defparam lsu_local_bb5_ld_.WIDTH = 32;
defparam lsu_local_bb5_ld_.MWIDTH = 512;
defparam lsu_local_bb5_ld_.ATOMIC_WIDTH = 3;
defparam lsu_local_bb5_ld_.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb5_ld_.KERNEL_SIDE_MEM_LATENCY = 160;
defparam lsu_local_bb5_ld_.MEMORY_SIDE_MEM_LATENCY = 69;
defparam lsu_local_bb5_ld_.USE_WRITE_ACK = 0;
defparam lsu_local_bb5_ld_.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb5_ld_.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb5_ld_.NUMBER_BANKS = 1;
defparam lsu_local_bb5_ld_.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb5_ld_.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb5_ld_.USEINPUTFIFO = 0;
defparam lsu_local_bb5_ld_.USECACHING = 0;
defparam lsu_local_bb5_ld_.USEOUTPUTFIFO = 1;
defparam lsu_local_bb5_ld_.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb5_ld_.ADDRSPACE = 1;
defparam lsu_local_bb5_ld_.STYLE = "BURST-COALESCED";

assign local_bb5_ld__inputs_ready = (rnode_6to7_bb5_c2_exe112_0_valid_out_NO_SHIFT_REG & rnode_1to7__phi_decision76_xor_or_0_valid_out_0_NO_SHIFT_REG);
assign local_bb5_ld__output_regs_ready = (&(~(local_bb5_ld__valid_out_NO_SHIFT_REG) | ~(local_bb5_ld__stall_in)));
assign rnode_6to7_bb5_c2_exe112_0_stall_in_NO_SHIFT_REG = (local_bb5_ld__fu_stall_out | ~(local_bb5_ld__inputs_ready));
assign rnode_1to7__phi_decision76_xor_or_0_stall_in_0_NO_SHIFT_REG = (local_bb5_ld__fu_stall_out | ~(local_bb5_ld__inputs_ready));
assign local_bb5_ld__causedstall = (local_bb5_ld__inputs_ready && (local_bb5_ld__fu_stall_out && !(~(local_bb5_ld__output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_ld__NO_SHIFT_REG <= 'x;
		local_bb5_ld__valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_ld__output_regs_ready)
		begin
			local_bb5_ld__NO_SHIFT_REG <= local_bb5_ld__lsu_dataout;
			local_bb5_ld__valid_out_NO_SHIFT_REG <= local_bb5_ld__fu_valid_out;
		end
		else
		begin
			if (~(local_bb5_ld__stall_in))
			begin
				local_bb5_ld__valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_167to167_bb5_ld__valid_out_0;
wire rstag_167to167_bb5_ld__stall_in_0;
wire rstag_167to167_bb5_ld__valid_out_1;
wire rstag_167to167_bb5_ld__stall_in_1;
wire rstag_167to167_bb5_ld__inputs_ready;
wire rstag_167to167_bb5_ld__stall_local;
 reg rstag_167to167_bb5_ld__staging_valid_NO_SHIFT_REG;
wire rstag_167to167_bb5_ld__combined_valid;
 reg [31:0] rstag_167to167_bb5_ld__staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_167to167_bb5_ld_;
 reg rstag_167to167_bb5_ld__consumed_0_NO_SHIFT_REG;
 reg rstag_167to167_bb5_ld__consumed_1_NO_SHIFT_REG;

assign rstag_167to167_bb5_ld__inputs_ready = local_bb5_ld__valid_out_NO_SHIFT_REG;
assign rstag_167to167_bb5_ld_ = (rstag_167to167_bb5_ld__staging_valid_NO_SHIFT_REG ? rstag_167to167_bb5_ld__staging_reg_NO_SHIFT_REG : local_bb5_ld__NO_SHIFT_REG);
assign rstag_167to167_bb5_ld__combined_valid = (rstag_167to167_bb5_ld__staging_valid_NO_SHIFT_REG | rstag_167to167_bb5_ld__inputs_ready);
assign rstag_167to167_bb5_ld__stall_local = ((rstag_167to167_bb5_ld__stall_in_0 & ~(rstag_167to167_bb5_ld__consumed_0_NO_SHIFT_REG)) | (rstag_167to167_bb5_ld__stall_in_1 & ~(rstag_167to167_bb5_ld__consumed_1_NO_SHIFT_REG)));
assign rstag_167to167_bb5_ld__valid_out_0 = (rstag_167to167_bb5_ld__combined_valid & ~(rstag_167to167_bb5_ld__consumed_0_NO_SHIFT_REG));
assign rstag_167to167_bb5_ld__valid_out_1 = (rstag_167to167_bb5_ld__combined_valid & ~(rstag_167to167_bb5_ld__consumed_1_NO_SHIFT_REG));
assign local_bb5_ld__stall_in = (|rstag_167to167_bb5_ld__staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_167to167_bb5_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_167to167_bb5_ld__staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_167to167_bb5_ld__stall_local)
		begin
			if (~(rstag_167to167_bb5_ld__staging_valid_NO_SHIFT_REG))
			begin
				rstag_167to167_bb5_ld__staging_valid_NO_SHIFT_REG <= rstag_167to167_bb5_ld__inputs_ready;
			end
		end
		else
		begin
			rstag_167to167_bb5_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_167to167_bb5_ld__staging_valid_NO_SHIFT_REG))
		begin
			rstag_167to167_bb5_ld__staging_reg_NO_SHIFT_REG <= local_bb5_ld__NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_167to167_bb5_ld__consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_167to167_bb5_ld__consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_167to167_bb5_ld__consumed_0_NO_SHIFT_REG <= (rstag_167to167_bb5_ld__combined_valid & (rstag_167to167_bb5_ld__consumed_0_NO_SHIFT_REG | ~(rstag_167to167_bb5_ld__stall_in_0)) & rstag_167to167_bb5_ld__stall_local);
		rstag_167to167_bb5_ld__consumed_1_NO_SHIFT_REG <= (rstag_167to167_bb5_ld__combined_valid & (rstag_167to167_bb5_ld__consumed_1_NO_SHIFT_REG | ~(rstag_167to167_bb5_ld__stall_in_1)) & rstag_167to167_bb5_ld__stall_local);
	end
end


// Register node:
//  * latency = 3
//  * capacity = 3
 logic rnode_167to170_bb5_ld__0_valid_out_NO_SHIFT_REG;
 logic rnode_167to170_bb5_ld__0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_167to170_bb5_ld__0_NO_SHIFT_REG;
 logic rnode_167to170_bb5_ld__0_reg_170_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_167to170_bb5_ld__0_reg_170_NO_SHIFT_REG;
 logic rnode_167to170_bb5_ld__0_valid_out_reg_170_NO_SHIFT_REG;
 logic rnode_167to170_bb5_ld__0_stall_in_reg_170_NO_SHIFT_REG;
 logic rnode_167to170_bb5_ld__0_stall_out_reg_170_NO_SHIFT_REG;

acl_data_fifo rnode_167to170_bb5_ld__0_reg_170_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_167to170_bb5_ld__0_reg_170_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_167to170_bb5_ld__0_stall_in_reg_170_NO_SHIFT_REG),
	.valid_out(rnode_167to170_bb5_ld__0_valid_out_reg_170_NO_SHIFT_REG),
	.stall_out(rnode_167to170_bb5_ld__0_stall_out_reg_170_NO_SHIFT_REG),
	.data_in(rstag_167to167_bb5_ld_),
	.data_out(rnode_167to170_bb5_ld__0_reg_170_NO_SHIFT_REG)
);

defparam rnode_167to170_bb5_ld__0_reg_170_fifo.DEPTH = 4;
defparam rnode_167to170_bb5_ld__0_reg_170_fifo.DATA_WIDTH = 32;
defparam rnode_167to170_bb5_ld__0_reg_170_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_167to170_bb5_ld__0_reg_170_fifo.IMPL = "ll_reg";

assign rnode_167to170_bb5_ld__0_reg_170_inputs_ready_NO_SHIFT_REG = rstag_167to167_bb5_ld__valid_out_0;
assign rstag_167to167_bb5_ld__stall_in_0 = rnode_167to170_bb5_ld__0_stall_out_reg_170_NO_SHIFT_REG;
assign rnode_167to170_bb5_ld__0_NO_SHIFT_REG = rnode_167to170_bb5_ld__0_reg_170_NO_SHIFT_REG;
assign rnode_167to170_bb5_ld__0_stall_in_reg_170_NO_SHIFT_REG = rnode_167to170_bb5_ld__0_stall_in_NO_SHIFT_REG;
assign rnode_167to170_bb5_ld__0_valid_out_NO_SHIFT_REG = rnode_167to170_bb5_ld__0_valid_out_reg_170_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb5_cmp44_inputs_ready;
 reg local_bb5_cmp44_valid_out_NO_SHIFT_REG;
wire local_bb5_cmp44_stall_in;
wire local_bb5_cmp44_output_regs_ready;
wire local_bb5_cmp44;
 reg local_bb5_cmp44_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb5_cmp44_valid_pipe_1_NO_SHIFT_REG;
wire local_bb5_cmp44_causedstall;

acl_fp_cmp fp_module_local_bb5_cmp44 (
	.clock(clock),
	.dataa(rnode_166to167_maxValue_418_0_NO_SHIFT_REG),
	.datab(rstag_167to167_bb5_ld_),
	.enable(local_bb5_cmp44_output_regs_ready),
	.result(local_bb5_cmp44)
);

defparam fp_module_local_bb5_cmp44.COMPARISON_MODE = 3;

assign local_bb5_cmp44_inputs_ready = (rnode_166to167_maxValue_418_0_valid_out_0_NO_SHIFT_REG & rstag_167to167_bb5_ld__valid_out_1);
assign local_bb5_cmp44_output_regs_ready = (&(~(local_bb5_cmp44_valid_out_NO_SHIFT_REG) | ~(local_bb5_cmp44_stall_in)));
assign rnode_166to167_maxValue_418_0_stall_in_0_NO_SHIFT_REG = (~(local_bb5_cmp44_output_regs_ready) | ~(local_bb5_cmp44_inputs_ready));
assign rstag_167to167_bb5_ld__stall_in_1 = (~(local_bb5_cmp44_output_regs_ready) | ~(local_bb5_cmp44_inputs_ready));
assign local_bb5_cmp44_causedstall = (local_bb5_cmp44_inputs_ready && (~(local_bb5_cmp44_output_regs_ready) && !(~(local_bb5_cmp44_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_cmp44_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp44_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_cmp44_output_regs_ready)
		begin
			local_bb5_cmp44_valid_pipe_0_NO_SHIFT_REG <= local_bb5_cmp44_inputs_ready;
			local_bb5_cmp44_valid_pipe_1_NO_SHIFT_REG <= local_bb5_cmp44_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_cmp44_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_cmp44_output_regs_ready)
		begin
			local_bb5_cmp44_valid_out_NO_SHIFT_REG <= local_bb5_cmp44_valid_pipe_1_NO_SHIFT_REG;
		end
		else
		begin
			if (~(local_bb5_cmp44_stall_in))
			begin
				local_bb5_cmp44_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_170to170_bb5_cmp44_0_valid_out_NO_SHIFT_REG;
 logic rnode_170to170_bb5_cmp44_0_stall_in_NO_SHIFT_REG;
 logic rnode_170to170_bb5_cmp44_0_NO_SHIFT_REG;
 logic rnode_170to170_bb5_cmp44_0_reg_170_inputs_ready_NO_SHIFT_REG;
 logic rnode_170to170_bb5_cmp44_0_reg_170_NO_SHIFT_REG;
 logic rnode_170to170_bb5_cmp44_0_valid_out_reg_170_NO_SHIFT_REG;
 logic rnode_170to170_bb5_cmp44_0_stall_in_reg_170_NO_SHIFT_REG;
 logic rnode_170to170_bb5_cmp44_0_stall_out_reg_170_NO_SHIFT_REG;

acl_data_fifo rnode_170to170_bb5_cmp44_0_reg_170_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_170to170_bb5_cmp44_0_reg_170_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_170to170_bb5_cmp44_0_stall_in_reg_170_NO_SHIFT_REG),
	.valid_out(rnode_170to170_bb5_cmp44_0_valid_out_reg_170_NO_SHIFT_REG),
	.stall_out(rnode_170to170_bb5_cmp44_0_stall_out_reg_170_NO_SHIFT_REG),
	.data_in(local_bb5_cmp44),
	.data_out(rnode_170to170_bb5_cmp44_0_reg_170_NO_SHIFT_REG)
);

defparam rnode_170to170_bb5_cmp44_0_reg_170_fifo.DEPTH = 3;
defparam rnode_170to170_bb5_cmp44_0_reg_170_fifo.DATA_WIDTH = 1;
defparam rnode_170to170_bb5_cmp44_0_reg_170_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_170to170_bb5_cmp44_0_reg_170_fifo.IMPL = "zl_reg";

assign rnode_170to170_bb5_cmp44_0_reg_170_inputs_ready_NO_SHIFT_REG = local_bb5_cmp44_valid_out_NO_SHIFT_REG;
assign local_bb5_cmp44_stall_in = rnode_170to170_bb5_cmp44_0_stall_out_reg_170_NO_SHIFT_REG;
assign rnode_170to170_bb5_cmp44_0_NO_SHIFT_REG = rnode_170to170_bb5_cmp44_0_reg_170_NO_SHIFT_REG;
assign rnode_170to170_bb5_cmp44_0_stall_in_reg_170_NO_SHIFT_REG = rnode_170to170_bb5_cmp44_0_stall_in_NO_SHIFT_REG;
assign rnode_170to170_bb5_cmp44_0_valid_out_NO_SHIFT_REG = rnode_170to170_bb5_cmp44_0_valid_out_reg_170_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_maxValue_4__valid_out;
wire local_bb5_maxValue_4__stall_in;
wire local_bb5_maxValue_4__inputs_ready;
wire local_bb5_maxValue_4__stall_local;
wire [31:0] local_bb5_maxValue_4_;

assign local_bb5_maxValue_4__inputs_ready = (rnode_167to170_bb5_ld__0_valid_out_NO_SHIFT_REG & rnode_167to170_maxValue_418_0_valid_out_NO_SHIFT_REG & rnode_170to170_bb5_cmp44_0_valid_out_NO_SHIFT_REG);
assign local_bb5_maxValue_4_ = (rnode_170to170_bb5_cmp44_0_NO_SHIFT_REG ? rnode_167to170_maxValue_418_0_NO_SHIFT_REG : rnode_167to170_bb5_ld__0_NO_SHIFT_REG);
assign local_bb5_maxValue_4__valid_out = local_bb5_maxValue_4__inputs_ready;
assign local_bb5_maxValue_4__stall_local = local_bb5_maxValue_4__stall_in;
assign rnode_167to170_bb5_ld__0_stall_in_NO_SHIFT_REG = (local_bb5_maxValue_4__stall_local | ~(local_bb5_maxValue_4__inputs_ready));
assign rnode_167to170_maxValue_418_0_stall_in_NO_SHIFT_REG = (local_bb5_maxValue_4__stall_local | ~(local_bb5_maxValue_4__inputs_ready));
assign rnode_170to170_bb5_cmp44_0_stall_in_NO_SHIFT_REG = (local_bb5_maxValue_4__stall_local | ~(local_bb5_maxValue_4__inputs_ready));

// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_0_NO_SHIFT_REG;
 reg branch_compare_result_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg lvb_cmp48_0_reg_NO_SHIFT_REG;
 reg lvb_var__0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_8_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c0_exe1_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c0_exe2_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_2_0_reg_NO_SHIFT_REG;
 reg lvb_cmp2122_0_reg_NO_SHIFT_REG;
 reg lvb_var__u9_0_reg_NO_SHIFT_REG;
 reg lvb__phi_decision77_xor_0_reg_NO_SHIFT_REG;
 reg lvb__phi_decision76_xor_or_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_channelCounter_049_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul50_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_heightCounter_141_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c3_exe1_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c3_exe2_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c1_exe1_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_widthCounter_232_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_var__u10_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_var__u11_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb5_j_419_LC_InnerPHI_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb5_i_325_LC_OuterPHI_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb5_maxValue_4__0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_0_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb5__demorgan_valid_out & local_bb5_maxValue_4__valid_out & local_bb5_j_419_LC_InnerPHI_valid_out & rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_valid_out_0_NO_SHIFT_REG);
assign branch_var__output_regs_ready = (~(branch_node_valid_out_0_NO_SHIFT_REG) | (((branch_compare_result_NO_SHIFT_REG != 1'b1) & ~(stall_in_1)) | (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & ~(stall_in_0))));
assign local_bb5__demorgan_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb5_maxValue_4__stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb5_j_419_LC_InnerPHI_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_stall_in_0_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_cmp48_0 = lvb_cmp48_0_reg_NO_SHIFT_REG;
assign lvb_cmp48_1 = lvb_cmp48_0_reg_NO_SHIFT_REG;
assign lvb_var__0 = lvb_var__0_reg_NO_SHIFT_REG;
assign lvb_var__1 = lvb_var__0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_8_0 = lvb_memcoalesce_param_extrValue_8_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_8_1 = lvb_memcoalesce_param_extrValue_8_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_5_0 = lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_5_1 = lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6_0 = lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6_1 = lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG;
assign lvb_c0_exe1_0 = lvb_c0_exe1_0_reg_NO_SHIFT_REG;
assign lvb_c0_exe1_1 = lvb_c0_exe1_0_reg_NO_SHIFT_REG;
assign lvb_c0_exe2_0 = lvb_c0_exe2_0_reg_NO_SHIFT_REG;
assign lvb_c0_exe2_1 = lvb_c0_exe2_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_2_0 = lvb_memcoalesce_param_extrValue_2_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_2_1 = lvb_memcoalesce_param_extrValue_2_0_reg_NO_SHIFT_REG;
assign lvb_cmp2122_0 = lvb_cmp2122_0_reg_NO_SHIFT_REG;
assign lvb_cmp2122_1 = lvb_cmp2122_0_reg_NO_SHIFT_REG;
assign lvb_var__u9_0 = lvb_var__u9_0_reg_NO_SHIFT_REG;
assign lvb_var__u9_1 = lvb_var__u9_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision77_xor_0 = lvb__phi_decision77_xor_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision77_xor_1 = lvb__phi_decision77_xor_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision76_xor_or_0 = lvb__phi_decision76_xor_or_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision76_xor_or_1 = lvb__phi_decision76_xor_or_0_reg_NO_SHIFT_REG;
assign lvb_channelCounter_049_0 = lvb_channelCounter_049_0_reg_NO_SHIFT_REG;
assign lvb_channelCounter_049_1 = lvb_channelCounter_049_0_reg_NO_SHIFT_REG;
assign lvb_mul50_0 = lvb_mul50_0_reg_NO_SHIFT_REG;
assign lvb_mul50_1 = lvb_mul50_0_reg_NO_SHIFT_REG;
assign lvb_mul_0 = lvb_mul_0_reg_NO_SHIFT_REG;
assign lvb_mul_1 = lvb_mul_0_reg_NO_SHIFT_REG;
assign lvb_heightCounter_141_0 = lvb_heightCounter_141_0_reg_NO_SHIFT_REG;
assign lvb_heightCounter_141_1 = lvb_heightCounter_141_0_reg_NO_SHIFT_REG;
assign lvb_c3_exe1_0 = lvb_c3_exe1_0_reg_NO_SHIFT_REG;
assign lvb_c3_exe1_1 = lvb_c3_exe1_0_reg_NO_SHIFT_REG;
assign lvb_c3_exe2_0 = lvb_c3_exe2_0_reg_NO_SHIFT_REG;
assign lvb_c3_exe2_1 = lvb_c3_exe2_0_reg_NO_SHIFT_REG;
assign lvb_c1_exe1_0 = lvb_c1_exe1_0_reg_NO_SHIFT_REG;
assign lvb_c1_exe1_1 = lvb_c1_exe1_0_reg_NO_SHIFT_REG;
assign lvb_widthCounter_232_0 = lvb_widthCounter_232_0_reg_NO_SHIFT_REG;
assign lvb_widthCounter_232_1 = lvb_widthCounter_232_0_reg_NO_SHIFT_REG;
assign lvb_var__u10_0 = lvb_var__u10_0_reg_NO_SHIFT_REG;
assign lvb_var__u10_1 = lvb_var__u10_0_reg_NO_SHIFT_REG;
assign lvb_var__u11_0 = lvb_var__u11_0_reg_NO_SHIFT_REG;
assign lvb_var__u11_1 = lvb_var__u11_0_reg_NO_SHIFT_REG;
assign lvb_bb5_j_419_LC_InnerPHI_0 = lvb_bb5_j_419_LC_InnerPHI_0_reg_NO_SHIFT_REG;
assign lvb_bb5_j_419_LC_InnerPHI_1 = lvb_bb5_j_419_LC_InnerPHI_0_reg_NO_SHIFT_REG;
assign lvb_bb5_i_325_LC_OuterPHI_0 = lvb_bb5_i_325_LC_OuterPHI_0_reg_NO_SHIFT_REG;
assign lvb_bb5_i_325_LC_OuterPHI_1 = lvb_bb5_i_325_LC_OuterPHI_0_reg_NO_SHIFT_REG;
assign lvb_bb5_maxValue_4__0 = lvb_bb5_maxValue_4__0_reg_NO_SHIFT_REG;
assign lvb_bb5_maxValue_4__1 = lvb_bb5_maxValue_4__0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0_0 = lvb_input_global_id_0_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0_1 = lvb_input_global_id_0_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1_0 = lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1_1 = lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2_0 = lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2_1 = lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_0 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_1 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign valid_out_0 = (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG);
assign valid_out_1 = ((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG);
assign combined_branch_stall_in_signal = ((((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_1) | ((~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_0));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		lvb_cmp48_0_reg_NO_SHIFT_REG <= 'x;
		lvb_var__0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_8_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG <= 'x;
		lvb_c0_exe1_0_reg_NO_SHIFT_REG <= 'x;
		lvb_c0_exe2_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_2_0_reg_NO_SHIFT_REG <= 'x;
		lvb_cmp2122_0_reg_NO_SHIFT_REG <= 'x;
		lvb_var__u9_0_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision77_xor_0_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision76_xor_or_0_reg_NO_SHIFT_REG <= 'x;
		lvb_channelCounter_049_0_reg_NO_SHIFT_REG <= 'x;
		lvb_mul50_0_reg_NO_SHIFT_REG <= 'x;
		lvb_mul_0_reg_NO_SHIFT_REG <= 'x;
		lvb_heightCounter_141_0_reg_NO_SHIFT_REG <= 'x;
		lvb_c3_exe1_0_reg_NO_SHIFT_REG <= 'x;
		lvb_c3_exe2_0_reg_NO_SHIFT_REG <= 'x;
		lvb_c1_exe1_0_reg_NO_SHIFT_REG <= 'x;
		lvb_widthCounter_232_0_reg_NO_SHIFT_REG <= 'x;
		lvb_var__u10_0_reg_NO_SHIFT_REG <= 'x;
		lvb_var__u11_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb5_j_419_LC_InnerPHI_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb5_i_325_LC_OuterPHI_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb5_maxValue_4__0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_0_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= 'x;
		branch_compare_result_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_0_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_cmp48_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[66];
			lvb_var__0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[67];
			lvb_memcoalesce_param_extrValue_8_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[99:68];
			lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[131:100];
			lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[644:613];
			lvb_c0_exe1_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[163:132];
			lvb_c0_exe2_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[195:164];
			lvb_memcoalesce_param_extrValue_2_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[63:32];
			lvb_cmp2122_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[64];
			lvb_var__u9_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[65];
			lvb__phi_decision77_xor_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[196];
			lvb__phi_decision76_xor_or_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[677];
			lvb_channelCounter_049_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[228:197];
			lvb_mul50_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[260:229];
			lvb_mul_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[292:261];
			lvb_heightCounter_141_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[324:293];
			lvb_c3_exe1_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[612:581];
			lvb_c3_exe2_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[356:325];
			lvb_c1_exe1_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[388:357];
			lvb_widthCounter_232_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[420:389];
			lvb_var__u10_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[676:645];
			lvb_var__u11_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[452:421];
			lvb_bb5_j_419_LC_InnerPHI_0_reg_NO_SHIFT_REG <= local_bb5_j_419_LC_InnerPHI;
			lvb_bb5_i_325_LC_OuterPHI_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[31:0];
			lvb_bb5_maxValue_4__0_reg_NO_SHIFT_REG <= local_bb5_maxValue_4_;
			lvb_input_global_id_0_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[484:453];
			lvb_input_global_id_1_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[516:485];
			lvb_input_global_id_2_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[548:517];
			lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= rcnode_169to170_rc0_bb5_i_325_LC_OuterPHI_0_NO_SHIFT_REG[580:549];
			branch_compare_result_NO_SHIFT_REG <= local_bb5__demorgan;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module poolingLayer_basic_block_6
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_global_size_2,
		input [63:0] 		input_inputFeatureMap,
		input [63:0] 		input_outputFeatureMap,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_0,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_1,
		input 		valid_in,
		output 		stall_out,
		input 		input_cmp48,
		input 		input_var_,
		input [31:0] 		input_memcoalesce_param_extrValue_8,
		input [31:0] 		input_memcoalesce_param_extrValue_5,
		input [31:0] 		input_memcoalesce_param_extrValue_6,
		input [31:0] 		input_c0_exe1,
		input [31:0] 		input_c0_exe2,
		input [31:0] 		input_memcoalesce_param_extrValue_2,
		input 		input_cmp2122,
		input 		input_var__u12,
		input 		input__phi_decision77_xor,
		input 		input__phi_decision76_xor_or,
		input [31:0] 		input_channelCounter_049,
		input [31:0] 		input_mul50,
		input [31:0] 		input_mul,
		input [31:0] 		input_heightCounter_141,
		input [31:0] 		input_c3_exe1,
		input [31:0] 		input_c3_exe2,
		input [31:0] 		input_c1_exe1,
		input [31:0] 		input_widthCounter_232,
		input [31:0] 		input_var__u13,
		input [31:0] 		input_maxValue_4_,
		input [31:0] 		input_global_id_0,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out_0,
		input 		stall_in_0,
		output 		lvb_cmp48_0,
		output 		lvb_var__0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_8_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_5_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6_0,
		output [31:0] 		lvb_c0_exe1_0,
		output [31:0] 		lvb_c0_exe2_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_2_0,
		output 		lvb_cmp2122_0,
		output 		lvb_var__u12_0,
		output 		lvb__phi_decision77_xor_0,
		output 		lvb__phi_decision76_xor_or_0,
		output [31:0] 		lvb_channelCounter_049_0,
		output [31:0] 		lvb_mul50_0,
		output [31:0] 		lvb_mul_0,
		output [31:0] 		lvb_heightCounter_141_0,
		output [31:0] 		lvb_c3_exe1_0,
		output [31:0] 		lvb_c3_exe2_0,
		output [31:0] 		lvb_c1_exe1_0,
		output [31:0] 		lvb_bb6_c2_exe138_0,
		output [31:0] 		lvb_bb6_c2_exe237_0,
		output [31:0] 		lvb_bb6_ld__0,
		output [31:0] 		lvb_input_global_id_0_0,
		output [31:0] 		lvb_input_global_id_1_0,
		output [31:0] 		lvb_input_global_id_2_0,
		output [31:0] 		lvb_input_acl_hw_wg_id_0,
		output 		valid_out_1,
		input 		stall_in_1,
		output 		lvb_cmp48_1,
		output 		lvb_var__1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_8_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_5_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6_1,
		output [31:0] 		lvb_c0_exe1_1,
		output [31:0] 		lvb_c0_exe2_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_2_1,
		output 		lvb_cmp2122_1,
		output 		lvb_var__u12_1,
		output 		lvb__phi_decision77_xor_1,
		output 		lvb__phi_decision76_xor_or_1,
		output [31:0] 		lvb_channelCounter_049_1,
		output [31:0] 		lvb_mul50_1,
		output [31:0] 		lvb_mul_1,
		output [31:0] 		lvb_heightCounter_141_1,
		output [31:0] 		lvb_c3_exe1_1,
		output [31:0] 		lvb_c3_exe2_1,
		output [31:0] 		lvb_c1_exe1_1,
		output [31:0] 		lvb_bb6_c2_exe138_1,
		output [31:0] 		lvb_bb6_c2_exe237_1,
		output [31:0] 		lvb_bb6_ld__1,
		output [31:0] 		lvb_input_global_id_0_1,
		output [31:0] 		lvb_input_global_id_1_1,
		output [31:0] 		lvb_input_global_id_2_1,
		output [31:0] 		lvb_input_acl_hw_wg_id_1,
		input [31:0] 		workgroup_size,
		input 		start,
		output 		avm_local_bb6_st_select55_enable,
		input [511:0] 		avm_local_bb6_st_select55_readdata,
		input 		avm_local_bb6_st_select55_readdatavalid,
		input 		avm_local_bb6_st_select55_waitrequest,
		output [31:0] 		avm_local_bb6_st_select55_address,
		output 		avm_local_bb6_st_select55_read,
		output 		avm_local_bb6_st_select55_write,
		input 		avm_local_bb6_st_select55_writeack,
		output [511:0] 		avm_local_bb6_st_select55_writedata,
		output [63:0] 		avm_local_bb6_st_select55_byteenable,
		output [4:0] 		avm_local_bb6_st_select55_burstcount,
		output 		local_bb6_st_select55_active,
		input 		clock2x,
		output 		avm_local_bb6_ld__enable,
		input [511:0] 		avm_local_bb6_ld__readdata,
		input 		avm_local_bb6_ld__readdatavalid,
		input 		avm_local_bb6_ld__waitrequest,
		output [31:0] 		avm_local_bb6_ld__address,
		output 		avm_local_bb6_ld__read,
		output 		avm_local_bb6_ld__write,
		input 		avm_local_bb6_ld__writeack,
		output [511:0] 		avm_local_bb6_ld__writedata,
		output [63:0] 		avm_local_bb6_ld__byteenable,
		output [4:0] 		avm_local_bb6_ld__burstcount,
		output 		local_bb6_ld__active
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((valid_out_0 & valid_out_1) & ~((stall_in_0 | stall_in_1)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_node_stall_in_4;
 reg merge_node_valid_out_4_NO_SHIFT_REG;
wire merge_node_stall_in_5;
 reg merge_node_valid_out_5_NO_SHIFT_REG;
wire merge_node_stall_in_6;
 reg merge_node_valid_out_6_NO_SHIFT_REG;
wire merge_node_stall_in_7;
 reg merge_node_valid_out_7_NO_SHIFT_REG;
wire merge_node_stall_in_8;
 reg merge_node_valid_out_8_NO_SHIFT_REG;
wire merge_node_stall_in_9;
 reg merge_node_valid_out_9_NO_SHIFT_REG;
wire merge_node_stall_in_10;
 reg merge_node_valid_out_10_NO_SHIFT_REG;
wire merge_node_stall_in_11;
 reg merge_node_valid_out_11_NO_SHIFT_REG;
wire merge_node_stall_in_12;
 reg merge_node_valid_out_12_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg input_cmp48_staging_reg_NO_SHIFT_REG;
 reg input_var__staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_8_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_5_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe2_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_2_staging_reg_NO_SHIFT_REG;
 reg input_cmp2122_staging_reg_NO_SHIFT_REG;
 reg input_var__u12_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision77_xor_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision76_xor_or_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_049_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul50_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_heightCounter_141_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c3_exe1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c3_exe2_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c1_exe1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_widthCounter_232_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__u13_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_maxValue_4__staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg local_lvm_cmp48_NO_SHIFT_REG;
 reg local_lvm_var__NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
 reg [31:0] local_lvm_c0_exe1_NO_SHIFT_REG;
 reg [31:0] local_lvm_c0_exe2_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG;
 reg local_lvm_cmp2122_NO_SHIFT_REG;
 reg local_lvm_var__u12_NO_SHIFT_REG;
 reg local_lvm__phi_decision77_xor_NO_SHIFT_REG;
 reg local_lvm__phi_decision76_xor_or_NO_SHIFT_REG;
 reg [31:0] local_lvm_channelCounter_049_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul50_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul_NO_SHIFT_REG;
 reg [31:0] local_lvm_heightCounter_141_NO_SHIFT_REG;
 reg [31:0] local_lvm_c3_exe1_NO_SHIFT_REG;
 reg [31:0] local_lvm_c3_exe2_NO_SHIFT_REG;
 reg [31:0] local_lvm_c1_exe1_NO_SHIFT_REG;
 reg [31:0] local_lvm_widthCounter_232_NO_SHIFT_REG;
 reg [31:0] local_lvm_var__u13_NO_SHIFT_REG;
 reg [31:0] local_lvm_maxValue_4__NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_0_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG) | (merge_node_stall_in_4 & merge_node_valid_out_4_NO_SHIFT_REG) | (merge_node_stall_in_5 & merge_node_valid_out_5_NO_SHIFT_REG) | (merge_node_stall_in_6 & merge_node_valid_out_6_NO_SHIFT_REG) | (merge_node_stall_in_7 & merge_node_valid_out_7_NO_SHIFT_REG) | (merge_node_stall_in_8 & merge_node_valid_out_8_NO_SHIFT_REG) | (merge_node_stall_in_9 & merge_node_valid_out_9_NO_SHIFT_REG) | (merge_node_stall_in_10 & merge_node_valid_out_10_NO_SHIFT_REG) | (merge_node_stall_in_11 & merge_node_valid_out_11_NO_SHIFT_REG) | (merge_node_stall_in_12 & merge_node_valid_out_12_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_cmp48_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_8_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_5_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe1_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe2_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_2_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp2122_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u12_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision77_xor_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision76_xor_or_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_049_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul50_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul_staging_reg_NO_SHIFT_REG <= 'x;
		input_heightCounter_141_staging_reg_NO_SHIFT_REG <= 'x;
		input_c3_exe1_staging_reg_NO_SHIFT_REG <= 'x;
		input_c3_exe2_staging_reg_NO_SHIFT_REG <= 'x;
		input_c1_exe1_staging_reg_NO_SHIFT_REG <= 'x;
		input_widthCounter_232_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u13_staging_reg_NO_SHIFT_REG <= 'x;
		input_maxValue_4__staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_cmp48_staging_reg_NO_SHIFT_REG <= input_cmp48;
				input_var__staging_reg_NO_SHIFT_REG <= input_var_;
				input_memcoalesce_param_extrValue_8_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8;
				input_memcoalesce_param_extrValue_5_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5;
				input_memcoalesce_param_extrValue_6_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6;
				input_c0_exe1_staging_reg_NO_SHIFT_REG <= input_c0_exe1;
				input_c0_exe2_staging_reg_NO_SHIFT_REG <= input_c0_exe2;
				input_memcoalesce_param_extrValue_2_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2;
				input_cmp2122_staging_reg_NO_SHIFT_REG <= input_cmp2122;
				input_var__u12_staging_reg_NO_SHIFT_REG <= input_var__u12;
				input__phi_decision77_xor_staging_reg_NO_SHIFT_REG <= input__phi_decision77_xor;
				input__phi_decision76_xor_or_staging_reg_NO_SHIFT_REG <= input__phi_decision76_xor_or;
				input_channelCounter_049_staging_reg_NO_SHIFT_REG <= input_channelCounter_049;
				input_mul50_staging_reg_NO_SHIFT_REG <= input_mul50;
				input_mul_staging_reg_NO_SHIFT_REG <= input_mul;
				input_heightCounter_141_staging_reg_NO_SHIFT_REG <= input_heightCounter_141;
				input_c3_exe1_staging_reg_NO_SHIFT_REG <= input_c3_exe1;
				input_c3_exe2_staging_reg_NO_SHIFT_REG <= input_c3_exe2;
				input_c1_exe1_staging_reg_NO_SHIFT_REG <= input_c1_exe1;
				input_widthCounter_232_staging_reg_NO_SHIFT_REG <= input_widthCounter_232;
				input_var__u13_staging_reg_NO_SHIFT_REG <= input_var__u13;
				input_maxValue_4__staging_reg_NO_SHIFT_REG <= input_maxValue_4_;
				input_global_id_0_staging_reg_NO_SHIFT_REG <= input_global_id_0;
				input_global_id_1_staging_reg_NO_SHIFT_REG <= input_global_id_1;
				input_global_id_2_staging_reg_NO_SHIFT_REG <= input_global_id_2;
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_cmp48_NO_SHIFT_REG <= input_cmp48_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe2_NO_SHIFT_REG <= input_c0_exe2_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp2122_NO_SHIFT_REG <= input_cmp2122_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u12_NO_SHIFT_REG <= input_var__u12_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision77_xor_NO_SHIFT_REG <= input__phi_decision77_xor_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision76_xor_or_NO_SHIFT_REG <= input__phi_decision76_xor_or_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_049_NO_SHIFT_REG <= input_channelCounter_049_staging_reg_NO_SHIFT_REG;
					local_lvm_mul50_NO_SHIFT_REG <= input_mul50_staging_reg_NO_SHIFT_REG;
					local_lvm_mul_NO_SHIFT_REG <= input_mul_staging_reg_NO_SHIFT_REG;
					local_lvm_heightCounter_141_NO_SHIFT_REG <= input_heightCounter_141_staging_reg_NO_SHIFT_REG;
					local_lvm_c3_exe1_NO_SHIFT_REG <= input_c3_exe1_staging_reg_NO_SHIFT_REG;
					local_lvm_c3_exe2_NO_SHIFT_REG <= input_c3_exe2_staging_reg_NO_SHIFT_REG;
					local_lvm_c1_exe1_NO_SHIFT_REG <= input_c1_exe1_staging_reg_NO_SHIFT_REG;
					local_lvm_widthCounter_232_NO_SHIFT_REG <= input_widthCounter_232_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u13_NO_SHIFT_REG <= input_var__u13_staging_reg_NO_SHIFT_REG;
					local_lvm_maxValue_4__NO_SHIFT_REG <= input_maxValue_4__staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_cmp48_NO_SHIFT_REG <= input_cmp48;
					local_lvm_var__NO_SHIFT_REG <= input_var_;
					local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1;
					local_lvm_c0_exe2_NO_SHIFT_REG <= input_c0_exe2;
					local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2;
					local_lvm_cmp2122_NO_SHIFT_REG <= input_cmp2122;
					local_lvm_var__u12_NO_SHIFT_REG <= input_var__u12;
					local_lvm__phi_decision77_xor_NO_SHIFT_REG <= input__phi_decision77_xor;
					local_lvm__phi_decision76_xor_or_NO_SHIFT_REG <= input__phi_decision76_xor_or;
					local_lvm_channelCounter_049_NO_SHIFT_REG <= input_channelCounter_049;
					local_lvm_mul50_NO_SHIFT_REG <= input_mul50;
					local_lvm_mul_NO_SHIFT_REG <= input_mul;
					local_lvm_heightCounter_141_NO_SHIFT_REG <= input_heightCounter_141;
					local_lvm_c3_exe1_NO_SHIFT_REG <= input_c3_exe1;
					local_lvm_c3_exe2_NO_SHIFT_REG <= input_c3_exe2;
					local_lvm_c1_exe1_NO_SHIFT_REG <= input_c1_exe1;
					local_lvm_widthCounter_232_NO_SHIFT_REG <= input_widthCounter_232;
					local_lvm_var__u13_NO_SHIFT_REG <= input_var__u13;
					local_lvm_maxValue_4__NO_SHIFT_REG <= input_maxValue_4_;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_5_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_6_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_7_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_8_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_9_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_10_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_11_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_12_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_4_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_5_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_6_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_7_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_8_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_9_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_10_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_11_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_12_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_4))
			begin
				merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_5))
			begin
				merge_node_valid_out_5_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_6))
			begin
				merge_node_valid_out_6_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_7))
			begin
				merge_node_valid_out_7_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_8))
			begin
				merge_node_valid_out_8_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_9))
			begin
				merge_node_valid_out_9_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_10))
			begin
				merge_node_valid_out_10_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_11))
			begin
				merge_node_valid_out_11_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_12))
			begin
				merge_node_valid_out_12_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb6_select55_valid_out;
wire local_bb6_select55_stall_in;
wire local_bb6_select55_inputs_ready;
wire local_bb6_select55_stall_local;
wire [31:0] local_bb6_select55;

assign local_bb6_select55_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb6_select55 = (local_lvm_cmp2122_NO_SHIFT_REG ? local_lvm_maxValue_4__NO_SHIFT_REG : local_lvm_var__u13_NO_SHIFT_REG);
assign local_bb6_select55_valid_out = local_bb6_select55_inputs_ready;
assign local_bb6_select55_stall_local = local_bb6_select55_stall_in;
assign merge_node_stall_in_0 = (|local_bb6_select55_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb6_add56_valid_out;
wire local_bb6_add56_stall_in;
wire local_bb6_add56_inputs_ready;
wire local_bb6_add56_stall_local;
wire [31:0] local_bb6_add56;

assign local_bb6_add56_inputs_ready = merge_node_valid_out_1_NO_SHIFT_REG;
assign local_bb6_add56 = (local_lvm_c1_exe1_NO_SHIFT_REG + local_lvm_widthCounter_232_NO_SHIFT_REG);
assign local_bb6_add56_valid_out = local_bb6_add56_inputs_ready;
assign local_bb6_add56_stall_local = local_bb6_add56_stall_in;
assign merge_node_stall_in_1 = (|local_bb6_add56_stall_local);

// Register node:
//  * latency = 156
//  * capacity = 156
 logic rnode_1to157_widthCounter_232_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to157_widthCounter_232_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to157_widthCounter_232_0_NO_SHIFT_REG;
 logic rnode_1to157_widthCounter_232_0_reg_157_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to157_widthCounter_232_0_reg_157_NO_SHIFT_REG;
 logic rnode_1to157_widthCounter_232_0_valid_out_reg_157_NO_SHIFT_REG;
 logic rnode_1to157_widthCounter_232_0_stall_in_reg_157_NO_SHIFT_REG;
 logic rnode_1to157_widthCounter_232_0_stall_out_reg_157_NO_SHIFT_REG;

acl_data_fifo rnode_1to157_widthCounter_232_0_reg_157_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to157_widthCounter_232_0_reg_157_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to157_widthCounter_232_0_stall_in_reg_157_NO_SHIFT_REG),
	.valid_out(rnode_1to157_widthCounter_232_0_valid_out_reg_157_NO_SHIFT_REG),
	.stall_out(rnode_1to157_widthCounter_232_0_stall_out_reg_157_NO_SHIFT_REG),
	.data_in(local_lvm_widthCounter_232_NO_SHIFT_REG),
	.data_out(rnode_1to157_widthCounter_232_0_reg_157_NO_SHIFT_REG)
);

defparam rnode_1to157_widthCounter_232_0_reg_157_fifo.DEPTH = 157;
defparam rnode_1to157_widthCounter_232_0_reg_157_fifo.DATA_WIDTH = 32;
defparam rnode_1to157_widthCounter_232_0_reg_157_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to157_widthCounter_232_0_reg_157_fifo.IMPL = "ram";

assign rnode_1to157_widthCounter_232_0_reg_157_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_2_NO_SHIFT_REG;
assign merge_node_stall_in_2 = rnode_1to157_widthCounter_232_0_stall_out_reg_157_NO_SHIFT_REG;
assign rnode_1to157_widthCounter_232_0_NO_SHIFT_REG = rnode_1to157_widthCounter_232_0_reg_157_NO_SHIFT_REG;
assign rnode_1to157_widthCounter_232_0_stall_in_reg_157_NO_SHIFT_REG = rnode_1to157_widthCounter_232_0_stall_in_NO_SHIFT_REG;
assign rnode_1to157_widthCounter_232_0_valid_out_NO_SHIFT_REG = rnode_1to157_widthCounter_232_0_valid_out_reg_157_NO_SHIFT_REG;

// Register node:
//  * latency = 156
//  * capacity = 156
 logic rnode_1to157_memcoalesce_param_extrValue_8_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to157_memcoalesce_param_extrValue_8_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to157_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG;
 logic rnode_1to157_memcoalesce_param_extrValue_8_0_reg_157_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to157_memcoalesce_param_extrValue_8_0_reg_157_NO_SHIFT_REG;
 logic rnode_1to157_memcoalesce_param_extrValue_8_0_valid_out_reg_157_NO_SHIFT_REG;
 logic rnode_1to157_memcoalesce_param_extrValue_8_0_stall_in_reg_157_NO_SHIFT_REG;
 logic rnode_1to157_memcoalesce_param_extrValue_8_0_stall_out_reg_157_NO_SHIFT_REG;

acl_data_fifo rnode_1to157_memcoalesce_param_extrValue_8_0_reg_157_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to157_memcoalesce_param_extrValue_8_0_reg_157_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to157_memcoalesce_param_extrValue_8_0_stall_in_reg_157_NO_SHIFT_REG),
	.valid_out(rnode_1to157_memcoalesce_param_extrValue_8_0_valid_out_reg_157_NO_SHIFT_REG),
	.stall_out(rnode_1to157_memcoalesce_param_extrValue_8_0_stall_out_reg_157_NO_SHIFT_REG),
	.data_in(local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG),
	.data_out(rnode_1to157_memcoalesce_param_extrValue_8_0_reg_157_NO_SHIFT_REG)
);

defparam rnode_1to157_memcoalesce_param_extrValue_8_0_reg_157_fifo.DEPTH = 157;
defparam rnode_1to157_memcoalesce_param_extrValue_8_0_reg_157_fifo.DATA_WIDTH = 32;
defparam rnode_1to157_memcoalesce_param_extrValue_8_0_reg_157_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to157_memcoalesce_param_extrValue_8_0_reg_157_fifo.IMPL = "ram";

assign rnode_1to157_memcoalesce_param_extrValue_8_0_reg_157_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_3_NO_SHIFT_REG;
assign merge_node_stall_in_3 = rnode_1to157_memcoalesce_param_extrValue_8_0_stall_out_reg_157_NO_SHIFT_REG;
assign rnode_1to157_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG = rnode_1to157_memcoalesce_param_extrValue_8_0_reg_157_NO_SHIFT_REG;
assign rnode_1to157_memcoalesce_param_extrValue_8_0_stall_in_reg_157_NO_SHIFT_REG = rnode_1to157_memcoalesce_param_extrValue_8_0_stall_in_NO_SHIFT_REG;
assign rnode_1to157_memcoalesce_param_extrValue_8_0_valid_out_NO_SHIFT_REG = rnode_1to157_memcoalesce_param_extrValue_8_0_valid_out_reg_157_NO_SHIFT_REG;

// Register node:
//  * latency = 156
//  * capacity = 156
 logic rnode_1to157_c0_exe1_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to157_c0_exe1_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to157_c0_exe1_0_NO_SHIFT_REG;
 logic rnode_1to157_c0_exe1_0_reg_157_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to157_c0_exe1_0_reg_157_NO_SHIFT_REG;
 logic rnode_1to157_c0_exe1_0_valid_out_reg_157_NO_SHIFT_REG;
 logic rnode_1to157_c0_exe1_0_stall_in_reg_157_NO_SHIFT_REG;
 logic rnode_1to157_c0_exe1_0_stall_out_reg_157_NO_SHIFT_REG;

acl_data_fifo rnode_1to157_c0_exe1_0_reg_157_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to157_c0_exe1_0_reg_157_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to157_c0_exe1_0_stall_in_reg_157_NO_SHIFT_REG),
	.valid_out(rnode_1to157_c0_exe1_0_valid_out_reg_157_NO_SHIFT_REG),
	.stall_out(rnode_1to157_c0_exe1_0_stall_out_reg_157_NO_SHIFT_REG),
	.data_in(local_lvm_c0_exe1_NO_SHIFT_REG),
	.data_out(rnode_1to157_c0_exe1_0_reg_157_NO_SHIFT_REG)
);

defparam rnode_1to157_c0_exe1_0_reg_157_fifo.DEPTH = 157;
defparam rnode_1to157_c0_exe1_0_reg_157_fifo.DATA_WIDTH = 32;
defparam rnode_1to157_c0_exe1_0_reg_157_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to157_c0_exe1_0_reg_157_fifo.IMPL = "ram";

assign rnode_1to157_c0_exe1_0_reg_157_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_4_NO_SHIFT_REG;
assign merge_node_stall_in_4 = rnode_1to157_c0_exe1_0_stall_out_reg_157_NO_SHIFT_REG;
assign rnode_1to157_c0_exe1_0_NO_SHIFT_REG = rnode_1to157_c0_exe1_0_reg_157_NO_SHIFT_REG;
assign rnode_1to157_c0_exe1_0_stall_in_reg_157_NO_SHIFT_REG = rnode_1to157_c0_exe1_0_stall_in_NO_SHIFT_REG;
assign rnode_1to157_c0_exe1_0_valid_out_NO_SHIFT_REG = rnode_1to157_c0_exe1_0_valid_out_reg_157_NO_SHIFT_REG;

// Register node:
//  * latency = 156
//  * capacity = 156
 logic rnode_1to157_c3_exe2_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to157_c3_exe2_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to157_c3_exe2_0_NO_SHIFT_REG;
 logic rnode_1to157_c3_exe2_0_reg_157_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to157_c3_exe2_0_reg_157_NO_SHIFT_REG;
 logic rnode_1to157_c3_exe2_0_valid_out_reg_157_NO_SHIFT_REG;
 logic rnode_1to157_c3_exe2_0_stall_in_reg_157_NO_SHIFT_REG;
 logic rnode_1to157_c3_exe2_0_stall_out_reg_157_NO_SHIFT_REG;

acl_data_fifo rnode_1to157_c3_exe2_0_reg_157_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to157_c3_exe2_0_reg_157_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to157_c3_exe2_0_stall_in_reg_157_NO_SHIFT_REG),
	.valid_out(rnode_1to157_c3_exe2_0_valid_out_reg_157_NO_SHIFT_REG),
	.stall_out(rnode_1to157_c3_exe2_0_stall_out_reg_157_NO_SHIFT_REG),
	.data_in(local_lvm_c3_exe2_NO_SHIFT_REG),
	.data_out(rnode_1to157_c3_exe2_0_reg_157_NO_SHIFT_REG)
);

defparam rnode_1to157_c3_exe2_0_reg_157_fifo.DEPTH = 157;
defparam rnode_1to157_c3_exe2_0_reg_157_fifo.DATA_WIDTH = 32;
defparam rnode_1to157_c3_exe2_0_reg_157_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to157_c3_exe2_0_reg_157_fifo.IMPL = "ram";

assign rnode_1to157_c3_exe2_0_reg_157_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_5_NO_SHIFT_REG;
assign merge_node_stall_in_5 = rnode_1to157_c3_exe2_0_stall_out_reg_157_NO_SHIFT_REG;
assign rnode_1to157_c3_exe2_0_NO_SHIFT_REG = rnode_1to157_c3_exe2_0_reg_157_NO_SHIFT_REG;
assign rnode_1to157_c3_exe2_0_stall_in_reg_157_NO_SHIFT_REG = rnode_1to157_c3_exe2_0_stall_in_NO_SHIFT_REG;
assign rnode_1to157_c3_exe2_0_valid_out_NO_SHIFT_REG = rnode_1to157_c3_exe2_0_valid_out_reg_157_NO_SHIFT_REG;

// Register node:
//  * latency = 156
//  * capacity = 156
 logic rnode_1to157_var__u12_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to157_var__u12_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to157_var__u12_0_NO_SHIFT_REG;
 logic rnode_1to157_var__u12_0_reg_157_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to157_var__u12_0_reg_157_NO_SHIFT_REG;
 logic rnode_1to157_var__u12_0_valid_out_reg_157_NO_SHIFT_REG;
 logic rnode_1to157_var__u12_0_stall_in_reg_157_NO_SHIFT_REG;
 logic rnode_1to157_var__u12_0_stall_out_reg_157_NO_SHIFT_REG;

acl_data_fifo rnode_1to157_var__u12_0_reg_157_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to157_var__u12_0_reg_157_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to157_var__u12_0_stall_in_reg_157_NO_SHIFT_REG),
	.valid_out(rnode_1to157_var__u12_0_valid_out_reg_157_NO_SHIFT_REG),
	.stall_out(rnode_1to157_var__u12_0_stall_out_reg_157_NO_SHIFT_REG),
	.data_in(local_lvm_var__u12_NO_SHIFT_REG),
	.data_out(rnode_1to157_var__u12_0_reg_157_NO_SHIFT_REG)
);

defparam rnode_1to157_var__u12_0_reg_157_fifo.DEPTH = 157;
defparam rnode_1to157_var__u12_0_reg_157_fifo.DATA_WIDTH = 1;
defparam rnode_1to157_var__u12_0_reg_157_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to157_var__u12_0_reg_157_fifo.IMPL = "ram";

assign rnode_1to157_var__u12_0_reg_157_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_6_NO_SHIFT_REG;
assign merge_node_stall_in_6 = rnode_1to157_var__u12_0_stall_out_reg_157_NO_SHIFT_REG;
assign rnode_1to157_var__u12_0_NO_SHIFT_REG = rnode_1to157_var__u12_0_reg_157_NO_SHIFT_REG;
assign rnode_1to157_var__u12_0_stall_in_reg_157_NO_SHIFT_REG = rnode_1to157_var__u12_0_stall_in_NO_SHIFT_REG;
assign rnode_1to157_var__u12_0_valid_out_NO_SHIFT_REG = rnode_1to157_var__u12_0_valid_out_reg_157_NO_SHIFT_REG;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_1to3__phi_decision77_xor_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to3__phi_decision77_xor_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_1to3__phi_decision77_xor_0_NO_SHIFT_REG;
 logic rnode_1to3__phi_decision77_xor_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to3__phi_decision77_xor_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_1to3__phi_decision77_xor_1_NO_SHIFT_REG;
 logic rnode_1to3__phi_decision77_xor_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to3__phi_decision77_xor_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3__phi_decision77_xor_0_valid_out_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3__phi_decision77_xor_0_stall_in_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3__phi_decision77_xor_0_stall_out_reg_3_NO_SHIFT_REG;
 reg rnode_1to3__phi_decision77_xor_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to3__phi_decision77_xor_0_consumed_1_NO_SHIFT_REG;
wire [65:0] rci_rcnode_1to322_rc8_cmp48_0_reg_1;

acl_data_fifo rnode_1to3__phi_decision77_xor_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to3__phi_decision77_xor_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to3__phi_decision77_xor_0_stall_in_0_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_1to3__phi_decision77_xor_0_valid_out_0_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_1to3__phi_decision77_xor_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_lvm__phi_decision77_xor_NO_SHIFT_REG),
	.data_out(rnode_1to3__phi_decision77_xor_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_1to3__phi_decision77_xor_0_reg_3_fifo.DEPTH = 3;
defparam rnode_1to3__phi_decision77_xor_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_1to3__phi_decision77_xor_0_reg_3_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to3__phi_decision77_xor_0_reg_3_fifo.IMPL = "ll_reg";

assign rnode_1to3__phi_decision77_xor_0_reg_3_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_7_NO_SHIFT_REG;
assign merge_node_stall_in_7 = rnode_1to3__phi_decision77_xor_0_stall_out_reg_3_NO_SHIFT_REG;
assign rnode_1to3__phi_decision77_xor_0_stall_in_0_reg_3_NO_SHIFT_REG = ((rnode_1to3__phi_decision77_xor_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to3__phi_decision77_xor_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to3__phi_decision77_xor_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to3__phi_decision77_xor_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to3__phi_decision77_xor_0_valid_out_0_NO_SHIFT_REG = (rnode_1to3__phi_decision77_xor_0_valid_out_0_reg_3_NO_SHIFT_REG & ~(rnode_1to3__phi_decision77_xor_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to3__phi_decision77_xor_0_valid_out_1_NO_SHIFT_REG = (rnode_1to3__phi_decision77_xor_0_valid_out_0_reg_3_NO_SHIFT_REG & ~(rnode_1to3__phi_decision77_xor_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to3__phi_decision77_xor_0_NO_SHIFT_REG = rnode_1to3__phi_decision77_xor_0_reg_3_NO_SHIFT_REG;
assign rnode_1to3__phi_decision77_xor_1_NO_SHIFT_REG = rnode_1to3__phi_decision77_xor_0_reg_3_NO_SHIFT_REG;
assign rci_rcnode_1to322_rc8_cmp48_0_reg_1[0] = local_lvm_cmp48_NO_SHIFT_REG;
assign rci_rcnode_1to322_rc8_cmp48_0_reg_1[1] = local_lvm_var__NO_SHIFT_REG;
assign rci_rcnode_1to322_rc8_cmp48_0_reg_1[33:2] = local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
assign rci_rcnode_1to322_rc8_cmp48_0_reg_1[65:34] = local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to3__phi_decision77_xor_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to3__phi_decision77_xor_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to3__phi_decision77_xor_0_consumed_0_NO_SHIFT_REG <= (rnode_1to3__phi_decision77_xor_0_valid_out_0_reg_3_NO_SHIFT_REG & (rnode_1to3__phi_decision77_xor_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to3__phi_decision77_xor_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to3__phi_decision77_xor_0_stall_in_0_reg_3_NO_SHIFT_REG);
		rnode_1to3__phi_decision77_xor_0_consumed_1_NO_SHIFT_REG <= (rnode_1to3__phi_decision77_xor_0_valid_out_0_reg_3_NO_SHIFT_REG & (rnode_1to3__phi_decision77_xor_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to3__phi_decision77_xor_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to3__phi_decision77_xor_0_stall_in_0_reg_3_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 321
//  * capacity = 321
 logic rcnode_1to322_rc8_cmp48_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to322_rc8_cmp48_0_stall_in_NO_SHIFT_REG;
 logic [65:0] rcnode_1to322_rc8_cmp48_0_NO_SHIFT_REG;
 logic rcnode_1to322_rc8_cmp48_0_reg_322_inputs_ready_NO_SHIFT_REG;
 logic [65:0] rcnode_1to322_rc8_cmp48_0_reg_322_NO_SHIFT_REG;
 logic rcnode_1to322_rc8_cmp48_0_valid_out_reg_322_NO_SHIFT_REG;
 logic rcnode_1to322_rc8_cmp48_0_stall_in_reg_322_NO_SHIFT_REG;
 logic rcnode_1to322_rc8_cmp48_0_stall_out_reg_322_IP_NO_SHIFT_REG;
 logic rcnode_1to322_rc8_cmp48_0_stall_out_reg_322_NO_SHIFT_REG;
wire [65:0] rci_rcnode_1to322_rc9_c0_exe2_0_reg_1;

acl_data_fifo rcnode_1to322_rc8_cmp48_0_reg_322_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to322_rc8_cmp48_0_reg_322_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to322_rc8_cmp48_0_stall_in_reg_322_NO_SHIFT_REG),
	.valid_out(rcnode_1to322_rc8_cmp48_0_valid_out_reg_322_NO_SHIFT_REG),
	.stall_out(rcnode_1to322_rc8_cmp48_0_stall_out_reg_322_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to322_rc8_cmp48_0_reg_1),
	.data_out(rcnode_1to322_rc8_cmp48_0_reg_322_NO_SHIFT_REG)
);

defparam rcnode_1to322_rc8_cmp48_0_reg_322_fifo.DEPTH = 322;
defparam rcnode_1to322_rc8_cmp48_0_reg_322_fifo.DATA_WIDTH = 66;
defparam rcnode_1to322_rc8_cmp48_0_reg_322_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to322_rc8_cmp48_0_reg_322_fifo.IMPL = "ram";

assign rcnode_1to322_rc8_cmp48_0_reg_322_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_8_NO_SHIFT_REG;
assign rcnode_1to322_rc8_cmp48_0_stall_out_reg_322_NO_SHIFT_REG = (~(rcnode_1to322_rc8_cmp48_0_reg_322_inputs_ready_NO_SHIFT_REG) | rcnode_1to322_rc8_cmp48_0_stall_out_reg_322_IP_NO_SHIFT_REG);
assign merge_node_stall_in_8 = rcnode_1to322_rc8_cmp48_0_stall_out_reg_322_NO_SHIFT_REG;
assign rcnode_1to322_rc8_cmp48_0_NO_SHIFT_REG = rcnode_1to322_rc8_cmp48_0_reg_322_NO_SHIFT_REG;
assign rcnode_1to322_rc8_cmp48_0_stall_in_reg_322_NO_SHIFT_REG = rcnode_1to322_rc8_cmp48_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to322_rc8_cmp48_0_valid_out_NO_SHIFT_REG = rcnode_1to322_rc8_cmp48_0_valid_out_reg_322_NO_SHIFT_REG;
assign rci_rcnode_1to322_rc9_c0_exe2_0_reg_1[31:0] = local_lvm_c0_exe2_NO_SHIFT_REG;
assign rci_rcnode_1to322_rc9_c0_exe2_0_reg_1[63:32] = local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG;
assign rci_rcnode_1to322_rc9_c0_exe2_0_reg_1[64] = local_lvm_cmp2122_NO_SHIFT_REG;
assign rci_rcnode_1to322_rc9_c0_exe2_0_reg_1[65] = local_lvm__phi_decision76_xor_or_NO_SHIFT_REG;

// Register node:
//  * latency = 321
//  * capacity = 321
 logic rcnode_1to322_rc9_c0_exe2_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to322_rc9_c0_exe2_0_stall_in_NO_SHIFT_REG;
 logic [65:0] rcnode_1to322_rc9_c0_exe2_0_NO_SHIFT_REG;
 logic rcnode_1to322_rc9_c0_exe2_0_reg_322_inputs_ready_NO_SHIFT_REG;
 logic [65:0] rcnode_1to322_rc9_c0_exe2_0_reg_322_NO_SHIFT_REG;
 logic rcnode_1to322_rc9_c0_exe2_0_valid_out_reg_322_NO_SHIFT_REG;
 logic rcnode_1to322_rc9_c0_exe2_0_stall_in_reg_322_NO_SHIFT_REG;
 logic rcnode_1to322_rc9_c0_exe2_0_stall_out_reg_322_IP_NO_SHIFT_REG;
 logic rcnode_1to322_rc9_c0_exe2_0_stall_out_reg_322_NO_SHIFT_REG;
wire [127:0] rci_rcnode_1to322_rc10_channelCounter_049_0_reg_1;

acl_data_fifo rcnode_1to322_rc9_c0_exe2_0_reg_322_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to322_rc9_c0_exe2_0_reg_322_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to322_rc9_c0_exe2_0_stall_in_reg_322_NO_SHIFT_REG),
	.valid_out(rcnode_1to322_rc9_c0_exe2_0_valid_out_reg_322_NO_SHIFT_REG),
	.stall_out(rcnode_1to322_rc9_c0_exe2_0_stall_out_reg_322_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to322_rc9_c0_exe2_0_reg_1),
	.data_out(rcnode_1to322_rc9_c0_exe2_0_reg_322_NO_SHIFT_REG)
);

defparam rcnode_1to322_rc9_c0_exe2_0_reg_322_fifo.DEPTH = 322;
defparam rcnode_1to322_rc9_c0_exe2_0_reg_322_fifo.DATA_WIDTH = 66;
defparam rcnode_1to322_rc9_c0_exe2_0_reg_322_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to322_rc9_c0_exe2_0_reg_322_fifo.IMPL = "ram";

assign rcnode_1to322_rc9_c0_exe2_0_reg_322_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_9_NO_SHIFT_REG;
assign rcnode_1to322_rc9_c0_exe2_0_stall_out_reg_322_NO_SHIFT_REG = (~(rcnode_1to322_rc9_c0_exe2_0_reg_322_inputs_ready_NO_SHIFT_REG) | rcnode_1to322_rc9_c0_exe2_0_stall_out_reg_322_IP_NO_SHIFT_REG);
assign merge_node_stall_in_9 = rcnode_1to322_rc9_c0_exe2_0_stall_out_reg_322_NO_SHIFT_REG;
assign rcnode_1to322_rc9_c0_exe2_0_NO_SHIFT_REG = rcnode_1to322_rc9_c0_exe2_0_reg_322_NO_SHIFT_REG;
assign rcnode_1to322_rc9_c0_exe2_0_stall_in_reg_322_NO_SHIFT_REG = rcnode_1to322_rc9_c0_exe2_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to322_rc9_c0_exe2_0_valid_out_NO_SHIFT_REG = rcnode_1to322_rc9_c0_exe2_0_valid_out_reg_322_NO_SHIFT_REG;
assign rci_rcnode_1to322_rc10_channelCounter_049_0_reg_1[31:0] = local_lvm_channelCounter_049_NO_SHIFT_REG;
assign rci_rcnode_1to322_rc10_channelCounter_049_0_reg_1[63:32] = local_lvm_mul50_NO_SHIFT_REG;
assign rci_rcnode_1to322_rc10_channelCounter_049_0_reg_1[95:64] = local_lvm_mul_NO_SHIFT_REG;
assign rci_rcnode_1to322_rc10_channelCounter_049_0_reg_1[127:96] = local_lvm_heightCounter_141_NO_SHIFT_REG;

// Register node:
//  * latency = 321
//  * capacity = 321
 logic rcnode_1to322_rc10_channelCounter_049_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to322_rc10_channelCounter_049_0_stall_in_NO_SHIFT_REG;
 logic [127:0] rcnode_1to322_rc10_channelCounter_049_0_NO_SHIFT_REG;
 logic rcnode_1to322_rc10_channelCounter_049_0_reg_322_inputs_ready_NO_SHIFT_REG;
 logic [127:0] rcnode_1to322_rc10_channelCounter_049_0_reg_322_NO_SHIFT_REG;
 logic rcnode_1to322_rc10_channelCounter_049_0_valid_out_reg_322_NO_SHIFT_REG;
 logic rcnode_1to322_rc10_channelCounter_049_0_stall_in_reg_322_NO_SHIFT_REG;
 logic rcnode_1to322_rc10_channelCounter_049_0_stall_out_reg_322_IP_NO_SHIFT_REG;
 logic rcnode_1to322_rc10_channelCounter_049_0_stall_out_reg_322_NO_SHIFT_REG;
wire [127:0] rci_rcnode_1to322_rc11_c3_exe1_0_reg_1;

acl_data_fifo rcnode_1to322_rc10_channelCounter_049_0_reg_322_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to322_rc10_channelCounter_049_0_reg_322_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to322_rc10_channelCounter_049_0_stall_in_reg_322_NO_SHIFT_REG),
	.valid_out(rcnode_1to322_rc10_channelCounter_049_0_valid_out_reg_322_NO_SHIFT_REG),
	.stall_out(rcnode_1to322_rc10_channelCounter_049_0_stall_out_reg_322_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to322_rc10_channelCounter_049_0_reg_1),
	.data_out(rcnode_1to322_rc10_channelCounter_049_0_reg_322_NO_SHIFT_REG)
);

defparam rcnode_1to322_rc10_channelCounter_049_0_reg_322_fifo.DEPTH = 322;
defparam rcnode_1to322_rc10_channelCounter_049_0_reg_322_fifo.DATA_WIDTH = 128;
defparam rcnode_1to322_rc10_channelCounter_049_0_reg_322_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to322_rc10_channelCounter_049_0_reg_322_fifo.IMPL = "ram";

assign rcnode_1to322_rc10_channelCounter_049_0_reg_322_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_10_NO_SHIFT_REG;
assign rcnode_1to322_rc10_channelCounter_049_0_stall_out_reg_322_NO_SHIFT_REG = (~(rcnode_1to322_rc10_channelCounter_049_0_reg_322_inputs_ready_NO_SHIFT_REG) | rcnode_1to322_rc10_channelCounter_049_0_stall_out_reg_322_IP_NO_SHIFT_REG);
assign merge_node_stall_in_10 = rcnode_1to322_rc10_channelCounter_049_0_stall_out_reg_322_NO_SHIFT_REG;
assign rcnode_1to322_rc10_channelCounter_049_0_NO_SHIFT_REG = rcnode_1to322_rc10_channelCounter_049_0_reg_322_NO_SHIFT_REG;
assign rcnode_1to322_rc10_channelCounter_049_0_stall_in_reg_322_NO_SHIFT_REG = rcnode_1to322_rc10_channelCounter_049_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to322_rc10_channelCounter_049_0_valid_out_NO_SHIFT_REG = rcnode_1to322_rc10_channelCounter_049_0_valid_out_reg_322_NO_SHIFT_REG;
assign rci_rcnode_1to322_rc11_c3_exe1_0_reg_1[31:0] = local_lvm_c3_exe1_NO_SHIFT_REG;
assign rci_rcnode_1to322_rc11_c3_exe1_0_reg_1[63:32] = local_lvm_c1_exe1_NO_SHIFT_REG;
assign rci_rcnode_1to322_rc11_c3_exe1_0_reg_1[95:64] = local_lvm_input_global_id_0_NO_SHIFT_REG;
assign rci_rcnode_1to322_rc11_c3_exe1_0_reg_1[127:96] = local_lvm_input_global_id_1_NO_SHIFT_REG;

// Register node:
//  * latency = 321
//  * capacity = 321
 logic rcnode_1to322_rc11_c3_exe1_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to322_rc11_c3_exe1_0_stall_in_NO_SHIFT_REG;
 logic [127:0] rcnode_1to322_rc11_c3_exe1_0_NO_SHIFT_REG;
 logic rcnode_1to322_rc11_c3_exe1_0_reg_322_inputs_ready_NO_SHIFT_REG;
 logic [127:0] rcnode_1to322_rc11_c3_exe1_0_reg_322_NO_SHIFT_REG;
 logic rcnode_1to322_rc11_c3_exe1_0_valid_out_reg_322_NO_SHIFT_REG;
 logic rcnode_1to322_rc11_c3_exe1_0_stall_in_reg_322_NO_SHIFT_REG;
 logic rcnode_1to322_rc11_c3_exe1_0_stall_out_reg_322_IP_NO_SHIFT_REG;
 logic rcnode_1to322_rc11_c3_exe1_0_stall_out_reg_322_NO_SHIFT_REG;
wire [63:0] rci_rcnode_1to322_rc12_input_global_id_2_0_reg_1;

acl_data_fifo rcnode_1to322_rc11_c3_exe1_0_reg_322_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to322_rc11_c3_exe1_0_reg_322_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to322_rc11_c3_exe1_0_stall_in_reg_322_NO_SHIFT_REG),
	.valid_out(rcnode_1to322_rc11_c3_exe1_0_valid_out_reg_322_NO_SHIFT_REG),
	.stall_out(rcnode_1to322_rc11_c3_exe1_0_stall_out_reg_322_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to322_rc11_c3_exe1_0_reg_1),
	.data_out(rcnode_1to322_rc11_c3_exe1_0_reg_322_NO_SHIFT_REG)
);

defparam rcnode_1to322_rc11_c3_exe1_0_reg_322_fifo.DEPTH = 322;
defparam rcnode_1to322_rc11_c3_exe1_0_reg_322_fifo.DATA_WIDTH = 128;
defparam rcnode_1to322_rc11_c3_exe1_0_reg_322_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to322_rc11_c3_exe1_0_reg_322_fifo.IMPL = "ram";

assign rcnode_1to322_rc11_c3_exe1_0_reg_322_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_11_NO_SHIFT_REG;
assign rcnode_1to322_rc11_c3_exe1_0_stall_out_reg_322_NO_SHIFT_REG = (~(rcnode_1to322_rc11_c3_exe1_0_reg_322_inputs_ready_NO_SHIFT_REG) | rcnode_1to322_rc11_c3_exe1_0_stall_out_reg_322_IP_NO_SHIFT_REG);
assign merge_node_stall_in_11 = rcnode_1to322_rc11_c3_exe1_0_stall_out_reg_322_NO_SHIFT_REG;
assign rcnode_1to322_rc11_c3_exe1_0_NO_SHIFT_REG = rcnode_1to322_rc11_c3_exe1_0_reg_322_NO_SHIFT_REG;
assign rcnode_1to322_rc11_c3_exe1_0_stall_in_reg_322_NO_SHIFT_REG = rcnode_1to322_rc11_c3_exe1_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to322_rc11_c3_exe1_0_valid_out_NO_SHIFT_REG = rcnode_1to322_rc11_c3_exe1_0_valid_out_reg_322_NO_SHIFT_REG;
assign rci_rcnode_1to322_rc12_input_global_id_2_0_reg_1[31:0] = local_lvm_input_global_id_2_NO_SHIFT_REG;
assign rci_rcnode_1to322_rc12_input_global_id_2_0_reg_1[63:32] = local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;

// Register node:
//  * latency = 321
//  * capacity = 321
 logic rcnode_1to322_rc12_input_global_id_2_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to322_rc12_input_global_id_2_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rcnode_1to322_rc12_input_global_id_2_0_NO_SHIFT_REG;
 logic rcnode_1to322_rc12_input_global_id_2_0_reg_322_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rcnode_1to322_rc12_input_global_id_2_0_reg_322_NO_SHIFT_REG;
 logic rcnode_1to322_rc12_input_global_id_2_0_valid_out_reg_322_NO_SHIFT_REG;
 logic rcnode_1to322_rc12_input_global_id_2_0_stall_in_reg_322_NO_SHIFT_REG;
 logic rcnode_1to322_rc12_input_global_id_2_0_stall_out_reg_322_IP_NO_SHIFT_REG;
 logic rcnode_1to322_rc12_input_global_id_2_0_stall_out_reg_322_NO_SHIFT_REG;

acl_data_fifo rcnode_1to322_rc12_input_global_id_2_0_reg_322_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to322_rc12_input_global_id_2_0_reg_322_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to322_rc12_input_global_id_2_0_stall_in_reg_322_NO_SHIFT_REG),
	.valid_out(rcnode_1to322_rc12_input_global_id_2_0_valid_out_reg_322_NO_SHIFT_REG),
	.stall_out(rcnode_1to322_rc12_input_global_id_2_0_stall_out_reg_322_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to322_rc12_input_global_id_2_0_reg_1),
	.data_out(rcnode_1to322_rc12_input_global_id_2_0_reg_322_NO_SHIFT_REG)
);

defparam rcnode_1to322_rc12_input_global_id_2_0_reg_322_fifo.DEPTH = 322;
defparam rcnode_1to322_rc12_input_global_id_2_0_reg_322_fifo.DATA_WIDTH = 64;
defparam rcnode_1to322_rc12_input_global_id_2_0_reg_322_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to322_rc12_input_global_id_2_0_reg_322_fifo.IMPL = "ram";

assign rcnode_1to322_rc12_input_global_id_2_0_reg_322_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_12_NO_SHIFT_REG;
assign rcnode_1to322_rc12_input_global_id_2_0_stall_out_reg_322_NO_SHIFT_REG = (~(rcnode_1to322_rc12_input_global_id_2_0_reg_322_inputs_ready_NO_SHIFT_REG) | rcnode_1to322_rc12_input_global_id_2_0_stall_out_reg_322_IP_NO_SHIFT_REG);
assign merge_node_stall_in_12 = rcnode_1to322_rc12_input_global_id_2_0_stall_out_reg_322_NO_SHIFT_REG;
assign rcnode_1to322_rc12_input_global_id_2_0_NO_SHIFT_REG = rcnode_1to322_rc12_input_global_id_2_0_reg_322_NO_SHIFT_REG;
assign rcnode_1to322_rc12_input_global_id_2_0_stall_in_reg_322_NO_SHIFT_REG = rcnode_1to322_rc12_input_global_id_2_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to322_rc12_input_global_id_2_0_valid_out_NO_SHIFT_REG = rcnode_1to322_rc12_input_global_id_2_0_valid_out_reg_322_NO_SHIFT_REG;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_1to3_bb6_select55_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to3_bb6_select55_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to3_bb6_select55_0_NO_SHIFT_REG;
 logic rnode_1to3_bb6_select55_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to3_bb6_select55_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_bb6_select55_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_bb6_select55_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_bb6_select55_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_1to3_bb6_select55_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to3_bb6_select55_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to3_bb6_select55_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_1to3_bb6_select55_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_1to3_bb6_select55_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb6_select55),
	.data_out(rnode_1to3_bb6_select55_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_1to3_bb6_select55_0_reg_3_fifo.DEPTH = 3;
defparam rnode_1to3_bb6_select55_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_1to3_bb6_select55_0_reg_3_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to3_bb6_select55_0_reg_3_fifo.IMPL = "ll_reg";

assign rnode_1to3_bb6_select55_0_reg_3_inputs_ready_NO_SHIFT_REG = local_bb6_select55_valid_out;
assign local_bb6_select55_stall_in = rnode_1to3_bb6_select55_0_stall_out_reg_3_NO_SHIFT_REG;
assign rnode_1to3_bb6_select55_0_NO_SHIFT_REG = rnode_1to3_bb6_select55_0_reg_3_NO_SHIFT_REG;
assign rnode_1to3_bb6_select55_0_stall_in_reg_3_NO_SHIFT_REG = rnode_1to3_bb6_select55_0_stall_in_NO_SHIFT_REG;
assign rnode_1to3_bb6_select55_0_valid_out_NO_SHIFT_REG = rnode_1to3_bb6_select55_0_valid_out_reg_3_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb6_add56_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb6_add56_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb6_add56_0_NO_SHIFT_REG;
 logic rnode_1to2_bb6_add56_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb6_add56_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb6_add56_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb6_add56_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb6_add56_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb6_add56_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb6_add56_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb6_add56_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb6_add56_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb6_add56_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb6_add56),
	.data_out(rnode_1to2_bb6_add56_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb6_add56_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb6_add56_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb6_add56_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb6_add56_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_bb6_add56_0_reg_2_inputs_ready_NO_SHIFT_REG = local_bb6_add56_valid_out;
assign local_bb6_add56_stall_in = rnode_1to2_bb6_add56_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb6_add56_0_NO_SHIFT_REG = rnode_1to2_bb6_add56_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb6_add56_0_stall_in_reg_2_NO_SHIFT_REG = rnode_1to2_bb6_add56_0_stall_in_NO_SHIFT_REG;
assign rnode_1to2_bb6_add56_0_valid_out_NO_SHIFT_REG = rnode_1to2_bb6_add56_0_valid_out_reg_2_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_157to158_widthCounter_232_0_valid_out_NO_SHIFT_REG;
 logic rnode_157to158_widthCounter_232_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_157to158_widthCounter_232_0_NO_SHIFT_REG;
 logic rnode_157to158_widthCounter_232_0_reg_158_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_157to158_widthCounter_232_0_reg_158_NO_SHIFT_REG;
 logic rnode_157to158_widthCounter_232_0_valid_out_reg_158_NO_SHIFT_REG;
 logic rnode_157to158_widthCounter_232_0_stall_in_reg_158_NO_SHIFT_REG;
 logic rnode_157to158_widthCounter_232_0_stall_out_reg_158_NO_SHIFT_REG;

acl_data_fifo rnode_157to158_widthCounter_232_0_reg_158_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_157to158_widthCounter_232_0_reg_158_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_157to158_widthCounter_232_0_stall_in_reg_158_NO_SHIFT_REG),
	.valid_out(rnode_157to158_widthCounter_232_0_valid_out_reg_158_NO_SHIFT_REG),
	.stall_out(rnode_157to158_widthCounter_232_0_stall_out_reg_158_NO_SHIFT_REG),
	.data_in(rnode_1to157_widthCounter_232_0_NO_SHIFT_REG),
	.data_out(rnode_157to158_widthCounter_232_0_reg_158_NO_SHIFT_REG)
);

defparam rnode_157to158_widthCounter_232_0_reg_158_fifo.DEPTH = 1;
defparam rnode_157to158_widthCounter_232_0_reg_158_fifo.DATA_WIDTH = 32;
defparam rnode_157to158_widthCounter_232_0_reg_158_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_157to158_widthCounter_232_0_reg_158_fifo.IMPL = "ll_reg";

assign rnode_157to158_widthCounter_232_0_reg_158_inputs_ready_NO_SHIFT_REG = rnode_1to157_widthCounter_232_0_valid_out_NO_SHIFT_REG;
assign rnode_1to157_widthCounter_232_0_stall_in_NO_SHIFT_REG = rnode_157to158_widthCounter_232_0_stall_out_reg_158_NO_SHIFT_REG;
assign rnode_157to158_widthCounter_232_0_NO_SHIFT_REG = rnode_157to158_widthCounter_232_0_reg_158_NO_SHIFT_REG;
assign rnode_157to158_widthCounter_232_0_stall_in_reg_158_NO_SHIFT_REG = rnode_157to158_widthCounter_232_0_stall_in_NO_SHIFT_REG;
assign rnode_157to158_widthCounter_232_0_valid_out_NO_SHIFT_REG = rnode_157to158_widthCounter_232_0_valid_out_reg_158_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_157to158_memcoalesce_param_extrValue_8_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_157to158_memcoalesce_param_extrValue_8_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_157to158_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG;
 logic rnode_157to158_memcoalesce_param_extrValue_8_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_157to158_memcoalesce_param_extrValue_8_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_157to158_memcoalesce_param_extrValue_8_1_NO_SHIFT_REG;
 logic rnode_157to158_memcoalesce_param_extrValue_8_0_reg_158_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_157to158_memcoalesce_param_extrValue_8_0_reg_158_NO_SHIFT_REG;
 logic rnode_157to158_memcoalesce_param_extrValue_8_0_valid_out_0_reg_158_NO_SHIFT_REG;
 logic rnode_157to158_memcoalesce_param_extrValue_8_0_stall_in_0_reg_158_NO_SHIFT_REG;
 logic rnode_157to158_memcoalesce_param_extrValue_8_0_stall_out_reg_158_NO_SHIFT_REG;
 reg rnode_157to158_memcoalesce_param_extrValue_8_0_consumed_0_NO_SHIFT_REG;
 reg rnode_157to158_memcoalesce_param_extrValue_8_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_157to158_memcoalesce_param_extrValue_8_0_reg_158_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_157to158_memcoalesce_param_extrValue_8_0_reg_158_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_157to158_memcoalesce_param_extrValue_8_0_stall_in_0_reg_158_NO_SHIFT_REG),
	.valid_out(rnode_157to158_memcoalesce_param_extrValue_8_0_valid_out_0_reg_158_NO_SHIFT_REG),
	.stall_out(rnode_157to158_memcoalesce_param_extrValue_8_0_stall_out_reg_158_NO_SHIFT_REG),
	.data_in(rnode_1to157_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG),
	.data_out(rnode_157to158_memcoalesce_param_extrValue_8_0_reg_158_NO_SHIFT_REG)
);

defparam rnode_157to158_memcoalesce_param_extrValue_8_0_reg_158_fifo.DEPTH = 1;
defparam rnode_157to158_memcoalesce_param_extrValue_8_0_reg_158_fifo.DATA_WIDTH = 32;
defparam rnode_157to158_memcoalesce_param_extrValue_8_0_reg_158_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_157to158_memcoalesce_param_extrValue_8_0_reg_158_fifo.IMPL = "ll_reg";

assign rnode_157to158_memcoalesce_param_extrValue_8_0_reg_158_inputs_ready_NO_SHIFT_REG = rnode_1to157_memcoalesce_param_extrValue_8_0_valid_out_NO_SHIFT_REG;
assign rnode_1to157_memcoalesce_param_extrValue_8_0_stall_in_NO_SHIFT_REG = rnode_157to158_memcoalesce_param_extrValue_8_0_stall_out_reg_158_NO_SHIFT_REG;
assign rnode_157to158_memcoalesce_param_extrValue_8_0_stall_in_0_reg_158_NO_SHIFT_REG = ((rnode_157to158_memcoalesce_param_extrValue_8_0_stall_in_0_NO_SHIFT_REG & ~(rnode_157to158_memcoalesce_param_extrValue_8_0_consumed_0_NO_SHIFT_REG)) | (rnode_157to158_memcoalesce_param_extrValue_8_0_stall_in_1_NO_SHIFT_REG & ~(rnode_157to158_memcoalesce_param_extrValue_8_0_consumed_1_NO_SHIFT_REG)));
assign rnode_157to158_memcoalesce_param_extrValue_8_0_valid_out_0_NO_SHIFT_REG = (rnode_157to158_memcoalesce_param_extrValue_8_0_valid_out_0_reg_158_NO_SHIFT_REG & ~(rnode_157to158_memcoalesce_param_extrValue_8_0_consumed_0_NO_SHIFT_REG));
assign rnode_157to158_memcoalesce_param_extrValue_8_0_valid_out_1_NO_SHIFT_REG = (rnode_157to158_memcoalesce_param_extrValue_8_0_valid_out_0_reg_158_NO_SHIFT_REG & ~(rnode_157to158_memcoalesce_param_extrValue_8_0_consumed_1_NO_SHIFT_REG));
assign rnode_157to158_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG = rnode_157to158_memcoalesce_param_extrValue_8_0_reg_158_NO_SHIFT_REG;
assign rnode_157to158_memcoalesce_param_extrValue_8_1_NO_SHIFT_REG = rnode_157to158_memcoalesce_param_extrValue_8_0_reg_158_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_157to158_memcoalesce_param_extrValue_8_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_157to158_memcoalesce_param_extrValue_8_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_157to158_memcoalesce_param_extrValue_8_0_consumed_0_NO_SHIFT_REG <= (rnode_157to158_memcoalesce_param_extrValue_8_0_valid_out_0_reg_158_NO_SHIFT_REG & (rnode_157to158_memcoalesce_param_extrValue_8_0_consumed_0_NO_SHIFT_REG | ~(rnode_157to158_memcoalesce_param_extrValue_8_0_stall_in_0_NO_SHIFT_REG)) & rnode_157to158_memcoalesce_param_extrValue_8_0_stall_in_0_reg_158_NO_SHIFT_REG);
		rnode_157to158_memcoalesce_param_extrValue_8_0_consumed_1_NO_SHIFT_REG <= (rnode_157to158_memcoalesce_param_extrValue_8_0_valid_out_0_reg_158_NO_SHIFT_REG & (rnode_157to158_memcoalesce_param_extrValue_8_0_consumed_1_NO_SHIFT_REG | ~(rnode_157to158_memcoalesce_param_extrValue_8_0_stall_in_1_NO_SHIFT_REG)) & rnode_157to158_memcoalesce_param_extrValue_8_0_stall_in_0_reg_158_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_157to158_c0_exe1_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_157to158_c0_exe1_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_157to158_c0_exe1_0_NO_SHIFT_REG;
 logic rnode_157to158_c0_exe1_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_157to158_c0_exe1_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_157to158_c0_exe1_1_NO_SHIFT_REG;
 logic rnode_157to158_c0_exe1_0_reg_158_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_157to158_c0_exe1_0_reg_158_NO_SHIFT_REG;
 logic rnode_157to158_c0_exe1_0_valid_out_0_reg_158_NO_SHIFT_REG;
 logic rnode_157to158_c0_exe1_0_stall_in_0_reg_158_NO_SHIFT_REG;
 logic rnode_157to158_c0_exe1_0_stall_out_reg_158_NO_SHIFT_REG;
 reg rnode_157to158_c0_exe1_0_consumed_0_NO_SHIFT_REG;
 reg rnode_157to158_c0_exe1_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_157to158_c0_exe1_0_reg_158_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_157to158_c0_exe1_0_reg_158_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_157to158_c0_exe1_0_stall_in_0_reg_158_NO_SHIFT_REG),
	.valid_out(rnode_157to158_c0_exe1_0_valid_out_0_reg_158_NO_SHIFT_REG),
	.stall_out(rnode_157to158_c0_exe1_0_stall_out_reg_158_NO_SHIFT_REG),
	.data_in(rnode_1to157_c0_exe1_0_NO_SHIFT_REG),
	.data_out(rnode_157to158_c0_exe1_0_reg_158_NO_SHIFT_REG)
);

defparam rnode_157to158_c0_exe1_0_reg_158_fifo.DEPTH = 1;
defparam rnode_157to158_c0_exe1_0_reg_158_fifo.DATA_WIDTH = 32;
defparam rnode_157to158_c0_exe1_0_reg_158_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_157to158_c0_exe1_0_reg_158_fifo.IMPL = "ll_reg";

assign rnode_157to158_c0_exe1_0_reg_158_inputs_ready_NO_SHIFT_REG = rnode_1to157_c0_exe1_0_valid_out_NO_SHIFT_REG;
assign rnode_1to157_c0_exe1_0_stall_in_NO_SHIFT_REG = rnode_157to158_c0_exe1_0_stall_out_reg_158_NO_SHIFT_REG;
assign rnode_157to158_c0_exe1_0_stall_in_0_reg_158_NO_SHIFT_REG = ((rnode_157to158_c0_exe1_0_stall_in_0_NO_SHIFT_REG & ~(rnode_157to158_c0_exe1_0_consumed_0_NO_SHIFT_REG)) | (rnode_157to158_c0_exe1_0_stall_in_1_NO_SHIFT_REG & ~(rnode_157to158_c0_exe1_0_consumed_1_NO_SHIFT_REG)));
assign rnode_157to158_c0_exe1_0_valid_out_0_NO_SHIFT_REG = (rnode_157to158_c0_exe1_0_valid_out_0_reg_158_NO_SHIFT_REG & ~(rnode_157to158_c0_exe1_0_consumed_0_NO_SHIFT_REG));
assign rnode_157to158_c0_exe1_0_valid_out_1_NO_SHIFT_REG = (rnode_157to158_c0_exe1_0_valid_out_0_reg_158_NO_SHIFT_REG & ~(rnode_157to158_c0_exe1_0_consumed_1_NO_SHIFT_REG));
assign rnode_157to158_c0_exe1_0_NO_SHIFT_REG = rnode_157to158_c0_exe1_0_reg_158_NO_SHIFT_REG;
assign rnode_157to158_c0_exe1_1_NO_SHIFT_REG = rnode_157to158_c0_exe1_0_reg_158_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_157to158_c0_exe1_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_157to158_c0_exe1_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_157to158_c0_exe1_0_consumed_0_NO_SHIFT_REG <= (rnode_157to158_c0_exe1_0_valid_out_0_reg_158_NO_SHIFT_REG & (rnode_157to158_c0_exe1_0_consumed_0_NO_SHIFT_REG | ~(rnode_157to158_c0_exe1_0_stall_in_0_NO_SHIFT_REG)) & rnode_157to158_c0_exe1_0_stall_in_0_reg_158_NO_SHIFT_REG);
		rnode_157to158_c0_exe1_0_consumed_1_NO_SHIFT_REG <= (rnode_157to158_c0_exe1_0_valid_out_0_reg_158_NO_SHIFT_REG & (rnode_157to158_c0_exe1_0_consumed_1_NO_SHIFT_REG | ~(rnode_157to158_c0_exe1_0_stall_in_1_NO_SHIFT_REG)) & rnode_157to158_c0_exe1_0_stall_in_0_reg_158_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_157to158_c3_exe2_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_157to158_c3_exe2_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_157to158_c3_exe2_0_NO_SHIFT_REG;
 logic rnode_157to158_c3_exe2_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_157to158_c3_exe2_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_157to158_c3_exe2_1_NO_SHIFT_REG;
 logic rnode_157to158_c3_exe2_0_reg_158_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_157to158_c3_exe2_0_reg_158_NO_SHIFT_REG;
 logic rnode_157to158_c3_exe2_0_valid_out_0_reg_158_NO_SHIFT_REG;
 logic rnode_157to158_c3_exe2_0_stall_in_0_reg_158_NO_SHIFT_REG;
 logic rnode_157to158_c3_exe2_0_stall_out_reg_158_NO_SHIFT_REG;
 reg rnode_157to158_c3_exe2_0_consumed_0_NO_SHIFT_REG;
 reg rnode_157to158_c3_exe2_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_157to158_c3_exe2_0_reg_158_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_157to158_c3_exe2_0_reg_158_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_157to158_c3_exe2_0_stall_in_0_reg_158_NO_SHIFT_REG),
	.valid_out(rnode_157to158_c3_exe2_0_valid_out_0_reg_158_NO_SHIFT_REG),
	.stall_out(rnode_157to158_c3_exe2_0_stall_out_reg_158_NO_SHIFT_REG),
	.data_in(rnode_1to157_c3_exe2_0_NO_SHIFT_REG),
	.data_out(rnode_157to158_c3_exe2_0_reg_158_NO_SHIFT_REG)
);

defparam rnode_157to158_c3_exe2_0_reg_158_fifo.DEPTH = 1;
defparam rnode_157to158_c3_exe2_0_reg_158_fifo.DATA_WIDTH = 32;
defparam rnode_157to158_c3_exe2_0_reg_158_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_157to158_c3_exe2_0_reg_158_fifo.IMPL = "ll_reg";

assign rnode_157to158_c3_exe2_0_reg_158_inputs_ready_NO_SHIFT_REG = rnode_1to157_c3_exe2_0_valid_out_NO_SHIFT_REG;
assign rnode_1to157_c3_exe2_0_stall_in_NO_SHIFT_REG = rnode_157to158_c3_exe2_0_stall_out_reg_158_NO_SHIFT_REG;
assign rnode_157to158_c3_exe2_0_stall_in_0_reg_158_NO_SHIFT_REG = ((rnode_157to158_c3_exe2_0_stall_in_0_NO_SHIFT_REG & ~(rnode_157to158_c3_exe2_0_consumed_0_NO_SHIFT_REG)) | (rnode_157to158_c3_exe2_0_stall_in_1_NO_SHIFT_REG & ~(rnode_157to158_c3_exe2_0_consumed_1_NO_SHIFT_REG)));
assign rnode_157to158_c3_exe2_0_valid_out_0_NO_SHIFT_REG = (rnode_157to158_c3_exe2_0_valid_out_0_reg_158_NO_SHIFT_REG & ~(rnode_157to158_c3_exe2_0_consumed_0_NO_SHIFT_REG));
assign rnode_157to158_c3_exe2_0_valid_out_1_NO_SHIFT_REG = (rnode_157to158_c3_exe2_0_valid_out_0_reg_158_NO_SHIFT_REG & ~(rnode_157to158_c3_exe2_0_consumed_1_NO_SHIFT_REG));
assign rnode_157to158_c3_exe2_0_NO_SHIFT_REG = rnode_157to158_c3_exe2_0_reg_158_NO_SHIFT_REG;
assign rnode_157to158_c3_exe2_1_NO_SHIFT_REG = rnode_157to158_c3_exe2_0_reg_158_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_157to158_c3_exe2_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_157to158_c3_exe2_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_157to158_c3_exe2_0_consumed_0_NO_SHIFT_REG <= (rnode_157to158_c3_exe2_0_valid_out_0_reg_158_NO_SHIFT_REG & (rnode_157to158_c3_exe2_0_consumed_0_NO_SHIFT_REG | ~(rnode_157to158_c3_exe2_0_stall_in_0_NO_SHIFT_REG)) & rnode_157to158_c3_exe2_0_stall_in_0_reg_158_NO_SHIFT_REG);
		rnode_157to158_c3_exe2_0_consumed_1_NO_SHIFT_REG <= (rnode_157to158_c3_exe2_0_valid_out_0_reg_158_NO_SHIFT_REG & (rnode_157to158_c3_exe2_0_consumed_1_NO_SHIFT_REG | ~(rnode_157to158_c3_exe2_0_stall_in_1_NO_SHIFT_REG)) & rnode_157to158_c3_exe2_0_stall_in_0_reg_158_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_157to158_var__u12_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_157to158_var__u12_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_157to158_var__u12_0_NO_SHIFT_REG;
 logic rnode_157to158_var__u12_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_157to158_var__u12_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_157to158_var__u12_1_NO_SHIFT_REG;
 logic rnode_157to158_var__u12_0_reg_158_inputs_ready_NO_SHIFT_REG;
 logic rnode_157to158_var__u12_0_reg_158_NO_SHIFT_REG;
 logic rnode_157to158_var__u12_0_valid_out_0_reg_158_NO_SHIFT_REG;
 logic rnode_157to158_var__u12_0_stall_in_0_reg_158_NO_SHIFT_REG;
 logic rnode_157to158_var__u12_0_stall_out_reg_158_NO_SHIFT_REG;
 reg rnode_157to158_var__u12_0_consumed_0_NO_SHIFT_REG;
 reg rnode_157to158_var__u12_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_157to158_var__u12_0_reg_158_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_157to158_var__u12_0_reg_158_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_157to158_var__u12_0_stall_in_0_reg_158_NO_SHIFT_REG),
	.valid_out(rnode_157to158_var__u12_0_valid_out_0_reg_158_NO_SHIFT_REG),
	.stall_out(rnode_157to158_var__u12_0_stall_out_reg_158_NO_SHIFT_REG),
	.data_in(rnode_1to157_var__u12_0_NO_SHIFT_REG),
	.data_out(rnode_157to158_var__u12_0_reg_158_NO_SHIFT_REG)
);

defparam rnode_157to158_var__u12_0_reg_158_fifo.DEPTH = 1;
defparam rnode_157to158_var__u12_0_reg_158_fifo.DATA_WIDTH = 1;
defparam rnode_157to158_var__u12_0_reg_158_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_157to158_var__u12_0_reg_158_fifo.IMPL = "ll_reg";

assign rnode_157to158_var__u12_0_reg_158_inputs_ready_NO_SHIFT_REG = rnode_1to157_var__u12_0_valid_out_NO_SHIFT_REG;
assign rnode_1to157_var__u12_0_stall_in_NO_SHIFT_REG = rnode_157to158_var__u12_0_stall_out_reg_158_NO_SHIFT_REG;
assign rnode_157to158_var__u12_0_stall_in_0_reg_158_NO_SHIFT_REG = ((rnode_157to158_var__u12_0_stall_in_0_NO_SHIFT_REG & ~(rnode_157to158_var__u12_0_consumed_0_NO_SHIFT_REG)) | (rnode_157to158_var__u12_0_stall_in_1_NO_SHIFT_REG & ~(rnode_157to158_var__u12_0_consumed_1_NO_SHIFT_REG)));
assign rnode_157to158_var__u12_0_valid_out_0_NO_SHIFT_REG = (rnode_157to158_var__u12_0_valid_out_0_reg_158_NO_SHIFT_REG & ~(rnode_157to158_var__u12_0_consumed_0_NO_SHIFT_REG));
assign rnode_157to158_var__u12_0_valid_out_1_NO_SHIFT_REG = (rnode_157to158_var__u12_0_valid_out_0_reg_158_NO_SHIFT_REG & ~(rnode_157to158_var__u12_0_consumed_1_NO_SHIFT_REG));
assign rnode_157to158_var__u12_0_NO_SHIFT_REG = rnode_157to158_var__u12_0_reg_158_NO_SHIFT_REG;
assign rnode_157to158_var__u12_1_NO_SHIFT_REG = rnode_157to158_var__u12_0_reg_158_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_157to158_var__u12_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_157to158_var__u12_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_157to158_var__u12_0_consumed_0_NO_SHIFT_REG <= (rnode_157to158_var__u12_0_valid_out_0_reg_158_NO_SHIFT_REG & (rnode_157to158_var__u12_0_consumed_0_NO_SHIFT_REG | ~(rnode_157to158_var__u12_0_stall_in_0_NO_SHIFT_REG)) & rnode_157to158_var__u12_0_stall_in_0_reg_158_NO_SHIFT_REG);
		rnode_157to158_var__u12_0_consumed_1_NO_SHIFT_REG <= (rnode_157to158_var__u12_0_valid_out_0_reg_158_NO_SHIFT_REG & (rnode_157to158_var__u12_0_consumed_1_NO_SHIFT_REG | ~(rnode_157to158_var__u12_0_stall_in_1_NO_SHIFT_REG)) & rnode_157to158_var__u12_0_stall_in_0_reg_158_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 159
//  * capacity = 159
 logic rnode_3to162__phi_decision77_xor_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to162__phi_decision77_xor_0_stall_in_NO_SHIFT_REG;
 logic rnode_3to162__phi_decision77_xor_0_NO_SHIFT_REG;
 logic rnode_3to162__phi_decision77_xor_0_reg_162_inputs_ready_NO_SHIFT_REG;
 logic rnode_3to162__phi_decision77_xor_0_reg_162_NO_SHIFT_REG;
 logic rnode_3to162__phi_decision77_xor_0_valid_out_reg_162_NO_SHIFT_REG;
 logic rnode_3to162__phi_decision77_xor_0_stall_in_reg_162_NO_SHIFT_REG;
 logic rnode_3to162__phi_decision77_xor_0_stall_out_reg_162_NO_SHIFT_REG;

acl_data_fifo rnode_3to162__phi_decision77_xor_0_reg_162_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to162__phi_decision77_xor_0_reg_162_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to162__phi_decision77_xor_0_stall_in_reg_162_NO_SHIFT_REG),
	.valid_out(rnode_3to162__phi_decision77_xor_0_valid_out_reg_162_NO_SHIFT_REG),
	.stall_out(rnode_3to162__phi_decision77_xor_0_stall_out_reg_162_NO_SHIFT_REG),
	.data_in(rnode_1to3__phi_decision77_xor_1_NO_SHIFT_REG),
	.data_out(rnode_3to162__phi_decision77_xor_0_reg_162_NO_SHIFT_REG)
);

defparam rnode_3to162__phi_decision77_xor_0_reg_162_fifo.DEPTH = 160;
defparam rnode_3to162__phi_decision77_xor_0_reg_162_fifo.DATA_WIDTH = 1;
defparam rnode_3to162__phi_decision77_xor_0_reg_162_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_3to162__phi_decision77_xor_0_reg_162_fifo.IMPL = "ram";

assign rnode_3to162__phi_decision77_xor_0_reg_162_inputs_ready_NO_SHIFT_REG = rnode_1to3__phi_decision77_xor_0_valid_out_1_NO_SHIFT_REG;
assign rnode_1to3__phi_decision77_xor_0_stall_in_1_NO_SHIFT_REG = rnode_3to162__phi_decision77_xor_0_stall_out_reg_162_NO_SHIFT_REG;
assign rnode_3to162__phi_decision77_xor_0_NO_SHIFT_REG = rnode_3to162__phi_decision77_xor_0_reg_162_NO_SHIFT_REG;
assign rnode_3to162__phi_decision77_xor_0_stall_in_reg_162_NO_SHIFT_REG = rnode_3to162__phi_decision77_xor_0_stall_in_NO_SHIFT_REG;
assign rnode_3to162__phi_decision77_xor_0_valid_out_NO_SHIFT_REG = rnode_3to162__phi_decision77_xor_0_valid_out_reg_162_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_idxprom57_stall_local;
wire [63:0] local_bb6_idxprom57;

assign local_bb6_idxprom57[32] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[33] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[34] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[35] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[36] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[37] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[38] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[39] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[40] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[41] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[42] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[43] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[44] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[45] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[46] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[47] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[48] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[49] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[50] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[51] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[52] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[53] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[54] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[55] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[56] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[57] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[58] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[59] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[60] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[61] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[62] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[63] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom57[31:0] = rnode_1to2_bb6_add56_0_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_c1_eni165_stall_local;
wire [191:0] local_bb6_c1_eni165;
wire [96:0] rci_rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_reg_158;

assign local_bb6_c1_eni165[31:0] = 32'bx;
assign local_bb6_c1_eni165[63:32] = rnode_157to158_widthCounter_232_0_NO_SHIFT_REG;
assign local_bb6_c1_eni165[191:64] = 128'bx;
assign rci_rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_reg_158[31:0] = rnode_157to158_memcoalesce_param_extrValue_8_1_NO_SHIFT_REG;
assign rci_rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_reg_158[63:32] = rnode_157to158_c0_exe1_1_NO_SHIFT_REG;
assign rci_rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_reg_158[95:64] = rnode_157to158_c3_exe2_1_NO_SHIFT_REG;
assign rci_rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_reg_158[96] = rnode_157to158_var__u12_1_NO_SHIFT_REG;

// Register node:
//  * latency = 164
//  * capacity = 164
 logic rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_valid_out_NO_SHIFT_REG;
 logic rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_stall_in_NO_SHIFT_REG;
 logic [96:0] rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG;
 logic rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_reg_322_inputs_ready_NO_SHIFT_REG;
 logic [96:0] rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_reg_322_NO_SHIFT_REG;
 logic rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_valid_out_reg_322_NO_SHIFT_REG;
 logic rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_stall_in_reg_322_NO_SHIFT_REG;
 logic rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_stall_out_0_reg_322_IP_NO_SHIFT_REG;
 logic rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_stall_out_0_reg_322_NO_SHIFT_REG;

acl_data_fifo rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_reg_322_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_reg_322_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_stall_in_reg_322_NO_SHIFT_REG),
	.valid_out(rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_valid_out_reg_322_NO_SHIFT_REG),
	.stall_out(rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_stall_out_0_reg_322_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_reg_158),
	.data_out(rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_reg_322_NO_SHIFT_REG)
);

defparam rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_reg_322_fifo.DEPTH = 165;
defparam rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_reg_322_fifo.DATA_WIDTH = 97;
defparam rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_reg_322_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_reg_322_fifo.IMPL = "ram";

assign rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_reg_322_inputs_ready_NO_SHIFT_REG = (rnode_157to158_memcoalesce_param_extrValue_8_0_valid_out_1_NO_SHIFT_REG & rnode_157to158_c0_exe1_0_valid_out_1_NO_SHIFT_REG & rnode_157to158_c3_exe2_0_valid_out_1_NO_SHIFT_REG & rnode_157to158_var__u12_0_valid_out_1_NO_SHIFT_REG);
assign rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_stall_out_0_reg_322_NO_SHIFT_REG = (~(rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_reg_322_inputs_ready_NO_SHIFT_REG) | rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_stall_out_0_reg_322_IP_NO_SHIFT_REG);
assign rnode_157to158_memcoalesce_param_extrValue_8_0_stall_in_1_NO_SHIFT_REG = rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_stall_out_0_reg_322_NO_SHIFT_REG;
assign rnode_157to158_c0_exe1_0_stall_in_1_NO_SHIFT_REG = rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_stall_out_0_reg_322_NO_SHIFT_REG;
assign rnode_157to158_c3_exe2_0_stall_in_1_NO_SHIFT_REG = rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_stall_out_0_reg_322_NO_SHIFT_REG;
assign rnode_157to158_var__u12_0_stall_in_1_NO_SHIFT_REG = rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_stall_out_0_reg_322_NO_SHIFT_REG;
assign rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG = rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_reg_322_NO_SHIFT_REG;
assign rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_stall_in_reg_322_NO_SHIFT_REG = rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_stall_in_NO_SHIFT_REG;
assign rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_valid_out_NO_SHIFT_REG = rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_valid_out_reg_322_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_162to163__phi_decision77_xor_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_162to163__phi_decision77_xor_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_162to163__phi_decision77_xor_0_NO_SHIFT_REG;
 logic rnode_162to163__phi_decision77_xor_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_162to163__phi_decision77_xor_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_162to163__phi_decision77_xor_1_NO_SHIFT_REG;
 logic rnode_162to163__phi_decision77_xor_0_reg_163_inputs_ready_NO_SHIFT_REG;
 logic rnode_162to163__phi_decision77_xor_0_reg_163_NO_SHIFT_REG;
 logic rnode_162to163__phi_decision77_xor_0_valid_out_0_reg_163_NO_SHIFT_REG;
 logic rnode_162to163__phi_decision77_xor_0_stall_in_0_reg_163_NO_SHIFT_REG;
 logic rnode_162to163__phi_decision77_xor_0_stall_out_reg_163_NO_SHIFT_REG;
 reg rnode_162to163__phi_decision77_xor_0_consumed_0_NO_SHIFT_REG;
 reg rnode_162to163__phi_decision77_xor_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_162to163__phi_decision77_xor_0_reg_163_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_162to163__phi_decision77_xor_0_reg_163_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_162to163__phi_decision77_xor_0_stall_in_0_reg_163_NO_SHIFT_REG),
	.valid_out(rnode_162to163__phi_decision77_xor_0_valid_out_0_reg_163_NO_SHIFT_REG),
	.stall_out(rnode_162to163__phi_decision77_xor_0_stall_out_reg_163_NO_SHIFT_REG),
	.data_in(rnode_3to162__phi_decision77_xor_0_NO_SHIFT_REG),
	.data_out(rnode_162to163__phi_decision77_xor_0_reg_163_NO_SHIFT_REG)
);

defparam rnode_162to163__phi_decision77_xor_0_reg_163_fifo.DEPTH = 2;
defparam rnode_162to163__phi_decision77_xor_0_reg_163_fifo.DATA_WIDTH = 1;
defparam rnode_162to163__phi_decision77_xor_0_reg_163_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_162to163__phi_decision77_xor_0_reg_163_fifo.IMPL = "ll_reg";

assign rnode_162to163__phi_decision77_xor_0_reg_163_inputs_ready_NO_SHIFT_REG = rnode_3to162__phi_decision77_xor_0_valid_out_NO_SHIFT_REG;
assign rnode_3to162__phi_decision77_xor_0_stall_in_NO_SHIFT_REG = rnode_162to163__phi_decision77_xor_0_stall_out_reg_163_NO_SHIFT_REG;
assign rnode_162to163__phi_decision77_xor_0_stall_in_0_reg_163_NO_SHIFT_REG = ((rnode_162to163__phi_decision77_xor_0_stall_in_0_NO_SHIFT_REG & ~(rnode_162to163__phi_decision77_xor_0_consumed_0_NO_SHIFT_REG)) | (rnode_162to163__phi_decision77_xor_0_stall_in_1_NO_SHIFT_REG & ~(rnode_162to163__phi_decision77_xor_0_consumed_1_NO_SHIFT_REG)));
assign rnode_162to163__phi_decision77_xor_0_valid_out_0_NO_SHIFT_REG = (rnode_162to163__phi_decision77_xor_0_valid_out_0_reg_163_NO_SHIFT_REG & ~(rnode_162to163__phi_decision77_xor_0_consumed_0_NO_SHIFT_REG));
assign rnode_162to163__phi_decision77_xor_0_valid_out_1_NO_SHIFT_REG = (rnode_162to163__phi_decision77_xor_0_valid_out_0_reg_163_NO_SHIFT_REG & ~(rnode_162to163__phi_decision77_xor_0_consumed_1_NO_SHIFT_REG));
assign rnode_162to163__phi_decision77_xor_0_NO_SHIFT_REG = rnode_162to163__phi_decision77_xor_0_reg_163_NO_SHIFT_REG;
assign rnode_162to163__phi_decision77_xor_1_NO_SHIFT_REG = rnode_162to163__phi_decision77_xor_0_reg_163_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_162to163__phi_decision77_xor_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_162to163__phi_decision77_xor_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_162to163__phi_decision77_xor_0_consumed_0_NO_SHIFT_REG <= (rnode_162to163__phi_decision77_xor_0_valid_out_0_reg_163_NO_SHIFT_REG & (rnode_162to163__phi_decision77_xor_0_consumed_0_NO_SHIFT_REG | ~(rnode_162to163__phi_decision77_xor_0_stall_in_0_NO_SHIFT_REG)) & rnode_162to163__phi_decision77_xor_0_stall_in_0_reg_163_NO_SHIFT_REG);
		rnode_162to163__phi_decision77_xor_0_consumed_1_NO_SHIFT_REG <= (rnode_162to163__phi_decision77_xor_0_valid_out_0_reg_163_NO_SHIFT_REG & (rnode_162to163__phi_decision77_xor_0_consumed_1_NO_SHIFT_REG | ~(rnode_162to163__phi_decision77_xor_0_stall_in_1_NO_SHIFT_REG)) & rnode_162to163__phi_decision77_xor_0_stall_in_0_reg_163_NO_SHIFT_REG);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb6_arrayidx58_valid_out;
wire local_bb6_arrayidx58_stall_in;
wire local_bb6_arrayidx58_inputs_ready;
wire local_bb6_arrayidx58_stall_local;
wire [63:0] local_bb6_arrayidx58;

assign local_bb6_arrayidx58_inputs_ready = rnode_1to2_bb6_add56_0_valid_out_NO_SHIFT_REG;
assign local_bb6_arrayidx58 = ((input_outputFeatureMap & 64'hFFFFFFFFFFFFFC00) + (local_bb6_idxprom57 << 6'h2));
assign local_bb6_arrayidx58_valid_out = local_bb6_arrayidx58_inputs_ready;
assign local_bb6_arrayidx58_stall_local = local_bb6_arrayidx58_stall_in;
assign rnode_1to2_bb6_add56_0_stall_in_NO_SHIFT_REG = (|local_bb6_arrayidx58_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb6_c1_eni264_stall_local;
wire [191:0] local_bb6_c1_eni264;

assign local_bb6_c1_eni264[63:0] = local_bb6_c1_eni165[63:0];
assign local_bb6_c1_eni264[95:64] = rnode_157to158_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG;
assign local_bb6_c1_eni264[191:96] = local_bb6_c1_eni165[191:96];

// Register node:
//  * latency = 159
//  * capacity = 159
 logic rnode_163to322__phi_decision77_xor_0_valid_out_NO_SHIFT_REG;
 logic rnode_163to322__phi_decision77_xor_0_stall_in_NO_SHIFT_REG;
 logic rnode_163to322__phi_decision77_xor_0_NO_SHIFT_REG;
 logic rnode_163to322__phi_decision77_xor_0_reg_322_inputs_ready_NO_SHIFT_REG;
 logic rnode_163to322__phi_decision77_xor_0_reg_322_NO_SHIFT_REG;
 logic rnode_163to322__phi_decision77_xor_0_valid_out_reg_322_NO_SHIFT_REG;
 logic rnode_163to322__phi_decision77_xor_0_stall_in_reg_322_NO_SHIFT_REG;
 logic rnode_163to322__phi_decision77_xor_0_stall_out_reg_322_NO_SHIFT_REG;

acl_data_fifo rnode_163to322__phi_decision77_xor_0_reg_322_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_163to322__phi_decision77_xor_0_reg_322_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_163to322__phi_decision77_xor_0_stall_in_reg_322_NO_SHIFT_REG),
	.valid_out(rnode_163to322__phi_decision77_xor_0_valid_out_reg_322_NO_SHIFT_REG),
	.stall_out(rnode_163to322__phi_decision77_xor_0_stall_out_reg_322_NO_SHIFT_REG),
	.data_in(rnode_162to163__phi_decision77_xor_1_NO_SHIFT_REG),
	.data_out(rnode_163to322__phi_decision77_xor_0_reg_322_NO_SHIFT_REG)
);

defparam rnode_163to322__phi_decision77_xor_0_reg_322_fifo.DEPTH = 160;
defparam rnode_163to322__phi_decision77_xor_0_reg_322_fifo.DATA_WIDTH = 1;
defparam rnode_163to322__phi_decision77_xor_0_reg_322_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_163to322__phi_decision77_xor_0_reg_322_fifo.IMPL = "ram";

assign rnode_163to322__phi_decision77_xor_0_reg_322_inputs_ready_NO_SHIFT_REG = rnode_162to163__phi_decision77_xor_0_valid_out_1_NO_SHIFT_REG;
assign rnode_162to163__phi_decision77_xor_0_stall_in_1_NO_SHIFT_REG = rnode_163to322__phi_decision77_xor_0_stall_out_reg_322_NO_SHIFT_REG;
assign rnode_163to322__phi_decision77_xor_0_NO_SHIFT_REG = rnode_163to322__phi_decision77_xor_0_reg_322_NO_SHIFT_REG;
assign rnode_163to322__phi_decision77_xor_0_stall_in_reg_322_NO_SHIFT_REG = rnode_163to322__phi_decision77_xor_0_stall_in_NO_SHIFT_REG;
assign rnode_163to322__phi_decision77_xor_0_valid_out_NO_SHIFT_REG = rnode_163to322__phi_decision77_xor_0_valid_out_reg_322_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb6_arrayidx58_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb6_arrayidx58_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_2to3_bb6_arrayidx58_0_NO_SHIFT_REG;
 logic rnode_2to3_bb6_arrayidx58_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_2to3_bb6_arrayidx58_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb6_arrayidx58_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb6_arrayidx58_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb6_arrayidx58_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb6_arrayidx58_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb6_arrayidx58_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb6_arrayidx58_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb6_arrayidx58_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb6_arrayidx58_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in((local_bb6_arrayidx58 & 64'hFFFFFFFFFFFFFFFC)),
	.data_out(rnode_2to3_bb6_arrayidx58_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb6_arrayidx58_0_reg_3_fifo.DEPTH = 2;
defparam rnode_2to3_bb6_arrayidx58_0_reg_3_fifo.DATA_WIDTH = 64;
defparam rnode_2to3_bb6_arrayidx58_0_reg_3_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_2to3_bb6_arrayidx58_0_reg_3_fifo.IMPL = "ll_reg";

assign rnode_2to3_bb6_arrayidx58_0_reg_3_inputs_ready_NO_SHIFT_REG = local_bb6_arrayidx58_valid_out;
assign local_bb6_arrayidx58_stall_in = rnode_2to3_bb6_arrayidx58_0_stall_out_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb6_arrayidx58_0_NO_SHIFT_REG = rnode_2to3_bb6_arrayidx58_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb6_arrayidx58_0_stall_in_reg_3_NO_SHIFT_REG = rnode_2to3_bb6_arrayidx58_0_stall_in_NO_SHIFT_REG;
assign rnode_2to3_bb6_arrayidx58_0_valid_out_NO_SHIFT_REG = rnode_2to3_bb6_arrayidx58_0_valid_out_reg_3_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_c1_eni363_stall_local;
wire [191:0] local_bb6_c1_eni363;

assign local_bb6_c1_eni363[95:0] = local_bb6_c1_eni264[95:0];
assign local_bb6_c1_eni363[127:96] = rnode_157to158_c0_exe1_0_NO_SHIFT_REG;
assign local_bb6_c1_eni363[191:128] = local_bb6_c1_eni264[191:128];

// This section implements a registered operation.
// 
wire local_bb6_st_select55_inputs_ready;
 reg local_bb6_st_select55_valid_out_NO_SHIFT_REG;
wire local_bb6_st_select55_stall_in;
wire local_bb6_st_select55_output_regs_ready;
wire local_bb6_st_select55_fu_stall_out;
wire local_bb6_st_select55_fu_valid_out;
wire [31:0] local_bb6_st_select55_lsu_wackout;
 reg local_bb6_st_select55_NO_SHIFT_REG;
wire local_bb6_st_select55_causedstall;

lsu_top lsu_local_bb6_st_select55 (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb6_st_select55_fu_stall_out),
	.i_valid(local_bb6_st_select55_inputs_ready),
	.i_address((rnode_2to3_bb6_arrayidx58_0_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFFFC)),
	.i_writedata(rnode_1to3_bb6_select55_0_NO_SHIFT_REG),
	.i_cmpdata(),
	.i_predicate(rnode_1to3__phi_decision77_xor_0_NO_SHIFT_REG),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb6_st_select55_output_regs_ready)),
	.o_valid(local_bb6_st_select55_fu_valid_out),
	.o_readdata(),
	.o_input_fifo_depth(),
	.o_writeack(local_bb6_st_select55_lsu_wackout),
	.i_atomic_op(3'h0),
	.o_active(local_bb6_st_select55_active),
	.avm_address(avm_local_bb6_st_select55_address),
	.avm_read(avm_local_bb6_st_select55_read),
	.avm_enable(avm_local_bb6_st_select55_enable),
	.avm_readdata(avm_local_bb6_st_select55_readdata),
	.avm_write(avm_local_bb6_st_select55_write),
	.avm_writeack(avm_local_bb6_st_select55_writeack),
	.avm_burstcount(avm_local_bb6_st_select55_burstcount),
	.avm_writedata(avm_local_bb6_st_select55_writedata),
	.avm_byteenable(avm_local_bb6_st_select55_byteenable),
	.avm_waitrequest(avm_local_bb6_st_select55_waitrequest),
	.avm_readdatavalid(avm_local_bb6_st_select55_readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb6_st_select55.AWIDTH = 32;
defparam lsu_local_bb6_st_select55.WIDTH_BYTES = 4;
defparam lsu_local_bb6_st_select55.MWIDTH_BYTES = 64;
defparam lsu_local_bb6_st_select55.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb6_st_select55.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb6_st_select55.READ = 0;
defparam lsu_local_bb6_st_select55.ATOMIC = 0;
defparam lsu_local_bb6_st_select55.WIDTH = 32;
defparam lsu_local_bb6_st_select55.MWIDTH = 512;
defparam lsu_local_bb6_st_select55.ATOMIC_WIDTH = 3;
defparam lsu_local_bb6_st_select55.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb6_st_select55.KERNEL_SIDE_MEM_LATENCY = 160;
defparam lsu_local_bb6_st_select55.MEMORY_SIDE_MEM_LATENCY = 18;
defparam lsu_local_bb6_st_select55.USE_WRITE_ACK = 1;
defparam lsu_local_bb6_st_select55.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb6_st_select55.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb6_st_select55.NUMBER_BANKS = 1;
defparam lsu_local_bb6_st_select55.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb6_st_select55.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb6_st_select55.USEINPUTFIFO = 0;
defparam lsu_local_bb6_st_select55.USECACHING = 0;
defparam lsu_local_bb6_st_select55.USEOUTPUTFIFO = 1;
defparam lsu_local_bb6_st_select55.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb6_st_select55.ADDRSPACE = 1;
defparam lsu_local_bb6_st_select55.STYLE = "BURST-COALESCED";
defparam lsu_local_bb6_st_select55.USE_BYTE_EN = 0;

assign local_bb6_st_select55_inputs_ready = (rnode_1to3_bb6_select55_0_valid_out_NO_SHIFT_REG & rnode_2to3_bb6_arrayidx58_0_valid_out_NO_SHIFT_REG & rnode_1to3__phi_decision77_xor_0_valid_out_0_NO_SHIFT_REG);
assign local_bb6_st_select55_output_regs_ready = (&(~(local_bb6_st_select55_valid_out_NO_SHIFT_REG) | ~(local_bb6_st_select55_stall_in)));
assign rnode_1to3_bb6_select55_0_stall_in_NO_SHIFT_REG = (local_bb6_st_select55_fu_stall_out | ~(local_bb6_st_select55_inputs_ready));
assign rnode_2to3_bb6_arrayidx58_0_stall_in_NO_SHIFT_REG = (local_bb6_st_select55_fu_stall_out | ~(local_bb6_st_select55_inputs_ready));
assign rnode_1to3__phi_decision77_xor_0_stall_in_0_NO_SHIFT_REG = (local_bb6_st_select55_fu_stall_out | ~(local_bb6_st_select55_inputs_ready));
assign local_bb6_st_select55_causedstall = (local_bb6_st_select55_inputs_ready && (local_bb6_st_select55_fu_stall_out && !(~(local_bb6_st_select55_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_st_select55_NO_SHIFT_REG <= 'x;
		local_bb6_st_select55_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_st_select55_output_regs_ready)
		begin
			local_bb6_st_select55_NO_SHIFT_REG <= local_bb6_st_select55_lsu_wackout;
			local_bb6_st_select55_valid_out_NO_SHIFT_REG <= local_bb6_st_select55_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_st_select55_stall_in))
			begin
				local_bb6_st_select55_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb6_c1_eni462_stall_local;
wire [191:0] local_bb6_c1_eni462;

assign local_bb6_c1_eni462[127:0] = local_bb6_c1_eni363[127:0];
assign local_bb6_c1_eni462[159:128] = rnode_157to158_c3_exe2_0_NO_SHIFT_REG;
assign local_bb6_c1_eni462[191:160] = local_bb6_c1_eni363[191:160];

// This section implements a staging register.
// 
wire rstag_163to163_bb6_st_select55_valid_out;
wire rstag_163to163_bb6_st_select55_stall_in;
wire rstag_163to163_bb6_st_select55_inputs_ready;
wire rstag_163to163_bb6_st_select55_stall_local;
 reg rstag_163to163_bb6_st_select55_staging_valid_NO_SHIFT_REG;
wire rstag_163to163_bb6_st_select55_combined_valid;
 reg rstag_163to163_bb6_st_select55_staging_reg_NO_SHIFT_REG;
wire rstag_163to163_bb6_st_select55;

assign rstag_163to163_bb6_st_select55_inputs_ready = local_bb6_st_select55_valid_out_NO_SHIFT_REG;
assign rstag_163to163_bb6_st_select55 = (rstag_163to163_bb6_st_select55_staging_valid_NO_SHIFT_REG ? rstag_163to163_bb6_st_select55_staging_reg_NO_SHIFT_REG : local_bb6_st_select55_NO_SHIFT_REG);
assign rstag_163to163_bb6_st_select55_combined_valid = (rstag_163to163_bb6_st_select55_staging_valid_NO_SHIFT_REG | rstag_163to163_bb6_st_select55_inputs_ready);
assign rstag_163to163_bb6_st_select55_valid_out = rstag_163to163_bb6_st_select55_combined_valid;
assign rstag_163to163_bb6_st_select55_stall_local = rstag_163to163_bb6_st_select55_stall_in;
assign local_bb6_st_select55_stall_in = (|rstag_163to163_bb6_st_select55_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_163to163_bb6_st_select55_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_163to163_bb6_st_select55_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_163to163_bb6_st_select55_stall_local)
		begin
			if (~(rstag_163to163_bb6_st_select55_staging_valid_NO_SHIFT_REG))
			begin
				rstag_163to163_bb6_st_select55_staging_valid_NO_SHIFT_REG <= rstag_163to163_bb6_st_select55_inputs_ready;
			end
		end
		else
		begin
			rstag_163to163_bb6_st_select55_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_163to163_bb6_st_select55_staging_valid_NO_SHIFT_REG))
		begin
			rstag_163to163_bb6_st_select55_staging_reg_NO_SHIFT_REG <= local_bb6_st_select55_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb6_c1_eni561_valid_out;
wire local_bb6_c1_eni561_stall_in;
wire local_bb6_c1_eni561_inputs_ready;
wire local_bb6_c1_eni561_stall_local;
wire [191:0] local_bb6_c1_eni561;

assign local_bb6_c1_eni561_inputs_ready = (rnode_157to158_widthCounter_232_0_valid_out_NO_SHIFT_REG & rnode_157to158_memcoalesce_param_extrValue_8_0_valid_out_0_NO_SHIFT_REG & rnode_157to158_c0_exe1_0_valid_out_0_NO_SHIFT_REG & rnode_157to158_c3_exe2_0_valid_out_0_NO_SHIFT_REG & rnode_157to158_var__u12_0_valid_out_0_NO_SHIFT_REG);
assign local_bb6_c1_eni561[159:0] = local_bb6_c1_eni462[159:0];
assign local_bb6_c1_eni561[160] = rnode_157to158_var__u12_0_NO_SHIFT_REG;
assign local_bb6_c1_eni561[191:161] = local_bb6_c1_eni462[191:161];
assign local_bb6_c1_eni561_valid_out = local_bb6_c1_eni561_inputs_ready;
assign local_bb6_c1_eni561_stall_local = local_bb6_c1_eni561_stall_in;
assign rnode_157to158_widthCounter_232_0_stall_in_NO_SHIFT_REG = (local_bb6_c1_eni561_stall_local | ~(local_bb6_c1_eni561_inputs_ready));
assign rnode_157to158_memcoalesce_param_extrValue_8_0_stall_in_0_NO_SHIFT_REG = (local_bb6_c1_eni561_stall_local | ~(local_bb6_c1_eni561_inputs_ready));
assign rnode_157to158_c0_exe1_0_stall_in_0_NO_SHIFT_REG = (local_bb6_c1_eni561_stall_local | ~(local_bb6_c1_eni561_inputs_ready));
assign rnode_157to158_c3_exe2_0_stall_in_0_NO_SHIFT_REG = (local_bb6_c1_eni561_stall_local | ~(local_bb6_c1_eni561_inputs_ready));
assign rnode_157to158_var__u12_0_stall_in_0_NO_SHIFT_REG = (local_bb6_c1_eni561_stall_local | ~(local_bb6_c1_eni561_inputs_ready));

// This section implements a staging register.
// 
wire rstag_158to158_bb6_c1_eni561_valid_out;
wire rstag_158to158_bb6_c1_eni561_stall_in;
wire rstag_158to158_bb6_c1_eni561_inputs_ready;
wire rstag_158to158_bb6_c1_eni561_stall_local;
 reg rstag_158to158_bb6_c1_eni561_staging_valid_NO_SHIFT_REG;
wire rstag_158to158_bb6_c1_eni561_combined_valid;
 reg [191:0] rstag_158to158_bb6_c1_eni561_staging_reg_NO_SHIFT_REG;
wire [191:0] rstag_158to158_bb6_c1_eni561;

assign rstag_158to158_bb6_c1_eni561_inputs_ready = local_bb6_c1_eni561_valid_out;
assign rstag_158to158_bb6_c1_eni561 = (rstag_158to158_bb6_c1_eni561_staging_valid_NO_SHIFT_REG ? rstag_158to158_bb6_c1_eni561_staging_reg_NO_SHIFT_REG : local_bb6_c1_eni561);
assign rstag_158to158_bb6_c1_eni561_combined_valid = (rstag_158to158_bb6_c1_eni561_staging_valid_NO_SHIFT_REG | rstag_158to158_bb6_c1_eni561_inputs_ready);
assign rstag_158to158_bb6_c1_eni561_valid_out = rstag_158to158_bb6_c1_eni561_combined_valid;
assign rstag_158to158_bb6_c1_eni561_stall_local = rstag_158to158_bb6_c1_eni561_stall_in;
assign local_bb6_c1_eni561_stall_in = (|rstag_158to158_bb6_c1_eni561_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_158to158_bb6_c1_eni561_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_158to158_bb6_c1_eni561_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_158to158_bb6_c1_eni561_stall_local)
		begin
			if (~(rstag_158to158_bb6_c1_eni561_staging_valid_NO_SHIFT_REG))
			begin
				rstag_158to158_bb6_c1_eni561_staging_valid_NO_SHIFT_REG <= rstag_158to158_bb6_c1_eni561_inputs_ready;
			end
		end
		else
		begin
			rstag_158to158_bb6_c1_eni561_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_158to158_bb6_c1_eni561_staging_valid_NO_SHIFT_REG))
		begin
			rstag_158to158_bb6_c1_eni561_staging_reg_NO_SHIFT_REG <= local_bb6_c1_eni561;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb6_c1_enter60_c1_eni561_valid_out_0;
wire local_bb6_c1_enter60_c1_eni561_stall_in_0;
wire local_bb6_c1_enter60_c1_eni561_valid_out_1;
wire local_bb6_c1_enter60_c1_eni561_stall_in_1;
wire local_bb6_c1_enter60_c1_eni561_valid_out_2;
wire local_bb6_c1_enter60_c1_eni561_stall_in_2;
wire local_bb6_c1_enter60_c1_eni561_valid_out_3;
wire local_bb6_c1_enter60_c1_eni561_stall_in_3;
wire local_bb6_c1_enter60_c1_eni561_valid_out_4;
wire local_bb6_c1_enter60_c1_eni561_stall_in_4;
wire local_bb6_c1_enter60_c1_eni561_valid_out_5;
wire local_bb6_c1_enter60_c1_eni561_stall_in_5;
wire local_bb6_c1_enter60_c1_eni561_inputs_ready;
wire local_bb6_c1_enter60_c1_eni561_stall_local;
wire local_bb6_c1_enter60_c1_eni561_input_accepted;
wire [191:0] local_bb6_c1_enter60_c1_eni561;
wire local_bb6_c1_exit55_c1_exi454_enable;
wire local_bb6_c1_exit55_c1_exi454_entry_stall;
wire local_bb6_c1_enter60_c1_eni561_valid_bit;
wire local_bb6_c1_exit55_c1_exi454_output_regs_ready;
wire local_bb6_c1_exit55_c1_exi454_valid_in;
wire local_bb6_c1_exit55_c1_exi454_phases;
wire local_bb6_c1_enter60_c1_eni561_inc_pipelined_thread;
wire local_bb6_c1_enter60_c1_eni561_dec_pipelined_thread;
wire local_bb6_c1_enter60_c1_eni561_fu_stall_out;

assign local_bb6_c1_enter60_c1_eni561_inputs_ready = rstag_158to158_bb6_c1_eni561_valid_out;
assign local_bb6_c1_enter60_c1_eni561 = rstag_158to158_bb6_c1_eni561;
assign local_bb6_c1_enter60_c1_eni561_input_accepted = (local_bb6_c1_enter60_c1_eni561_inputs_ready && !(local_bb6_c1_exit55_c1_exi454_entry_stall));
assign local_bb6_c1_enter60_c1_eni561_valid_bit = local_bb6_c1_enter60_c1_eni561_input_accepted;
assign local_bb6_c1_enter60_c1_eni561_inc_pipelined_thread = 1'b1;
assign local_bb6_c1_enter60_c1_eni561_dec_pipelined_thread = ~(1'b0);
assign local_bb6_c1_enter60_c1_eni561_fu_stall_out = (~(local_bb6_c1_enter60_c1_eni561_inputs_ready) | local_bb6_c1_exit55_c1_exi454_entry_stall);
assign local_bb6_c1_enter60_c1_eni561_stall_local = (local_bb6_c1_enter60_c1_eni561_stall_in_0 | local_bb6_c1_enter60_c1_eni561_stall_in_1 | local_bb6_c1_enter60_c1_eni561_stall_in_2 | local_bb6_c1_enter60_c1_eni561_stall_in_3 | local_bb6_c1_enter60_c1_eni561_stall_in_4 | local_bb6_c1_enter60_c1_eni561_stall_in_5);
assign local_bb6_c1_enter60_c1_eni561_valid_out_0 = local_bb6_c1_enter60_c1_eni561_inputs_ready;
assign local_bb6_c1_enter60_c1_eni561_valid_out_1 = local_bb6_c1_enter60_c1_eni561_inputs_ready;
assign local_bb6_c1_enter60_c1_eni561_valid_out_2 = local_bb6_c1_enter60_c1_eni561_inputs_ready;
assign local_bb6_c1_enter60_c1_eni561_valid_out_3 = local_bb6_c1_enter60_c1_eni561_inputs_ready;
assign local_bb6_c1_enter60_c1_eni561_valid_out_4 = local_bb6_c1_enter60_c1_eni561_inputs_ready;
assign local_bb6_c1_enter60_c1_eni561_valid_out_5 = local_bb6_c1_enter60_c1_eni561_inputs_ready;
assign rstag_158to158_bb6_c1_eni561_stall_in = (|local_bb6_c1_enter60_c1_eni561_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb6_c1_ene170_stall_local;
wire [31:0] local_bb6_c1_ene170;

assign local_bb6_c1_ene170[31:0] = local_bb6_c1_enter60_c1_eni561[63:32];

// This section implements an unregistered operation.
// 
wire local_bb6_c1_ene269_valid_out;
wire local_bb6_c1_ene269_stall_in;
wire local_bb6_c1_ene269_inputs_ready;
wire local_bb6_c1_ene269_stall_local;
wire [31:0] local_bb6_c1_ene269;

assign local_bb6_c1_ene269_inputs_ready = local_bb6_c1_enter60_c1_eni561_valid_out_1;
assign local_bb6_c1_ene269[31:0] = local_bb6_c1_enter60_c1_eni561[95:64];
assign local_bb6_c1_ene269_valid_out = 1'b1;
assign local_bb6_c1_enter60_c1_eni561_stall_in_1 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb6_c1_ene368_valid_out;
wire local_bb6_c1_ene368_stall_in;
wire local_bb6_c1_ene368_inputs_ready;
wire local_bb6_c1_ene368_stall_local;
wire [31:0] local_bb6_c1_ene368;

assign local_bb6_c1_ene368_inputs_ready = local_bb6_c1_enter60_c1_eni561_valid_out_2;
assign local_bb6_c1_ene368[31:0] = local_bb6_c1_enter60_c1_eni561[127:96];
assign local_bb6_c1_ene368_valid_out = 1'b1;
assign local_bb6_c1_enter60_c1_eni561_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb6_c1_ene467_valid_out;
wire local_bb6_c1_ene467_stall_in;
wire local_bb6_c1_ene467_inputs_ready;
wire local_bb6_c1_ene467_stall_local;
wire [31:0] local_bb6_c1_ene467;

assign local_bb6_c1_ene467_inputs_ready = local_bb6_c1_enter60_c1_eni561_valid_out_3;
assign local_bb6_c1_ene467[31:0] = local_bb6_c1_enter60_c1_eni561[159:128];
assign local_bb6_c1_ene467_valid_out = 1'b1;
assign local_bb6_c1_enter60_c1_eni561_stall_in_3 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb6_c1_ene566_valid_out;
wire local_bb6_c1_ene566_stall_in;
wire local_bb6_c1_ene566_inputs_ready;
wire local_bb6_c1_ene566_stall_local;
wire local_bb6_c1_ene566;

assign local_bb6_c1_ene566_inputs_ready = local_bb6_c1_enter60_c1_eni561_valid_out_4;
assign local_bb6_c1_ene566 = local_bb6_c1_enter60_c1_eni561[160];
assign local_bb6_c1_ene566_valid_out = 1'b1;
assign local_bb6_c1_enter60_c1_eni561_stall_in_4 = 1'b0;

// This section implements an unregistered operation.
// 
wire SFC_8_VALID_158_158_0_valid_out;
wire SFC_8_VALID_158_158_0_stall_in;
wire SFC_8_VALID_158_158_0_inputs_ready;
wire SFC_8_VALID_158_158_0_stall_local;
wire SFC_8_VALID_158_158_0;

assign SFC_8_VALID_158_158_0_inputs_ready = local_bb6_c1_enter60_c1_eni561_valid_out_5;
assign SFC_8_VALID_158_158_0 = local_bb6_c1_enter60_c1_eni561_valid_bit;
assign SFC_8_VALID_158_158_0_valid_out = 1'b1;
assign local_bb6_c1_enter60_c1_eni561_stall_in_5 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb6_add61_valid_out_0;
wire local_bb6_add61_stall_in_0;
wire local_bb6_add61_valid_out_1;
wire local_bb6_add61_stall_in_1;
wire local_bb6_add61_inputs_ready;
wire local_bb6_add61_stall_local;
wire [31:0] local_bb6_add61;

assign local_bb6_add61_inputs_ready = local_bb6_c1_enter60_c1_eni561_valid_out_0;
assign local_bb6_add61 = (local_bb6_c1_ene170 + input_global_size_2);
assign local_bb6_add61_valid_out_0 = 1'b1;
assign local_bb6_add61_valid_out_1 = 1'b1;
assign local_bb6_c1_enter60_c1_eni561_stall_in_0 = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_158to159_bb6_c1_ene269_0_valid_out_NO_SHIFT_REG;
 logic rnode_158to159_bb6_c1_ene269_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_158to159_bb6_c1_ene269_0_NO_SHIFT_REG;
 logic rnode_158to159_bb6_c1_ene269_0_reg_159_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_158to159_bb6_c1_ene269_0_reg_159_NO_SHIFT_REG;
 logic rnode_158to159_bb6_c1_ene269_0_valid_out_reg_159_NO_SHIFT_REG;
 logic rnode_158to159_bb6_c1_ene269_0_stall_in_reg_159_NO_SHIFT_REG;
 logic rnode_158to159_bb6_c1_ene269_0_stall_out_reg_159_NO_SHIFT_REG;

acl_data_fifo rnode_158to159_bb6_c1_ene269_0_reg_159_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_158to159_bb6_c1_ene269_0_reg_159_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_158to159_bb6_c1_ene269_0_stall_in_reg_159_NO_SHIFT_REG),
	.valid_out(rnode_158to159_bb6_c1_ene269_0_valid_out_reg_159_NO_SHIFT_REG),
	.stall_out(rnode_158to159_bb6_c1_ene269_0_stall_out_reg_159_NO_SHIFT_REG),
	.data_in(local_bb6_c1_ene269),
	.data_out(rnode_158to159_bb6_c1_ene269_0_reg_159_NO_SHIFT_REG)
);

defparam rnode_158to159_bb6_c1_ene269_0_reg_159_fifo.DEPTH = 1;
defparam rnode_158to159_bb6_c1_ene269_0_reg_159_fifo.DATA_WIDTH = 32;
defparam rnode_158to159_bb6_c1_ene269_0_reg_159_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_158to159_bb6_c1_ene269_0_reg_159_fifo.IMPL = "shift_reg";

assign rnode_158to159_bb6_c1_ene269_0_reg_159_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_c1_ene269_stall_in = 1'b0;
assign rnode_158to159_bb6_c1_ene269_0_NO_SHIFT_REG = rnode_158to159_bb6_c1_ene269_0_reg_159_NO_SHIFT_REG;
assign rnode_158to159_bb6_c1_ene269_0_stall_in_reg_159_NO_SHIFT_REG = ~(local_bb6_c1_exit55_c1_exi454_enable);
assign rnode_158to159_bb6_c1_ene269_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_158to159_bb6_c1_ene467_0_valid_out_NO_SHIFT_REG;
 logic rnode_158to159_bb6_c1_ene467_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_158to159_bb6_c1_ene467_0_NO_SHIFT_REG;
 logic rnode_158to159_bb6_c1_ene467_0_reg_159_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_158to159_bb6_c1_ene467_0_reg_159_NO_SHIFT_REG;
 logic rnode_158to159_bb6_c1_ene467_0_valid_out_reg_159_NO_SHIFT_REG;
 logic rnode_158to159_bb6_c1_ene467_0_stall_in_reg_159_NO_SHIFT_REG;
 logic rnode_158to159_bb6_c1_ene467_0_stall_out_reg_159_NO_SHIFT_REG;

acl_data_fifo rnode_158to159_bb6_c1_ene467_0_reg_159_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_158to159_bb6_c1_ene467_0_reg_159_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_158to159_bb6_c1_ene467_0_stall_in_reg_159_NO_SHIFT_REG),
	.valid_out(rnode_158to159_bb6_c1_ene467_0_valid_out_reg_159_NO_SHIFT_REG),
	.stall_out(rnode_158to159_bb6_c1_ene467_0_stall_out_reg_159_NO_SHIFT_REG),
	.data_in(local_bb6_c1_ene467),
	.data_out(rnode_158to159_bb6_c1_ene467_0_reg_159_NO_SHIFT_REG)
);

defparam rnode_158to159_bb6_c1_ene467_0_reg_159_fifo.DEPTH = 1;
defparam rnode_158to159_bb6_c1_ene467_0_reg_159_fifo.DATA_WIDTH = 32;
defparam rnode_158to159_bb6_c1_ene467_0_reg_159_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_158to159_bb6_c1_ene467_0_reg_159_fifo.IMPL = "shift_reg";

assign rnode_158to159_bb6_c1_ene467_0_reg_159_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_c1_ene467_stall_in = 1'b0;
assign rnode_158to159_bb6_c1_ene467_0_NO_SHIFT_REG = rnode_158to159_bb6_c1_ene467_0_reg_159_NO_SHIFT_REG;
assign rnode_158to159_bb6_c1_ene467_0_stall_in_reg_159_NO_SHIFT_REG = ~(local_bb6_c1_exit55_c1_exi454_enable);
assign rnode_158to159_bb6_c1_ene467_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_158to160_bb6_c1_ene566_0_valid_out_NO_SHIFT_REG;
 logic rnode_158to160_bb6_c1_ene566_0_stall_in_NO_SHIFT_REG;
 logic rnode_158to160_bb6_c1_ene566_0_NO_SHIFT_REG;
 logic rnode_158to160_bb6_c1_ene566_0_reg_160_inputs_ready_NO_SHIFT_REG;
 logic rnode_158to160_bb6_c1_ene566_0_reg_160_NO_SHIFT_REG;
 logic rnode_158to160_bb6_c1_ene566_0_valid_out_reg_160_NO_SHIFT_REG;
 logic rnode_158to160_bb6_c1_ene566_0_stall_in_reg_160_NO_SHIFT_REG;
 logic rnode_158to160_bb6_c1_ene566_0_stall_out_reg_160_NO_SHIFT_REG;

acl_data_fifo rnode_158to160_bb6_c1_ene566_0_reg_160_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_158to160_bb6_c1_ene566_0_reg_160_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_158to160_bb6_c1_ene566_0_stall_in_reg_160_NO_SHIFT_REG),
	.valid_out(rnode_158to160_bb6_c1_ene566_0_valid_out_reg_160_NO_SHIFT_REG),
	.stall_out(rnode_158to160_bb6_c1_ene566_0_stall_out_reg_160_NO_SHIFT_REG),
	.data_in(local_bb6_c1_ene566),
	.data_out(rnode_158to160_bb6_c1_ene566_0_reg_160_NO_SHIFT_REG)
);

defparam rnode_158to160_bb6_c1_ene566_0_reg_160_fifo.DEPTH = 2;
defparam rnode_158to160_bb6_c1_ene566_0_reg_160_fifo.DATA_WIDTH = 1;
defparam rnode_158to160_bb6_c1_ene566_0_reg_160_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_158to160_bb6_c1_ene566_0_reg_160_fifo.IMPL = "shift_reg";

assign rnode_158to160_bb6_c1_ene566_0_reg_160_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_c1_ene566_stall_in = 1'b0;
assign rnode_158to160_bb6_c1_ene566_0_NO_SHIFT_REG = rnode_158to160_bb6_c1_ene566_0_reg_160_NO_SHIFT_REG;
assign rnode_158to160_bb6_c1_ene566_0_stall_in_reg_160_NO_SHIFT_REG = ~(local_bb6_c1_exit55_c1_exi454_enable);
assign rnode_158to160_bb6_c1_ene566_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_8_VALID_158_159_0_inputs_ready;
 reg SFC_8_VALID_158_159_0_valid_out_NO_SHIFT_REG;
wire SFC_8_VALID_158_159_0_stall_in;
wire SFC_8_VALID_158_159_0_output_regs_ready;
 reg SFC_8_VALID_158_159_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_8_VALID_158_159_0_causedstall;

assign SFC_8_VALID_158_159_0_inputs_ready = 1'b1;
assign SFC_8_VALID_158_159_0_output_regs_ready = local_bb6_c1_exit55_c1_exi454_enable;
assign SFC_8_VALID_158_158_0_stall_in = 1'b0;
assign SFC_8_VALID_158_159_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb6_c1_exit55_c1_exi454_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_8_VALID_158_159_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_8_VALID_158_159_0_output_regs_ready)
		begin
			SFC_8_VALID_158_159_0_NO_SHIFT_REG <= SFC_8_VALID_158_158_0;
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_var__inputs_ready;
 reg local_bb6_var__valid_out_NO_SHIFT_REG;
wire local_bb6_var__stall_in;
wire local_bb6_var__output_regs_ready;
wire [31:0] local_bb6_var_;
 reg local_bb6_var__valid_pipe_0_NO_SHIFT_REG;
 reg local_bb6_var__valid_pipe_1_NO_SHIFT_REG;
wire local_bb6_var__causedstall;

acl_int_mult int_module_local_bb6_var_ (
	.clock(clock),
	.dataa(local_bb6_c1_ene368),
	.datab(local_bb6_add61),
	.enable(local_bb6_var__output_regs_ready),
	.result(local_bb6_var_)
);

defparam int_module_local_bb6_var_.INPUT1_WIDTH = 32;
defparam int_module_local_bb6_var_.INPUT2_WIDTH = 32;
defparam int_module_local_bb6_var_.OUTPUT_WIDTH = 32;
defparam int_module_local_bb6_var_.LATENCY = 3;
defparam int_module_local_bb6_var_.SIGNED = 0;

assign local_bb6_var__inputs_ready = 1'b1;
assign local_bb6_var__output_regs_ready = local_bb6_c1_exit55_c1_exi454_enable;
assign local_bb6_c1_ene368_stall_in = 1'b0;
assign local_bb6_add61_stall_in_0 = 1'b0;
assign local_bb6_var__causedstall = (1'b1 && (1'b0 && !(~(local_bb6_c1_exit55_c1_exi454_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_var__valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb6_var__valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_var__output_regs_ready)
		begin
			local_bb6_var__valid_pipe_0_NO_SHIFT_REG <= 1'b1;
			local_bb6_var__valid_pipe_1_NO_SHIFT_REG <= local_bb6_var__valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_var__valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_var__output_regs_ready)
		begin
			local_bb6_var__valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb6_var__stall_in))
			begin
				local_bb6_var__valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_158to159_bb6_add61_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_158to159_bb6_add61_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_158to159_bb6_add61_0_NO_SHIFT_REG;
 logic rnode_158to159_bb6_add61_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_158to159_bb6_add61_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_158to159_bb6_add61_1_NO_SHIFT_REG;
 logic rnode_158to159_bb6_add61_0_reg_159_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_158to159_bb6_add61_0_reg_159_NO_SHIFT_REG;
 logic rnode_158to159_bb6_add61_0_valid_out_0_reg_159_NO_SHIFT_REG;
 logic rnode_158to159_bb6_add61_0_stall_in_0_reg_159_NO_SHIFT_REG;
 logic rnode_158to159_bb6_add61_0_stall_out_reg_159_NO_SHIFT_REG;

acl_data_fifo rnode_158to159_bb6_add61_0_reg_159_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_158to159_bb6_add61_0_reg_159_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_158to159_bb6_add61_0_stall_in_0_reg_159_NO_SHIFT_REG),
	.valid_out(rnode_158to159_bb6_add61_0_valid_out_0_reg_159_NO_SHIFT_REG),
	.stall_out(rnode_158to159_bb6_add61_0_stall_out_reg_159_NO_SHIFT_REG),
	.data_in(local_bb6_add61),
	.data_out(rnode_158to159_bb6_add61_0_reg_159_NO_SHIFT_REG)
);

defparam rnode_158to159_bb6_add61_0_reg_159_fifo.DEPTH = 1;
defparam rnode_158to159_bb6_add61_0_reg_159_fifo.DATA_WIDTH = 32;
defparam rnode_158to159_bb6_add61_0_reg_159_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_158to159_bb6_add61_0_reg_159_fifo.IMPL = "shift_reg";

assign rnode_158to159_bb6_add61_0_reg_159_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_add61_stall_in_1 = 1'b0;
assign rnode_158to159_bb6_add61_0_stall_in_0_reg_159_NO_SHIFT_REG = ~(local_bb6_c1_exit55_c1_exi454_enable);
assign rnode_158to159_bb6_add61_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_158to159_bb6_add61_0_NO_SHIFT_REG = rnode_158to159_bb6_add61_0_reg_159_NO_SHIFT_REG;
assign rnode_158to159_bb6_add61_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_158to159_bb6_add61_1_NO_SHIFT_REG = rnode_158to159_bb6_add61_0_reg_159_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_159to160_bb6_c1_ene467_0_valid_out_NO_SHIFT_REG;
 logic rnode_159to160_bb6_c1_ene467_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_159to160_bb6_c1_ene467_0_NO_SHIFT_REG;
 logic rnode_159to160_bb6_c1_ene467_0_reg_160_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_159to160_bb6_c1_ene467_0_reg_160_NO_SHIFT_REG;
 logic rnode_159to160_bb6_c1_ene467_0_valid_out_reg_160_NO_SHIFT_REG;
 logic rnode_159to160_bb6_c1_ene467_0_stall_in_reg_160_NO_SHIFT_REG;
 logic rnode_159to160_bb6_c1_ene467_0_stall_out_reg_160_NO_SHIFT_REG;

acl_data_fifo rnode_159to160_bb6_c1_ene467_0_reg_160_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_159to160_bb6_c1_ene467_0_reg_160_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_159to160_bb6_c1_ene467_0_stall_in_reg_160_NO_SHIFT_REG),
	.valid_out(rnode_159to160_bb6_c1_ene467_0_valid_out_reg_160_NO_SHIFT_REG),
	.stall_out(rnode_159to160_bb6_c1_ene467_0_stall_out_reg_160_NO_SHIFT_REG),
	.data_in(rnode_158to159_bb6_c1_ene467_0_NO_SHIFT_REG),
	.data_out(rnode_159to160_bb6_c1_ene467_0_reg_160_NO_SHIFT_REG)
);

defparam rnode_159to160_bb6_c1_ene467_0_reg_160_fifo.DEPTH = 1;
defparam rnode_159to160_bb6_c1_ene467_0_reg_160_fifo.DATA_WIDTH = 32;
defparam rnode_159to160_bb6_c1_ene467_0_reg_160_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_159to160_bb6_c1_ene467_0_reg_160_fifo.IMPL = "shift_reg";

assign rnode_159to160_bb6_c1_ene467_0_reg_160_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_158to159_bb6_c1_ene467_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_159to160_bb6_c1_ene467_0_NO_SHIFT_REG = rnode_159to160_bb6_c1_ene467_0_reg_160_NO_SHIFT_REG;
assign rnode_159to160_bb6_c1_ene467_0_stall_in_reg_160_NO_SHIFT_REG = ~(local_bb6_c1_exit55_c1_exi454_enable);
assign rnode_159to160_bb6_c1_ene467_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_8_VALID_159_160_0_inputs_ready;
 reg SFC_8_VALID_159_160_0_valid_out_NO_SHIFT_REG;
wire SFC_8_VALID_159_160_0_stall_in;
wire SFC_8_VALID_159_160_0_output_regs_ready;
 reg SFC_8_VALID_159_160_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_8_VALID_159_160_0_causedstall;

assign SFC_8_VALID_159_160_0_inputs_ready = 1'b1;
assign SFC_8_VALID_159_160_0_output_regs_ready = local_bb6_c1_exit55_c1_exi454_enable;
assign SFC_8_VALID_158_159_0_stall_in = 1'b0;
assign SFC_8_VALID_159_160_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb6_c1_exit55_c1_exi454_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_8_VALID_159_160_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_8_VALID_159_160_0_output_regs_ready)
		begin
			SFC_8_VALID_159_160_0_NO_SHIFT_REG <= SFC_8_VALID_158_159_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb6_cmp11_valid_out;
wire local_bb6_cmp11_stall_in;
wire local_bb6_cmp11_inputs_ready;
wire local_bb6_cmp11_stall_local;
wire local_bb6_cmp11;

assign local_bb6_cmp11_inputs_ready = (rnode_158to159_bb6_c1_ene269_0_valid_out_NO_SHIFT_REG & rnode_158to159_bb6_add61_0_valid_out_0_NO_SHIFT_REG);
assign local_bb6_cmp11 = ($signed(rnode_158to159_bb6_add61_0_NO_SHIFT_REG) < $signed(rnode_158to159_bb6_c1_ene269_0_NO_SHIFT_REG));
assign local_bb6_cmp11_valid_out = 1'b1;
assign rnode_158to159_bb6_c1_ene269_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_158to159_bb6_add61_0_stall_in_0_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_159to161_bb6_add61_0_valid_out_NO_SHIFT_REG;
 logic rnode_159to161_bb6_add61_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_159to161_bb6_add61_0_NO_SHIFT_REG;
 logic rnode_159to161_bb6_add61_0_reg_161_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_159to161_bb6_add61_0_reg_161_NO_SHIFT_REG;
 logic rnode_159to161_bb6_add61_0_valid_out_reg_161_NO_SHIFT_REG;
 logic rnode_159to161_bb6_add61_0_stall_in_reg_161_NO_SHIFT_REG;
 logic rnode_159to161_bb6_add61_0_stall_out_reg_161_NO_SHIFT_REG;

acl_data_fifo rnode_159to161_bb6_add61_0_reg_161_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_159to161_bb6_add61_0_reg_161_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_159to161_bb6_add61_0_stall_in_reg_161_NO_SHIFT_REG),
	.valid_out(rnode_159to161_bb6_add61_0_valid_out_reg_161_NO_SHIFT_REG),
	.stall_out(rnode_159to161_bb6_add61_0_stall_out_reg_161_NO_SHIFT_REG),
	.data_in(rnode_158to159_bb6_add61_1_NO_SHIFT_REG),
	.data_out(rnode_159to161_bb6_add61_0_reg_161_NO_SHIFT_REG)
);

defparam rnode_159to161_bb6_add61_0_reg_161_fifo.DEPTH = 2;
defparam rnode_159to161_bb6_add61_0_reg_161_fifo.DATA_WIDTH = 32;
defparam rnode_159to161_bb6_add61_0_reg_161_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_159to161_bb6_add61_0_reg_161_fifo.IMPL = "shift_reg";

assign rnode_159to161_bb6_add61_0_reg_161_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_158to159_bb6_add61_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_159to161_bb6_add61_0_NO_SHIFT_REG = rnode_159to161_bb6_add61_0_reg_161_NO_SHIFT_REG;
assign rnode_159to161_bb6_add61_0_stall_in_reg_161_NO_SHIFT_REG = ~(local_bb6_c1_exit55_c1_exi454_enable);
assign rnode_159to161_bb6_add61_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_160to161_bb6_c1_ene467_0_valid_out_NO_SHIFT_REG;
 logic rnode_160to161_bb6_c1_ene467_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_160to161_bb6_c1_ene467_0_NO_SHIFT_REG;
 logic rnode_160to161_bb6_c1_ene467_0_reg_161_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_160to161_bb6_c1_ene467_0_reg_161_NO_SHIFT_REG;
 logic rnode_160to161_bb6_c1_ene467_0_valid_out_reg_161_NO_SHIFT_REG;
 logic rnode_160to161_bb6_c1_ene467_0_stall_in_reg_161_NO_SHIFT_REG;
 logic rnode_160to161_bb6_c1_ene467_0_stall_out_reg_161_NO_SHIFT_REG;

acl_data_fifo rnode_160to161_bb6_c1_ene467_0_reg_161_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_160to161_bb6_c1_ene467_0_reg_161_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_160to161_bb6_c1_ene467_0_stall_in_reg_161_NO_SHIFT_REG),
	.valid_out(rnode_160to161_bb6_c1_ene467_0_valid_out_reg_161_NO_SHIFT_REG),
	.stall_out(rnode_160to161_bb6_c1_ene467_0_stall_out_reg_161_NO_SHIFT_REG),
	.data_in(rnode_159to160_bb6_c1_ene467_0_NO_SHIFT_REG),
	.data_out(rnode_160to161_bb6_c1_ene467_0_reg_161_NO_SHIFT_REG)
);

defparam rnode_160to161_bb6_c1_ene467_0_reg_161_fifo.DEPTH = 1;
defparam rnode_160to161_bb6_c1_ene467_0_reg_161_fifo.DATA_WIDTH = 32;
defparam rnode_160to161_bb6_c1_ene467_0_reg_161_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_160to161_bb6_c1_ene467_0_reg_161_fifo.IMPL = "shift_reg";

assign rnode_160to161_bb6_c1_ene467_0_reg_161_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_159to160_bb6_c1_ene467_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_160to161_bb6_c1_ene467_0_NO_SHIFT_REG = rnode_160to161_bb6_c1_ene467_0_reg_161_NO_SHIFT_REG;
assign rnode_160to161_bb6_c1_ene467_0_stall_in_reg_161_NO_SHIFT_REG = ~(local_bb6_c1_exit55_c1_exi454_enable);
assign rnode_160to161_bb6_c1_ene467_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_8_VALID_160_161_0_inputs_ready;
 reg SFC_8_VALID_160_161_0_valid_out_NO_SHIFT_REG;
wire SFC_8_VALID_160_161_0_stall_in;
wire SFC_8_VALID_160_161_0_output_regs_ready;
 reg SFC_8_VALID_160_161_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_8_VALID_160_161_0_causedstall;

assign SFC_8_VALID_160_161_0_inputs_ready = 1'b1;
assign SFC_8_VALID_160_161_0_output_regs_ready = local_bb6_c1_exit55_c1_exi454_enable;
assign SFC_8_VALID_159_160_0_stall_in = 1'b0;
assign SFC_8_VALID_160_161_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb6_c1_exit55_c1_exi454_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_8_VALID_160_161_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_8_VALID_160_161_0_output_regs_ready)
		begin
			SFC_8_VALID_160_161_0_NO_SHIFT_REG <= SFC_8_VALID_159_160_0_NO_SHIFT_REG;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_159to160_bb6_cmp11_0_valid_out_NO_SHIFT_REG;
 logic rnode_159to160_bb6_cmp11_0_stall_in_NO_SHIFT_REG;
 logic rnode_159to160_bb6_cmp11_0_NO_SHIFT_REG;
 logic rnode_159to160_bb6_cmp11_0_reg_160_inputs_ready_NO_SHIFT_REG;
 logic rnode_159to160_bb6_cmp11_0_reg_160_NO_SHIFT_REG;
 logic rnode_159to160_bb6_cmp11_0_valid_out_reg_160_NO_SHIFT_REG;
 logic rnode_159to160_bb6_cmp11_0_stall_in_reg_160_NO_SHIFT_REG;
 logic rnode_159to160_bb6_cmp11_0_stall_out_reg_160_NO_SHIFT_REG;

acl_data_fifo rnode_159to160_bb6_cmp11_0_reg_160_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_159to160_bb6_cmp11_0_reg_160_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_159to160_bb6_cmp11_0_stall_in_reg_160_NO_SHIFT_REG),
	.valid_out(rnode_159to160_bb6_cmp11_0_valid_out_reg_160_NO_SHIFT_REG),
	.stall_out(rnode_159to160_bb6_cmp11_0_stall_out_reg_160_NO_SHIFT_REG),
	.data_in(local_bb6_cmp11),
	.data_out(rnode_159to160_bb6_cmp11_0_reg_160_NO_SHIFT_REG)
);

defparam rnode_159to160_bb6_cmp11_0_reg_160_fifo.DEPTH = 1;
defparam rnode_159to160_bb6_cmp11_0_reg_160_fifo.DATA_WIDTH = 1;
defparam rnode_159to160_bb6_cmp11_0_reg_160_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_159to160_bb6_cmp11_0_reg_160_fifo.IMPL = "shift_reg";

assign rnode_159to160_bb6_cmp11_0_reg_160_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_cmp11_stall_in = 1'b0;
assign rnode_159to160_bb6_cmp11_0_NO_SHIFT_REG = rnode_159to160_bb6_cmp11_0_reg_160_NO_SHIFT_REG;
assign rnode_159to160_bb6_cmp11_0_stall_in_reg_160_NO_SHIFT_REG = ~(local_bb6_c1_exit55_c1_exi454_enable);
assign rnode_159to160_bb6_cmp11_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb6_c1_exi151_stall_local;
wire [159:0] local_bb6_c1_exi151;

assign local_bb6_c1_exi151[31:0] = 32'bx;
assign local_bb6_c1_exi151[63:32] = rnode_160to161_bb6_c1_ene467_0_NO_SHIFT_REG;
assign local_bb6_c1_exi151[159:64] = 96'bx;

// This section implements an unregistered operation.
// 
wire local_bb6_var__u14_valid_out;
wire local_bb6_var__u14_stall_in;
wire local_bb6_var__u14_inputs_ready;
wire local_bb6_var__u14_stall_local;
wire local_bb6_var__u14;

assign local_bb6_var__u14_inputs_ready = (rnode_158to160_bb6_c1_ene566_0_valid_out_NO_SHIFT_REG & rnode_159to160_bb6_cmp11_0_valid_out_NO_SHIFT_REG);
assign local_bb6_var__u14 = (rnode_158to160_bb6_c1_ene566_0_NO_SHIFT_REG & rnode_159to160_bb6_cmp11_0_NO_SHIFT_REG);
assign local_bb6_var__u14_valid_out = 1'b1;
assign rnode_158to160_bb6_c1_ene566_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_159to160_bb6_cmp11_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb6_c1_exi252_stall_local;
wire [159:0] local_bb6_c1_exi252;

assign local_bb6_c1_exi252[63:0] = local_bb6_c1_exi151[63:0];
assign local_bb6_c1_exi252[95:64] = local_bb6_var_;
assign local_bb6_c1_exi252[159:96] = local_bb6_c1_exi151[159:96];

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_160to161_bb6_var__u14_0_valid_out_NO_SHIFT_REG;
 logic rnode_160to161_bb6_var__u14_0_stall_in_NO_SHIFT_REG;
 logic rnode_160to161_bb6_var__u14_0_NO_SHIFT_REG;
 logic rnode_160to161_bb6_var__u14_0_reg_161_inputs_ready_NO_SHIFT_REG;
 logic rnode_160to161_bb6_var__u14_0_reg_161_NO_SHIFT_REG;
 logic rnode_160to161_bb6_var__u14_0_valid_out_reg_161_NO_SHIFT_REG;
 logic rnode_160to161_bb6_var__u14_0_stall_in_reg_161_NO_SHIFT_REG;
 logic rnode_160to161_bb6_var__u14_0_stall_out_reg_161_NO_SHIFT_REG;

acl_data_fifo rnode_160to161_bb6_var__u14_0_reg_161_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_160to161_bb6_var__u14_0_reg_161_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_160to161_bb6_var__u14_0_stall_in_reg_161_NO_SHIFT_REG),
	.valid_out(rnode_160to161_bb6_var__u14_0_valid_out_reg_161_NO_SHIFT_REG),
	.stall_out(rnode_160to161_bb6_var__u14_0_stall_out_reg_161_NO_SHIFT_REG),
	.data_in(local_bb6_var__u14),
	.data_out(rnode_160to161_bb6_var__u14_0_reg_161_NO_SHIFT_REG)
);

defparam rnode_160to161_bb6_var__u14_0_reg_161_fifo.DEPTH = 1;
defparam rnode_160to161_bb6_var__u14_0_reg_161_fifo.DATA_WIDTH = 1;
defparam rnode_160to161_bb6_var__u14_0_reg_161_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_160to161_bb6_var__u14_0_reg_161_fifo.IMPL = "shift_reg";

assign rnode_160to161_bb6_var__u14_0_reg_161_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_var__u14_stall_in = 1'b0;
assign rnode_160to161_bb6_var__u14_0_NO_SHIFT_REG = rnode_160to161_bb6_var__u14_0_reg_161_NO_SHIFT_REG;
assign rnode_160to161_bb6_var__u14_0_stall_in_reg_161_NO_SHIFT_REG = ~(local_bb6_c1_exit55_c1_exi454_enable);
assign rnode_160to161_bb6_var__u14_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb6_c1_exi353_stall_local;
wire [159:0] local_bb6_c1_exi353;

assign local_bb6_c1_exi353[95:0] = local_bb6_c1_exi252[95:0];
assign local_bb6_c1_exi353[127:96] = rnode_159to161_bb6_add61_0_NO_SHIFT_REG;
assign local_bb6_c1_exi353[159:128] = local_bb6_c1_exi252[159:128];

// This section implements an unregistered operation.
// 
wire local_bb6_c1_exi454_valid_out;
wire local_bb6_c1_exi454_stall_in;
wire local_bb6_c1_exi454_inputs_ready;
wire local_bb6_c1_exi454_stall_local;
wire [159:0] local_bb6_c1_exi454;

assign local_bb6_c1_exi454_inputs_ready = (local_bb6_var__valid_out_NO_SHIFT_REG & rnode_159to161_bb6_add61_0_valid_out_NO_SHIFT_REG & rnode_160to161_bb6_var__u14_0_valid_out_NO_SHIFT_REG & rnode_160to161_bb6_c1_ene467_0_valid_out_NO_SHIFT_REG);
assign local_bb6_c1_exi454[127:0] = local_bb6_c1_exi353[127:0];
assign local_bb6_c1_exi454[128] = rnode_160to161_bb6_var__u14_0_NO_SHIFT_REG;
assign local_bb6_c1_exi454[159:129] = local_bb6_c1_exi353[159:129];
assign local_bb6_c1_exi454_valid_out = 1'b1;
assign local_bb6_var__stall_in = 1'b0;
assign rnode_159to161_bb6_add61_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_160to161_bb6_var__u14_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_160to161_bb6_c1_ene467_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb6_c1_exit55_c1_exi454_valid_out;
wire local_bb6_c1_exit55_c1_exi454_stall_in;
wire local_bb6_c1_exit55_c1_exi454_inputs_ready;
wire local_bb6_c1_exit55_c1_exi454_stall_local;
wire [159:0] local_bb6_c1_exit55_c1_exi454;
wire local_bb6_c1_exit55_c1_exi454_valid;
wire local_bb6_c1_exit55_c1_exi454_fu_stall_out;

acl_enable_sink local_bb6_c1_exit55_c1_exi454_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb6_c1_exi454),
	.data_out(local_bb6_c1_exit55_c1_exi454),
	.input_accepted(local_bb6_c1_enter60_c1_eni561_input_accepted),
	.valid_out(local_bb6_c1_exit55_c1_exi454_valid),
	.stall_in(local_bb6_c1_exit55_c1_exi454_stall_local),
	.enable(local_bb6_c1_exit55_c1_exi454_enable),
	.valid_in(local_bb6_c1_exit55_c1_exi454_valid_in),
	.stall_entry(local_bb6_c1_exit55_c1_exi454_entry_stall),
	.inc_pipelined_thread(local_bb6_c1_enter60_c1_eni561_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb6_c1_enter60_c1_eni561_dec_pipelined_thread)
);

defparam local_bb6_c1_exit55_c1_exi454_instance.DATA_WIDTH = 160;
defparam local_bb6_c1_exit55_c1_exi454_instance.PIPELINE_DEPTH = 3;
defparam local_bb6_c1_exit55_c1_exi454_instance.SCHEDULEII = 1;
defparam local_bb6_c1_exit55_c1_exi454_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb6_c1_exit55_c1_exi454_inputs_ready = (local_bb6_c1_exi454_valid_out & SFC_8_VALID_160_161_0_valid_out_NO_SHIFT_REG);
assign local_bb6_c1_exit55_c1_exi454_valid_in = SFC_8_VALID_160_161_0_NO_SHIFT_REG;
assign local_bb6_c1_exit55_c1_exi454_fu_stall_out = ~(local_bb6_c1_exit55_c1_exi454_enable);
assign local_bb6_c1_exit55_c1_exi454_valid_out = local_bb6_c1_exit55_c1_exi454_valid;
assign local_bb6_c1_exit55_c1_exi454_stall_local = local_bb6_c1_exit55_c1_exi454_stall_in;
assign local_bb6_c1_exi454_stall_in = 1'b0;
assign SFC_8_VALID_160_161_0_stall_in = 1'b0;

// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_161to161_bb6_c1_exit55_c1_exi454_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_161to161_bb6_c1_exit55_c1_exi454_0_stall_in_0_NO_SHIFT_REG;
 logic [159:0] rnode_161to161_bb6_c1_exit55_c1_exi454_0_NO_SHIFT_REG;
 logic rnode_161to161_bb6_c1_exit55_c1_exi454_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_161to161_bb6_c1_exit55_c1_exi454_0_stall_in_1_NO_SHIFT_REG;
 logic [159:0] rnode_161to161_bb6_c1_exit55_c1_exi454_1_NO_SHIFT_REG;
 logic rnode_161to161_bb6_c1_exit55_c1_exi454_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_161to161_bb6_c1_exit55_c1_exi454_0_stall_in_2_NO_SHIFT_REG;
 logic [159:0] rnode_161to161_bb6_c1_exit55_c1_exi454_2_NO_SHIFT_REG;
 logic rnode_161to161_bb6_c1_exit55_c1_exi454_0_valid_out_3_NO_SHIFT_REG;
 logic rnode_161to161_bb6_c1_exit55_c1_exi454_0_stall_in_3_NO_SHIFT_REG;
 logic [159:0] rnode_161to161_bb6_c1_exit55_c1_exi454_3_NO_SHIFT_REG;
 logic rnode_161to161_bb6_c1_exit55_c1_exi454_0_reg_161_inputs_ready_NO_SHIFT_REG;
 logic [159:0] rnode_161to161_bb6_c1_exit55_c1_exi454_0_reg_161_NO_SHIFT_REG;
 logic rnode_161to161_bb6_c1_exit55_c1_exi454_0_valid_out_0_reg_161_NO_SHIFT_REG;
 logic rnode_161to161_bb6_c1_exit55_c1_exi454_0_stall_in_0_reg_161_NO_SHIFT_REG;
 logic rnode_161to161_bb6_c1_exit55_c1_exi454_0_stall_out_reg_161_NO_SHIFT_REG;

acl_data_fifo rnode_161to161_bb6_c1_exit55_c1_exi454_0_reg_161_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_161to161_bb6_c1_exit55_c1_exi454_0_reg_161_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_161to161_bb6_c1_exit55_c1_exi454_0_stall_in_0_reg_161_NO_SHIFT_REG),
	.valid_out(rnode_161to161_bb6_c1_exit55_c1_exi454_0_valid_out_0_reg_161_NO_SHIFT_REG),
	.stall_out(rnode_161to161_bb6_c1_exit55_c1_exi454_0_stall_out_reg_161_NO_SHIFT_REG),
	.data_in(local_bb6_c1_exit55_c1_exi454),
	.data_out(rnode_161to161_bb6_c1_exit55_c1_exi454_0_reg_161_NO_SHIFT_REG)
);

defparam rnode_161to161_bb6_c1_exit55_c1_exi454_0_reg_161_fifo.DEPTH = 3;
defparam rnode_161to161_bb6_c1_exit55_c1_exi454_0_reg_161_fifo.DATA_WIDTH = 160;
defparam rnode_161to161_bb6_c1_exit55_c1_exi454_0_reg_161_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_161to161_bb6_c1_exit55_c1_exi454_0_reg_161_fifo.IMPL = "zl_reg";

assign rnode_161to161_bb6_c1_exit55_c1_exi454_0_reg_161_inputs_ready_NO_SHIFT_REG = local_bb6_c1_exit55_c1_exi454_valid_out;
assign local_bb6_c1_exit55_c1_exi454_stall_in = rnode_161to161_bb6_c1_exit55_c1_exi454_0_stall_out_reg_161_NO_SHIFT_REG;
assign rnode_161to161_bb6_c1_exit55_c1_exi454_0_stall_in_0_reg_161_NO_SHIFT_REG = (rnode_161to161_bb6_c1_exit55_c1_exi454_0_stall_in_0_NO_SHIFT_REG | rnode_161to161_bb6_c1_exit55_c1_exi454_0_stall_in_1_NO_SHIFT_REG | rnode_161to161_bb6_c1_exit55_c1_exi454_0_stall_in_2_NO_SHIFT_REG | rnode_161to161_bb6_c1_exit55_c1_exi454_0_stall_in_3_NO_SHIFT_REG);
assign rnode_161to161_bb6_c1_exit55_c1_exi454_0_valid_out_0_NO_SHIFT_REG = rnode_161to161_bb6_c1_exit55_c1_exi454_0_valid_out_0_reg_161_NO_SHIFT_REG;
assign rnode_161to161_bb6_c1_exit55_c1_exi454_0_valid_out_1_NO_SHIFT_REG = rnode_161to161_bb6_c1_exit55_c1_exi454_0_valid_out_0_reg_161_NO_SHIFT_REG;
assign rnode_161to161_bb6_c1_exit55_c1_exi454_0_valid_out_2_NO_SHIFT_REG = rnode_161to161_bb6_c1_exit55_c1_exi454_0_valid_out_0_reg_161_NO_SHIFT_REG;
assign rnode_161to161_bb6_c1_exit55_c1_exi454_0_valid_out_3_NO_SHIFT_REG = rnode_161to161_bb6_c1_exit55_c1_exi454_0_valid_out_0_reg_161_NO_SHIFT_REG;
assign rnode_161to161_bb6_c1_exit55_c1_exi454_0_NO_SHIFT_REG = rnode_161to161_bb6_c1_exit55_c1_exi454_0_reg_161_NO_SHIFT_REG;
assign rnode_161to161_bb6_c1_exit55_c1_exi454_1_NO_SHIFT_REG = rnode_161to161_bb6_c1_exit55_c1_exi454_0_reg_161_NO_SHIFT_REG;
assign rnode_161to161_bb6_c1_exit55_c1_exi454_2_NO_SHIFT_REG = rnode_161to161_bb6_c1_exit55_c1_exi454_0_reg_161_NO_SHIFT_REG;
assign rnode_161to161_bb6_c1_exit55_c1_exi454_3_NO_SHIFT_REG = rnode_161to161_bb6_c1_exit55_c1_exi454_0_reg_161_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_c1_exe459_stall_local;
wire local_bb6_c1_exe459;

assign local_bb6_c1_exe459 = rnode_161to161_bb6_c1_exit55_c1_exi454_0_NO_SHIFT_REG[128];

// This section implements an unregistered operation.
// 
wire local_bb6_c1_exe358_stall_local;
wire [31:0] local_bb6_c1_exe358;

assign local_bb6_c1_exe358[31:0] = rnode_161to161_bb6_c1_exit55_c1_exi454_1_NO_SHIFT_REG[127:96];

// This section implements an unregistered operation.
// 
wire local_bb6_c1_exe257_stall_local;
wire [31:0] local_bb6_c1_exe257;

assign local_bb6_c1_exe257[31:0] = rnode_161to161_bb6_c1_exit55_c1_exi454_2_NO_SHIFT_REG[95:64];

// This section implements an unregistered operation.
// 
wire local_bb6_c1_exe156_stall_local;
wire [31:0] local_bb6_c1_exe156;

assign local_bb6_c1_exe156[31:0] = rnode_161to161_bb6_c1_exit55_c1_exi454_3_NO_SHIFT_REG[63:32];

// This section implements an unregistered operation.
// 
wire local_bb6_c2_eni142_stall_local;
wire [159:0] local_bb6_c2_eni142;

assign local_bb6_c2_eni142[31:0] = 32'bx;
assign local_bb6_c2_eni142[63:32] = local_bb6_c1_exe156;
assign local_bb6_c2_eni142[159:64] = 96'bx;

// This section implements an unregistered operation.
// 
wire local_bb6_c2_eni243_stall_local;
wire [159:0] local_bb6_c2_eni243;

assign local_bb6_c2_eni243[63:0] = local_bb6_c2_eni142[63:0];
assign local_bb6_c2_eni243[95:64] = local_bb6_c1_exe257;
assign local_bb6_c2_eni243[159:96] = local_bb6_c2_eni142[159:96];

// This section implements an unregistered operation.
// 
wire local_bb6_c2_eni344_stall_local;
wire [159:0] local_bb6_c2_eni344;

assign local_bb6_c2_eni344[95:0] = local_bb6_c2_eni243[95:0];
assign local_bb6_c2_eni344[127:96] = local_bb6_c1_exe358;
assign local_bb6_c2_eni344[159:128] = local_bb6_c2_eni243[159:128];

// This section implements an unregistered operation.
// 
wire local_bb6_c2_eni445_valid_out;
wire local_bb6_c2_eni445_stall_in;
wire local_bb6_c2_eni445_inputs_ready;
wire local_bb6_c2_eni445_stall_local;
wire [159:0] local_bb6_c2_eni445;

assign local_bb6_c2_eni445_inputs_ready = (rnode_161to161_bb6_c1_exit55_c1_exi454_0_valid_out_0_NO_SHIFT_REG & rnode_161to161_bb6_c1_exit55_c1_exi454_0_valid_out_1_NO_SHIFT_REG & rnode_161to161_bb6_c1_exit55_c1_exi454_0_valid_out_2_NO_SHIFT_REG & rnode_161to161_bb6_c1_exit55_c1_exi454_0_valid_out_3_NO_SHIFT_REG);
assign local_bb6_c2_eni445[127:0] = local_bb6_c2_eni344[127:0];
assign local_bb6_c2_eni445[128] = local_bb6_c1_exe459;
assign local_bb6_c2_eni445[159:129] = local_bb6_c2_eni344[159:129];
assign local_bb6_c2_eni445_valid_out = local_bb6_c2_eni445_inputs_ready;
assign local_bb6_c2_eni445_stall_local = local_bb6_c2_eni445_stall_in;
assign rnode_161to161_bb6_c1_exit55_c1_exi454_0_stall_in_0_NO_SHIFT_REG = (local_bb6_c2_eni445_stall_local | ~(local_bb6_c2_eni445_inputs_ready));
assign rnode_161to161_bb6_c1_exit55_c1_exi454_0_stall_in_1_NO_SHIFT_REG = (local_bb6_c2_eni445_stall_local | ~(local_bb6_c2_eni445_inputs_ready));
assign rnode_161to161_bb6_c1_exit55_c1_exi454_0_stall_in_2_NO_SHIFT_REG = (local_bb6_c2_eni445_stall_local | ~(local_bb6_c2_eni445_inputs_ready));
assign rnode_161to161_bb6_c1_exit55_c1_exi454_0_stall_in_3_NO_SHIFT_REG = (local_bb6_c2_eni445_stall_local | ~(local_bb6_c2_eni445_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb6_c2_enter46_c2_eni445_valid_out_0;
wire local_bb6_c2_enter46_c2_eni445_stall_in_0;
wire local_bb6_c2_enter46_c2_eni445_valid_out_1;
wire local_bb6_c2_enter46_c2_eni445_stall_in_1;
wire local_bb6_c2_enter46_c2_eni445_valid_out_2;
wire local_bb6_c2_enter46_c2_eni445_stall_in_2;
wire local_bb6_c2_enter46_c2_eni445_valid_out_3;
wire local_bb6_c2_enter46_c2_eni445_stall_in_3;
wire local_bb6_c2_enter46_c2_eni445_valid_out_4;
wire local_bb6_c2_enter46_c2_eni445_stall_in_4;
wire local_bb6_c2_enter46_c2_eni445_inputs_ready;
wire local_bb6_c2_enter46_c2_eni445_stall_local;
wire local_bb6_c2_enter46_c2_eni445_input_accepted;
wire [159:0] local_bb6_c2_enter46_c2_eni445;
wire local_bb6_c2_exit35_c2_exi4_enable;
wire local_bb6_c2_exit35_c2_exi4_entry_stall;
wire local_bb6_c2_enter46_c2_eni445_valid_bit;
wire local_bb6_c2_exit35_c2_exi4_output_regs_ready;
wire local_bb6_c2_exit35_c2_exi4_valid_in;
wire local_bb6_c2_exit35_c2_exi4_phases;
wire local_bb6_c2_enter46_c2_eni445_inc_pipelined_thread;
wire local_bb6_c2_enter46_c2_eni445_dec_pipelined_thread;
wire local_bb6_c2_enter46_c2_eni445_fu_stall_out;

assign local_bb6_c2_enter46_c2_eni445_inputs_ready = local_bb6_c2_eni445_valid_out;
assign local_bb6_c2_enter46_c2_eni445 = local_bb6_c2_eni445;
assign local_bb6_c2_enter46_c2_eni445_input_accepted = (local_bb6_c2_enter46_c2_eni445_inputs_ready && !(local_bb6_c2_exit35_c2_exi4_entry_stall));
assign local_bb6_c2_enter46_c2_eni445_valid_bit = local_bb6_c2_enter46_c2_eni445_input_accepted;
assign local_bb6_c2_enter46_c2_eni445_inc_pipelined_thread = 1'b1;
assign local_bb6_c2_enter46_c2_eni445_dec_pipelined_thread = ~(1'b0);
assign local_bb6_c2_enter46_c2_eni445_fu_stall_out = (~(local_bb6_c2_enter46_c2_eni445_inputs_ready) | local_bb6_c2_exit35_c2_exi4_entry_stall);
assign local_bb6_c2_enter46_c2_eni445_stall_local = (local_bb6_c2_enter46_c2_eni445_stall_in_0 | local_bb6_c2_enter46_c2_eni445_stall_in_1 | local_bb6_c2_enter46_c2_eni445_stall_in_2 | local_bb6_c2_enter46_c2_eni445_stall_in_3 | local_bb6_c2_enter46_c2_eni445_stall_in_4);
assign local_bb6_c2_enter46_c2_eni445_valid_out_0 = local_bb6_c2_enter46_c2_eni445_inputs_ready;
assign local_bb6_c2_enter46_c2_eni445_valid_out_1 = local_bb6_c2_enter46_c2_eni445_inputs_ready;
assign local_bb6_c2_enter46_c2_eni445_valid_out_2 = local_bb6_c2_enter46_c2_eni445_inputs_ready;
assign local_bb6_c2_enter46_c2_eni445_valid_out_3 = local_bb6_c2_enter46_c2_eni445_inputs_ready;
assign local_bb6_c2_enter46_c2_eni445_valid_out_4 = local_bb6_c2_enter46_c2_eni445_inputs_ready;
assign local_bb6_c2_eni445_stall_in = (|local_bb6_c2_enter46_c2_eni445_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb6_c2_ene147_stall_local;
wire [31:0] local_bb6_c2_ene147;

assign local_bb6_c2_ene147[31:0] = local_bb6_c2_enter46_c2_eni445[63:32];

// This section implements an unregistered operation.
// 
wire local_bb6_c2_ene248_stall_local;
wire [31:0] local_bb6_c2_ene248;

assign local_bb6_c2_ene248[31:0] = local_bb6_c2_enter46_c2_eni445[95:64];

// This section implements an unregistered operation.
// 
wire local_bb6_c2_ene349_valid_out;
wire local_bb6_c2_ene349_stall_in;
wire local_bb6_c2_ene349_inputs_ready;
wire local_bb6_c2_ene349_stall_local;
wire [31:0] local_bb6_c2_ene349;

assign local_bb6_c2_ene349_inputs_ready = local_bb6_c2_enter46_c2_eni445_valid_out_2;
assign local_bb6_c2_ene349[31:0] = local_bb6_c2_enter46_c2_eni445[127:96];
assign local_bb6_c2_ene349_valid_out = 1'b1;
assign local_bb6_c2_enter46_c2_eni445_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb6_c2_ene450_valid_out;
wire local_bb6_c2_ene450_stall_in;
wire local_bb6_c2_ene450_inputs_ready;
wire local_bb6_c2_ene450_stall_local;
wire local_bb6_c2_ene450;

assign local_bb6_c2_ene450_inputs_ready = local_bb6_c2_enter46_c2_eni445_valid_out_3;
assign local_bb6_c2_ene450 = local_bb6_c2_enter46_c2_eni445[128];
assign local_bb6_c2_ene450_valid_out = 1'b1;
assign local_bb6_c2_enter46_c2_eni445_stall_in_3 = 1'b0;

// This section implements an unregistered operation.
// 
wire SFC_9_VALID_161_161_0_valid_out;
wire SFC_9_VALID_161_161_0_stall_in;
wire SFC_9_VALID_161_161_0_inputs_ready;
wire SFC_9_VALID_161_161_0_stall_local;
wire SFC_9_VALID_161_161_0;

assign SFC_9_VALID_161_161_0_inputs_ready = local_bb6_c2_enter46_c2_eni445_valid_out_4;
assign SFC_9_VALID_161_161_0 = local_bb6_c2_enter46_c2_eni445_valid_bit;
assign SFC_9_VALID_161_161_0_valid_out = 1'b1;
assign local_bb6_c2_enter46_c2_eni445_stall_in_4 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb6_var__u15_valid_out;
wire local_bb6_var__u15_stall_in;
wire local_bb6_c2_ene248_valid_out_1;
wire local_bb6_c2_ene248_stall_in_1;
wire local_bb6_var__u15_inputs_ready;
wire local_bb6_var__u15_stall_local;
wire [31:0] local_bb6_var__u15;

assign local_bb6_var__u15_inputs_ready = (local_bb6_c2_enter46_c2_eni445_valid_out_0 & local_bb6_c2_enter46_c2_eni445_valid_out_1);
assign local_bb6_var__u15 = (local_bb6_c2_ene147 + local_bb6_c2_ene248);
assign local_bb6_var__u15_valid_out = 1'b1;
assign local_bb6_c2_ene248_valid_out_1 = 1'b1;
assign local_bb6_c2_enter46_c2_eni445_stall_in_0 = 1'b0;
assign local_bb6_c2_enter46_c2_eni445_stall_in_1 = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_161to162_bb6_c2_ene349_0_valid_out_NO_SHIFT_REG;
 logic rnode_161to162_bb6_c2_ene349_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_161to162_bb6_c2_ene349_0_NO_SHIFT_REG;
 logic rnode_161to162_bb6_c2_ene349_0_reg_162_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_161to162_bb6_c2_ene349_0_reg_162_NO_SHIFT_REG;
 logic rnode_161to162_bb6_c2_ene349_0_valid_out_reg_162_NO_SHIFT_REG;
 logic rnode_161to162_bb6_c2_ene349_0_stall_in_reg_162_NO_SHIFT_REG;
 logic rnode_161to162_bb6_c2_ene349_0_stall_out_reg_162_NO_SHIFT_REG;

acl_data_fifo rnode_161to162_bb6_c2_ene349_0_reg_162_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_161to162_bb6_c2_ene349_0_reg_162_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_161to162_bb6_c2_ene349_0_stall_in_reg_162_NO_SHIFT_REG),
	.valid_out(rnode_161to162_bb6_c2_ene349_0_valid_out_reg_162_NO_SHIFT_REG),
	.stall_out(rnode_161to162_bb6_c2_ene349_0_stall_out_reg_162_NO_SHIFT_REG),
	.data_in(local_bb6_c2_ene349),
	.data_out(rnode_161to162_bb6_c2_ene349_0_reg_162_NO_SHIFT_REG)
);

defparam rnode_161to162_bb6_c2_ene349_0_reg_162_fifo.DEPTH = 1;
defparam rnode_161to162_bb6_c2_ene349_0_reg_162_fifo.DATA_WIDTH = 32;
defparam rnode_161to162_bb6_c2_ene349_0_reg_162_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_161to162_bb6_c2_ene349_0_reg_162_fifo.IMPL = "shift_reg";

assign rnode_161to162_bb6_c2_ene349_0_reg_162_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_c2_ene349_stall_in = 1'b0;
assign rnode_161to162_bb6_c2_ene349_0_NO_SHIFT_REG = rnode_161to162_bb6_c2_ene349_0_reg_162_NO_SHIFT_REG;
assign rnode_161to162_bb6_c2_ene349_0_stall_in_reg_162_NO_SHIFT_REG = ~(local_bb6_c2_exit35_c2_exi4_enable);
assign rnode_161to162_bb6_c2_ene349_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_161to162_bb6_c2_ene450_0_valid_out_NO_SHIFT_REG;
 logic rnode_161to162_bb6_c2_ene450_0_stall_in_NO_SHIFT_REG;
 logic rnode_161to162_bb6_c2_ene450_0_NO_SHIFT_REG;
 logic rnode_161to162_bb6_c2_ene450_0_reg_162_inputs_ready_NO_SHIFT_REG;
 logic rnode_161to162_bb6_c2_ene450_0_reg_162_NO_SHIFT_REG;
 logic rnode_161to162_bb6_c2_ene450_0_valid_out_reg_162_NO_SHIFT_REG;
 logic rnode_161to162_bb6_c2_ene450_0_stall_in_reg_162_NO_SHIFT_REG;
 logic rnode_161to162_bb6_c2_ene450_0_stall_out_reg_162_NO_SHIFT_REG;

acl_data_fifo rnode_161to162_bb6_c2_ene450_0_reg_162_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_161to162_bb6_c2_ene450_0_reg_162_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_161to162_bb6_c2_ene450_0_stall_in_reg_162_NO_SHIFT_REG),
	.valid_out(rnode_161to162_bb6_c2_ene450_0_valid_out_reg_162_NO_SHIFT_REG),
	.stall_out(rnode_161to162_bb6_c2_ene450_0_stall_out_reg_162_NO_SHIFT_REG),
	.data_in(local_bb6_c2_ene450),
	.data_out(rnode_161to162_bb6_c2_ene450_0_reg_162_NO_SHIFT_REG)
);

defparam rnode_161to162_bb6_c2_ene450_0_reg_162_fifo.DEPTH = 1;
defparam rnode_161to162_bb6_c2_ene450_0_reg_162_fifo.DATA_WIDTH = 1;
defparam rnode_161to162_bb6_c2_ene450_0_reg_162_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_161to162_bb6_c2_ene450_0_reg_162_fifo.IMPL = "shift_reg";

assign rnode_161to162_bb6_c2_ene450_0_reg_162_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_c2_ene450_stall_in = 1'b0;
assign rnode_161to162_bb6_c2_ene450_0_NO_SHIFT_REG = rnode_161to162_bb6_c2_ene450_0_reg_162_NO_SHIFT_REG;
assign rnode_161to162_bb6_c2_ene450_0_stall_in_reg_162_NO_SHIFT_REG = ~(local_bb6_c2_exit35_c2_exi4_enable);
assign rnode_161to162_bb6_c2_ene450_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_9_VALID_161_162_0_inputs_ready;
 reg SFC_9_VALID_161_162_0_valid_out_NO_SHIFT_REG;
wire SFC_9_VALID_161_162_0_stall_in;
wire SFC_9_VALID_161_162_0_output_regs_ready;
 reg SFC_9_VALID_161_162_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_9_VALID_161_162_0_causedstall;

assign SFC_9_VALID_161_162_0_inputs_ready = 1'b1;
assign SFC_9_VALID_161_162_0_output_regs_ready = local_bb6_c2_exit35_c2_exi4_enable;
assign SFC_9_VALID_161_161_0_stall_in = 1'b0;
assign SFC_9_VALID_161_162_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb6_c2_exit35_c2_exi4_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_9_VALID_161_162_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_9_VALID_161_162_0_output_regs_ready)
		begin
			SFC_9_VALID_161_162_0_NO_SHIFT_REG <= SFC_9_VALID_161_161_0;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_161to162_bb6_var__u15_0_valid_out_NO_SHIFT_REG;
 logic rnode_161to162_bb6_var__u15_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG;
 logic rnode_161to162_bb6_var__u15_0_reg_162_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_161to162_bb6_var__u15_0_reg_162_NO_SHIFT_REG;
 logic rnode_161to162_bb6_var__u15_0_valid_out_reg_162_NO_SHIFT_REG;
 logic rnode_161to162_bb6_var__u15_0_stall_in_reg_162_NO_SHIFT_REG;
 logic rnode_161to162_bb6_var__u15_0_stall_out_reg_162_NO_SHIFT_REG;

acl_data_fifo rnode_161to162_bb6_var__u15_0_reg_162_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_161to162_bb6_var__u15_0_reg_162_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_161to162_bb6_var__u15_0_stall_in_reg_162_NO_SHIFT_REG),
	.valid_out(rnode_161to162_bb6_var__u15_0_valid_out_reg_162_NO_SHIFT_REG),
	.stall_out(rnode_161to162_bb6_var__u15_0_stall_out_reg_162_NO_SHIFT_REG),
	.data_in(local_bb6_var__u15),
	.data_out(rnode_161to162_bb6_var__u15_0_reg_162_NO_SHIFT_REG)
);

defparam rnode_161to162_bb6_var__u15_0_reg_162_fifo.DEPTH = 1;
defparam rnode_161to162_bb6_var__u15_0_reg_162_fifo.DATA_WIDTH = 32;
defparam rnode_161to162_bb6_var__u15_0_reg_162_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_161to162_bb6_var__u15_0_reg_162_fifo.IMPL = "shift_reg";

assign rnode_161to162_bb6_var__u15_0_reg_162_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_var__u15_stall_in = 1'b0;
assign rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG = rnode_161to162_bb6_var__u15_0_reg_162_NO_SHIFT_REG;
assign rnode_161to162_bb6_var__u15_0_stall_in_reg_162_NO_SHIFT_REG = ~(local_bb6_c2_exit35_c2_exi4_enable);
assign rnode_161to162_bb6_var__u15_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_161to162_bb6_c2_ene248_0_valid_out_NO_SHIFT_REG;
 logic rnode_161to162_bb6_c2_ene248_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_161to162_bb6_c2_ene248_0_NO_SHIFT_REG;
 logic rnode_161to162_bb6_c2_ene248_0_reg_162_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_161to162_bb6_c2_ene248_0_reg_162_NO_SHIFT_REG;
 logic rnode_161to162_bb6_c2_ene248_0_valid_out_reg_162_NO_SHIFT_REG;
 logic rnode_161to162_bb6_c2_ene248_0_stall_in_reg_162_NO_SHIFT_REG;
 logic rnode_161to162_bb6_c2_ene248_0_stall_out_reg_162_NO_SHIFT_REG;

acl_data_fifo rnode_161to162_bb6_c2_ene248_0_reg_162_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_161to162_bb6_c2_ene248_0_reg_162_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_161to162_bb6_c2_ene248_0_stall_in_reg_162_NO_SHIFT_REG),
	.valid_out(rnode_161to162_bb6_c2_ene248_0_valid_out_reg_162_NO_SHIFT_REG),
	.stall_out(rnode_161to162_bb6_c2_ene248_0_stall_out_reg_162_NO_SHIFT_REG),
	.data_in(local_bb6_c2_ene248),
	.data_out(rnode_161to162_bb6_c2_ene248_0_reg_162_NO_SHIFT_REG)
);

defparam rnode_161to162_bb6_c2_ene248_0_reg_162_fifo.DEPTH = 1;
defparam rnode_161to162_bb6_c2_ene248_0_reg_162_fifo.DATA_WIDTH = 32;
defparam rnode_161to162_bb6_c2_ene248_0_reg_162_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_161to162_bb6_c2_ene248_0_reg_162_fifo.IMPL = "shift_reg";

assign rnode_161to162_bb6_c2_ene248_0_reg_162_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_c2_ene248_stall_in_1 = 1'b0;
assign rnode_161to162_bb6_c2_ene248_0_NO_SHIFT_REG = rnode_161to162_bb6_c2_ene248_0_reg_162_NO_SHIFT_REG;
assign rnode_161to162_bb6_c2_ene248_0_stall_in_reg_162_NO_SHIFT_REG = ~(local_bb6_c2_exit35_c2_exi4_enable);
assign rnode_161to162_bb6_c2_ene248_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb6_c2_exi139_stall_local;
wire [255:0] local_bb6_c2_exi139;

assign local_bb6_c2_exi139[31:0] = 32'bx;
assign local_bb6_c2_exi139[63:32] = rnode_161to162_bb6_c2_ene349_0_NO_SHIFT_REG;
assign local_bb6_c2_exi139[255:64] = 192'bx;

// This section implements an unregistered operation.
// 
wire local_bb6_var__u16_stall_local;
wire [63:0] local_bb6_var__u16;

assign local_bb6_var__u16[32] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[33] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[34] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[35] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[36] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[37] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[38] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[39] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[40] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[41] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[42] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[43] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[44] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[45] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[46] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[47] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[48] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[49] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[50] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[51] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[52] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[53] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[54] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[55] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[56] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[57] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[58] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[59] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[60] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[61] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[62] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[63] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG[31];
assign local_bb6_var__u16[31:0] = rnode_161to162_bb6_var__u15_0_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_c2_exi240_stall_local;
wire [255:0] local_bb6_c2_exi240;

assign local_bb6_c2_exi240[63:0] = local_bb6_c2_exi139[63:0];
assign local_bb6_c2_exi240[95:64] = rnode_161to162_bb6_c2_ene248_0_NO_SHIFT_REG;
assign local_bb6_c2_exi240[255:96] = local_bb6_c2_exi139[255:96];

// This section implements an unregistered operation.
// 
wire local_bb6_var__u17_stall_local;
wire [63:0] local_bb6_var__u17;

assign local_bb6_var__u17 = ((input_inputFeatureMap & 64'hFFFFFFFFFFFFFC00) + (local_bb6_var__u16 << 6'h2));

// This section implements an unregistered operation.
// 
wire local_bb6_c2_exi341_stall_local;
wire [255:0] local_bb6_c2_exi341;

assign local_bb6_c2_exi341[127:0] = local_bb6_c2_exi240[127:0];
assign local_bb6_c2_exi341[191:128] = (local_bb6_var__u17 & 64'hFFFFFFFFFFFFFFFC);
assign local_bb6_c2_exi341[255:192] = local_bb6_c2_exi240[255:192];

// This section implements an unregistered operation.
// 
wire local_bb6_c2_exi4_valid_out;
wire local_bb6_c2_exi4_stall_in;
wire local_bb6_c2_exi4_inputs_ready;
wire local_bb6_c2_exi4_stall_local;
wire [255:0] local_bb6_c2_exi4;

assign local_bb6_c2_exi4_inputs_ready = (rnode_161to162_bb6_c2_ene248_0_valid_out_NO_SHIFT_REG & rnode_161to162_bb6_c2_ene349_0_valid_out_NO_SHIFT_REG & rnode_161to162_bb6_c2_ene450_0_valid_out_NO_SHIFT_REG & rnode_161to162_bb6_var__u15_0_valid_out_NO_SHIFT_REG);
assign local_bb6_c2_exi4[191:0] = local_bb6_c2_exi341[191:0];
assign local_bb6_c2_exi4[192] = rnode_161to162_bb6_c2_ene450_0_NO_SHIFT_REG;
assign local_bb6_c2_exi4[255:193] = local_bb6_c2_exi341[255:193];
assign local_bb6_c2_exi4_valid_out = 1'b1;
assign rnode_161to162_bb6_c2_ene248_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_161to162_bb6_c2_ene349_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_161to162_bb6_c2_ene450_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_161to162_bb6_var__u15_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb6_c2_exit35_c2_exi4_valid_out_0;
wire local_bb6_c2_exit35_c2_exi4_stall_in_0;
wire local_bb6_c2_exit35_c2_exi4_valid_out_1;
wire local_bb6_c2_exit35_c2_exi4_stall_in_1;
wire local_bb6_c2_exit35_c2_exi4_valid_out_2;
wire local_bb6_c2_exit35_c2_exi4_stall_in_2;
wire local_bb6_c2_exit35_c2_exi4_valid_out_3;
wire local_bb6_c2_exit35_c2_exi4_stall_in_3;
wire local_bb6_c2_exit35_c2_exi4_inputs_ready;
wire local_bb6_c2_exit35_c2_exi4_stall_local;
wire [255:0] local_bb6_c2_exit35_c2_exi4;
wire local_bb6_c2_exit35_c2_exi4_valid;
wire local_bb6_c2_exit35_c2_exi4_fu_stall_out;
 reg local_bb6_c2_exit35_c2_exi4_consumed_0_NO_SHIFT_REG;
 reg local_bb6_c2_exit35_c2_exi4_consumed_2_NO_SHIFT_REG;

acl_enable_sink local_bb6_c2_exit35_c2_exi4_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb6_c2_exi4),
	.data_out(local_bb6_c2_exit35_c2_exi4),
	.input_accepted(local_bb6_c2_enter46_c2_eni445_input_accepted),
	.valid_out(local_bb6_c2_exit35_c2_exi4_valid),
	.stall_in(local_bb6_c2_exit35_c2_exi4_stall_local),
	.enable(local_bb6_c2_exit35_c2_exi4_enable),
	.valid_in(local_bb6_c2_exit35_c2_exi4_valid_in),
	.stall_entry(local_bb6_c2_exit35_c2_exi4_entry_stall),
	.inc_pipelined_thread(local_bb6_c2_enter46_c2_eni445_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb6_c2_enter46_c2_eni445_dec_pipelined_thread)
);

defparam local_bb6_c2_exit35_c2_exi4_instance.DATA_WIDTH = 256;
defparam local_bb6_c2_exit35_c2_exi4_instance.PIPELINE_DEPTH = 1;
defparam local_bb6_c2_exit35_c2_exi4_instance.SCHEDULEII = 1;
defparam local_bb6_c2_exit35_c2_exi4_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb6_c2_exit35_c2_exi4_inputs_ready = (local_bb6_c2_exi4_valid_out & SFC_9_VALID_161_162_0_valid_out_NO_SHIFT_REG);
assign local_bb6_c2_exit35_c2_exi4_valid_in = SFC_9_VALID_161_162_0_NO_SHIFT_REG;
assign local_bb6_c2_exit35_c2_exi4_fu_stall_out = ~(local_bb6_c2_exit35_c2_exi4_enable);
assign local_bb6_c2_exit35_c2_exi4_stall_local = ((local_bb6_c2_exit35_c2_exi4_stall_in_0 & ~(local_bb6_c2_exit35_c2_exi4_consumed_0_NO_SHIFT_REG)) | 1'b0 | (local_bb6_c2_exit35_c2_exi4_stall_in_2 & ~(local_bb6_c2_exit35_c2_exi4_consumed_2_NO_SHIFT_REG)) | 1'b0);
assign local_bb6_c2_exit35_c2_exi4_valid_out_0 = (local_bb6_c2_exit35_c2_exi4_valid & ~(local_bb6_c2_exit35_c2_exi4_consumed_0_NO_SHIFT_REG));
assign local_bb6_c2_exit35_c2_exi4_valid_out_1 = local_bb6_c2_exit35_c2_exi4_valid;
assign local_bb6_c2_exit35_c2_exi4_valid_out_2 = (local_bb6_c2_exit35_c2_exi4_valid & ~(local_bb6_c2_exit35_c2_exi4_consumed_2_NO_SHIFT_REG));
assign local_bb6_c2_exit35_c2_exi4_valid_out_3 = local_bb6_c2_exit35_c2_exi4_valid;
assign local_bb6_c2_exi4_stall_in = 1'b0;
assign SFC_9_VALID_161_162_0_stall_in = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_c2_exit35_c2_exi4_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb6_c2_exit35_c2_exi4_consumed_2_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb6_c2_exit35_c2_exi4_consumed_0_NO_SHIFT_REG <= (local_bb6_c2_exit35_c2_exi4_valid & (local_bb6_c2_exit35_c2_exi4_consumed_0_NO_SHIFT_REG | ~(local_bb6_c2_exit35_c2_exi4_stall_in_0)) & local_bb6_c2_exit35_c2_exi4_stall_local);
		local_bb6_c2_exit35_c2_exi4_consumed_2_NO_SHIFT_REG <= (local_bb6_c2_exit35_c2_exi4_valid & (local_bb6_c2_exit35_c2_exi4_consumed_2_NO_SHIFT_REG | ~(local_bb6_c2_exit35_c2_exi4_stall_in_2)) & local_bb6_c2_exit35_c2_exi4_stall_local);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb6_c2_exe138_stall_local;
wire [31:0] local_bb6_c2_exe138;

assign local_bb6_c2_exe138[31:0] = local_bb6_c2_exit35_c2_exi4[63:32];

// This section implements an unregistered operation.
// 
wire local_bb6_c2_exe237_stall_local;
wire [31:0] local_bb6_c2_exe237;

assign local_bb6_c2_exe237[31:0] = local_bb6_c2_exit35_c2_exi4[95:64];

// This section implements an unregistered operation.
// 
wire local_bb6_c2_exe336_valid_out;
wire local_bb6_c2_exe336_stall_in;
wire local_bb6_c2_exe336_inputs_ready;
wire local_bb6_c2_exe336_stall_local;
wire [63:0] local_bb6_c2_exe336;

assign local_bb6_c2_exe336_inputs_ready = local_bb6_c2_exit35_c2_exi4_valid_out_2;
assign local_bb6_c2_exe336[63:0] = local_bb6_c2_exit35_c2_exi4[191:128];
assign local_bb6_c2_exe336_valid_out = local_bb6_c2_exe336_inputs_ready;
assign local_bb6_c2_exe336_stall_local = local_bb6_c2_exe336_stall_in;
assign local_bb6_c2_exit35_c2_exi4_stall_in_2 = (|local_bb6_c2_exe336_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb6_c2_exe138_valid_out;
wire local_bb6_c2_exe138_stall_in;
wire local_bb6_c2_exe237_valid_out;
wire local_bb6_c2_exe237_stall_in;
wire local_bb6_c2_exe4_valid_out;
wire local_bb6_c2_exe4_stall_in;
wire local_bb6_c2_exe4_inputs_ready;
wire local_bb6_c2_exe4_stall_local;
wire local_bb6_c2_exe4;

assign local_bb6_c2_exe4_inputs_ready = (local_bb6_c2_exit35_c2_exi4_valid_out_0 & local_bb6_c2_exit35_c2_exi4_valid_out_1 & local_bb6_c2_exit35_c2_exi4_valid_out_3);
assign local_bb6_c2_exe4 = local_bb6_c2_exit35_c2_exi4[192];
assign local_bb6_c2_exe4_stall_local = (local_bb6_c2_exe138_stall_in | local_bb6_c2_exe237_stall_in | local_bb6_c2_exe4_stall_in);
assign local_bb6_c2_exe138_valid_out = local_bb6_c2_exe4_inputs_ready;
assign local_bb6_c2_exe237_valid_out = local_bb6_c2_exe4_inputs_ready;
assign local_bb6_c2_exe4_valid_out = local_bb6_c2_exe4_inputs_ready;
assign local_bb6_c2_exit35_c2_exi4_stall_in_0 = (local_bb6_c2_exe4_stall_local | ~(local_bb6_c2_exe4_inputs_ready));
assign local_bb6_c2_exit35_c2_exi4_stall_in_1 = (local_bb6_c2_exe4_stall_local | ~(local_bb6_c2_exe4_inputs_ready));
assign local_bb6_c2_exit35_c2_exi4_stall_in_3 = (local_bb6_c2_exe4_stall_local | ~(local_bb6_c2_exe4_inputs_ready));

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_162to163_bb6_c2_exe336_0_valid_out_NO_SHIFT_REG;
 logic rnode_162to163_bb6_c2_exe336_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_162to163_bb6_c2_exe336_0_NO_SHIFT_REG;
 logic rnode_162to163_bb6_c2_exe336_0_reg_163_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_162to163_bb6_c2_exe336_0_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_bb6_c2_exe336_0_valid_out_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_bb6_c2_exe336_0_stall_in_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_bb6_c2_exe336_0_stall_out_reg_163_NO_SHIFT_REG;
wire [64:0] rci_rcnode_162to322_rc0_bb6_c2_exe138_0_reg_162;

acl_data_fifo rnode_162to163_bb6_c2_exe336_0_reg_163_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_162to163_bb6_c2_exe336_0_reg_163_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_162to163_bb6_c2_exe336_0_stall_in_reg_163_NO_SHIFT_REG),
	.valid_out(rnode_162to163_bb6_c2_exe336_0_valid_out_reg_163_NO_SHIFT_REG),
	.stall_out(rnode_162to163_bb6_c2_exe336_0_stall_out_reg_163_NO_SHIFT_REG),
	.data_in((local_bb6_c2_exe336 & 64'hFFFFFFFFFFFFFFFC)),
	.data_out(rnode_162to163_bb6_c2_exe336_0_reg_163_NO_SHIFT_REG)
);

defparam rnode_162to163_bb6_c2_exe336_0_reg_163_fifo.DEPTH = 2;
defparam rnode_162to163_bb6_c2_exe336_0_reg_163_fifo.DATA_WIDTH = 64;
defparam rnode_162to163_bb6_c2_exe336_0_reg_163_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_162to163_bb6_c2_exe336_0_reg_163_fifo.IMPL = "ll_reg";

assign rnode_162to163_bb6_c2_exe336_0_reg_163_inputs_ready_NO_SHIFT_REG = local_bb6_c2_exe336_valid_out;
assign local_bb6_c2_exe336_stall_in = rnode_162to163_bb6_c2_exe336_0_stall_out_reg_163_NO_SHIFT_REG;
assign rnode_162to163_bb6_c2_exe336_0_NO_SHIFT_REG = rnode_162to163_bb6_c2_exe336_0_reg_163_NO_SHIFT_REG;
assign rnode_162to163_bb6_c2_exe336_0_stall_in_reg_163_NO_SHIFT_REG = rnode_162to163_bb6_c2_exe336_0_stall_in_NO_SHIFT_REG;
assign rnode_162to163_bb6_c2_exe336_0_valid_out_NO_SHIFT_REG = rnode_162to163_bb6_c2_exe336_0_valid_out_reg_163_NO_SHIFT_REG;
assign rci_rcnode_162to322_rc0_bb6_c2_exe138_0_reg_162[31:0] = local_bb6_c2_exe138;
assign rci_rcnode_162to322_rc0_bb6_c2_exe138_0_reg_162[63:32] = local_bb6_c2_exe237;
assign rci_rcnode_162to322_rc0_bb6_c2_exe138_0_reg_162[64] = local_bb6_c2_exe4;

// Register node:
//  * latency = 160
//  * capacity = 160
 logic rcnode_162to322_rc0_bb6_c2_exe138_0_valid_out_NO_SHIFT_REG;
 logic rcnode_162to322_rc0_bb6_c2_exe138_0_stall_in_NO_SHIFT_REG;
 logic [64:0] rcnode_162to322_rc0_bb6_c2_exe138_0_NO_SHIFT_REG;
 logic rcnode_162to322_rc0_bb6_c2_exe138_0_reg_322_inputs_ready_NO_SHIFT_REG;
 logic [64:0] rcnode_162to322_rc0_bb6_c2_exe138_0_reg_322_NO_SHIFT_REG;
 logic rcnode_162to322_rc0_bb6_c2_exe138_0_valid_out_reg_322_NO_SHIFT_REG;
 logic rcnode_162to322_rc0_bb6_c2_exe138_0_stall_in_reg_322_NO_SHIFT_REG;
 logic rcnode_162to322_rc0_bb6_c2_exe138_0_stall_out_0_reg_322_IP_NO_SHIFT_REG;
 logic rcnode_162to322_rc0_bb6_c2_exe138_0_stall_out_0_reg_322_NO_SHIFT_REG;

acl_data_fifo rcnode_162to322_rc0_bb6_c2_exe138_0_reg_322_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_162to322_rc0_bb6_c2_exe138_0_reg_322_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_162to322_rc0_bb6_c2_exe138_0_stall_in_reg_322_NO_SHIFT_REG),
	.valid_out(rcnode_162to322_rc0_bb6_c2_exe138_0_valid_out_reg_322_NO_SHIFT_REG),
	.stall_out(rcnode_162to322_rc0_bb6_c2_exe138_0_stall_out_0_reg_322_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_162to322_rc0_bb6_c2_exe138_0_reg_162),
	.data_out(rcnode_162to322_rc0_bb6_c2_exe138_0_reg_322_NO_SHIFT_REG)
);

defparam rcnode_162to322_rc0_bb6_c2_exe138_0_reg_322_fifo.DEPTH = 161;
defparam rcnode_162to322_rc0_bb6_c2_exe138_0_reg_322_fifo.DATA_WIDTH = 65;
defparam rcnode_162to322_rc0_bb6_c2_exe138_0_reg_322_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_162to322_rc0_bb6_c2_exe138_0_reg_322_fifo.IMPL = "ram";

assign rcnode_162to322_rc0_bb6_c2_exe138_0_reg_322_inputs_ready_NO_SHIFT_REG = (local_bb6_c2_exe138_valid_out & local_bb6_c2_exe237_valid_out & local_bb6_c2_exe4_valid_out);
assign rcnode_162to322_rc0_bb6_c2_exe138_0_stall_out_0_reg_322_NO_SHIFT_REG = (~(rcnode_162to322_rc0_bb6_c2_exe138_0_reg_322_inputs_ready_NO_SHIFT_REG) | rcnode_162to322_rc0_bb6_c2_exe138_0_stall_out_0_reg_322_IP_NO_SHIFT_REG);
assign local_bb6_c2_exe138_stall_in = rcnode_162to322_rc0_bb6_c2_exe138_0_stall_out_0_reg_322_NO_SHIFT_REG;
assign local_bb6_c2_exe237_stall_in = rcnode_162to322_rc0_bb6_c2_exe138_0_stall_out_0_reg_322_NO_SHIFT_REG;
assign local_bb6_c2_exe4_stall_in = rcnode_162to322_rc0_bb6_c2_exe138_0_stall_out_0_reg_322_NO_SHIFT_REG;
assign rcnode_162to322_rc0_bb6_c2_exe138_0_NO_SHIFT_REG = rcnode_162to322_rc0_bb6_c2_exe138_0_reg_322_NO_SHIFT_REG;
assign rcnode_162to322_rc0_bb6_c2_exe138_0_stall_in_reg_322_NO_SHIFT_REG = rcnode_162to322_rc0_bb6_c2_exe138_0_stall_in_NO_SHIFT_REG;
assign rcnode_162to322_rc0_bb6_c2_exe138_0_valid_out_NO_SHIFT_REG = rcnode_162to322_rc0_bb6_c2_exe138_0_valid_out_reg_322_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb6_ld__inputs_ready;
 reg local_bb6_ld__valid_out_NO_SHIFT_REG;
wire local_bb6_ld__stall_in;
wire local_bb6_ld__output_regs_ready;
wire local_bb6_ld__fu_stall_out;
wire local_bb6_ld__fu_valid_out;
wire [31:0] local_bb6_ld__lsu_dataout;
 reg [31:0] local_bb6_ld__NO_SHIFT_REG;
wire local_bb6_ld__causedstall;
wire [614:0] rci_rcnode_322to323_rc0_cmp48_0_reg_322;

lsu_top lsu_local_bb6_ld_ (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb6_ld__fu_stall_out),
	.i_valid(local_bb6_ld__inputs_ready),
	.i_address((rnode_162to163_bb6_c2_exe336_0_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFFFC)),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(rnode_162to163__phi_decision77_xor_0_NO_SHIFT_REG),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb6_ld__output_regs_ready)),
	.o_valid(local_bb6_ld__fu_valid_out),
	.o_readdata(local_bb6_ld__lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb6_ld__active),
	.avm_address(avm_local_bb6_ld__address),
	.avm_read(avm_local_bb6_ld__read),
	.avm_enable(avm_local_bb6_ld__enable),
	.avm_readdata(avm_local_bb6_ld__readdata),
	.avm_write(avm_local_bb6_ld__write),
	.avm_writeack(avm_local_bb6_ld__writeack),
	.avm_burstcount(avm_local_bb6_ld__burstcount),
	.avm_writedata(avm_local_bb6_ld__writedata),
	.avm_byteenable(avm_local_bb6_ld__byteenable),
	.avm_waitrequest(avm_local_bb6_ld__waitrequest),
	.avm_readdatavalid(avm_local_bb6_ld__readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb6_ld_.AWIDTH = 32;
defparam lsu_local_bb6_ld_.WIDTH_BYTES = 4;
defparam lsu_local_bb6_ld_.MWIDTH_BYTES = 64;
defparam lsu_local_bb6_ld_.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb6_ld_.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb6_ld_.READ = 1;
defparam lsu_local_bb6_ld_.ATOMIC = 0;
defparam lsu_local_bb6_ld_.WIDTH = 32;
defparam lsu_local_bb6_ld_.MWIDTH = 512;
defparam lsu_local_bb6_ld_.ATOMIC_WIDTH = 3;
defparam lsu_local_bb6_ld_.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb6_ld_.KERNEL_SIDE_MEM_LATENCY = 160;
defparam lsu_local_bb6_ld_.MEMORY_SIDE_MEM_LATENCY = 69;
defparam lsu_local_bb6_ld_.USE_WRITE_ACK = 0;
defparam lsu_local_bb6_ld_.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb6_ld_.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb6_ld_.NUMBER_BANKS = 1;
defparam lsu_local_bb6_ld_.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb6_ld_.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb6_ld_.USEINPUTFIFO = 0;
defparam lsu_local_bb6_ld_.USECACHING = 0;
defparam lsu_local_bb6_ld_.USEOUTPUTFIFO = 1;
defparam lsu_local_bb6_ld_.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb6_ld_.ADDRSPACE = 1;
defparam lsu_local_bb6_ld_.STYLE = "BURST-COALESCED";

assign local_bb6_ld__inputs_ready = (rnode_162to163_bb6_c2_exe336_0_valid_out_NO_SHIFT_REG & rnode_162to163__phi_decision77_xor_0_valid_out_0_NO_SHIFT_REG & rstag_163to163_bb6_st_select55_valid_out);
assign local_bb6_ld__output_regs_ready = (&(~(local_bb6_ld__valid_out_NO_SHIFT_REG) | ~(local_bb6_ld__stall_in)));
assign rnode_162to163_bb6_c2_exe336_0_stall_in_NO_SHIFT_REG = (local_bb6_ld__fu_stall_out | ~(local_bb6_ld__inputs_ready));
assign rnode_162to163__phi_decision77_xor_0_stall_in_0_NO_SHIFT_REG = (local_bb6_ld__fu_stall_out | ~(local_bb6_ld__inputs_ready));
assign rstag_163to163_bb6_st_select55_stall_in = (local_bb6_ld__fu_stall_out | ~(local_bb6_ld__inputs_ready));
assign local_bb6_ld__causedstall = (local_bb6_ld__inputs_ready && (local_bb6_ld__fu_stall_out && !(~(local_bb6_ld__output_regs_ready))));
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[0] = rcnode_1to322_rc8_cmp48_0_NO_SHIFT_REG[0];
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[1] = rcnode_1to322_rc8_cmp48_0_NO_SHIFT_REG[1];
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[33:2] = rcnode_1to322_rc8_cmp48_0_NO_SHIFT_REG[33:2];
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[65:34] = rcnode_1to322_rc8_cmp48_0_NO_SHIFT_REG[65:34];
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[97:66] = rcnode_1to322_rc9_c0_exe2_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[129:98] = rcnode_1to322_rc9_c0_exe2_0_NO_SHIFT_REG[63:32];
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[130] = rcnode_1to322_rc9_c0_exe2_0_NO_SHIFT_REG[64];
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[131] = rcnode_1to322_rc9_c0_exe2_0_NO_SHIFT_REG[65];
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[163:132] = rcnode_1to322_rc10_channelCounter_049_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[195:164] = rcnode_1to322_rc10_channelCounter_049_0_NO_SHIFT_REG[63:32];
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[227:196] = rcnode_1to322_rc10_channelCounter_049_0_NO_SHIFT_REG[95:64];
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[259:228] = rcnode_1to322_rc10_channelCounter_049_0_NO_SHIFT_REG[127:96];
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[291:260] = rcnode_1to322_rc11_c3_exe1_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[323:292] = rcnode_1to322_rc11_c3_exe1_0_NO_SHIFT_REG[63:32];
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[355:324] = rcnode_1to322_rc11_c3_exe1_0_NO_SHIFT_REG[95:64];
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[387:356] = rcnode_1to322_rc11_c3_exe1_0_NO_SHIFT_REG[127:96];
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[419:388] = rcnode_1to322_rc12_input_global_id_2_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[451:420] = rcnode_1to322_rc12_input_global_id_2_0_NO_SHIFT_REG[63:32];
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[483:452] = rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[515:484] = rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG[63:32];
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[547:516] = rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG[95:64];
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[548] = rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_NO_SHIFT_REG[96];
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[549] = rnode_163to322__phi_decision77_xor_0_NO_SHIFT_REG;
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[581:550] = rcnode_162to322_rc0_bb6_c2_exe138_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[613:582] = rcnode_162to322_rc0_bb6_c2_exe138_0_NO_SHIFT_REG[63:32];
assign rci_rcnode_322to323_rc0_cmp48_0_reg_322[614] = rcnode_162to322_rc0_bb6_c2_exe138_0_NO_SHIFT_REG[64];

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_ld__NO_SHIFT_REG <= 'x;
		local_bb6_ld__valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_ld__output_regs_ready)
		begin
			local_bb6_ld__NO_SHIFT_REG <= local_bb6_ld__lsu_dataout;
			local_bb6_ld__valid_out_NO_SHIFT_REG <= local_bb6_ld__fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_ld__stall_in))
			begin
				local_bb6_ld__valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_322to323_rc0_cmp48_0_valid_out_NO_SHIFT_REG;
 logic rcnode_322to323_rc0_cmp48_0_stall_in_NO_SHIFT_REG;
 logic [614:0] rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG;
 logic rcnode_322to323_rc0_cmp48_0_reg_323_inputs_ready_NO_SHIFT_REG;
 logic [614:0] rcnode_322to323_rc0_cmp48_0_reg_323_NO_SHIFT_REG;
 logic rcnode_322to323_rc0_cmp48_0_valid_out_reg_323_NO_SHIFT_REG;
 logic rcnode_322to323_rc0_cmp48_0_stall_in_reg_323_NO_SHIFT_REG;
 logic rcnode_322to323_rc0_cmp48_0_stall_out_0_reg_323_IP_NO_SHIFT_REG;
 logic rcnode_322to323_rc0_cmp48_0_stall_out_0_reg_323_NO_SHIFT_REG;

acl_data_fifo rcnode_322to323_rc0_cmp48_0_reg_323_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_322to323_rc0_cmp48_0_reg_323_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_322to323_rc0_cmp48_0_stall_in_reg_323_NO_SHIFT_REG),
	.valid_out(rcnode_322to323_rc0_cmp48_0_valid_out_reg_323_NO_SHIFT_REG),
	.stall_out(rcnode_322to323_rc0_cmp48_0_stall_out_0_reg_323_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_322to323_rc0_cmp48_0_reg_322),
	.data_out(rcnode_322to323_rc0_cmp48_0_reg_323_NO_SHIFT_REG)
);

defparam rcnode_322to323_rc0_cmp48_0_reg_323_fifo.DEPTH = 1;
defparam rcnode_322to323_rc0_cmp48_0_reg_323_fifo.DATA_WIDTH = 615;
defparam rcnode_322to323_rc0_cmp48_0_reg_323_fifo.ALLOW_FULL_WRITE = 1;
defparam rcnode_322to323_rc0_cmp48_0_reg_323_fifo.IMPL = "ll_reg";

assign rcnode_322to323_rc0_cmp48_0_reg_323_inputs_ready_NO_SHIFT_REG = (rnode_163to322__phi_decision77_xor_0_valid_out_NO_SHIFT_REG & rcnode_1to322_rc8_cmp48_0_valid_out_NO_SHIFT_REG & rcnode_1to322_rc9_c0_exe2_0_valid_out_NO_SHIFT_REG & rcnode_1to322_rc10_channelCounter_049_0_valid_out_NO_SHIFT_REG & rcnode_1to322_rc11_c3_exe1_0_valid_out_NO_SHIFT_REG & rcnode_1to322_rc12_input_global_id_2_0_valid_out_NO_SHIFT_REG & rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_valid_out_NO_SHIFT_REG & rcnode_162to322_rc0_bb6_c2_exe138_0_valid_out_NO_SHIFT_REG);
assign rcnode_322to323_rc0_cmp48_0_stall_out_0_reg_323_NO_SHIFT_REG = (~(rcnode_322to323_rc0_cmp48_0_reg_323_inputs_ready_NO_SHIFT_REG) | rcnode_322to323_rc0_cmp48_0_stall_out_0_reg_323_IP_NO_SHIFT_REG);
assign rnode_163to322__phi_decision77_xor_0_stall_in_NO_SHIFT_REG = rcnode_322to323_rc0_cmp48_0_stall_out_0_reg_323_NO_SHIFT_REG;
assign rcnode_1to322_rc8_cmp48_0_stall_in_NO_SHIFT_REG = rcnode_322to323_rc0_cmp48_0_stall_out_0_reg_323_NO_SHIFT_REG;
assign rcnode_1to322_rc9_c0_exe2_0_stall_in_NO_SHIFT_REG = rcnode_322to323_rc0_cmp48_0_stall_out_0_reg_323_NO_SHIFT_REG;
assign rcnode_1to322_rc10_channelCounter_049_0_stall_in_NO_SHIFT_REG = rcnode_322to323_rc0_cmp48_0_stall_out_0_reg_323_NO_SHIFT_REG;
assign rcnode_1to322_rc11_c3_exe1_0_stall_in_NO_SHIFT_REG = rcnode_322to323_rc0_cmp48_0_stall_out_0_reg_323_NO_SHIFT_REG;
assign rcnode_1to322_rc12_input_global_id_2_0_stall_in_NO_SHIFT_REG = rcnode_322to323_rc0_cmp48_0_stall_out_0_reg_323_NO_SHIFT_REG;
assign rcnode_158to322_rc1_memcoalesce_param_extrValue_8_0_stall_in_NO_SHIFT_REG = rcnode_322to323_rc0_cmp48_0_stall_out_0_reg_323_NO_SHIFT_REG;
assign rcnode_162to322_rc0_bb6_c2_exe138_0_stall_in_NO_SHIFT_REG = rcnode_322to323_rc0_cmp48_0_stall_out_0_reg_323_NO_SHIFT_REG;
assign rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG = rcnode_322to323_rc0_cmp48_0_reg_323_NO_SHIFT_REG;
assign rcnode_322to323_rc0_cmp48_0_stall_in_reg_323_NO_SHIFT_REG = rcnode_322to323_rc0_cmp48_0_stall_in_NO_SHIFT_REG;
assign rcnode_322to323_rc0_cmp48_0_valid_out_NO_SHIFT_REG = rcnode_322to323_rc0_cmp48_0_valid_out_reg_323_NO_SHIFT_REG;

// This section implements a staging register.
// 
wire rstag_323to323_bb6_ld__valid_out;
wire rstag_323to323_bb6_ld__stall_in;
wire rstag_323to323_bb6_ld__inputs_ready;
wire rstag_323to323_bb6_ld__stall_local;
 reg rstag_323to323_bb6_ld__staging_valid_NO_SHIFT_REG;
wire rstag_323to323_bb6_ld__combined_valid;
 reg [31:0] rstag_323to323_bb6_ld__staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_323to323_bb6_ld_;

assign rstag_323to323_bb6_ld__inputs_ready = local_bb6_ld__valid_out_NO_SHIFT_REG;
assign rstag_323to323_bb6_ld_ = (rstag_323to323_bb6_ld__staging_valid_NO_SHIFT_REG ? rstag_323to323_bb6_ld__staging_reg_NO_SHIFT_REG : local_bb6_ld__NO_SHIFT_REG);
assign rstag_323to323_bb6_ld__combined_valid = (rstag_323to323_bb6_ld__staging_valid_NO_SHIFT_REG | rstag_323to323_bb6_ld__inputs_ready);
assign rstag_323to323_bb6_ld__valid_out = rstag_323to323_bb6_ld__combined_valid;
assign rstag_323to323_bb6_ld__stall_local = rstag_323to323_bb6_ld__stall_in;
assign local_bb6_ld__stall_in = (|rstag_323to323_bb6_ld__staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_323to323_bb6_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_323to323_bb6_ld__staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_323to323_bb6_ld__stall_local)
		begin
			if (~(rstag_323to323_bb6_ld__staging_valid_NO_SHIFT_REG))
			begin
				rstag_323to323_bb6_ld__staging_valid_NO_SHIFT_REG <= rstag_323to323_bb6_ld__inputs_ready;
			end
		end
		else
		begin
			rstag_323to323_bb6_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_323to323_bb6_ld__staging_valid_NO_SHIFT_REG))
		begin
			rstag_323to323_bb6_ld__staging_reg_NO_SHIFT_REG <= local_bb6_ld__NO_SHIFT_REG;
		end
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_0_NO_SHIFT_REG;
 reg branch_compare_result_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg lvb_cmp48_0_reg_NO_SHIFT_REG;
 reg lvb_var__0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_8_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c0_exe1_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c0_exe2_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_2_0_reg_NO_SHIFT_REG;
 reg lvb_cmp2122_0_reg_NO_SHIFT_REG;
 reg lvb_var__u12_0_reg_NO_SHIFT_REG;
 reg lvb__phi_decision77_xor_0_reg_NO_SHIFT_REG;
 reg lvb__phi_decision76_xor_or_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_channelCounter_049_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul50_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_heightCounter_141_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c3_exe1_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c3_exe2_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c1_exe1_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb6_c2_exe138_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb6_c2_exe237_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb6_ld__0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_0_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (rcnode_322to323_rc0_cmp48_0_valid_out_NO_SHIFT_REG & rstag_323to323_bb6_ld__valid_out);
assign branch_var__output_regs_ready = (~(branch_node_valid_out_0_NO_SHIFT_REG) | (((branch_compare_result_NO_SHIFT_REG != 1'b1) & ~(stall_in_1)) | (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & ~(stall_in_0))));
assign rcnode_322to323_rc0_cmp48_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rstag_323to323_bb6_ld__stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_cmp48_0 = lvb_cmp48_0_reg_NO_SHIFT_REG;
assign lvb_cmp48_1 = lvb_cmp48_0_reg_NO_SHIFT_REG;
assign lvb_var__0 = lvb_var__0_reg_NO_SHIFT_REG;
assign lvb_var__1 = lvb_var__0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_8_0 = lvb_memcoalesce_param_extrValue_8_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_8_1 = lvb_memcoalesce_param_extrValue_8_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_5_0 = lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_5_1 = lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6_0 = lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6_1 = lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG;
assign lvb_c0_exe1_0 = lvb_c0_exe1_0_reg_NO_SHIFT_REG;
assign lvb_c0_exe1_1 = lvb_c0_exe1_0_reg_NO_SHIFT_REG;
assign lvb_c0_exe2_0 = lvb_c0_exe2_0_reg_NO_SHIFT_REG;
assign lvb_c0_exe2_1 = lvb_c0_exe2_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_2_0 = lvb_memcoalesce_param_extrValue_2_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_2_1 = lvb_memcoalesce_param_extrValue_2_0_reg_NO_SHIFT_REG;
assign lvb_cmp2122_0 = lvb_cmp2122_0_reg_NO_SHIFT_REG;
assign lvb_cmp2122_1 = lvb_cmp2122_0_reg_NO_SHIFT_REG;
assign lvb_var__u12_0 = lvb_var__u12_0_reg_NO_SHIFT_REG;
assign lvb_var__u12_1 = lvb_var__u12_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision77_xor_0 = lvb__phi_decision77_xor_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision77_xor_1 = lvb__phi_decision77_xor_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision76_xor_or_0 = lvb__phi_decision76_xor_or_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision76_xor_or_1 = lvb__phi_decision76_xor_or_0_reg_NO_SHIFT_REG;
assign lvb_channelCounter_049_0 = lvb_channelCounter_049_0_reg_NO_SHIFT_REG;
assign lvb_channelCounter_049_1 = lvb_channelCounter_049_0_reg_NO_SHIFT_REG;
assign lvb_mul50_0 = lvb_mul50_0_reg_NO_SHIFT_REG;
assign lvb_mul50_1 = lvb_mul50_0_reg_NO_SHIFT_REG;
assign lvb_mul_0 = lvb_mul_0_reg_NO_SHIFT_REG;
assign lvb_mul_1 = lvb_mul_0_reg_NO_SHIFT_REG;
assign lvb_heightCounter_141_0 = lvb_heightCounter_141_0_reg_NO_SHIFT_REG;
assign lvb_heightCounter_141_1 = lvb_heightCounter_141_0_reg_NO_SHIFT_REG;
assign lvb_c3_exe1_0 = lvb_c3_exe1_0_reg_NO_SHIFT_REG;
assign lvb_c3_exe1_1 = lvb_c3_exe1_0_reg_NO_SHIFT_REG;
assign lvb_c3_exe2_0 = lvb_c3_exe2_0_reg_NO_SHIFT_REG;
assign lvb_c3_exe2_1 = lvb_c3_exe2_0_reg_NO_SHIFT_REG;
assign lvb_c1_exe1_0 = lvb_c1_exe1_0_reg_NO_SHIFT_REG;
assign lvb_c1_exe1_1 = lvb_c1_exe1_0_reg_NO_SHIFT_REG;
assign lvb_bb6_c2_exe138_0 = lvb_bb6_c2_exe138_0_reg_NO_SHIFT_REG;
assign lvb_bb6_c2_exe138_1 = lvb_bb6_c2_exe138_0_reg_NO_SHIFT_REG;
assign lvb_bb6_c2_exe237_0 = lvb_bb6_c2_exe237_0_reg_NO_SHIFT_REG;
assign lvb_bb6_c2_exe237_1 = lvb_bb6_c2_exe237_0_reg_NO_SHIFT_REG;
assign lvb_bb6_ld__0 = lvb_bb6_ld__0_reg_NO_SHIFT_REG;
assign lvb_bb6_ld__1 = lvb_bb6_ld__0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0_0 = lvb_input_global_id_0_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0_1 = lvb_input_global_id_0_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1_0 = lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1_1 = lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2_0 = lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2_1 = lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_0 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_1 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign valid_out_0 = (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG);
assign valid_out_1 = ((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG);
assign combined_branch_stall_in_signal = ((((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_1) | ((~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_0));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		lvb_cmp48_0_reg_NO_SHIFT_REG <= 'x;
		lvb_var__0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_8_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG <= 'x;
		lvb_c0_exe1_0_reg_NO_SHIFT_REG <= 'x;
		lvb_c0_exe2_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_2_0_reg_NO_SHIFT_REG <= 'x;
		lvb_cmp2122_0_reg_NO_SHIFT_REG <= 'x;
		lvb_var__u12_0_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision77_xor_0_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision76_xor_or_0_reg_NO_SHIFT_REG <= 'x;
		lvb_channelCounter_049_0_reg_NO_SHIFT_REG <= 'x;
		lvb_mul50_0_reg_NO_SHIFT_REG <= 'x;
		lvb_mul_0_reg_NO_SHIFT_REG <= 'x;
		lvb_heightCounter_141_0_reg_NO_SHIFT_REG <= 'x;
		lvb_c3_exe1_0_reg_NO_SHIFT_REG <= 'x;
		lvb_c3_exe2_0_reg_NO_SHIFT_REG <= 'x;
		lvb_c1_exe1_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb6_c2_exe138_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb6_c2_exe237_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb6_ld__0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_0_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= 'x;
		branch_compare_result_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_0_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_cmp48_0_reg_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[0];
			lvb_var__0_reg_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[1];
			lvb_memcoalesce_param_extrValue_8_0_reg_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[483:452];
			lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[33:2];
			lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[65:34];
			lvb_c0_exe1_0_reg_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[515:484];
			lvb_c0_exe2_0_reg_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[97:66];
			lvb_memcoalesce_param_extrValue_2_0_reg_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[129:98];
			lvb_cmp2122_0_reg_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[130];
			lvb_var__u12_0_reg_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[548];
			lvb__phi_decision77_xor_0_reg_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[549];
			lvb__phi_decision76_xor_or_0_reg_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[131];
			lvb_channelCounter_049_0_reg_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[163:132];
			lvb_mul50_0_reg_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[195:164];
			lvb_mul_0_reg_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[227:196];
			lvb_heightCounter_141_0_reg_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[259:228];
			lvb_c3_exe1_0_reg_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[291:260];
			lvb_c3_exe2_0_reg_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[547:516];
			lvb_c1_exe1_0_reg_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[323:292];
			lvb_bb6_c2_exe138_0_reg_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[581:550];
			lvb_bb6_c2_exe237_0_reg_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[613:582];
			lvb_bb6_ld__0_reg_NO_SHIFT_REG <= rstag_323to323_bb6_ld_;
			lvb_input_global_id_0_0_reg_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[355:324];
			lvb_input_global_id_1_0_reg_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[387:356];
			lvb_input_global_id_2_0_reg_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[419:388];
			lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[451:420];
			branch_compare_result_NO_SHIFT_REG <= rcnode_322to323_rc0_cmp48_0_NO_SHIFT_REG[614];
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module poolingLayer_basic_block_7
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_global_size_1,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_0,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_1,
		input 		valid_in,
		output 		stall_out,
		input 		input_cmp48,
		input 		input_var_,
		input [31:0] 		input_memcoalesce_param_extrValue_8,
		input [31:0] 		input_memcoalesce_param_extrValue_5,
		input [31:0] 		input_memcoalesce_param_extrValue_6,
		input [31:0] 		input_c0_exe1,
		input [31:0] 		input_c0_exe2,
		input [31:0] 		input_memcoalesce_param_extrValue_2,
		input 		input_cmp2122,
		input 		input_var__u18,
		input 		input__phi_decision77_xor,
		input 		input__phi_decision76_xor_or,
		input [31:0] 		input_channelCounter_049,
		input [31:0] 		input_mul50,
		input [31:0] 		input_mul,
		input [31:0] 		input_heightCounter_141,
		input [31:0] 		input_global_id_0,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out_0,
		input 		stall_in_0,
		output 		lvb_cmp48_0,
		output 		lvb_var__0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_8_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_5_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6_0,
		output [31:0] 		lvb_c0_exe1_0,
		output [31:0] 		lvb_c0_exe2_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_2_0,
		output 		lvb_cmp2122_0,
		output 		lvb_var__u18_0,
		output 		lvb__phi_decision77_xor_0,
		output 		lvb__phi_decision76_xor_or_0,
		output [31:0] 		lvb_channelCounter_049_0,
		output [31:0] 		lvb_mul50_0,
		output [31:0] 		lvb_mul_0,
		output [31:0] 		lvb_bb7_add65_0,
		output [31:0] 		lvb_input_global_id_0_0,
		output [31:0] 		lvb_input_global_id_1_0,
		output [31:0] 		lvb_input_global_id_2_0,
		output [31:0] 		lvb_input_acl_hw_wg_id_0,
		output 		valid_out_1,
		input 		stall_in_1,
		output 		lvb_cmp48_1,
		output 		lvb_var__1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_8_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_5_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6_1,
		output [31:0] 		lvb_c0_exe1_1,
		output [31:0] 		lvb_c0_exe2_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_2_1,
		output 		lvb_cmp2122_1,
		output 		lvb_var__u18_1,
		output 		lvb__phi_decision77_xor_1,
		output 		lvb__phi_decision76_xor_or_1,
		output [31:0] 		lvb_channelCounter_049_1,
		output [31:0] 		lvb_mul50_1,
		output [31:0] 		lvb_mul_1,
		output [31:0] 		lvb_bb7_add65_1,
		output [31:0] 		lvb_input_global_id_0_1,
		output [31:0] 		lvb_input_global_id_1_1,
		output [31:0] 		lvb_input_global_id_2_1,
		output [31:0] 		lvb_input_acl_hw_wg_id_1,
		input [31:0] 		workgroup_size,
		input 		start
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((valid_out_0 & valid_out_1) & ~((stall_in_0 | stall_in_1)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg input_cmp48_staging_reg_NO_SHIFT_REG;
 reg input_var__staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_8_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_5_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe2_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_2_staging_reg_NO_SHIFT_REG;
 reg input_cmp2122_staging_reg_NO_SHIFT_REG;
 reg input_var__u18_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision77_xor_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision76_xor_or_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_049_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul50_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_heightCounter_141_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg local_lvm_cmp48_NO_SHIFT_REG;
 reg local_lvm_var__NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
 reg [31:0] local_lvm_c0_exe1_NO_SHIFT_REG;
 reg [31:0] local_lvm_c0_exe2_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG;
 reg local_lvm_cmp2122_NO_SHIFT_REG;
 reg local_lvm_var__u18_NO_SHIFT_REG;
 reg local_lvm__phi_decision77_xor_NO_SHIFT_REG;
 reg local_lvm__phi_decision76_xor_or_NO_SHIFT_REG;
 reg [31:0] local_lvm_channelCounter_049_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul50_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul_NO_SHIFT_REG;
 reg [31:0] local_lvm_heightCounter_141_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_0_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_cmp48_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_8_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_5_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe1_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe2_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_2_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp2122_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u18_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision77_xor_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision76_xor_or_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_049_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul50_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul_staging_reg_NO_SHIFT_REG <= 'x;
		input_heightCounter_141_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_cmp48_staging_reg_NO_SHIFT_REG <= input_cmp48;
				input_var__staging_reg_NO_SHIFT_REG <= input_var_;
				input_memcoalesce_param_extrValue_8_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8;
				input_memcoalesce_param_extrValue_5_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5;
				input_memcoalesce_param_extrValue_6_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6;
				input_c0_exe1_staging_reg_NO_SHIFT_REG <= input_c0_exe1;
				input_c0_exe2_staging_reg_NO_SHIFT_REG <= input_c0_exe2;
				input_memcoalesce_param_extrValue_2_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2;
				input_cmp2122_staging_reg_NO_SHIFT_REG <= input_cmp2122;
				input_var__u18_staging_reg_NO_SHIFT_REG <= input_var__u18;
				input__phi_decision77_xor_staging_reg_NO_SHIFT_REG <= input__phi_decision77_xor;
				input__phi_decision76_xor_or_staging_reg_NO_SHIFT_REG <= input__phi_decision76_xor_or;
				input_channelCounter_049_staging_reg_NO_SHIFT_REG <= input_channelCounter_049;
				input_mul50_staging_reg_NO_SHIFT_REG <= input_mul50;
				input_mul_staging_reg_NO_SHIFT_REG <= input_mul;
				input_heightCounter_141_staging_reg_NO_SHIFT_REG <= input_heightCounter_141;
				input_global_id_0_staging_reg_NO_SHIFT_REG <= input_global_id_0;
				input_global_id_1_staging_reg_NO_SHIFT_REG <= input_global_id_1;
				input_global_id_2_staging_reg_NO_SHIFT_REG <= input_global_id_2;
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_cmp48_NO_SHIFT_REG <= input_cmp48_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe2_NO_SHIFT_REG <= input_c0_exe2_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp2122_NO_SHIFT_REG <= input_cmp2122_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u18_NO_SHIFT_REG <= input_var__u18_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision77_xor_NO_SHIFT_REG <= input__phi_decision77_xor_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision76_xor_or_NO_SHIFT_REG <= input__phi_decision76_xor_or_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_049_NO_SHIFT_REG <= input_channelCounter_049_staging_reg_NO_SHIFT_REG;
					local_lvm_mul50_NO_SHIFT_REG <= input_mul50_staging_reg_NO_SHIFT_REG;
					local_lvm_mul_NO_SHIFT_REG <= input_mul_staging_reg_NO_SHIFT_REG;
					local_lvm_heightCounter_141_NO_SHIFT_REG <= input_heightCounter_141_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_cmp48_NO_SHIFT_REG <= input_cmp48;
					local_lvm_var__NO_SHIFT_REG <= input_var_;
					local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1;
					local_lvm_c0_exe2_NO_SHIFT_REG <= input_c0_exe2;
					local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2;
					local_lvm_cmp2122_NO_SHIFT_REG <= input_cmp2122;
					local_lvm_var__u18_NO_SHIFT_REG <= input_var__u18;
					local_lvm__phi_decision77_xor_NO_SHIFT_REG <= input__phi_decision77_xor;
					local_lvm__phi_decision76_xor_or_NO_SHIFT_REG <= input__phi_decision76_xor_or;
					local_lvm_channelCounter_049_NO_SHIFT_REG <= input_channelCounter_049;
					local_lvm_mul50_NO_SHIFT_REG <= input_mul50;
					local_lvm_mul_NO_SHIFT_REG <= input_mul;
					local_lvm_heightCounter_141_NO_SHIFT_REG <= input_heightCounter_141;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb7_add65_valid_out;
wire local_bb7_add65_stall_in;
wire local_bb7_add65_inputs_ready;
wire local_bb7_add65_stall_local;
wire [31:0] local_bb7_add65;
wire [421:0] rci_rcnode_1to3_rc1_cmp48_0_reg_1;

assign local_bb7_add65_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb7_add65 = (local_lvm_heightCounter_141_NO_SHIFT_REG + input_global_size_1);
assign local_bb7_add65_valid_out = local_bb7_add65_inputs_ready;
assign local_bb7_add65_stall_local = local_bb7_add65_stall_in;
assign merge_node_stall_in_0 = (|local_bb7_add65_stall_local);
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[0] = local_lvm_cmp48_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[1] = local_lvm_var__NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[33:2] = local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[65:34] = local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[97:66] = local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[129:98] = local_lvm_c0_exe1_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[161:130] = local_lvm_c0_exe2_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[193:162] = local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[194] = local_lvm_cmp2122_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[195] = local_lvm_var__u18_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[196] = local_lvm__phi_decision77_xor_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[197] = local_lvm__phi_decision76_xor_or_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[229:198] = local_lvm_channelCounter_049_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[261:230] = local_lvm_mul50_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[293:262] = local_lvm_mul_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[325:294] = local_lvm_input_global_id_0_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[357:326] = local_lvm_input_global_id_1_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[389:358] = local_lvm_input_global_id_2_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[421:390] = local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rcnode_1to3_rc1_cmp48_0_valid_out_0_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp48_0_stall_in_0_NO_SHIFT_REG;
 logic [421:0] rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp48_0_valid_out_1_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp48_0_stall_in_1_NO_SHIFT_REG;
 logic [421:0] rcnode_1to3_rc1_cmp48_1_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp48_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [421:0] rcnode_1to3_rc1_cmp48_0_reg_3_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp48_0_valid_out_0_reg_3_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp48_0_stall_in_0_reg_3_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp48_0_stall_out_reg_3_IP_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp48_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rcnode_1to3_rc1_cmp48_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to3_rc1_cmp48_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to3_rc1_cmp48_0_stall_in_0_reg_3_NO_SHIFT_REG),
	.valid_out(rcnode_1to3_rc1_cmp48_0_valid_out_0_reg_3_NO_SHIFT_REG),
	.stall_out(rcnode_1to3_rc1_cmp48_0_stall_out_reg_3_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to3_rc1_cmp48_0_reg_1),
	.data_out(rcnode_1to3_rc1_cmp48_0_reg_3_NO_SHIFT_REG)
);

defparam rcnode_1to3_rc1_cmp48_0_reg_3_fifo.DEPTH = 3;
defparam rcnode_1to3_rc1_cmp48_0_reg_3_fifo.DATA_WIDTH = 422;
defparam rcnode_1to3_rc1_cmp48_0_reg_3_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to3_rc1_cmp48_0_reg_3_fifo.IMPL = "ll_reg";

assign rcnode_1to3_rc1_cmp48_0_reg_3_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_1_NO_SHIFT_REG;
assign rcnode_1to3_rc1_cmp48_0_stall_out_reg_3_NO_SHIFT_REG = (~(rcnode_1to3_rc1_cmp48_0_reg_3_inputs_ready_NO_SHIFT_REG) | rcnode_1to3_rc1_cmp48_0_stall_out_reg_3_IP_NO_SHIFT_REG);
assign merge_node_stall_in_1 = rcnode_1to3_rc1_cmp48_0_stall_out_reg_3_NO_SHIFT_REG;
assign rcnode_1to3_rc1_cmp48_0_stall_in_0_reg_3_NO_SHIFT_REG = (rcnode_1to3_rc1_cmp48_0_stall_in_0_NO_SHIFT_REG | rcnode_1to3_rc1_cmp48_0_stall_in_1_NO_SHIFT_REG);
assign rcnode_1to3_rc1_cmp48_0_valid_out_0_NO_SHIFT_REG = rcnode_1to3_rc1_cmp48_0_valid_out_0_reg_3_NO_SHIFT_REG;
assign rcnode_1to3_rc1_cmp48_0_valid_out_1_NO_SHIFT_REG = rcnode_1to3_rc1_cmp48_0_valid_out_0_reg_3_NO_SHIFT_REG;
assign rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG = rcnode_1to3_rc1_cmp48_0_reg_3_NO_SHIFT_REG;
assign rcnode_1to3_rc1_cmp48_1_NO_SHIFT_REG = rcnode_1to3_rc1_cmp48_0_reg_3_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb7_add65_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_bb7_add65_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb7_add65_0_NO_SHIFT_REG;
 logic rnode_1to2_bb7_add65_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_bb7_add65_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb7_add65_1_NO_SHIFT_REG;
 logic rnode_1to2_bb7_add65_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb7_add65_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb7_add65_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb7_add65_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb7_add65_0_stall_out_reg_2_NO_SHIFT_REG;
 reg rnode_1to2_bb7_add65_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to2_bb7_add65_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb7_add65_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb7_add65_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb7_add65_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb7_add65_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb7_add65_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb7_add65),
	.data_out(rnode_1to2_bb7_add65_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb7_add65_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb7_add65_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb7_add65_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb7_add65_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_bb7_add65_0_reg_2_inputs_ready_NO_SHIFT_REG = local_bb7_add65_valid_out;
assign local_bb7_add65_stall_in = rnode_1to2_bb7_add65_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb7_add65_0_stall_in_0_reg_2_NO_SHIFT_REG = ((rnode_1to2_bb7_add65_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to2_bb7_add65_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to2_bb7_add65_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to2_bb7_add65_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to2_bb7_add65_0_valid_out_0_NO_SHIFT_REG = (rnode_1to2_bb7_add65_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_bb7_add65_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_bb7_add65_0_valid_out_1_NO_SHIFT_REG = (rnode_1to2_bb7_add65_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_bb7_add65_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to2_bb7_add65_0_NO_SHIFT_REG = rnode_1to2_bb7_add65_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb7_add65_1_NO_SHIFT_REG = rnode_1to2_bb7_add65_0_reg_2_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to2_bb7_add65_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_bb7_add65_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to2_bb7_add65_0_consumed_0_NO_SHIFT_REG <= (rnode_1to2_bb7_add65_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_bb7_add65_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to2_bb7_add65_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to2_bb7_add65_0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_bb7_add65_0_consumed_1_NO_SHIFT_REG <= (rnode_1to2_bb7_add65_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_bb7_add65_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to2_bb7_add65_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to2_bb7_add65_0_stall_in_0_reg_2_NO_SHIFT_REG);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb7_cmp5_valid_out;
wire local_bb7_cmp5_stall_in;
wire local_bb7_cmp5_inputs_ready;
wire local_bb7_cmp5_stall_local;
wire local_bb7_cmp5;

assign local_bb7_cmp5_inputs_ready = rnode_1to2_bb7_add65_0_valid_out_0_NO_SHIFT_REG;
assign local_bb7_cmp5 = ($signed(rnode_1to2_bb7_add65_0_NO_SHIFT_REG) < $signed(input_wii_memcoalesce_param_extrValue_1));
assign local_bb7_cmp5_valid_out = local_bb7_cmp5_inputs_ready;
assign local_bb7_cmp5_stall_local = local_bb7_cmp5_stall_in;
assign rnode_1to2_bb7_add65_0_stall_in_0_NO_SHIFT_REG = (|local_bb7_cmp5_stall_local);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb7_add65_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb7_add65_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb7_add65_0_NO_SHIFT_REG;
 logic rnode_2to3_bb7_add65_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb7_add65_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb7_add65_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb7_add65_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb7_add65_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb7_add65_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb7_add65_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb7_add65_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb7_add65_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb7_add65_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb7_add65_1_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb7_add65_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb7_add65_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb7_add65_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb7_add65_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb7_add65_0_reg_3_fifo.IMPL = "ll_reg";

assign rnode_2to3_bb7_add65_0_reg_3_inputs_ready_NO_SHIFT_REG = rnode_1to2_bb7_add65_0_valid_out_1_NO_SHIFT_REG;
assign rnode_1to2_bb7_add65_0_stall_in_1_NO_SHIFT_REG = rnode_2to3_bb7_add65_0_stall_out_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb7_add65_0_NO_SHIFT_REG = rnode_2to3_bb7_add65_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb7_add65_0_stall_in_reg_3_NO_SHIFT_REG = rnode_2to3_bb7_add65_0_stall_in_NO_SHIFT_REG;
assign rnode_2to3_bb7_add65_0_valid_out_NO_SHIFT_REG = rnode_2to3_bb7_add65_0_valid_out_reg_3_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb7_cmp5_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb7_cmp5_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to3_bb7_cmp5_0_NO_SHIFT_REG;
 logic rnode_2to3_bb7_cmp5_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to3_bb7_cmp5_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb7_cmp5_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb7_cmp5_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb7_cmp5_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb7_cmp5_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb7_cmp5_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb7_cmp5_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb7_cmp5_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb7_cmp5_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb7_cmp5),
	.data_out(rnode_2to3_bb7_cmp5_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb7_cmp5_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb7_cmp5_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_2to3_bb7_cmp5_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb7_cmp5_0_reg_3_fifo.IMPL = "ll_reg";

assign rnode_2to3_bb7_cmp5_0_reg_3_inputs_ready_NO_SHIFT_REG = local_bb7_cmp5_valid_out;
assign local_bb7_cmp5_stall_in = rnode_2to3_bb7_cmp5_0_stall_out_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb7_cmp5_0_NO_SHIFT_REG = rnode_2to3_bb7_cmp5_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb7_cmp5_0_stall_in_reg_3_NO_SHIFT_REG = rnode_2to3_bb7_cmp5_0_stall_in_NO_SHIFT_REG;
assign rnode_2to3_bb7_cmp5_0_valid_out_NO_SHIFT_REG = rnode_2to3_bb7_cmp5_0_valid_out_reg_3_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb7_var__valid_out;
wire local_bb7_var__stall_in;
wire local_bb7_var__inputs_ready;
wire local_bb7_var__stall_local;
wire local_bb7_var_;

assign local_bb7_var__inputs_ready = (rnode_2to3_bb7_cmp5_0_valid_out_NO_SHIFT_REG & rcnode_1to3_rc1_cmp48_0_valid_out_1_NO_SHIFT_REG);
assign local_bb7_var_ = (rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[1] & rnode_2to3_bb7_cmp5_0_NO_SHIFT_REG);
assign local_bb7_var__valid_out = local_bb7_var__inputs_ready;
assign local_bb7_var__stall_local = local_bb7_var__stall_in;
assign rnode_2to3_bb7_cmp5_0_stall_in_NO_SHIFT_REG = (local_bb7_var__stall_local | ~(local_bb7_var__inputs_ready));
assign rcnode_1to3_rc1_cmp48_0_stall_in_1_NO_SHIFT_REG = (local_bb7_var__stall_local | ~(local_bb7_var__inputs_ready));

// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_0_NO_SHIFT_REG;
 reg branch_compare_result_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg lvb_cmp48_0_reg_NO_SHIFT_REG;
 reg lvb_var__0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_8_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c0_exe1_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c0_exe2_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_2_0_reg_NO_SHIFT_REG;
 reg lvb_cmp2122_0_reg_NO_SHIFT_REG;
 reg lvb_var__u18_0_reg_NO_SHIFT_REG;
 reg lvb__phi_decision77_xor_0_reg_NO_SHIFT_REG;
 reg lvb__phi_decision76_xor_or_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_channelCounter_049_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul50_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb7_add65_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_0_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb7_var__valid_out & rnode_2to3_bb7_add65_0_valid_out_NO_SHIFT_REG & rcnode_1to3_rc1_cmp48_0_valid_out_0_NO_SHIFT_REG);
assign branch_var__output_regs_ready = (~(branch_node_valid_out_0_NO_SHIFT_REG) | (((branch_compare_result_NO_SHIFT_REG != 1'b1) & ~(stall_in_1)) | (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & ~(stall_in_0))));
assign local_bb7_var__stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_2to3_bb7_add65_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_1to3_rc1_cmp48_0_stall_in_0_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_cmp48_0 = lvb_cmp48_0_reg_NO_SHIFT_REG;
assign lvb_cmp48_1 = lvb_cmp48_0_reg_NO_SHIFT_REG;
assign lvb_var__0 = lvb_var__0_reg_NO_SHIFT_REG;
assign lvb_var__1 = lvb_var__0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_8_0 = lvb_memcoalesce_param_extrValue_8_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_8_1 = lvb_memcoalesce_param_extrValue_8_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_5_0 = lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_5_1 = lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6_0 = lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6_1 = lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG;
assign lvb_c0_exe1_0 = lvb_c0_exe1_0_reg_NO_SHIFT_REG;
assign lvb_c0_exe1_1 = lvb_c0_exe1_0_reg_NO_SHIFT_REG;
assign lvb_c0_exe2_0 = lvb_c0_exe2_0_reg_NO_SHIFT_REG;
assign lvb_c0_exe2_1 = lvb_c0_exe2_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_2_0 = lvb_memcoalesce_param_extrValue_2_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_2_1 = lvb_memcoalesce_param_extrValue_2_0_reg_NO_SHIFT_REG;
assign lvb_cmp2122_0 = lvb_cmp2122_0_reg_NO_SHIFT_REG;
assign lvb_cmp2122_1 = lvb_cmp2122_0_reg_NO_SHIFT_REG;
assign lvb_var__u18_0 = lvb_var__u18_0_reg_NO_SHIFT_REG;
assign lvb_var__u18_1 = lvb_var__u18_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision77_xor_0 = lvb__phi_decision77_xor_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision77_xor_1 = lvb__phi_decision77_xor_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision76_xor_or_0 = lvb__phi_decision76_xor_or_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision76_xor_or_1 = lvb__phi_decision76_xor_or_0_reg_NO_SHIFT_REG;
assign lvb_channelCounter_049_0 = lvb_channelCounter_049_0_reg_NO_SHIFT_REG;
assign lvb_channelCounter_049_1 = lvb_channelCounter_049_0_reg_NO_SHIFT_REG;
assign lvb_mul50_0 = lvb_mul50_0_reg_NO_SHIFT_REG;
assign lvb_mul50_1 = lvb_mul50_0_reg_NO_SHIFT_REG;
assign lvb_mul_0 = lvb_mul_0_reg_NO_SHIFT_REG;
assign lvb_mul_1 = lvb_mul_0_reg_NO_SHIFT_REG;
assign lvb_bb7_add65_0 = lvb_bb7_add65_0_reg_NO_SHIFT_REG;
assign lvb_bb7_add65_1 = lvb_bb7_add65_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0_0 = lvb_input_global_id_0_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0_1 = lvb_input_global_id_0_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1_0 = lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1_1 = lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2_0 = lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2_1 = lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_0 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_1 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign valid_out_0 = (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG);
assign valid_out_1 = ((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG);
assign combined_branch_stall_in_signal = ((((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_1) | ((~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_0));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		lvb_cmp48_0_reg_NO_SHIFT_REG <= 'x;
		lvb_var__0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_8_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG <= 'x;
		lvb_c0_exe1_0_reg_NO_SHIFT_REG <= 'x;
		lvb_c0_exe2_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_2_0_reg_NO_SHIFT_REG <= 'x;
		lvb_cmp2122_0_reg_NO_SHIFT_REG <= 'x;
		lvb_var__u18_0_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision77_xor_0_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision76_xor_or_0_reg_NO_SHIFT_REG <= 'x;
		lvb_channelCounter_049_0_reg_NO_SHIFT_REG <= 'x;
		lvb_mul50_0_reg_NO_SHIFT_REG <= 'x;
		lvb_mul_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb7_add65_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_0_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= 'x;
		branch_compare_result_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_0_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_cmp48_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[0];
			lvb_var__0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[1];
			lvb_memcoalesce_param_extrValue_8_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[33:2];
			lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[65:34];
			lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[97:66];
			lvb_c0_exe1_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[129:98];
			lvb_c0_exe2_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[161:130];
			lvb_memcoalesce_param_extrValue_2_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[193:162];
			lvb_cmp2122_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[194];
			lvb_var__u18_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[195];
			lvb__phi_decision77_xor_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[196];
			lvb__phi_decision76_xor_or_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[197];
			lvb_channelCounter_049_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[229:198];
			lvb_mul50_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[261:230];
			lvb_mul_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[293:262];
			lvb_bb7_add65_0_reg_NO_SHIFT_REG <= rnode_2to3_bb7_add65_0_NO_SHIFT_REG;
			lvb_input_global_id_0_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[325:294];
			lvb_input_global_id_1_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[357:326];
			lvb_input_global_id_2_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[389:358];
			lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[421:390];
			branch_compare_result_NO_SHIFT_REG <= local_bb7_var_;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module poolingLayer_basic_block_8
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_global_size_0,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_0,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_1,
		input 		valid_in,
		output 		stall_out,
		input 		input_cmp48,
		input 		input_var_,
		input [31:0] 		input_memcoalesce_param_extrValue_8,
		input [31:0] 		input_memcoalesce_param_extrValue_5,
		input [31:0] 		input_memcoalesce_param_extrValue_6,
		input [31:0] 		input_c0_exe1,
		input [31:0] 		input_c0_exe2,
		input [31:0] 		input_memcoalesce_param_extrValue_2,
		input 		input_cmp2122,
		input 		input_var__u19,
		input 		input__phi_decision77_xor,
		input 		input__phi_decision76_xor_or,
		input [31:0] 		input_channelCounter_049,
		input [31:0] 		input_global_id_0,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out_0,
		input 		stall_in_0,
		output 		lvb_cmp48_0,
		output 		lvb_var__0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_8_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_5_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6_0,
		output [31:0] 		lvb_c0_exe1_0,
		output [31:0] 		lvb_c0_exe2_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_2_0,
		output 		lvb_cmp2122_0,
		output 		lvb_var__u19_0,
		output 		lvb__phi_decision77_xor_0,
		output 		lvb__phi_decision76_xor_or_0,
		output [31:0] 		lvb_bb8_add70_0,
		output [31:0] 		lvb_input_global_id_0_0,
		output [31:0] 		lvb_input_global_id_1_0,
		output [31:0] 		lvb_input_global_id_2_0,
		output [31:0] 		lvb_input_acl_hw_wg_id_0,
		output 		valid_out_1,
		input 		stall_in_1,
		output 		lvb_cmp48_1,
		output 		lvb_var__1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_8_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_5_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6_1,
		output [31:0] 		lvb_c0_exe1_1,
		output [31:0] 		lvb_c0_exe2_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_2_1,
		output 		lvb_cmp2122_1,
		output 		lvb_var__u19_1,
		output 		lvb__phi_decision77_xor_1,
		output 		lvb__phi_decision76_xor_or_1,
		output [31:0] 		lvb_bb8_add70_1,
		output [31:0] 		lvb_input_global_id_0_1,
		output [31:0] 		lvb_input_global_id_1_1,
		output [31:0] 		lvb_input_global_id_2_1,
		output [31:0] 		lvb_input_acl_hw_wg_id_1,
		input [31:0] 		workgroup_size,
		input 		start
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((valid_out_0 & valid_out_1) & ~((stall_in_0 | stall_in_1)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg input_cmp48_staging_reg_NO_SHIFT_REG;
 reg input_var__staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_8_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_5_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe2_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_2_staging_reg_NO_SHIFT_REG;
 reg input_cmp2122_staging_reg_NO_SHIFT_REG;
 reg input_var__u19_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision77_xor_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision76_xor_or_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_049_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg local_lvm_cmp48_NO_SHIFT_REG;
 reg local_lvm_var__NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
 reg [31:0] local_lvm_c0_exe1_NO_SHIFT_REG;
 reg [31:0] local_lvm_c0_exe2_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG;
 reg local_lvm_cmp2122_NO_SHIFT_REG;
 reg local_lvm_var__u19_NO_SHIFT_REG;
 reg local_lvm__phi_decision77_xor_NO_SHIFT_REG;
 reg local_lvm__phi_decision76_xor_or_NO_SHIFT_REG;
 reg [31:0] local_lvm_channelCounter_049_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_0_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_cmp48_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_8_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_5_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe1_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe2_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_2_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp2122_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u19_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision77_xor_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision76_xor_or_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_049_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_cmp48_staging_reg_NO_SHIFT_REG <= input_cmp48;
				input_var__staging_reg_NO_SHIFT_REG <= input_var_;
				input_memcoalesce_param_extrValue_8_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8;
				input_memcoalesce_param_extrValue_5_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5;
				input_memcoalesce_param_extrValue_6_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6;
				input_c0_exe1_staging_reg_NO_SHIFT_REG <= input_c0_exe1;
				input_c0_exe2_staging_reg_NO_SHIFT_REG <= input_c0_exe2;
				input_memcoalesce_param_extrValue_2_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2;
				input_cmp2122_staging_reg_NO_SHIFT_REG <= input_cmp2122;
				input_var__u19_staging_reg_NO_SHIFT_REG <= input_var__u19;
				input__phi_decision77_xor_staging_reg_NO_SHIFT_REG <= input__phi_decision77_xor;
				input__phi_decision76_xor_or_staging_reg_NO_SHIFT_REG <= input__phi_decision76_xor_or;
				input_channelCounter_049_staging_reg_NO_SHIFT_REG <= input_channelCounter_049;
				input_global_id_0_staging_reg_NO_SHIFT_REG <= input_global_id_0;
				input_global_id_1_staging_reg_NO_SHIFT_REG <= input_global_id_1;
				input_global_id_2_staging_reg_NO_SHIFT_REG <= input_global_id_2;
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_cmp48_NO_SHIFT_REG <= input_cmp48_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe2_NO_SHIFT_REG <= input_c0_exe2_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp2122_NO_SHIFT_REG <= input_cmp2122_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u19_NO_SHIFT_REG <= input_var__u19_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision77_xor_NO_SHIFT_REG <= input__phi_decision77_xor_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision76_xor_or_NO_SHIFT_REG <= input__phi_decision76_xor_or_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_049_NO_SHIFT_REG <= input_channelCounter_049_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_cmp48_NO_SHIFT_REG <= input_cmp48;
					local_lvm_var__NO_SHIFT_REG <= input_var_;
					local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_8;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1;
					local_lvm_c0_exe2_NO_SHIFT_REG <= input_c0_exe2;
					local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_2;
					local_lvm_cmp2122_NO_SHIFT_REG <= input_cmp2122;
					local_lvm_var__u19_NO_SHIFT_REG <= input_var__u19;
					local_lvm__phi_decision77_xor_NO_SHIFT_REG <= input__phi_decision77_xor;
					local_lvm__phi_decision76_xor_or_NO_SHIFT_REG <= input__phi_decision76_xor_or;
					local_lvm_channelCounter_049_NO_SHIFT_REG <= input_channelCounter_049;
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb8_add70_valid_out;
wire local_bb8_add70_stall_in;
wire local_bb8_add70_inputs_ready;
wire local_bb8_add70_stall_local;
wire [31:0] local_bb8_add70;
wire [325:0] rci_rcnode_1to3_rc1_cmp48_0_reg_1;

assign local_bb8_add70_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb8_add70 = (local_lvm_channelCounter_049_NO_SHIFT_REG + input_global_size_0);
assign local_bb8_add70_valid_out = local_bb8_add70_inputs_ready;
assign local_bb8_add70_stall_local = local_bb8_add70_stall_in;
assign merge_node_stall_in_0 = (|local_bb8_add70_stall_local);
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[0] = local_lvm_cmp48_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[1] = local_lvm_var__NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[33:2] = local_lvm_memcoalesce_param_extrValue_8_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[65:34] = local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[97:66] = local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[129:98] = local_lvm_c0_exe1_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[161:130] = local_lvm_c0_exe2_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[193:162] = local_lvm_memcoalesce_param_extrValue_2_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[194] = local_lvm_cmp2122_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[195] = local_lvm_var__u19_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[196] = local_lvm__phi_decision77_xor_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[197] = local_lvm__phi_decision76_xor_or_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[229:198] = local_lvm_input_global_id_0_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[261:230] = local_lvm_input_global_id_1_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[293:262] = local_lvm_input_global_id_2_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp48_0_reg_1[325:294] = local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rcnode_1to3_rc1_cmp48_0_valid_out_0_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp48_0_stall_in_0_NO_SHIFT_REG;
 logic [325:0] rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp48_0_valid_out_1_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp48_0_stall_in_1_NO_SHIFT_REG;
 logic [325:0] rcnode_1to3_rc1_cmp48_1_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp48_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [325:0] rcnode_1to3_rc1_cmp48_0_reg_3_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp48_0_valid_out_0_reg_3_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp48_0_stall_in_0_reg_3_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp48_0_stall_out_reg_3_IP_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp48_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rcnode_1to3_rc1_cmp48_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to3_rc1_cmp48_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to3_rc1_cmp48_0_stall_in_0_reg_3_NO_SHIFT_REG),
	.valid_out(rcnode_1to3_rc1_cmp48_0_valid_out_0_reg_3_NO_SHIFT_REG),
	.stall_out(rcnode_1to3_rc1_cmp48_0_stall_out_reg_3_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to3_rc1_cmp48_0_reg_1),
	.data_out(rcnode_1to3_rc1_cmp48_0_reg_3_NO_SHIFT_REG)
);

defparam rcnode_1to3_rc1_cmp48_0_reg_3_fifo.DEPTH = 3;
defparam rcnode_1to3_rc1_cmp48_0_reg_3_fifo.DATA_WIDTH = 326;
defparam rcnode_1to3_rc1_cmp48_0_reg_3_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to3_rc1_cmp48_0_reg_3_fifo.IMPL = "ll_reg";

assign rcnode_1to3_rc1_cmp48_0_reg_3_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_1_NO_SHIFT_REG;
assign rcnode_1to3_rc1_cmp48_0_stall_out_reg_3_NO_SHIFT_REG = (~(rcnode_1to3_rc1_cmp48_0_reg_3_inputs_ready_NO_SHIFT_REG) | rcnode_1to3_rc1_cmp48_0_stall_out_reg_3_IP_NO_SHIFT_REG);
assign merge_node_stall_in_1 = rcnode_1to3_rc1_cmp48_0_stall_out_reg_3_NO_SHIFT_REG;
assign rcnode_1to3_rc1_cmp48_0_stall_in_0_reg_3_NO_SHIFT_REG = (rcnode_1to3_rc1_cmp48_0_stall_in_0_NO_SHIFT_REG | rcnode_1to3_rc1_cmp48_0_stall_in_1_NO_SHIFT_REG);
assign rcnode_1to3_rc1_cmp48_0_valid_out_0_NO_SHIFT_REG = rcnode_1to3_rc1_cmp48_0_valid_out_0_reg_3_NO_SHIFT_REG;
assign rcnode_1to3_rc1_cmp48_0_valid_out_1_NO_SHIFT_REG = rcnode_1to3_rc1_cmp48_0_valid_out_0_reg_3_NO_SHIFT_REG;
assign rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG = rcnode_1to3_rc1_cmp48_0_reg_3_NO_SHIFT_REG;
assign rcnode_1to3_rc1_cmp48_1_NO_SHIFT_REG = rcnode_1to3_rc1_cmp48_0_reg_3_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb8_add70_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_bb8_add70_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb8_add70_0_NO_SHIFT_REG;
 logic rnode_1to2_bb8_add70_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_bb8_add70_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb8_add70_1_NO_SHIFT_REG;
 logic rnode_1to2_bb8_add70_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb8_add70_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb8_add70_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb8_add70_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb8_add70_0_stall_out_reg_2_NO_SHIFT_REG;
 reg rnode_1to2_bb8_add70_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to2_bb8_add70_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb8_add70_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb8_add70_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb8_add70_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb8_add70_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb8_add70_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb8_add70),
	.data_out(rnode_1to2_bb8_add70_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb8_add70_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb8_add70_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb8_add70_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb8_add70_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_bb8_add70_0_reg_2_inputs_ready_NO_SHIFT_REG = local_bb8_add70_valid_out;
assign local_bb8_add70_stall_in = rnode_1to2_bb8_add70_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb8_add70_0_stall_in_0_reg_2_NO_SHIFT_REG = ((rnode_1to2_bb8_add70_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to2_bb8_add70_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to2_bb8_add70_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to2_bb8_add70_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to2_bb8_add70_0_valid_out_0_NO_SHIFT_REG = (rnode_1to2_bb8_add70_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_bb8_add70_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_bb8_add70_0_valid_out_1_NO_SHIFT_REG = (rnode_1to2_bb8_add70_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_bb8_add70_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to2_bb8_add70_0_NO_SHIFT_REG = rnode_1to2_bb8_add70_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb8_add70_1_NO_SHIFT_REG = rnode_1to2_bb8_add70_0_reg_2_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to2_bb8_add70_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_bb8_add70_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to2_bb8_add70_0_consumed_0_NO_SHIFT_REG <= (rnode_1to2_bb8_add70_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_bb8_add70_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to2_bb8_add70_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to2_bb8_add70_0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_bb8_add70_0_consumed_1_NO_SHIFT_REG <= (rnode_1to2_bb8_add70_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_bb8_add70_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to2_bb8_add70_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to2_bb8_add70_0_stall_in_0_reg_2_NO_SHIFT_REG);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb8_cmp_valid_out;
wire local_bb8_cmp_stall_in;
wire local_bb8_cmp_inputs_ready;
wire local_bb8_cmp_stall_local;
wire local_bb8_cmp;

assign local_bb8_cmp_inputs_ready = rnode_1to2_bb8_add70_0_valid_out_0_NO_SHIFT_REG;
assign local_bb8_cmp = ($signed(rnode_1to2_bb8_add70_0_NO_SHIFT_REG) < $signed(input_wii_memcoalesce_param_extrValue_0));
assign local_bb8_cmp_valid_out = local_bb8_cmp_inputs_ready;
assign local_bb8_cmp_stall_local = local_bb8_cmp_stall_in;
assign rnode_1to2_bb8_add70_0_stall_in_0_NO_SHIFT_REG = (|local_bb8_cmp_stall_local);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb8_add70_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb8_add70_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb8_add70_0_NO_SHIFT_REG;
 logic rnode_2to3_bb8_add70_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb8_add70_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb8_add70_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb8_add70_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb8_add70_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb8_add70_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb8_add70_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb8_add70_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb8_add70_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb8_add70_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb8_add70_1_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb8_add70_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb8_add70_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb8_add70_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb8_add70_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb8_add70_0_reg_3_fifo.IMPL = "ll_reg";

assign rnode_2to3_bb8_add70_0_reg_3_inputs_ready_NO_SHIFT_REG = rnode_1to2_bb8_add70_0_valid_out_1_NO_SHIFT_REG;
assign rnode_1to2_bb8_add70_0_stall_in_1_NO_SHIFT_REG = rnode_2to3_bb8_add70_0_stall_out_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb8_add70_0_NO_SHIFT_REG = rnode_2to3_bb8_add70_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb8_add70_0_stall_in_reg_3_NO_SHIFT_REG = rnode_2to3_bb8_add70_0_stall_in_NO_SHIFT_REG;
assign rnode_2to3_bb8_add70_0_valid_out_NO_SHIFT_REG = rnode_2to3_bb8_add70_0_valid_out_reg_3_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb8_cmp_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb8_cmp_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to3_bb8_cmp_0_NO_SHIFT_REG;
 logic rnode_2to3_bb8_cmp_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to3_bb8_cmp_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb8_cmp_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb8_cmp_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb8_cmp_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb8_cmp_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb8_cmp_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb8_cmp_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb8_cmp_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb8_cmp_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb8_cmp),
	.data_out(rnode_2to3_bb8_cmp_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb8_cmp_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb8_cmp_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_2to3_bb8_cmp_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb8_cmp_0_reg_3_fifo.IMPL = "ll_reg";

assign rnode_2to3_bb8_cmp_0_reg_3_inputs_ready_NO_SHIFT_REG = local_bb8_cmp_valid_out;
assign local_bb8_cmp_stall_in = rnode_2to3_bb8_cmp_0_stall_out_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb8_cmp_0_NO_SHIFT_REG = rnode_2to3_bb8_cmp_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb8_cmp_0_stall_in_reg_3_NO_SHIFT_REG = rnode_2to3_bb8_cmp_0_stall_in_NO_SHIFT_REG;
assign rnode_2to3_bb8_cmp_0_valid_out_NO_SHIFT_REG = rnode_2to3_bb8_cmp_0_valid_out_reg_3_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb8_var__valid_out;
wire local_bb8_var__stall_in;
wire local_bb8_var__inputs_ready;
wire local_bb8_var__stall_local;
wire local_bb8_var_;

assign local_bb8_var__inputs_ready = (rnode_2to3_bb8_cmp_0_valid_out_NO_SHIFT_REG & rcnode_1to3_rc1_cmp48_0_valid_out_0_NO_SHIFT_REG);
assign local_bb8_var_ = (rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[0] & rnode_2to3_bb8_cmp_0_NO_SHIFT_REG);
assign local_bb8_var__valid_out = local_bb8_var__inputs_ready;
assign local_bb8_var__stall_local = local_bb8_var__stall_in;
assign rnode_2to3_bb8_cmp_0_stall_in_NO_SHIFT_REG = (local_bb8_var__stall_local | ~(local_bb8_var__inputs_ready));
assign rcnode_1to3_rc1_cmp48_0_stall_in_0_NO_SHIFT_REG = (local_bb8_var__stall_local | ~(local_bb8_var__inputs_ready));

// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_0_NO_SHIFT_REG;
 reg branch_compare_result_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg lvb_cmp48_0_reg_NO_SHIFT_REG;
 reg lvb_var__0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_8_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c0_exe1_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c0_exe2_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_2_0_reg_NO_SHIFT_REG;
 reg lvb_cmp2122_0_reg_NO_SHIFT_REG;
 reg lvb_var__u19_0_reg_NO_SHIFT_REG;
 reg lvb__phi_decision77_xor_0_reg_NO_SHIFT_REG;
 reg lvb__phi_decision76_xor_or_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb8_add70_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_0_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb8_var__valid_out & rnode_2to3_bb8_add70_0_valid_out_NO_SHIFT_REG & rcnode_1to3_rc1_cmp48_0_valid_out_1_NO_SHIFT_REG);
assign branch_var__output_regs_ready = (~(branch_node_valid_out_0_NO_SHIFT_REG) | (((branch_compare_result_NO_SHIFT_REG != 1'b1) & ~(stall_in_1)) | (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & ~(stall_in_0))));
assign local_bb8_var__stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_2to3_bb8_add70_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_1to3_rc1_cmp48_0_stall_in_1_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_cmp48_0 = lvb_cmp48_0_reg_NO_SHIFT_REG;
assign lvb_cmp48_1 = lvb_cmp48_0_reg_NO_SHIFT_REG;
assign lvb_var__0 = lvb_var__0_reg_NO_SHIFT_REG;
assign lvb_var__1 = lvb_var__0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_8_0 = lvb_memcoalesce_param_extrValue_8_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_8_1 = lvb_memcoalesce_param_extrValue_8_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_5_0 = lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_5_1 = lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6_0 = lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6_1 = lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG;
assign lvb_c0_exe1_0 = lvb_c0_exe1_0_reg_NO_SHIFT_REG;
assign lvb_c0_exe1_1 = lvb_c0_exe1_0_reg_NO_SHIFT_REG;
assign lvb_c0_exe2_0 = lvb_c0_exe2_0_reg_NO_SHIFT_REG;
assign lvb_c0_exe2_1 = lvb_c0_exe2_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_2_0 = lvb_memcoalesce_param_extrValue_2_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_2_1 = lvb_memcoalesce_param_extrValue_2_0_reg_NO_SHIFT_REG;
assign lvb_cmp2122_0 = lvb_cmp2122_0_reg_NO_SHIFT_REG;
assign lvb_cmp2122_1 = lvb_cmp2122_0_reg_NO_SHIFT_REG;
assign lvb_var__u19_0 = lvb_var__u19_0_reg_NO_SHIFT_REG;
assign lvb_var__u19_1 = lvb_var__u19_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision77_xor_0 = lvb__phi_decision77_xor_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision77_xor_1 = lvb__phi_decision77_xor_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision76_xor_or_0 = lvb__phi_decision76_xor_or_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision76_xor_or_1 = lvb__phi_decision76_xor_or_0_reg_NO_SHIFT_REG;
assign lvb_bb8_add70_0 = lvb_bb8_add70_0_reg_NO_SHIFT_REG;
assign lvb_bb8_add70_1 = lvb_bb8_add70_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0_0 = lvb_input_global_id_0_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0_1 = lvb_input_global_id_0_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1_0 = lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1_1 = lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2_0 = lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2_1 = lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_0 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_1 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign valid_out_0 = (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG);
assign valid_out_1 = ((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG);
assign combined_branch_stall_in_signal = ((((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_1) | ((~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_0));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		lvb_cmp48_0_reg_NO_SHIFT_REG <= 'x;
		lvb_var__0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_8_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG <= 'x;
		lvb_c0_exe1_0_reg_NO_SHIFT_REG <= 'x;
		lvb_c0_exe2_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_2_0_reg_NO_SHIFT_REG <= 'x;
		lvb_cmp2122_0_reg_NO_SHIFT_REG <= 'x;
		lvb_var__u19_0_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision77_xor_0_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision76_xor_or_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb8_add70_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_0_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= 'x;
		branch_compare_result_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_0_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_cmp48_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[0];
			lvb_var__0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[1];
			lvb_memcoalesce_param_extrValue_8_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[33:2];
			lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[65:34];
			lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[97:66];
			lvb_c0_exe1_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[129:98];
			lvb_c0_exe2_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[161:130];
			lvb_memcoalesce_param_extrValue_2_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[193:162];
			lvb_cmp2122_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[194];
			lvb_var__u19_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[195];
			lvb__phi_decision77_xor_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[196];
			lvb__phi_decision76_xor_or_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[197];
			lvb_bb8_add70_0_reg_NO_SHIFT_REG <= rnode_2to3_bb8_add70_0_NO_SHIFT_REG;
			lvb_input_global_id_0_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[229:198];
			lvb_input_global_id_1_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[261:230];
			lvb_input_global_id_2_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[293:262];
			lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp48_0_NO_SHIFT_REG[325:294];
			branch_compare_result_NO_SHIFT_REG <= local_bb8_var_;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module poolingLayer_basic_block_9
	(
		input 		clock,
		input 		resetn,
		input 		valid_in,
		output 		stall_out,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out,
		input 		stall_in,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		input 		start
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in;
 reg merge_node_valid_out_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = (|(merge_node_stall_in & merge_node_valid_out_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in))
			begin
				merge_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
wire branch_var__output_regs_ready;

assign branch_var__inputs_ready = merge_node_valid_out_NO_SHIFT_REG;
assign branch_var__output_regs_ready = ~(stall_in);
assign merge_node_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign valid_out = branch_var__inputs_ready;
assign lvb_input_acl_hw_wg_id = local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;

endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module poolingLayer_function
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_global_id_0,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		stall_out,
		input 		valid_in,
		output [31:0] 		output_0,
		output 		valid_out,
		input 		stall_in,
		input [31:0] 		workgroup_size,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_enable,
		input [511:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_readdata,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_readdatavalid,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_waitrequest,
		output [31:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_address,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_read,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_write,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_writeack,
		output [511:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_writedata,
		output [63:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_byteenable,
		output [4:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_burstcount,
		output 		avm_local_bb1_ld_memcoalesce_param_load_093_enable,
		input [511:0] 		avm_local_bb1_ld_memcoalesce_param_load_093_readdata,
		input 		avm_local_bb1_ld_memcoalesce_param_load_093_readdatavalid,
		input 		avm_local_bb1_ld_memcoalesce_param_load_093_waitrequest,
		output [31:0] 		avm_local_bb1_ld_memcoalesce_param_load_093_address,
		output 		avm_local_bb1_ld_memcoalesce_param_load_093_read,
		output 		avm_local_bb1_ld_memcoalesce_param_load_093_write,
		input 		avm_local_bb1_ld_memcoalesce_param_load_093_writeack,
		output [511:0] 		avm_local_bb1_ld_memcoalesce_param_load_093_writedata,
		output [63:0] 		avm_local_bb1_ld_memcoalesce_param_load_093_byteenable,
		output [4:0] 		avm_local_bb1_ld_memcoalesce_param_load_093_burstcount,
		output 		avm_local_bb3_ld__enable,
		input [511:0] 		avm_local_bb3_ld__readdata,
		input 		avm_local_bb3_ld__readdatavalid,
		input 		avm_local_bb3_ld__waitrequest,
		output [31:0] 		avm_local_bb3_ld__address,
		output 		avm_local_bb3_ld__read,
		output 		avm_local_bb3_ld__write,
		input 		avm_local_bb3_ld__writeack,
		output [511:0] 		avm_local_bb3_ld__writedata,
		output [63:0] 		avm_local_bb3_ld__byteenable,
		output [4:0] 		avm_local_bb3_ld__burstcount,
		output 		avm_local_bb5_ld__enable,
		input [511:0] 		avm_local_bb5_ld__readdata,
		input 		avm_local_bb5_ld__readdatavalid,
		input 		avm_local_bb5_ld__waitrequest,
		output [31:0] 		avm_local_bb5_ld__address,
		output 		avm_local_bb5_ld__read,
		output 		avm_local_bb5_ld__write,
		input 		avm_local_bb5_ld__writeack,
		output [511:0] 		avm_local_bb5_ld__writedata,
		output [63:0] 		avm_local_bb5_ld__byteenable,
		output [4:0] 		avm_local_bb5_ld__burstcount,
		output 		avm_local_bb6_st_select55_enable,
		input [511:0] 		avm_local_bb6_st_select55_readdata,
		input 		avm_local_bb6_st_select55_readdatavalid,
		input 		avm_local_bb6_st_select55_waitrequest,
		output [31:0] 		avm_local_bb6_st_select55_address,
		output 		avm_local_bb6_st_select55_read,
		output 		avm_local_bb6_st_select55_write,
		input 		avm_local_bb6_st_select55_writeack,
		output [511:0] 		avm_local_bb6_st_select55_writedata,
		output [63:0] 		avm_local_bb6_st_select55_byteenable,
		output [4:0] 		avm_local_bb6_st_select55_burstcount,
		output 		avm_local_bb6_ld__enable,
		input [511:0] 		avm_local_bb6_ld__readdata,
		input 		avm_local_bb6_ld__readdatavalid,
		input 		avm_local_bb6_ld__waitrequest,
		output [31:0] 		avm_local_bb6_ld__address,
		output 		avm_local_bb6_ld__read,
		output 		avm_local_bb6_ld__write,
		input 		avm_local_bb6_ld__writeack,
		output [511:0] 		avm_local_bb6_ld__writedata,
		output [63:0] 		avm_local_bb6_ld__byteenable,
		output [4:0] 		avm_local_bb6_ld__burstcount,
		input 		clock2x,
		input 		start,
		input [63:0] 		input_param,
		input [63:0] 		input_inputFeatureMap,
		input [31:0] 		input_global_size_2,
		input [63:0] 		input_outputFeatureMap,
		input [31:0] 		input_global_size_1,
		input [31:0] 		input_global_size_0,
		output reg 		has_a_write_pending,
		output reg 		has_a_lsu_active
	);


wire [31:0] cur_cycle;
wire bb_0_stall_out;
wire bb_0_valid_out;
wire [31:0] bb_0_lvb_bb0_memcoalesce_param_extrValue_0;
wire [31:0] bb_0_lvb_bb0_memcoalesce_param_extrValue_1;
wire [63:0] bb_0_lvb_bb0_memcoalesce_param_bitcast_092;
wire [31:0] bb_0_lvb_input_global_id_0;
wire [31:0] bb_0_lvb_input_global_id_1;
wire [31:0] bb_0_lvb_input_global_id_2;
wire [31:0] bb_0_lvb_input_acl_hw_wg_id;
wire bb_0_local_bb0_ld_memcoalesce_param_load_0_active;
wire bb_1_stall_out;
wire bb_1_valid_out;
wire bb_1_lvb_bb1_cmp48;
wire bb_1_lvb_bb1_var_;
wire [31:0] bb_1_lvb_bb1_memcoalesce_param_extrValue_8;
wire [31:0] bb_1_lvb_bb1_memcoalesce_param_extrValue_5;
wire [31:0] bb_1_lvb_bb1_memcoalesce_param_extrValue_6;
wire [31:0] bb_1_lvb_bb1_c0_exe1;
wire [31:0] bb_1_lvb_bb1_c0_exe2;
wire [31:0] bb_1_lvb_bb1_memcoalesce_param_extrValue_2;
wire bb_1_lvb_bb1_cmp2122;
wire bb_1_lvb_bb1_var__u0;
wire bb_1_lvb_bb1__phi_decision77_xor;
wire bb_1_lvb_bb1__phi_decision76_xor_or;
wire [31:0] bb_1_lvb_input_global_id_0;
wire [31:0] bb_1_lvb_input_global_id_1;
wire [31:0] bb_1_lvb_input_global_id_2;
wire [31:0] bb_1_lvb_input_acl_hw_wg_id;
wire bb_1_local_bb1_ld_memcoalesce_param_load_093_active;
wire bb_2_stall_out_0;
wire bb_2_stall_out_1;
wire bb_2_valid_out;
wire bb_2_lvb_cmp48;
wire bb_2_lvb_var_;
wire [31:0] bb_2_lvb_memcoalesce_param_extrValue_8;
wire [31:0] bb_2_lvb_memcoalesce_param_extrValue_5;
wire [31:0] bb_2_lvb_memcoalesce_param_extrValue_6;
wire [31:0] bb_2_lvb_c0_exe1;
wire [31:0] bb_2_lvb_c0_exe2;
wire [31:0] bb_2_lvb_memcoalesce_param_extrValue_2;
wire bb_2_lvb_cmp2122;
wire bb_2_lvb_var__u2;
wire bb_2_lvb__phi_decision77_xor;
wire bb_2_lvb__phi_decision76_xor_or;
wire [31:0] bb_2_lvb_channelCounter_049;
wire [31:0] bb_2_lvb_bb2_mul50;
wire [31:0] bb_2_lvb_bb2_mul;
wire [31:0] bb_2_lvb_input_global_id_0;
wire [31:0] bb_2_lvb_input_global_id_1;
wire [31:0] bb_2_lvb_input_global_id_2;
wire [31:0] bb_2_lvb_input_acl_hw_wg_id;
wire bb_3_stall_out_0;
wire bb_3_stall_out_1;
wire bb_3_valid_out;
wire bb_3_lvb_cmp48;
wire bb_3_lvb_var_;
wire [31:0] bb_3_lvb_memcoalesce_param_extrValue_8;
wire [31:0] bb_3_lvb_memcoalesce_param_extrValue_5;
wire [31:0] bb_3_lvb_memcoalesce_param_extrValue_6;
wire [31:0] bb_3_lvb_c0_exe1;
wire [31:0] bb_3_lvb_c0_exe2;
wire [31:0] bb_3_lvb_memcoalesce_param_extrValue_2;
wire bb_3_lvb_cmp2122;
wire bb_3_lvb_var__u3;
wire bb_3_lvb__phi_decision77_xor;
wire bb_3_lvb__phi_decision76_xor_or;
wire [31:0] bb_3_lvb_channelCounter_049;
wire [31:0] bb_3_lvb_mul50;
wire [31:0] bb_3_lvb_mul;
wire [31:0] bb_3_lvb_heightCounter_141;
wire [31:0] bb_3_lvb_bb3_c3_exe1;
wire [31:0] bb_3_lvb_bb3_c3_exe2;
wire [31:0] bb_3_lvb_bb3_c1_exe1;
wire [31:0] bb_3_lvb_bb3_ld_;
wire [31:0] bb_3_lvb_input_global_id_0;
wire [31:0] bb_3_lvb_input_global_id_1;
wire [31:0] bb_3_lvb_input_global_id_2;
wire [31:0] bb_3_lvb_input_acl_hw_wg_id;
wire bb_3_local_bb3_ld__active;
wire bb_4_stall_out_0;
wire bb_4_stall_out_1;
wire bb_4_valid_out;
wire bb_4_lvb_cmp48;
wire bb_4_lvb_var_;
wire [31:0] bb_4_lvb_memcoalesce_param_extrValue_8;
wire [31:0] bb_4_lvb_memcoalesce_param_extrValue_5;
wire [31:0] bb_4_lvb_memcoalesce_param_extrValue_6;
wire [31:0] bb_4_lvb_c0_exe1;
wire [31:0] bb_4_lvb_c0_exe2;
wire [31:0] bb_4_lvb_memcoalesce_param_extrValue_2;
wire bb_4_lvb_cmp2122;
wire bb_4_lvb_var__u6;
wire bb_4_lvb__phi_decision77_xor;
wire bb_4_lvb__phi_decision76_xor_or;
wire [31:0] bb_4_lvb_channelCounter_049;
wire [31:0] bb_4_lvb_mul50;
wire [31:0] bb_4_lvb_mul;
wire [31:0] bb_4_lvb_heightCounter_141;
wire [31:0] bb_4_lvb_c3_exe1;
wire [31:0] bb_4_lvb_c3_exe2;
wire [31:0] bb_4_lvb_c1_exe1;
wire [31:0] bb_4_lvb_widthCounter_232;
wire [31:0] bb_4_lvb_var__u7;
wire [31:0] bb_4_lvb_var__u8;
wire [31:0] bb_4_lvb_input_global_id_0;
wire [31:0] bb_4_lvb_input_global_id_1;
wire [31:0] bb_4_lvb_input_global_id_2;
wire [31:0] bb_4_lvb_input_acl_hw_wg_id;
wire bb_5_stall_out_0;
wire bb_5_stall_out_1;
wire bb_5_valid_out_0;
wire bb_5_lvb_cmp48_0;
wire bb_5_lvb_var__0;
wire [31:0] bb_5_lvb_memcoalesce_param_extrValue_8_0;
wire [31:0] bb_5_lvb_memcoalesce_param_extrValue_5_0;
wire [31:0] bb_5_lvb_memcoalesce_param_extrValue_6_0;
wire [31:0] bb_5_lvb_c0_exe1_0;
wire [31:0] bb_5_lvb_c0_exe2_0;
wire [31:0] bb_5_lvb_memcoalesce_param_extrValue_2_0;
wire bb_5_lvb_cmp2122_0;
wire bb_5_lvb_var__u9_0;
wire bb_5_lvb__phi_decision77_xor_0;
wire bb_5_lvb__phi_decision76_xor_or_0;
wire [31:0] bb_5_lvb_channelCounter_049_0;
wire [31:0] bb_5_lvb_mul50_0;
wire [31:0] bb_5_lvb_mul_0;
wire [31:0] bb_5_lvb_heightCounter_141_0;
wire [31:0] bb_5_lvb_c3_exe1_0;
wire [31:0] bb_5_lvb_c3_exe2_0;
wire [31:0] bb_5_lvb_c1_exe1_0;
wire [31:0] bb_5_lvb_widthCounter_232_0;
wire [31:0] bb_5_lvb_var__u10_0;
wire [31:0] bb_5_lvb_var__u11_0;
wire [31:0] bb_5_lvb_bb5_j_419_LC_InnerPHI_0;
wire [31:0] bb_5_lvb_bb5_i_325_LC_OuterPHI_0;
wire [31:0] bb_5_lvb_bb5_maxValue_4__0;
wire [31:0] bb_5_lvb_input_global_id_0_0;
wire [31:0] bb_5_lvb_input_global_id_1_0;
wire [31:0] bb_5_lvb_input_global_id_2_0;
wire [31:0] bb_5_lvb_input_acl_hw_wg_id_0;
wire bb_5_valid_out_1;
wire bb_5_lvb_cmp48_1;
wire bb_5_lvb_var__1;
wire [31:0] bb_5_lvb_memcoalesce_param_extrValue_8_1;
wire [31:0] bb_5_lvb_memcoalesce_param_extrValue_5_1;
wire [31:0] bb_5_lvb_memcoalesce_param_extrValue_6_1;
wire [31:0] bb_5_lvb_c0_exe1_1;
wire [31:0] bb_5_lvb_c0_exe2_1;
wire [31:0] bb_5_lvb_memcoalesce_param_extrValue_2_1;
wire bb_5_lvb_cmp2122_1;
wire bb_5_lvb_var__u9_1;
wire bb_5_lvb__phi_decision77_xor_1;
wire bb_5_lvb__phi_decision76_xor_or_1;
wire [31:0] bb_5_lvb_channelCounter_049_1;
wire [31:0] bb_5_lvb_mul50_1;
wire [31:0] bb_5_lvb_mul_1;
wire [31:0] bb_5_lvb_heightCounter_141_1;
wire [31:0] bb_5_lvb_c3_exe1_1;
wire [31:0] bb_5_lvb_c3_exe2_1;
wire [31:0] bb_5_lvb_c1_exe1_1;
wire [31:0] bb_5_lvb_widthCounter_232_1;
wire [31:0] bb_5_lvb_var__u10_1;
wire [31:0] bb_5_lvb_var__u11_1;
wire [31:0] bb_5_lvb_bb5_j_419_LC_InnerPHI_1;
wire [31:0] bb_5_lvb_bb5_i_325_LC_OuterPHI_1;
wire [31:0] bb_5_lvb_bb5_maxValue_4__1;
wire [31:0] bb_5_lvb_input_global_id_0_1;
wire [31:0] bb_5_lvb_input_global_id_1_1;
wire [31:0] bb_5_lvb_input_global_id_2_1;
wire [31:0] bb_5_lvb_input_acl_hw_wg_id_1;
wire bb_5_local_bb5_ld__active;
wire bb_6_stall_out;
wire bb_6_valid_out_0;
wire bb_6_lvb_cmp48_0;
wire bb_6_lvb_var__0;
wire [31:0] bb_6_lvb_memcoalesce_param_extrValue_8_0;
wire [31:0] bb_6_lvb_memcoalesce_param_extrValue_5_0;
wire [31:0] bb_6_lvb_memcoalesce_param_extrValue_6_0;
wire [31:0] bb_6_lvb_c0_exe1_0;
wire [31:0] bb_6_lvb_c0_exe2_0;
wire [31:0] bb_6_lvb_memcoalesce_param_extrValue_2_0;
wire bb_6_lvb_cmp2122_0;
wire bb_6_lvb_var__u12_0;
wire bb_6_lvb__phi_decision77_xor_0;
wire bb_6_lvb__phi_decision76_xor_or_0;
wire [31:0] bb_6_lvb_channelCounter_049_0;
wire [31:0] bb_6_lvb_mul50_0;
wire [31:0] bb_6_lvb_mul_0;
wire [31:0] bb_6_lvb_heightCounter_141_0;
wire [31:0] bb_6_lvb_c3_exe1_0;
wire [31:0] bb_6_lvb_c3_exe2_0;
wire [31:0] bb_6_lvb_c1_exe1_0;
wire [31:0] bb_6_lvb_bb6_c2_exe138_0;
wire [31:0] bb_6_lvb_bb6_c2_exe237_0;
wire [31:0] bb_6_lvb_bb6_ld__0;
wire [31:0] bb_6_lvb_input_global_id_0_0;
wire [31:0] bb_6_lvb_input_global_id_1_0;
wire [31:0] bb_6_lvb_input_global_id_2_0;
wire [31:0] bb_6_lvb_input_acl_hw_wg_id_0;
wire bb_6_valid_out_1;
wire bb_6_lvb_cmp48_1;
wire bb_6_lvb_var__1;
wire [31:0] bb_6_lvb_memcoalesce_param_extrValue_8_1;
wire [31:0] bb_6_lvb_memcoalesce_param_extrValue_5_1;
wire [31:0] bb_6_lvb_memcoalesce_param_extrValue_6_1;
wire [31:0] bb_6_lvb_c0_exe1_1;
wire [31:0] bb_6_lvb_c0_exe2_1;
wire [31:0] bb_6_lvb_memcoalesce_param_extrValue_2_1;
wire bb_6_lvb_cmp2122_1;
wire bb_6_lvb_var__u12_1;
wire bb_6_lvb__phi_decision77_xor_1;
wire bb_6_lvb__phi_decision76_xor_or_1;
wire [31:0] bb_6_lvb_channelCounter_049_1;
wire [31:0] bb_6_lvb_mul50_1;
wire [31:0] bb_6_lvb_mul_1;
wire [31:0] bb_6_lvb_heightCounter_141_1;
wire [31:0] bb_6_lvb_c3_exe1_1;
wire [31:0] bb_6_lvb_c3_exe2_1;
wire [31:0] bb_6_lvb_c1_exe1_1;
wire [31:0] bb_6_lvb_bb6_c2_exe138_1;
wire [31:0] bb_6_lvb_bb6_c2_exe237_1;
wire [31:0] bb_6_lvb_bb6_ld__1;
wire [31:0] bb_6_lvb_input_global_id_0_1;
wire [31:0] bb_6_lvb_input_global_id_1_1;
wire [31:0] bb_6_lvb_input_global_id_2_1;
wire [31:0] bb_6_lvb_input_acl_hw_wg_id_1;
wire bb_6_local_bb6_st_select55_active;
wire bb_6_local_bb6_ld__active;
wire bb_7_stall_out;
wire bb_7_valid_out_0;
wire bb_7_lvb_cmp48_0;
wire bb_7_lvb_var__0;
wire [31:0] bb_7_lvb_memcoalesce_param_extrValue_8_0;
wire [31:0] bb_7_lvb_memcoalesce_param_extrValue_5_0;
wire [31:0] bb_7_lvb_memcoalesce_param_extrValue_6_0;
wire [31:0] bb_7_lvb_c0_exe1_0;
wire [31:0] bb_7_lvb_c0_exe2_0;
wire [31:0] bb_7_lvb_memcoalesce_param_extrValue_2_0;
wire bb_7_lvb_cmp2122_0;
wire bb_7_lvb_var__u18_0;
wire bb_7_lvb__phi_decision77_xor_0;
wire bb_7_lvb__phi_decision76_xor_or_0;
wire [31:0] bb_7_lvb_channelCounter_049_0;
wire [31:0] bb_7_lvb_mul50_0;
wire [31:0] bb_7_lvb_mul_0;
wire [31:0] bb_7_lvb_bb7_add65_0;
wire [31:0] bb_7_lvb_input_global_id_0_0;
wire [31:0] bb_7_lvb_input_global_id_1_0;
wire [31:0] bb_7_lvb_input_global_id_2_0;
wire [31:0] bb_7_lvb_input_acl_hw_wg_id_0;
wire bb_7_valid_out_1;
wire bb_7_lvb_cmp48_1;
wire bb_7_lvb_var__1;
wire [31:0] bb_7_lvb_memcoalesce_param_extrValue_8_1;
wire [31:0] bb_7_lvb_memcoalesce_param_extrValue_5_1;
wire [31:0] bb_7_lvb_memcoalesce_param_extrValue_6_1;
wire [31:0] bb_7_lvb_c0_exe1_1;
wire [31:0] bb_7_lvb_c0_exe2_1;
wire [31:0] bb_7_lvb_memcoalesce_param_extrValue_2_1;
wire bb_7_lvb_cmp2122_1;
wire bb_7_lvb_var__u18_1;
wire bb_7_lvb__phi_decision77_xor_1;
wire bb_7_lvb__phi_decision76_xor_or_1;
wire [31:0] bb_7_lvb_channelCounter_049_1;
wire [31:0] bb_7_lvb_mul50_1;
wire [31:0] bb_7_lvb_mul_1;
wire [31:0] bb_7_lvb_bb7_add65_1;
wire [31:0] bb_7_lvb_input_global_id_0_1;
wire [31:0] bb_7_lvb_input_global_id_1_1;
wire [31:0] bb_7_lvb_input_global_id_2_1;
wire [31:0] bb_7_lvb_input_acl_hw_wg_id_1;
wire bb_8_stall_out;
wire bb_8_valid_out_0;
wire bb_8_lvb_cmp48_0;
wire bb_8_lvb_var__0;
wire [31:0] bb_8_lvb_memcoalesce_param_extrValue_8_0;
wire [31:0] bb_8_lvb_memcoalesce_param_extrValue_5_0;
wire [31:0] bb_8_lvb_memcoalesce_param_extrValue_6_0;
wire [31:0] bb_8_lvb_c0_exe1_0;
wire [31:0] bb_8_lvb_c0_exe2_0;
wire [31:0] bb_8_lvb_memcoalesce_param_extrValue_2_0;
wire bb_8_lvb_cmp2122_0;
wire bb_8_lvb_var__u19_0;
wire bb_8_lvb__phi_decision77_xor_0;
wire bb_8_lvb__phi_decision76_xor_or_0;
wire [31:0] bb_8_lvb_bb8_add70_0;
wire [31:0] bb_8_lvb_input_global_id_0_0;
wire [31:0] bb_8_lvb_input_global_id_1_0;
wire [31:0] bb_8_lvb_input_global_id_2_0;
wire [31:0] bb_8_lvb_input_acl_hw_wg_id_0;
wire bb_8_valid_out_1;
wire bb_8_lvb_cmp48_1;
wire bb_8_lvb_var__1;
wire [31:0] bb_8_lvb_memcoalesce_param_extrValue_8_1;
wire [31:0] bb_8_lvb_memcoalesce_param_extrValue_5_1;
wire [31:0] bb_8_lvb_memcoalesce_param_extrValue_6_1;
wire [31:0] bb_8_lvb_c0_exe1_1;
wire [31:0] bb_8_lvb_c0_exe2_1;
wire [31:0] bb_8_lvb_memcoalesce_param_extrValue_2_1;
wire bb_8_lvb_cmp2122_1;
wire bb_8_lvb_var__u19_1;
wire bb_8_lvb__phi_decision77_xor_1;
wire bb_8_lvb__phi_decision76_xor_or_1;
wire [31:0] bb_8_lvb_bb8_add70_1;
wire [31:0] bb_8_lvb_input_global_id_0_1;
wire [31:0] bb_8_lvb_input_global_id_1_1;
wire [31:0] bb_8_lvb_input_global_id_2_1;
wire [31:0] bb_8_lvb_input_acl_hw_wg_id_1;
wire bb_9_stall_out;
wire bb_9_valid_out;
wire [31:0] bb_9_lvb_input_acl_hw_wg_id;
wire loop_limiter_0_stall_out;
wire loop_limiter_0_valid_out;
wire loop_limiter_1_stall_out;
wire loop_limiter_1_valid_out;
wire loop_limiter_2_stall_out;
wire loop_limiter_2_valid_out;
wire loop_limiter_3_stall_out;
wire loop_limiter_3_valid_out;
wire writes_pending;
wire [5:0] lsus_active;

acl_loop_limiter loop_limiter_0 (
	.clock(clock),
	.resetn(resetn),
	.i_valid(bb_1_valid_out),
	.i_stall(bb_2_stall_out_1),
	.i_valid_exit(bb_8_valid_out_1),
	.i_stall_exit(bb_9_stall_out),
	.o_valid(loop_limiter_0_valid_out),
	.o_stall(loop_limiter_0_stall_out)
);

defparam loop_limiter_0.ENTRY_WIDTH = 1;
defparam loop_limiter_0.EXIT_WIDTH = 1;
defparam loop_limiter_0.THRESHOLD = 680;

acl_loop_limiter loop_limiter_1 (
	.clock(clock),
	.resetn(resetn),
	.i_valid(bb_2_valid_out),
	.i_stall(bb_3_stall_out_1),
	.i_valid_exit(bb_7_valid_out_1),
	.i_stall_exit(bb_8_stall_out),
	.o_valid(loop_limiter_1_valid_out),
	.o_stall(loop_limiter_1_stall_out)
);

defparam loop_limiter_1.ENTRY_WIDTH = 1;
defparam loop_limiter_1.EXIT_WIDTH = 1;
defparam loop_limiter_1.THRESHOLD = 671;

acl_loop_limiter loop_limiter_2 (
	.clock(clock),
	.resetn(resetn),
	.i_valid(bb_3_valid_out),
	.i_stall(bb_4_stall_out_1),
	.i_valid_exit(bb_6_valid_out_1),
	.i_stall_exit(bb_7_stall_out),
	.o_valid(loop_limiter_2_valid_out),
	.o_stall(loop_limiter_2_stall_out)
);

defparam loop_limiter_2.ENTRY_WIDTH = 1;
defparam loop_limiter_2.EXIT_WIDTH = 1;
defparam loop_limiter_2.THRESHOLD = 497;

acl_loop_limiter loop_limiter_3 (
	.clock(clock),
	.resetn(resetn),
	.i_valid(bb_4_valid_out),
	.i_stall(bb_5_stall_out_1),
	.i_valid_exit(bb_5_valid_out_1),
	.i_stall_exit(bb_6_stall_out),
	.o_valid(loop_limiter_3_valid_out),
	.o_stall(loop_limiter_3_stall_out)
);

defparam loop_limiter_3.ENTRY_WIDTH = 1;
defparam loop_limiter_3.EXIT_WIDTH = 1;
defparam loop_limiter_3.THRESHOLD = 171;

poolingLayer_basic_block_0 poolingLayer_basic_block_0 (
	.clock(clock),
	.resetn(resetn),
	.start(start),
	.input_param(input_param),
	.valid_in(valid_in),
	.stall_out(bb_0_stall_out),
	.input_global_id_0(input_global_id_0),
	.input_global_id_1(input_global_id_1),
	.input_global_id_2(input_global_id_2),
	.input_acl_hw_wg_id(input_acl_hw_wg_id),
	.valid_out(bb_0_valid_out),
	.stall_in(bb_1_stall_out),
	.lvb_bb0_memcoalesce_param_extrValue_0(bb_0_lvb_bb0_memcoalesce_param_extrValue_0),
	.lvb_bb0_memcoalesce_param_extrValue_1(bb_0_lvb_bb0_memcoalesce_param_extrValue_1),
	.lvb_bb0_memcoalesce_param_bitcast_092(bb_0_lvb_bb0_memcoalesce_param_bitcast_092),
	.lvb_input_global_id_0(bb_0_lvb_input_global_id_0),
	.lvb_input_global_id_1(bb_0_lvb_input_global_id_1),
	.lvb_input_global_id_2(bb_0_lvb_input_global_id_2),
	.lvb_input_acl_hw_wg_id(bb_0_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.avm_local_bb0_ld_memcoalesce_param_load_0_enable(avm_local_bb0_ld_memcoalesce_param_load_0_enable),
	.avm_local_bb0_ld_memcoalesce_param_load_0_readdata(avm_local_bb0_ld_memcoalesce_param_load_0_readdata),
	.avm_local_bb0_ld_memcoalesce_param_load_0_readdatavalid(avm_local_bb0_ld_memcoalesce_param_load_0_readdatavalid),
	.avm_local_bb0_ld_memcoalesce_param_load_0_waitrequest(avm_local_bb0_ld_memcoalesce_param_load_0_waitrequest),
	.avm_local_bb0_ld_memcoalesce_param_load_0_address(avm_local_bb0_ld_memcoalesce_param_load_0_address),
	.avm_local_bb0_ld_memcoalesce_param_load_0_read(avm_local_bb0_ld_memcoalesce_param_load_0_read),
	.avm_local_bb0_ld_memcoalesce_param_load_0_write(avm_local_bb0_ld_memcoalesce_param_load_0_write),
	.avm_local_bb0_ld_memcoalesce_param_load_0_writeack(avm_local_bb0_ld_memcoalesce_param_load_0_writeack),
	.avm_local_bb0_ld_memcoalesce_param_load_0_writedata(avm_local_bb0_ld_memcoalesce_param_load_0_writedata),
	.avm_local_bb0_ld_memcoalesce_param_load_0_byteenable(avm_local_bb0_ld_memcoalesce_param_load_0_byteenable),
	.avm_local_bb0_ld_memcoalesce_param_load_0_burstcount(avm_local_bb0_ld_memcoalesce_param_load_0_burstcount),
	.local_bb0_ld_memcoalesce_param_load_0_active(bb_0_local_bb0_ld_memcoalesce_param_load_0_active),
	.clock2x(clock2x)
);


poolingLayer_basic_block_1 poolingLayer_basic_block_1 (
	.clock(clock),
	.resetn(resetn),
	.input_wii_memcoalesce_param_extrValue_0(bb_0_lvb_bb0_memcoalesce_param_extrValue_0),
	.input_wii_memcoalesce_param_extrValue_1(bb_0_lvb_bb0_memcoalesce_param_extrValue_1),
	.input_wii_memcoalesce_param_bitcast_092(bb_0_lvb_bb0_memcoalesce_param_bitcast_092),
	.valid_in(bb_0_valid_out),
	.stall_out(bb_1_stall_out),
	.input_global_id_0(bb_0_lvb_input_global_id_0),
	.input_global_id_1(bb_0_lvb_input_global_id_1),
	.input_global_id_2(bb_0_lvb_input_global_id_2),
	.input_acl_hw_wg_id(bb_0_lvb_input_acl_hw_wg_id),
	.valid_out(bb_1_valid_out),
	.stall_in(loop_limiter_0_stall_out),
	.lvb_bb1_cmp48(bb_1_lvb_bb1_cmp48),
	.lvb_bb1_var_(bb_1_lvb_bb1_var_),
	.lvb_bb1_memcoalesce_param_extrValue_8(bb_1_lvb_bb1_memcoalesce_param_extrValue_8),
	.lvb_bb1_memcoalesce_param_extrValue_5(bb_1_lvb_bb1_memcoalesce_param_extrValue_5),
	.lvb_bb1_memcoalesce_param_extrValue_6(bb_1_lvb_bb1_memcoalesce_param_extrValue_6),
	.lvb_bb1_c0_exe1(bb_1_lvb_bb1_c0_exe1),
	.lvb_bb1_c0_exe2(bb_1_lvb_bb1_c0_exe2),
	.lvb_bb1_memcoalesce_param_extrValue_2(bb_1_lvb_bb1_memcoalesce_param_extrValue_2),
	.lvb_bb1_cmp2122(bb_1_lvb_bb1_cmp2122),
	.lvb_bb1_var__u0(bb_1_lvb_bb1_var__u0),
	.lvb_bb1__phi_decision77_xor(bb_1_lvb_bb1__phi_decision77_xor),
	.lvb_bb1__phi_decision76_xor_or(bb_1_lvb_bb1__phi_decision76_xor_or),
	.lvb_input_global_id_0(bb_1_lvb_input_global_id_0),
	.lvb_input_global_id_1(bb_1_lvb_input_global_id_1),
	.lvb_input_global_id_2(bb_1_lvb_input_global_id_2),
	.lvb_input_acl_hw_wg_id(bb_1_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.start(start),
	.avm_local_bb1_ld_memcoalesce_param_load_093_enable(avm_local_bb1_ld_memcoalesce_param_load_093_enable),
	.avm_local_bb1_ld_memcoalesce_param_load_093_readdata(avm_local_bb1_ld_memcoalesce_param_load_093_readdata),
	.avm_local_bb1_ld_memcoalesce_param_load_093_readdatavalid(avm_local_bb1_ld_memcoalesce_param_load_093_readdatavalid),
	.avm_local_bb1_ld_memcoalesce_param_load_093_waitrequest(avm_local_bb1_ld_memcoalesce_param_load_093_waitrequest),
	.avm_local_bb1_ld_memcoalesce_param_load_093_address(avm_local_bb1_ld_memcoalesce_param_load_093_address),
	.avm_local_bb1_ld_memcoalesce_param_load_093_read(avm_local_bb1_ld_memcoalesce_param_load_093_read),
	.avm_local_bb1_ld_memcoalesce_param_load_093_write(avm_local_bb1_ld_memcoalesce_param_load_093_write),
	.avm_local_bb1_ld_memcoalesce_param_load_093_writeack(avm_local_bb1_ld_memcoalesce_param_load_093_writeack),
	.avm_local_bb1_ld_memcoalesce_param_load_093_writedata(avm_local_bb1_ld_memcoalesce_param_load_093_writedata),
	.avm_local_bb1_ld_memcoalesce_param_load_093_byteenable(avm_local_bb1_ld_memcoalesce_param_load_093_byteenable),
	.avm_local_bb1_ld_memcoalesce_param_load_093_burstcount(avm_local_bb1_ld_memcoalesce_param_load_093_burstcount),
	.local_bb1_ld_memcoalesce_param_load_093_active(bb_1_local_bb1_ld_memcoalesce_param_load_093_active),
	.clock2x(clock2x)
);


poolingLayer_basic_block_2 poolingLayer_basic_block_2 (
	.clock(clock),
	.resetn(resetn),
	.input_wii_memcoalesce_param_extrValue_0(bb_0_lvb_bb0_memcoalesce_param_extrValue_0),
	.input_wii_memcoalesce_param_extrValue_1(bb_0_lvb_bb0_memcoalesce_param_extrValue_1),
	.valid_in_0(bb_8_valid_out_0),
	.stall_out_0(bb_2_stall_out_0),
	.input_cmp48_0(bb_8_lvb_cmp48_0),
	.input_var__0(bb_8_lvb_var__0),
	.input_memcoalesce_param_extrValue_8_0(bb_8_lvb_memcoalesce_param_extrValue_8_0),
	.input_memcoalesce_param_extrValue_5_0(bb_8_lvb_memcoalesce_param_extrValue_5_0),
	.input_memcoalesce_param_extrValue_6_0(bb_8_lvb_memcoalesce_param_extrValue_6_0),
	.input_c0_exe1_0(bb_8_lvb_c0_exe1_0),
	.input_c0_exe2_0(bb_8_lvb_c0_exe2_0),
	.input_memcoalesce_param_extrValue_2_0(bb_8_lvb_memcoalesce_param_extrValue_2_0),
	.input_cmp2122_0(bb_8_lvb_cmp2122_0),
	.input_var__u2_0(bb_8_lvb_var__u19_0),
	.input__phi_decision77_xor_0(bb_8_lvb__phi_decision77_xor_0),
	.input__phi_decision76_xor_or_0(bb_8_lvb__phi_decision76_xor_or_0),
	.input_channelCounter_049_0(bb_8_lvb_bb8_add70_0),
	.input_global_id_0_0(bb_8_lvb_input_global_id_0_0),
	.input_global_id_1_0(bb_8_lvb_input_global_id_1_0),
	.input_global_id_2_0(bb_8_lvb_input_global_id_2_0),
	.input_acl_hw_wg_id_0(bb_8_lvb_input_acl_hw_wg_id_0),
	.valid_in_1(loop_limiter_0_valid_out),
	.stall_out_1(bb_2_stall_out_1),
	.input_cmp48_1(bb_1_lvb_bb1_cmp48),
	.input_var__1(bb_1_lvb_bb1_var_),
	.input_memcoalesce_param_extrValue_8_1(bb_1_lvb_bb1_memcoalesce_param_extrValue_8),
	.input_memcoalesce_param_extrValue_5_1(bb_1_lvb_bb1_memcoalesce_param_extrValue_5),
	.input_memcoalesce_param_extrValue_6_1(bb_1_lvb_bb1_memcoalesce_param_extrValue_6),
	.input_c0_exe1_1(bb_1_lvb_bb1_c0_exe1),
	.input_c0_exe2_1(bb_1_lvb_bb1_c0_exe2),
	.input_memcoalesce_param_extrValue_2_1(bb_1_lvb_bb1_memcoalesce_param_extrValue_2),
	.input_cmp2122_1(bb_1_lvb_bb1_cmp2122),
	.input_var__u2_1(bb_1_lvb_bb1_var__u0),
	.input__phi_decision77_xor_1(bb_1_lvb_bb1__phi_decision77_xor),
	.input__phi_decision76_xor_or_1(bb_1_lvb_bb1__phi_decision76_xor_or),
	.input_channelCounter_049_1(bb_1_lvb_input_global_id_0),
	.input_global_id_0_1(bb_1_lvb_input_global_id_0),
	.input_global_id_1_1(bb_1_lvb_input_global_id_1),
	.input_global_id_2_1(bb_1_lvb_input_global_id_2),
	.input_acl_hw_wg_id_1(bb_1_lvb_input_acl_hw_wg_id),
	.valid_out(bb_2_valid_out),
	.stall_in(loop_limiter_1_stall_out),
	.lvb_cmp48(bb_2_lvb_cmp48),
	.lvb_var_(bb_2_lvb_var_),
	.lvb_memcoalesce_param_extrValue_8(bb_2_lvb_memcoalesce_param_extrValue_8),
	.lvb_memcoalesce_param_extrValue_5(bb_2_lvb_memcoalesce_param_extrValue_5),
	.lvb_memcoalesce_param_extrValue_6(bb_2_lvb_memcoalesce_param_extrValue_6),
	.lvb_c0_exe1(bb_2_lvb_c0_exe1),
	.lvb_c0_exe2(bb_2_lvb_c0_exe2),
	.lvb_memcoalesce_param_extrValue_2(bb_2_lvb_memcoalesce_param_extrValue_2),
	.lvb_cmp2122(bb_2_lvb_cmp2122),
	.lvb_var__u2(bb_2_lvb_var__u2),
	.lvb__phi_decision77_xor(bb_2_lvb__phi_decision77_xor),
	.lvb__phi_decision76_xor_or(bb_2_lvb__phi_decision76_xor_or),
	.lvb_channelCounter_049(bb_2_lvb_channelCounter_049),
	.lvb_bb2_mul50(bb_2_lvb_bb2_mul50),
	.lvb_bb2_mul(bb_2_lvb_bb2_mul),
	.lvb_input_global_id_0(bb_2_lvb_input_global_id_0),
	.lvb_input_global_id_1(bb_2_lvb_input_global_id_1),
	.lvb_input_global_id_2(bb_2_lvb_input_global_id_2),
	.lvb_input_acl_hw_wg_id(bb_2_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.start(start)
);


poolingLayer_basic_block_3 poolingLayer_basic_block_3 (
	.clock(clock),
	.resetn(resetn),
	.input_inputFeatureMap(input_inputFeatureMap),
	.input_wii_memcoalesce_param_extrValue_0(bb_0_lvb_bb0_memcoalesce_param_extrValue_0),
	.input_wii_memcoalesce_param_extrValue_1(bb_0_lvb_bb0_memcoalesce_param_extrValue_1),
	.valid_in_0(bb_7_valid_out_0),
	.stall_out_0(bb_3_stall_out_0),
	.input_cmp48_0(bb_7_lvb_cmp48_0),
	.input_var__0(bb_7_lvb_var__0),
	.input_memcoalesce_param_extrValue_8_0(bb_7_lvb_memcoalesce_param_extrValue_8_0),
	.input_memcoalesce_param_extrValue_5_0(bb_7_lvb_memcoalesce_param_extrValue_5_0),
	.input_memcoalesce_param_extrValue_6_0(bb_7_lvb_memcoalesce_param_extrValue_6_0),
	.input_c0_exe1_0(bb_7_lvb_c0_exe1_0),
	.input_c0_exe2_0(bb_7_lvb_c0_exe2_0),
	.input_memcoalesce_param_extrValue_2_0(bb_7_lvb_memcoalesce_param_extrValue_2_0),
	.input_cmp2122_0(bb_7_lvb_cmp2122_0),
	.input_var__u3_0(bb_7_lvb_var__u18_0),
	.input__phi_decision77_xor_0(bb_7_lvb__phi_decision77_xor_0),
	.input__phi_decision76_xor_or_0(bb_7_lvb__phi_decision76_xor_or_0),
	.input_channelCounter_049_0(bb_7_lvb_channelCounter_049_0),
	.input_mul50_0(bb_7_lvb_mul50_0),
	.input_mul_0(bb_7_lvb_mul_0),
	.input_heightCounter_141_0(bb_7_lvb_bb7_add65_0),
	.input_global_id_0_0(bb_7_lvb_input_global_id_0_0),
	.input_global_id_1_0(bb_7_lvb_input_global_id_1_0),
	.input_global_id_2_0(bb_7_lvb_input_global_id_2_0),
	.input_acl_hw_wg_id_0(bb_7_lvb_input_acl_hw_wg_id_0),
	.valid_in_1(loop_limiter_1_valid_out),
	.stall_out_1(bb_3_stall_out_1),
	.input_cmp48_1(bb_2_lvb_cmp48),
	.input_var__1(bb_2_lvb_var_),
	.input_memcoalesce_param_extrValue_8_1(bb_2_lvb_memcoalesce_param_extrValue_8),
	.input_memcoalesce_param_extrValue_5_1(bb_2_lvb_memcoalesce_param_extrValue_5),
	.input_memcoalesce_param_extrValue_6_1(bb_2_lvb_memcoalesce_param_extrValue_6),
	.input_c0_exe1_1(bb_2_lvb_c0_exe1),
	.input_c0_exe2_1(bb_2_lvb_c0_exe2),
	.input_memcoalesce_param_extrValue_2_1(bb_2_lvb_memcoalesce_param_extrValue_2),
	.input_cmp2122_1(bb_2_lvb_cmp2122),
	.input_var__u3_1(bb_2_lvb_var__u2),
	.input__phi_decision77_xor_1(bb_2_lvb__phi_decision77_xor),
	.input__phi_decision76_xor_or_1(bb_2_lvb__phi_decision76_xor_or),
	.input_channelCounter_049_1(bb_2_lvb_channelCounter_049),
	.input_mul50_1(bb_2_lvb_bb2_mul50),
	.input_mul_1(bb_2_lvb_bb2_mul),
	.input_heightCounter_141_1(bb_2_lvb_input_global_id_1),
	.input_global_id_0_1(bb_2_lvb_input_global_id_0),
	.input_global_id_1_1(bb_2_lvb_input_global_id_1),
	.input_global_id_2_1(bb_2_lvb_input_global_id_2),
	.input_acl_hw_wg_id_1(bb_2_lvb_input_acl_hw_wg_id),
	.valid_out(bb_3_valid_out),
	.stall_in(loop_limiter_2_stall_out),
	.lvb_cmp48(bb_3_lvb_cmp48),
	.lvb_var_(bb_3_lvb_var_),
	.lvb_memcoalesce_param_extrValue_8(bb_3_lvb_memcoalesce_param_extrValue_8),
	.lvb_memcoalesce_param_extrValue_5(bb_3_lvb_memcoalesce_param_extrValue_5),
	.lvb_memcoalesce_param_extrValue_6(bb_3_lvb_memcoalesce_param_extrValue_6),
	.lvb_c0_exe1(bb_3_lvb_c0_exe1),
	.lvb_c0_exe2(bb_3_lvb_c0_exe2),
	.lvb_memcoalesce_param_extrValue_2(bb_3_lvb_memcoalesce_param_extrValue_2),
	.lvb_cmp2122(bb_3_lvb_cmp2122),
	.lvb_var__u3(bb_3_lvb_var__u3),
	.lvb__phi_decision77_xor(bb_3_lvb__phi_decision77_xor),
	.lvb__phi_decision76_xor_or(bb_3_lvb__phi_decision76_xor_or),
	.lvb_channelCounter_049(bb_3_lvb_channelCounter_049),
	.lvb_mul50(bb_3_lvb_mul50),
	.lvb_mul(bb_3_lvb_mul),
	.lvb_heightCounter_141(bb_3_lvb_heightCounter_141),
	.lvb_bb3_c3_exe1(bb_3_lvb_bb3_c3_exe1),
	.lvb_bb3_c3_exe2(bb_3_lvb_bb3_c3_exe2),
	.lvb_bb3_c1_exe1(bb_3_lvb_bb3_c1_exe1),
	.lvb_bb3_ld_(bb_3_lvb_bb3_ld_),
	.lvb_input_global_id_0(bb_3_lvb_input_global_id_0),
	.lvb_input_global_id_1(bb_3_lvb_input_global_id_1),
	.lvb_input_global_id_2(bb_3_lvb_input_global_id_2),
	.lvb_input_acl_hw_wg_id(bb_3_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.start(start),
	.avm_local_bb3_ld__enable(avm_local_bb3_ld__enable),
	.avm_local_bb3_ld__readdata(avm_local_bb3_ld__readdata),
	.avm_local_bb3_ld__readdatavalid(avm_local_bb3_ld__readdatavalid),
	.avm_local_bb3_ld__waitrequest(avm_local_bb3_ld__waitrequest),
	.avm_local_bb3_ld__address(avm_local_bb3_ld__address),
	.avm_local_bb3_ld__read(avm_local_bb3_ld__read),
	.avm_local_bb3_ld__write(avm_local_bb3_ld__write),
	.avm_local_bb3_ld__writeack(avm_local_bb3_ld__writeack),
	.avm_local_bb3_ld__writedata(avm_local_bb3_ld__writedata),
	.avm_local_bb3_ld__byteenable(avm_local_bb3_ld__byteenable),
	.avm_local_bb3_ld__burstcount(avm_local_bb3_ld__burstcount),
	.local_bb3_ld__active(bb_3_local_bb3_ld__active),
	.clock2x(clock2x)
);


poolingLayer_basic_block_4 poolingLayer_basic_block_4 (
	.clock(clock),
	.resetn(resetn),
	.input_wii_memcoalesce_param_extrValue_0(bb_0_lvb_bb0_memcoalesce_param_extrValue_0),
	.input_wii_memcoalesce_param_extrValue_1(bb_0_lvb_bb0_memcoalesce_param_extrValue_1),
	.valid_in_0(bb_6_valid_out_0),
	.stall_out_0(bb_4_stall_out_0),
	.input_cmp48_0(bb_6_lvb_cmp48_0),
	.input_var__0(bb_6_lvb_var__0),
	.input_memcoalesce_param_extrValue_8_0(bb_6_lvb_memcoalesce_param_extrValue_8_0),
	.input_memcoalesce_param_extrValue_5_0(bb_6_lvb_memcoalesce_param_extrValue_5_0),
	.input_memcoalesce_param_extrValue_6_0(bb_6_lvb_memcoalesce_param_extrValue_6_0),
	.input_c0_exe1_0(bb_6_lvb_c0_exe1_0),
	.input_c0_exe2_0(bb_6_lvb_c0_exe2_0),
	.input_memcoalesce_param_extrValue_2_0(bb_6_lvb_memcoalesce_param_extrValue_2_0),
	.input_cmp2122_0(bb_6_lvb_cmp2122_0),
	.input_var__u6_0(bb_6_lvb_var__u12_0),
	.input__phi_decision77_xor_0(bb_6_lvb__phi_decision77_xor_0),
	.input__phi_decision76_xor_or_0(bb_6_lvb__phi_decision76_xor_or_0),
	.input_channelCounter_049_0(bb_6_lvb_channelCounter_049_0),
	.input_mul50_0(bb_6_lvb_mul50_0),
	.input_mul_0(bb_6_lvb_mul_0),
	.input_heightCounter_141_0(bb_6_lvb_heightCounter_141_0),
	.input_c3_exe1_0(bb_6_lvb_c3_exe1_0),
	.input_c3_exe2_0(bb_6_lvb_c3_exe2_0),
	.input_c1_exe1_0(bb_6_lvb_c1_exe1_0),
	.input_widthCounter_232_0(bb_6_lvb_bb6_c2_exe138_0),
	.input_var__u7_0(bb_6_lvb_bb6_c2_exe237_0),
	.input_var__u8_0(bb_6_lvb_bb6_ld__0),
	.input_global_id_0_0(bb_6_lvb_input_global_id_0_0),
	.input_global_id_1_0(bb_6_lvb_input_global_id_1_0),
	.input_global_id_2_0(bb_6_lvb_input_global_id_2_0),
	.input_acl_hw_wg_id_0(bb_6_lvb_input_acl_hw_wg_id_0),
	.valid_in_1(loop_limiter_2_valid_out),
	.stall_out_1(bb_4_stall_out_1),
	.input_cmp48_1(bb_3_lvb_cmp48),
	.input_var__1(bb_3_lvb_var_),
	.input_memcoalesce_param_extrValue_8_1(bb_3_lvb_memcoalesce_param_extrValue_8),
	.input_memcoalesce_param_extrValue_5_1(bb_3_lvb_memcoalesce_param_extrValue_5),
	.input_memcoalesce_param_extrValue_6_1(bb_3_lvb_memcoalesce_param_extrValue_6),
	.input_c0_exe1_1(bb_3_lvb_c0_exe1),
	.input_c0_exe2_1(bb_3_lvb_c0_exe2),
	.input_memcoalesce_param_extrValue_2_1(bb_3_lvb_memcoalesce_param_extrValue_2),
	.input_cmp2122_1(bb_3_lvb_cmp2122),
	.input_var__u6_1(bb_3_lvb_var__u3),
	.input__phi_decision77_xor_1(bb_3_lvb__phi_decision77_xor),
	.input__phi_decision76_xor_or_1(bb_3_lvb__phi_decision76_xor_or),
	.input_channelCounter_049_1(bb_3_lvb_channelCounter_049),
	.input_mul50_1(bb_3_lvb_mul50),
	.input_mul_1(bb_3_lvb_mul),
	.input_heightCounter_141_1(bb_3_lvb_heightCounter_141),
	.input_c3_exe1_1(bb_3_lvb_bb3_c3_exe1),
	.input_c3_exe2_1(bb_3_lvb_bb3_c3_exe2),
	.input_c1_exe1_1(bb_3_lvb_bb3_c1_exe1),
	.input_widthCounter_232_1(bb_3_lvb_input_global_id_2),
	.input_var__u7_1(bb_3_lvb_c0_exe2),
	.input_var__u8_1(bb_3_lvb_bb3_ld_),
	.input_global_id_0_1(bb_3_lvb_input_global_id_0),
	.input_global_id_1_1(bb_3_lvb_input_global_id_1),
	.input_global_id_2_1(bb_3_lvb_input_global_id_2),
	.input_acl_hw_wg_id_1(bb_3_lvb_input_acl_hw_wg_id),
	.valid_out(bb_4_valid_out),
	.stall_in(loop_limiter_3_stall_out),
	.lvb_cmp48(bb_4_lvb_cmp48),
	.lvb_var_(bb_4_lvb_var_),
	.lvb_memcoalesce_param_extrValue_8(bb_4_lvb_memcoalesce_param_extrValue_8),
	.lvb_memcoalesce_param_extrValue_5(bb_4_lvb_memcoalesce_param_extrValue_5),
	.lvb_memcoalesce_param_extrValue_6(bb_4_lvb_memcoalesce_param_extrValue_6),
	.lvb_c0_exe1(bb_4_lvb_c0_exe1),
	.lvb_c0_exe2(bb_4_lvb_c0_exe2),
	.lvb_memcoalesce_param_extrValue_2(bb_4_lvb_memcoalesce_param_extrValue_2),
	.lvb_cmp2122(bb_4_lvb_cmp2122),
	.lvb_var__u6(bb_4_lvb_var__u6),
	.lvb__phi_decision77_xor(bb_4_lvb__phi_decision77_xor),
	.lvb__phi_decision76_xor_or(bb_4_lvb__phi_decision76_xor_or),
	.lvb_channelCounter_049(bb_4_lvb_channelCounter_049),
	.lvb_mul50(bb_4_lvb_mul50),
	.lvb_mul(bb_4_lvb_mul),
	.lvb_heightCounter_141(bb_4_lvb_heightCounter_141),
	.lvb_c3_exe1(bb_4_lvb_c3_exe1),
	.lvb_c3_exe2(bb_4_lvb_c3_exe2),
	.lvb_c1_exe1(bb_4_lvb_c1_exe1),
	.lvb_widthCounter_232(bb_4_lvb_widthCounter_232),
	.lvb_var__u7(bb_4_lvb_var__u7),
	.lvb_var__u8(bb_4_lvb_var__u8),
	.lvb_input_global_id_0(bb_4_lvb_input_global_id_0),
	.lvb_input_global_id_1(bb_4_lvb_input_global_id_1),
	.lvb_input_global_id_2(bb_4_lvb_input_global_id_2),
	.lvb_input_acl_hw_wg_id(bb_4_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.start(start)
);


poolingLayer_basic_block_5 poolingLayer_basic_block_5 (
	.clock(clock),
	.resetn(resetn),
	.input_inputFeatureMap(input_inputFeatureMap),
	.input_wii_memcoalesce_param_extrValue_0(bb_0_lvb_bb0_memcoalesce_param_extrValue_0),
	.input_wii_memcoalesce_param_extrValue_1(bb_0_lvb_bb0_memcoalesce_param_extrValue_1),
	.valid_in_0(bb_5_valid_out_0),
	.stall_out_0(bb_5_stall_out_0),
	.input_cmp48_0(bb_5_lvb_cmp48_0),
	.input_var__0(bb_5_lvb_var__0),
	.input_memcoalesce_param_extrValue_8_0(bb_5_lvb_memcoalesce_param_extrValue_8_0),
	.input_memcoalesce_param_extrValue_5_0(bb_5_lvb_memcoalesce_param_extrValue_5_0),
	.input_memcoalesce_param_extrValue_6_0(bb_5_lvb_memcoalesce_param_extrValue_6_0),
	.input_c0_exe1_0(bb_5_lvb_c0_exe1_0),
	.input_c0_exe2_0(bb_5_lvb_c0_exe2_0),
	.input_memcoalesce_param_extrValue_2_0(bb_5_lvb_memcoalesce_param_extrValue_2_0),
	.input_cmp2122_0(bb_5_lvb_cmp2122_0),
	.input_var__u9_0(bb_5_lvb_var__u9_0),
	.input__phi_decision77_xor_0(bb_5_lvb__phi_decision77_xor_0),
	.input__phi_decision76_xor_or_0(bb_5_lvb__phi_decision76_xor_or_0),
	.input_channelCounter_049_0(bb_5_lvb_channelCounter_049_0),
	.input_mul50_0(bb_5_lvb_mul50_0),
	.input_mul_0(bb_5_lvb_mul_0),
	.input_heightCounter_141_0(bb_5_lvb_heightCounter_141_0),
	.input_c3_exe1_0(bb_5_lvb_c3_exe1_0),
	.input_c3_exe2_0(bb_5_lvb_c3_exe2_0),
	.input_c1_exe1_0(bb_5_lvb_c1_exe1_0),
	.input_widthCounter_232_0(bb_5_lvb_widthCounter_232_0),
	.input_var__u10_0(bb_5_lvb_var__u10_0),
	.input_var__u11_0(bb_5_lvb_var__u11_0),
	.input_i_325_0(bb_5_lvb_bb5_i_325_LC_OuterPHI_0),
	.input_j_419_0(bb_5_lvb_bb5_j_419_LC_InnerPHI_0),
	.input_maxValue_418_0(bb_5_lvb_bb5_maxValue_4__0),
	.input_global_id_0_0(bb_5_lvb_input_global_id_0_0),
	.input_global_id_1_0(bb_5_lvb_input_global_id_1_0),
	.input_global_id_2_0(bb_5_lvb_input_global_id_2_0),
	.input_acl_hw_wg_id_0(bb_5_lvb_input_acl_hw_wg_id_0),
	.valid_in_1(loop_limiter_3_valid_out),
	.stall_out_1(bb_5_stall_out_1),
	.input_cmp48_1(bb_4_lvb_cmp48),
	.input_var__1(bb_4_lvb_var_),
	.input_memcoalesce_param_extrValue_8_1(bb_4_lvb_memcoalesce_param_extrValue_8),
	.input_memcoalesce_param_extrValue_5_1(bb_4_lvb_memcoalesce_param_extrValue_5),
	.input_memcoalesce_param_extrValue_6_1(bb_4_lvb_memcoalesce_param_extrValue_6),
	.input_c0_exe1_1(bb_4_lvb_c0_exe1),
	.input_c0_exe2_1(bb_4_lvb_c0_exe2),
	.input_memcoalesce_param_extrValue_2_1(bb_4_lvb_memcoalesce_param_extrValue_2),
	.input_cmp2122_1(bb_4_lvb_cmp2122),
	.input_var__u9_1(bb_4_lvb_var__u6),
	.input__phi_decision77_xor_1(bb_4_lvb__phi_decision77_xor),
	.input__phi_decision76_xor_or_1(bb_4_lvb__phi_decision76_xor_or),
	.input_channelCounter_049_1(bb_4_lvb_channelCounter_049),
	.input_mul50_1(bb_4_lvb_mul50),
	.input_mul_1(bb_4_lvb_mul),
	.input_heightCounter_141_1(bb_4_lvb_heightCounter_141),
	.input_c3_exe1_1(bb_4_lvb_c3_exe1),
	.input_c3_exe2_1(bb_4_lvb_c3_exe2),
	.input_c1_exe1_1(bb_4_lvb_c1_exe1),
	.input_widthCounter_232_1(bb_4_lvb_widthCounter_232),
	.input_var__u10_1(bb_4_lvb_var__u7),
	.input_var__u11_1(bb_4_lvb_var__u8),
	.input_i_325_1(32'h0),
	.input_j_419_1(32'h0),
	.input_maxValue_418_1(bb_4_lvb_var__u8),
	.input_global_id_0_1(bb_4_lvb_input_global_id_0),
	.input_global_id_1_1(bb_4_lvb_input_global_id_1),
	.input_global_id_2_1(bb_4_lvb_input_global_id_2),
	.input_acl_hw_wg_id_1(bb_4_lvb_input_acl_hw_wg_id),
	.valid_out_0(bb_5_valid_out_0),
	.stall_in_0(bb_5_stall_out_0),
	.lvb_cmp48_0(bb_5_lvb_cmp48_0),
	.lvb_var__0(bb_5_lvb_var__0),
	.lvb_memcoalesce_param_extrValue_8_0(bb_5_lvb_memcoalesce_param_extrValue_8_0),
	.lvb_memcoalesce_param_extrValue_5_0(bb_5_lvb_memcoalesce_param_extrValue_5_0),
	.lvb_memcoalesce_param_extrValue_6_0(bb_5_lvb_memcoalesce_param_extrValue_6_0),
	.lvb_c0_exe1_0(bb_5_lvb_c0_exe1_0),
	.lvb_c0_exe2_0(bb_5_lvb_c0_exe2_0),
	.lvb_memcoalesce_param_extrValue_2_0(bb_5_lvb_memcoalesce_param_extrValue_2_0),
	.lvb_cmp2122_0(bb_5_lvb_cmp2122_0),
	.lvb_var__u9_0(bb_5_lvb_var__u9_0),
	.lvb__phi_decision77_xor_0(bb_5_lvb__phi_decision77_xor_0),
	.lvb__phi_decision76_xor_or_0(bb_5_lvb__phi_decision76_xor_or_0),
	.lvb_channelCounter_049_0(bb_5_lvb_channelCounter_049_0),
	.lvb_mul50_0(bb_5_lvb_mul50_0),
	.lvb_mul_0(bb_5_lvb_mul_0),
	.lvb_heightCounter_141_0(bb_5_lvb_heightCounter_141_0),
	.lvb_c3_exe1_0(bb_5_lvb_c3_exe1_0),
	.lvb_c3_exe2_0(bb_5_lvb_c3_exe2_0),
	.lvb_c1_exe1_0(bb_5_lvb_c1_exe1_0),
	.lvb_widthCounter_232_0(bb_5_lvb_widthCounter_232_0),
	.lvb_var__u10_0(bb_5_lvb_var__u10_0),
	.lvb_var__u11_0(bb_5_lvb_var__u11_0),
	.lvb_bb5_j_419_LC_InnerPHI_0(bb_5_lvb_bb5_j_419_LC_InnerPHI_0),
	.lvb_bb5_i_325_LC_OuterPHI_0(bb_5_lvb_bb5_i_325_LC_OuterPHI_0),
	.lvb_bb5_maxValue_4__0(bb_5_lvb_bb5_maxValue_4__0),
	.lvb_input_global_id_0_0(bb_5_lvb_input_global_id_0_0),
	.lvb_input_global_id_1_0(bb_5_lvb_input_global_id_1_0),
	.lvb_input_global_id_2_0(bb_5_lvb_input_global_id_2_0),
	.lvb_input_acl_hw_wg_id_0(bb_5_lvb_input_acl_hw_wg_id_0),
	.valid_out_1(bb_5_valid_out_1),
	.stall_in_1(bb_6_stall_out),
	.lvb_cmp48_1(bb_5_lvb_cmp48_1),
	.lvb_var__1(bb_5_lvb_var__1),
	.lvb_memcoalesce_param_extrValue_8_1(bb_5_lvb_memcoalesce_param_extrValue_8_1),
	.lvb_memcoalesce_param_extrValue_5_1(bb_5_lvb_memcoalesce_param_extrValue_5_1),
	.lvb_memcoalesce_param_extrValue_6_1(bb_5_lvb_memcoalesce_param_extrValue_6_1),
	.lvb_c0_exe1_1(bb_5_lvb_c0_exe1_1),
	.lvb_c0_exe2_1(bb_5_lvb_c0_exe2_1),
	.lvb_memcoalesce_param_extrValue_2_1(bb_5_lvb_memcoalesce_param_extrValue_2_1),
	.lvb_cmp2122_1(bb_5_lvb_cmp2122_1),
	.lvb_var__u9_1(bb_5_lvb_var__u9_1),
	.lvb__phi_decision77_xor_1(bb_5_lvb__phi_decision77_xor_1),
	.lvb__phi_decision76_xor_or_1(bb_5_lvb__phi_decision76_xor_or_1),
	.lvb_channelCounter_049_1(bb_5_lvb_channelCounter_049_1),
	.lvb_mul50_1(bb_5_lvb_mul50_1),
	.lvb_mul_1(bb_5_lvb_mul_1),
	.lvb_heightCounter_141_1(bb_5_lvb_heightCounter_141_1),
	.lvb_c3_exe1_1(bb_5_lvb_c3_exe1_1),
	.lvb_c3_exe2_1(bb_5_lvb_c3_exe2_1),
	.lvb_c1_exe1_1(bb_5_lvb_c1_exe1_1),
	.lvb_widthCounter_232_1(bb_5_lvb_widthCounter_232_1),
	.lvb_var__u10_1(bb_5_lvb_var__u10_1),
	.lvb_var__u11_1(bb_5_lvb_var__u11_1),
	.lvb_bb5_j_419_LC_InnerPHI_1(bb_5_lvb_bb5_j_419_LC_InnerPHI_1),
	.lvb_bb5_i_325_LC_OuterPHI_1(bb_5_lvb_bb5_i_325_LC_OuterPHI_1),
	.lvb_bb5_maxValue_4__1(bb_5_lvb_bb5_maxValue_4__1),
	.lvb_input_global_id_0_1(bb_5_lvb_input_global_id_0_1),
	.lvb_input_global_id_1_1(bb_5_lvb_input_global_id_1_1),
	.lvb_input_global_id_2_1(bb_5_lvb_input_global_id_2_1),
	.lvb_input_acl_hw_wg_id_1(bb_5_lvb_input_acl_hw_wg_id_1),
	.workgroup_size(workgroup_size),
	.start(start),
	.avm_local_bb5_ld__enable(avm_local_bb5_ld__enable),
	.avm_local_bb5_ld__readdata(avm_local_bb5_ld__readdata),
	.avm_local_bb5_ld__readdatavalid(avm_local_bb5_ld__readdatavalid),
	.avm_local_bb5_ld__waitrequest(avm_local_bb5_ld__waitrequest),
	.avm_local_bb5_ld__address(avm_local_bb5_ld__address),
	.avm_local_bb5_ld__read(avm_local_bb5_ld__read),
	.avm_local_bb5_ld__write(avm_local_bb5_ld__write),
	.avm_local_bb5_ld__writeack(avm_local_bb5_ld__writeack),
	.avm_local_bb5_ld__writedata(avm_local_bb5_ld__writedata),
	.avm_local_bb5_ld__byteenable(avm_local_bb5_ld__byteenable),
	.avm_local_bb5_ld__burstcount(avm_local_bb5_ld__burstcount),
	.local_bb5_ld__active(bb_5_local_bb5_ld__active),
	.clock2x(clock2x)
);


poolingLayer_basic_block_6 poolingLayer_basic_block_6 (
	.clock(clock),
	.resetn(resetn),
	.input_global_size_2(input_global_size_2),
	.input_inputFeatureMap(input_inputFeatureMap),
	.input_outputFeatureMap(input_outputFeatureMap),
	.input_wii_memcoalesce_param_extrValue_0(bb_0_lvb_bb0_memcoalesce_param_extrValue_0),
	.input_wii_memcoalesce_param_extrValue_1(bb_0_lvb_bb0_memcoalesce_param_extrValue_1),
	.valid_in(bb_5_valid_out_1),
	.stall_out(bb_6_stall_out),
	.input_cmp48(bb_5_lvb_cmp48_1),
	.input_var_(bb_5_lvb_var__1),
	.input_memcoalesce_param_extrValue_8(bb_5_lvb_memcoalesce_param_extrValue_8_1),
	.input_memcoalesce_param_extrValue_5(bb_5_lvb_memcoalesce_param_extrValue_5_1),
	.input_memcoalesce_param_extrValue_6(bb_5_lvb_memcoalesce_param_extrValue_6_1),
	.input_c0_exe1(bb_5_lvb_c0_exe1_1),
	.input_c0_exe2(bb_5_lvb_c0_exe2_1),
	.input_memcoalesce_param_extrValue_2(bb_5_lvb_memcoalesce_param_extrValue_2_1),
	.input_cmp2122(bb_5_lvb_cmp2122_1),
	.input_var__u12(bb_5_lvb_var__u9_1),
	.input__phi_decision77_xor(bb_5_lvb__phi_decision77_xor_1),
	.input__phi_decision76_xor_or(bb_5_lvb__phi_decision76_xor_or_1),
	.input_channelCounter_049(bb_5_lvb_channelCounter_049_1),
	.input_mul50(bb_5_lvb_mul50_1),
	.input_mul(bb_5_lvb_mul_1),
	.input_heightCounter_141(bb_5_lvb_heightCounter_141_1),
	.input_c3_exe1(bb_5_lvb_c3_exe1_1),
	.input_c3_exe2(bb_5_lvb_c3_exe2_1),
	.input_c1_exe1(bb_5_lvb_c1_exe1_1),
	.input_widthCounter_232(bb_5_lvb_widthCounter_232_1),
	.input_var__u13(bb_5_lvb_var__u11_1),
	.input_maxValue_4_(bb_5_lvb_bb5_maxValue_4__1),
	.input_global_id_0(bb_5_lvb_input_global_id_0_1),
	.input_global_id_1(bb_5_lvb_input_global_id_1_1),
	.input_global_id_2(bb_5_lvb_input_global_id_2_1),
	.input_acl_hw_wg_id(bb_5_lvb_input_acl_hw_wg_id_1),
	.valid_out_0(bb_6_valid_out_0),
	.stall_in_0(bb_4_stall_out_0),
	.lvb_cmp48_0(bb_6_lvb_cmp48_0),
	.lvb_var__0(bb_6_lvb_var__0),
	.lvb_memcoalesce_param_extrValue_8_0(bb_6_lvb_memcoalesce_param_extrValue_8_0),
	.lvb_memcoalesce_param_extrValue_5_0(bb_6_lvb_memcoalesce_param_extrValue_5_0),
	.lvb_memcoalesce_param_extrValue_6_0(bb_6_lvb_memcoalesce_param_extrValue_6_0),
	.lvb_c0_exe1_0(bb_6_lvb_c0_exe1_0),
	.lvb_c0_exe2_0(bb_6_lvb_c0_exe2_0),
	.lvb_memcoalesce_param_extrValue_2_0(bb_6_lvb_memcoalesce_param_extrValue_2_0),
	.lvb_cmp2122_0(bb_6_lvb_cmp2122_0),
	.lvb_var__u12_0(bb_6_lvb_var__u12_0),
	.lvb__phi_decision77_xor_0(bb_6_lvb__phi_decision77_xor_0),
	.lvb__phi_decision76_xor_or_0(bb_6_lvb__phi_decision76_xor_or_0),
	.lvb_channelCounter_049_0(bb_6_lvb_channelCounter_049_0),
	.lvb_mul50_0(bb_6_lvb_mul50_0),
	.lvb_mul_0(bb_6_lvb_mul_0),
	.lvb_heightCounter_141_0(bb_6_lvb_heightCounter_141_0),
	.lvb_c3_exe1_0(bb_6_lvb_c3_exe1_0),
	.lvb_c3_exe2_0(bb_6_lvb_c3_exe2_0),
	.lvb_c1_exe1_0(bb_6_lvb_c1_exe1_0),
	.lvb_bb6_c2_exe138_0(bb_6_lvb_bb6_c2_exe138_0),
	.lvb_bb6_c2_exe237_0(bb_6_lvb_bb6_c2_exe237_0),
	.lvb_bb6_ld__0(bb_6_lvb_bb6_ld__0),
	.lvb_input_global_id_0_0(bb_6_lvb_input_global_id_0_0),
	.lvb_input_global_id_1_0(bb_6_lvb_input_global_id_1_0),
	.lvb_input_global_id_2_0(bb_6_lvb_input_global_id_2_0),
	.lvb_input_acl_hw_wg_id_0(bb_6_lvb_input_acl_hw_wg_id_0),
	.valid_out_1(bb_6_valid_out_1),
	.stall_in_1(bb_7_stall_out),
	.lvb_cmp48_1(bb_6_lvb_cmp48_1),
	.lvb_var__1(bb_6_lvb_var__1),
	.lvb_memcoalesce_param_extrValue_8_1(bb_6_lvb_memcoalesce_param_extrValue_8_1),
	.lvb_memcoalesce_param_extrValue_5_1(bb_6_lvb_memcoalesce_param_extrValue_5_1),
	.lvb_memcoalesce_param_extrValue_6_1(bb_6_lvb_memcoalesce_param_extrValue_6_1),
	.lvb_c0_exe1_1(bb_6_lvb_c0_exe1_1),
	.lvb_c0_exe2_1(bb_6_lvb_c0_exe2_1),
	.lvb_memcoalesce_param_extrValue_2_1(bb_6_lvb_memcoalesce_param_extrValue_2_1),
	.lvb_cmp2122_1(bb_6_lvb_cmp2122_1),
	.lvb_var__u12_1(bb_6_lvb_var__u12_1),
	.lvb__phi_decision77_xor_1(bb_6_lvb__phi_decision77_xor_1),
	.lvb__phi_decision76_xor_or_1(bb_6_lvb__phi_decision76_xor_or_1),
	.lvb_channelCounter_049_1(bb_6_lvb_channelCounter_049_1),
	.lvb_mul50_1(bb_6_lvb_mul50_1),
	.lvb_mul_1(bb_6_lvb_mul_1),
	.lvb_heightCounter_141_1(bb_6_lvb_heightCounter_141_1),
	.lvb_c3_exe1_1(bb_6_lvb_c3_exe1_1),
	.lvb_c3_exe2_1(bb_6_lvb_c3_exe2_1),
	.lvb_c1_exe1_1(bb_6_lvb_c1_exe1_1),
	.lvb_bb6_c2_exe138_1(bb_6_lvb_bb6_c2_exe138_1),
	.lvb_bb6_c2_exe237_1(bb_6_lvb_bb6_c2_exe237_1),
	.lvb_bb6_ld__1(bb_6_lvb_bb6_ld__1),
	.lvb_input_global_id_0_1(bb_6_lvb_input_global_id_0_1),
	.lvb_input_global_id_1_1(bb_6_lvb_input_global_id_1_1),
	.lvb_input_global_id_2_1(bb_6_lvb_input_global_id_2_1),
	.lvb_input_acl_hw_wg_id_1(bb_6_lvb_input_acl_hw_wg_id_1),
	.workgroup_size(workgroup_size),
	.start(start),
	.avm_local_bb6_st_select55_enable(avm_local_bb6_st_select55_enable),
	.avm_local_bb6_st_select55_readdata(avm_local_bb6_st_select55_readdata),
	.avm_local_bb6_st_select55_readdatavalid(avm_local_bb6_st_select55_readdatavalid),
	.avm_local_bb6_st_select55_waitrequest(avm_local_bb6_st_select55_waitrequest),
	.avm_local_bb6_st_select55_address(avm_local_bb6_st_select55_address),
	.avm_local_bb6_st_select55_read(avm_local_bb6_st_select55_read),
	.avm_local_bb6_st_select55_write(avm_local_bb6_st_select55_write),
	.avm_local_bb6_st_select55_writeack(avm_local_bb6_st_select55_writeack),
	.avm_local_bb6_st_select55_writedata(avm_local_bb6_st_select55_writedata),
	.avm_local_bb6_st_select55_byteenable(avm_local_bb6_st_select55_byteenable),
	.avm_local_bb6_st_select55_burstcount(avm_local_bb6_st_select55_burstcount),
	.local_bb6_st_select55_active(bb_6_local_bb6_st_select55_active),
	.clock2x(clock2x),
	.avm_local_bb6_ld__enable(avm_local_bb6_ld__enable),
	.avm_local_bb6_ld__readdata(avm_local_bb6_ld__readdata),
	.avm_local_bb6_ld__readdatavalid(avm_local_bb6_ld__readdatavalid),
	.avm_local_bb6_ld__waitrequest(avm_local_bb6_ld__waitrequest),
	.avm_local_bb6_ld__address(avm_local_bb6_ld__address),
	.avm_local_bb6_ld__read(avm_local_bb6_ld__read),
	.avm_local_bb6_ld__write(avm_local_bb6_ld__write),
	.avm_local_bb6_ld__writeack(avm_local_bb6_ld__writeack),
	.avm_local_bb6_ld__writedata(avm_local_bb6_ld__writedata),
	.avm_local_bb6_ld__byteenable(avm_local_bb6_ld__byteenable),
	.avm_local_bb6_ld__burstcount(avm_local_bb6_ld__burstcount),
	.local_bb6_ld__active(bb_6_local_bb6_ld__active)
);


poolingLayer_basic_block_7 poolingLayer_basic_block_7 (
	.clock(clock),
	.resetn(resetn),
	.input_global_size_1(input_global_size_1),
	.input_wii_memcoalesce_param_extrValue_0(bb_0_lvb_bb0_memcoalesce_param_extrValue_0),
	.input_wii_memcoalesce_param_extrValue_1(bb_0_lvb_bb0_memcoalesce_param_extrValue_1),
	.valid_in(bb_6_valid_out_1),
	.stall_out(bb_7_stall_out),
	.input_cmp48(bb_6_lvb_cmp48_1),
	.input_var_(bb_6_lvb_var__1),
	.input_memcoalesce_param_extrValue_8(bb_6_lvb_memcoalesce_param_extrValue_8_1),
	.input_memcoalesce_param_extrValue_5(bb_6_lvb_memcoalesce_param_extrValue_5_1),
	.input_memcoalesce_param_extrValue_6(bb_6_lvb_memcoalesce_param_extrValue_6_1),
	.input_c0_exe1(bb_6_lvb_c0_exe1_1),
	.input_c0_exe2(bb_6_lvb_c0_exe2_1),
	.input_memcoalesce_param_extrValue_2(bb_6_lvb_memcoalesce_param_extrValue_2_1),
	.input_cmp2122(bb_6_lvb_cmp2122_1),
	.input_var__u18(bb_6_lvb_var__u12_1),
	.input__phi_decision77_xor(bb_6_lvb__phi_decision77_xor_1),
	.input__phi_decision76_xor_or(bb_6_lvb__phi_decision76_xor_or_1),
	.input_channelCounter_049(bb_6_lvb_channelCounter_049_1),
	.input_mul50(bb_6_lvb_mul50_1),
	.input_mul(bb_6_lvb_mul_1),
	.input_heightCounter_141(bb_6_lvb_heightCounter_141_1),
	.input_global_id_0(bb_6_lvb_input_global_id_0_1),
	.input_global_id_1(bb_6_lvb_input_global_id_1_1),
	.input_global_id_2(bb_6_lvb_input_global_id_2_1),
	.input_acl_hw_wg_id(bb_6_lvb_input_acl_hw_wg_id_1),
	.valid_out_0(bb_7_valid_out_0),
	.stall_in_0(bb_3_stall_out_0),
	.lvb_cmp48_0(bb_7_lvb_cmp48_0),
	.lvb_var__0(bb_7_lvb_var__0),
	.lvb_memcoalesce_param_extrValue_8_0(bb_7_lvb_memcoalesce_param_extrValue_8_0),
	.lvb_memcoalesce_param_extrValue_5_0(bb_7_lvb_memcoalesce_param_extrValue_5_0),
	.lvb_memcoalesce_param_extrValue_6_0(bb_7_lvb_memcoalesce_param_extrValue_6_0),
	.lvb_c0_exe1_0(bb_7_lvb_c0_exe1_0),
	.lvb_c0_exe2_0(bb_7_lvb_c0_exe2_0),
	.lvb_memcoalesce_param_extrValue_2_0(bb_7_lvb_memcoalesce_param_extrValue_2_0),
	.lvb_cmp2122_0(bb_7_lvb_cmp2122_0),
	.lvb_var__u18_0(bb_7_lvb_var__u18_0),
	.lvb__phi_decision77_xor_0(bb_7_lvb__phi_decision77_xor_0),
	.lvb__phi_decision76_xor_or_0(bb_7_lvb__phi_decision76_xor_or_0),
	.lvb_channelCounter_049_0(bb_7_lvb_channelCounter_049_0),
	.lvb_mul50_0(bb_7_lvb_mul50_0),
	.lvb_mul_0(bb_7_lvb_mul_0),
	.lvb_bb7_add65_0(bb_7_lvb_bb7_add65_0),
	.lvb_input_global_id_0_0(bb_7_lvb_input_global_id_0_0),
	.lvb_input_global_id_1_0(bb_7_lvb_input_global_id_1_0),
	.lvb_input_global_id_2_0(bb_7_lvb_input_global_id_2_0),
	.lvb_input_acl_hw_wg_id_0(bb_7_lvb_input_acl_hw_wg_id_0),
	.valid_out_1(bb_7_valid_out_1),
	.stall_in_1(bb_8_stall_out),
	.lvb_cmp48_1(bb_7_lvb_cmp48_1),
	.lvb_var__1(bb_7_lvb_var__1),
	.lvb_memcoalesce_param_extrValue_8_1(bb_7_lvb_memcoalesce_param_extrValue_8_1),
	.lvb_memcoalesce_param_extrValue_5_1(bb_7_lvb_memcoalesce_param_extrValue_5_1),
	.lvb_memcoalesce_param_extrValue_6_1(bb_7_lvb_memcoalesce_param_extrValue_6_1),
	.lvb_c0_exe1_1(bb_7_lvb_c0_exe1_1),
	.lvb_c0_exe2_1(bb_7_lvb_c0_exe2_1),
	.lvb_memcoalesce_param_extrValue_2_1(bb_7_lvb_memcoalesce_param_extrValue_2_1),
	.lvb_cmp2122_1(bb_7_lvb_cmp2122_1),
	.lvb_var__u18_1(bb_7_lvb_var__u18_1),
	.lvb__phi_decision77_xor_1(bb_7_lvb__phi_decision77_xor_1),
	.lvb__phi_decision76_xor_or_1(bb_7_lvb__phi_decision76_xor_or_1),
	.lvb_channelCounter_049_1(bb_7_lvb_channelCounter_049_1),
	.lvb_mul50_1(bb_7_lvb_mul50_1),
	.lvb_mul_1(bb_7_lvb_mul_1),
	.lvb_bb7_add65_1(bb_7_lvb_bb7_add65_1),
	.lvb_input_global_id_0_1(bb_7_lvb_input_global_id_0_1),
	.lvb_input_global_id_1_1(bb_7_lvb_input_global_id_1_1),
	.lvb_input_global_id_2_1(bb_7_lvb_input_global_id_2_1),
	.lvb_input_acl_hw_wg_id_1(bb_7_lvb_input_acl_hw_wg_id_1),
	.workgroup_size(workgroup_size),
	.start(start)
);


poolingLayer_basic_block_8 poolingLayer_basic_block_8 (
	.clock(clock),
	.resetn(resetn),
	.input_global_size_0(input_global_size_0),
	.input_wii_memcoalesce_param_extrValue_0(bb_0_lvb_bb0_memcoalesce_param_extrValue_0),
	.input_wii_memcoalesce_param_extrValue_1(bb_0_lvb_bb0_memcoalesce_param_extrValue_1),
	.valid_in(bb_7_valid_out_1),
	.stall_out(bb_8_stall_out),
	.input_cmp48(bb_7_lvb_cmp48_1),
	.input_var_(bb_7_lvb_var__1),
	.input_memcoalesce_param_extrValue_8(bb_7_lvb_memcoalesce_param_extrValue_8_1),
	.input_memcoalesce_param_extrValue_5(bb_7_lvb_memcoalesce_param_extrValue_5_1),
	.input_memcoalesce_param_extrValue_6(bb_7_lvb_memcoalesce_param_extrValue_6_1),
	.input_c0_exe1(bb_7_lvb_c0_exe1_1),
	.input_c0_exe2(bb_7_lvb_c0_exe2_1),
	.input_memcoalesce_param_extrValue_2(bb_7_lvb_memcoalesce_param_extrValue_2_1),
	.input_cmp2122(bb_7_lvb_cmp2122_1),
	.input_var__u19(bb_7_lvb_var__u18_1),
	.input__phi_decision77_xor(bb_7_lvb__phi_decision77_xor_1),
	.input__phi_decision76_xor_or(bb_7_lvb__phi_decision76_xor_or_1),
	.input_channelCounter_049(bb_7_lvb_channelCounter_049_1),
	.input_global_id_0(bb_7_lvb_input_global_id_0_1),
	.input_global_id_1(bb_7_lvb_input_global_id_1_1),
	.input_global_id_2(bb_7_lvb_input_global_id_2_1),
	.input_acl_hw_wg_id(bb_7_lvb_input_acl_hw_wg_id_1),
	.valid_out_0(bb_8_valid_out_0),
	.stall_in_0(bb_2_stall_out_0),
	.lvb_cmp48_0(bb_8_lvb_cmp48_0),
	.lvb_var__0(bb_8_lvb_var__0),
	.lvb_memcoalesce_param_extrValue_8_0(bb_8_lvb_memcoalesce_param_extrValue_8_0),
	.lvb_memcoalesce_param_extrValue_5_0(bb_8_lvb_memcoalesce_param_extrValue_5_0),
	.lvb_memcoalesce_param_extrValue_6_0(bb_8_lvb_memcoalesce_param_extrValue_6_0),
	.lvb_c0_exe1_0(bb_8_lvb_c0_exe1_0),
	.lvb_c0_exe2_0(bb_8_lvb_c0_exe2_0),
	.lvb_memcoalesce_param_extrValue_2_0(bb_8_lvb_memcoalesce_param_extrValue_2_0),
	.lvb_cmp2122_0(bb_8_lvb_cmp2122_0),
	.lvb_var__u19_0(bb_8_lvb_var__u19_0),
	.lvb__phi_decision77_xor_0(bb_8_lvb__phi_decision77_xor_0),
	.lvb__phi_decision76_xor_or_0(bb_8_lvb__phi_decision76_xor_or_0),
	.lvb_bb8_add70_0(bb_8_lvb_bb8_add70_0),
	.lvb_input_global_id_0_0(bb_8_lvb_input_global_id_0_0),
	.lvb_input_global_id_1_0(bb_8_lvb_input_global_id_1_0),
	.lvb_input_global_id_2_0(bb_8_lvb_input_global_id_2_0),
	.lvb_input_acl_hw_wg_id_0(bb_8_lvb_input_acl_hw_wg_id_0),
	.valid_out_1(bb_8_valid_out_1),
	.stall_in_1(bb_9_stall_out),
	.lvb_cmp48_1(bb_8_lvb_cmp48_1),
	.lvb_var__1(bb_8_lvb_var__1),
	.lvb_memcoalesce_param_extrValue_8_1(bb_8_lvb_memcoalesce_param_extrValue_8_1),
	.lvb_memcoalesce_param_extrValue_5_1(bb_8_lvb_memcoalesce_param_extrValue_5_1),
	.lvb_memcoalesce_param_extrValue_6_1(bb_8_lvb_memcoalesce_param_extrValue_6_1),
	.lvb_c0_exe1_1(bb_8_lvb_c0_exe1_1),
	.lvb_c0_exe2_1(bb_8_lvb_c0_exe2_1),
	.lvb_memcoalesce_param_extrValue_2_1(bb_8_lvb_memcoalesce_param_extrValue_2_1),
	.lvb_cmp2122_1(bb_8_lvb_cmp2122_1),
	.lvb_var__u19_1(bb_8_lvb_var__u19_1),
	.lvb__phi_decision77_xor_1(bb_8_lvb__phi_decision77_xor_1),
	.lvb__phi_decision76_xor_or_1(bb_8_lvb__phi_decision76_xor_or_1),
	.lvb_bb8_add70_1(bb_8_lvb_bb8_add70_1),
	.lvb_input_global_id_0_1(bb_8_lvb_input_global_id_0_1),
	.lvb_input_global_id_1_1(bb_8_lvb_input_global_id_1_1),
	.lvb_input_global_id_2_1(bb_8_lvb_input_global_id_2_1),
	.lvb_input_acl_hw_wg_id_1(bb_8_lvb_input_acl_hw_wg_id_1),
	.workgroup_size(workgroup_size),
	.start(start)
);


poolingLayer_basic_block_9 poolingLayer_basic_block_9 (
	.clock(clock),
	.resetn(resetn),
	.valid_in(bb_8_valid_out_1),
	.stall_out(bb_9_stall_out),
	.input_acl_hw_wg_id(bb_8_lvb_input_acl_hw_wg_id_1),
	.valid_out(bb_9_valid_out),
	.stall_in(stall_in),
	.lvb_input_acl_hw_wg_id(bb_9_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.start(start)
);


poolingLayer_sys_cycle_time system_cycle_time_module (
	.clock(clock),
	.resetn(resetn),
	.cur_cycle(cur_cycle)
);


assign valid_out = bb_9_valid_out;
assign output_0 = bb_9_lvb_input_acl_hw_wg_id;
assign stall_out = bb_0_stall_out;
assign writes_pending = bb_6_local_bb6_st_select55_active;
assign lsus_active[0] = bb_0_local_bb0_ld_memcoalesce_param_load_0_active;
assign lsus_active[1] = bb_1_local_bb1_ld_memcoalesce_param_load_093_active;
assign lsus_active[2] = bb_3_local_bb3_ld__active;
assign lsus_active[3] = bb_5_local_bb5_ld__active;
assign lsus_active[4] = bb_6_local_bb6_st_select55_active;
assign lsus_active[5] = bb_6_local_bb6_ld__active;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		has_a_write_pending <= 1'b0;
		has_a_lsu_active <= 1'b0;
	end
	else
	begin
		has_a_write_pending <= (|writes_pending);
		has_a_lsu_active <= (|lsus_active);
	end
end

endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module poolingLayer_function_cra_slave
	(
		input 		clock,
		input 		resetn,
		output reg [255:0] 		kernel_arguments,
		output reg 		start,
		input 		finish,
		output reg [31:0] 		global_size_0,
		output reg [31:0] 		global_size_1,
		output reg [31:0] 		global_size_2,
		output reg [31:0] 		num_groups_0,
		output reg [31:0] 		num_groups_1,
		output reg [31:0] 		num_groups_2,
		output reg [31:0] 		local_size_0,
		output reg [31:0] 		local_size_1,
		output reg [31:0] 		local_size_2,
		output reg [31:0] 		global_offset_0,
		output reg [31:0] 		global_offset_1,
		output reg [31:0] 		global_offset_2,
		output reg [31:0] 		work_dim,
		output reg [31:0] 		workgroup_size,
		input 		has_a_lsu_active,
		input 		has_a_write_pending,
		input 		valid_in,
		input 		avs_cra_enable,
		input 		avs_cra_read,
		input 		avs_cra_write,
		input [4:0] 		avs_cra_address,
		input [63:0] 		avs_cra_writedata,
		input [7:0] 		avs_cra_byteenable,
		output reg [63:0] 		avs_cra_readdata,
		output reg 		avs_cra_readdatavalid,
		output 		cra_irq
	);


// This section of the wrapper implements an Avalon Slave Interface used to configure a kernel invocation.
// The few words words contain the status and the workgroup size registers.
// The remaining addressable space is reserved for kernel arguments.
 reg started_NO_SHIFT_REG;
 reg [31:0] status_NO_SHIFT_REG;
 reg [63:0] profile_data_NO_SHIFT_REG;
 reg [31:0] profile_ctrl_NO_SHIFT_REG;
 reg [63:0] profile_start_cycle_NO_SHIFT_REG;
 reg [63:0] profile_stop_cycle_NO_SHIFT_REG;
 reg [63:0] cra_readdata_st1_NO_SHIFT_REG;
 reg [4:0] cra_addr_st1_NO_SHIFT_REG;
 reg cra_read_st1_NO_SHIFT_REG;
wire [63:0] bitenable;

assign bitenable[7:0] = (avs_cra_byteenable[0] ? 8'hFF : 8'h0);
assign bitenable[15:8] = (avs_cra_byteenable[1] ? 8'hFF : 8'h0);
assign bitenable[23:16] = (avs_cra_byteenable[2] ? 8'hFF : 8'h0);
assign bitenable[31:24] = (avs_cra_byteenable[3] ? 8'hFF : 8'h0);
assign bitenable[39:32] = (avs_cra_byteenable[4] ? 8'hFF : 8'h0);
assign bitenable[47:40] = (avs_cra_byteenable[5] ? 8'hFF : 8'h0);
assign bitenable[55:48] = (avs_cra_byteenable[6] ? 8'hFF : 8'h0);
assign bitenable[63:56] = (avs_cra_byteenable[7] ? 8'hFF : 8'h0);
assign cra_irq = (status_NO_SHIFT_REG[1] | status_NO_SHIFT_REG[3]);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		start <= 1'b0;
		started_NO_SHIFT_REG <= 1'b0;
		kernel_arguments <= 256'h0;
		status_NO_SHIFT_REG <= 32'h30000;
		profile_ctrl_NO_SHIFT_REG <= 32'h4;
		profile_start_cycle_NO_SHIFT_REG <= 64'h0;
		profile_stop_cycle_NO_SHIFT_REG <= 64'hFFFFFFFFFFFFFFFF;
		work_dim <= 32'h0;
		workgroup_size <= 32'h0;
		global_size_0 <= 32'h0;
		global_size_1 <= 32'h0;
		global_size_2 <= 32'h0;
		num_groups_0 <= 32'h0;
		num_groups_1 <= 32'h0;
		num_groups_2 <= 32'h0;
		local_size_0 <= 32'h0;
		local_size_1 <= 32'h0;
		local_size_2 <= 32'h0;
		global_offset_0 <= 32'h0;
		global_offset_1 <= 32'h0;
		global_offset_2 <= 32'h0;
	end
	else
	begin
		if (avs_cra_write)
		begin
			case (avs_cra_address)
				5'h0:
				begin
					status_NO_SHIFT_REG[31:16] <= 16'h3;
					status_NO_SHIFT_REG[15:0] <= ((status_NO_SHIFT_REG[15:0] & ~(bitenable[15:0])) | (avs_cra_writedata[15:0] & bitenable[15:0]));
				end

				5'h1:
				begin
					profile_ctrl_NO_SHIFT_REG <= ((profile_ctrl_NO_SHIFT_REG & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h3:
				begin
					profile_start_cycle_NO_SHIFT_REG[31:0] <= ((profile_start_cycle_NO_SHIFT_REG[31:0] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					profile_start_cycle_NO_SHIFT_REG[63:32] <= ((profile_start_cycle_NO_SHIFT_REG[63:32] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h4:
				begin
					profile_stop_cycle_NO_SHIFT_REG[31:0] <= ((profile_stop_cycle_NO_SHIFT_REG[31:0] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					profile_stop_cycle_NO_SHIFT_REG[63:32] <= ((profile_stop_cycle_NO_SHIFT_REG[63:32] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h5:
				begin
					work_dim <= ((work_dim & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					workgroup_size <= ((workgroup_size & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h6:
				begin
					global_size_0 <= ((global_size_0 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					global_size_1 <= ((global_size_1 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h7:
				begin
					global_size_2 <= ((global_size_2 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					num_groups_0 <= ((num_groups_0 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h8:
				begin
					num_groups_1 <= ((num_groups_1 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					num_groups_2 <= ((num_groups_2 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h9:
				begin
					local_size_0 <= ((local_size_0 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					local_size_1 <= ((local_size_1 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hA:
				begin
					local_size_2 <= ((local_size_2 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					global_offset_0 <= ((global_offset_0 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hB:
				begin
					global_offset_1 <= ((global_offset_1 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					global_offset_2 <= ((global_offset_2 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hC:
				begin
					kernel_arguments[31:0] <= ((kernel_arguments[31:0] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[63:32] <= ((kernel_arguments[63:32] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hD:
				begin
					kernel_arguments[95:64] <= ((kernel_arguments[95:64] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[127:96] <= ((kernel_arguments[127:96] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hE:
				begin
					kernel_arguments[159:128] <= ((kernel_arguments[159:128] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[191:160] <= ((kernel_arguments[191:160] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hF:
				begin
					kernel_arguments[223:192] <= ((kernel_arguments[223:192] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[255:224] <= ((kernel_arguments[255:224] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				default:
				begin
				end

			endcase
		end
		else
		begin
			if (status_NO_SHIFT_REG[0])
			begin
				start <= 1'b1;
			end
			if (start)
			begin
				status_NO_SHIFT_REG[0] <= 1'b0;
				started_NO_SHIFT_REG <= 1'b1;
			end
			if (started_NO_SHIFT_REG)
			begin
				start <= 1'b0;
			end
			if (finish)
			begin
				status_NO_SHIFT_REG[1] <= 1'b1;
				started_NO_SHIFT_REG <= 1'b0;
			end
		end
		status_NO_SHIFT_REG[11] <= 1'b0;
		status_NO_SHIFT_REG[12] <= (|has_a_lsu_active);
		status_NO_SHIFT_REG[13] <= (|has_a_write_pending);
		status_NO_SHIFT_REG[14] <= (|valid_in);
		status_NO_SHIFT_REG[15] <= started_NO_SHIFT_REG;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		cra_read_st1_NO_SHIFT_REG <= 1'b0;
		cra_addr_st1_NO_SHIFT_REG <= 5'h0;
		cra_readdata_st1_NO_SHIFT_REG <= 64'h0;
	end
	else
	begin
		cra_read_st1_NO_SHIFT_REG <= avs_cra_read;
		cra_addr_st1_NO_SHIFT_REG <= avs_cra_address;
		case (avs_cra_address)
			5'h0:
			begin
				cra_readdata_st1_NO_SHIFT_REG[31:0] <= status_NO_SHIFT_REG;
				cra_readdata_st1_NO_SHIFT_REG[63:32] <= 32'h0;
			end

			5'h1:
			begin
				cra_readdata_st1_NO_SHIFT_REG[31:0] <= 'x;
				cra_readdata_st1_NO_SHIFT_REG[63:32] <= 32'h0;
			end

			5'h2:
			begin
				cra_readdata_st1_NO_SHIFT_REG[63:0] <= 64'h0;
			end

			5'h3:
			begin
				cra_readdata_st1_NO_SHIFT_REG[63:0] <= 64'h0;
			end

			5'h4:
			begin
				cra_readdata_st1_NO_SHIFT_REG[63:0] <= 64'h0;
			end

			default:
			begin
				cra_readdata_st1_NO_SHIFT_REG <= status_NO_SHIFT_REG;
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		avs_cra_readdatavalid <= 1'b0;
		avs_cra_readdata <= 64'h0;
	end
	else
	begin
		avs_cra_readdatavalid <= cra_read_st1_NO_SHIFT_REG;
		case (cra_addr_st1_NO_SHIFT_REG)
			5'h2:
			begin
				avs_cra_readdata[63:0] <= profile_data_NO_SHIFT_REG;
			end

			default:
			begin
				avs_cra_readdata <= cra_readdata_st1_NO_SHIFT_REG;
			end

		endcase
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module poolingLayer_function_wrapper
	(
		input 		clock,
		input 		resetn,
		input 		clock2x,
		input 		local_router_hang,
		output 		has_a_write_pending,
		output 		has_a_lsu_active,
		input [255:0] 		kernel_arguments,
		input 		start,
		input [31:0] 		global_offset_0,
		input [31:0] 		global_offset_1,
		input [31:0] 		global_offset_2,
		input [31:0] 		work_dim,
		output 		kernel_valid_out,
		input [31:0] 		workgroup_size,
		input [31:0] 		global_size_0,
		input [31:0] 		global_size_1,
		input [31:0] 		global_size_2,
		input [31:0] 		num_groups_0,
		input [31:0] 		num_groups_1,
		input [31:0] 		num_groups_2,
		input [31:0] 		local_size_0,
		input [31:0] 		local_size_1,
		input [31:0] 		local_size_2,
		input [31:0] 		local_id_0,
		input [31:0] 		local_id_1,
		input [31:0] 		local_id_2,
		input [31:0] 		global_id_0,
		input [31:0] 		global_id_1,
		input [31:0] 		global_id_2,
		input [31:0] 		group_id_0,
		input [31:0] 		group_id_1,
		input [31:0] 		group_id_2,
		output 		kernel_stall_out,
		input 		kernel_valid_in,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_enable,
		input [511:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_readdata,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_readdatavalid,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_waitrequest,
		output [31:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_address,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_read,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_write,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_writeack,
		output [511:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_writedata,
		output [63:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_byteenable,
		output [4:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_burstcount,
		output 		avm_local_bb1_ld_memcoalesce_param_load_093_inst0_enable,
		input [511:0] 		avm_local_bb1_ld_memcoalesce_param_load_093_inst0_readdata,
		input 		avm_local_bb1_ld_memcoalesce_param_load_093_inst0_readdatavalid,
		input 		avm_local_bb1_ld_memcoalesce_param_load_093_inst0_waitrequest,
		output [31:0] 		avm_local_bb1_ld_memcoalesce_param_load_093_inst0_address,
		output 		avm_local_bb1_ld_memcoalesce_param_load_093_inst0_read,
		output 		avm_local_bb1_ld_memcoalesce_param_load_093_inst0_write,
		input 		avm_local_bb1_ld_memcoalesce_param_load_093_inst0_writeack,
		output [511:0] 		avm_local_bb1_ld_memcoalesce_param_load_093_inst0_writedata,
		output [63:0] 		avm_local_bb1_ld_memcoalesce_param_load_093_inst0_byteenable,
		output [4:0] 		avm_local_bb1_ld_memcoalesce_param_load_093_inst0_burstcount,
		output 		avm_local_bb3_ld__inst0_enable,
		input [511:0] 		avm_local_bb3_ld__inst0_readdata,
		input 		avm_local_bb3_ld__inst0_readdatavalid,
		input 		avm_local_bb3_ld__inst0_waitrequest,
		output [31:0] 		avm_local_bb3_ld__inst0_address,
		output 		avm_local_bb3_ld__inst0_read,
		output 		avm_local_bb3_ld__inst0_write,
		input 		avm_local_bb3_ld__inst0_writeack,
		output [511:0] 		avm_local_bb3_ld__inst0_writedata,
		output [63:0] 		avm_local_bb3_ld__inst0_byteenable,
		output [4:0] 		avm_local_bb3_ld__inst0_burstcount,
		output 		avm_local_bb5_ld__inst0_enable,
		input [511:0] 		avm_local_bb5_ld__inst0_readdata,
		input 		avm_local_bb5_ld__inst0_readdatavalid,
		input 		avm_local_bb5_ld__inst0_waitrequest,
		output [31:0] 		avm_local_bb5_ld__inst0_address,
		output 		avm_local_bb5_ld__inst0_read,
		output 		avm_local_bb5_ld__inst0_write,
		input 		avm_local_bb5_ld__inst0_writeack,
		output [511:0] 		avm_local_bb5_ld__inst0_writedata,
		output [63:0] 		avm_local_bb5_ld__inst0_byteenable,
		output [4:0] 		avm_local_bb5_ld__inst0_burstcount,
		output 		avm_local_bb6_st_select55_inst0_enable,
		input [511:0] 		avm_local_bb6_st_select55_inst0_readdata,
		input 		avm_local_bb6_st_select55_inst0_readdatavalid,
		input 		avm_local_bb6_st_select55_inst0_waitrequest,
		output [31:0] 		avm_local_bb6_st_select55_inst0_address,
		output 		avm_local_bb6_st_select55_inst0_read,
		output 		avm_local_bb6_st_select55_inst0_write,
		input 		avm_local_bb6_st_select55_inst0_writeack,
		output [511:0] 		avm_local_bb6_st_select55_inst0_writedata,
		output [63:0] 		avm_local_bb6_st_select55_inst0_byteenable,
		output [4:0] 		avm_local_bb6_st_select55_inst0_burstcount,
		output 		avm_local_bb6_ld__inst0_enable,
		input [511:0] 		avm_local_bb6_ld__inst0_readdata,
		input 		avm_local_bb6_ld__inst0_readdatavalid,
		input 		avm_local_bb6_ld__inst0_waitrequest,
		output [31:0] 		avm_local_bb6_ld__inst0_address,
		output 		avm_local_bb6_ld__inst0_read,
		output 		avm_local_bb6_ld__inst0_write,
		input 		avm_local_bb6_ld__inst0_writeack,
		output [511:0] 		avm_local_bb6_ld__inst0_writedata,
		output [63:0] 		avm_local_bb6_ld__inst0_byteenable,
		output [4:0] 		avm_local_bb6_ld__inst0_burstcount
	);

// Responsible for interfacing a kernel with the outside world.

// twoXclock_consumer uses clock2x, even if nobody inside the kernel does. Keeps interface to acl_iface consistent for all kernels.
 reg twoXclock_consumer_NO_SHIFT_REG /* synthesis  preserve  noprune  */;
wire stall_in;
wire stall_out;
wire valid_in;
wire valid_out;

assign kernel_valid_out = valid_out;
assign valid_in = kernel_valid_in;
assign kernel_stall_out = stall_out;
assign stall_in = 1'b0;

always @(posedge clock2x or negedge resetn)
begin
	if (~(resetn))
	begin
		twoXclock_consumer_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		twoXclock_consumer_NO_SHIFT_REG <= 1'b1;
	end
end



// This section instantiates a kernel function block
poolingLayer_function poolingLayer_function_inst0 (
	.clock(clock),
	.resetn(resetn),
	.input_global_id_0(global_id_0),
	.input_global_id_1(global_id_1),
	.input_global_id_2(global_id_2),
	.input_acl_hw_wg_id(),
	.stall_out(stall_out),
	.valid_in(valid_in),
	.output_0(),
	.valid_out(valid_out),
	.stall_in(stall_in),
	.workgroup_size(workgroup_size),
	.avm_local_bb0_ld_memcoalesce_param_load_0_enable(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_enable),
	.avm_local_bb0_ld_memcoalesce_param_load_0_readdata(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_readdata),
	.avm_local_bb0_ld_memcoalesce_param_load_0_readdatavalid(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_readdatavalid),
	.avm_local_bb0_ld_memcoalesce_param_load_0_waitrequest(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_waitrequest),
	.avm_local_bb0_ld_memcoalesce_param_load_0_address(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_address),
	.avm_local_bb0_ld_memcoalesce_param_load_0_read(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_read),
	.avm_local_bb0_ld_memcoalesce_param_load_0_write(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_write),
	.avm_local_bb0_ld_memcoalesce_param_load_0_writeack(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_writeack),
	.avm_local_bb0_ld_memcoalesce_param_load_0_writedata(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_writedata),
	.avm_local_bb0_ld_memcoalesce_param_load_0_byteenable(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_byteenable),
	.avm_local_bb0_ld_memcoalesce_param_load_0_burstcount(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_burstcount),
	.avm_local_bb1_ld_memcoalesce_param_load_093_enable(avm_local_bb1_ld_memcoalesce_param_load_093_inst0_enable),
	.avm_local_bb1_ld_memcoalesce_param_load_093_readdata(avm_local_bb1_ld_memcoalesce_param_load_093_inst0_readdata),
	.avm_local_bb1_ld_memcoalesce_param_load_093_readdatavalid(avm_local_bb1_ld_memcoalesce_param_load_093_inst0_readdatavalid),
	.avm_local_bb1_ld_memcoalesce_param_load_093_waitrequest(avm_local_bb1_ld_memcoalesce_param_load_093_inst0_waitrequest),
	.avm_local_bb1_ld_memcoalesce_param_load_093_address(avm_local_bb1_ld_memcoalesce_param_load_093_inst0_address),
	.avm_local_bb1_ld_memcoalesce_param_load_093_read(avm_local_bb1_ld_memcoalesce_param_load_093_inst0_read),
	.avm_local_bb1_ld_memcoalesce_param_load_093_write(avm_local_bb1_ld_memcoalesce_param_load_093_inst0_write),
	.avm_local_bb1_ld_memcoalesce_param_load_093_writeack(avm_local_bb1_ld_memcoalesce_param_load_093_inst0_writeack),
	.avm_local_bb1_ld_memcoalesce_param_load_093_writedata(avm_local_bb1_ld_memcoalesce_param_load_093_inst0_writedata),
	.avm_local_bb1_ld_memcoalesce_param_load_093_byteenable(avm_local_bb1_ld_memcoalesce_param_load_093_inst0_byteenable),
	.avm_local_bb1_ld_memcoalesce_param_load_093_burstcount(avm_local_bb1_ld_memcoalesce_param_load_093_inst0_burstcount),
	.avm_local_bb3_ld__enable(avm_local_bb3_ld__inst0_enable),
	.avm_local_bb3_ld__readdata(avm_local_bb3_ld__inst0_readdata),
	.avm_local_bb3_ld__readdatavalid(avm_local_bb3_ld__inst0_readdatavalid),
	.avm_local_bb3_ld__waitrequest(avm_local_bb3_ld__inst0_waitrequest),
	.avm_local_bb3_ld__address(avm_local_bb3_ld__inst0_address),
	.avm_local_bb3_ld__read(avm_local_bb3_ld__inst0_read),
	.avm_local_bb3_ld__write(avm_local_bb3_ld__inst0_write),
	.avm_local_bb3_ld__writeack(avm_local_bb3_ld__inst0_writeack),
	.avm_local_bb3_ld__writedata(avm_local_bb3_ld__inst0_writedata),
	.avm_local_bb3_ld__byteenable(avm_local_bb3_ld__inst0_byteenable),
	.avm_local_bb3_ld__burstcount(avm_local_bb3_ld__inst0_burstcount),
	.avm_local_bb5_ld__enable(avm_local_bb5_ld__inst0_enable),
	.avm_local_bb5_ld__readdata(avm_local_bb5_ld__inst0_readdata),
	.avm_local_bb5_ld__readdatavalid(avm_local_bb5_ld__inst0_readdatavalid),
	.avm_local_bb5_ld__waitrequest(avm_local_bb5_ld__inst0_waitrequest),
	.avm_local_bb5_ld__address(avm_local_bb5_ld__inst0_address),
	.avm_local_bb5_ld__read(avm_local_bb5_ld__inst0_read),
	.avm_local_bb5_ld__write(avm_local_bb5_ld__inst0_write),
	.avm_local_bb5_ld__writeack(avm_local_bb5_ld__inst0_writeack),
	.avm_local_bb5_ld__writedata(avm_local_bb5_ld__inst0_writedata),
	.avm_local_bb5_ld__byteenable(avm_local_bb5_ld__inst0_byteenable),
	.avm_local_bb5_ld__burstcount(avm_local_bb5_ld__inst0_burstcount),
	.avm_local_bb6_st_select55_enable(avm_local_bb6_st_select55_inst0_enable),
	.avm_local_bb6_st_select55_readdata(avm_local_bb6_st_select55_inst0_readdata),
	.avm_local_bb6_st_select55_readdatavalid(avm_local_bb6_st_select55_inst0_readdatavalid),
	.avm_local_bb6_st_select55_waitrequest(avm_local_bb6_st_select55_inst0_waitrequest),
	.avm_local_bb6_st_select55_address(avm_local_bb6_st_select55_inst0_address),
	.avm_local_bb6_st_select55_read(avm_local_bb6_st_select55_inst0_read),
	.avm_local_bb6_st_select55_write(avm_local_bb6_st_select55_inst0_write),
	.avm_local_bb6_st_select55_writeack(avm_local_bb6_st_select55_inst0_writeack),
	.avm_local_bb6_st_select55_writedata(avm_local_bb6_st_select55_inst0_writedata),
	.avm_local_bb6_st_select55_byteenable(avm_local_bb6_st_select55_inst0_byteenable),
	.avm_local_bb6_st_select55_burstcount(avm_local_bb6_st_select55_inst0_burstcount),
	.avm_local_bb6_ld__enable(avm_local_bb6_ld__inst0_enable),
	.avm_local_bb6_ld__readdata(avm_local_bb6_ld__inst0_readdata),
	.avm_local_bb6_ld__readdatavalid(avm_local_bb6_ld__inst0_readdatavalid),
	.avm_local_bb6_ld__waitrequest(avm_local_bb6_ld__inst0_waitrequest),
	.avm_local_bb6_ld__address(avm_local_bb6_ld__inst0_address),
	.avm_local_bb6_ld__read(avm_local_bb6_ld__inst0_read),
	.avm_local_bb6_ld__write(avm_local_bb6_ld__inst0_write),
	.avm_local_bb6_ld__writeack(avm_local_bb6_ld__inst0_writeack),
	.avm_local_bb6_ld__writedata(avm_local_bb6_ld__inst0_writedata),
	.avm_local_bb6_ld__byteenable(avm_local_bb6_ld__inst0_byteenable),
	.avm_local_bb6_ld__burstcount(avm_local_bb6_ld__inst0_burstcount),
	.clock2x(clock2x),
	.start(start),
	.input_param(kernel_arguments[191:128]),
	.input_inputFeatureMap(kernel_arguments[63:0]),
	.input_global_size_2(global_size_2),
	.input_outputFeatureMap(kernel_arguments[127:64]),
	.input_global_size_1(global_size_1),
	.input_global_size_0(global_size_0),
	.has_a_write_pending(has_a_write_pending),
	.has_a_lsu_active(has_a_lsu_active)
);



endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module poolingLayer_sys_cycle_time
	(
		input 		clock,
		input 		resetn,
		output [31:0] 		cur_cycle
	);


 reg [31:0] cur_count_NO_SHIFT_REG;

assign cur_cycle = cur_count_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		cur_count_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		cur_count_NO_SHIFT_REG <= (cur_count_NO_SHIFT_REG + 32'h1);
	end
end

endmodule

// (C) 1992-2016 Intel Corporation.                            
// Intel, the Intel logo, Intel, MegaCore, NIOS II, Quartus and TalkBack words    
// and logos are trademarks of Intel Corporation or its subsidiaries in the U.S.  
// and/or other countries. Other marks and brands may be claimed as the property  
// of others. See Trademarks on intel.com for full list of Intel trademarks or    
// the Trademarks & Brands Names Database (if Intel) or See www.Intel.com/legal (if Altera) 
// Your use of Intel Corporation's design tools, logic functions and other        
// software and tools, and its AMPP partner logic functions, and any output       
// files any of the foregoing (including device programming or simulation         
// files), and any associated documentation or information are expressly subject  
// to the terms and conditions of the Altera Program License Subscription         
// Agreement, Intel MegaCore Function License Agreement, or other applicable      
// license agreement, including, without limitation, that your use is for the     
// sole purpose of programming logic devices manufactured by Intel and sold by    
// Intel or its authorized distributors.  Please refer to the applicable          
// agreement for further details.                                                 
    

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module reluLayer_basic_block_0
	(
		input 		clock,
		input 		resetn,
		input 		start,
		input [63:0] 		input_param,
		input [31:0] 		input_global_size_2,
		input [31:0] 		input_global_size_1,
		input [31:0] 		input_global_size_0,
		input 		valid_in,
		output 		stall_out,
		input [31:0] 		input_global_id_0,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out,
		input 		stall_in,
		output [31:0] 		lvb_bb0_ld_,
		output [31:0] 		lvb_bb0_mul20,
		output [31:0] 		lvb_input_global_id_0,
		output [31:0] 		lvb_input_global_id_1,
		output [31:0] 		lvb_input_global_id_2,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		output 		avm_local_bb0_ld__enable,
		input [511:0] 		avm_local_bb0_ld__readdata,
		input 		avm_local_bb0_ld__readdatavalid,
		input 		avm_local_bb0_ld__waitrequest,
		output [31:0] 		avm_local_bb0_ld__address,
		output 		avm_local_bb0_ld__read,
		output 		avm_local_bb0_ld__write,
		input 		avm_local_bb0_ld__writeack,
		output [511:0] 		avm_local_bb0_ld__writedata,
		output [63:0] 		avm_local_bb0_ld__byteenable,
		output [4:0] 		avm_local_bb0_ld__burstcount,
		output 		local_bb0_ld__active,
		input 		clock2x
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_0_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_global_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_global_id_0_staging_reg_NO_SHIFT_REG <= input_global_id_0;
				input_global_id_1_staging_reg_NO_SHIFT_REG <= input_global_id_1;
				input_global_id_2_staging_reg_NO_SHIFT_REG <= input_global_id_2;
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements a registered operation.
// 
wire local_bb0_inputTotalDataNum_inputs_ready;
 reg local_bb0_inputTotalDataNum_wii_reg_NO_SHIFT_REG;
 reg local_bb0_inputTotalDataNum_valid_out_NO_SHIFT_REG;
wire local_bb0_inputTotalDataNum_stall_in;
wire local_bb0_inputTotalDataNum_output_regs_ready;
 reg [63:0] local_bb0_inputTotalDataNum_NO_SHIFT_REG;
wire [63:0] local_bb0_inputTotalDataNum_op_wire;
wire local_bb0_inputTotalDataNum_causedstall;

assign local_bb0_inputTotalDataNum_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb0_inputTotalDataNum_output_regs_ready = (~(local_bb0_inputTotalDataNum_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_inputTotalDataNum_valid_out_NO_SHIFT_REG) | ~(local_bb0_inputTotalDataNum_stall_in))));
assign local_bb0_inputTotalDataNum_op_wire = ((input_param & 64'hFFFFFFFFFFFFFC00) + 64'h2C);
assign merge_node_stall_in_0 = (~(local_bb0_inputTotalDataNum_wii_reg_NO_SHIFT_REG) & (~(local_bb0_inputTotalDataNum_output_regs_ready) | ~(local_bb0_inputTotalDataNum_inputs_ready)));
assign local_bb0_inputTotalDataNum_causedstall = (local_bb0_inputTotalDataNum_inputs_ready && (~(local_bb0_inputTotalDataNum_output_regs_ready) && !(~(local_bb0_inputTotalDataNum_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_inputTotalDataNum_NO_SHIFT_REG <= 'x;
		local_bb0_inputTotalDataNum_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_inputTotalDataNum_NO_SHIFT_REG <= 'x;
			local_bb0_inputTotalDataNum_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_inputTotalDataNum_output_regs_ready)
			begin
				local_bb0_inputTotalDataNum_NO_SHIFT_REG <= local_bb0_inputTotalDataNum_op_wire;
				local_bb0_inputTotalDataNum_valid_out_NO_SHIFT_REG <= local_bb0_inputTotalDataNum_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_inputTotalDataNum_stall_in))
				begin
					local_bb0_inputTotalDataNum_valid_out_NO_SHIFT_REG <= local_bb0_inputTotalDataNum_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_inputTotalDataNum_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_inputTotalDataNum_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_inputTotalDataNum_inputs_ready)
			begin
				local_bb0_inputTotalDataNum_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_mul18_inputs_ready;
 reg local_bb0_mul18_wii_reg_NO_SHIFT_REG;
 reg local_bb0_mul18_valid_out_NO_SHIFT_REG;
wire local_bb0_mul18_stall_in;
wire local_bb0_mul18_output_regs_ready;
wire [31:0] local_bb0_mul18;
 reg local_bb0_mul18_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb0_mul18_valid_pipe_1_NO_SHIFT_REG;
wire local_bb0_mul18_causedstall;

acl_int_mult int_module_local_bb0_mul18 (
	.clock(clock),
	.dataa(input_global_size_2),
	.datab(input_global_size_1),
	.enable(local_bb0_mul18_output_regs_ready),
	.result(local_bb0_mul18)
);

defparam int_module_local_bb0_mul18.INPUT1_WIDTH = 32;
defparam int_module_local_bb0_mul18.INPUT2_WIDTH = 32;
defparam int_module_local_bb0_mul18.OUTPUT_WIDTH = 32;
defparam int_module_local_bb0_mul18.LATENCY = 3;
defparam int_module_local_bb0_mul18.SIGNED = 0;

assign local_bb0_mul18_inputs_ready = merge_node_valid_out_1_NO_SHIFT_REG;
assign local_bb0_mul18_output_regs_ready = (~(local_bb0_mul18_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_mul18_valid_out_NO_SHIFT_REG) | ~(local_bb0_mul18_stall_in))));
assign merge_node_stall_in_1 = (~(local_bb0_mul18_wii_reg_NO_SHIFT_REG) & (~(local_bb0_mul18_output_regs_ready) | ~(local_bb0_mul18_inputs_ready)));
assign local_bb0_mul18_causedstall = (local_bb0_mul18_inputs_ready && (~(local_bb0_mul18_output_regs_ready) && !(~(local_bb0_mul18_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_mul18_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb0_mul18_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_mul18_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
			local_bb0_mul18_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_mul18_output_regs_ready)
			begin
				local_bb0_mul18_valid_pipe_0_NO_SHIFT_REG <= local_bb0_mul18_inputs_ready;
				local_bb0_mul18_valid_pipe_1_NO_SHIFT_REG <= local_bb0_mul18_valid_pipe_0_NO_SHIFT_REG;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_mul18_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_mul18_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_mul18_output_regs_ready)
			begin
				local_bb0_mul18_valid_out_NO_SHIFT_REG <= local_bb0_mul18_valid_pipe_1_NO_SHIFT_REG;
			end
			else
			begin
				if (~(local_bb0_mul18_stall_in))
				begin
					local_bb0_mul18_valid_out_NO_SHIFT_REG <= local_bb0_mul18_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_mul18_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_mul18_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_mul18_valid_pipe_1_NO_SHIFT_REG)
			begin
				local_bb0_mul18_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_6to6_bb0_inputTotalDataNum_valid_out;
wire rstag_6to6_bb0_inputTotalDataNum_stall_in;
wire rstag_6to6_bb0_inputTotalDataNum_inputs_ready;
wire rstag_6to6_bb0_inputTotalDataNum_stall_local;
 reg rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG;
wire rstag_6to6_bb0_inputTotalDataNum_combined_valid;
 reg [63:0] rstag_6to6_bb0_inputTotalDataNum_staging_reg_NO_SHIFT_REG;
wire [63:0] rstag_6to6_bb0_inputTotalDataNum;

assign rstag_6to6_bb0_inputTotalDataNum_inputs_ready = local_bb0_inputTotalDataNum_valid_out_NO_SHIFT_REG;
assign rstag_6to6_bb0_inputTotalDataNum = (rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG ? rstag_6to6_bb0_inputTotalDataNum_staging_reg_NO_SHIFT_REG : ((local_bb0_inputTotalDataNum_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFC2C) | 64'h2C));
assign rstag_6to6_bb0_inputTotalDataNum_combined_valid = (rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG | rstag_6to6_bb0_inputTotalDataNum_inputs_ready);
assign rstag_6to6_bb0_inputTotalDataNum_valid_out = rstag_6to6_bb0_inputTotalDataNum_combined_valid;
assign rstag_6to6_bb0_inputTotalDataNum_stall_local = rstag_6to6_bb0_inputTotalDataNum_stall_in;
assign local_bb0_inputTotalDataNum_stall_in = (|rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_6to6_bb0_inputTotalDataNum_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (start)
		begin
			rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (rstag_6to6_bb0_inputTotalDataNum_stall_local)
			begin
				if (~(rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG))
				begin
					rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG <= rstag_6to6_bb0_inputTotalDataNum_inputs_ready;
				end
			end
			else
			begin
				rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG <= 1'b0;
			end
		end
		if (~(rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG))
		begin
			rstag_6to6_bb0_inputTotalDataNum_staging_reg_NO_SHIFT_REG <= ((local_bb0_inputTotalDataNum_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFC2C) | 64'h2C);
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_mul20_inputs_ready;
 reg local_bb0_mul20_wii_reg_NO_SHIFT_REG;
 reg local_bb0_mul20_valid_out_NO_SHIFT_REG;
wire local_bb0_mul20_stall_in;
wire local_bb0_mul20_output_regs_ready;
wire [31:0] local_bb0_mul20;
 reg local_bb0_mul20_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb0_mul20_valid_pipe_1_NO_SHIFT_REG;
wire local_bb0_mul20_causedstall;

acl_int_mult int_module_local_bb0_mul20 (
	.clock(clock),
	.dataa(local_bb0_mul18),
	.datab(input_global_size_0),
	.enable(local_bb0_mul20_output_regs_ready),
	.result(local_bb0_mul20)
);

defparam int_module_local_bb0_mul20.INPUT1_WIDTH = 32;
defparam int_module_local_bb0_mul20.INPUT2_WIDTH = 32;
defparam int_module_local_bb0_mul20.OUTPUT_WIDTH = 32;
defparam int_module_local_bb0_mul20.LATENCY = 3;
defparam int_module_local_bb0_mul20.SIGNED = 0;

assign local_bb0_mul20_inputs_ready = (local_bb0_mul18_valid_out_NO_SHIFT_REG & merge_node_valid_out_2_NO_SHIFT_REG);
assign local_bb0_mul20_output_regs_ready = (~(local_bb0_mul20_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_mul20_valid_out_NO_SHIFT_REG) | ~(local_bb0_mul20_stall_in))));
assign local_bb0_mul18_stall_in = (~(local_bb0_mul20_wii_reg_NO_SHIFT_REG) & (~(local_bb0_mul20_output_regs_ready) | ~(local_bb0_mul20_inputs_ready)));
assign merge_node_stall_in_2 = (~(local_bb0_mul20_wii_reg_NO_SHIFT_REG) & (~(local_bb0_mul20_output_regs_ready) | ~(local_bb0_mul20_inputs_ready)));
assign local_bb0_mul20_causedstall = (local_bb0_mul20_inputs_ready && (~(local_bb0_mul20_output_regs_ready) && !(~(local_bb0_mul20_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_mul20_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb0_mul20_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_mul20_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
			local_bb0_mul20_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_mul20_output_regs_ready)
			begin
				local_bb0_mul20_valid_pipe_0_NO_SHIFT_REG <= local_bb0_mul20_inputs_ready;
				local_bb0_mul20_valid_pipe_1_NO_SHIFT_REG <= local_bb0_mul20_valid_pipe_0_NO_SHIFT_REG;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_mul20_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_mul20_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_mul20_output_regs_ready)
			begin
				local_bb0_mul20_valid_out_NO_SHIFT_REG <= local_bb0_mul20_valid_pipe_1_NO_SHIFT_REG;
			end
			else
			begin
				if (~(local_bb0_mul20_stall_in))
				begin
					local_bb0_mul20_valid_out_NO_SHIFT_REG <= local_bb0_mul20_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_mul20_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_mul20_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_mul20_valid_pipe_1_NO_SHIFT_REG)
			begin
				local_bb0_mul20_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_ld__inputs_ready;
 reg local_bb0_ld__wii_reg_NO_SHIFT_REG;
 reg local_bb0_ld__valid_out_NO_SHIFT_REG;
wire local_bb0_ld__stall_in;
wire local_bb0_ld__output_regs_ready;
wire local_bb0_ld__fu_stall_out;
wire local_bb0_ld__fu_valid_out;
wire [31:0] local_bb0_ld__lsu_dataout;
 reg [31:0] local_bb0_ld__NO_SHIFT_REG;
wire local_bb0_ld__causedstall;

lsu_top lsu_local_bb0_ld_ (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb0_ld__fu_stall_out),
	.i_valid((~(local_bb0_ld__wii_reg_NO_SHIFT_REG) & local_bb0_ld__inputs_ready)),
	.i_address(((rstag_6to6_bb0_inputTotalDataNum & 64'hFFFFFFFFFFFFFC2C) | 64'h2C)),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(1'b0),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb0_ld__output_regs_ready)),
	.o_valid(local_bb0_ld__fu_valid_out),
	.o_readdata(local_bb0_ld__lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb0_ld__active),
	.avm_address(avm_local_bb0_ld__address),
	.avm_read(avm_local_bb0_ld__read),
	.avm_enable(avm_local_bb0_ld__enable),
	.avm_readdata(avm_local_bb0_ld__readdata),
	.avm_write(avm_local_bb0_ld__write),
	.avm_writeack(avm_local_bb0_ld__writeack),
	.avm_burstcount(avm_local_bb0_ld__burstcount),
	.avm_writedata(avm_local_bb0_ld__writedata),
	.avm_byteenable(avm_local_bb0_ld__byteenable),
	.avm_waitrequest(avm_local_bb0_ld__waitrequest),
	.avm_readdatavalid(avm_local_bb0_ld__readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb0_ld_.AWIDTH = 32;
defparam lsu_local_bb0_ld_.WIDTH_BYTES = 4;
defparam lsu_local_bb0_ld_.MWIDTH_BYTES = 64;
defparam lsu_local_bb0_ld_.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb0_ld_.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb0_ld_.READ = 1;
defparam lsu_local_bb0_ld_.ATOMIC = 0;
defparam lsu_local_bb0_ld_.WIDTH = 32;
defparam lsu_local_bb0_ld_.MWIDTH = 512;
defparam lsu_local_bb0_ld_.ATOMIC_WIDTH = 3;
defparam lsu_local_bb0_ld_.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb0_ld_.KERNEL_SIDE_MEM_LATENCY = 1;
defparam lsu_local_bb0_ld_.MEMORY_SIDE_MEM_LATENCY = 0;
defparam lsu_local_bb0_ld_.USE_WRITE_ACK = 0;
defparam lsu_local_bb0_ld_.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb0_ld_.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb0_ld_.NUMBER_BANKS = 1;
defparam lsu_local_bb0_ld_.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb0_ld_.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb0_ld_.USEINPUTFIFO = 0;
defparam lsu_local_bb0_ld_.USECACHING = 0;
defparam lsu_local_bb0_ld_.USEOUTPUTFIFO = 1;
defparam lsu_local_bb0_ld_.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb0_ld_.ADDRSPACE = 1;
defparam lsu_local_bb0_ld_.STYLE = "SIMPLE";

assign local_bb0_ld__inputs_ready = rstag_6to6_bb0_inputTotalDataNum_valid_out;
assign local_bb0_ld__output_regs_ready = (~(local_bb0_ld__wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_ld__valid_out_NO_SHIFT_REG) | ~(local_bb0_ld__stall_in))));
assign rstag_6to6_bb0_inputTotalDataNum_stall_in = (~(local_bb0_ld__wii_reg_NO_SHIFT_REG) & (local_bb0_ld__fu_stall_out | ~((~(local_bb0_ld__wii_reg_NO_SHIFT_REG) & local_bb0_ld__inputs_ready))));
assign local_bb0_ld__causedstall = ((~(local_bb0_ld__wii_reg_NO_SHIFT_REG) & local_bb0_ld__inputs_ready) && (local_bb0_ld__fu_stall_out && !(~(local_bb0_ld__output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_ld__NO_SHIFT_REG <= 'x;
		local_bb0_ld__valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_ld__NO_SHIFT_REG <= 'x;
			local_bb0_ld__valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_ld__output_regs_ready)
			begin
				local_bb0_ld__NO_SHIFT_REG <= local_bb0_ld__lsu_dataout;
				local_bb0_ld__valid_out_NO_SHIFT_REG <= local_bb0_ld__fu_valid_out;
			end
			else
			begin
				if (~(local_bb0_ld__stall_in))
				begin
					local_bb0_ld__valid_out_NO_SHIFT_REG <= local_bb0_ld__wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_ld__wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_ld__wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_ld__fu_valid_out)
			begin
				local_bb0_ld__wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_7to7_bb0_ld__valid_out;
wire rstag_7to7_bb0_ld__stall_in;
wire rstag_7to7_bb0_ld__inputs_ready;
wire rstag_7to7_bb0_ld__stall_local;
 reg rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG;
wire rstag_7to7_bb0_ld__combined_valid;
 reg [31:0] rstag_7to7_bb0_ld__staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_7to7_bb0_ld_;

assign rstag_7to7_bb0_ld__inputs_ready = local_bb0_ld__valid_out_NO_SHIFT_REG;
assign rstag_7to7_bb0_ld_ = (rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG ? rstag_7to7_bb0_ld__staging_reg_NO_SHIFT_REG : local_bb0_ld__NO_SHIFT_REG);
assign rstag_7to7_bb0_ld__combined_valid = (rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG | rstag_7to7_bb0_ld__inputs_ready);
assign rstag_7to7_bb0_ld__valid_out = rstag_7to7_bb0_ld__combined_valid;
assign rstag_7to7_bb0_ld__stall_local = rstag_7to7_bb0_ld__stall_in;
assign local_bb0_ld__stall_in = (|rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_7to7_bb0_ld__staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (start)
		begin
			rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (rstag_7to7_bb0_ld__stall_local)
			begin
				if (~(rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG))
				begin
					rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG <= rstag_7to7_bb0_ld__inputs_ready;
				end
			end
			else
			begin
				rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
			end
		end
		if (~(rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG))
		begin
			rstag_7to7_bb0_ld__staging_reg_NO_SHIFT_REG <= local_bb0_ld__NO_SHIFT_REG;
		end
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg [31:0] lvb_bb0_ld__reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb0_mul20_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (merge_node_valid_out_3_NO_SHIFT_REG & local_bb0_mul20_valid_out_NO_SHIFT_REG & rstag_7to7_bb0_ld__valid_out);
assign branch_var__output_regs_ready = (~(stall_in) | ~(branch_node_valid_out_NO_SHIFT_REG));
assign merge_node_stall_in_3 = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb0_mul20_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rstag_7to7_bb0_ld__stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_bb0_ld_ = lvb_bb0_ld__reg_NO_SHIFT_REG;
assign lvb_bb0_mul20 = lvb_bb0_mul20_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0 = lvb_input_global_id_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1 = lvb_input_global_id_1_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2 = lvb_input_global_id_2_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id = lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;
assign combined_branch_stall_in_signal = stall_in;
assign valid_out = branch_node_valid_out_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
		lvb_bb0_ld__reg_NO_SHIFT_REG <= 'x;
		lvb_bb0_mul20_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_bb0_ld__reg_NO_SHIFT_REG <= rstag_7to7_bb0_ld_;
			lvb_bb0_mul20_reg_NO_SHIFT_REG <= local_bb0_mul20;
			lvb_input_global_id_0_reg_NO_SHIFT_REG <= local_lvm_input_global_id_0_NO_SHIFT_REG;
			lvb_input_global_id_1_reg_NO_SHIFT_REG <= local_lvm_input_global_id_1_NO_SHIFT_REG;
			lvb_input_global_id_2_reg_NO_SHIFT_REG <= local_lvm_input_global_id_2_NO_SHIFT_REG;
			lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module reluLayer_basic_block_1
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_global_size_1,
		input [31:0] 		input_global_size_2,
		input [31:0] 		input_wii_ld_,
		input [31:0] 		input_wii_mul20,
		input 		valid_in,
		output 		stall_out,
		input [31:0] 		input_global_id_0,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out,
		input 		stall_in,
		output [31:0] 		lvb_bb1_c4_exe1,
		output 		lvb_bb1_c4_exe2,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		input 		start
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_0_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_global_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_global_id_0_staging_reg_NO_SHIFT_REG <= input_global_id_0;
				input_global_id_1_staging_reg_NO_SHIFT_REG <= input_global_id_1;
				input_global_id_2_staging_reg_NO_SHIFT_REG <= input_global_id_2;
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(*)
begin
	merge_node_valid_out_1_NO_SHIFT_REG = merge_node_valid_out_0_NO_SHIFT_REG;
	merge_node_valid_out_2_NO_SHIFT_REG = merge_node_valid_out_0_NO_SHIFT_REG;
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1_c1_eni1_stall_local;
wire [127:0] local_bb1_c1_eni1;

assign local_bb1_c1_eni1[31:0] = 32'bx;
assign local_bb1_c1_eni1[63:32] = local_lvm_input_global_id_0_NO_SHIFT_REG;
assign local_bb1_c1_eni1[127:64] = 64'bx;

// Register node:
//  * latency = 8
//  * capacity = 8
 logic rnode_1to9_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to9_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to9_input_acl_hw_wg_id_0_NO_SHIFT_REG;
 logic rnode_1to9_input_acl_hw_wg_id_0_reg_9_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to9_input_acl_hw_wg_id_0_reg_9_NO_SHIFT_REG;
 logic rnode_1to9_input_acl_hw_wg_id_0_valid_out_reg_9_NO_SHIFT_REG;
 logic rnode_1to9_input_acl_hw_wg_id_0_stall_in_reg_9_NO_SHIFT_REG;
 logic rnode_1to9_input_acl_hw_wg_id_0_stall_out_reg_9_NO_SHIFT_REG;

acl_data_fifo rnode_1to9_input_acl_hw_wg_id_0_reg_9_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to9_input_acl_hw_wg_id_0_reg_9_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to9_input_acl_hw_wg_id_0_stall_in_reg_9_NO_SHIFT_REG),
	.valid_out(rnode_1to9_input_acl_hw_wg_id_0_valid_out_reg_9_NO_SHIFT_REG),
	.stall_out(rnode_1to9_input_acl_hw_wg_id_0_stall_out_reg_9_NO_SHIFT_REG),
	.data_in(local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG),
	.data_out(rnode_1to9_input_acl_hw_wg_id_0_reg_9_NO_SHIFT_REG)
);

defparam rnode_1to9_input_acl_hw_wg_id_0_reg_9_fifo.DEPTH = 9;
defparam rnode_1to9_input_acl_hw_wg_id_0_reg_9_fifo.DATA_WIDTH = 32;
defparam rnode_1to9_input_acl_hw_wg_id_0_reg_9_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to9_input_acl_hw_wg_id_0_reg_9_fifo.IMPL = "ram_plus_reg";

assign rnode_1to9_input_acl_hw_wg_id_0_reg_9_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_3_NO_SHIFT_REG;
assign merge_node_stall_in_3 = rnode_1to9_input_acl_hw_wg_id_0_stall_out_reg_9_NO_SHIFT_REG;
assign rnode_1to9_input_acl_hw_wg_id_0_NO_SHIFT_REG = rnode_1to9_input_acl_hw_wg_id_0_reg_9_NO_SHIFT_REG;
assign rnode_1to9_input_acl_hw_wg_id_0_stall_in_reg_9_NO_SHIFT_REG = rnode_1to9_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG;
assign rnode_1to9_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG = rnode_1to9_input_acl_hw_wg_id_0_valid_out_reg_9_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb1_c1_eni2_stall_local;
wire [127:0] local_bb1_c1_eni2;

assign local_bb1_c1_eni2[63:0] = local_bb1_c1_eni1[63:0];
assign local_bb1_c1_eni2[95:64] = local_lvm_input_global_id_1_NO_SHIFT_REG;
assign local_bb1_c1_eni2[127:96] = local_bb1_c1_eni1[127:96];

// This section implements an unregistered operation.
// 
wire local_bb1_c1_eni3_valid_out;
wire local_bb1_c1_eni3_stall_in;
wire local_bb1_c1_eni3_inputs_ready;
wire local_bb1_c1_eni3_stall_local;
wire [127:0] local_bb1_c1_eni3;

assign local_bb1_c1_eni3_inputs_ready = (merge_node_valid_out_0_NO_SHIFT_REG & merge_node_valid_out_1_NO_SHIFT_REG & merge_node_valid_out_2_NO_SHIFT_REG);
assign local_bb1_c1_eni3[95:0] = local_bb1_c1_eni2[95:0];
assign local_bb1_c1_eni3[127:96] = local_lvm_input_global_id_2_NO_SHIFT_REG;
assign local_bb1_c1_eni3_valid_out = local_bb1_c1_eni3_inputs_ready;
assign local_bb1_c1_eni3_stall_local = local_bb1_c1_eni3_stall_in;
assign merge_node_stall_in_0 = (local_bb1_c1_eni3_stall_local | ~(local_bb1_c1_eni3_inputs_ready));
assign merge_node_stall_in_1 = (local_bb1_c1_eni3_stall_local | ~(local_bb1_c1_eni3_inputs_ready));
assign merge_node_stall_in_2 = (local_bb1_c1_eni3_stall_local | ~(local_bb1_c1_eni3_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb1_c1_enter_c1_eni3_valid_out_0;
wire local_bb1_c1_enter_c1_eni3_stall_in_0;
wire local_bb1_c1_enter_c1_eni3_valid_out_1;
wire local_bb1_c1_enter_c1_eni3_stall_in_1;
wire local_bb1_c1_enter_c1_eni3_valid_out_2;
wire local_bb1_c1_enter_c1_eni3_stall_in_2;
wire local_bb1_c1_enter_c1_eni3_valid_out_3;
wire local_bb1_c1_enter_c1_eni3_stall_in_3;
wire local_bb1_c1_enter_c1_eni3_inputs_ready;
wire local_bb1_c1_enter_c1_eni3_stall_local;
wire local_bb1_c1_enter_c1_eni3_input_accepted;
wire [127:0] local_bb1_c1_enter_c1_eni3;
wire local_bb1_c1_exit_c1_exi3_enable;
wire local_bb1_c1_exit_c1_exi3_entry_stall;
wire local_bb1_c1_enter_c1_eni3_valid_bit;
wire local_bb1_c1_exit_c1_exi3_output_regs_ready;
wire local_bb1_c1_exit_c1_exi3_valid_in;
wire local_bb1_c1_exit_c1_exi3_phases;
wire local_bb1_c1_enter_c1_eni3_inc_pipelined_thread;
wire local_bb1_c1_enter_c1_eni3_dec_pipelined_thread;
wire local_bb1_c1_enter_c1_eni3_fu_stall_out;

assign local_bb1_c1_enter_c1_eni3_inputs_ready = local_bb1_c1_eni3_valid_out;
assign local_bb1_c1_enter_c1_eni3 = local_bb1_c1_eni3;
assign local_bb1_c1_enter_c1_eni3_input_accepted = (local_bb1_c1_enter_c1_eni3_inputs_ready && !(local_bb1_c1_exit_c1_exi3_entry_stall));
assign local_bb1_c1_enter_c1_eni3_valid_bit = local_bb1_c1_enter_c1_eni3_input_accepted;
assign local_bb1_c1_enter_c1_eni3_inc_pipelined_thread = 1'b1;
assign local_bb1_c1_enter_c1_eni3_dec_pipelined_thread = ~(1'b0);
assign local_bb1_c1_enter_c1_eni3_fu_stall_out = (~(local_bb1_c1_enter_c1_eni3_inputs_ready) | local_bb1_c1_exit_c1_exi3_entry_stall);
assign local_bb1_c1_enter_c1_eni3_stall_local = (local_bb1_c1_enter_c1_eni3_stall_in_0 | local_bb1_c1_enter_c1_eni3_stall_in_1 | local_bb1_c1_enter_c1_eni3_stall_in_2 | local_bb1_c1_enter_c1_eni3_stall_in_3);
assign local_bb1_c1_enter_c1_eni3_valid_out_0 = local_bb1_c1_enter_c1_eni3_inputs_ready;
assign local_bb1_c1_enter_c1_eni3_valid_out_1 = local_bb1_c1_enter_c1_eni3_inputs_ready;
assign local_bb1_c1_enter_c1_eni3_valid_out_2 = local_bb1_c1_enter_c1_eni3_inputs_ready;
assign local_bb1_c1_enter_c1_eni3_valid_out_3 = local_bb1_c1_enter_c1_eni3_inputs_ready;
assign local_bb1_c1_eni3_stall_in = (|local_bb1_c1_enter_c1_eni3_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb1_c1_ene1_valid_out;
wire local_bb1_c1_ene1_stall_in;
wire local_bb1_c1_ene1_inputs_ready;
wire local_bb1_c1_ene1_stall_local;
wire [31:0] local_bb1_c1_ene1;

assign local_bb1_c1_ene1_inputs_ready = local_bb1_c1_enter_c1_eni3_valid_out_0;
assign local_bb1_c1_ene1[31:0] = local_bb1_c1_enter_c1_eni3[63:32];
assign local_bb1_c1_ene1_valid_out = 1'b1;
assign local_bb1_c1_enter_c1_eni3_stall_in_0 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c1_ene2_valid_out;
wire local_bb1_c1_ene2_stall_in;
wire local_bb1_c1_ene2_inputs_ready;
wire local_bb1_c1_ene2_stall_local;
wire [31:0] local_bb1_c1_ene2;

assign local_bb1_c1_ene2_inputs_ready = local_bb1_c1_enter_c1_eni3_valid_out_1;
assign local_bb1_c1_ene2[31:0] = local_bb1_c1_enter_c1_eni3[95:64];
assign local_bb1_c1_ene2_valid_out = 1'b1;
assign local_bb1_c1_enter_c1_eni3_stall_in_1 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c1_ene3_valid_out;
wire local_bb1_c1_ene3_stall_in;
wire local_bb1_c1_ene3_inputs_ready;
wire local_bb1_c1_ene3_stall_local;
wire [31:0] local_bb1_c1_ene3;

assign local_bb1_c1_ene3_inputs_ready = local_bb1_c1_enter_c1_eni3_valid_out_2;
assign local_bb1_c1_ene3[31:0] = local_bb1_c1_enter_c1_eni3[127:96];
assign local_bb1_c1_ene3_valid_out = 1'b1;
assign local_bb1_c1_enter_c1_eni3_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire SFC_1_VALID_1_1_0_valid_out;
wire SFC_1_VALID_1_1_0_stall_in;
wire SFC_1_VALID_1_1_0_inputs_ready;
wire SFC_1_VALID_1_1_0_stall_local;
wire SFC_1_VALID_1_1_0;

assign SFC_1_VALID_1_1_0_inputs_ready = local_bb1_c1_enter_c1_eni3_valid_out_3;
assign SFC_1_VALID_1_1_0 = local_bb1_c1_enter_c1_eni3_valid_bit;
assign SFC_1_VALID_1_1_0_valid_out = 1'b1;
assign local_bb1_c1_enter_c1_eni3_stall_in_3 = 1'b0;

// This section implements a registered operation.
// 
wire local_bb1_var__inputs_ready;
 reg local_bb1_var__valid_out_NO_SHIFT_REG;
wire local_bb1_var__stall_in;
wire local_bb1_var__output_regs_ready;
wire [31:0] local_bb1_var_;
 reg local_bb1_var__valid_pipe_0_NO_SHIFT_REG;
 reg local_bb1_var__valid_pipe_1_NO_SHIFT_REG;
wire local_bb1_var__causedstall;

acl_int_mult int_module_local_bb1_var_ (
	.clock(clock),
	.dataa(local_bb1_c1_ene1),
	.datab(input_global_size_1),
	.enable(local_bb1_var__output_regs_ready),
	.result(local_bb1_var_)
);

defparam int_module_local_bb1_var_.INPUT1_WIDTH = 32;
defparam int_module_local_bb1_var_.INPUT2_WIDTH = 32;
defparam int_module_local_bb1_var_.OUTPUT_WIDTH = 32;
defparam int_module_local_bb1_var_.LATENCY = 3;
defparam int_module_local_bb1_var_.SIGNED = 0;

assign local_bb1_var__inputs_ready = 1'b1;
assign local_bb1_var__output_regs_ready = local_bb1_c1_exit_c1_exi3_enable;
assign local_bb1_c1_ene1_stall_in = 1'b0;
assign local_bb1_var__causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c1_exit_c1_exi3_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb1_var__valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb1_var__valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb1_var__output_regs_ready)
		begin
			local_bb1_var__valid_pipe_0_NO_SHIFT_REG <= 1'b1;
			local_bb1_var__valid_pipe_1_NO_SHIFT_REG <= local_bb1_var__valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb1_var__valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb1_var__output_regs_ready)
		begin
			local_bb1_var__valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb1_var__stall_in))
			begin
				local_bb1_var__valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb1_c1_ene2_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene2_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb1_c1_ene2_0_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene2_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb1_c1_ene2_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene2_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene2_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene2_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb1_c1_ene2_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb1_c1_ene2_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb1_c1_ene2_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb1_c1_ene2_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb1_c1_ene2_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb1_c1_ene2),
	.data_out(rnode_1to2_bb1_c1_ene2_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb1_c1_ene2_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb1_c1_ene2_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb1_c1_ene2_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb1_c1_ene2_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb1_c1_ene2_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb1_c1_ene2_stall_in = 1'b0;
assign rnode_1to2_bb1_c1_ene2_0_NO_SHIFT_REG = rnode_1to2_bb1_c1_ene2_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb1_c1_ene2_0_stall_in_reg_2_NO_SHIFT_REG = ~(local_bb1_c1_exit_c1_exi3_enable);
assign rnode_1to2_bb1_c1_ene2_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb1_c1_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb1_c1_ene3_0_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene3_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb1_c1_ene3_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene3_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene3_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene3_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb1_c1_ene3_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb1_c1_ene3_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb1_c1_ene3_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb1_c1_ene3_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb1_c1_ene3_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb1_c1_ene3),
	.data_out(rnode_1to2_bb1_c1_ene3_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb1_c1_ene3_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb1_c1_ene3_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb1_c1_ene3_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb1_c1_ene3_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb1_c1_ene3_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb1_c1_ene3_stall_in = 1'b0;
assign rnode_1to2_bb1_c1_ene3_0_NO_SHIFT_REG = rnode_1to2_bb1_c1_ene3_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb1_c1_ene3_0_stall_in_reg_2_NO_SHIFT_REG = ~(local_bb1_c1_exit_c1_exi3_enable);
assign rnode_1to2_bb1_c1_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_1_VALID_1_2_0_inputs_ready;
 reg SFC_1_VALID_1_2_0_valid_out_NO_SHIFT_REG;
wire SFC_1_VALID_1_2_0_stall_in;
wire SFC_1_VALID_1_2_0_output_regs_ready;
 reg SFC_1_VALID_1_2_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_1_VALID_1_2_0_causedstall;

assign SFC_1_VALID_1_2_0_inputs_ready = 1'b1;
assign SFC_1_VALID_1_2_0_output_regs_ready = local_bb1_c1_exit_c1_exi3_enable;
assign SFC_1_VALID_1_1_0_stall_in = 1'b0;
assign SFC_1_VALID_1_2_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c1_exit_c1_exi3_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_1_VALID_1_2_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_1_VALID_1_2_0_output_regs_ready)
		begin
			SFC_1_VALID_1_2_0_NO_SHIFT_REG <= SFC_1_VALID_1_1_0;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1_c1_exi1_stall_local;
wire [127:0] local_bb1_c1_exi1;

assign local_bb1_c1_exi1[31:0] = 32'bx;
assign local_bb1_c1_exi1[63:32] = local_bb1_var_;
assign local_bb1_c1_exi1[127:64] = 64'bx;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb1_c1_ene2_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene2_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb1_c1_ene2_0_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene2_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb1_c1_ene2_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene2_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene2_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene2_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb1_c1_ene2_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb1_c1_ene2_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb1_c1_ene2_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb1_c1_ene2_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb1_c1_ene2_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb1_c1_ene2_0_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb1_c1_ene2_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb1_c1_ene2_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb1_c1_ene2_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb1_c1_ene2_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb1_c1_ene2_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb1_c1_ene2_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb1_c1_ene2_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb1_c1_ene2_0_NO_SHIFT_REG = rnode_2to3_bb1_c1_ene2_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb1_c1_ene2_0_stall_in_reg_3_NO_SHIFT_REG = ~(local_bb1_c1_exit_c1_exi3_enable);
assign rnode_2to3_bb1_c1_ene2_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb1_c1_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb1_c1_ene3_0_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene3_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb1_c1_ene3_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene3_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene3_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene3_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb1_c1_ene3_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb1_c1_ene3_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb1_c1_ene3_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb1_c1_ene3_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb1_c1_ene3_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb1_c1_ene3_0_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb1_c1_ene3_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb1_c1_ene3_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb1_c1_ene3_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb1_c1_ene3_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb1_c1_ene3_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb1_c1_ene3_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb1_c1_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb1_c1_ene3_0_NO_SHIFT_REG = rnode_2to3_bb1_c1_ene3_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb1_c1_ene3_0_stall_in_reg_3_NO_SHIFT_REG = ~(local_bb1_c1_exit_c1_exi3_enable);
assign rnode_2to3_bb1_c1_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_1_VALID_2_3_0_inputs_ready;
 reg SFC_1_VALID_2_3_0_valid_out_NO_SHIFT_REG;
wire SFC_1_VALID_2_3_0_stall_in;
wire SFC_1_VALID_2_3_0_output_regs_ready;
 reg SFC_1_VALID_2_3_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_1_VALID_2_3_0_causedstall;

assign SFC_1_VALID_2_3_0_inputs_ready = 1'b1;
assign SFC_1_VALID_2_3_0_output_regs_ready = local_bb1_c1_exit_c1_exi3_enable;
assign SFC_1_VALID_1_2_0_stall_in = 1'b0;
assign SFC_1_VALID_2_3_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c1_exit_c1_exi3_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_1_VALID_2_3_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_1_VALID_2_3_0_output_regs_ready)
		begin
			SFC_1_VALID_2_3_0_NO_SHIFT_REG <= SFC_1_VALID_1_2_0_NO_SHIFT_REG;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb1_c1_ene2_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene2_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb1_c1_ene2_0_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene2_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb1_c1_ene2_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene2_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene2_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene2_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb1_c1_ene2_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb1_c1_ene2_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb1_c1_ene2_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb1_c1_ene2_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb1_c1_ene2_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb1_c1_ene2_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb1_c1_ene2_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb1_c1_ene2_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb1_c1_ene2_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb1_c1_ene2_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb1_c1_ene2_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb1_c1_ene2_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb1_c1_ene2_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb1_c1_ene2_0_NO_SHIFT_REG = rnode_3to4_bb1_c1_ene2_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb1_c1_ene2_0_stall_in_reg_4_NO_SHIFT_REG = ~(local_bb1_c1_exit_c1_exi3_enable);
assign rnode_3to4_bb1_c1_ene2_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb1_c1_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb1_c1_ene3_0_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene3_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb1_c1_ene3_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene3_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene3_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene3_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb1_c1_ene3_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb1_c1_ene3_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb1_c1_ene3_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb1_c1_ene3_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb1_c1_ene3_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb1_c1_ene3_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb1_c1_ene3_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb1_c1_ene3_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb1_c1_ene3_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb1_c1_ene3_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb1_c1_ene3_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb1_c1_ene3_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb1_c1_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb1_c1_ene3_0_NO_SHIFT_REG = rnode_3to4_bb1_c1_ene3_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb1_c1_ene3_0_stall_in_reg_4_NO_SHIFT_REG = ~(local_bb1_c1_exit_c1_exi3_enable);
assign rnode_3to4_bb1_c1_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_1_VALID_3_4_0_inputs_ready;
 reg SFC_1_VALID_3_4_0_valid_out_NO_SHIFT_REG;
wire SFC_1_VALID_3_4_0_stall_in;
wire SFC_1_VALID_3_4_0_output_regs_ready;
 reg SFC_1_VALID_3_4_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_1_VALID_3_4_0_causedstall;

assign SFC_1_VALID_3_4_0_inputs_ready = 1'b1;
assign SFC_1_VALID_3_4_0_output_regs_ready = local_bb1_c1_exit_c1_exi3_enable;
assign SFC_1_VALID_2_3_0_stall_in = 1'b0;
assign SFC_1_VALID_3_4_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c1_exit_c1_exi3_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_1_VALID_3_4_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_1_VALID_3_4_0_output_regs_ready)
		begin
			SFC_1_VALID_3_4_0_NO_SHIFT_REG <= SFC_1_VALID_2_3_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1_c1_exi2_stall_local;
wire [127:0] local_bb1_c1_exi2;

assign local_bb1_c1_exi2[63:0] = local_bb1_c1_exi1[63:0];
assign local_bb1_c1_exi2[95:64] = rnode_3to4_bb1_c1_ene2_0_NO_SHIFT_REG;
assign local_bb1_c1_exi2[127:96] = local_bb1_c1_exi1[127:96];

// This section implements an unregistered operation.
// 
wire local_bb1_c1_exi3_valid_out;
wire local_bb1_c1_exi3_stall_in;
wire local_bb1_c1_exi3_inputs_ready;
wire local_bb1_c1_exi3_stall_local;
wire [127:0] local_bb1_c1_exi3;

assign local_bb1_c1_exi3_inputs_ready = (local_bb1_var__valid_out_NO_SHIFT_REG & rnode_3to4_bb1_c1_ene2_0_valid_out_NO_SHIFT_REG & rnode_3to4_bb1_c1_ene3_0_valid_out_NO_SHIFT_REG);
assign local_bb1_c1_exi3[95:0] = local_bb1_c1_exi2[95:0];
assign local_bb1_c1_exi3[127:96] = rnode_3to4_bb1_c1_ene3_0_NO_SHIFT_REG;
assign local_bb1_c1_exi3_valid_out = 1'b1;
assign local_bb1_var__stall_in = 1'b0;
assign rnode_3to4_bb1_c1_ene2_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb1_c1_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c1_exit_c1_exi3_valid_out;
wire local_bb1_c1_exit_c1_exi3_stall_in;
wire local_bb1_c1_exit_c1_exi3_inputs_ready;
wire local_bb1_c1_exit_c1_exi3_stall_local;
wire [127:0] local_bb1_c1_exit_c1_exi3;
wire local_bb1_c1_exit_c1_exi3_valid;
wire local_bb1_c1_exit_c1_exi3_fu_stall_out;

acl_enable_sink local_bb1_c1_exit_c1_exi3_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb1_c1_exi3),
	.data_out(local_bb1_c1_exit_c1_exi3),
	.input_accepted(local_bb1_c1_enter_c1_eni3_input_accepted),
	.valid_out(local_bb1_c1_exit_c1_exi3_valid),
	.stall_in(local_bb1_c1_exit_c1_exi3_stall_local),
	.enable(local_bb1_c1_exit_c1_exi3_enable),
	.valid_in(local_bb1_c1_exit_c1_exi3_valid_in),
	.stall_entry(local_bb1_c1_exit_c1_exi3_entry_stall),
	.inc_pipelined_thread(local_bb1_c1_enter_c1_eni3_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb1_c1_enter_c1_eni3_dec_pipelined_thread)
);

defparam local_bb1_c1_exit_c1_exi3_instance.DATA_WIDTH = 128;
defparam local_bb1_c1_exit_c1_exi3_instance.PIPELINE_DEPTH = 3;
defparam local_bb1_c1_exit_c1_exi3_instance.SCHEDULEII = 1;
defparam local_bb1_c1_exit_c1_exi3_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb1_c1_exit_c1_exi3_inputs_ready = (local_bb1_c1_exi3_valid_out & SFC_1_VALID_3_4_0_valid_out_NO_SHIFT_REG);
assign local_bb1_c1_exit_c1_exi3_valid_in = SFC_1_VALID_3_4_0_NO_SHIFT_REG;
assign local_bb1_c1_exit_c1_exi3_fu_stall_out = ~(local_bb1_c1_exit_c1_exi3_enable);
assign local_bb1_c1_exit_c1_exi3_valid_out = local_bb1_c1_exit_c1_exi3_valid;
assign local_bb1_c1_exit_c1_exi3_stall_local = local_bb1_c1_exit_c1_exi3_stall_in;
assign local_bb1_c1_exi3_stall_in = 1'b0;
assign SFC_1_VALID_3_4_0_stall_in = 1'b0;

// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_0_NO_SHIFT_REG;
 logic [127:0] rnode_4to4_bb1_c1_exit_c1_exi3_0_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_1_NO_SHIFT_REG;
 logic [127:0] rnode_4to4_bb1_c1_exit_c1_exi3_1_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_2_NO_SHIFT_REG;
 logic [127:0] rnode_4to4_bb1_c1_exit_c1_exi3_2_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [127:0] rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_0_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_0_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_0_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_0_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb1_c1_exit_c1_exi3),
	.data_out(rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_fifo.DEPTH = 3;
defparam rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_fifo.DATA_WIDTH = 128;
defparam rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_fifo.IMPL = "zl_reg";

assign rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_inputs_ready_NO_SHIFT_REG = local_bb1_c1_exit_c1_exi3_valid_out;
assign local_bb1_c1_exit_c1_exi3_stall_in = rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_out_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_0_reg_4_NO_SHIFT_REG = (rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_0_NO_SHIFT_REG | rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_1_NO_SHIFT_REG | rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_2_NO_SHIFT_REG);
assign rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_0_NO_SHIFT_REG = rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_1_NO_SHIFT_REG = rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_2_NO_SHIFT_REG = rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb1_c1_exit_c1_exi3_0_NO_SHIFT_REG = rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb1_c1_exit_c1_exi3_1_NO_SHIFT_REG = rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb1_c1_exit_c1_exi3_2_NO_SHIFT_REG = rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb1_c1_exe3_stall_local;
wire [31:0] local_bb1_c1_exe3;

assign local_bb1_c1_exe3[31:0] = rnode_4to4_bb1_c1_exit_c1_exi3_0_NO_SHIFT_REG[127:96];

// This section implements an unregistered operation.
// 
wire local_bb1_c1_exe2_stall_local;
wire [31:0] local_bb1_c1_exe2;

assign local_bb1_c1_exe2[31:0] = rnode_4to4_bb1_c1_exit_c1_exi3_1_NO_SHIFT_REG[95:64];

// This section implements an unregistered operation.
// 
wire local_bb1_c1_exe1_stall_local;
wire [31:0] local_bb1_c1_exe1;

assign local_bb1_c1_exe1[31:0] = rnode_4to4_bb1_c1_exit_c1_exi3_2_NO_SHIFT_REG[63:32];

// This section implements an unregistered operation.
// 
wire local_bb1_c2_eni1_stall_local;
wire [127:0] local_bb1_c2_eni1;

assign local_bb1_c2_eni1[31:0] = 32'bx;
assign local_bb1_c2_eni1[63:32] = local_bb1_c1_exe1;
assign local_bb1_c2_eni1[127:64] = 64'bx;

// This section implements an unregistered operation.
// 
wire local_bb1_c2_eni2_stall_local;
wire [127:0] local_bb1_c2_eni2;

assign local_bb1_c2_eni2[63:0] = local_bb1_c2_eni1[63:0];
assign local_bb1_c2_eni2[95:64] = local_bb1_c1_exe2;
assign local_bb1_c2_eni2[127:96] = local_bb1_c2_eni1[127:96];

// This section implements an unregistered operation.
// 
wire local_bb1_c2_eni3_valid_out;
wire local_bb1_c2_eni3_stall_in;
wire local_bb1_c2_eni3_inputs_ready;
wire local_bb1_c2_eni3_stall_local;
wire [127:0] local_bb1_c2_eni3;

assign local_bb1_c2_eni3_inputs_ready = (rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_0_NO_SHIFT_REG & rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_1_NO_SHIFT_REG & rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_2_NO_SHIFT_REG);
assign local_bb1_c2_eni3[95:0] = local_bb1_c2_eni2[95:0];
assign local_bb1_c2_eni3[127:96] = local_bb1_c1_exe3;
assign local_bb1_c2_eni3_valid_out = local_bb1_c2_eni3_inputs_ready;
assign local_bb1_c2_eni3_stall_local = local_bb1_c2_eni3_stall_in;
assign rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_0_NO_SHIFT_REG = (local_bb1_c2_eni3_stall_local | ~(local_bb1_c2_eni3_inputs_ready));
assign rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_1_NO_SHIFT_REG = (local_bb1_c2_eni3_stall_local | ~(local_bb1_c2_eni3_inputs_ready));
assign rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_2_NO_SHIFT_REG = (local_bb1_c2_eni3_stall_local | ~(local_bb1_c2_eni3_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb1_c2_enter_c2_eni3_valid_out_0;
wire local_bb1_c2_enter_c2_eni3_stall_in_0;
wire local_bb1_c2_enter_c2_eni3_valid_out_1;
wire local_bb1_c2_enter_c2_eni3_stall_in_1;
wire local_bb1_c2_enter_c2_eni3_valid_out_2;
wire local_bb1_c2_enter_c2_eni3_stall_in_2;
wire local_bb1_c2_enter_c2_eni3_valid_out_3;
wire local_bb1_c2_enter_c2_eni3_stall_in_3;
wire local_bb1_c2_enter_c2_eni3_inputs_ready;
wire local_bb1_c2_enter_c2_eni3_stall_local;
wire local_bb1_c2_enter_c2_eni3_input_accepted;
wire [127:0] local_bb1_c2_enter_c2_eni3;
wire local_bb1_c2_exit_c2_exi2_enable;
wire local_bb1_c2_exit_c2_exi2_entry_stall;
wire local_bb1_c2_enter_c2_eni3_valid_bit;
wire local_bb1_c2_exit_c2_exi2_output_regs_ready;
wire local_bb1_c2_exit_c2_exi2_valid_in;
wire local_bb1_c2_exit_c2_exi2_phases;
wire local_bb1_c2_enter_c2_eni3_inc_pipelined_thread;
wire local_bb1_c2_enter_c2_eni3_dec_pipelined_thread;
wire local_bb1_c2_enter_c2_eni3_fu_stall_out;

assign local_bb1_c2_enter_c2_eni3_inputs_ready = local_bb1_c2_eni3_valid_out;
assign local_bb1_c2_enter_c2_eni3 = local_bb1_c2_eni3;
assign local_bb1_c2_enter_c2_eni3_input_accepted = (local_bb1_c2_enter_c2_eni3_inputs_ready && !(local_bb1_c2_exit_c2_exi2_entry_stall));
assign local_bb1_c2_enter_c2_eni3_valid_bit = local_bb1_c2_enter_c2_eni3_input_accepted;
assign local_bb1_c2_enter_c2_eni3_inc_pipelined_thread = 1'b1;
assign local_bb1_c2_enter_c2_eni3_dec_pipelined_thread = ~(1'b0);
assign local_bb1_c2_enter_c2_eni3_fu_stall_out = (~(local_bb1_c2_enter_c2_eni3_inputs_ready) | local_bb1_c2_exit_c2_exi2_entry_stall);
assign local_bb1_c2_enter_c2_eni3_stall_local = (local_bb1_c2_enter_c2_eni3_stall_in_0 | local_bb1_c2_enter_c2_eni3_stall_in_1 | local_bb1_c2_enter_c2_eni3_stall_in_2 | local_bb1_c2_enter_c2_eni3_stall_in_3);
assign local_bb1_c2_enter_c2_eni3_valid_out_0 = local_bb1_c2_enter_c2_eni3_inputs_ready;
assign local_bb1_c2_enter_c2_eni3_valid_out_1 = local_bb1_c2_enter_c2_eni3_inputs_ready;
assign local_bb1_c2_enter_c2_eni3_valid_out_2 = local_bb1_c2_enter_c2_eni3_inputs_ready;
assign local_bb1_c2_enter_c2_eni3_valid_out_3 = local_bb1_c2_enter_c2_eni3_inputs_ready;
assign local_bb1_c2_eni3_stall_in = (|local_bb1_c2_enter_c2_eni3_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb1_c2_ene1_stall_local;
wire [31:0] local_bb1_c2_ene1;

assign local_bb1_c2_ene1[31:0] = local_bb1_c2_enter_c2_eni3[63:32];

// This section implements an unregistered operation.
// 
wire local_bb1_c2_ene2_stall_local;
wire [31:0] local_bb1_c2_ene2;

assign local_bb1_c2_ene2[31:0] = local_bb1_c2_enter_c2_eni3[95:64];

// This section implements an unregistered operation.
// 
wire local_bb1_c2_ene3_valid_out;
wire local_bb1_c2_ene3_stall_in;
wire local_bb1_c2_ene3_inputs_ready;
wire local_bb1_c2_ene3_stall_local;
wire [31:0] local_bb1_c2_ene3;

assign local_bb1_c2_ene3_inputs_ready = local_bb1_c2_enter_c2_eni3_valid_out_2;
assign local_bb1_c2_ene3[31:0] = local_bb1_c2_enter_c2_eni3[127:96];
assign local_bb1_c2_ene3_valid_out = 1'b1;
assign local_bb1_c2_enter_c2_eni3_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire SFC_2_VALID_4_4_0_valid_out;
wire SFC_2_VALID_4_4_0_stall_in;
wire SFC_2_VALID_4_4_0_inputs_ready;
wire SFC_2_VALID_4_4_0_stall_local;
wire SFC_2_VALID_4_4_0;

assign SFC_2_VALID_4_4_0_inputs_ready = local_bb1_c2_enter_c2_eni3_valid_out_3;
assign SFC_2_VALID_4_4_0 = local_bb1_c2_enter_c2_eni3_valid_bit;
assign SFC_2_VALID_4_4_0_valid_out = 1'b1;
assign local_bb1_c2_enter_c2_eni3_stall_in_3 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_var__u0_valid_out;
wire local_bb1_var__u0_stall_in;
wire local_bb1_var__u0_inputs_ready;
wire local_bb1_var__u0_stall_local;
wire [31:0] local_bb1_var__u0;

assign local_bb1_var__u0_inputs_ready = (local_bb1_c2_enter_c2_eni3_valid_out_0 & local_bb1_c2_enter_c2_eni3_valid_out_1);
assign local_bb1_var__u0 = (local_bb1_c2_ene1 + local_bb1_c2_ene2);
assign local_bb1_var__u0_valid_out = 1'b1;
assign local_bb1_c2_enter_c2_eni3_stall_in_0 = 1'b0;
assign local_bb1_c2_enter_c2_eni3_stall_in_1 = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb1_c2_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb1_c2_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb1_c2_ene3_0_NO_SHIFT_REG;
 logic rnode_4to5_bb1_c2_ene3_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb1_c2_ene3_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb1_c2_ene3_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb1_c2_ene3_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb1_c2_ene3_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb1_c2_ene3_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb1_c2_ene3_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb1_c2_ene3_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb1_c2_ene3_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb1_c2_ene3_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb1_c2_ene3),
	.data_out(rnode_4to5_bb1_c2_ene3_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb1_c2_ene3_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb1_c2_ene3_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_4to5_bb1_c2_ene3_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb1_c2_ene3_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb1_c2_ene3_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb1_c2_ene3_stall_in = 1'b0;
assign rnode_4to5_bb1_c2_ene3_0_NO_SHIFT_REG = rnode_4to5_bb1_c2_ene3_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb1_c2_ene3_0_stall_in_reg_5_NO_SHIFT_REG = ~(local_bb1_c2_exit_c2_exi2_enable);
assign rnode_4to5_bb1_c2_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_2_VALID_4_5_0_inputs_ready;
 reg SFC_2_VALID_4_5_0_valid_out_NO_SHIFT_REG;
wire SFC_2_VALID_4_5_0_stall_in;
wire SFC_2_VALID_4_5_0_output_regs_ready;
 reg SFC_2_VALID_4_5_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_2_VALID_4_5_0_causedstall;

assign SFC_2_VALID_4_5_0_inputs_ready = 1'b1;
assign SFC_2_VALID_4_5_0_output_regs_ready = local_bb1_c2_exit_c2_exi2_enable;
assign SFC_2_VALID_4_4_0_stall_in = 1'b0;
assign SFC_2_VALID_4_5_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c2_exit_c2_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_2_VALID_4_5_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_2_VALID_4_5_0_output_regs_ready)
		begin
			SFC_2_VALID_4_5_0_NO_SHIFT_REG <= SFC_2_VALID_4_4_0;
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb1_var__u1_inputs_ready;
 reg local_bb1_var__u1_valid_out_NO_SHIFT_REG;
wire local_bb1_var__u1_stall_in;
wire local_bb1_var__u1_output_regs_ready;
wire [31:0] local_bb1_var__u1;
 reg local_bb1_var__u1_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb1_var__u1_valid_pipe_1_NO_SHIFT_REG;
wire local_bb1_var__u1_causedstall;

acl_int_mult int_module_local_bb1_var__u1 (
	.clock(clock),
	.dataa(local_bb1_var__u0),
	.datab(input_global_size_2),
	.enable(local_bb1_var__u1_output_regs_ready),
	.result(local_bb1_var__u1)
);

defparam int_module_local_bb1_var__u1.INPUT1_WIDTH = 32;
defparam int_module_local_bb1_var__u1.INPUT2_WIDTH = 32;
defparam int_module_local_bb1_var__u1.OUTPUT_WIDTH = 32;
defparam int_module_local_bb1_var__u1.LATENCY = 3;
defparam int_module_local_bb1_var__u1.SIGNED = 0;

assign local_bb1_var__u1_inputs_ready = 1'b1;
assign local_bb1_var__u1_output_regs_ready = local_bb1_c2_exit_c2_exi2_enable;
assign local_bb1_var__u0_stall_in = 1'b0;
assign local_bb1_var__u1_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c2_exit_c2_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb1_var__u1_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb1_var__u1_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb1_var__u1_output_regs_ready)
		begin
			local_bb1_var__u1_valid_pipe_0_NO_SHIFT_REG <= 1'b1;
			local_bb1_var__u1_valid_pipe_1_NO_SHIFT_REG <= local_bb1_var__u1_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb1_var__u1_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb1_var__u1_output_regs_ready)
		begin
			local_bb1_var__u1_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb1_var__u1_stall_in))
			begin
				local_bb1_var__u1_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_5to6_bb1_c2_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_5to6_bb1_c2_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_5to6_bb1_c2_ene3_0_NO_SHIFT_REG;
 logic rnode_5to6_bb1_c2_ene3_0_reg_6_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_5to6_bb1_c2_ene3_0_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb1_c2_ene3_0_valid_out_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb1_c2_ene3_0_stall_in_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb1_c2_ene3_0_stall_out_reg_6_NO_SHIFT_REG;

acl_data_fifo rnode_5to6_bb1_c2_ene3_0_reg_6_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_5to6_bb1_c2_ene3_0_reg_6_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_5to6_bb1_c2_ene3_0_stall_in_reg_6_NO_SHIFT_REG),
	.valid_out(rnode_5to6_bb1_c2_ene3_0_valid_out_reg_6_NO_SHIFT_REG),
	.stall_out(rnode_5to6_bb1_c2_ene3_0_stall_out_reg_6_NO_SHIFT_REG),
	.data_in(rnode_4to5_bb1_c2_ene3_0_NO_SHIFT_REG),
	.data_out(rnode_5to6_bb1_c2_ene3_0_reg_6_NO_SHIFT_REG)
);

defparam rnode_5to6_bb1_c2_ene3_0_reg_6_fifo.DEPTH = 1;
defparam rnode_5to6_bb1_c2_ene3_0_reg_6_fifo.DATA_WIDTH = 32;
defparam rnode_5to6_bb1_c2_ene3_0_reg_6_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_5to6_bb1_c2_ene3_0_reg_6_fifo.IMPL = "shift_reg";

assign rnode_5to6_bb1_c2_ene3_0_reg_6_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to5_bb1_c2_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_5to6_bb1_c2_ene3_0_NO_SHIFT_REG = rnode_5to6_bb1_c2_ene3_0_reg_6_NO_SHIFT_REG;
assign rnode_5to6_bb1_c2_ene3_0_stall_in_reg_6_NO_SHIFT_REG = ~(local_bb1_c2_exit_c2_exi2_enable);
assign rnode_5to6_bb1_c2_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_2_VALID_5_6_0_inputs_ready;
 reg SFC_2_VALID_5_6_0_valid_out_NO_SHIFT_REG;
wire SFC_2_VALID_5_6_0_stall_in;
wire SFC_2_VALID_5_6_0_output_regs_ready;
 reg SFC_2_VALID_5_6_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_2_VALID_5_6_0_causedstall;

assign SFC_2_VALID_5_6_0_inputs_ready = 1'b1;
assign SFC_2_VALID_5_6_0_output_regs_ready = local_bb1_c2_exit_c2_exi2_enable;
assign SFC_2_VALID_4_5_0_stall_in = 1'b0;
assign SFC_2_VALID_5_6_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c2_exit_c2_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_2_VALID_5_6_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_2_VALID_5_6_0_output_regs_ready)
		begin
			SFC_2_VALID_5_6_0_NO_SHIFT_REG <= SFC_2_VALID_4_5_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1_c2_exi1_stall_local;
wire [95:0] local_bb1_c2_exi1;

assign local_bb1_c2_exi1[31:0] = 32'bx;
assign local_bb1_c2_exi1[63:32] = local_bb1_var__u1;
assign local_bb1_c2_exi1[95:64] = 32'bx;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_6to7_bb1_c2_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_6to7_bb1_c2_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_6to7_bb1_c2_ene3_0_NO_SHIFT_REG;
 logic rnode_6to7_bb1_c2_ene3_0_reg_7_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_6to7_bb1_c2_ene3_0_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb1_c2_ene3_0_valid_out_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb1_c2_ene3_0_stall_in_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb1_c2_ene3_0_stall_out_reg_7_NO_SHIFT_REG;

acl_data_fifo rnode_6to7_bb1_c2_ene3_0_reg_7_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_6to7_bb1_c2_ene3_0_reg_7_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_6to7_bb1_c2_ene3_0_stall_in_reg_7_NO_SHIFT_REG),
	.valid_out(rnode_6to7_bb1_c2_ene3_0_valid_out_reg_7_NO_SHIFT_REG),
	.stall_out(rnode_6to7_bb1_c2_ene3_0_stall_out_reg_7_NO_SHIFT_REG),
	.data_in(rnode_5to6_bb1_c2_ene3_0_NO_SHIFT_REG),
	.data_out(rnode_6to7_bb1_c2_ene3_0_reg_7_NO_SHIFT_REG)
);

defparam rnode_6to7_bb1_c2_ene3_0_reg_7_fifo.DEPTH = 1;
defparam rnode_6to7_bb1_c2_ene3_0_reg_7_fifo.DATA_WIDTH = 32;
defparam rnode_6to7_bb1_c2_ene3_0_reg_7_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_6to7_bb1_c2_ene3_0_reg_7_fifo.IMPL = "shift_reg";

assign rnode_6to7_bb1_c2_ene3_0_reg_7_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_5to6_bb1_c2_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_6to7_bb1_c2_ene3_0_NO_SHIFT_REG = rnode_6to7_bb1_c2_ene3_0_reg_7_NO_SHIFT_REG;
assign rnode_6to7_bb1_c2_ene3_0_stall_in_reg_7_NO_SHIFT_REG = ~(local_bb1_c2_exit_c2_exi2_enable);
assign rnode_6to7_bb1_c2_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_2_VALID_6_7_0_inputs_ready;
 reg SFC_2_VALID_6_7_0_valid_out_NO_SHIFT_REG;
wire SFC_2_VALID_6_7_0_stall_in;
wire SFC_2_VALID_6_7_0_output_regs_ready;
 reg SFC_2_VALID_6_7_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_2_VALID_6_7_0_causedstall;

assign SFC_2_VALID_6_7_0_inputs_ready = 1'b1;
assign SFC_2_VALID_6_7_0_output_regs_ready = local_bb1_c2_exit_c2_exi2_enable;
assign SFC_2_VALID_5_6_0_stall_in = 1'b0;
assign SFC_2_VALID_6_7_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c2_exit_c2_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_2_VALID_6_7_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_2_VALID_6_7_0_output_regs_ready)
		begin
			SFC_2_VALID_6_7_0_NO_SHIFT_REG <= SFC_2_VALID_5_6_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1_c2_exi2_valid_out;
wire local_bb1_c2_exi2_stall_in;
wire local_bb1_c2_exi2_inputs_ready;
wire local_bb1_c2_exi2_stall_local;
wire [95:0] local_bb1_c2_exi2;

assign local_bb1_c2_exi2_inputs_ready = (local_bb1_var__u1_valid_out_NO_SHIFT_REG & rnode_6to7_bb1_c2_ene3_0_valid_out_NO_SHIFT_REG);
assign local_bb1_c2_exi2[63:0] = local_bb1_c2_exi1[63:0];
assign local_bb1_c2_exi2[95:64] = rnode_6to7_bb1_c2_ene3_0_NO_SHIFT_REG;
assign local_bb1_c2_exi2_valid_out = 1'b1;
assign local_bb1_var__u1_stall_in = 1'b0;
assign rnode_6to7_bb1_c2_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c2_exit_c2_exi2_valid_out;
wire local_bb1_c2_exit_c2_exi2_stall_in;
wire local_bb1_c2_exit_c2_exi2_inputs_ready;
wire local_bb1_c2_exit_c2_exi2_stall_local;
wire [95:0] local_bb1_c2_exit_c2_exi2;
wire local_bb1_c2_exit_c2_exi2_valid;
wire local_bb1_c2_exit_c2_exi2_fu_stall_out;

acl_enable_sink local_bb1_c2_exit_c2_exi2_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb1_c2_exi2),
	.data_out(local_bb1_c2_exit_c2_exi2),
	.input_accepted(local_bb1_c2_enter_c2_eni3_input_accepted),
	.valid_out(local_bb1_c2_exit_c2_exi2_valid),
	.stall_in(local_bb1_c2_exit_c2_exi2_stall_local),
	.enable(local_bb1_c2_exit_c2_exi2_enable),
	.valid_in(local_bb1_c2_exit_c2_exi2_valid_in),
	.stall_entry(local_bb1_c2_exit_c2_exi2_entry_stall),
	.inc_pipelined_thread(local_bb1_c2_enter_c2_eni3_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb1_c2_enter_c2_eni3_dec_pipelined_thread)
);

defparam local_bb1_c2_exit_c2_exi2_instance.DATA_WIDTH = 96;
defparam local_bb1_c2_exit_c2_exi2_instance.PIPELINE_DEPTH = 3;
defparam local_bb1_c2_exit_c2_exi2_instance.SCHEDULEII = 1;
defparam local_bb1_c2_exit_c2_exi2_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb1_c2_exit_c2_exi2_inputs_ready = (local_bb1_c2_exi2_valid_out & SFC_2_VALID_6_7_0_valid_out_NO_SHIFT_REG);
assign local_bb1_c2_exit_c2_exi2_valid_in = SFC_2_VALID_6_7_0_NO_SHIFT_REG;
assign local_bb1_c2_exit_c2_exi2_fu_stall_out = ~(local_bb1_c2_exit_c2_exi2_enable);
assign local_bb1_c2_exit_c2_exi2_valid_out = local_bb1_c2_exit_c2_exi2_valid;
assign local_bb1_c2_exit_c2_exi2_stall_local = local_bb1_c2_exit_c2_exi2_stall_in;
assign local_bb1_c2_exi2_stall_in = 1'b0;
assign SFC_2_VALID_6_7_0_stall_in = 1'b0;

// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_0_NO_SHIFT_REG;
 logic [95:0] rnode_7to7_bb1_c2_exit_c2_exi2_0_NO_SHIFT_REG;
 logic rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_1_NO_SHIFT_REG;
 logic [95:0] rnode_7to7_bb1_c2_exit_c2_exi2_1_NO_SHIFT_REG;
 logic rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_inputs_ready_NO_SHIFT_REG;
 logic [95:0] rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_NO_SHIFT_REG;
 logic rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_0_reg_7_NO_SHIFT_REG;
 logic rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_0_reg_7_NO_SHIFT_REG;
 logic rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_out_reg_7_NO_SHIFT_REG;

acl_data_fifo rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_0_reg_7_NO_SHIFT_REG),
	.valid_out(rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_0_reg_7_NO_SHIFT_REG),
	.stall_out(rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_out_reg_7_NO_SHIFT_REG),
	.data_in(local_bb1_c2_exit_c2_exi2),
	.data_out(rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_NO_SHIFT_REG)
);

defparam rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_fifo.DEPTH = 3;
defparam rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_fifo.DATA_WIDTH = 96;
defparam rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_fifo.IMPL = "zl_reg";

assign rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_inputs_ready_NO_SHIFT_REG = local_bb1_c2_exit_c2_exi2_valid_out;
assign local_bb1_c2_exit_c2_exi2_stall_in = rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_out_reg_7_NO_SHIFT_REG;
assign rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_0_reg_7_NO_SHIFT_REG = (rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_0_NO_SHIFT_REG | rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_1_NO_SHIFT_REG);
assign rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_0_NO_SHIFT_REG = rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_0_reg_7_NO_SHIFT_REG;
assign rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_1_NO_SHIFT_REG = rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_0_reg_7_NO_SHIFT_REG;
assign rnode_7to7_bb1_c2_exit_c2_exi2_0_NO_SHIFT_REG = rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_NO_SHIFT_REG;
assign rnode_7to7_bb1_c2_exit_c2_exi2_1_NO_SHIFT_REG = rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb1_c2_exe2_stall_local;
wire [31:0] local_bb1_c2_exe2;

assign local_bb1_c2_exe2[31:0] = rnode_7to7_bb1_c2_exit_c2_exi2_0_NO_SHIFT_REG[95:64];

// This section implements an unregistered operation.
// 
wire local_bb1_c2_exe1_stall_local;
wire [31:0] local_bb1_c2_exe1;

assign local_bb1_c2_exe1[31:0] = rnode_7to7_bb1_c2_exit_c2_exi2_1_NO_SHIFT_REG[63:32];

// This section implements an unregistered operation.
// 
wire local_bb1_c3_eni1_stall_local;
wire [95:0] local_bb1_c3_eni1;

assign local_bb1_c3_eni1[31:0] = 32'bx;
assign local_bb1_c3_eni1[63:32] = local_bb1_c2_exe1;
assign local_bb1_c3_eni1[95:64] = 32'bx;

// This section implements an unregistered operation.
// 
wire local_bb1_c3_eni2_valid_out;
wire local_bb1_c3_eni2_stall_in;
wire local_bb1_c3_eni2_inputs_ready;
wire local_bb1_c3_eni2_stall_local;
wire [95:0] local_bb1_c3_eni2;

assign local_bb1_c3_eni2_inputs_ready = (rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_0_NO_SHIFT_REG & rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_1_NO_SHIFT_REG);
assign local_bb1_c3_eni2[63:0] = local_bb1_c3_eni1[63:0];
assign local_bb1_c3_eni2[95:64] = local_bb1_c2_exe2;
assign local_bb1_c3_eni2_valid_out = local_bb1_c3_eni2_inputs_ready;
assign local_bb1_c3_eni2_stall_local = local_bb1_c3_eni2_stall_in;
assign rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_0_NO_SHIFT_REG = (local_bb1_c3_eni2_stall_local | ~(local_bb1_c3_eni2_inputs_ready));
assign rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_1_NO_SHIFT_REG = (local_bb1_c3_eni2_stall_local | ~(local_bb1_c3_eni2_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb1_c3_enter_c3_eni2_valid_out_0;
wire local_bb1_c3_enter_c3_eni2_stall_in_0;
wire local_bb1_c3_enter_c3_eni2_valid_out_1;
wire local_bb1_c3_enter_c3_eni2_stall_in_1;
wire local_bb1_c3_enter_c3_eni2_valid_out_2;
wire local_bb1_c3_enter_c3_eni2_stall_in_2;
wire local_bb1_c3_enter_c3_eni2_inputs_ready;
wire local_bb1_c3_enter_c3_eni2_stall_local;
wire local_bb1_c3_enter_c3_eni2_input_accepted;
wire [95:0] local_bb1_c3_enter_c3_eni2;
wire local_bb1_c3_exit_c3_exi1_enable;
wire local_bb1_c3_exit_c3_exi1_entry_stall;
wire local_bb1_c3_enter_c3_eni2_valid_bit;
wire local_bb1_c3_exit_c3_exi1_output_regs_ready;
wire local_bb1_c3_exit_c3_exi1_valid_in;
wire local_bb1_c3_exit_c3_exi1_phases;
wire local_bb1_c3_enter_c3_eni2_inc_pipelined_thread;
wire local_bb1_c3_enter_c3_eni2_dec_pipelined_thread;
wire local_bb1_c3_enter_c3_eni2_fu_stall_out;

assign local_bb1_c3_enter_c3_eni2_inputs_ready = local_bb1_c3_eni2_valid_out;
assign local_bb1_c3_enter_c3_eni2 = local_bb1_c3_eni2;
assign local_bb1_c3_enter_c3_eni2_input_accepted = (local_bb1_c3_enter_c3_eni2_inputs_ready && !(local_bb1_c3_exit_c3_exi1_entry_stall));
assign local_bb1_c3_enter_c3_eni2_valid_bit = local_bb1_c3_enter_c3_eni2_input_accepted;
assign local_bb1_c3_enter_c3_eni2_inc_pipelined_thread = 1'b1;
assign local_bb1_c3_enter_c3_eni2_dec_pipelined_thread = ~(1'b0);
assign local_bb1_c3_enter_c3_eni2_fu_stall_out = (~(local_bb1_c3_enter_c3_eni2_inputs_ready) | local_bb1_c3_exit_c3_exi1_entry_stall);
assign local_bb1_c3_enter_c3_eni2_stall_local = (local_bb1_c3_enter_c3_eni2_stall_in_0 | local_bb1_c3_enter_c3_eni2_stall_in_1 | local_bb1_c3_enter_c3_eni2_stall_in_2);
assign local_bb1_c3_enter_c3_eni2_valid_out_0 = local_bb1_c3_enter_c3_eni2_inputs_ready;
assign local_bb1_c3_enter_c3_eni2_valid_out_1 = local_bb1_c3_enter_c3_eni2_inputs_ready;
assign local_bb1_c3_enter_c3_eni2_valid_out_2 = local_bb1_c3_enter_c3_eni2_inputs_ready;
assign local_bb1_c3_eni2_stall_in = (|local_bb1_c3_enter_c3_eni2_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb1_c3_ene1_stall_local;
wire [31:0] local_bb1_c3_ene1;

assign local_bb1_c3_ene1[31:0] = local_bb1_c3_enter_c3_eni2[63:32];

// This section implements an unregistered operation.
// 
wire local_bb1_c3_ene2_stall_local;
wire [31:0] local_bb1_c3_ene2;

assign local_bb1_c3_ene2[31:0] = local_bb1_c3_enter_c3_eni2[95:64];

// This section implements an unregistered operation.
// 
wire SFC_3_VALID_7_7_0_valid_out;
wire SFC_3_VALID_7_7_0_stall_in;
wire SFC_3_VALID_7_7_0_inputs_ready;
wire SFC_3_VALID_7_7_0_stall_local;
wire SFC_3_VALID_7_7_0;

assign SFC_3_VALID_7_7_0_inputs_ready = local_bb1_c3_enter_c3_eni2_valid_out_2;
assign SFC_3_VALID_7_7_0 = local_bb1_c3_enter_c3_eni2_valid_bit;
assign SFC_3_VALID_7_7_0_valid_out = 1'b1;
assign local_bb1_c3_enter_c3_eni2_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_var__u2_valid_out;
wire local_bb1_var__u2_stall_in;
wire local_bb1_var__u2_inputs_ready;
wire local_bb1_var__u2_stall_local;
wire [31:0] local_bb1_var__u2;

assign local_bb1_var__u2_inputs_ready = (local_bb1_c3_enter_c3_eni2_valid_out_0 & local_bb1_c3_enter_c3_eni2_valid_out_1);
assign local_bb1_var__u2 = (local_bb1_c3_ene1 + local_bb1_c3_ene2);
assign local_bb1_var__u2_valid_out = 1'b1;
assign local_bb1_c3_enter_c3_eni2_stall_in_0 = 1'b0;
assign local_bb1_c3_enter_c3_eni2_stall_in_1 = 1'b0;

// This section implements a registered operation.
// 
wire SFC_3_VALID_7_8_0_inputs_ready;
 reg SFC_3_VALID_7_8_0_valid_out_NO_SHIFT_REG;
wire SFC_3_VALID_7_8_0_stall_in;
wire SFC_3_VALID_7_8_0_output_regs_ready;
 reg SFC_3_VALID_7_8_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_3_VALID_7_8_0_causedstall;

assign SFC_3_VALID_7_8_0_inputs_ready = 1'b1;
assign SFC_3_VALID_7_8_0_output_regs_ready = local_bb1_c3_exit_c3_exi1_enable;
assign SFC_3_VALID_7_7_0_stall_in = 1'b0;
assign SFC_3_VALID_7_8_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c3_exit_c3_exi1_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_3_VALID_7_8_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_3_VALID_7_8_0_output_regs_ready)
		begin
			SFC_3_VALID_7_8_0_NO_SHIFT_REG <= SFC_3_VALID_7_7_0;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_7to8_bb1_var__u2_0_valid_out_NO_SHIFT_REG;
 logic rnode_7to8_bb1_var__u2_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_7to8_bb1_var__u2_0_NO_SHIFT_REG;
 logic rnode_7to8_bb1_var__u2_0_reg_8_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_7to8_bb1_var__u2_0_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb1_var__u2_0_valid_out_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb1_var__u2_0_stall_in_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb1_var__u2_0_stall_out_reg_8_NO_SHIFT_REG;

acl_data_fifo rnode_7to8_bb1_var__u2_0_reg_8_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_7to8_bb1_var__u2_0_reg_8_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_7to8_bb1_var__u2_0_stall_in_reg_8_NO_SHIFT_REG),
	.valid_out(rnode_7to8_bb1_var__u2_0_valid_out_reg_8_NO_SHIFT_REG),
	.stall_out(rnode_7to8_bb1_var__u2_0_stall_out_reg_8_NO_SHIFT_REG),
	.data_in(local_bb1_var__u2),
	.data_out(rnode_7to8_bb1_var__u2_0_reg_8_NO_SHIFT_REG)
);

defparam rnode_7to8_bb1_var__u2_0_reg_8_fifo.DEPTH = 1;
defparam rnode_7to8_bb1_var__u2_0_reg_8_fifo.DATA_WIDTH = 32;
defparam rnode_7to8_bb1_var__u2_0_reg_8_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_7to8_bb1_var__u2_0_reg_8_fifo.IMPL = "shift_reg";

assign rnode_7to8_bb1_var__u2_0_reg_8_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb1_var__u2_stall_in = 1'b0;
assign rnode_7to8_bb1_var__u2_0_NO_SHIFT_REG = rnode_7to8_bb1_var__u2_0_reg_8_NO_SHIFT_REG;
assign rnode_7to8_bb1_var__u2_0_stall_in_reg_8_NO_SHIFT_REG = ~(local_bb1_c3_exit_c3_exi1_enable);
assign rnode_7to8_bb1_var__u2_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb1_c3_exi1_valid_out;
wire local_bb1_c3_exi1_stall_in;
wire local_bb1_c3_exi1_inputs_ready;
wire local_bb1_c3_exi1_stall_local;
wire [63:0] local_bb1_c3_exi1;

assign local_bb1_c3_exi1_inputs_ready = rnode_7to8_bb1_var__u2_0_valid_out_NO_SHIFT_REG;
assign local_bb1_c3_exi1[31:0] = 32'bx;
assign local_bb1_c3_exi1[63:32] = rnode_7to8_bb1_var__u2_0_NO_SHIFT_REG;
assign local_bb1_c3_exi1_valid_out = 1'b1;
assign rnode_7to8_bb1_var__u2_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c3_exit_c3_exi1_valid_out;
wire local_bb1_c3_exit_c3_exi1_stall_in;
wire local_bb1_c3_exit_c3_exi1_inputs_ready;
wire local_bb1_c3_exit_c3_exi1_stall_local;
wire [63:0] local_bb1_c3_exit_c3_exi1;
wire local_bb1_c3_exit_c3_exi1_valid;
wire local_bb1_c3_exit_c3_exi1_fu_stall_out;

acl_enable_sink local_bb1_c3_exit_c3_exi1_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb1_c3_exi1),
	.data_out(local_bb1_c3_exit_c3_exi1),
	.input_accepted(local_bb1_c3_enter_c3_eni2_input_accepted),
	.valid_out(local_bb1_c3_exit_c3_exi1_valid),
	.stall_in(local_bb1_c3_exit_c3_exi1_stall_local),
	.enable(local_bb1_c3_exit_c3_exi1_enable),
	.valid_in(local_bb1_c3_exit_c3_exi1_valid_in),
	.stall_entry(local_bb1_c3_exit_c3_exi1_entry_stall),
	.inc_pipelined_thread(local_bb1_c3_enter_c3_eni2_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb1_c3_enter_c3_eni2_dec_pipelined_thread)
);

defparam local_bb1_c3_exit_c3_exi1_instance.DATA_WIDTH = 64;
defparam local_bb1_c3_exit_c3_exi1_instance.PIPELINE_DEPTH = 1;
defparam local_bb1_c3_exit_c3_exi1_instance.SCHEDULEII = 1;
defparam local_bb1_c3_exit_c3_exi1_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb1_c3_exit_c3_exi1_inputs_ready = (local_bb1_c3_exi1_valid_out & SFC_3_VALID_7_8_0_valid_out_NO_SHIFT_REG);
assign local_bb1_c3_exit_c3_exi1_valid_in = SFC_3_VALID_7_8_0_NO_SHIFT_REG;
assign local_bb1_c3_exit_c3_exi1_fu_stall_out = ~(local_bb1_c3_exit_c3_exi1_enable);
assign local_bb1_c3_exit_c3_exi1_valid_out = local_bb1_c3_exit_c3_exi1_valid;
assign local_bb1_c3_exit_c3_exi1_stall_local = local_bb1_c3_exit_c3_exi1_stall_in;
assign local_bb1_c3_exi1_stall_in = 1'b0;
assign SFC_3_VALID_7_8_0_stall_in = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c3_exe1_stall_local;
wire [31:0] local_bb1_c3_exe1;

assign local_bb1_c3_exe1[31:0] = local_bb1_c3_exit_c3_exi1[63:32];

// This section implements an unregistered operation.
// 
wire local_bb1_c4_eni1_valid_out;
wire local_bb1_c4_eni1_stall_in;
wire local_bb1_c4_eni1_inputs_ready;
wire local_bb1_c4_eni1_stall_local;
wire [63:0] local_bb1_c4_eni1;

assign local_bb1_c4_eni1_inputs_ready = local_bb1_c3_exit_c3_exi1_valid_out;
assign local_bb1_c4_eni1[31:0] = 32'bx;
assign local_bb1_c4_eni1[63:32] = local_bb1_c3_exe1;
assign local_bb1_c4_eni1_valid_out = local_bb1_c4_eni1_inputs_ready;
assign local_bb1_c4_eni1_stall_local = local_bb1_c4_eni1_stall_in;
assign local_bb1_c3_exit_c3_exi1_stall_in = (|local_bb1_c4_eni1_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb1_c4_enter_c4_eni1_valid_out_0;
wire local_bb1_c4_enter_c4_eni1_stall_in_0;
wire local_bb1_c4_enter_c4_eni1_valid_out_1;
wire local_bb1_c4_enter_c4_eni1_stall_in_1;
wire local_bb1_c4_enter_c4_eni1_inputs_ready;
wire local_bb1_c4_enter_c4_eni1_stall_local;
wire local_bb1_c4_enter_c4_eni1_input_accepted;
wire [63:0] local_bb1_c4_enter_c4_eni1;
wire local_bb1_c4_exit_c4_exi2_enable;
wire local_bb1_c4_exit_c4_exi2_entry_stall;
wire local_bb1_c4_enter_c4_eni1_valid_bit;
wire local_bb1_c4_exit_c4_exi2_output_regs_ready;
wire local_bb1_c4_exit_c4_exi2_valid_in;
wire local_bb1_c4_exit_c4_exi2_phases;
wire local_bb1_c4_enter_c4_eni1_inc_pipelined_thread;
wire local_bb1_c4_enter_c4_eni1_dec_pipelined_thread;
wire local_bb1_c4_enter_c4_eni1_fu_stall_out;

assign local_bb1_c4_enter_c4_eni1_inputs_ready = local_bb1_c4_eni1_valid_out;
assign local_bb1_c4_enter_c4_eni1 = local_bb1_c4_eni1;
assign local_bb1_c4_enter_c4_eni1_input_accepted = (local_bb1_c4_enter_c4_eni1_inputs_ready && !(local_bb1_c4_exit_c4_exi2_entry_stall));
assign local_bb1_c4_enter_c4_eni1_valid_bit = local_bb1_c4_enter_c4_eni1_input_accepted;
assign local_bb1_c4_enter_c4_eni1_inc_pipelined_thread = 1'b1;
assign local_bb1_c4_enter_c4_eni1_dec_pipelined_thread = ~(1'b0);
assign local_bb1_c4_enter_c4_eni1_fu_stall_out = (~(local_bb1_c4_enter_c4_eni1_inputs_ready) | local_bb1_c4_exit_c4_exi2_entry_stall);
assign local_bb1_c4_enter_c4_eni1_stall_local = (local_bb1_c4_enter_c4_eni1_stall_in_0 | local_bb1_c4_enter_c4_eni1_stall_in_1);
assign local_bb1_c4_enter_c4_eni1_valid_out_0 = local_bb1_c4_enter_c4_eni1_inputs_ready;
assign local_bb1_c4_enter_c4_eni1_valid_out_1 = local_bb1_c4_enter_c4_eni1_inputs_ready;
assign local_bb1_c4_eni1_stall_in = (|local_bb1_c4_enter_c4_eni1_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb1_c4_ene1_stall_local;
wire [31:0] local_bb1_c4_ene1;

assign local_bb1_c4_ene1[31:0] = local_bb1_c4_enter_c4_eni1[63:32];

// This section implements an unregistered operation.
// 
wire SFC_4_VALID_8_8_0_valid_out;
wire SFC_4_VALID_8_8_0_stall_in;
wire SFC_4_VALID_8_8_0_inputs_ready;
wire SFC_4_VALID_8_8_0_stall_local;
wire SFC_4_VALID_8_8_0;

assign SFC_4_VALID_8_8_0_inputs_ready = local_bb1_c4_enter_c4_eni1_valid_out_1;
assign SFC_4_VALID_8_8_0 = local_bb1_c4_enter_c4_eni1_valid_bit;
assign SFC_4_VALID_8_8_0_valid_out = 1'b1;
assign local_bb1_c4_enter_c4_eni1_stall_in_1 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c4_ene1_valid_out_1;
wire local_bb1_c4_ene1_stall_in_1;
wire local_bb1_cmp18_NEG_valid_out;
wire local_bb1_cmp18_NEG_stall_in;
wire local_bb1_cmp18_NEG_inputs_ready;
wire local_bb1_cmp18_NEG_stall_local;
wire local_bb1_cmp18_NEG;

assign local_bb1_cmp18_NEG_inputs_ready = local_bb1_c4_enter_c4_eni1_valid_out_0;
assign local_bb1_cmp18_NEG = ($signed(local_bb1_c4_ene1) >= $signed(input_wii_ld_));
assign local_bb1_c4_ene1_valid_out_1 = 1'b1;
assign local_bb1_cmp18_NEG_valid_out = 1'b1;
assign local_bb1_c4_enter_c4_eni1_stall_in_0 = 1'b0;

// This section implements a registered operation.
// 
wire SFC_4_VALID_8_9_0_inputs_ready;
 reg SFC_4_VALID_8_9_0_valid_out_NO_SHIFT_REG;
wire SFC_4_VALID_8_9_0_stall_in;
wire SFC_4_VALID_8_9_0_output_regs_ready;
 reg SFC_4_VALID_8_9_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_4_VALID_8_9_0_causedstall;

assign SFC_4_VALID_8_9_0_inputs_ready = 1'b1;
assign SFC_4_VALID_8_9_0_output_regs_ready = local_bb1_c4_exit_c4_exi2_enable;
assign SFC_4_VALID_8_8_0_stall_in = 1'b0;
assign SFC_4_VALID_8_9_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c4_exit_c4_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_4_VALID_8_9_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_4_VALID_8_9_0_output_regs_ready)
		begin
			SFC_4_VALID_8_9_0_NO_SHIFT_REG <= SFC_4_VALID_8_8_0;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_8to9_bb1_c4_ene1_0_valid_out_NO_SHIFT_REG;
 logic rnode_8to9_bb1_c4_ene1_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_8to9_bb1_c4_ene1_0_NO_SHIFT_REG;
 logic rnode_8to9_bb1_c4_ene1_0_reg_9_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_8to9_bb1_c4_ene1_0_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb1_c4_ene1_0_valid_out_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb1_c4_ene1_0_stall_in_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb1_c4_ene1_0_stall_out_reg_9_NO_SHIFT_REG;

acl_data_fifo rnode_8to9_bb1_c4_ene1_0_reg_9_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_8to9_bb1_c4_ene1_0_reg_9_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_8to9_bb1_c4_ene1_0_stall_in_reg_9_NO_SHIFT_REG),
	.valid_out(rnode_8to9_bb1_c4_ene1_0_valid_out_reg_9_NO_SHIFT_REG),
	.stall_out(rnode_8to9_bb1_c4_ene1_0_stall_out_reg_9_NO_SHIFT_REG),
	.data_in(local_bb1_c4_ene1),
	.data_out(rnode_8to9_bb1_c4_ene1_0_reg_9_NO_SHIFT_REG)
);

defparam rnode_8to9_bb1_c4_ene1_0_reg_9_fifo.DEPTH = 1;
defparam rnode_8to9_bb1_c4_ene1_0_reg_9_fifo.DATA_WIDTH = 32;
defparam rnode_8to9_bb1_c4_ene1_0_reg_9_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_8to9_bb1_c4_ene1_0_reg_9_fifo.IMPL = "shift_reg";

assign rnode_8to9_bb1_c4_ene1_0_reg_9_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb1_c4_ene1_stall_in_1 = 1'b0;
assign rnode_8to9_bb1_c4_ene1_0_NO_SHIFT_REG = rnode_8to9_bb1_c4_ene1_0_reg_9_NO_SHIFT_REG;
assign rnode_8to9_bb1_c4_ene1_0_stall_in_reg_9_NO_SHIFT_REG = ~(local_bb1_c4_exit_c4_exi2_enable);
assign rnode_8to9_bb1_c4_ene1_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_8to9_bb1_cmp18_NEG_0_valid_out_NO_SHIFT_REG;
 logic rnode_8to9_bb1_cmp18_NEG_0_stall_in_NO_SHIFT_REG;
 logic rnode_8to9_bb1_cmp18_NEG_0_NO_SHIFT_REG;
 logic rnode_8to9_bb1_cmp18_NEG_0_reg_9_inputs_ready_NO_SHIFT_REG;
 logic rnode_8to9_bb1_cmp18_NEG_0_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb1_cmp18_NEG_0_valid_out_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb1_cmp18_NEG_0_stall_in_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb1_cmp18_NEG_0_stall_out_reg_9_NO_SHIFT_REG;

acl_data_fifo rnode_8to9_bb1_cmp18_NEG_0_reg_9_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_8to9_bb1_cmp18_NEG_0_reg_9_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_8to9_bb1_cmp18_NEG_0_stall_in_reg_9_NO_SHIFT_REG),
	.valid_out(rnode_8to9_bb1_cmp18_NEG_0_valid_out_reg_9_NO_SHIFT_REG),
	.stall_out(rnode_8to9_bb1_cmp18_NEG_0_stall_out_reg_9_NO_SHIFT_REG),
	.data_in(local_bb1_cmp18_NEG),
	.data_out(rnode_8to9_bb1_cmp18_NEG_0_reg_9_NO_SHIFT_REG)
);

defparam rnode_8to9_bb1_cmp18_NEG_0_reg_9_fifo.DEPTH = 1;
defparam rnode_8to9_bb1_cmp18_NEG_0_reg_9_fifo.DATA_WIDTH = 1;
defparam rnode_8to9_bb1_cmp18_NEG_0_reg_9_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_8to9_bb1_cmp18_NEG_0_reg_9_fifo.IMPL = "shift_reg";

assign rnode_8to9_bb1_cmp18_NEG_0_reg_9_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb1_cmp18_NEG_stall_in = 1'b0;
assign rnode_8to9_bb1_cmp18_NEG_0_NO_SHIFT_REG = rnode_8to9_bb1_cmp18_NEG_0_reg_9_NO_SHIFT_REG;
assign rnode_8to9_bb1_cmp18_NEG_0_stall_in_reg_9_NO_SHIFT_REG = ~(local_bb1_c4_exit_c4_exi2_enable);
assign rnode_8to9_bb1_cmp18_NEG_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb1_c4_exi1_stall_local;
wire [95:0] local_bb1_c4_exi1;

assign local_bb1_c4_exi1[31:0] = 32'bx;
assign local_bb1_c4_exi1[63:32] = rnode_8to9_bb1_c4_ene1_0_NO_SHIFT_REG;
assign local_bb1_c4_exi1[95:64] = 32'bx;

// This section implements an unregistered operation.
// 
wire local_bb1_c4_exi2_valid_out;
wire local_bb1_c4_exi2_stall_in;
wire local_bb1_c4_exi2_inputs_ready;
wire local_bb1_c4_exi2_stall_local;
wire [95:0] local_bb1_c4_exi2;

assign local_bb1_c4_exi2_inputs_ready = (rnode_8to9_bb1_c4_ene1_0_valid_out_NO_SHIFT_REG & rnode_8to9_bb1_cmp18_NEG_0_valid_out_NO_SHIFT_REG);
assign local_bb1_c4_exi2[63:0] = local_bb1_c4_exi1[63:0];
assign local_bb1_c4_exi2[64] = rnode_8to9_bb1_cmp18_NEG_0_NO_SHIFT_REG;
assign local_bb1_c4_exi2[95:65] = local_bb1_c4_exi1[95:65];
assign local_bb1_c4_exi2_valid_out = 1'b1;
assign rnode_8to9_bb1_c4_ene1_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_8to9_bb1_cmp18_NEG_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c4_exit_c4_exi2_valid_out_0;
wire local_bb1_c4_exit_c4_exi2_stall_in_0;
wire local_bb1_c4_exit_c4_exi2_valid_out_1;
wire local_bb1_c4_exit_c4_exi2_stall_in_1;
wire local_bb1_c4_exit_c4_exi2_inputs_ready;
wire local_bb1_c4_exit_c4_exi2_stall_local;
wire [95:0] local_bb1_c4_exit_c4_exi2;
wire local_bb1_c4_exit_c4_exi2_valid;
wire local_bb1_c4_exit_c4_exi2_fu_stall_out;

acl_enable_sink local_bb1_c4_exit_c4_exi2_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb1_c4_exi2),
	.data_out(local_bb1_c4_exit_c4_exi2),
	.input_accepted(local_bb1_c4_enter_c4_eni1_input_accepted),
	.valid_out(local_bb1_c4_exit_c4_exi2_valid),
	.stall_in(local_bb1_c4_exit_c4_exi2_stall_local),
	.enable(local_bb1_c4_exit_c4_exi2_enable),
	.valid_in(local_bb1_c4_exit_c4_exi2_valid_in),
	.stall_entry(local_bb1_c4_exit_c4_exi2_entry_stall),
	.inc_pipelined_thread(local_bb1_c4_enter_c4_eni1_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb1_c4_enter_c4_eni1_dec_pipelined_thread)
);

defparam local_bb1_c4_exit_c4_exi2_instance.DATA_WIDTH = 96;
defparam local_bb1_c4_exit_c4_exi2_instance.PIPELINE_DEPTH = 1;
defparam local_bb1_c4_exit_c4_exi2_instance.SCHEDULEII = 1;
defparam local_bb1_c4_exit_c4_exi2_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb1_c4_exit_c4_exi2_inputs_ready = (local_bb1_c4_exi2_valid_out & SFC_4_VALID_8_9_0_valid_out_NO_SHIFT_REG);
assign local_bb1_c4_exit_c4_exi2_valid_in = SFC_4_VALID_8_9_0_NO_SHIFT_REG;
assign local_bb1_c4_exit_c4_exi2_fu_stall_out = ~(local_bb1_c4_exit_c4_exi2_enable);
assign local_bb1_c4_exit_c4_exi2_stall_local = (local_bb1_c4_exit_c4_exi2_stall_in_0 | local_bb1_c4_exit_c4_exi2_stall_in_1);
assign local_bb1_c4_exit_c4_exi2_valid_out_0 = local_bb1_c4_exit_c4_exi2_valid;
assign local_bb1_c4_exit_c4_exi2_valid_out_1 = local_bb1_c4_exit_c4_exi2_valid;
assign local_bb1_c4_exi2_stall_in = 1'b0;
assign SFC_4_VALID_8_9_0_stall_in = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c4_exe1_stall_local;
wire [31:0] local_bb1_c4_exe1;

assign local_bb1_c4_exe1[31:0] = local_bb1_c4_exit_c4_exi2[63:32];

// This section implements an unregistered operation.
// 
wire local_bb1_c4_exe1_valid_out;
wire local_bb1_c4_exe1_stall_in;
wire local_bb1_c4_exe2_valid_out;
wire local_bb1_c4_exe2_stall_in;
wire local_bb1_c4_exe2_inputs_ready;
wire local_bb1_c4_exe2_stall_local;
wire local_bb1_c4_exe2;

assign local_bb1_c4_exe2_inputs_ready = (local_bb1_c4_exit_c4_exi2_valid_out_0 & local_bb1_c4_exit_c4_exi2_valid_out_1);
assign local_bb1_c4_exe2 = local_bb1_c4_exit_c4_exi2[64];
assign local_bb1_c4_exe2_stall_local = (local_bb1_c4_exe1_stall_in | local_bb1_c4_exe2_stall_in);
assign local_bb1_c4_exe1_valid_out = local_bb1_c4_exe2_inputs_ready;
assign local_bb1_c4_exe2_valid_out = local_bb1_c4_exe2_inputs_ready;
assign local_bb1_c4_exit_c4_exi2_stall_in_0 = (local_bb1_c4_exe2_stall_local | ~(local_bb1_c4_exe2_inputs_ready));
assign local_bb1_c4_exit_c4_exi2_stall_in_1 = (local_bb1_c4_exe2_stall_local | ~(local_bb1_c4_exe2_inputs_ready));

// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg [31:0] lvb_bb1_c4_exe1_reg_NO_SHIFT_REG;
 reg lvb_bb1_c4_exe2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb1_c4_exe2_valid_out & local_bb1_c4_exe1_valid_out & rnode_1to9_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG);
assign branch_var__output_regs_ready = (~(stall_in) | ~(branch_node_valid_out_NO_SHIFT_REG));
assign local_bb1_c4_exe2_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb1_c4_exe1_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_1to9_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_bb1_c4_exe1 = lvb_bb1_c4_exe1_reg_NO_SHIFT_REG;
assign lvb_bb1_c4_exe2 = lvb_bb1_c4_exe2_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id = lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;
assign combined_branch_stall_in_signal = stall_in;
assign valid_out = branch_node_valid_out_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
		lvb_bb1_c4_exe1_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_c4_exe2_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_bb1_c4_exe1_reg_NO_SHIFT_REG <= local_bb1_c4_exe1;
			lvb_bb1_c4_exe2_reg_NO_SHIFT_REG <= local_bb1_c4_exe2;
			lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= rnode_1to9_input_acl_hw_wg_id_0_NO_SHIFT_REG;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module reluLayer_basic_block_2
	(
		input 		clock,
		input 		resetn,
		input [63:0] 		input_inputFeatureMap,
		input [63:0] 		input_outputFeatureMap,
		input [31:0] 		input_wii_ld_,
		input [31:0] 		input_wii_mul20,
		input 		valid_in_0,
		output 		stall_out_0,
		input 		input_c4_exe2_0,
		input [31:0] 		input_reluCounter_019_0,
		input [31:0] 		input_acl_hw_wg_id_0,
		input 		valid_in_1,
		output 		stall_out_1,
		input 		input_c4_exe2_1,
		input [31:0] 		input_reluCounter_019_1,
		input [31:0] 		input_acl_hw_wg_id_1,
		output 		valid_out_0,
		input 		stall_in_0,
		output 		lvb_c4_exe2_0,
		output [31:0] 		lvb_bb2_add22_0,
		output [31:0] 		lvb_input_acl_hw_wg_id_0,
		output 		valid_out_1,
		input 		stall_in_1,
		output 		lvb_c4_exe2_1,
		output [31:0] 		lvb_bb2_add22_1,
		output [31:0] 		lvb_input_acl_hw_wg_id_1,
		input [31:0] 		workgroup_size,
		input 		start,
		output 		avm_local_bb2_ld__enable,
		input [511:0] 		avm_local_bb2_ld__readdata,
		input 		avm_local_bb2_ld__readdatavalid,
		input 		avm_local_bb2_ld__waitrequest,
		output [31:0] 		avm_local_bb2_ld__address,
		output 		avm_local_bb2_ld__read,
		output 		avm_local_bb2_ld__write,
		input 		avm_local_bb2_ld__writeack,
		output [511:0] 		avm_local_bb2_ld__writedata,
		output [63:0] 		avm_local_bb2_ld__byteenable,
		output [4:0] 		avm_local_bb2_ld__burstcount,
		output 		local_bb2_ld__active,
		input 		clock2x,
		output 		avm_local_bb2_st_cond_enable,
		input [511:0] 		avm_local_bb2_st_cond_readdata,
		input 		avm_local_bb2_st_cond_readdatavalid,
		input 		avm_local_bb2_st_cond_waitrequest,
		output [31:0] 		avm_local_bb2_st_cond_address,
		output 		avm_local_bb2_st_cond_read,
		output 		avm_local_bb2_st_cond_write,
		input 		avm_local_bb2_st_cond_writeack,
		output [511:0] 		avm_local_bb2_st_cond_writedata,
		output [63:0] 		avm_local_bb2_st_cond_byteenable,
		output [4:0] 		avm_local_bb2_st_cond_burstcount,
		output 		local_bb2_st_cond_active
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((valid_in_0 & valid_in_1) & ~((stall_out_0 | stall_out_1)));
assign _exit = ((valid_out_0 & valid_out_1) & ~((stall_in_0 | stall_in_1)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
 reg input_c4_exe2_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_reluCounter_019_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
 reg local_lvm_c4_exe2_NO_SHIFT_REG;
 reg [31:0] local_lvm_reluCounter_019_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;
 reg input_c4_exe2_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_reluCounter_019_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG));
assign stall_out_0 = merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
assign stall_out_1 = merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_0_staging_reg_NO_SHIFT_REG | valid_in_0))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		if ((merge_node_valid_in_1_staging_reg_NO_SHIFT_REG | valid_in_1))
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b1;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
		end
		else
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b0;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_c4_exe2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_reluCounter_019_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		input_c4_exe2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_reluCounter_019_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_0_staging_reg_NO_SHIFT_REG))
			begin
				input_c4_exe2_0_staging_reg_NO_SHIFT_REG <= input_c4_exe2_0;
				input_reluCounter_019_0_staging_reg_NO_SHIFT_REG <= input_reluCounter_019_0;
				input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= valid_in_0;
			end
		end
		else
		begin
			merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
		if (((merge_block_selector_NO_SHIFT_REG != 1'b1) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_1_staging_reg_NO_SHIFT_REG))
			begin
				input_c4_exe2_1_staging_reg_NO_SHIFT_REG <= input_c4_exe2_1;
				input_reluCounter_019_1_staging_reg_NO_SHIFT_REG <= input_reluCounter_019_1;
				input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= valid_in_1;
			end
		end
		else
		begin
			merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_0_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_c4_exe2_NO_SHIFT_REG <= input_c4_exe2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_reluCounter_019_NO_SHIFT_REG <= input_reluCounter_019_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_c4_exe2_NO_SHIFT_REG <= input_c4_exe2_0;
					local_lvm_reluCounter_019_NO_SHIFT_REG <= input_reluCounter_019_0;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				end
			end

			1'b1:
			begin
				if (merge_node_valid_in_1_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_c4_exe2_NO_SHIFT_REG <= input_c4_exe2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_reluCounter_019_NO_SHIFT_REG <= input_reluCounter_019_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_c4_exe2_NO_SHIFT_REG <= input_c4_exe2_1;
					local_lvm_reluCounter_019_NO_SHIFT_REG <= input_reluCounter_019_1;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb2_idxprom_stall_local;
wire [63:0] local_bb2_idxprom;

assign local_bb2_idxprom[32] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[33] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[34] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[35] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[36] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[37] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[38] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[39] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[40] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[41] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[42] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[43] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[44] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[45] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[46] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[47] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[48] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[49] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[50] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[51] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[52] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[53] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[54] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[55] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[56] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[57] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[58] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[59] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[60] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[61] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[62] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[63] = local_lvm_reluCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[31:0] = local_lvm_reluCounter_019_NO_SHIFT_REG;

// Register node:
//  * latency = 323
//  * capacity = 323
 logic rnode_1to324_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to324_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to324_input_acl_hw_wg_id_0_NO_SHIFT_REG;
 logic rnode_1to324_input_acl_hw_wg_id_0_reg_324_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to324_input_acl_hw_wg_id_0_reg_324_NO_SHIFT_REG;
 logic rnode_1to324_input_acl_hw_wg_id_0_valid_out_reg_324_NO_SHIFT_REG;
 logic rnode_1to324_input_acl_hw_wg_id_0_stall_in_reg_324_NO_SHIFT_REG;
 logic rnode_1to324_input_acl_hw_wg_id_0_stall_out_reg_324_NO_SHIFT_REG;

acl_data_fifo rnode_1to324_input_acl_hw_wg_id_0_reg_324_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to324_input_acl_hw_wg_id_0_reg_324_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to324_input_acl_hw_wg_id_0_stall_in_reg_324_NO_SHIFT_REG),
	.valid_out(rnode_1to324_input_acl_hw_wg_id_0_valid_out_reg_324_NO_SHIFT_REG),
	.stall_out(rnode_1to324_input_acl_hw_wg_id_0_stall_out_reg_324_NO_SHIFT_REG),
	.data_in(local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG),
	.data_out(rnode_1to324_input_acl_hw_wg_id_0_reg_324_NO_SHIFT_REG)
);

defparam rnode_1to324_input_acl_hw_wg_id_0_reg_324_fifo.DEPTH = 324;
defparam rnode_1to324_input_acl_hw_wg_id_0_reg_324_fifo.DATA_WIDTH = 32;
defparam rnode_1to324_input_acl_hw_wg_id_0_reg_324_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to324_input_acl_hw_wg_id_0_reg_324_fifo.IMPL = "ram";

assign rnode_1to324_input_acl_hw_wg_id_0_reg_324_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_1_NO_SHIFT_REG;
assign merge_node_stall_in_1 = rnode_1to324_input_acl_hw_wg_id_0_stall_out_reg_324_NO_SHIFT_REG;
assign rnode_1to324_input_acl_hw_wg_id_0_NO_SHIFT_REG = rnode_1to324_input_acl_hw_wg_id_0_reg_324_NO_SHIFT_REG;
assign rnode_1to324_input_acl_hw_wg_id_0_stall_in_reg_324_NO_SHIFT_REG = rnode_1to324_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG;
assign rnode_1to324_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG = rnode_1to324_input_acl_hw_wg_id_0_valid_out_reg_324_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_c4_exe2_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_1_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_stall_out_reg_2_NO_SHIFT_REG;
 reg rnode_1to2_c4_exe2_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to2_c4_exe2_0_consumed_1_NO_SHIFT_REG;
wire [63:0] rci_rcnode_1to322_rc3_mul20_0_reg_1;

acl_data_fifo rnode_1to2_c4_exe2_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_c4_exe2_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_c4_exe2_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_c4_exe2_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_c4_exe2_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_lvm_c4_exe2_NO_SHIFT_REG),
	.data_out(rnode_1to2_c4_exe2_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_c4_exe2_0_reg_2_fifo.DEPTH = 2;
defparam rnode_1to2_c4_exe2_0_reg_2_fifo.DATA_WIDTH = 1;
defparam rnode_1to2_c4_exe2_0_reg_2_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to2_c4_exe2_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_c4_exe2_0_reg_2_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_2_NO_SHIFT_REG;
assign merge_node_stall_in_2 = rnode_1to2_c4_exe2_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_c4_exe2_0_stall_in_0_reg_2_NO_SHIFT_REG = ((rnode_1to2_c4_exe2_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to2_c4_exe2_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to2_c4_exe2_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to2_c4_exe2_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to2_c4_exe2_0_valid_out_0_NO_SHIFT_REG = (rnode_1to2_c4_exe2_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_c4_exe2_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_c4_exe2_0_valid_out_1_NO_SHIFT_REG = (rnode_1to2_c4_exe2_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_c4_exe2_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to2_c4_exe2_0_NO_SHIFT_REG = rnode_1to2_c4_exe2_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_c4_exe2_1_NO_SHIFT_REG = rnode_1to2_c4_exe2_0_reg_2_NO_SHIFT_REG;
assign rci_rcnode_1to322_rc3_mul20_0_reg_1[31:0] = input_wii_mul20;
assign rci_rcnode_1to322_rc3_mul20_0_reg_1[63:32] = local_lvm_reluCounter_019_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to2_c4_exe2_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_c4_exe2_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to2_c4_exe2_0_consumed_0_NO_SHIFT_REG <= (rnode_1to2_c4_exe2_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_c4_exe2_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to2_c4_exe2_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to2_c4_exe2_0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_c4_exe2_0_consumed_1_NO_SHIFT_REG <= (rnode_1to2_c4_exe2_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_c4_exe2_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to2_c4_exe2_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to2_c4_exe2_0_stall_in_0_reg_2_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 321
//  * capacity = 321
 logic rcnode_1to322_rc3_mul20_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to322_rc3_mul20_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rcnode_1to322_rc3_mul20_0_NO_SHIFT_REG;
 logic rcnode_1to322_rc3_mul20_0_reg_322_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rcnode_1to322_rc3_mul20_0_reg_322_NO_SHIFT_REG;
 logic rcnode_1to322_rc3_mul20_0_valid_out_reg_322_NO_SHIFT_REG;
 logic rcnode_1to322_rc3_mul20_0_stall_in_reg_322_NO_SHIFT_REG;
 logic rcnode_1to322_rc3_mul20_0_stall_out_reg_322_IP_NO_SHIFT_REG;
 logic rcnode_1to322_rc3_mul20_0_stall_out_reg_322_NO_SHIFT_REG;

acl_data_fifo rcnode_1to322_rc3_mul20_0_reg_322_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to322_rc3_mul20_0_reg_322_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to322_rc3_mul20_0_stall_in_reg_322_NO_SHIFT_REG),
	.valid_out(rcnode_1to322_rc3_mul20_0_valid_out_reg_322_NO_SHIFT_REG),
	.stall_out(rcnode_1to322_rc3_mul20_0_stall_out_reg_322_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to322_rc3_mul20_0_reg_1),
	.data_out(rcnode_1to322_rc3_mul20_0_reg_322_NO_SHIFT_REG)
);

defparam rcnode_1to322_rc3_mul20_0_reg_322_fifo.DEPTH = 322;
defparam rcnode_1to322_rc3_mul20_0_reg_322_fifo.DATA_WIDTH = 64;
defparam rcnode_1to322_rc3_mul20_0_reg_322_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to322_rc3_mul20_0_reg_322_fifo.IMPL = "ram";

assign rcnode_1to322_rc3_mul20_0_reg_322_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_3_NO_SHIFT_REG;
assign rcnode_1to322_rc3_mul20_0_stall_out_reg_322_NO_SHIFT_REG = (~(rcnode_1to322_rc3_mul20_0_reg_322_inputs_ready_NO_SHIFT_REG) | rcnode_1to322_rc3_mul20_0_stall_out_reg_322_IP_NO_SHIFT_REG);
assign merge_node_stall_in_3 = rcnode_1to322_rc3_mul20_0_stall_out_reg_322_NO_SHIFT_REG;
assign rcnode_1to322_rc3_mul20_0_NO_SHIFT_REG = rcnode_1to322_rc3_mul20_0_reg_322_NO_SHIFT_REG;
assign rcnode_1to322_rc3_mul20_0_stall_in_reg_322_NO_SHIFT_REG = rcnode_1to322_rc3_mul20_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to322_rc3_mul20_0_valid_out_NO_SHIFT_REG = rcnode_1to322_rc3_mul20_0_valid_out_reg_322_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb2_arrayidx_stall_local;
wire [63:0] local_bb2_arrayidx;

assign local_bb2_arrayidx = ((input_inputFeatureMap & 64'hFFFFFFFFFFFFFC00) + (local_bb2_idxprom << 6'h2));

// This section implements an unregistered operation.
// 
wire local_bb2_arrayidx_valid_out;
wire local_bb2_arrayidx_stall_in;
wire local_bb2_arrayidx15_valid_out;
wire local_bb2_arrayidx15_stall_in;
wire local_bb2_arrayidx15_inputs_ready;
wire local_bb2_arrayidx15_stall_local;
wire [63:0] local_bb2_arrayidx15;
 reg local_bb2_arrayidx_consumed_0_NO_SHIFT_REG;
 reg local_bb2_arrayidx15_consumed_0_NO_SHIFT_REG;

assign local_bb2_arrayidx15_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb2_arrayidx15 = ((input_outputFeatureMap & 64'hFFFFFFFFFFFFFC00) + (local_bb2_idxprom << 6'h2));
assign local_bb2_arrayidx15_stall_local = ((local_bb2_arrayidx_stall_in & ~(local_bb2_arrayidx_consumed_0_NO_SHIFT_REG)) | (local_bb2_arrayidx15_stall_in & ~(local_bb2_arrayidx15_consumed_0_NO_SHIFT_REG)));
assign local_bb2_arrayidx_valid_out = (local_bb2_arrayidx15_inputs_ready & ~(local_bb2_arrayidx_consumed_0_NO_SHIFT_REG));
assign local_bb2_arrayidx15_valid_out = (local_bb2_arrayidx15_inputs_ready & ~(local_bb2_arrayidx15_consumed_0_NO_SHIFT_REG));
assign merge_node_stall_in_0 = (|local_bb2_arrayidx15_stall_local);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_arrayidx_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_arrayidx15_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb2_arrayidx_consumed_0_NO_SHIFT_REG <= (local_bb2_arrayidx15_inputs_ready & (local_bb2_arrayidx_consumed_0_NO_SHIFT_REG | ~(local_bb2_arrayidx_stall_in)) & local_bb2_arrayidx15_stall_local);
		local_bb2_arrayidx15_consumed_0_NO_SHIFT_REG <= (local_bb2_arrayidx15_inputs_ready & (local_bb2_arrayidx15_consumed_0_NO_SHIFT_REG | ~(local_bb2_arrayidx15_stall_in)) & local_bb2_arrayidx15_stall_local);
	end
end


// Register node:
//  * latency = 162
//  * capacity = 162
 logic rnode_2to164_c4_exe2_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to164_c4_exe2_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to164_c4_exe2_0_NO_SHIFT_REG;
 logic rnode_2to164_c4_exe2_0_reg_164_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to164_c4_exe2_0_reg_164_NO_SHIFT_REG;
 logic rnode_2to164_c4_exe2_0_valid_out_reg_164_NO_SHIFT_REG;
 logic rnode_2to164_c4_exe2_0_stall_in_reg_164_NO_SHIFT_REG;
 logic rnode_2to164_c4_exe2_0_stall_out_reg_164_NO_SHIFT_REG;
wire [63:0] rci_rcnode_322to323_rc0_mul20_0_reg_322;

acl_data_fifo rnode_2to164_c4_exe2_0_reg_164_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to164_c4_exe2_0_reg_164_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to164_c4_exe2_0_stall_in_reg_164_NO_SHIFT_REG),
	.valid_out(rnode_2to164_c4_exe2_0_valid_out_reg_164_NO_SHIFT_REG),
	.stall_out(rnode_2to164_c4_exe2_0_stall_out_reg_164_NO_SHIFT_REG),
	.data_in(rnode_1to2_c4_exe2_1_NO_SHIFT_REG),
	.data_out(rnode_2to164_c4_exe2_0_reg_164_NO_SHIFT_REG)
);

defparam rnode_2to164_c4_exe2_0_reg_164_fifo.DEPTH = 163;
defparam rnode_2to164_c4_exe2_0_reg_164_fifo.DATA_WIDTH = 1;
defparam rnode_2to164_c4_exe2_0_reg_164_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_2to164_c4_exe2_0_reg_164_fifo.IMPL = "ram";

assign rnode_2to164_c4_exe2_0_reg_164_inputs_ready_NO_SHIFT_REG = rnode_1to2_c4_exe2_0_valid_out_1_NO_SHIFT_REG;
assign rnode_1to2_c4_exe2_0_stall_in_1_NO_SHIFT_REG = rnode_2to164_c4_exe2_0_stall_out_reg_164_NO_SHIFT_REG;
assign rnode_2to164_c4_exe2_0_NO_SHIFT_REG = rnode_2to164_c4_exe2_0_reg_164_NO_SHIFT_REG;
assign rnode_2to164_c4_exe2_0_stall_in_reg_164_NO_SHIFT_REG = rnode_2to164_c4_exe2_0_stall_in_NO_SHIFT_REG;
assign rnode_2to164_c4_exe2_0_valid_out_NO_SHIFT_REG = rnode_2to164_c4_exe2_0_valid_out_reg_164_NO_SHIFT_REG;
assign rci_rcnode_322to323_rc0_mul20_0_reg_322[31:0] = input_wii_mul20;
assign rci_rcnode_322to323_rc0_mul20_0_reg_322[63:32] = rcnode_1to322_rc3_mul20_0_NO_SHIFT_REG[63:32];

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_322to323_rc0_mul20_0_valid_out_NO_SHIFT_REG;
 logic rcnode_322to323_rc0_mul20_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rcnode_322to323_rc0_mul20_0_NO_SHIFT_REG;
 logic rcnode_322to323_rc0_mul20_0_reg_323_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rcnode_322to323_rc0_mul20_0_reg_323_NO_SHIFT_REG;
 logic rcnode_322to323_rc0_mul20_0_valid_out_reg_323_NO_SHIFT_REG;
 logic rcnode_322to323_rc0_mul20_0_stall_in_reg_323_NO_SHIFT_REG;
 logic rcnode_322to323_rc0_mul20_0_stall_out_reg_323_IP_NO_SHIFT_REG;
 logic rcnode_322to323_rc0_mul20_0_stall_out_reg_323_NO_SHIFT_REG;

acl_data_fifo rcnode_322to323_rc0_mul20_0_reg_323_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_322to323_rc0_mul20_0_reg_323_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_322to323_rc0_mul20_0_stall_in_reg_323_NO_SHIFT_REG),
	.valid_out(rcnode_322to323_rc0_mul20_0_valid_out_reg_323_NO_SHIFT_REG),
	.stall_out(rcnode_322to323_rc0_mul20_0_stall_out_reg_323_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_322to323_rc0_mul20_0_reg_322),
	.data_out(rcnode_322to323_rc0_mul20_0_reg_323_NO_SHIFT_REG)
);

defparam rcnode_322to323_rc0_mul20_0_reg_323_fifo.DEPTH = 1;
defparam rcnode_322to323_rc0_mul20_0_reg_323_fifo.DATA_WIDTH = 64;
defparam rcnode_322to323_rc0_mul20_0_reg_323_fifo.ALLOW_FULL_WRITE = 1;
defparam rcnode_322to323_rc0_mul20_0_reg_323_fifo.IMPL = "ll_reg";

assign rcnode_322to323_rc0_mul20_0_reg_323_inputs_ready_NO_SHIFT_REG = rcnode_1to322_rc3_mul20_0_valid_out_NO_SHIFT_REG;
assign rcnode_322to323_rc0_mul20_0_stall_out_reg_323_NO_SHIFT_REG = (~(rcnode_322to323_rc0_mul20_0_reg_323_inputs_ready_NO_SHIFT_REG) | rcnode_322to323_rc0_mul20_0_stall_out_reg_323_IP_NO_SHIFT_REG);
assign rcnode_1to322_rc3_mul20_0_stall_in_NO_SHIFT_REG = rcnode_322to323_rc0_mul20_0_stall_out_reg_323_NO_SHIFT_REG;
assign rcnode_322to323_rc0_mul20_0_NO_SHIFT_REG = rcnode_322to323_rc0_mul20_0_reg_323_NO_SHIFT_REG;
assign rcnode_322to323_rc0_mul20_0_stall_in_reg_323_NO_SHIFT_REG = rcnode_322to323_rc0_mul20_0_stall_in_NO_SHIFT_REG;
assign rcnode_322to323_rc0_mul20_0_valid_out_NO_SHIFT_REG = rcnode_322to323_rc0_mul20_0_valid_out_reg_323_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb2_arrayidx_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb2_arrayidx_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_1to2_bb2_arrayidx_0_NO_SHIFT_REG;
 logic rnode_1to2_bb2_arrayidx_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_1to2_bb2_arrayidx_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_arrayidx_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_arrayidx_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_arrayidx_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb2_arrayidx_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb2_arrayidx_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb2_arrayidx_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb2_arrayidx_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb2_arrayidx_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in((local_bb2_arrayidx & 64'hFFFFFFFFFFFFFFFC)),
	.data_out(rnode_1to2_bb2_arrayidx_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb2_arrayidx_0_reg_2_fifo.DEPTH = 2;
defparam rnode_1to2_bb2_arrayidx_0_reg_2_fifo.DATA_WIDTH = 64;
defparam rnode_1to2_bb2_arrayidx_0_reg_2_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to2_bb2_arrayidx_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_bb2_arrayidx_0_reg_2_inputs_ready_NO_SHIFT_REG = local_bb2_arrayidx_valid_out;
assign local_bb2_arrayidx_stall_in = rnode_1to2_bb2_arrayidx_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb2_arrayidx_0_NO_SHIFT_REG = rnode_1to2_bb2_arrayidx_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb2_arrayidx_0_stall_in_reg_2_NO_SHIFT_REG = rnode_1to2_bb2_arrayidx_0_stall_in_NO_SHIFT_REG;
assign rnode_1to2_bb2_arrayidx_0_valid_out_NO_SHIFT_REG = rnode_1to2_bb2_arrayidx_0_valid_out_reg_2_NO_SHIFT_REG;

// Register node:
//  * latency = 163
//  * capacity = 163
 logic rnode_1to164_bb2_arrayidx15_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to164_bb2_arrayidx15_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_1to164_bb2_arrayidx15_0_NO_SHIFT_REG;
 logic rnode_1to164_bb2_arrayidx15_0_reg_164_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_1to164_bb2_arrayidx15_0_reg_164_NO_SHIFT_REG;
 logic rnode_1to164_bb2_arrayidx15_0_valid_out_reg_164_NO_SHIFT_REG;
 logic rnode_1to164_bb2_arrayidx15_0_stall_in_reg_164_NO_SHIFT_REG;
 logic rnode_1to164_bb2_arrayidx15_0_stall_out_reg_164_NO_SHIFT_REG;

acl_data_fifo rnode_1to164_bb2_arrayidx15_0_reg_164_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to164_bb2_arrayidx15_0_reg_164_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to164_bb2_arrayidx15_0_stall_in_reg_164_NO_SHIFT_REG),
	.valid_out(rnode_1to164_bb2_arrayidx15_0_valid_out_reg_164_NO_SHIFT_REG),
	.stall_out(rnode_1to164_bb2_arrayidx15_0_stall_out_reg_164_NO_SHIFT_REG),
	.data_in((local_bb2_arrayidx15 & 64'hFFFFFFFFFFFFFFFC)),
	.data_out(rnode_1to164_bb2_arrayidx15_0_reg_164_NO_SHIFT_REG)
);

defparam rnode_1to164_bb2_arrayidx15_0_reg_164_fifo.DEPTH = 164;
defparam rnode_1to164_bb2_arrayidx15_0_reg_164_fifo.DATA_WIDTH = 64;
defparam rnode_1to164_bb2_arrayidx15_0_reg_164_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to164_bb2_arrayidx15_0_reg_164_fifo.IMPL = "ram";

assign rnode_1to164_bb2_arrayidx15_0_reg_164_inputs_ready_NO_SHIFT_REG = local_bb2_arrayidx15_valid_out;
assign local_bb2_arrayidx15_stall_in = rnode_1to164_bb2_arrayidx15_0_stall_out_reg_164_NO_SHIFT_REG;
assign rnode_1to164_bb2_arrayidx15_0_NO_SHIFT_REG = rnode_1to164_bb2_arrayidx15_0_reg_164_NO_SHIFT_REG;
assign rnode_1to164_bb2_arrayidx15_0_stall_in_reg_164_NO_SHIFT_REG = rnode_1to164_bb2_arrayidx15_0_stall_in_NO_SHIFT_REG;
assign rnode_1to164_bb2_arrayidx15_0_valid_out_NO_SHIFT_REG = rnode_1to164_bb2_arrayidx15_0_valid_out_reg_164_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_164to165_c4_exe2_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_164to165_c4_exe2_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_164to165_c4_exe2_0_NO_SHIFT_REG;
 logic rnode_164to165_c4_exe2_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_164to165_c4_exe2_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_164to165_c4_exe2_1_NO_SHIFT_REG;
 logic rnode_164to165_c4_exe2_0_reg_165_inputs_ready_NO_SHIFT_REG;
 logic rnode_164to165_c4_exe2_0_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_c4_exe2_0_valid_out_0_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_c4_exe2_0_stall_in_0_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_c4_exe2_0_stall_out_reg_165_NO_SHIFT_REG;
 reg rnode_164to165_c4_exe2_0_consumed_0_NO_SHIFT_REG;
 reg rnode_164to165_c4_exe2_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_164to165_c4_exe2_0_reg_165_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_164to165_c4_exe2_0_reg_165_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_164to165_c4_exe2_0_stall_in_0_reg_165_NO_SHIFT_REG),
	.valid_out(rnode_164to165_c4_exe2_0_valid_out_0_reg_165_NO_SHIFT_REG),
	.stall_out(rnode_164to165_c4_exe2_0_stall_out_reg_165_NO_SHIFT_REG),
	.data_in(rnode_2to164_c4_exe2_0_NO_SHIFT_REG),
	.data_out(rnode_164to165_c4_exe2_0_reg_165_NO_SHIFT_REG)
);

defparam rnode_164to165_c4_exe2_0_reg_165_fifo.DEPTH = 2;
defparam rnode_164to165_c4_exe2_0_reg_165_fifo.DATA_WIDTH = 1;
defparam rnode_164to165_c4_exe2_0_reg_165_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_164to165_c4_exe2_0_reg_165_fifo.IMPL = "ll_reg";

assign rnode_164to165_c4_exe2_0_reg_165_inputs_ready_NO_SHIFT_REG = rnode_2to164_c4_exe2_0_valid_out_NO_SHIFT_REG;
assign rnode_2to164_c4_exe2_0_stall_in_NO_SHIFT_REG = rnode_164to165_c4_exe2_0_stall_out_reg_165_NO_SHIFT_REG;
assign rnode_164to165_c4_exe2_0_stall_in_0_reg_165_NO_SHIFT_REG = ((rnode_164to165_c4_exe2_0_stall_in_0_NO_SHIFT_REG & ~(rnode_164to165_c4_exe2_0_consumed_0_NO_SHIFT_REG)) | (rnode_164to165_c4_exe2_0_stall_in_1_NO_SHIFT_REG & ~(rnode_164to165_c4_exe2_0_consumed_1_NO_SHIFT_REG)));
assign rnode_164to165_c4_exe2_0_valid_out_0_NO_SHIFT_REG = (rnode_164to165_c4_exe2_0_valid_out_0_reg_165_NO_SHIFT_REG & ~(rnode_164to165_c4_exe2_0_consumed_0_NO_SHIFT_REG));
assign rnode_164to165_c4_exe2_0_valid_out_1_NO_SHIFT_REG = (rnode_164to165_c4_exe2_0_valid_out_0_reg_165_NO_SHIFT_REG & ~(rnode_164to165_c4_exe2_0_consumed_1_NO_SHIFT_REG));
assign rnode_164to165_c4_exe2_0_NO_SHIFT_REG = rnode_164to165_c4_exe2_0_reg_165_NO_SHIFT_REG;
assign rnode_164to165_c4_exe2_1_NO_SHIFT_REG = rnode_164to165_c4_exe2_0_reg_165_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_164to165_c4_exe2_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_164to165_c4_exe2_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_164to165_c4_exe2_0_consumed_0_NO_SHIFT_REG <= (rnode_164to165_c4_exe2_0_valid_out_0_reg_165_NO_SHIFT_REG & (rnode_164to165_c4_exe2_0_consumed_0_NO_SHIFT_REG | ~(rnode_164to165_c4_exe2_0_stall_in_0_NO_SHIFT_REG)) & rnode_164to165_c4_exe2_0_stall_in_0_reg_165_NO_SHIFT_REG);
		rnode_164to165_c4_exe2_0_consumed_1_NO_SHIFT_REG <= (rnode_164to165_c4_exe2_0_valid_out_0_reg_165_NO_SHIFT_REG & (rnode_164to165_c4_exe2_0_consumed_1_NO_SHIFT_REG | ~(rnode_164to165_c4_exe2_0_stall_in_1_NO_SHIFT_REG)) & rnode_164to165_c4_exe2_0_stall_in_0_reg_165_NO_SHIFT_REG);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb2_add22_valid_out;
wire local_bb2_add22_stall_in;
wire local_bb2_add22_inputs_ready;
wire local_bb2_add22_stall_local;
wire [31:0] local_bb2_add22;

assign local_bb2_add22_inputs_ready = rcnode_322to323_rc0_mul20_0_valid_out_NO_SHIFT_REG;
assign local_bb2_add22 = (input_wii_mul20 + rcnode_322to323_rc0_mul20_0_NO_SHIFT_REG[63:32]);
assign local_bb2_add22_valid_out = local_bb2_add22_inputs_ready;
assign local_bb2_add22_stall_local = local_bb2_add22_stall_in;
assign rcnode_322to323_rc0_mul20_0_stall_in_NO_SHIFT_REG = (|local_bb2_add22_stall_local);

// This section implements a registered operation.
// 
wire local_bb2_ld__inputs_ready;
 reg local_bb2_ld__valid_out_NO_SHIFT_REG;
wire local_bb2_ld__stall_in;
wire local_bb2_ld__output_regs_ready;
wire local_bb2_ld__fu_stall_out;
wire local_bb2_ld__fu_valid_out;
wire [31:0] local_bb2_ld__lsu_dataout;
 reg [31:0] local_bb2_ld__NO_SHIFT_REG;
wire local_bb2_ld__causedstall;

lsu_top lsu_local_bb2_ld_ (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb2_ld__fu_stall_out),
	.i_valid(local_bb2_ld__inputs_ready),
	.i_address((rnode_1to2_bb2_arrayidx_0_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFFFC)),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(rnode_1to2_c4_exe2_0_NO_SHIFT_REG),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb2_ld__output_regs_ready)),
	.o_valid(local_bb2_ld__fu_valid_out),
	.o_readdata(local_bb2_ld__lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb2_ld__active),
	.avm_address(avm_local_bb2_ld__address),
	.avm_read(avm_local_bb2_ld__read),
	.avm_enable(avm_local_bb2_ld__enable),
	.avm_readdata(avm_local_bb2_ld__readdata),
	.avm_write(avm_local_bb2_ld__write),
	.avm_writeack(avm_local_bb2_ld__writeack),
	.avm_burstcount(avm_local_bb2_ld__burstcount),
	.avm_writedata(avm_local_bb2_ld__writedata),
	.avm_byteenable(avm_local_bb2_ld__byteenable),
	.avm_waitrequest(avm_local_bb2_ld__waitrequest),
	.avm_readdatavalid(avm_local_bb2_ld__readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb2_ld_.AWIDTH = 32;
defparam lsu_local_bb2_ld_.WIDTH_BYTES = 4;
defparam lsu_local_bb2_ld_.MWIDTH_BYTES = 64;
defparam lsu_local_bb2_ld_.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb2_ld_.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb2_ld_.READ = 1;
defparam lsu_local_bb2_ld_.ATOMIC = 0;
defparam lsu_local_bb2_ld_.WIDTH = 32;
defparam lsu_local_bb2_ld_.MWIDTH = 512;
defparam lsu_local_bb2_ld_.ATOMIC_WIDTH = 3;
defparam lsu_local_bb2_ld_.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb2_ld_.KERNEL_SIDE_MEM_LATENCY = 160;
defparam lsu_local_bb2_ld_.MEMORY_SIDE_MEM_LATENCY = 83;
defparam lsu_local_bb2_ld_.USE_WRITE_ACK = 0;
defparam lsu_local_bb2_ld_.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb2_ld_.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb2_ld_.NUMBER_BANKS = 1;
defparam lsu_local_bb2_ld_.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb2_ld_.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb2_ld_.USEINPUTFIFO = 0;
defparam lsu_local_bb2_ld_.USECACHING = 0;
defparam lsu_local_bb2_ld_.USEOUTPUTFIFO = 1;
defparam lsu_local_bb2_ld_.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb2_ld_.ADDRSPACE = 1;
defparam lsu_local_bb2_ld_.STYLE = "BURST-COALESCED";

assign local_bb2_ld__inputs_ready = (rnode_1to2_bb2_arrayidx_0_valid_out_NO_SHIFT_REG & rnode_1to2_c4_exe2_0_valid_out_0_NO_SHIFT_REG);
assign local_bb2_ld__output_regs_ready = (&(~(local_bb2_ld__valid_out_NO_SHIFT_REG) | ~(local_bb2_ld__stall_in)));
assign rnode_1to2_bb2_arrayidx_0_stall_in_NO_SHIFT_REG = (local_bb2_ld__fu_stall_out | ~(local_bb2_ld__inputs_ready));
assign rnode_1to2_c4_exe2_0_stall_in_0_NO_SHIFT_REG = (local_bb2_ld__fu_stall_out | ~(local_bb2_ld__inputs_ready));
assign local_bb2_ld__causedstall = (local_bb2_ld__inputs_ready && (local_bb2_ld__fu_stall_out && !(~(local_bb2_ld__output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_ld__NO_SHIFT_REG <= 'x;
		local_bb2_ld__valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_ld__output_regs_ready)
		begin
			local_bb2_ld__NO_SHIFT_REG <= local_bb2_ld__lsu_dataout;
			local_bb2_ld__valid_out_NO_SHIFT_REG <= local_bb2_ld__fu_valid_out;
		end
		else
		begin
			if (~(local_bb2_ld__stall_in))
			begin
				local_bb2_ld__valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_164to165_bb2_arrayidx15_0_valid_out_NO_SHIFT_REG;
 logic rnode_164to165_bb2_arrayidx15_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_164to165_bb2_arrayidx15_0_NO_SHIFT_REG;
 logic rnode_164to165_bb2_arrayidx15_0_reg_165_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_164to165_bb2_arrayidx15_0_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb2_arrayidx15_0_valid_out_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb2_arrayidx15_0_stall_in_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb2_arrayidx15_0_stall_out_reg_165_NO_SHIFT_REG;

acl_data_fifo rnode_164to165_bb2_arrayidx15_0_reg_165_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_164to165_bb2_arrayidx15_0_reg_165_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_164to165_bb2_arrayidx15_0_stall_in_reg_165_NO_SHIFT_REG),
	.valid_out(rnode_164to165_bb2_arrayidx15_0_valid_out_reg_165_NO_SHIFT_REG),
	.stall_out(rnode_164to165_bb2_arrayidx15_0_stall_out_reg_165_NO_SHIFT_REG),
	.data_in((rnode_1to164_bb2_arrayidx15_0_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFFFC)),
	.data_out(rnode_164to165_bb2_arrayidx15_0_reg_165_NO_SHIFT_REG)
);

defparam rnode_164to165_bb2_arrayidx15_0_reg_165_fifo.DEPTH = 2;
defparam rnode_164to165_bb2_arrayidx15_0_reg_165_fifo.DATA_WIDTH = 64;
defparam rnode_164to165_bb2_arrayidx15_0_reg_165_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_164to165_bb2_arrayidx15_0_reg_165_fifo.IMPL = "ll_reg";

assign rnode_164to165_bb2_arrayidx15_0_reg_165_inputs_ready_NO_SHIFT_REG = rnode_1to164_bb2_arrayidx15_0_valid_out_NO_SHIFT_REG;
assign rnode_1to164_bb2_arrayidx15_0_stall_in_NO_SHIFT_REG = rnode_164to165_bb2_arrayidx15_0_stall_out_reg_165_NO_SHIFT_REG;
assign rnode_164to165_bb2_arrayidx15_0_NO_SHIFT_REG = rnode_164to165_bb2_arrayidx15_0_reg_165_NO_SHIFT_REG;
assign rnode_164to165_bb2_arrayidx15_0_stall_in_reg_165_NO_SHIFT_REG = rnode_164to165_bb2_arrayidx15_0_stall_in_NO_SHIFT_REG;
assign rnode_164to165_bb2_arrayidx15_0_valid_out_NO_SHIFT_REG = rnode_164to165_bb2_arrayidx15_0_valid_out_reg_165_NO_SHIFT_REG;

// Register node:
//  * latency = 159
//  * capacity = 159
 logic rnode_165to324_c4_exe2_0_valid_out_NO_SHIFT_REG;
 logic rnode_165to324_c4_exe2_0_stall_in_NO_SHIFT_REG;
 logic rnode_165to324_c4_exe2_0_NO_SHIFT_REG;
 logic rnode_165to324_c4_exe2_0_reg_324_inputs_ready_NO_SHIFT_REG;
 logic rnode_165to324_c4_exe2_0_reg_324_NO_SHIFT_REG;
 logic rnode_165to324_c4_exe2_0_valid_out_reg_324_NO_SHIFT_REG;
 logic rnode_165to324_c4_exe2_0_stall_in_reg_324_NO_SHIFT_REG;
 logic rnode_165to324_c4_exe2_0_stall_out_reg_324_NO_SHIFT_REG;

acl_data_fifo rnode_165to324_c4_exe2_0_reg_324_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_165to324_c4_exe2_0_reg_324_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_165to324_c4_exe2_0_stall_in_reg_324_NO_SHIFT_REG),
	.valid_out(rnode_165to324_c4_exe2_0_valid_out_reg_324_NO_SHIFT_REG),
	.stall_out(rnode_165to324_c4_exe2_0_stall_out_reg_324_NO_SHIFT_REG),
	.data_in(rnode_164to165_c4_exe2_1_NO_SHIFT_REG),
	.data_out(rnode_165to324_c4_exe2_0_reg_324_NO_SHIFT_REG)
);

defparam rnode_165to324_c4_exe2_0_reg_324_fifo.DEPTH = 160;
defparam rnode_165to324_c4_exe2_0_reg_324_fifo.DATA_WIDTH = 1;
defparam rnode_165to324_c4_exe2_0_reg_324_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_165to324_c4_exe2_0_reg_324_fifo.IMPL = "ram";

assign rnode_165to324_c4_exe2_0_reg_324_inputs_ready_NO_SHIFT_REG = rnode_164to165_c4_exe2_0_valid_out_1_NO_SHIFT_REG;
assign rnode_164to165_c4_exe2_0_stall_in_1_NO_SHIFT_REG = rnode_165to324_c4_exe2_0_stall_out_reg_324_NO_SHIFT_REG;
assign rnode_165to324_c4_exe2_0_NO_SHIFT_REG = rnode_165to324_c4_exe2_0_reg_324_NO_SHIFT_REG;
assign rnode_165to324_c4_exe2_0_stall_in_reg_324_NO_SHIFT_REG = rnode_165to324_c4_exe2_0_stall_in_NO_SHIFT_REG;
assign rnode_165to324_c4_exe2_0_valid_out_NO_SHIFT_REG = rnode_165to324_c4_exe2_0_valid_out_reg_324_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_323to324_bb2_add22_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_323to324_bb2_add22_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_323to324_bb2_add22_0_NO_SHIFT_REG;
 logic rnode_323to324_bb2_add22_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_323to324_bb2_add22_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_323to324_bb2_add22_1_NO_SHIFT_REG;
 logic rnode_323to324_bb2_add22_0_reg_324_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_323to324_bb2_add22_0_reg_324_NO_SHIFT_REG;
 logic rnode_323to324_bb2_add22_0_valid_out_0_reg_324_NO_SHIFT_REG;
 logic rnode_323to324_bb2_add22_0_stall_in_0_reg_324_NO_SHIFT_REG;
 logic rnode_323to324_bb2_add22_0_stall_out_reg_324_NO_SHIFT_REG;
 reg rnode_323to324_bb2_add22_0_consumed_0_NO_SHIFT_REG;
 reg rnode_323to324_bb2_add22_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_323to324_bb2_add22_0_reg_324_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_323to324_bb2_add22_0_reg_324_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_323to324_bb2_add22_0_stall_in_0_reg_324_NO_SHIFT_REG),
	.valid_out(rnode_323to324_bb2_add22_0_valid_out_0_reg_324_NO_SHIFT_REG),
	.stall_out(rnode_323to324_bb2_add22_0_stall_out_reg_324_NO_SHIFT_REG),
	.data_in(local_bb2_add22),
	.data_out(rnode_323to324_bb2_add22_0_reg_324_NO_SHIFT_REG)
);

defparam rnode_323to324_bb2_add22_0_reg_324_fifo.DEPTH = 1;
defparam rnode_323to324_bb2_add22_0_reg_324_fifo.DATA_WIDTH = 32;
defparam rnode_323to324_bb2_add22_0_reg_324_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_323to324_bb2_add22_0_reg_324_fifo.IMPL = "ll_reg";

assign rnode_323to324_bb2_add22_0_reg_324_inputs_ready_NO_SHIFT_REG = local_bb2_add22_valid_out;
assign local_bb2_add22_stall_in = rnode_323to324_bb2_add22_0_stall_out_reg_324_NO_SHIFT_REG;
assign rnode_323to324_bb2_add22_0_stall_in_0_reg_324_NO_SHIFT_REG = ((rnode_323to324_bb2_add22_0_stall_in_0_NO_SHIFT_REG & ~(rnode_323to324_bb2_add22_0_consumed_0_NO_SHIFT_REG)) | (rnode_323to324_bb2_add22_0_stall_in_1_NO_SHIFT_REG & ~(rnode_323to324_bb2_add22_0_consumed_1_NO_SHIFT_REG)));
assign rnode_323to324_bb2_add22_0_valid_out_0_NO_SHIFT_REG = (rnode_323to324_bb2_add22_0_valid_out_0_reg_324_NO_SHIFT_REG & ~(rnode_323to324_bb2_add22_0_consumed_0_NO_SHIFT_REG));
assign rnode_323to324_bb2_add22_0_valid_out_1_NO_SHIFT_REG = (rnode_323to324_bb2_add22_0_valid_out_0_reg_324_NO_SHIFT_REG & ~(rnode_323to324_bb2_add22_0_consumed_1_NO_SHIFT_REG));
assign rnode_323to324_bb2_add22_0_NO_SHIFT_REG = rnode_323to324_bb2_add22_0_reg_324_NO_SHIFT_REG;
assign rnode_323to324_bb2_add22_1_NO_SHIFT_REG = rnode_323to324_bb2_add22_0_reg_324_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_323to324_bb2_add22_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_323to324_bb2_add22_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_323to324_bb2_add22_0_consumed_0_NO_SHIFT_REG <= (rnode_323to324_bb2_add22_0_valid_out_0_reg_324_NO_SHIFT_REG & (rnode_323to324_bb2_add22_0_consumed_0_NO_SHIFT_REG | ~(rnode_323to324_bb2_add22_0_stall_in_0_NO_SHIFT_REG)) & rnode_323to324_bb2_add22_0_stall_in_0_reg_324_NO_SHIFT_REG);
		rnode_323to324_bb2_add22_0_consumed_1_NO_SHIFT_REG <= (rnode_323to324_bb2_add22_0_valid_out_0_reg_324_NO_SHIFT_REG & (rnode_323to324_bb2_add22_0_consumed_1_NO_SHIFT_REG | ~(rnode_323to324_bb2_add22_0_stall_in_1_NO_SHIFT_REG)) & rnode_323to324_bb2_add22_0_stall_in_0_reg_324_NO_SHIFT_REG);
	end
end


// This section implements a staging register.
// 
wire rstag_162to162_bb2_ld__valid_out_0;
wire rstag_162to162_bb2_ld__stall_in_0;
wire rstag_162to162_bb2_ld__valid_out_1;
wire rstag_162to162_bb2_ld__stall_in_1;
wire rstag_162to162_bb2_ld__inputs_ready;
wire rstag_162to162_bb2_ld__stall_local;
 reg rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG;
wire rstag_162to162_bb2_ld__combined_valid;
 reg [31:0] rstag_162to162_bb2_ld__staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_162to162_bb2_ld_;
 reg rstag_162to162_bb2_ld__consumed_0_NO_SHIFT_REG;
 reg rstag_162to162_bb2_ld__consumed_1_NO_SHIFT_REG;

assign rstag_162to162_bb2_ld__inputs_ready = local_bb2_ld__valid_out_NO_SHIFT_REG;
assign rstag_162to162_bb2_ld_ = (rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG ? rstag_162to162_bb2_ld__staging_reg_NO_SHIFT_REG : local_bb2_ld__NO_SHIFT_REG);
assign rstag_162to162_bb2_ld__combined_valid = (rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG | rstag_162to162_bb2_ld__inputs_ready);
assign rstag_162to162_bb2_ld__stall_local = ((rstag_162to162_bb2_ld__stall_in_0 & ~(rstag_162to162_bb2_ld__consumed_0_NO_SHIFT_REG)) | (rstag_162to162_bb2_ld__stall_in_1 & ~(rstag_162to162_bb2_ld__consumed_1_NO_SHIFT_REG)));
assign rstag_162to162_bb2_ld__valid_out_0 = (rstag_162to162_bb2_ld__combined_valid & ~(rstag_162to162_bb2_ld__consumed_0_NO_SHIFT_REG));
assign rstag_162to162_bb2_ld__valid_out_1 = (rstag_162to162_bb2_ld__combined_valid & ~(rstag_162to162_bb2_ld__consumed_1_NO_SHIFT_REG));
assign local_bb2_ld__stall_in = (|rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_162to162_bb2_ld__staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_162to162_bb2_ld__stall_local)
		begin
			if (~(rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG))
			begin
				rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG <= rstag_162to162_bb2_ld__inputs_ready;
			end
		end
		else
		begin
			rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG))
		begin
			rstag_162to162_bb2_ld__staging_reg_NO_SHIFT_REG <= local_bb2_ld__NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_162to162_bb2_ld__consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_162to162_bb2_ld__consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_162to162_bb2_ld__consumed_0_NO_SHIFT_REG <= (rstag_162to162_bb2_ld__combined_valid & (rstag_162to162_bb2_ld__consumed_0_NO_SHIFT_REG | ~(rstag_162to162_bb2_ld__stall_in_0)) & rstag_162to162_bb2_ld__stall_local);
		rstag_162to162_bb2_ld__consumed_1_NO_SHIFT_REG <= (rstag_162to162_bb2_ld__combined_valid & (rstag_162to162_bb2_ld__consumed_1_NO_SHIFT_REG | ~(rstag_162to162_bb2_ld__stall_in_1)) & rstag_162to162_bb2_ld__stall_local);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb2_cmp20_valid_out;
wire local_bb2_cmp20_stall_in;
wire local_bb2_cmp20_inputs_ready;
wire local_bb2_cmp20_stall_local;
wire local_bb2_cmp20;
wire [64:0] rci_rcnode_324to325_rc1_bb2_add22_0_reg_324;

assign local_bb2_cmp20_inputs_ready = rnode_323to324_bb2_add22_0_valid_out_0_NO_SHIFT_REG;
assign local_bb2_cmp20 = ($signed(rnode_323to324_bb2_add22_0_NO_SHIFT_REG) >= $signed(input_wii_ld_));
assign local_bb2_cmp20_valid_out = local_bb2_cmp20_inputs_ready;
assign local_bb2_cmp20_stall_local = local_bb2_cmp20_stall_in;
assign rnode_323to324_bb2_add22_0_stall_in_0_NO_SHIFT_REG = (|local_bb2_cmp20_stall_local);
assign rci_rcnode_324to325_rc1_bb2_add22_0_reg_324[31:0] = rnode_323to324_bb2_add22_1_NO_SHIFT_REG;
assign rci_rcnode_324to325_rc1_bb2_add22_0_reg_324[63:32] = rnode_1to324_input_acl_hw_wg_id_0_NO_SHIFT_REG;
assign rci_rcnode_324to325_rc1_bb2_add22_0_reg_324[64] = rnode_165to324_c4_exe2_0_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_324to325_rc1_bb2_add22_0_valid_out_0_NO_SHIFT_REG;
 logic rcnode_324to325_rc1_bb2_add22_0_stall_in_0_NO_SHIFT_REG;
 logic [64:0] rcnode_324to325_rc1_bb2_add22_0_NO_SHIFT_REG;
 logic rcnode_324to325_rc1_bb2_add22_0_valid_out_1_NO_SHIFT_REG;
 logic rcnode_324to325_rc1_bb2_add22_0_stall_in_1_NO_SHIFT_REG;
 logic [64:0] rcnode_324to325_rc1_bb2_add22_1_NO_SHIFT_REG;
 logic rcnode_324to325_rc1_bb2_add22_0_reg_325_inputs_ready_NO_SHIFT_REG;
 logic [64:0] rcnode_324to325_rc1_bb2_add22_0_reg_325_NO_SHIFT_REG;
 logic rcnode_324to325_rc1_bb2_add22_0_valid_out_0_reg_325_NO_SHIFT_REG;
 logic rcnode_324to325_rc1_bb2_add22_0_stall_in_0_reg_325_NO_SHIFT_REG;
 logic rcnode_324to325_rc1_bb2_add22_0_stall_out_0_reg_325_IP_NO_SHIFT_REG;
 logic rcnode_324to325_rc1_bb2_add22_0_stall_out_0_reg_325_NO_SHIFT_REG;

acl_data_fifo rcnode_324to325_rc1_bb2_add22_0_reg_325_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_324to325_rc1_bb2_add22_0_reg_325_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_324to325_rc1_bb2_add22_0_stall_in_0_reg_325_NO_SHIFT_REG),
	.valid_out(rcnode_324to325_rc1_bb2_add22_0_valid_out_0_reg_325_NO_SHIFT_REG),
	.stall_out(rcnode_324to325_rc1_bb2_add22_0_stall_out_0_reg_325_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_324to325_rc1_bb2_add22_0_reg_324),
	.data_out(rcnode_324to325_rc1_bb2_add22_0_reg_325_NO_SHIFT_REG)
);

defparam rcnode_324to325_rc1_bb2_add22_0_reg_325_fifo.DEPTH = 1;
defparam rcnode_324to325_rc1_bb2_add22_0_reg_325_fifo.DATA_WIDTH = 65;
defparam rcnode_324to325_rc1_bb2_add22_0_reg_325_fifo.ALLOW_FULL_WRITE = 1;
defparam rcnode_324to325_rc1_bb2_add22_0_reg_325_fifo.IMPL = "ll_reg";

assign rcnode_324to325_rc1_bb2_add22_0_reg_325_inputs_ready_NO_SHIFT_REG = (rnode_323to324_bb2_add22_0_valid_out_1_NO_SHIFT_REG & rnode_1to324_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG & rnode_165to324_c4_exe2_0_valid_out_NO_SHIFT_REG);
assign rcnode_324to325_rc1_bb2_add22_0_stall_out_0_reg_325_NO_SHIFT_REG = (~(rcnode_324to325_rc1_bb2_add22_0_reg_325_inputs_ready_NO_SHIFT_REG) | rcnode_324to325_rc1_bb2_add22_0_stall_out_0_reg_325_IP_NO_SHIFT_REG);
assign rnode_323to324_bb2_add22_0_stall_in_1_NO_SHIFT_REG = rcnode_324to325_rc1_bb2_add22_0_stall_out_0_reg_325_NO_SHIFT_REG;
assign rnode_1to324_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG = rcnode_324to325_rc1_bb2_add22_0_stall_out_0_reg_325_NO_SHIFT_REG;
assign rnode_165to324_c4_exe2_0_stall_in_NO_SHIFT_REG = rcnode_324to325_rc1_bb2_add22_0_stall_out_0_reg_325_NO_SHIFT_REG;
assign rcnode_324to325_rc1_bb2_add22_0_stall_in_0_reg_325_NO_SHIFT_REG = (rcnode_324to325_rc1_bb2_add22_0_stall_in_0_NO_SHIFT_REG | rcnode_324to325_rc1_bb2_add22_0_stall_in_1_NO_SHIFT_REG);
assign rcnode_324to325_rc1_bb2_add22_0_valid_out_0_NO_SHIFT_REG = rcnode_324to325_rc1_bb2_add22_0_valid_out_0_reg_325_NO_SHIFT_REG;
assign rcnode_324to325_rc1_bb2_add22_0_valid_out_1_NO_SHIFT_REG = rcnode_324to325_rc1_bb2_add22_0_valid_out_0_reg_325_NO_SHIFT_REG;
assign rcnode_324to325_rc1_bb2_add22_0_NO_SHIFT_REG = rcnode_324to325_rc1_bb2_add22_0_reg_325_NO_SHIFT_REG;
assign rcnode_324to325_rc1_bb2_add22_1_NO_SHIFT_REG = rcnode_324to325_rc1_bb2_add22_0_reg_325_NO_SHIFT_REG;

// Register node:
//  * latency = 3
//  * capacity = 3
 logic rnode_162to165_bb2_ld__0_valid_out_NO_SHIFT_REG;
 logic rnode_162to165_bb2_ld__0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_162to165_bb2_ld__0_NO_SHIFT_REG;
 logic rnode_162to165_bb2_ld__0_reg_165_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_162to165_bb2_ld__0_reg_165_NO_SHIFT_REG;
 logic rnode_162to165_bb2_ld__0_valid_out_reg_165_NO_SHIFT_REG;
 logic rnode_162to165_bb2_ld__0_stall_in_reg_165_NO_SHIFT_REG;
 logic rnode_162to165_bb2_ld__0_stall_out_reg_165_NO_SHIFT_REG;

acl_data_fifo rnode_162to165_bb2_ld__0_reg_165_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_162to165_bb2_ld__0_reg_165_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_162to165_bb2_ld__0_stall_in_reg_165_NO_SHIFT_REG),
	.valid_out(rnode_162to165_bb2_ld__0_valid_out_reg_165_NO_SHIFT_REG),
	.stall_out(rnode_162to165_bb2_ld__0_stall_out_reg_165_NO_SHIFT_REG),
	.data_in(rstag_162to162_bb2_ld_),
	.data_out(rnode_162to165_bb2_ld__0_reg_165_NO_SHIFT_REG)
);

defparam rnode_162to165_bb2_ld__0_reg_165_fifo.DEPTH = 4;
defparam rnode_162to165_bb2_ld__0_reg_165_fifo.DATA_WIDTH = 32;
defparam rnode_162to165_bb2_ld__0_reg_165_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_162to165_bb2_ld__0_reg_165_fifo.IMPL = "ll_reg";

assign rnode_162to165_bb2_ld__0_reg_165_inputs_ready_NO_SHIFT_REG = rstag_162to162_bb2_ld__valid_out_0;
assign rstag_162to162_bb2_ld__stall_in_0 = rnode_162to165_bb2_ld__0_stall_out_reg_165_NO_SHIFT_REG;
assign rnode_162to165_bb2_ld__0_NO_SHIFT_REG = rnode_162to165_bb2_ld__0_reg_165_NO_SHIFT_REG;
assign rnode_162to165_bb2_ld__0_stall_in_reg_165_NO_SHIFT_REG = rnode_162to165_bb2_ld__0_stall_in_NO_SHIFT_REG;
assign rnode_162to165_bb2_ld__0_valid_out_NO_SHIFT_REG = rnode_162to165_bb2_ld__0_valid_out_reg_165_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb2_cmp10_inputs_ready;
 reg local_bb2_cmp10_valid_out_NO_SHIFT_REG;
wire local_bb2_cmp10_stall_in;
wire local_bb2_cmp10_output_regs_ready;
wire local_bb2_cmp10;
 reg local_bb2_cmp10_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb2_cmp10_valid_pipe_1_NO_SHIFT_REG;
wire local_bb2_cmp10_causedstall;

acl_fp_cmp fp_module_local_bb2_cmp10 (
	.clock(clock),
	.dataa(rstag_162to162_bb2_ld_),
	.datab(32'h0),
	.enable(local_bb2_cmp10_output_regs_ready),
	.result(local_bb2_cmp10)
);

defparam fp_module_local_bb2_cmp10.COMPARISON_MODE = 3;

assign local_bb2_cmp10_inputs_ready = rstag_162to162_bb2_ld__valid_out_1;
assign local_bb2_cmp10_output_regs_ready = (&(~(local_bb2_cmp10_valid_out_NO_SHIFT_REG) | ~(local_bb2_cmp10_stall_in)));
assign rstag_162to162_bb2_ld__stall_in_1 = (~(local_bb2_cmp10_output_regs_ready) | ~(local_bb2_cmp10_inputs_ready));
assign local_bb2_cmp10_causedstall = (local_bb2_cmp10_inputs_ready && (~(local_bb2_cmp10_output_regs_ready) && !(~(local_bb2_cmp10_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_cmp10_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_cmp10_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_cmp10_output_regs_ready)
		begin
			local_bb2_cmp10_valid_pipe_0_NO_SHIFT_REG <= local_bb2_cmp10_inputs_ready;
			local_bb2_cmp10_valid_pipe_1_NO_SHIFT_REG <= local_bb2_cmp10_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_cmp10_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_cmp10_output_regs_ready)
		begin
			local_bb2_cmp10_valid_out_NO_SHIFT_REG <= local_bb2_cmp10_valid_pipe_1_NO_SHIFT_REG;
		end
		else
		begin
			if (~(local_bb2_cmp10_stall_in))
			begin
				local_bb2_cmp10_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_324to325_bb2_cmp20_0_valid_out_NO_SHIFT_REG;
 logic rnode_324to325_bb2_cmp20_0_stall_in_NO_SHIFT_REG;
 logic rnode_324to325_bb2_cmp20_0_NO_SHIFT_REG;
 logic rnode_324to325_bb2_cmp20_0_reg_325_inputs_ready_NO_SHIFT_REG;
 logic rnode_324to325_bb2_cmp20_0_reg_325_NO_SHIFT_REG;
 logic rnode_324to325_bb2_cmp20_0_valid_out_reg_325_NO_SHIFT_REG;
 logic rnode_324to325_bb2_cmp20_0_stall_in_reg_325_NO_SHIFT_REG;
 logic rnode_324to325_bb2_cmp20_0_stall_out_reg_325_NO_SHIFT_REG;

acl_data_fifo rnode_324to325_bb2_cmp20_0_reg_325_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_324to325_bb2_cmp20_0_reg_325_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_324to325_bb2_cmp20_0_stall_in_reg_325_NO_SHIFT_REG),
	.valid_out(rnode_324to325_bb2_cmp20_0_valid_out_reg_325_NO_SHIFT_REG),
	.stall_out(rnode_324to325_bb2_cmp20_0_stall_out_reg_325_NO_SHIFT_REG),
	.data_in(local_bb2_cmp20),
	.data_out(rnode_324to325_bb2_cmp20_0_reg_325_NO_SHIFT_REG)
);

defparam rnode_324to325_bb2_cmp20_0_reg_325_fifo.DEPTH = 1;
defparam rnode_324to325_bb2_cmp20_0_reg_325_fifo.DATA_WIDTH = 1;
defparam rnode_324to325_bb2_cmp20_0_reg_325_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_324to325_bb2_cmp20_0_reg_325_fifo.IMPL = "ll_reg";

assign rnode_324to325_bb2_cmp20_0_reg_325_inputs_ready_NO_SHIFT_REG = local_bb2_cmp20_valid_out;
assign local_bb2_cmp20_stall_in = rnode_324to325_bb2_cmp20_0_stall_out_reg_325_NO_SHIFT_REG;
assign rnode_324to325_bb2_cmp20_0_NO_SHIFT_REG = rnode_324to325_bb2_cmp20_0_reg_325_NO_SHIFT_REG;
assign rnode_324to325_bb2_cmp20_0_stall_in_reg_325_NO_SHIFT_REG = rnode_324to325_bb2_cmp20_0_stall_in_NO_SHIFT_REG;
assign rnode_324to325_bb2_cmp20_0_valid_out_NO_SHIFT_REG = rnode_324to325_bb2_cmp20_0_valid_out_reg_325_NO_SHIFT_REG;

// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_165to165_bb2_cmp10_0_valid_out_NO_SHIFT_REG;
 logic rnode_165to165_bb2_cmp10_0_stall_in_NO_SHIFT_REG;
 logic rnode_165to165_bb2_cmp10_0_NO_SHIFT_REG;
 logic rnode_165to165_bb2_cmp10_0_reg_165_inputs_ready_NO_SHIFT_REG;
 logic rnode_165to165_bb2_cmp10_0_reg_165_NO_SHIFT_REG;
 logic rnode_165to165_bb2_cmp10_0_valid_out_reg_165_NO_SHIFT_REG;
 logic rnode_165to165_bb2_cmp10_0_stall_in_reg_165_NO_SHIFT_REG;
 logic rnode_165to165_bb2_cmp10_0_stall_out_reg_165_NO_SHIFT_REG;

acl_data_fifo rnode_165to165_bb2_cmp10_0_reg_165_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_165to165_bb2_cmp10_0_reg_165_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_165to165_bb2_cmp10_0_stall_in_reg_165_NO_SHIFT_REG),
	.valid_out(rnode_165to165_bb2_cmp10_0_valid_out_reg_165_NO_SHIFT_REG),
	.stall_out(rnode_165to165_bb2_cmp10_0_stall_out_reg_165_NO_SHIFT_REG),
	.data_in(local_bb2_cmp10),
	.data_out(rnode_165to165_bb2_cmp10_0_reg_165_NO_SHIFT_REG)
);

defparam rnode_165to165_bb2_cmp10_0_reg_165_fifo.DEPTH = 3;
defparam rnode_165to165_bb2_cmp10_0_reg_165_fifo.DATA_WIDTH = 1;
defparam rnode_165to165_bb2_cmp10_0_reg_165_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_165to165_bb2_cmp10_0_reg_165_fifo.IMPL = "zl_reg";

assign rnode_165to165_bb2_cmp10_0_reg_165_inputs_ready_NO_SHIFT_REG = local_bb2_cmp10_valid_out_NO_SHIFT_REG;
assign local_bb2_cmp10_stall_in = rnode_165to165_bb2_cmp10_0_stall_out_reg_165_NO_SHIFT_REG;
assign rnode_165to165_bb2_cmp10_0_NO_SHIFT_REG = rnode_165to165_bb2_cmp10_0_reg_165_NO_SHIFT_REG;
assign rnode_165to165_bb2_cmp10_0_stall_in_reg_165_NO_SHIFT_REG = rnode_165to165_bb2_cmp10_0_stall_in_NO_SHIFT_REG;
assign rnode_165to165_bb2_cmp10_0_valid_out_NO_SHIFT_REG = rnode_165to165_bb2_cmp10_0_valid_out_reg_165_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb2_cmp20_GUARD_valid_out;
wire local_bb2_cmp20_GUARD_stall_in;
wire local_bb2_cmp20_GUARD_inputs_ready;
wire local_bb2_cmp20_GUARD_stall_local;
wire local_bb2_cmp20_GUARD;

assign local_bb2_cmp20_GUARD_inputs_ready = (rnode_324to325_bb2_cmp20_0_valid_out_NO_SHIFT_REG & rcnode_324to325_rc1_bb2_add22_0_valid_out_1_NO_SHIFT_REG);
assign local_bb2_cmp20_GUARD = (rnode_324to325_bb2_cmp20_0_NO_SHIFT_REG | rcnode_324to325_rc1_bb2_add22_0_NO_SHIFT_REG[64]);
assign local_bb2_cmp20_GUARD_valid_out = local_bb2_cmp20_GUARD_inputs_ready;
assign local_bb2_cmp20_GUARD_stall_local = local_bb2_cmp20_GUARD_stall_in;
assign rnode_324to325_bb2_cmp20_0_stall_in_NO_SHIFT_REG = (local_bb2_cmp20_GUARD_stall_local | ~(local_bb2_cmp20_GUARD_inputs_ready));
assign rcnode_324to325_rc1_bb2_add22_0_stall_in_1_NO_SHIFT_REG = (local_bb2_cmp20_GUARD_stall_local | ~(local_bb2_cmp20_GUARD_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb2_cond_valid_out;
wire local_bb2_cond_stall_in;
wire local_bb2_cond_inputs_ready;
wire local_bb2_cond_stall_local;
wire [31:0] local_bb2_cond;

assign local_bb2_cond_inputs_ready = (rnode_162to165_bb2_ld__0_valid_out_NO_SHIFT_REG & rnode_165to165_bb2_cmp10_0_valid_out_NO_SHIFT_REG);
assign local_bb2_cond = (rnode_165to165_bb2_cmp10_0_NO_SHIFT_REG ? rnode_162to165_bb2_ld__0_NO_SHIFT_REG : 32'h0);
assign local_bb2_cond_valid_out = local_bb2_cond_inputs_ready;
assign local_bb2_cond_stall_local = local_bb2_cond_stall_in;
assign rnode_162to165_bb2_ld__0_stall_in_NO_SHIFT_REG = (local_bb2_cond_stall_local | ~(local_bb2_cond_inputs_ready));
assign rnode_165to165_bb2_cmp10_0_stall_in_NO_SHIFT_REG = (local_bb2_cond_stall_local | ~(local_bb2_cond_inputs_ready));

// This section implements a staging register.
// 
wire rstag_165to165_bb2_cond_valid_out;
wire rstag_165to165_bb2_cond_stall_in;
wire rstag_165to165_bb2_cond_inputs_ready;
wire rstag_165to165_bb2_cond_stall_local;
 reg rstag_165to165_bb2_cond_staging_valid_NO_SHIFT_REG;
wire rstag_165to165_bb2_cond_combined_valid;
 reg [31:0] rstag_165to165_bb2_cond_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_165to165_bb2_cond;

assign rstag_165to165_bb2_cond_inputs_ready = local_bb2_cond_valid_out;
assign rstag_165to165_bb2_cond = (rstag_165to165_bb2_cond_staging_valid_NO_SHIFT_REG ? rstag_165to165_bb2_cond_staging_reg_NO_SHIFT_REG : local_bb2_cond);
assign rstag_165to165_bb2_cond_combined_valid = (rstag_165to165_bb2_cond_staging_valid_NO_SHIFT_REG | rstag_165to165_bb2_cond_inputs_ready);
assign rstag_165to165_bb2_cond_valid_out = rstag_165to165_bb2_cond_combined_valid;
assign rstag_165to165_bb2_cond_stall_local = rstag_165to165_bb2_cond_stall_in;
assign local_bb2_cond_stall_in = (|rstag_165to165_bb2_cond_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_165to165_bb2_cond_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_165to165_bb2_cond_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_165to165_bb2_cond_stall_local)
		begin
			if (~(rstag_165to165_bb2_cond_staging_valid_NO_SHIFT_REG))
			begin
				rstag_165to165_bb2_cond_staging_valid_NO_SHIFT_REG <= rstag_165to165_bb2_cond_inputs_ready;
			end
		end
		else
		begin
			rstag_165to165_bb2_cond_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_165to165_bb2_cond_staging_valid_NO_SHIFT_REG))
		begin
			rstag_165to165_bb2_cond_staging_reg_NO_SHIFT_REG <= local_bb2_cond;
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb2_st_cond_inputs_ready;
 reg local_bb2_st_cond_valid_out_NO_SHIFT_REG;
wire local_bb2_st_cond_stall_in;
wire local_bb2_st_cond_output_regs_ready;
wire local_bb2_st_cond_fu_stall_out;
wire local_bb2_st_cond_fu_valid_out;
wire local_bb2_st_cond_causedstall;

lsu_top lsu_local_bb2_st_cond (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb2_st_cond_fu_stall_out),
	.i_valid(local_bb2_st_cond_inputs_ready),
	.i_address((rnode_164to165_bb2_arrayidx15_0_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFFFC)),
	.i_writedata(rstag_165to165_bb2_cond),
	.i_cmpdata(),
	.i_predicate(rnode_164to165_c4_exe2_0_NO_SHIFT_REG),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb2_st_cond_output_regs_ready)),
	.o_valid(local_bb2_st_cond_fu_valid_out),
	.o_readdata(),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb2_st_cond_active),
	.avm_address(avm_local_bb2_st_cond_address),
	.avm_read(avm_local_bb2_st_cond_read),
	.avm_enable(avm_local_bb2_st_cond_enable),
	.avm_readdata(avm_local_bb2_st_cond_readdata),
	.avm_write(avm_local_bb2_st_cond_write),
	.avm_writeack(avm_local_bb2_st_cond_writeack),
	.avm_burstcount(avm_local_bb2_st_cond_burstcount),
	.avm_writedata(avm_local_bb2_st_cond_writedata),
	.avm_byteenable(avm_local_bb2_st_cond_byteenable),
	.avm_waitrequest(avm_local_bb2_st_cond_waitrequest),
	.avm_readdatavalid(avm_local_bb2_st_cond_readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb2_st_cond.AWIDTH = 32;
defparam lsu_local_bb2_st_cond.WIDTH_BYTES = 4;
defparam lsu_local_bb2_st_cond.MWIDTH_BYTES = 64;
defparam lsu_local_bb2_st_cond.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb2_st_cond.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb2_st_cond.READ = 0;
defparam lsu_local_bb2_st_cond.ATOMIC = 0;
defparam lsu_local_bb2_st_cond.WIDTH = 32;
defparam lsu_local_bb2_st_cond.MWIDTH = 512;
defparam lsu_local_bb2_st_cond.ATOMIC_WIDTH = 3;
defparam lsu_local_bb2_st_cond.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb2_st_cond.KERNEL_SIDE_MEM_LATENCY = 160;
defparam lsu_local_bb2_st_cond.MEMORY_SIDE_MEM_LATENCY = 18;
defparam lsu_local_bb2_st_cond.USE_WRITE_ACK = 1;
defparam lsu_local_bb2_st_cond.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb2_st_cond.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb2_st_cond.NUMBER_BANKS = 1;
defparam lsu_local_bb2_st_cond.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb2_st_cond.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb2_st_cond.USEINPUTFIFO = 0;
defparam lsu_local_bb2_st_cond.USECACHING = 0;
defparam lsu_local_bb2_st_cond.USEOUTPUTFIFO = 1;
defparam lsu_local_bb2_st_cond.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb2_st_cond.ADDRSPACE = 1;
defparam lsu_local_bb2_st_cond.STYLE = "BURST-COALESCED";
defparam lsu_local_bb2_st_cond.USE_BYTE_EN = 0;

assign local_bb2_st_cond_inputs_ready = (rnode_164to165_c4_exe2_0_valid_out_0_NO_SHIFT_REG & rnode_164to165_bb2_arrayidx15_0_valid_out_NO_SHIFT_REG & rstag_165to165_bb2_cond_valid_out);
assign local_bb2_st_cond_output_regs_ready = (&(~(local_bb2_st_cond_valid_out_NO_SHIFT_REG) | ~(local_bb2_st_cond_stall_in)));
assign rnode_164to165_c4_exe2_0_stall_in_0_NO_SHIFT_REG = (local_bb2_st_cond_fu_stall_out | ~(local_bb2_st_cond_inputs_ready));
assign rnode_164to165_bb2_arrayidx15_0_stall_in_NO_SHIFT_REG = (local_bb2_st_cond_fu_stall_out | ~(local_bb2_st_cond_inputs_ready));
assign rstag_165to165_bb2_cond_stall_in = (local_bb2_st_cond_fu_stall_out | ~(local_bb2_st_cond_inputs_ready));
assign local_bb2_st_cond_causedstall = (local_bb2_st_cond_inputs_ready && (local_bb2_st_cond_fu_stall_out && !(~(local_bb2_st_cond_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_st_cond_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_st_cond_output_regs_ready)
		begin
			local_bb2_st_cond_valid_out_NO_SHIFT_REG <= local_bb2_st_cond_fu_valid_out;
		end
		else
		begin
			if (~(local_bb2_st_cond_stall_in))
			begin
				local_bb2_st_cond_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_325to325_bb2_st_cond_valid_out;
wire rstag_325to325_bb2_st_cond_stall_in;
wire rstag_325to325_bb2_st_cond_inputs_ready;
wire rstag_325to325_bb2_st_cond_stall_local;
 reg rstag_325to325_bb2_st_cond_staging_valid_NO_SHIFT_REG;
wire rstag_325to325_bb2_st_cond_combined_valid;

assign rstag_325to325_bb2_st_cond_inputs_ready = local_bb2_st_cond_valid_out_NO_SHIFT_REG;
assign rstag_325to325_bb2_st_cond_combined_valid = (rstag_325to325_bb2_st_cond_staging_valid_NO_SHIFT_REG | rstag_325to325_bb2_st_cond_inputs_ready);
assign rstag_325to325_bb2_st_cond_valid_out = rstag_325to325_bb2_st_cond_combined_valid;
assign rstag_325to325_bb2_st_cond_stall_local = rstag_325to325_bb2_st_cond_stall_in;
assign local_bb2_st_cond_stall_in = (|rstag_325to325_bb2_st_cond_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_325to325_bb2_st_cond_staging_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (rstag_325to325_bb2_st_cond_stall_local)
		begin
			if (~(rstag_325to325_bb2_st_cond_staging_valid_NO_SHIFT_REG))
			begin
				rstag_325to325_bb2_st_cond_staging_valid_NO_SHIFT_REG <= rstag_325to325_bb2_st_cond_inputs_ready;
			end
		end
		else
		begin
			rstag_325to325_bb2_st_cond_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_0_NO_SHIFT_REG;
 reg branch_compare_result_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg lvb_c4_exe2_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb2_add22_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb2_cmp20_GUARD_valid_out & rcnode_324to325_rc1_bb2_add22_0_valid_out_0_NO_SHIFT_REG & rstag_325to325_bb2_st_cond_valid_out);
assign branch_var__output_regs_ready = (~(branch_node_valid_out_0_NO_SHIFT_REG) | (((branch_compare_result_NO_SHIFT_REG != 1'b1) & ~(stall_in_1)) | (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & ~(stall_in_0))));
assign local_bb2_cmp20_GUARD_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_324to325_rc1_bb2_add22_0_stall_in_0_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rstag_325to325_bb2_st_cond_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_c4_exe2_0 = lvb_c4_exe2_0_reg_NO_SHIFT_REG;
assign lvb_c4_exe2_1 = lvb_c4_exe2_0_reg_NO_SHIFT_REG;
assign lvb_bb2_add22_0 = lvb_bb2_add22_0_reg_NO_SHIFT_REG;
assign lvb_bb2_add22_1 = lvb_bb2_add22_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_0 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_1 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign valid_out_0 = (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG);
assign valid_out_1 = ((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG);
assign combined_branch_stall_in_signal = ((((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_1) | ((~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_0));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		lvb_c4_exe2_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb2_add22_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= 'x;
		branch_compare_result_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_0_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_c4_exe2_0_reg_NO_SHIFT_REG <= rcnode_324to325_rc1_bb2_add22_0_NO_SHIFT_REG[64];
			lvb_bb2_add22_0_reg_NO_SHIFT_REG <= rcnode_324to325_rc1_bb2_add22_0_NO_SHIFT_REG[31:0];
			lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= rcnode_324to325_rc1_bb2_add22_0_NO_SHIFT_REG[63:32];
			branch_compare_result_NO_SHIFT_REG <= local_bb2_cmp20_GUARD;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module reluLayer_basic_block_3
	(
		input 		clock,
		input 		resetn,
		input 		valid_in,
		output 		stall_out,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out,
		input 		stall_in,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		input 		start
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in;
 reg merge_node_valid_out_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = (|(merge_node_stall_in & merge_node_valid_out_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in))
			begin
				merge_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
wire branch_var__output_regs_ready;

assign branch_var__inputs_ready = merge_node_valid_out_NO_SHIFT_REG;
assign branch_var__output_regs_ready = ~(stall_in);
assign merge_node_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign valid_out = branch_var__inputs_ready;
assign lvb_input_acl_hw_wg_id = local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;

endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module reluLayer_function
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_global_id_0,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		stall_out,
		input 		valid_in,
		output [31:0] 		output_0,
		output 		valid_out,
		input 		stall_in,
		input [31:0] 		workgroup_size,
		output 		avm_local_bb0_ld__enable,
		input [511:0] 		avm_local_bb0_ld__readdata,
		input 		avm_local_bb0_ld__readdatavalid,
		input 		avm_local_bb0_ld__waitrequest,
		output [31:0] 		avm_local_bb0_ld__address,
		output 		avm_local_bb0_ld__read,
		output 		avm_local_bb0_ld__write,
		input 		avm_local_bb0_ld__writeack,
		output [511:0] 		avm_local_bb0_ld__writedata,
		output [63:0] 		avm_local_bb0_ld__byteenable,
		output [4:0] 		avm_local_bb0_ld__burstcount,
		output 		avm_local_bb2_ld__enable,
		input [511:0] 		avm_local_bb2_ld__readdata,
		input 		avm_local_bb2_ld__readdatavalid,
		input 		avm_local_bb2_ld__waitrequest,
		output [31:0] 		avm_local_bb2_ld__address,
		output 		avm_local_bb2_ld__read,
		output 		avm_local_bb2_ld__write,
		input 		avm_local_bb2_ld__writeack,
		output [511:0] 		avm_local_bb2_ld__writedata,
		output [63:0] 		avm_local_bb2_ld__byteenable,
		output [4:0] 		avm_local_bb2_ld__burstcount,
		output 		avm_local_bb2_st_cond_enable,
		input [511:0] 		avm_local_bb2_st_cond_readdata,
		input 		avm_local_bb2_st_cond_readdatavalid,
		input 		avm_local_bb2_st_cond_waitrequest,
		output [31:0] 		avm_local_bb2_st_cond_address,
		output 		avm_local_bb2_st_cond_read,
		output 		avm_local_bb2_st_cond_write,
		input 		avm_local_bb2_st_cond_writeack,
		output [511:0] 		avm_local_bb2_st_cond_writedata,
		output [63:0] 		avm_local_bb2_st_cond_byteenable,
		output [4:0] 		avm_local_bb2_st_cond_burstcount,
		input 		clock2x,
		input 		start,
		input [63:0] 		input_param,
		input [31:0] 		input_global_size_2,
		input [31:0] 		input_global_size_1,
		input [31:0] 		input_global_size_0,
		input [63:0] 		input_inputFeatureMap,
		input [63:0] 		input_outputFeatureMap,
		output reg 		has_a_write_pending,
		output reg 		has_a_lsu_active
	);


wire [31:0] cur_cycle;
wire bb_0_stall_out;
wire bb_0_valid_out;
wire [31:0] bb_0_lvb_bb0_ld_;
wire [31:0] bb_0_lvb_bb0_mul20;
wire [31:0] bb_0_lvb_input_global_id_0;
wire [31:0] bb_0_lvb_input_global_id_1;
wire [31:0] bb_0_lvb_input_global_id_2;
wire [31:0] bb_0_lvb_input_acl_hw_wg_id;
wire bb_0_local_bb0_ld__active;
wire bb_1_stall_out;
wire bb_1_valid_out;
wire [31:0] bb_1_lvb_bb1_c4_exe1;
wire bb_1_lvb_bb1_c4_exe2;
wire [31:0] bb_1_lvb_input_acl_hw_wg_id;
wire bb_2_stall_out_0;
wire bb_2_stall_out_1;
wire bb_2_valid_out_0;
wire bb_2_lvb_c4_exe2_0;
wire [31:0] bb_2_lvb_bb2_add22_0;
wire [31:0] bb_2_lvb_input_acl_hw_wg_id_0;
wire bb_2_valid_out_1;
wire bb_2_lvb_c4_exe2_1;
wire [31:0] bb_2_lvb_bb2_add22_1;
wire [31:0] bb_2_lvb_input_acl_hw_wg_id_1;
wire bb_2_local_bb2_ld__active;
wire bb_2_local_bb2_st_cond_active;
wire bb_3_stall_out;
wire bb_3_valid_out;
wire [31:0] bb_3_lvb_input_acl_hw_wg_id;
wire loop_limiter_0_stall_out;
wire loop_limiter_0_valid_out;
wire writes_pending;
wire [2:0] lsus_active;

acl_loop_limiter loop_limiter_0 (
	.clock(clock),
	.resetn(resetn),
	.i_valid(bb_1_valid_out),
	.i_stall(bb_2_stall_out_1),
	.i_valid_exit(bb_2_valid_out_0),
	.i_stall_exit(bb_3_stall_out),
	.o_valid(loop_limiter_0_valid_out),
	.o_stall(loop_limiter_0_stall_out)
);

defparam loop_limiter_0.ENTRY_WIDTH = 1;
defparam loop_limiter_0.EXIT_WIDTH = 1;
defparam loop_limiter_0.THRESHOLD = 326;

reluLayer_basic_block_0 reluLayer_basic_block_0 (
	.clock(clock),
	.resetn(resetn),
	.start(start),
	.input_param(input_param),
	.input_global_size_2(input_global_size_2),
	.input_global_size_1(input_global_size_1),
	.input_global_size_0(input_global_size_0),
	.valid_in(valid_in),
	.stall_out(bb_0_stall_out),
	.input_global_id_0(input_global_id_0),
	.input_global_id_1(input_global_id_1),
	.input_global_id_2(input_global_id_2),
	.input_acl_hw_wg_id(input_acl_hw_wg_id),
	.valid_out(bb_0_valid_out),
	.stall_in(bb_1_stall_out),
	.lvb_bb0_ld_(bb_0_lvb_bb0_ld_),
	.lvb_bb0_mul20(bb_0_lvb_bb0_mul20),
	.lvb_input_global_id_0(bb_0_lvb_input_global_id_0),
	.lvb_input_global_id_1(bb_0_lvb_input_global_id_1),
	.lvb_input_global_id_2(bb_0_lvb_input_global_id_2),
	.lvb_input_acl_hw_wg_id(bb_0_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.avm_local_bb0_ld__enable(avm_local_bb0_ld__enable),
	.avm_local_bb0_ld__readdata(avm_local_bb0_ld__readdata),
	.avm_local_bb0_ld__readdatavalid(avm_local_bb0_ld__readdatavalid),
	.avm_local_bb0_ld__waitrequest(avm_local_bb0_ld__waitrequest),
	.avm_local_bb0_ld__address(avm_local_bb0_ld__address),
	.avm_local_bb0_ld__read(avm_local_bb0_ld__read),
	.avm_local_bb0_ld__write(avm_local_bb0_ld__write),
	.avm_local_bb0_ld__writeack(avm_local_bb0_ld__writeack),
	.avm_local_bb0_ld__writedata(avm_local_bb0_ld__writedata),
	.avm_local_bb0_ld__byteenable(avm_local_bb0_ld__byteenable),
	.avm_local_bb0_ld__burstcount(avm_local_bb0_ld__burstcount),
	.local_bb0_ld__active(bb_0_local_bb0_ld__active),
	.clock2x(clock2x)
);


reluLayer_basic_block_1 reluLayer_basic_block_1 (
	.clock(clock),
	.resetn(resetn),
	.input_global_size_1(input_global_size_1),
	.input_global_size_2(input_global_size_2),
	.input_wii_ld_(bb_0_lvb_bb0_ld_),
	.input_wii_mul20(bb_0_lvb_bb0_mul20),
	.valid_in(bb_0_valid_out),
	.stall_out(bb_1_stall_out),
	.input_global_id_0(bb_0_lvb_input_global_id_0),
	.input_global_id_1(bb_0_lvb_input_global_id_1),
	.input_global_id_2(bb_0_lvb_input_global_id_2),
	.input_acl_hw_wg_id(bb_0_lvb_input_acl_hw_wg_id),
	.valid_out(bb_1_valid_out),
	.stall_in(loop_limiter_0_stall_out),
	.lvb_bb1_c4_exe1(bb_1_lvb_bb1_c4_exe1),
	.lvb_bb1_c4_exe2(bb_1_lvb_bb1_c4_exe2),
	.lvb_input_acl_hw_wg_id(bb_1_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.start(start)
);


reluLayer_basic_block_2 reluLayer_basic_block_2 (
	.clock(clock),
	.resetn(resetn),
	.input_inputFeatureMap(input_inputFeatureMap),
	.input_outputFeatureMap(input_outputFeatureMap),
	.input_wii_ld_(bb_0_lvb_bb0_ld_),
	.input_wii_mul20(bb_0_lvb_bb0_mul20),
	.valid_in_0(bb_2_valid_out_1),
	.stall_out_0(bb_2_stall_out_0),
	.input_c4_exe2_0(bb_2_lvb_c4_exe2_1),
	.input_reluCounter_019_0(bb_2_lvb_bb2_add22_1),
	.input_acl_hw_wg_id_0(bb_2_lvb_input_acl_hw_wg_id_1),
	.valid_in_1(loop_limiter_0_valid_out),
	.stall_out_1(bb_2_stall_out_1),
	.input_c4_exe2_1(bb_1_lvb_bb1_c4_exe2),
	.input_reluCounter_019_1(bb_1_lvb_bb1_c4_exe1),
	.input_acl_hw_wg_id_1(bb_1_lvb_input_acl_hw_wg_id),
	.valid_out_0(bb_2_valid_out_0),
	.stall_in_0(bb_3_stall_out),
	.lvb_c4_exe2_0(bb_2_lvb_c4_exe2_0),
	.lvb_bb2_add22_0(bb_2_lvb_bb2_add22_0),
	.lvb_input_acl_hw_wg_id_0(bb_2_lvb_input_acl_hw_wg_id_0),
	.valid_out_1(bb_2_valid_out_1),
	.stall_in_1(bb_2_stall_out_0),
	.lvb_c4_exe2_1(bb_2_lvb_c4_exe2_1),
	.lvb_bb2_add22_1(bb_2_lvb_bb2_add22_1),
	.lvb_input_acl_hw_wg_id_1(bb_2_lvb_input_acl_hw_wg_id_1),
	.workgroup_size(workgroup_size),
	.start(start),
	.avm_local_bb2_ld__enable(avm_local_bb2_ld__enable),
	.avm_local_bb2_ld__readdata(avm_local_bb2_ld__readdata),
	.avm_local_bb2_ld__readdatavalid(avm_local_bb2_ld__readdatavalid),
	.avm_local_bb2_ld__waitrequest(avm_local_bb2_ld__waitrequest),
	.avm_local_bb2_ld__address(avm_local_bb2_ld__address),
	.avm_local_bb2_ld__read(avm_local_bb2_ld__read),
	.avm_local_bb2_ld__write(avm_local_bb2_ld__write),
	.avm_local_bb2_ld__writeack(avm_local_bb2_ld__writeack),
	.avm_local_bb2_ld__writedata(avm_local_bb2_ld__writedata),
	.avm_local_bb2_ld__byteenable(avm_local_bb2_ld__byteenable),
	.avm_local_bb2_ld__burstcount(avm_local_bb2_ld__burstcount),
	.local_bb2_ld__active(bb_2_local_bb2_ld__active),
	.clock2x(clock2x),
	.avm_local_bb2_st_cond_enable(avm_local_bb2_st_cond_enable),
	.avm_local_bb2_st_cond_readdata(avm_local_bb2_st_cond_readdata),
	.avm_local_bb2_st_cond_readdatavalid(avm_local_bb2_st_cond_readdatavalid),
	.avm_local_bb2_st_cond_waitrequest(avm_local_bb2_st_cond_waitrequest),
	.avm_local_bb2_st_cond_address(avm_local_bb2_st_cond_address),
	.avm_local_bb2_st_cond_read(avm_local_bb2_st_cond_read),
	.avm_local_bb2_st_cond_write(avm_local_bb2_st_cond_write),
	.avm_local_bb2_st_cond_writeack(avm_local_bb2_st_cond_writeack),
	.avm_local_bb2_st_cond_writedata(avm_local_bb2_st_cond_writedata),
	.avm_local_bb2_st_cond_byteenable(avm_local_bb2_st_cond_byteenable),
	.avm_local_bb2_st_cond_burstcount(avm_local_bb2_st_cond_burstcount),
	.local_bb2_st_cond_active(bb_2_local_bb2_st_cond_active)
);


reluLayer_basic_block_3 reluLayer_basic_block_3 (
	.clock(clock),
	.resetn(resetn),
	.valid_in(bb_2_valid_out_0),
	.stall_out(bb_3_stall_out),
	.input_acl_hw_wg_id(bb_2_lvb_input_acl_hw_wg_id_0),
	.valid_out(bb_3_valid_out),
	.stall_in(stall_in),
	.lvb_input_acl_hw_wg_id(bb_3_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.start(start)
);


reluLayer_sys_cycle_time system_cycle_time_module (
	.clock(clock),
	.resetn(resetn),
	.cur_cycle(cur_cycle)
);


assign valid_out = bb_3_valid_out;
assign output_0 = bb_3_lvb_input_acl_hw_wg_id;
assign stall_out = bb_0_stall_out;
assign writes_pending = bb_2_local_bb2_st_cond_active;
assign lsus_active[0] = bb_0_local_bb0_ld__active;
assign lsus_active[1] = bb_2_local_bb2_ld__active;
assign lsus_active[2] = bb_2_local_bb2_st_cond_active;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		has_a_write_pending <= 1'b0;
		has_a_lsu_active <= 1'b0;
	end
	else
	begin
		has_a_write_pending <= (|writes_pending);
		has_a_lsu_active <= (|lsus_active);
	end
end

endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module reluLayer_function_cra_slave
	(
		input 		clock,
		input 		resetn,
		output reg [255:0] 		kernel_arguments,
		output reg 		start,
		input 		finish,
		output reg [31:0] 		global_size_0,
		output reg [31:0] 		global_size_1,
		output reg [31:0] 		global_size_2,
		output reg [31:0] 		num_groups_0,
		output reg [31:0] 		num_groups_1,
		output reg [31:0] 		num_groups_2,
		output reg [31:0] 		local_size_0,
		output reg [31:0] 		local_size_1,
		output reg [31:0] 		local_size_2,
		output reg [31:0] 		global_offset_0,
		output reg [31:0] 		global_offset_1,
		output reg [31:0] 		global_offset_2,
		output reg [31:0] 		work_dim,
		output reg [31:0] 		workgroup_size,
		input 		has_a_lsu_active,
		input 		has_a_write_pending,
		input 		valid_in,
		input 		avs_cra_enable,
		input 		avs_cra_read,
		input 		avs_cra_write,
		input [4:0] 		avs_cra_address,
		input [63:0] 		avs_cra_writedata,
		input [7:0] 		avs_cra_byteenable,
		output reg [63:0] 		avs_cra_readdata,
		output reg 		avs_cra_readdatavalid,
		output 		cra_irq
	);


// This section of the wrapper implements an Avalon Slave Interface used to configure a kernel invocation.
// The few words words contain the status and the workgroup size registers.
// The remaining addressable space is reserved for kernel arguments.
 reg started_NO_SHIFT_REG;
 reg [31:0] status_NO_SHIFT_REG;
 reg [63:0] profile_data_NO_SHIFT_REG;
 reg [31:0] profile_ctrl_NO_SHIFT_REG;
 reg [63:0] profile_start_cycle_NO_SHIFT_REG;
 reg [63:0] profile_stop_cycle_NO_SHIFT_REG;
 reg [63:0] cra_readdata_st1_NO_SHIFT_REG;
 reg [4:0] cra_addr_st1_NO_SHIFT_REG;
 reg cra_read_st1_NO_SHIFT_REG;
wire [63:0] bitenable;

assign bitenable[7:0] = (avs_cra_byteenable[0] ? 8'hFF : 8'h0);
assign bitenable[15:8] = (avs_cra_byteenable[1] ? 8'hFF : 8'h0);
assign bitenable[23:16] = (avs_cra_byteenable[2] ? 8'hFF : 8'h0);
assign bitenable[31:24] = (avs_cra_byteenable[3] ? 8'hFF : 8'h0);
assign bitenable[39:32] = (avs_cra_byteenable[4] ? 8'hFF : 8'h0);
assign bitenable[47:40] = (avs_cra_byteenable[5] ? 8'hFF : 8'h0);
assign bitenable[55:48] = (avs_cra_byteenable[6] ? 8'hFF : 8'h0);
assign bitenable[63:56] = (avs_cra_byteenable[7] ? 8'hFF : 8'h0);
assign cra_irq = (status_NO_SHIFT_REG[1] | status_NO_SHIFT_REG[3]);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		start <= 1'b0;
		started_NO_SHIFT_REG <= 1'b0;
		kernel_arguments <= 256'h0;
		status_NO_SHIFT_REG <= 32'h30000;
		profile_ctrl_NO_SHIFT_REG <= 32'h4;
		profile_start_cycle_NO_SHIFT_REG <= 64'h0;
		profile_stop_cycle_NO_SHIFT_REG <= 64'hFFFFFFFFFFFFFFFF;
		work_dim <= 32'h0;
		workgroup_size <= 32'h0;
		global_size_0 <= 32'h0;
		global_size_1 <= 32'h0;
		global_size_2 <= 32'h0;
		num_groups_0 <= 32'h0;
		num_groups_1 <= 32'h0;
		num_groups_2 <= 32'h0;
		local_size_0 <= 32'h0;
		local_size_1 <= 32'h0;
		local_size_2 <= 32'h0;
		global_offset_0 <= 32'h0;
		global_offset_1 <= 32'h0;
		global_offset_2 <= 32'h0;
	end
	else
	begin
		if (avs_cra_write)
		begin
			case (avs_cra_address)
				5'h0:
				begin
					status_NO_SHIFT_REG[31:16] <= 16'h3;
					status_NO_SHIFT_REG[15:0] <= ((status_NO_SHIFT_REG[15:0] & ~(bitenable[15:0])) | (avs_cra_writedata[15:0] & bitenable[15:0]));
				end

				5'h1:
				begin
					profile_ctrl_NO_SHIFT_REG <= ((profile_ctrl_NO_SHIFT_REG & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h3:
				begin
					profile_start_cycle_NO_SHIFT_REG[31:0] <= ((profile_start_cycle_NO_SHIFT_REG[31:0] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					profile_start_cycle_NO_SHIFT_REG[63:32] <= ((profile_start_cycle_NO_SHIFT_REG[63:32] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h4:
				begin
					profile_stop_cycle_NO_SHIFT_REG[31:0] <= ((profile_stop_cycle_NO_SHIFT_REG[31:0] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					profile_stop_cycle_NO_SHIFT_REG[63:32] <= ((profile_stop_cycle_NO_SHIFT_REG[63:32] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h5:
				begin
					work_dim <= ((work_dim & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					workgroup_size <= ((workgroup_size & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h6:
				begin
					global_size_0 <= ((global_size_0 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					global_size_1 <= ((global_size_1 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h7:
				begin
					global_size_2 <= ((global_size_2 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					num_groups_0 <= ((num_groups_0 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h8:
				begin
					num_groups_1 <= ((num_groups_1 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					num_groups_2 <= ((num_groups_2 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h9:
				begin
					local_size_0 <= ((local_size_0 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					local_size_1 <= ((local_size_1 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hA:
				begin
					local_size_2 <= ((local_size_2 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					global_offset_0 <= ((global_offset_0 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hB:
				begin
					global_offset_1 <= ((global_offset_1 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					global_offset_2 <= ((global_offset_2 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hC:
				begin
					kernel_arguments[31:0] <= ((kernel_arguments[31:0] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[63:32] <= ((kernel_arguments[63:32] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hD:
				begin
					kernel_arguments[95:64] <= ((kernel_arguments[95:64] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[127:96] <= ((kernel_arguments[127:96] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hE:
				begin
					kernel_arguments[159:128] <= ((kernel_arguments[159:128] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[191:160] <= ((kernel_arguments[191:160] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hF:
				begin
					kernel_arguments[223:192] <= ((kernel_arguments[223:192] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[255:224] <= ((kernel_arguments[255:224] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				default:
				begin
				end

			endcase
		end
		else
		begin
			if (status_NO_SHIFT_REG[0])
			begin
				start <= 1'b1;
			end
			if (start)
			begin
				status_NO_SHIFT_REG[0] <= 1'b0;
				started_NO_SHIFT_REG <= 1'b1;
			end
			if (started_NO_SHIFT_REG)
			begin
				start <= 1'b0;
			end
			if (finish)
			begin
				status_NO_SHIFT_REG[1] <= 1'b1;
				started_NO_SHIFT_REG <= 1'b0;
			end
		end
		status_NO_SHIFT_REG[11] <= 1'b0;
		status_NO_SHIFT_REG[12] <= (|has_a_lsu_active);
		status_NO_SHIFT_REG[13] <= (|has_a_write_pending);
		status_NO_SHIFT_REG[14] <= (|valid_in);
		status_NO_SHIFT_REG[15] <= started_NO_SHIFT_REG;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		cra_read_st1_NO_SHIFT_REG <= 1'b0;
		cra_addr_st1_NO_SHIFT_REG <= 5'h0;
		cra_readdata_st1_NO_SHIFT_REG <= 64'h0;
	end
	else
	begin
		cra_read_st1_NO_SHIFT_REG <= avs_cra_read;
		cra_addr_st1_NO_SHIFT_REG <= avs_cra_address;
		case (avs_cra_address)
			5'h0:
			begin
				cra_readdata_st1_NO_SHIFT_REG[31:0] <= status_NO_SHIFT_REG;
				cra_readdata_st1_NO_SHIFT_REG[63:32] <= 32'h0;
			end

			5'h1:
			begin
				cra_readdata_st1_NO_SHIFT_REG[31:0] <= 'x;
				cra_readdata_st1_NO_SHIFT_REG[63:32] <= 32'h0;
			end

			5'h2:
			begin
				cra_readdata_st1_NO_SHIFT_REG[63:0] <= 64'h0;
			end

			5'h3:
			begin
				cra_readdata_st1_NO_SHIFT_REG[63:0] <= 64'h0;
			end

			5'h4:
			begin
				cra_readdata_st1_NO_SHIFT_REG[63:0] <= 64'h0;
			end

			default:
			begin
				cra_readdata_st1_NO_SHIFT_REG <= status_NO_SHIFT_REG;
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		avs_cra_readdatavalid <= 1'b0;
		avs_cra_readdata <= 64'h0;
	end
	else
	begin
		avs_cra_readdatavalid <= cra_read_st1_NO_SHIFT_REG;
		case (cra_addr_st1_NO_SHIFT_REG)
			5'h2:
			begin
				avs_cra_readdata[63:0] <= profile_data_NO_SHIFT_REG;
			end

			default:
			begin
				avs_cra_readdata <= cra_readdata_st1_NO_SHIFT_REG;
			end

		endcase
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module reluLayer_function_wrapper
	(
		input 		clock,
		input 		resetn,
		input 		clock2x,
		input 		local_router_hang,
		output 		has_a_write_pending,
		output 		has_a_lsu_active,
		input [255:0] 		kernel_arguments,
		input 		start,
		input [31:0] 		global_offset_0,
		input [31:0] 		global_offset_1,
		input [31:0] 		global_offset_2,
		input [31:0] 		work_dim,
		output 		kernel_valid_out,
		input [31:0] 		workgroup_size,
		input [31:0] 		global_size_0,
		input [31:0] 		global_size_1,
		input [31:0] 		global_size_2,
		input [31:0] 		num_groups_0,
		input [31:0] 		num_groups_1,
		input [31:0] 		num_groups_2,
		input [31:0] 		local_size_0,
		input [31:0] 		local_size_1,
		input [31:0] 		local_size_2,
		input [31:0] 		local_id_0,
		input [31:0] 		local_id_1,
		input [31:0] 		local_id_2,
		input [31:0] 		global_id_0,
		input [31:0] 		global_id_1,
		input [31:0] 		global_id_2,
		input [31:0] 		group_id_0,
		input [31:0] 		group_id_1,
		input [31:0] 		group_id_2,
		output 		kernel_stall_out,
		input 		kernel_valid_in,
		output 		avm_local_bb0_ld__inst0_enable,
		input [511:0] 		avm_local_bb0_ld__inst0_readdata,
		input 		avm_local_bb0_ld__inst0_readdatavalid,
		input 		avm_local_bb0_ld__inst0_waitrequest,
		output [31:0] 		avm_local_bb0_ld__inst0_address,
		output 		avm_local_bb0_ld__inst0_read,
		output 		avm_local_bb0_ld__inst0_write,
		input 		avm_local_bb0_ld__inst0_writeack,
		output [511:0] 		avm_local_bb0_ld__inst0_writedata,
		output [63:0] 		avm_local_bb0_ld__inst0_byteenable,
		output [4:0] 		avm_local_bb0_ld__inst0_burstcount,
		output 		avm_local_bb2_ld__inst0_enable,
		input [511:0] 		avm_local_bb2_ld__inst0_readdata,
		input 		avm_local_bb2_ld__inst0_readdatavalid,
		input 		avm_local_bb2_ld__inst0_waitrequest,
		output [31:0] 		avm_local_bb2_ld__inst0_address,
		output 		avm_local_bb2_ld__inst0_read,
		output 		avm_local_bb2_ld__inst0_write,
		input 		avm_local_bb2_ld__inst0_writeack,
		output [511:0] 		avm_local_bb2_ld__inst0_writedata,
		output [63:0] 		avm_local_bb2_ld__inst0_byteenable,
		output [4:0] 		avm_local_bb2_ld__inst0_burstcount,
		output 		avm_local_bb2_st_cond_inst0_enable,
		input [511:0] 		avm_local_bb2_st_cond_inst0_readdata,
		input 		avm_local_bb2_st_cond_inst0_readdatavalid,
		input 		avm_local_bb2_st_cond_inst0_waitrequest,
		output [31:0] 		avm_local_bb2_st_cond_inst0_address,
		output 		avm_local_bb2_st_cond_inst0_read,
		output 		avm_local_bb2_st_cond_inst0_write,
		input 		avm_local_bb2_st_cond_inst0_writeack,
		output [511:0] 		avm_local_bb2_st_cond_inst0_writedata,
		output [63:0] 		avm_local_bb2_st_cond_inst0_byteenable,
		output [4:0] 		avm_local_bb2_st_cond_inst0_burstcount
	);

// Responsible for interfacing a kernel with the outside world.

// twoXclock_consumer uses clock2x, even if nobody inside the kernel does. Keeps interface to acl_iface consistent for all kernels.
 reg twoXclock_consumer_NO_SHIFT_REG /* synthesis  preserve  noprune  */;
wire stall_in;
wire stall_out;
wire valid_in;
wire valid_out;

assign kernel_valid_out = valid_out;
assign valid_in = kernel_valid_in;
assign kernel_stall_out = stall_out;
assign stall_in = 1'b0;

always @(posedge clock2x or negedge resetn)
begin
	if (~(resetn))
	begin
		twoXclock_consumer_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		twoXclock_consumer_NO_SHIFT_REG <= 1'b1;
	end
end



// This section instantiates a kernel function block
reluLayer_function reluLayer_function_inst0 (
	.clock(clock),
	.resetn(resetn),
	.input_global_id_0(global_id_0),
	.input_global_id_1(global_id_1),
	.input_global_id_2(global_id_2),
	.input_acl_hw_wg_id(),
	.stall_out(stall_out),
	.valid_in(valid_in),
	.output_0(),
	.valid_out(valid_out),
	.stall_in(stall_in),
	.workgroup_size(workgroup_size),
	.avm_local_bb0_ld__enable(avm_local_bb0_ld__inst0_enable),
	.avm_local_bb0_ld__readdata(avm_local_bb0_ld__inst0_readdata),
	.avm_local_bb0_ld__readdatavalid(avm_local_bb0_ld__inst0_readdatavalid),
	.avm_local_bb0_ld__waitrequest(avm_local_bb0_ld__inst0_waitrequest),
	.avm_local_bb0_ld__address(avm_local_bb0_ld__inst0_address),
	.avm_local_bb0_ld__read(avm_local_bb0_ld__inst0_read),
	.avm_local_bb0_ld__write(avm_local_bb0_ld__inst0_write),
	.avm_local_bb0_ld__writeack(avm_local_bb0_ld__inst0_writeack),
	.avm_local_bb0_ld__writedata(avm_local_bb0_ld__inst0_writedata),
	.avm_local_bb0_ld__byteenable(avm_local_bb0_ld__inst0_byteenable),
	.avm_local_bb0_ld__burstcount(avm_local_bb0_ld__inst0_burstcount),
	.avm_local_bb2_ld__enable(avm_local_bb2_ld__inst0_enable),
	.avm_local_bb2_ld__readdata(avm_local_bb2_ld__inst0_readdata),
	.avm_local_bb2_ld__readdatavalid(avm_local_bb2_ld__inst0_readdatavalid),
	.avm_local_bb2_ld__waitrequest(avm_local_bb2_ld__inst0_waitrequest),
	.avm_local_bb2_ld__address(avm_local_bb2_ld__inst0_address),
	.avm_local_bb2_ld__read(avm_local_bb2_ld__inst0_read),
	.avm_local_bb2_ld__write(avm_local_bb2_ld__inst0_write),
	.avm_local_bb2_ld__writeack(avm_local_bb2_ld__inst0_writeack),
	.avm_local_bb2_ld__writedata(avm_local_bb2_ld__inst0_writedata),
	.avm_local_bb2_ld__byteenable(avm_local_bb2_ld__inst0_byteenable),
	.avm_local_bb2_ld__burstcount(avm_local_bb2_ld__inst0_burstcount),
	.avm_local_bb2_st_cond_enable(avm_local_bb2_st_cond_inst0_enable),
	.avm_local_bb2_st_cond_readdata(avm_local_bb2_st_cond_inst0_readdata),
	.avm_local_bb2_st_cond_readdatavalid(avm_local_bb2_st_cond_inst0_readdatavalid),
	.avm_local_bb2_st_cond_waitrequest(avm_local_bb2_st_cond_inst0_waitrequest),
	.avm_local_bb2_st_cond_address(avm_local_bb2_st_cond_inst0_address),
	.avm_local_bb2_st_cond_read(avm_local_bb2_st_cond_inst0_read),
	.avm_local_bb2_st_cond_write(avm_local_bb2_st_cond_inst0_write),
	.avm_local_bb2_st_cond_writeack(avm_local_bb2_st_cond_inst0_writeack),
	.avm_local_bb2_st_cond_writedata(avm_local_bb2_st_cond_inst0_writedata),
	.avm_local_bb2_st_cond_byteenable(avm_local_bb2_st_cond_inst0_byteenable),
	.avm_local_bb2_st_cond_burstcount(avm_local_bb2_st_cond_inst0_burstcount),
	.clock2x(clock2x),
	.start(start),
	.input_param(kernel_arguments[191:128]),
	.input_global_size_2(global_size_2),
	.input_global_size_1(global_size_1),
	.input_global_size_0(global_size_0),
	.input_inputFeatureMap(kernel_arguments[63:0]),
	.input_outputFeatureMap(kernel_arguments[127:64]),
	.has_a_write_pending(has_a_write_pending),
	.has_a_lsu_active(has_a_lsu_active)
);



endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module reluLayer_sys_cycle_time
	(
		input 		clock,
		input 		resetn,
		output [31:0] 		cur_cycle
	);


 reg [31:0] cur_count_NO_SHIFT_REG;

assign cur_cycle = cur_count_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		cur_count_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		cur_count_NO_SHIFT_REG <= (cur_count_NO_SHIFT_REG + 32'h1);
	end
end

endmodule

// (C) 1992-2016 Intel Corporation.                            
// Intel, the Intel logo, Intel, MegaCore, NIOS II, Quartus and TalkBack words    
// and logos are trademarks of Intel Corporation or its subsidiaries in the U.S.  
// and/or other countries. Other marks and brands may be claimed as the property  
// of others. See Trademarks on intel.com for full list of Intel trademarks or    
// the Trademarks & Brands Names Database (if Intel) or See www.Intel.com/legal (if Altera) 
// Your use of Intel Corporation's design tools, logic functions and other        
// software and tools, and its AMPP partner logic functions, and any output       
// files any of the foregoing (including device programming or simulation         
// files), and any associated documentation or information are expressly subject  
// to the terms and conditions of the Altera Program License Subscription         
// Agreement, Intel MegaCore Function License Agreement, or other applicable      
// license agreement, including, without limitation, that your use is for the     
// sole purpose of programming logic devices manufactured by Intel and sold by    
// Intel or its authorized distributors.  Please refer to the applicable          
// agreement for further details.                                                 
    

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module convLayer_basic_block_0
	(
		input 		clock,
		input 		resetn,
		input 		start,
		input [63:0] 		input_param,
		input 		valid_in,
		output 		stall_out,
		input [31:0] 		input_global_id_0,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out,
		input 		stall_in,
		output [31:0] 		lvb_bb0_memcoalesce_param_extrValue_0,
		output [31:0] 		lvb_bb0_memcoalesce_param_extrValue_1,
		output [63:0] 		lvb_bb0_kernelSize17,
		output [63:0] 		lvb_bb0_memcoalesce_param_bitcast_0142,
		output [63:0] 		lvb_bb0_memcoalesce_param_bitcast_0146,
		output [31:0] 		lvb_input_global_id_0,
		output [31:0] 		lvb_input_global_id_1,
		output [31:0] 		lvb_input_global_id_2,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_enable,
		input [511:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_readdata,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_readdatavalid,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_waitrequest,
		output [31:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_address,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_read,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_write,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_writeack,
		output [511:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_writedata,
		output [63:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_byteenable,
		output [4:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_burstcount,
		output 		local_bb0_ld_memcoalesce_param_load_0_active,
		input 		clock2x
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_node_stall_in_4;
 reg merge_node_valid_out_4_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_0_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG) | (merge_node_stall_in_4 & merge_node_valid_out_4_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_global_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_global_id_0_staging_reg_NO_SHIFT_REG <= input_global_id_0;
				input_global_id_1_staging_reg_NO_SHIFT_REG <= input_global_id_1;
				input_global_id_2_staging_reg_NO_SHIFT_REG <= input_global_id_2;
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_4_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_4))
			begin
				merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements a registered operation.
// 
wire local_bb0_outputChannel_inputs_ready;
 reg local_bb0_outputChannel_wii_reg_NO_SHIFT_REG;
 reg local_bb0_outputChannel_valid_out_NO_SHIFT_REG;
wire local_bb0_outputChannel_stall_in;
wire local_bb0_outputChannel_output_regs_ready;
 reg [63:0] local_bb0_outputChannel_NO_SHIFT_REG;
wire [63:0] local_bb0_outputChannel_op_wire;
wire local_bb0_outputChannel_causedstall;

assign local_bb0_outputChannel_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb0_outputChannel_output_regs_ready = (~(local_bb0_outputChannel_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_outputChannel_valid_out_NO_SHIFT_REG) | ~(local_bb0_outputChannel_stall_in))));
assign local_bb0_outputChannel_op_wire = ((input_param & 64'hFFFFFFFFFFFFFC00) + 64'h20);
assign merge_node_stall_in_0 = (~(local_bb0_outputChannel_wii_reg_NO_SHIFT_REG) & (~(local_bb0_outputChannel_output_regs_ready) | ~(local_bb0_outputChannel_inputs_ready)));
assign local_bb0_outputChannel_causedstall = (local_bb0_outputChannel_inputs_ready && (~(local_bb0_outputChannel_output_regs_ready) && !(~(local_bb0_outputChannel_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_outputChannel_NO_SHIFT_REG <= 'x;
		local_bb0_outputChannel_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_outputChannel_NO_SHIFT_REG <= 'x;
			local_bb0_outputChannel_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_outputChannel_output_regs_ready)
			begin
				local_bb0_outputChannel_NO_SHIFT_REG <= local_bb0_outputChannel_op_wire;
				local_bb0_outputChannel_valid_out_NO_SHIFT_REG <= local_bb0_outputChannel_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_outputChannel_stall_in))
				begin
					local_bb0_outputChannel_valid_out_NO_SHIFT_REG <= local_bb0_outputChannel_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_outputChannel_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_outputChannel_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_outputChannel_inputs_ready)
			begin
				local_bb0_outputChannel_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_kernelSize17_inputs_ready;
 reg local_bb0_kernelSize17_wii_reg_NO_SHIFT_REG;
 reg local_bb0_kernelSize17_valid_out_NO_SHIFT_REG;
wire local_bb0_kernelSize17_stall_in;
wire local_bb0_kernelSize17_output_regs_ready;
 reg [63:0] local_bb0_kernelSize17_NO_SHIFT_REG;
wire [63:0] local_bb0_kernelSize17_op_wire;
wire local_bb0_kernelSize17_causedstall;

assign local_bb0_kernelSize17_inputs_ready = merge_node_valid_out_1_NO_SHIFT_REG;
assign local_bb0_kernelSize17_output_regs_ready = (~(local_bb0_kernelSize17_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_kernelSize17_valid_out_NO_SHIFT_REG) | ~(local_bb0_kernelSize17_stall_in))));
assign local_bb0_kernelSize17_op_wire = ((input_param & 64'hFFFFFFFFFFFFFC00) + 64'h8);
assign merge_node_stall_in_1 = (~(local_bb0_kernelSize17_wii_reg_NO_SHIFT_REG) & (~(local_bb0_kernelSize17_output_regs_ready) | ~(local_bb0_kernelSize17_inputs_ready)));
assign local_bb0_kernelSize17_causedstall = (local_bb0_kernelSize17_inputs_ready && (~(local_bb0_kernelSize17_output_regs_ready) && !(~(local_bb0_kernelSize17_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_kernelSize17_NO_SHIFT_REG <= 'x;
		local_bb0_kernelSize17_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_kernelSize17_NO_SHIFT_REG <= 'x;
			local_bb0_kernelSize17_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_kernelSize17_output_regs_ready)
			begin
				local_bb0_kernelSize17_NO_SHIFT_REG <= local_bb0_kernelSize17_op_wire;
				local_bb0_kernelSize17_valid_out_NO_SHIFT_REG <= local_bb0_kernelSize17_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_kernelSize17_stall_in))
				begin
					local_bb0_kernelSize17_valid_out_NO_SHIFT_REG <= local_bb0_kernelSize17_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_kernelSize17_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_kernelSize17_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_kernelSize17_inputs_ready)
			begin
				local_bb0_kernelSize17_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_memcoalesce_param_bitcast_0142_inputs_ready;
 reg local_bb0_memcoalesce_param_bitcast_0142_wii_reg_NO_SHIFT_REG;
 reg local_bb0_memcoalesce_param_bitcast_0142_valid_out_NO_SHIFT_REG;
wire local_bb0_memcoalesce_param_bitcast_0142_stall_in;
wire local_bb0_memcoalesce_param_bitcast_0142_output_regs_ready;
 reg [63:0] local_bb0_memcoalesce_param_bitcast_0142_NO_SHIFT_REG;
wire local_bb0_memcoalesce_param_bitcast_0142_causedstall;

assign local_bb0_memcoalesce_param_bitcast_0142_inputs_ready = merge_node_valid_out_2_NO_SHIFT_REG;
assign local_bb0_memcoalesce_param_bitcast_0142_output_regs_ready = (~(local_bb0_memcoalesce_param_bitcast_0142_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_memcoalesce_param_bitcast_0142_valid_out_NO_SHIFT_REG) | ~(local_bb0_memcoalesce_param_bitcast_0142_stall_in))));
assign merge_node_stall_in_2 = (~(local_bb0_memcoalesce_param_bitcast_0142_wii_reg_NO_SHIFT_REG) & (~(local_bb0_memcoalesce_param_bitcast_0142_output_regs_ready) | ~(local_bb0_memcoalesce_param_bitcast_0142_inputs_ready)));
assign local_bb0_memcoalesce_param_bitcast_0142_causedstall = (local_bb0_memcoalesce_param_bitcast_0142_inputs_ready && (~(local_bb0_memcoalesce_param_bitcast_0142_output_regs_ready) && !(~(local_bb0_memcoalesce_param_bitcast_0142_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_memcoalesce_param_bitcast_0142_NO_SHIFT_REG <= 'x;
		local_bb0_memcoalesce_param_bitcast_0142_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_memcoalesce_param_bitcast_0142_NO_SHIFT_REG <= 'x;
			local_bb0_memcoalesce_param_bitcast_0142_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_memcoalesce_param_bitcast_0142_output_regs_ready)
			begin
				local_bb0_memcoalesce_param_bitcast_0142_NO_SHIFT_REG <= (input_param & 64'hFFFFFFFFFFFFFC00);
				local_bb0_memcoalesce_param_bitcast_0142_valid_out_NO_SHIFT_REG <= local_bb0_memcoalesce_param_bitcast_0142_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_memcoalesce_param_bitcast_0142_stall_in))
				begin
					local_bb0_memcoalesce_param_bitcast_0142_valid_out_NO_SHIFT_REG <= local_bb0_memcoalesce_param_bitcast_0142_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_memcoalesce_param_bitcast_0142_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_memcoalesce_param_bitcast_0142_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_memcoalesce_param_bitcast_0142_inputs_ready)
			begin
				local_bb0_memcoalesce_param_bitcast_0142_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_memcoalesce_param_bitcast_0146_inputs_ready;
 reg local_bb0_memcoalesce_param_bitcast_0146_wii_reg_NO_SHIFT_REG;
 reg local_bb0_memcoalesce_param_bitcast_0146_valid_out_NO_SHIFT_REG;
wire local_bb0_memcoalesce_param_bitcast_0146_stall_in;
wire local_bb0_memcoalesce_param_bitcast_0146_output_regs_ready;
 reg [63:0] local_bb0_memcoalesce_param_bitcast_0146_NO_SHIFT_REG;
wire local_bb0_memcoalesce_param_bitcast_0146_causedstall;

assign local_bb0_memcoalesce_param_bitcast_0146_inputs_ready = merge_node_valid_out_3_NO_SHIFT_REG;
assign local_bb0_memcoalesce_param_bitcast_0146_output_regs_ready = (~(local_bb0_memcoalesce_param_bitcast_0146_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_memcoalesce_param_bitcast_0146_valid_out_NO_SHIFT_REG) | ~(local_bb0_memcoalesce_param_bitcast_0146_stall_in))));
assign merge_node_stall_in_3 = (~(local_bb0_memcoalesce_param_bitcast_0146_wii_reg_NO_SHIFT_REG) & (~(local_bb0_memcoalesce_param_bitcast_0146_output_regs_ready) | ~(local_bb0_memcoalesce_param_bitcast_0146_inputs_ready)));
assign local_bb0_memcoalesce_param_bitcast_0146_causedstall = (local_bb0_memcoalesce_param_bitcast_0146_inputs_ready && (~(local_bb0_memcoalesce_param_bitcast_0146_output_regs_ready) && !(~(local_bb0_memcoalesce_param_bitcast_0146_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_memcoalesce_param_bitcast_0146_NO_SHIFT_REG <= 'x;
		local_bb0_memcoalesce_param_bitcast_0146_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_memcoalesce_param_bitcast_0146_NO_SHIFT_REG <= 'x;
			local_bb0_memcoalesce_param_bitcast_0146_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_memcoalesce_param_bitcast_0146_output_regs_ready)
			begin
				local_bb0_memcoalesce_param_bitcast_0146_NO_SHIFT_REG <= (input_param & 64'hFFFFFFFFFFFFFC00);
				local_bb0_memcoalesce_param_bitcast_0146_valid_out_NO_SHIFT_REG <= local_bb0_memcoalesce_param_bitcast_0146_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_memcoalesce_param_bitcast_0146_stall_in))
				begin
					local_bb0_memcoalesce_param_bitcast_0146_valid_out_NO_SHIFT_REG <= local_bb0_memcoalesce_param_bitcast_0146_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_memcoalesce_param_bitcast_0146_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_memcoalesce_param_bitcast_0146_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_memcoalesce_param_bitcast_0146_inputs_ready)
			begin
				local_bb0_memcoalesce_param_bitcast_0146_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_2to2_bb0_outputChannel_valid_out;
wire rstag_2to2_bb0_outputChannel_stall_in;
wire rstag_2to2_bb0_outputChannel_inputs_ready;
wire rstag_2to2_bb0_outputChannel_stall_local;
 reg rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG;
wire rstag_2to2_bb0_outputChannel_combined_valid;
 reg [63:0] rstag_2to2_bb0_outputChannel_staging_reg_NO_SHIFT_REG;
wire [63:0] rstag_2to2_bb0_outputChannel;

assign rstag_2to2_bb0_outputChannel_inputs_ready = local_bb0_outputChannel_valid_out_NO_SHIFT_REG;
assign rstag_2to2_bb0_outputChannel = (rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG ? rstag_2to2_bb0_outputChannel_staging_reg_NO_SHIFT_REG : ((local_bb0_outputChannel_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFC20) | 64'h20));
assign rstag_2to2_bb0_outputChannel_combined_valid = (rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG | rstag_2to2_bb0_outputChannel_inputs_ready);
assign rstag_2to2_bb0_outputChannel_valid_out = rstag_2to2_bb0_outputChannel_combined_valid;
assign rstag_2to2_bb0_outputChannel_stall_local = rstag_2to2_bb0_outputChannel_stall_in;
assign local_bb0_outputChannel_stall_in = (|rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_2to2_bb0_outputChannel_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (start)
		begin
			rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (rstag_2to2_bb0_outputChannel_stall_local)
			begin
				if (~(rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG))
				begin
					rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG <= rstag_2to2_bb0_outputChannel_inputs_ready;
				end
			end
			else
			begin
				rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG <= 1'b0;
			end
		end
		if (~(rstag_2to2_bb0_outputChannel_staging_valid_NO_SHIFT_REG))
		begin
			rstag_2to2_bb0_outputChannel_staging_reg_NO_SHIFT_REG <= ((local_bb0_outputChannel_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFC20) | 64'h20);
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb0_memcoalesce_param_bitcast_0_valid_out;
wire local_bb0_memcoalesce_param_bitcast_0_stall_in;
wire local_bb0_memcoalesce_param_bitcast_0_inputs_ready;
wire local_bb0_memcoalesce_param_bitcast_0_stall_local;
wire [63:0] local_bb0_memcoalesce_param_bitcast_0;

assign local_bb0_memcoalesce_param_bitcast_0_inputs_ready = rstag_2to2_bb0_outputChannel_valid_out;
assign local_bb0_memcoalesce_param_bitcast_0 = ((rstag_2to2_bb0_outputChannel & 64'hFFFFFFFFFFFFFC20) | 64'h20);
assign local_bb0_memcoalesce_param_bitcast_0_valid_out = local_bb0_memcoalesce_param_bitcast_0_inputs_ready;
assign local_bb0_memcoalesce_param_bitcast_0_stall_local = local_bb0_memcoalesce_param_bitcast_0_stall_in;
assign rstag_2to2_bb0_outputChannel_stall_in = (|local_bb0_memcoalesce_param_bitcast_0_stall_local);

// This section implements a registered operation.
// 
wire local_bb0_ld_memcoalesce_param_load_0_inputs_ready;
 reg local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG;
 reg local_bb0_ld_memcoalesce_param_load_0_valid_out_NO_SHIFT_REG;
wire local_bb0_ld_memcoalesce_param_load_0_stall_in;
wire local_bb0_ld_memcoalesce_param_load_0_output_regs_ready;
wire local_bb0_ld_memcoalesce_param_load_0_fu_stall_out;
wire local_bb0_ld_memcoalesce_param_load_0_fu_valid_out;
wire [63:0] local_bb0_ld_memcoalesce_param_load_0_lsu_dataout;
 reg [63:0] local_bb0_ld_memcoalesce_param_load_0_NO_SHIFT_REG;
wire local_bb0_ld_memcoalesce_param_load_0_causedstall;

lsu_top lsu_local_bb0_ld_memcoalesce_param_load_0 (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb0_ld_memcoalesce_param_load_0_fu_stall_out),
	.i_valid((~(local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG) & local_bb0_ld_memcoalesce_param_load_0_inputs_ready)),
	.i_address(((local_bb0_memcoalesce_param_bitcast_0 & 64'hFFFFFFFFFFFFFC20) | 64'h20)),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(1'b0),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb0_ld_memcoalesce_param_load_0_output_regs_ready)),
	.o_valid(local_bb0_ld_memcoalesce_param_load_0_fu_valid_out),
	.o_readdata(local_bb0_ld_memcoalesce_param_load_0_lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb0_ld_memcoalesce_param_load_0_active),
	.avm_address(avm_local_bb0_ld_memcoalesce_param_load_0_address),
	.avm_read(avm_local_bb0_ld_memcoalesce_param_load_0_read),
	.avm_enable(avm_local_bb0_ld_memcoalesce_param_load_0_enable),
	.avm_readdata(avm_local_bb0_ld_memcoalesce_param_load_0_readdata),
	.avm_write(avm_local_bb0_ld_memcoalesce_param_load_0_write),
	.avm_writeack(avm_local_bb0_ld_memcoalesce_param_load_0_writeack),
	.avm_burstcount(avm_local_bb0_ld_memcoalesce_param_load_0_burstcount),
	.avm_writedata(avm_local_bb0_ld_memcoalesce_param_load_0_writedata),
	.avm_byteenable(avm_local_bb0_ld_memcoalesce_param_load_0_byteenable),
	.avm_waitrequest(avm_local_bb0_ld_memcoalesce_param_load_0_waitrequest),
	.avm_readdatavalid(avm_local_bb0_ld_memcoalesce_param_load_0_readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb0_ld_memcoalesce_param_load_0.AWIDTH = 32;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.WIDTH_BYTES = 8;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.MWIDTH_BYTES = 64;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.ALIGNMENT_BYTES = 32;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.READ = 1;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.ATOMIC = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.WIDTH = 64;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.MWIDTH = 512;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.ATOMIC_WIDTH = 3;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.KERNEL_SIDE_MEM_LATENCY = 1;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.MEMORY_SIDE_MEM_LATENCY = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.USE_WRITE_ACK = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.NUMBER_BANKS = 1;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.USEINPUTFIFO = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.USECACHING = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.USEOUTPUTFIFO = 1;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.ADDRSPACE = 1;
defparam lsu_local_bb0_ld_memcoalesce_param_load_0.STYLE = "SIMPLE";

assign local_bb0_ld_memcoalesce_param_load_0_inputs_ready = local_bb0_memcoalesce_param_bitcast_0_valid_out;
assign local_bb0_ld_memcoalesce_param_load_0_output_regs_ready = (~(local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_ld_memcoalesce_param_load_0_valid_out_NO_SHIFT_REG) | ~(local_bb0_ld_memcoalesce_param_load_0_stall_in))));
assign local_bb0_memcoalesce_param_bitcast_0_stall_in = (~(local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG) & (local_bb0_ld_memcoalesce_param_load_0_fu_stall_out | ~((~(local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG) & local_bb0_ld_memcoalesce_param_load_0_inputs_ready))));
assign local_bb0_ld_memcoalesce_param_load_0_causedstall = ((~(local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG) & local_bb0_ld_memcoalesce_param_load_0_inputs_ready) && (local_bb0_ld_memcoalesce_param_load_0_fu_stall_out && !(~(local_bb0_ld_memcoalesce_param_load_0_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_ld_memcoalesce_param_load_0_NO_SHIFT_REG <= 'x;
		local_bb0_ld_memcoalesce_param_load_0_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_ld_memcoalesce_param_load_0_NO_SHIFT_REG <= 'x;
			local_bb0_ld_memcoalesce_param_load_0_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_ld_memcoalesce_param_load_0_output_regs_ready)
			begin
				local_bb0_ld_memcoalesce_param_load_0_NO_SHIFT_REG <= local_bb0_ld_memcoalesce_param_load_0_lsu_dataout;
				local_bb0_ld_memcoalesce_param_load_0_valid_out_NO_SHIFT_REG <= local_bb0_ld_memcoalesce_param_load_0_fu_valid_out;
			end
			else
			begin
				if (~(local_bb0_ld_memcoalesce_param_load_0_stall_in))
				begin
					local_bb0_ld_memcoalesce_param_load_0_valid_out_NO_SHIFT_REG <= local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_ld_memcoalesce_param_load_0_fu_valid_out)
			begin
				local_bb0_ld_memcoalesce_param_load_0_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_3to3_bb0_ld_memcoalesce_param_load_0_valid_out_0;
wire rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_in_0;
wire rstag_3to3_bb0_ld_memcoalesce_param_load_0_valid_out_1;
wire rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_in_1;
wire rstag_3to3_bb0_ld_memcoalesce_param_load_0_inputs_ready;
wire rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_local;
 reg rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG;
wire rstag_3to3_bb0_ld_memcoalesce_param_load_0_combined_valid;
 reg [63:0] rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_reg_NO_SHIFT_REG;
wire [63:0] rstag_3to3_bb0_ld_memcoalesce_param_load_0;
 reg rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_0_NO_SHIFT_REG;
 reg rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_1_NO_SHIFT_REG;

assign rstag_3to3_bb0_ld_memcoalesce_param_load_0_inputs_ready = local_bb0_ld_memcoalesce_param_load_0_valid_out_NO_SHIFT_REG;
assign rstag_3to3_bb0_ld_memcoalesce_param_load_0 = (rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG ? rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_reg_NO_SHIFT_REG : local_bb0_ld_memcoalesce_param_load_0_NO_SHIFT_REG);
assign rstag_3to3_bb0_ld_memcoalesce_param_load_0_combined_valid = (rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG | rstag_3to3_bb0_ld_memcoalesce_param_load_0_inputs_ready);
assign rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_local = ((rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_in_0 & ~(rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_0_NO_SHIFT_REG)) | (rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_in_1 & ~(rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_1_NO_SHIFT_REG)));
assign rstag_3to3_bb0_ld_memcoalesce_param_load_0_valid_out_0 = (rstag_3to3_bb0_ld_memcoalesce_param_load_0_combined_valid & ~(rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_0_NO_SHIFT_REG));
assign rstag_3to3_bb0_ld_memcoalesce_param_load_0_valid_out_1 = (rstag_3to3_bb0_ld_memcoalesce_param_load_0_combined_valid & ~(rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_1_NO_SHIFT_REG));
assign local_bb0_ld_memcoalesce_param_load_0_stall_in = (|rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (start)
		begin
			rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_local)
			begin
				if (~(rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG))
				begin
					rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG <= rstag_3to3_bb0_ld_memcoalesce_param_load_0_inputs_ready;
				end
			end
			else
			begin
				rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG <= 1'b0;
			end
		end
		if (~(rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_valid_NO_SHIFT_REG))
		begin
			rstag_3to3_bb0_ld_memcoalesce_param_load_0_staging_reg_NO_SHIFT_REG <= local_bb0_ld_memcoalesce_param_load_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_0_NO_SHIFT_REG <= 1'b0;
			rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_1_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_0_NO_SHIFT_REG <= (rstag_3to3_bb0_ld_memcoalesce_param_load_0_combined_valid & (rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_0_NO_SHIFT_REG | ~(rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_in_0)) & rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_local);
			rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_1_NO_SHIFT_REG <= (rstag_3to3_bb0_ld_memcoalesce_param_load_0_combined_valid & (rstag_3to3_bb0_ld_memcoalesce_param_load_0_consumed_1_NO_SHIFT_REG | ~(rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_in_1)) & rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_local);
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_memcoalesce_param_extrValue_1_inputs_ready;
 reg local_bb0_memcoalesce_param_extrValue_1_wii_reg_NO_SHIFT_REG;
 reg local_bb0_memcoalesce_param_extrValue_1_valid_out_NO_SHIFT_REG;
wire local_bb0_memcoalesce_param_extrValue_1_stall_in;
wire local_bb0_memcoalesce_param_extrValue_1_output_regs_ready;
 reg [31:0] local_bb0_memcoalesce_param_extrValue_1_NO_SHIFT_REG;
wire [31:0] local_bb0_memcoalesce_param_extrValue_1_op_wire;
wire local_bb0_memcoalesce_param_extrValue_1_causedstall;

assign local_bb0_memcoalesce_param_extrValue_1_inputs_ready = rstag_3to3_bb0_ld_memcoalesce_param_load_0_valid_out_0;
assign local_bb0_memcoalesce_param_extrValue_1_output_regs_ready = (~(local_bb0_memcoalesce_param_extrValue_1_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_memcoalesce_param_extrValue_1_valid_out_NO_SHIFT_REG) | ~(local_bb0_memcoalesce_param_extrValue_1_stall_in))));
assign local_bb0_memcoalesce_param_extrValue_1_op_wire[31:0] = rstag_3to3_bb0_ld_memcoalesce_param_load_0[63:32];
assign rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_in_0 = (~(local_bb0_memcoalesce_param_extrValue_1_wii_reg_NO_SHIFT_REG) & (~(local_bb0_memcoalesce_param_extrValue_1_output_regs_ready) | ~(local_bb0_memcoalesce_param_extrValue_1_inputs_ready)));
assign local_bb0_memcoalesce_param_extrValue_1_causedstall = (local_bb0_memcoalesce_param_extrValue_1_inputs_ready && (~(local_bb0_memcoalesce_param_extrValue_1_output_regs_ready) && !(~(local_bb0_memcoalesce_param_extrValue_1_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_memcoalesce_param_extrValue_1_NO_SHIFT_REG <= 'x;
		local_bb0_memcoalesce_param_extrValue_1_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_memcoalesce_param_extrValue_1_NO_SHIFT_REG <= 'x;
			local_bb0_memcoalesce_param_extrValue_1_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_memcoalesce_param_extrValue_1_output_regs_ready)
			begin
				local_bb0_memcoalesce_param_extrValue_1_NO_SHIFT_REG <= local_bb0_memcoalesce_param_extrValue_1_op_wire;
				local_bb0_memcoalesce_param_extrValue_1_valid_out_NO_SHIFT_REG <= local_bb0_memcoalesce_param_extrValue_1_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_memcoalesce_param_extrValue_1_stall_in))
				begin
					local_bb0_memcoalesce_param_extrValue_1_valid_out_NO_SHIFT_REG <= local_bb0_memcoalesce_param_extrValue_1_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_memcoalesce_param_extrValue_1_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_memcoalesce_param_extrValue_1_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_memcoalesce_param_extrValue_1_inputs_ready)
			begin
				local_bb0_memcoalesce_param_extrValue_1_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_memcoalesce_param_extrValue_0_inputs_ready;
 reg local_bb0_memcoalesce_param_extrValue_0_wii_reg_NO_SHIFT_REG;
 reg local_bb0_memcoalesce_param_extrValue_0_valid_out_NO_SHIFT_REG;
wire local_bb0_memcoalesce_param_extrValue_0_stall_in;
wire local_bb0_memcoalesce_param_extrValue_0_output_regs_ready;
 reg [31:0] local_bb0_memcoalesce_param_extrValue_0_NO_SHIFT_REG;
wire [31:0] local_bb0_memcoalesce_param_extrValue_0_op_wire;
wire local_bb0_memcoalesce_param_extrValue_0_causedstall;

assign local_bb0_memcoalesce_param_extrValue_0_inputs_ready = rstag_3to3_bb0_ld_memcoalesce_param_load_0_valid_out_1;
assign local_bb0_memcoalesce_param_extrValue_0_output_regs_ready = (~(local_bb0_memcoalesce_param_extrValue_0_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_memcoalesce_param_extrValue_0_valid_out_NO_SHIFT_REG) | ~(local_bb0_memcoalesce_param_extrValue_0_stall_in))));
assign local_bb0_memcoalesce_param_extrValue_0_op_wire[31:0] = rstag_3to3_bb0_ld_memcoalesce_param_load_0[31:0];
assign rstag_3to3_bb0_ld_memcoalesce_param_load_0_stall_in_1 = (~(local_bb0_memcoalesce_param_extrValue_0_wii_reg_NO_SHIFT_REG) & (~(local_bb0_memcoalesce_param_extrValue_0_output_regs_ready) | ~(local_bb0_memcoalesce_param_extrValue_0_inputs_ready)));
assign local_bb0_memcoalesce_param_extrValue_0_causedstall = (local_bb0_memcoalesce_param_extrValue_0_inputs_ready && (~(local_bb0_memcoalesce_param_extrValue_0_output_regs_ready) && !(~(local_bb0_memcoalesce_param_extrValue_0_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_memcoalesce_param_extrValue_0_NO_SHIFT_REG <= 'x;
		local_bb0_memcoalesce_param_extrValue_0_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_memcoalesce_param_extrValue_0_NO_SHIFT_REG <= 'x;
			local_bb0_memcoalesce_param_extrValue_0_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_memcoalesce_param_extrValue_0_output_regs_ready)
			begin
				local_bb0_memcoalesce_param_extrValue_0_NO_SHIFT_REG <= local_bb0_memcoalesce_param_extrValue_0_op_wire;
				local_bb0_memcoalesce_param_extrValue_0_valid_out_NO_SHIFT_REG <= local_bb0_memcoalesce_param_extrValue_0_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_memcoalesce_param_extrValue_0_stall_in))
				begin
					local_bb0_memcoalesce_param_extrValue_0_valid_out_NO_SHIFT_REG <= local_bb0_memcoalesce_param_extrValue_0_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_memcoalesce_param_extrValue_0_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_memcoalesce_param_extrValue_0_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_memcoalesce_param_extrValue_0_inputs_ready)
			begin
				local_bb0_memcoalesce_param_extrValue_0_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg [31:0] lvb_bb0_memcoalesce_param_extrValue_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb0_memcoalesce_param_extrValue_1_reg_NO_SHIFT_REG;
 reg [63:0] lvb_bb0_kernelSize17_reg_NO_SHIFT_REG;
 reg [63:0] lvb_bb0_memcoalesce_param_bitcast_0142_reg_NO_SHIFT_REG;
 reg [63:0] lvb_bb0_memcoalesce_param_bitcast_0146_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (merge_node_valid_out_4_NO_SHIFT_REG & local_bb0_memcoalesce_param_bitcast_0146_valid_out_NO_SHIFT_REG & local_bb0_memcoalesce_param_bitcast_0142_valid_out_NO_SHIFT_REG & local_bb0_kernelSize17_valid_out_NO_SHIFT_REG & local_bb0_memcoalesce_param_extrValue_1_valid_out_NO_SHIFT_REG & local_bb0_memcoalesce_param_extrValue_0_valid_out_NO_SHIFT_REG);
assign branch_var__output_regs_ready = (~(stall_in) | ~(branch_node_valid_out_NO_SHIFT_REG));
assign merge_node_stall_in_4 = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb0_memcoalesce_param_bitcast_0146_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb0_memcoalesce_param_bitcast_0142_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb0_kernelSize17_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb0_memcoalesce_param_extrValue_1_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb0_memcoalesce_param_extrValue_0_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_bb0_memcoalesce_param_extrValue_0 = lvb_bb0_memcoalesce_param_extrValue_0_reg_NO_SHIFT_REG;
assign lvb_bb0_memcoalesce_param_extrValue_1 = lvb_bb0_memcoalesce_param_extrValue_1_reg_NO_SHIFT_REG;
assign lvb_bb0_kernelSize17 = lvb_bb0_kernelSize17_reg_NO_SHIFT_REG;
assign lvb_bb0_memcoalesce_param_bitcast_0142 = lvb_bb0_memcoalesce_param_bitcast_0142_reg_NO_SHIFT_REG;
assign lvb_bb0_memcoalesce_param_bitcast_0146 = lvb_bb0_memcoalesce_param_bitcast_0146_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0 = lvb_input_global_id_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1 = lvb_input_global_id_1_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2 = lvb_input_global_id_2_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id = lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;
assign combined_branch_stall_in_signal = stall_in;
assign valid_out = branch_node_valid_out_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
		lvb_bb0_memcoalesce_param_extrValue_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb0_memcoalesce_param_extrValue_1_reg_NO_SHIFT_REG <= 'x;
		lvb_bb0_kernelSize17_reg_NO_SHIFT_REG <= 'x;
		lvb_bb0_memcoalesce_param_bitcast_0142_reg_NO_SHIFT_REG <= 'x;
		lvb_bb0_memcoalesce_param_bitcast_0146_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_bb0_memcoalesce_param_extrValue_0_reg_NO_SHIFT_REG <= local_bb0_memcoalesce_param_extrValue_0_NO_SHIFT_REG;
			lvb_bb0_memcoalesce_param_extrValue_1_reg_NO_SHIFT_REG <= local_bb0_memcoalesce_param_extrValue_1_NO_SHIFT_REG;
			lvb_bb0_kernelSize17_reg_NO_SHIFT_REG <= ((local_bb0_kernelSize17_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFC08) | 64'h8);
			lvb_bb0_memcoalesce_param_bitcast_0142_reg_NO_SHIFT_REG <= (local_bb0_memcoalesce_param_bitcast_0142_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFC00);
			lvb_bb0_memcoalesce_param_bitcast_0146_reg_NO_SHIFT_REG <= (local_bb0_memcoalesce_param_bitcast_0146_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFC00);
			lvb_input_global_id_0_reg_NO_SHIFT_REG <= local_lvm_input_global_id_0_NO_SHIFT_REG;
			lvb_input_global_id_1_reg_NO_SHIFT_REG <= local_lvm_input_global_id_1_NO_SHIFT_REG;
			lvb_input_global_id_2_reg_NO_SHIFT_REG <= local_lvm_input_global_id_2_NO_SHIFT_REG;
			lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module convLayer_basic_block_1
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_0,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_1,
		input [63:0] 		input_wii_kernelSize17,
		input [63:0] 		input_wii_memcoalesce_param_bitcast_0142,
		input [63:0] 		input_wii_memcoalesce_param_bitcast_0146,
		input 		valid_in,
		output 		stall_out,
		input [31:0] 		input_global_id_0,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out,
		input 		stall_in,
		output 		lvb_bb1_cmp56,
		output 		lvb_bb1_var_,
		output [31:0] 		lvb_bb1_memcoalesce_param_extrValue_6,
		output [31:0] 		lvb_bb1_memcoalesce_param_extrValue_3,
		output 		lvb_bb1_cmp1430,
		output 		lvb_bb1_var__u0,
		output 		lvb_bb1__phi_decision_xor118,
		output [31:0] 		lvb_bb1_ld_,
		output 		lvb_bb1_cmp1824,
		output 		lvb_bb1__phi_decision_xor119_or,
		output [31:0] 		lvb_bb1_memcoalesce_param_extrValue_5,
		output [31:0] 		lvb_bb1_memcoalesce_param_extrValue_6148,
		output [31:0] 		lvb_bb1_memcoalesce_param_extrValue_1149,
		output [31:0] 		lvb_bb1_memcoalesce_param_extrValue_3150,
		output [31:0] 		lvb_bb1_memcoalesce_param_extrValue_4,
		output [31:0] 		lvb_input_global_id_0,
		output [31:0] 		lvb_input_global_id_1,
		output [31:0] 		lvb_input_global_id_2,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		input 		start,
		output 		avm_local_bb1_ld_memcoalesce_param_load_0143_enable,
		input [511:0] 		avm_local_bb1_ld_memcoalesce_param_load_0143_readdata,
		input 		avm_local_bb1_ld_memcoalesce_param_load_0143_readdatavalid,
		input 		avm_local_bb1_ld_memcoalesce_param_load_0143_waitrequest,
		output [31:0] 		avm_local_bb1_ld_memcoalesce_param_load_0143_address,
		output 		avm_local_bb1_ld_memcoalesce_param_load_0143_read,
		output 		avm_local_bb1_ld_memcoalesce_param_load_0143_write,
		input 		avm_local_bb1_ld_memcoalesce_param_load_0143_writeack,
		output [511:0] 		avm_local_bb1_ld_memcoalesce_param_load_0143_writedata,
		output [63:0] 		avm_local_bb1_ld_memcoalesce_param_load_0143_byteenable,
		output [4:0] 		avm_local_bb1_ld_memcoalesce_param_load_0143_burstcount,
		output 		local_bb1_ld_memcoalesce_param_load_0143_active,
		input 		clock2x,
		output 		avm_local_bb1_ld__enable,
		input [511:0] 		avm_local_bb1_ld__readdata,
		input 		avm_local_bb1_ld__readdatavalid,
		input 		avm_local_bb1_ld__waitrequest,
		output [31:0] 		avm_local_bb1_ld__address,
		output 		avm_local_bb1_ld__read,
		output 		avm_local_bb1_ld__write,
		input 		avm_local_bb1_ld__writeack,
		output [511:0] 		avm_local_bb1_ld__writedata,
		output [63:0] 		avm_local_bb1_ld__byteenable,
		output [4:0] 		avm_local_bb1_ld__burstcount,
		output 		local_bb1_ld__active,
		output 		avm_local_bb1_ld_memcoalesce_param_load_0147_enable,
		input [511:0] 		avm_local_bb1_ld_memcoalesce_param_load_0147_readdata,
		input 		avm_local_bb1_ld_memcoalesce_param_load_0147_readdatavalid,
		input 		avm_local_bb1_ld_memcoalesce_param_load_0147_waitrequest,
		output [31:0] 		avm_local_bb1_ld_memcoalesce_param_load_0147_address,
		output 		avm_local_bb1_ld_memcoalesce_param_load_0147_read,
		output 		avm_local_bb1_ld_memcoalesce_param_load_0147_write,
		input 		avm_local_bb1_ld_memcoalesce_param_load_0147_writeack,
		output [511:0] 		avm_local_bb1_ld_memcoalesce_param_load_0147_writedata,
		output [63:0] 		avm_local_bb1_ld_memcoalesce_param_load_0147_byteenable,
		output [4:0] 		avm_local_bb1_ld_memcoalesce_param_load_0147_burstcount,
		output 		local_bb1_ld_memcoalesce_param_load_0147_active
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_node_stall_in_4;
 reg merge_node_valid_out_4_NO_SHIFT_REG;
wire merge_node_stall_in_5;
 reg merge_node_valid_out_5_NO_SHIFT_REG;
wire merge_node_stall_in_6;
 reg merge_node_valid_out_6_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_0_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG) | (merge_node_stall_in_4 & merge_node_valid_out_4_NO_SHIFT_REG) | (merge_node_stall_in_5 & merge_node_valid_out_5_NO_SHIFT_REG) | (merge_node_stall_in_6 & merge_node_valid_out_6_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_global_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_global_id_0_staging_reg_NO_SHIFT_REG <= input_global_id_0;
				input_global_id_1_staging_reg_NO_SHIFT_REG <= input_global_id_1;
				input_global_id_2_staging_reg_NO_SHIFT_REG <= input_global_id_2;
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_5_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_6_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_4_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_5_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_6_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_4))
			begin
				merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_5))
			begin
				merge_node_valid_out_5_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_6))
			begin
				merge_node_valid_out_6_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1_cmp56_valid_out;
wire local_bb1_cmp56_stall_in;
wire local_bb1_cmp56_inputs_ready;
wire local_bb1_cmp56_stall_local;
wire local_bb1_cmp56;

assign local_bb1_cmp56_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb1_cmp56 = ($signed(input_wii_memcoalesce_param_extrValue_0) > $signed(local_lvm_input_global_id_0_NO_SHIFT_REG));
assign local_bb1_cmp56_valid_out = local_bb1_cmp56_inputs_ready;
assign local_bb1_cmp56_stall_local = local_bb1_cmp56_stall_in;
assign merge_node_stall_in_0 = (|local_bb1_cmp56_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb1_cmp546_valid_out;
wire local_bb1_cmp546_stall_in;
wire local_bb1_cmp546_inputs_ready;
wire local_bb1_cmp546_stall_local;
wire local_bb1_cmp546;

assign local_bb1_cmp546_inputs_ready = merge_node_valid_out_1_NO_SHIFT_REG;
assign local_bb1_cmp546 = ($signed(input_wii_memcoalesce_param_extrValue_1) > $signed(local_lvm_input_global_id_1_NO_SHIFT_REG));
assign local_bb1_cmp546_valid_out = local_bb1_cmp546_inputs_ready;
assign local_bb1_cmp546_stall_local = local_bb1_cmp546_stall_in;
assign merge_node_stall_in_1 = (|local_bb1_cmp546_stall_local);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_memcoalesce_param_bitcast_0142_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_param_bitcast_0142_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_param_bitcast_0142_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_param_bitcast_0142_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_param_bitcast_0142_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_param_bitcast_0142_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_memcoalesce_param_bitcast_0142_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_memcoalesce_param_bitcast_0142_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_memcoalesce_param_bitcast_0142_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_memcoalesce_param_bitcast_0142_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_memcoalesce_param_bitcast_0142_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(),
	.data_out()
);

defparam rnode_1to2_memcoalesce_param_bitcast_0142_0_reg_2_fifo.DEPTH = 2;
defparam rnode_1to2_memcoalesce_param_bitcast_0142_0_reg_2_fifo.DATA_WIDTH = 0;
defparam rnode_1to2_memcoalesce_param_bitcast_0142_0_reg_2_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to2_memcoalesce_param_bitcast_0142_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_memcoalesce_param_bitcast_0142_0_reg_2_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_2_NO_SHIFT_REG;
assign merge_node_stall_in_2 = rnode_1to2_memcoalesce_param_bitcast_0142_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_memcoalesce_param_bitcast_0142_0_stall_in_reg_2_NO_SHIFT_REG = rnode_1to2_memcoalesce_param_bitcast_0142_0_stall_in_NO_SHIFT_REG;
assign rnode_1to2_memcoalesce_param_bitcast_0142_0_valid_out_NO_SHIFT_REG = rnode_1to2_memcoalesce_param_bitcast_0142_0_valid_out_reg_2_NO_SHIFT_REG;

// Register node:
//  * latency = 5
//  * capacity = 5
 logic rnode_1to6_kernelSize17_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to6_kernelSize17_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to6_kernelSize17_0_reg_6_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to6_kernelSize17_0_valid_out_reg_6_NO_SHIFT_REG;
 logic rnode_1to6_kernelSize17_0_stall_in_reg_6_NO_SHIFT_REG;
 logic rnode_1to6_kernelSize17_0_stall_out_reg_6_NO_SHIFT_REG;

acl_data_fifo rnode_1to6_kernelSize17_0_reg_6_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to6_kernelSize17_0_reg_6_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to6_kernelSize17_0_stall_in_reg_6_NO_SHIFT_REG),
	.valid_out(rnode_1to6_kernelSize17_0_valid_out_reg_6_NO_SHIFT_REG),
	.stall_out(rnode_1to6_kernelSize17_0_stall_out_reg_6_NO_SHIFT_REG),
	.data_in(),
	.data_out()
);

defparam rnode_1to6_kernelSize17_0_reg_6_fifo.DEPTH = 6;
defparam rnode_1to6_kernelSize17_0_reg_6_fifo.DATA_WIDTH = 0;
defparam rnode_1to6_kernelSize17_0_reg_6_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to6_kernelSize17_0_reg_6_fifo.IMPL = "ll_reg";

assign rnode_1to6_kernelSize17_0_reg_6_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_3_NO_SHIFT_REG;
assign merge_node_stall_in_3 = rnode_1to6_kernelSize17_0_stall_out_reg_6_NO_SHIFT_REG;
assign rnode_1to6_kernelSize17_0_stall_in_reg_6_NO_SHIFT_REG = rnode_1to6_kernelSize17_0_stall_in_NO_SHIFT_REG;
assign rnode_1to6_kernelSize17_0_valid_out_NO_SHIFT_REG = rnode_1to6_kernelSize17_0_valid_out_reg_6_NO_SHIFT_REG;

// Register node:
//  * latency = 8
//  * capacity = 8
 logic rnode_1to9_memcoalesce_param_bitcast_0146_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to9_memcoalesce_param_bitcast_0146_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to9_memcoalesce_param_bitcast_0146_0_reg_9_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to9_memcoalesce_param_bitcast_0146_0_valid_out_reg_9_NO_SHIFT_REG;
 logic rnode_1to9_memcoalesce_param_bitcast_0146_0_stall_in_reg_9_NO_SHIFT_REG;
 logic rnode_1to9_memcoalesce_param_bitcast_0146_0_stall_out_reg_9_NO_SHIFT_REG;

acl_data_fifo rnode_1to9_memcoalesce_param_bitcast_0146_0_reg_9_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to9_memcoalesce_param_bitcast_0146_0_reg_9_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to9_memcoalesce_param_bitcast_0146_0_stall_in_reg_9_NO_SHIFT_REG),
	.valid_out(rnode_1to9_memcoalesce_param_bitcast_0146_0_valid_out_reg_9_NO_SHIFT_REG),
	.stall_out(rnode_1to9_memcoalesce_param_bitcast_0146_0_stall_out_reg_9_NO_SHIFT_REG),
	.data_in(),
	.data_out()
);

defparam rnode_1to9_memcoalesce_param_bitcast_0146_0_reg_9_fifo.DEPTH = 9;
defparam rnode_1to9_memcoalesce_param_bitcast_0146_0_reg_9_fifo.DATA_WIDTH = 0;
defparam rnode_1to9_memcoalesce_param_bitcast_0146_0_reg_9_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to9_memcoalesce_param_bitcast_0146_0_reg_9_fifo.IMPL = "ram";

assign rnode_1to9_memcoalesce_param_bitcast_0146_0_reg_9_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_4_NO_SHIFT_REG;
assign merge_node_stall_in_4 = rnode_1to9_memcoalesce_param_bitcast_0146_0_stall_out_reg_9_NO_SHIFT_REG;
assign rnode_1to9_memcoalesce_param_bitcast_0146_0_stall_in_reg_9_NO_SHIFT_REG = rnode_1to9_memcoalesce_param_bitcast_0146_0_stall_in_NO_SHIFT_REG;
assign rnode_1to9_memcoalesce_param_bitcast_0146_0_valid_out_NO_SHIFT_REG = rnode_1to9_memcoalesce_param_bitcast_0146_0_valid_out_reg_9_NO_SHIFT_REG;

// Register node:
//  * latency = 4
//  * capacity = 4
 logic rnode_1to5_input_global_id_2_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to5_input_global_id_2_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to5_input_global_id_2_0_NO_SHIFT_REG;
 logic rnode_1to5_input_global_id_2_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to5_input_global_id_2_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to5_input_global_id_2_1_NO_SHIFT_REG;
 logic rnode_1to5_input_global_id_2_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to5_input_global_id_2_0_reg_5_NO_SHIFT_REG;
 logic rnode_1to5_input_global_id_2_0_valid_out_0_reg_5_NO_SHIFT_REG;
 logic rnode_1to5_input_global_id_2_0_stall_in_0_reg_5_NO_SHIFT_REG;
 logic rnode_1to5_input_global_id_2_0_stall_out_reg_5_NO_SHIFT_REG;
 reg rnode_1to5_input_global_id_2_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to5_input_global_id_2_0_consumed_1_NO_SHIFT_REG;
wire [95:0] rci_rcnode_1to12_rc6_input_global_id_0_0_reg_1;

acl_data_fifo rnode_1to5_input_global_id_2_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to5_input_global_id_2_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to5_input_global_id_2_0_stall_in_0_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_1to5_input_global_id_2_0_valid_out_0_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_1to5_input_global_id_2_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_lvm_input_global_id_2_NO_SHIFT_REG),
	.data_out(rnode_1to5_input_global_id_2_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_1to5_input_global_id_2_0_reg_5_fifo.DEPTH = 5;
defparam rnode_1to5_input_global_id_2_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_1to5_input_global_id_2_0_reg_5_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to5_input_global_id_2_0_reg_5_fifo.IMPL = "ll_reg";

assign rnode_1to5_input_global_id_2_0_reg_5_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_5_NO_SHIFT_REG;
assign merge_node_stall_in_5 = rnode_1to5_input_global_id_2_0_stall_out_reg_5_NO_SHIFT_REG;
assign rnode_1to5_input_global_id_2_0_stall_in_0_reg_5_NO_SHIFT_REG = ((rnode_1to5_input_global_id_2_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to5_input_global_id_2_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to5_input_global_id_2_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to5_input_global_id_2_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to5_input_global_id_2_0_valid_out_0_NO_SHIFT_REG = (rnode_1to5_input_global_id_2_0_valid_out_0_reg_5_NO_SHIFT_REG & ~(rnode_1to5_input_global_id_2_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to5_input_global_id_2_0_valid_out_1_NO_SHIFT_REG = (rnode_1to5_input_global_id_2_0_valid_out_0_reg_5_NO_SHIFT_REG & ~(rnode_1to5_input_global_id_2_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to5_input_global_id_2_0_NO_SHIFT_REG = rnode_1to5_input_global_id_2_0_reg_5_NO_SHIFT_REG;
assign rnode_1to5_input_global_id_2_1_NO_SHIFT_REG = rnode_1to5_input_global_id_2_0_reg_5_NO_SHIFT_REG;
assign rci_rcnode_1to12_rc6_input_global_id_0_0_reg_1[31:0] = local_lvm_input_global_id_0_NO_SHIFT_REG;
assign rci_rcnode_1to12_rc6_input_global_id_0_0_reg_1[63:32] = local_lvm_input_global_id_1_NO_SHIFT_REG;
assign rci_rcnode_1to12_rc6_input_global_id_0_0_reg_1[95:64] = local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to5_input_global_id_2_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to5_input_global_id_2_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to5_input_global_id_2_0_consumed_0_NO_SHIFT_REG <= (rnode_1to5_input_global_id_2_0_valid_out_0_reg_5_NO_SHIFT_REG & (rnode_1to5_input_global_id_2_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to5_input_global_id_2_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to5_input_global_id_2_0_stall_in_0_reg_5_NO_SHIFT_REG);
		rnode_1to5_input_global_id_2_0_consumed_1_NO_SHIFT_REG <= (rnode_1to5_input_global_id_2_0_valid_out_0_reg_5_NO_SHIFT_REG & (rnode_1to5_input_global_id_2_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to5_input_global_id_2_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to5_input_global_id_2_0_stall_in_0_reg_5_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 11
//  * capacity = 11
 logic rcnode_1to12_rc6_input_global_id_0_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to12_rc6_input_global_id_0_0_stall_in_NO_SHIFT_REG;
 logic [95:0] rcnode_1to12_rc6_input_global_id_0_0_NO_SHIFT_REG;
 logic rcnode_1to12_rc6_input_global_id_0_0_reg_12_inputs_ready_NO_SHIFT_REG;
 logic [95:0] rcnode_1to12_rc6_input_global_id_0_0_reg_12_NO_SHIFT_REG;
 logic rcnode_1to12_rc6_input_global_id_0_0_valid_out_reg_12_NO_SHIFT_REG;
 logic rcnode_1to12_rc6_input_global_id_0_0_stall_in_reg_12_NO_SHIFT_REG;
 logic rcnode_1to12_rc6_input_global_id_0_0_stall_out_reg_12_IP_NO_SHIFT_REG;
 logic rcnode_1to12_rc6_input_global_id_0_0_stall_out_reg_12_NO_SHIFT_REG;

acl_data_fifo rcnode_1to12_rc6_input_global_id_0_0_reg_12_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to12_rc6_input_global_id_0_0_reg_12_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to12_rc6_input_global_id_0_0_stall_in_reg_12_NO_SHIFT_REG),
	.valid_out(rcnode_1to12_rc6_input_global_id_0_0_valid_out_reg_12_NO_SHIFT_REG),
	.stall_out(rcnode_1to12_rc6_input_global_id_0_0_stall_out_reg_12_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to12_rc6_input_global_id_0_0_reg_1),
	.data_out(rcnode_1to12_rc6_input_global_id_0_0_reg_12_NO_SHIFT_REG)
);

defparam rcnode_1to12_rc6_input_global_id_0_0_reg_12_fifo.DEPTH = 12;
defparam rcnode_1to12_rc6_input_global_id_0_0_reg_12_fifo.DATA_WIDTH = 96;
defparam rcnode_1to12_rc6_input_global_id_0_0_reg_12_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to12_rc6_input_global_id_0_0_reg_12_fifo.IMPL = "ram";

assign rcnode_1to12_rc6_input_global_id_0_0_reg_12_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_6_NO_SHIFT_REG;
assign rcnode_1to12_rc6_input_global_id_0_0_stall_out_reg_12_NO_SHIFT_REG = (~(rcnode_1to12_rc6_input_global_id_0_0_reg_12_inputs_ready_NO_SHIFT_REG) | rcnode_1to12_rc6_input_global_id_0_0_stall_out_reg_12_IP_NO_SHIFT_REG);
assign merge_node_stall_in_6 = rcnode_1to12_rc6_input_global_id_0_0_stall_out_reg_12_NO_SHIFT_REG;
assign rcnode_1to12_rc6_input_global_id_0_0_NO_SHIFT_REG = rcnode_1to12_rc6_input_global_id_0_0_reg_12_NO_SHIFT_REG;
assign rcnode_1to12_rc6_input_global_id_0_0_stall_in_reg_12_NO_SHIFT_REG = rcnode_1to12_rc6_input_global_id_0_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to12_rc6_input_global_id_0_0_valid_out_NO_SHIFT_REG = rcnode_1to12_rc6_input_global_id_0_0_valid_out_reg_12_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb1_cmp56_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp56_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp56_0_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp56_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp56_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp56_1_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp56_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp56_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp56_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp56_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp56_0_stall_out_reg_2_NO_SHIFT_REG;
 reg rnode_1to2_bb1_cmp56_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to2_bb1_cmp56_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb1_cmp56_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb1_cmp56_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb1_cmp56_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb1_cmp56_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb1_cmp56_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb1_cmp56),
	.data_out(rnode_1to2_bb1_cmp56_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb1_cmp56_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb1_cmp56_0_reg_2_fifo.DATA_WIDTH = 1;
defparam rnode_1to2_bb1_cmp56_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb1_cmp56_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_bb1_cmp56_0_reg_2_inputs_ready_NO_SHIFT_REG = local_bb1_cmp56_valid_out;
assign local_bb1_cmp56_stall_in = rnode_1to2_bb1_cmp56_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb1_cmp56_0_stall_in_0_reg_2_NO_SHIFT_REG = ((rnode_1to2_bb1_cmp56_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to2_bb1_cmp56_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to2_bb1_cmp56_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to2_bb1_cmp56_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to2_bb1_cmp56_0_valid_out_0_NO_SHIFT_REG = (rnode_1to2_bb1_cmp56_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_bb1_cmp56_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_bb1_cmp56_0_valid_out_1_NO_SHIFT_REG = (rnode_1to2_bb1_cmp56_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_bb1_cmp56_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to2_bb1_cmp56_0_NO_SHIFT_REG = rnode_1to2_bb1_cmp56_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb1_cmp56_1_NO_SHIFT_REG = rnode_1to2_bb1_cmp56_0_reg_2_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to2_bb1_cmp56_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_bb1_cmp56_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to2_bb1_cmp56_0_consumed_0_NO_SHIFT_REG <= (rnode_1to2_bb1_cmp56_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_bb1_cmp56_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to2_bb1_cmp56_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to2_bb1_cmp56_0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_bb1_cmp56_0_consumed_1_NO_SHIFT_REG <= (rnode_1to2_bb1_cmp56_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_bb1_cmp56_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to2_bb1_cmp56_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to2_bb1_cmp56_0_stall_in_0_reg_2_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb1_cmp546_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp546_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp546_0_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp546_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp546_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp546_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp546_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_cmp546_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb1_cmp546_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb1_cmp546_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb1_cmp546_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb1_cmp546_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb1_cmp546_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb1_cmp546),
	.data_out(rnode_1to2_bb1_cmp546_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb1_cmp546_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb1_cmp546_0_reg_2_fifo.DATA_WIDTH = 1;
defparam rnode_1to2_bb1_cmp546_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb1_cmp546_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_bb1_cmp546_0_reg_2_inputs_ready_NO_SHIFT_REG = local_bb1_cmp546_valid_out;
assign local_bb1_cmp546_stall_in = rnode_1to2_bb1_cmp546_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb1_cmp546_0_NO_SHIFT_REG = rnode_1to2_bb1_cmp546_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb1_cmp546_0_stall_in_reg_2_NO_SHIFT_REG = rnode_1to2_bb1_cmp546_0_stall_in_NO_SHIFT_REG;
assign rnode_1to2_bb1_cmp546_0_valid_out_NO_SHIFT_REG = rnode_1to2_bb1_cmp546_0_valid_out_reg_2_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_9to10_memcoalesce_param_bitcast_0146_0_valid_out_NO_SHIFT_REG;
 logic rnode_9to10_memcoalesce_param_bitcast_0146_0_stall_in_NO_SHIFT_REG;
 logic rnode_9to10_memcoalesce_param_bitcast_0146_0_reg_10_inputs_ready_NO_SHIFT_REG;
 logic rnode_9to10_memcoalesce_param_bitcast_0146_0_valid_out_reg_10_NO_SHIFT_REG;
 logic rnode_9to10_memcoalesce_param_bitcast_0146_0_stall_in_reg_10_NO_SHIFT_REG;
 logic rnode_9to10_memcoalesce_param_bitcast_0146_0_stall_out_reg_10_NO_SHIFT_REG;

acl_data_fifo rnode_9to10_memcoalesce_param_bitcast_0146_0_reg_10_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_9to10_memcoalesce_param_bitcast_0146_0_reg_10_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_9to10_memcoalesce_param_bitcast_0146_0_stall_in_reg_10_NO_SHIFT_REG),
	.valid_out(rnode_9to10_memcoalesce_param_bitcast_0146_0_valid_out_reg_10_NO_SHIFT_REG),
	.stall_out(rnode_9to10_memcoalesce_param_bitcast_0146_0_stall_out_reg_10_NO_SHIFT_REG),
	.data_in(),
	.data_out()
);

defparam rnode_9to10_memcoalesce_param_bitcast_0146_0_reg_10_fifo.DEPTH = 2;
defparam rnode_9to10_memcoalesce_param_bitcast_0146_0_reg_10_fifo.DATA_WIDTH = 0;
defparam rnode_9to10_memcoalesce_param_bitcast_0146_0_reg_10_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_9to10_memcoalesce_param_bitcast_0146_0_reg_10_fifo.IMPL = "ll_reg";

assign rnode_9to10_memcoalesce_param_bitcast_0146_0_reg_10_inputs_ready_NO_SHIFT_REG = rnode_1to9_memcoalesce_param_bitcast_0146_0_valid_out_NO_SHIFT_REG;
assign rnode_1to9_memcoalesce_param_bitcast_0146_0_stall_in_NO_SHIFT_REG = rnode_9to10_memcoalesce_param_bitcast_0146_0_stall_out_reg_10_NO_SHIFT_REG;
assign rnode_9to10_memcoalesce_param_bitcast_0146_0_stall_in_reg_10_NO_SHIFT_REG = rnode_9to10_memcoalesce_param_bitcast_0146_0_stall_in_NO_SHIFT_REG;
assign rnode_9to10_memcoalesce_param_bitcast_0146_0_valid_out_NO_SHIFT_REG = rnode_9to10_memcoalesce_param_bitcast_0146_0_valid_out_reg_10_NO_SHIFT_REG;

// Register node:
//  * latency = 8
//  * capacity = 8
 logic rnode_5to13_input_global_id_2_0_valid_out_NO_SHIFT_REG;
 logic rnode_5to13_input_global_id_2_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_5to13_input_global_id_2_0_NO_SHIFT_REG;
 logic rnode_5to13_input_global_id_2_0_reg_13_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_5to13_input_global_id_2_0_reg_13_NO_SHIFT_REG;
 logic rnode_5to13_input_global_id_2_0_valid_out_reg_13_NO_SHIFT_REG;
 logic rnode_5to13_input_global_id_2_0_stall_in_reg_13_NO_SHIFT_REG;
 logic rnode_5to13_input_global_id_2_0_stall_out_reg_13_NO_SHIFT_REG;

acl_data_fifo rnode_5to13_input_global_id_2_0_reg_13_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_5to13_input_global_id_2_0_reg_13_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_5to13_input_global_id_2_0_stall_in_reg_13_NO_SHIFT_REG),
	.valid_out(rnode_5to13_input_global_id_2_0_valid_out_reg_13_NO_SHIFT_REG),
	.stall_out(rnode_5to13_input_global_id_2_0_stall_out_reg_13_NO_SHIFT_REG),
	.data_in(rnode_1to5_input_global_id_2_1_NO_SHIFT_REG),
	.data_out(rnode_5to13_input_global_id_2_0_reg_13_NO_SHIFT_REG)
);

defparam rnode_5to13_input_global_id_2_0_reg_13_fifo.DEPTH = 9;
defparam rnode_5to13_input_global_id_2_0_reg_13_fifo.DATA_WIDTH = 32;
defparam rnode_5to13_input_global_id_2_0_reg_13_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_5to13_input_global_id_2_0_reg_13_fifo.IMPL = "ram_plus_reg";

assign rnode_5to13_input_global_id_2_0_reg_13_inputs_ready_NO_SHIFT_REG = rnode_1to5_input_global_id_2_0_valid_out_1_NO_SHIFT_REG;
assign rnode_1to5_input_global_id_2_0_stall_in_1_NO_SHIFT_REG = rnode_5to13_input_global_id_2_0_stall_out_reg_13_NO_SHIFT_REG;
assign rnode_5to13_input_global_id_2_0_NO_SHIFT_REG = rnode_5to13_input_global_id_2_0_reg_13_NO_SHIFT_REG;
assign rnode_5to13_input_global_id_2_0_stall_in_reg_13_NO_SHIFT_REG = rnode_5to13_input_global_id_2_0_stall_in_NO_SHIFT_REG;
assign rnode_5to13_input_global_id_2_0_valid_out_NO_SHIFT_REG = rnode_5to13_input_global_id_2_0_valid_out_reg_13_NO_SHIFT_REG;

// Register node:
//  * latency = 10
//  * capacity = 10
 logic rnode_2to12_bb1_cmp56_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to12_bb1_cmp56_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to12_bb1_cmp56_0_NO_SHIFT_REG;
 logic rnode_2to12_bb1_cmp56_0_reg_12_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to12_bb1_cmp56_0_reg_12_NO_SHIFT_REG;
 logic rnode_2to12_bb1_cmp56_0_valid_out_reg_12_NO_SHIFT_REG;
 logic rnode_2to12_bb1_cmp56_0_stall_in_reg_12_NO_SHIFT_REG;
 logic rnode_2to12_bb1_cmp56_0_stall_out_reg_12_NO_SHIFT_REG;

acl_data_fifo rnode_2to12_bb1_cmp56_0_reg_12_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to12_bb1_cmp56_0_reg_12_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to12_bb1_cmp56_0_stall_in_reg_12_NO_SHIFT_REG),
	.valid_out(rnode_2to12_bb1_cmp56_0_valid_out_reg_12_NO_SHIFT_REG),
	.stall_out(rnode_2to12_bb1_cmp56_0_stall_out_reg_12_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb1_cmp56_1_NO_SHIFT_REG),
	.data_out(rnode_2to12_bb1_cmp56_0_reg_12_NO_SHIFT_REG)
);

defparam rnode_2to12_bb1_cmp56_0_reg_12_fifo.DEPTH = 11;
defparam rnode_2to12_bb1_cmp56_0_reg_12_fifo.DATA_WIDTH = 1;
defparam rnode_2to12_bb1_cmp56_0_reg_12_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_2to12_bb1_cmp56_0_reg_12_fifo.IMPL = "ram";

assign rnode_2to12_bb1_cmp56_0_reg_12_inputs_ready_NO_SHIFT_REG = rnode_1to2_bb1_cmp56_0_valid_out_1_NO_SHIFT_REG;
assign rnode_1to2_bb1_cmp56_0_stall_in_1_NO_SHIFT_REG = rnode_2to12_bb1_cmp56_0_stall_out_reg_12_NO_SHIFT_REG;
assign rnode_2to12_bb1_cmp56_0_NO_SHIFT_REG = rnode_2to12_bb1_cmp56_0_reg_12_NO_SHIFT_REG;
assign rnode_2to12_bb1_cmp56_0_stall_in_reg_12_NO_SHIFT_REG = rnode_2to12_bb1_cmp56_0_stall_in_NO_SHIFT_REG;
assign rnode_2to12_bb1_cmp56_0_valid_out_NO_SHIFT_REG = rnode_2to12_bb1_cmp56_0_valid_out_reg_12_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb1_var__stall_local;
wire local_bb1_var_;
wire [96:0] rci_rcnode_12to13_rc0_input_global_id_0_0_reg_12;

assign local_bb1_var_ = (rnode_1to2_bb1_cmp56_0_NO_SHIFT_REG & rnode_1to2_bb1_cmp546_0_NO_SHIFT_REG);
assign rci_rcnode_12to13_rc0_input_global_id_0_0_reg_12[31:0] = rcnode_1to12_rc6_input_global_id_0_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_12to13_rc0_input_global_id_0_0_reg_12[63:32] = rcnode_1to12_rc6_input_global_id_0_0_NO_SHIFT_REG[63:32];
assign rci_rcnode_12to13_rc0_input_global_id_0_0_reg_12[95:64] = rcnode_1to12_rc6_input_global_id_0_0_NO_SHIFT_REG[95:64];
assign rci_rcnode_12to13_rc0_input_global_id_0_0_reg_12[96] = rnode_2to12_bb1_cmp56_0_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_12to13_rc0_input_global_id_0_0_valid_out_NO_SHIFT_REG;
 logic rcnode_12to13_rc0_input_global_id_0_0_stall_in_NO_SHIFT_REG;
 logic [96:0] rcnode_12to13_rc0_input_global_id_0_0_NO_SHIFT_REG;
 logic rcnode_12to13_rc0_input_global_id_0_0_reg_13_inputs_ready_NO_SHIFT_REG;
 logic [96:0] rcnode_12to13_rc0_input_global_id_0_0_reg_13_NO_SHIFT_REG;
 logic rcnode_12to13_rc0_input_global_id_0_0_valid_out_reg_13_NO_SHIFT_REG;
 logic rcnode_12to13_rc0_input_global_id_0_0_stall_in_reg_13_NO_SHIFT_REG;
 logic rcnode_12to13_rc0_input_global_id_0_0_stall_out_0_reg_13_IP_NO_SHIFT_REG;
 logic rcnode_12to13_rc0_input_global_id_0_0_stall_out_0_reg_13_NO_SHIFT_REG;

acl_data_fifo rcnode_12to13_rc0_input_global_id_0_0_reg_13_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_12to13_rc0_input_global_id_0_0_reg_13_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_12to13_rc0_input_global_id_0_0_stall_in_reg_13_NO_SHIFT_REG),
	.valid_out(rcnode_12to13_rc0_input_global_id_0_0_valid_out_reg_13_NO_SHIFT_REG),
	.stall_out(rcnode_12to13_rc0_input_global_id_0_0_stall_out_0_reg_13_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_12to13_rc0_input_global_id_0_0_reg_12),
	.data_out(rcnode_12to13_rc0_input_global_id_0_0_reg_13_NO_SHIFT_REG)
);

defparam rcnode_12to13_rc0_input_global_id_0_0_reg_13_fifo.DEPTH = 1;
defparam rcnode_12to13_rc0_input_global_id_0_0_reg_13_fifo.DATA_WIDTH = 97;
defparam rcnode_12to13_rc0_input_global_id_0_0_reg_13_fifo.ALLOW_FULL_WRITE = 1;
defparam rcnode_12to13_rc0_input_global_id_0_0_reg_13_fifo.IMPL = "ll_reg";

assign rcnode_12to13_rc0_input_global_id_0_0_reg_13_inputs_ready_NO_SHIFT_REG = (rnode_2to12_bb1_cmp56_0_valid_out_NO_SHIFT_REG & rcnode_1to12_rc6_input_global_id_0_0_valid_out_NO_SHIFT_REG);
assign rcnode_12to13_rc0_input_global_id_0_0_stall_out_0_reg_13_NO_SHIFT_REG = (~(rcnode_12to13_rc0_input_global_id_0_0_reg_13_inputs_ready_NO_SHIFT_REG) | rcnode_12to13_rc0_input_global_id_0_0_stall_out_0_reg_13_IP_NO_SHIFT_REG);
assign rnode_2to12_bb1_cmp56_0_stall_in_NO_SHIFT_REG = rcnode_12to13_rc0_input_global_id_0_0_stall_out_0_reg_13_NO_SHIFT_REG;
assign rcnode_1to12_rc6_input_global_id_0_0_stall_in_NO_SHIFT_REG = rcnode_12to13_rc0_input_global_id_0_0_stall_out_0_reg_13_NO_SHIFT_REG;
assign rcnode_12to13_rc0_input_global_id_0_0_NO_SHIFT_REG = rcnode_12to13_rc0_input_global_id_0_0_reg_13_NO_SHIFT_REG;
assign rcnode_12to13_rc0_input_global_id_0_0_stall_in_reg_13_NO_SHIFT_REG = rcnode_12to13_rc0_input_global_id_0_0_stall_in_NO_SHIFT_REG;
assign rcnode_12to13_rc0_input_global_id_0_0_valid_out_NO_SHIFT_REG = rcnode_12to13_rc0_input_global_id_0_0_valid_out_reg_13_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb1_var__valid_out_1;
wire local_bb1_var__stall_in_1;
wire local_bb1__phi_decision_xor_valid_out;
wire local_bb1__phi_decision_xor_stall_in;
wire local_bb1__phi_decision_xor_inputs_ready;
wire local_bb1__phi_decision_xor_stall_local;
wire local_bb1__phi_decision_xor;
 reg local_bb1_var__consumed_1_NO_SHIFT_REG;
 reg local_bb1__phi_decision_xor_consumed_0_NO_SHIFT_REG;

assign local_bb1__phi_decision_xor_inputs_ready = (rnode_1to2_bb1_cmp546_0_valid_out_NO_SHIFT_REG & rnode_1to2_bb1_cmp56_0_valid_out_0_NO_SHIFT_REG);
assign local_bb1__phi_decision_xor = (local_bb1_var_ ^ 1'b1);
assign local_bb1__phi_decision_xor_stall_local = ((local_bb1_var__stall_in_1 & ~(local_bb1_var__consumed_1_NO_SHIFT_REG)) | (local_bb1__phi_decision_xor_stall_in & ~(local_bb1__phi_decision_xor_consumed_0_NO_SHIFT_REG)));
assign local_bb1_var__valid_out_1 = (local_bb1__phi_decision_xor_inputs_ready & ~(local_bb1_var__consumed_1_NO_SHIFT_REG));
assign local_bb1__phi_decision_xor_valid_out = (local_bb1__phi_decision_xor_inputs_ready & ~(local_bb1__phi_decision_xor_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_bb1_cmp546_0_stall_in_NO_SHIFT_REG = (local_bb1__phi_decision_xor_stall_local | ~(local_bb1__phi_decision_xor_inputs_ready));
assign rnode_1to2_bb1_cmp56_0_stall_in_0_NO_SHIFT_REG = (local_bb1__phi_decision_xor_stall_local | ~(local_bb1__phi_decision_xor_inputs_ready));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb1_var__consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb1__phi_decision_xor_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb1_var__consumed_1_NO_SHIFT_REG <= (local_bb1__phi_decision_xor_inputs_ready & (local_bb1_var__consumed_1_NO_SHIFT_REG | ~(local_bb1_var__stall_in_1)) & local_bb1__phi_decision_xor_stall_local);
		local_bb1__phi_decision_xor_consumed_0_NO_SHIFT_REG <= (local_bb1__phi_decision_xor_inputs_ready & (local_bb1__phi_decision_xor_consumed_0_NO_SHIFT_REG | ~(local_bb1__phi_decision_xor_stall_in)) & local_bb1__phi_decision_xor_stall_local);
	end
end


// Register node:
//  * latency = 4
//  * capacity = 4
 logic rnode_2to6_bb1_var__0_valid_out_0_NO_SHIFT_REG;
 logic rnode_2to6_bb1_var__0_stall_in_0_NO_SHIFT_REG;
 logic rnode_2to6_bb1_var__0_NO_SHIFT_REG;
 logic rnode_2to6_bb1_var__0_valid_out_1_NO_SHIFT_REG;
 logic rnode_2to6_bb1_var__0_stall_in_1_NO_SHIFT_REG;
 logic rnode_2to6_bb1_var__1_NO_SHIFT_REG;
 logic rnode_2to6_bb1_var__0_reg_6_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to6_bb1_var__0_reg_6_NO_SHIFT_REG;
 logic rnode_2to6_bb1_var__0_valid_out_0_reg_6_NO_SHIFT_REG;
 logic rnode_2to6_bb1_var__0_stall_in_0_reg_6_NO_SHIFT_REG;
 logic rnode_2to6_bb1_var__0_stall_out_reg_6_NO_SHIFT_REG;
 reg rnode_2to6_bb1_var__0_consumed_0_NO_SHIFT_REG;
 reg rnode_2to6_bb1_var__0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_2to6_bb1_var__0_reg_6_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to6_bb1_var__0_reg_6_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to6_bb1_var__0_stall_in_0_reg_6_NO_SHIFT_REG),
	.valid_out(rnode_2to6_bb1_var__0_valid_out_0_reg_6_NO_SHIFT_REG),
	.stall_out(rnode_2to6_bb1_var__0_stall_out_reg_6_NO_SHIFT_REG),
	.data_in(local_bb1_var_),
	.data_out(rnode_2to6_bb1_var__0_reg_6_NO_SHIFT_REG)
);

defparam rnode_2to6_bb1_var__0_reg_6_fifo.DEPTH = 5;
defparam rnode_2to6_bb1_var__0_reg_6_fifo.DATA_WIDTH = 1;
defparam rnode_2to6_bb1_var__0_reg_6_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_2to6_bb1_var__0_reg_6_fifo.IMPL = "ll_reg";

assign rnode_2to6_bb1_var__0_reg_6_inputs_ready_NO_SHIFT_REG = local_bb1_var__valid_out_1;
assign local_bb1_var__stall_in_1 = rnode_2to6_bb1_var__0_stall_out_reg_6_NO_SHIFT_REG;
assign rnode_2to6_bb1_var__0_stall_in_0_reg_6_NO_SHIFT_REG = ((rnode_2to6_bb1_var__0_stall_in_0_NO_SHIFT_REG & ~(rnode_2to6_bb1_var__0_consumed_0_NO_SHIFT_REG)) | (rnode_2to6_bb1_var__0_stall_in_1_NO_SHIFT_REG & ~(rnode_2to6_bb1_var__0_consumed_1_NO_SHIFT_REG)));
assign rnode_2to6_bb1_var__0_valid_out_0_NO_SHIFT_REG = (rnode_2to6_bb1_var__0_valid_out_0_reg_6_NO_SHIFT_REG & ~(rnode_2to6_bb1_var__0_consumed_0_NO_SHIFT_REG));
assign rnode_2to6_bb1_var__0_valid_out_1_NO_SHIFT_REG = (rnode_2to6_bb1_var__0_valid_out_0_reg_6_NO_SHIFT_REG & ~(rnode_2to6_bb1_var__0_consumed_1_NO_SHIFT_REG));
assign rnode_2to6_bb1_var__0_NO_SHIFT_REG = rnode_2to6_bb1_var__0_reg_6_NO_SHIFT_REG;
assign rnode_2to6_bb1_var__1_NO_SHIFT_REG = rnode_2to6_bb1_var__0_reg_6_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_2to6_bb1_var__0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_2to6_bb1_var__0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_2to6_bb1_var__0_consumed_0_NO_SHIFT_REG <= (rnode_2to6_bb1_var__0_valid_out_0_reg_6_NO_SHIFT_REG & (rnode_2to6_bb1_var__0_consumed_0_NO_SHIFT_REG | ~(rnode_2to6_bb1_var__0_stall_in_0_NO_SHIFT_REG)) & rnode_2to6_bb1_var__0_stall_in_0_reg_6_NO_SHIFT_REG);
		rnode_2to6_bb1_var__0_consumed_1_NO_SHIFT_REG <= (rnode_2to6_bb1_var__0_valid_out_0_reg_6_NO_SHIFT_REG & (rnode_2to6_bb1_var__0_consumed_1_NO_SHIFT_REG | ~(rnode_2to6_bb1_var__0_stall_in_1_NO_SHIFT_REG)) & rnode_2to6_bb1_var__0_stall_in_0_reg_6_NO_SHIFT_REG);
	end
end


// This section implements a staging register.
// 
wire rstag_2to2_bb1__phi_decision_xor_valid_out;
wire rstag_2to2_bb1__phi_decision_xor_stall_in;
wire rstag_2to2_bb1__phi_decision_xor_inputs_ready;
wire rstag_2to2_bb1__phi_decision_xor_stall_local;
 reg rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG;
wire rstag_2to2_bb1__phi_decision_xor_combined_valid;
 reg rstag_2to2_bb1__phi_decision_xor_staging_reg_NO_SHIFT_REG;
wire rstag_2to2_bb1__phi_decision_xor;

assign rstag_2to2_bb1__phi_decision_xor_inputs_ready = local_bb1__phi_decision_xor_valid_out;
assign rstag_2to2_bb1__phi_decision_xor = (rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG ? rstag_2to2_bb1__phi_decision_xor_staging_reg_NO_SHIFT_REG : local_bb1__phi_decision_xor);
assign rstag_2to2_bb1__phi_decision_xor_combined_valid = (rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG | rstag_2to2_bb1__phi_decision_xor_inputs_ready);
assign rstag_2to2_bb1__phi_decision_xor_valid_out = rstag_2to2_bb1__phi_decision_xor_combined_valid;
assign rstag_2to2_bb1__phi_decision_xor_stall_local = rstag_2to2_bb1__phi_decision_xor_stall_in;
assign local_bb1__phi_decision_xor_stall_in = (|rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_2to2_bb1__phi_decision_xor_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_2to2_bb1__phi_decision_xor_stall_local)
		begin
			if (~(rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG))
			begin
				rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG <= rstag_2to2_bb1__phi_decision_xor_inputs_ready;
			end
		end
		else
		begin
			rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_2to2_bb1__phi_decision_xor_staging_valid_NO_SHIFT_REG))
		begin
			rstag_2to2_bb1__phi_decision_xor_staging_reg_NO_SHIFT_REG <= local_bb1__phi_decision_xor;
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb1_ld_memcoalesce_param_load_0143_inputs_ready;
 reg local_bb1_ld_memcoalesce_param_load_0143_valid_out_NO_SHIFT_REG;
wire local_bb1_ld_memcoalesce_param_load_0143_stall_in;
wire local_bb1_ld_memcoalesce_param_load_0143_output_regs_ready;
wire local_bb1_ld_memcoalesce_param_load_0143_fu_stall_out;
wire local_bb1_ld_memcoalesce_param_load_0143_fu_valid_out;
wire [511:0] local_bb1_ld_memcoalesce_param_load_0143_lsu_dataout;
 reg [511:0] local_bb1_ld_memcoalesce_param_load_0143_NO_SHIFT_REG;
wire local_bb1_ld_memcoalesce_param_load_0143_causedstall;

lsu_top lsu_local_bb1_ld_memcoalesce_param_load_0143 (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb1_ld_memcoalesce_param_load_0143_fu_stall_out),
	.i_valid(local_bb1_ld_memcoalesce_param_load_0143_inputs_ready),
	.i_address((input_wii_memcoalesce_param_bitcast_0142 & 64'hFFFFFFFFFFFFFC00)),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(rstag_2to2_bb1__phi_decision_xor),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb1_ld_memcoalesce_param_load_0143_output_regs_ready)),
	.o_valid(local_bb1_ld_memcoalesce_param_load_0143_fu_valid_out),
	.o_readdata(local_bb1_ld_memcoalesce_param_load_0143_lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb1_ld_memcoalesce_param_load_0143_active),
	.avm_address(avm_local_bb1_ld_memcoalesce_param_load_0143_address),
	.avm_read(avm_local_bb1_ld_memcoalesce_param_load_0143_read),
	.avm_enable(avm_local_bb1_ld_memcoalesce_param_load_0143_enable),
	.avm_readdata(avm_local_bb1_ld_memcoalesce_param_load_0143_readdata),
	.avm_write(avm_local_bb1_ld_memcoalesce_param_load_0143_write),
	.avm_writeack(avm_local_bb1_ld_memcoalesce_param_load_0143_writeack),
	.avm_burstcount(avm_local_bb1_ld_memcoalesce_param_load_0143_burstcount),
	.avm_writedata(avm_local_bb1_ld_memcoalesce_param_load_0143_writedata),
	.avm_byteenable(avm_local_bb1_ld_memcoalesce_param_load_0143_byteenable),
	.avm_waitrequest(avm_local_bb1_ld_memcoalesce_param_load_0143_waitrequest),
	.avm_readdatavalid(avm_local_bb1_ld_memcoalesce_param_load_0143_readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.AWIDTH = 32;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.WIDTH_BYTES = 64;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.MWIDTH_BYTES = 64;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.ALIGNMENT_BYTES = 64;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.READ = 1;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.ATOMIC = 0;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.WIDTH = 512;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.MWIDTH = 512;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.ATOMIC_WIDTH = 3;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.KERNEL_SIDE_MEM_LATENCY = 3;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.MEMORY_SIDE_MEM_LATENCY = 118;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.USE_WRITE_ACK = 0;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.NUMBER_BANKS = 1;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.USEINPUTFIFO = 0;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.USECACHING = 1;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.CACHESIZE = 128;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.USEOUTPUTFIFO = 1;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.ADDRSPACE = 1;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0143.STYLE = "SEMI-STREAMING";

assign local_bb1_ld_memcoalesce_param_load_0143_inputs_ready = (rnode_1to2_memcoalesce_param_bitcast_0142_0_valid_out_NO_SHIFT_REG & rstag_2to2_bb1__phi_decision_xor_valid_out);
assign local_bb1_ld_memcoalesce_param_load_0143_output_regs_ready = (&(~(local_bb1_ld_memcoalesce_param_load_0143_valid_out_NO_SHIFT_REG) | ~(local_bb1_ld_memcoalesce_param_load_0143_stall_in)));
assign rnode_1to2_memcoalesce_param_bitcast_0142_0_stall_in_NO_SHIFT_REG = (local_bb1_ld_memcoalesce_param_load_0143_fu_stall_out | ~(local_bb1_ld_memcoalesce_param_load_0143_inputs_ready));
assign rstag_2to2_bb1__phi_decision_xor_stall_in = (local_bb1_ld_memcoalesce_param_load_0143_fu_stall_out | ~(local_bb1_ld_memcoalesce_param_load_0143_inputs_ready));
assign local_bb1_ld_memcoalesce_param_load_0143_causedstall = (local_bb1_ld_memcoalesce_param_load_0143_inputs_ready && (local_bb1_ld_memcoalesce_param_load_0143_fu_stall_out && !(~(local_bb1_ld_memcoalesce_param_load_0143_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb1_ld_memcoalesce_param_load_0143_NO_SHIFT_REG <= 'x;
		local_bb1_ld_memcoalesce_param_load_0143_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb1_ld_memcoalesce_param_load_0143_output_regs_ready)
		begin
			local_bb1_ld_memcoalesce_param_load_0143_NO_SHIFT_REG <= local_bb1_ld_memcoalesce_param_load_0143_lsu_dataout;
			local_bb1_ld_memcoalesce_param_load_0143_valid_out_NO_SHIFT_REG <= local_bb1_ld_memcoalesce_param_load_0143_fu_valid_out;
		end
		else
		begin
			if (~(local_bb1_ld_memcoalesce_param_load_0143_stall_in))
			begin
				local_bb1_ld_memcoalesce_param_load_0143_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_5to5_bb1_ld_memcoalesce_param_load_0143_valid_out_0;
wire rstag_5to5_bb1_ld_memcoalesce_param_load_0143_stall_in_0;
wire rstag_5to5_bb1_ld_memcoalesce_param_load_0143_valid_out_1;
wire rstag_5to5_bb1_ld_memcoalesce_param_load_0143_stall_in_1;
wire rstag_5to5_bb1_ld_memcoalesce_param_load_0143_inputs_ready;
wire rstag_5to5_bb1_ld_memcoalesce_param_load_0143_stall_local;
 reg rstag_5to5_bb1_ld_memcoalesce_param_load_0143_staging_valid_NO_SHIFT_REG;
wire rstag_5to5_bb1_ld_memcoalesce_param_load_0143_combined_valid;
 reg [511:0] rstag_5to5_bb1_ld_memcoalesce_param_load_0143_staging_reg_NO_SHIFT_REG;
wire [511:0] rstag_5to5_bb1_ld_memcoalesce_param_load_0143;
 reg rstag_5to5_bb1_ld_memcoalesce_param_load_0143_consumed_0_NO_SHIFT_REG;
 reg rstag_5to5_bb1_ld_memcoalesce_param_load_0143_consumed_1_NO_SHIFT_REG;

assign rstag_5to5_bb1_ld_memcoalesce_param_load_0143_inputs_ready = local_bb1_ld_memcoalesce_param_load_0143_valid_out_NO_SHIFT_REG;
assign rstag_5to5_bb1_ld_memcoalesce_param_load_0143 = (rstag_5to5_bb1_ld_memcoalesce_param_load_0143_staging_valid_NO_SHIFT_REG ? rstag_5to5_bb1_ld_memcoalesce_param_load_0143_staging_reg_NO_SHIFT_REG : local_bb1_ld_memcoalesce_param_load_0143_NO_SHIFT_REG);
assign rstag_5to5_bb1_ld_memcoalesce_param_load_0143_combined_valid = (rstag_5to5_bb1_ld_memcoalesce_param_load_0143_staging_valid_NO_SHIFT_REG | rstag_5to5_bb1_ld_memcoalesce_param_load_0143_inputs_ready);
assign rstag_5to5_bb1_ld_memcoalesce_param_load_0143_stall_local = ((rstag_5to5_bb1_ld_memcoalesce_param_load_0143_stall_in_0 & ~(rstag_5to5_bb1_ld_memcoalesce_param_load_0143_consumed_0_NO_SHIFT_REG)) | (rstag_5to5_bb1_ld_memcoalesce_param_load_0143_stall_in_1 & ~(rstag_5to5_bb1_ld_memcoalesce_param_load_0143_consumed_1_NO_SHIFT_REG)));
assign rstag_5to5_bb1_ld_memcoalesce_param_load_0143_valid_out_0 = (rstag_5to5_bb1_ld_memcoalesce_param_load_0143_combined_valid & ~(rstag_5to5_bb1_ld_memcoalesce_param_load_0143_consumed_0_NO_SHIFT_REG));
assign rstag_5to5_bb1_ld_memcoalesce_param_load_0143_valid_out_1 = (rstag_5to5_bb1_ld_memcoalesce_param_load_0143_combined_valid & ~(rstag_5to5_bb1_ld_memcoalesce_param_load_0143_consumed_1_NO_SHIFT_REG));
assign local_bb1_ld_memcoalesce_param_load_0143_stall_in = (|rstag_5to5_bb1_ld_memcoalesce_param_load_0143_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_5to5_bb1_ld_memcoalesce_param_load_0143_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_5to5_bb1_ld_memcoalesce_param_load_0143_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_5to5_bb1_ld_memcoalesce_param_load_0143_stall_local)
		begin
			if (~(rstag_5to5_bb1_ld_memcoalesce_param_load_0143_staging_valid_NO_SHIFT_REG))
			begin
				rstag_5to5_bb1_ld_memcoalesce_param_load_0143_staging_valid_NO_SHIFT_REG <= rstag_5to5_bb1_ld_memcoalesce_param_load_0143_inputs_ready;
			end
		end
		else
		begin
			rstag_5to5_bb1_ld_memcoalesce_param_load_0143_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_5to5_bb1_ld_memcoalesce_param_load_0143_staging_valid_NO_SHIFT_REG))
		begin
			rstag_5to5_bb1_ld_memcoalesce_param_load_0143_staging_reg_NO_SHIFT_REG <= local_bb1_ld_memcoalesce_param_load_0143_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_5to5_bb1_ld_memcoalesce_param_load_0143_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_5to5_bb1_ld_memcoalesce_param_load_0143_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_5to5_bb1_ld_memcoalesce_param_load_0143_consumed_0_NO_SHIFT_REG <= (rstag_5to5_bb1_ld_memcoalesce_param_load_0143_combined_valid & (rstag_5to5_bb1_ld_memcoalesce_param_load_0143_consumed_0_NO_SHIFT_REG | ~(rstag_5to5_bb1_ld_memcoalesce_param_load_0143_stall_in_0)) & rstag_5to5_bb1_ld_memcoalesce_param_load_0143_stall_local);
		rstag_5to5_bb1_ld_memcoalesce_param_load_0143_consumed_1_NO_SHIFT_REG <= (rstag_5to5_bb1_ld_memcoalesce_param_load_0143_combined_valid & (rstag_5to5_bb1_ld_memcoalesce_param_load_0143_consumed_1_NO_SHIFT_REG | ~(rstag_5to5_bb1_ld_memcoalesce_param_load_0143_stall_in_1)) & rstag_5to5_bb1_ld_memcoalesce_param_load_0143_stall_local);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1_memcoalesce_param_extrValue_3_stall_local;
wire [31:0] local_bb1_memcoalesce_param_extrValue_3;

assign local_bb1_memcoalesce_param_extrValue_3[31:0] = rstag_5to5_bb1_ld_memcoalesce_param_load_0143[191:160];

// This section implements an unregistered operation.
// 
wire local_bb1_memcoalesce_param_extrValue_6_stall_local;
wire [31:0] local_bb1_memcoalesce_param_extrValue_6;

assign local_bb1_memcoalesce_param_extrValue_6[31:0] = rstag_5to5_bb1_ld_memcoalesce_param_load_0143[351:320];

// This section implements an unregistered operation.
// 
wire local_bb1_memcoalesce_param_extrValue_3_valid_out_1;
wire local_bb1_memcoalesce_param_extrValue_3_stall_in_1;
wire local_bb1_cmp1430_valid_out;
wire local_bb1_cmp1430_stall_in;
wire local_bb1_cmp1430_inputs_ready;
wire local_bb1_cmp1430_stall_local;
wire local_bb1_cmp1430;
 reg local_bb1_memcoalesce_param_extrValue_3_consumed_1_NO_SHIFT_REG;
 reg local_bb1_cmp1430_consumed_0_NO_SHIFT_REG;

assign local_bb1_cmp1430_inputs_ready = rstag_5to5_bb1_ld_memcoalesce_param_load_0143_valid_out_0;
assign local_bb1_cmp1430 = ($signed(local_bb1_memcoalesce_param_extrValue_3) > $signed(32'h0));
assign local_bb1_cmp1430_stall_local = ((local_bb1_memcoalesce_param_extrValue_3_stall_in_1 & ~(local_bb1_memcoalesce_param_extrValue_3_consumed_1_NO_SHIFT_REG)) | (local_bb1_cmp1430_stall_in & ~(local_bb1_cmp1430_consumed_0_NO_SHIFT_REG)));
assign local_bb1_memcoalesce_param_extrValue_3_valid_out_1 = (local_bb1_cmp1430_inputs_ready & ~(local_bb1_memcoalesce_param_extrValue_3_consumed_1_NO_SHIFT_REG));
assign local_bb1_cmp1430_valid_out = (local_bb1_cmp1430_inputs_ready & ~(local_bb1_cmp1430_consumed_0_NO_SHIFT_REG));
assign rstag_5to5_bb1_ld_memcoalesce_param_load_0143_stall_in_0 = (|local_bb1_cmp1430_stall_local);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb1_memcoalesce_param_extrValue_3_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb1_cmp1430_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb1_memcoalesce_param_extrValue_3_consumed_1_NO_SHIFT_REG <= (local_bb1_cmp1430_inputs_ready & (local_bb1_memcoalesce_param_extrValue_3_consumed_1_NO_SHIFT_REG | ~(local_bb1_memcoalesce_param_extrValue_3_stall_in_1)) & local_bb1_cmp1430_stall_local);
		local_bb1_cmp1430_consumed_0_NO_SHIFT_REG <= (local_bb1_cmp1430_inputs_ready & (local_bb1_cmp1430_consumed_0_NO_SHIFT_REG | ~(local_bb1_cmp1430_stall_in)) & local_bb1_cmp1430_stall_local);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1_cmp1138_valid_out;
wire local_bb1_cmp1138_stall_in;
wire local_bb1_memcoalesce_param_extrValue_6_valid_out_1;
wire local_bb1_memcoalesce_param_extrValue_6_stall_in_1;
wire local_bb1_cmp1138_inputs_ready;
wire local_bb1_cmp1138_stall_local;
wire local_bb1_cmp1138;
 reg local_bb1_cmp1138_consumed_0_NO_SHIFT_REG;
 reg local_bb1_memcoalesce_param_extrValue_6_consumed_1_NO_SHIFT_REG;

assign local_bb1_cmp1138_inputs_ready = (rnode_1to5_input_global_id_2_0_valid_out_0_NO_SHIFT_REG & rstag_5to5_bb1_ld_memcoalesce_param_load_0143_valid_out_1);
assign local_bb1_cmp1138 = ($signed(local_bb1_memcoalesce_param_extrValue_6) > $signed(rnode_1to5_input_global_id_2_0_NO_SHIFT_REG));
assign local_bb1_cmp1138_stall_local = ((local_bb1_cmp1138_stall_in & ~(local_bb1_cmp1138_consumed_0_NO_SHIFT_REG)) | (local_bb1_memcoalesce_param_extrValue_6_stall_in_1 & ~(local_bb1_memcoalesce_param_extrValue_6_consumed_1_NO_SHIFT_REG)));
assign local_bb1_cmp1138_valid_out = (local_bb1_cmp1138_inputs_ready & ~(local_bb1_cmp1138_consumed_0_NO_SHIFT_REG));
assign local_bb1_memcoalesce_param_extrValue_6_valid_out_1 = (local_bb1_cmp1138_inputs_ready & ~(local_bb1_memcoalesce_param_extrValue_6_consumed_1_NO_SHIFT_REG));
assign rnode_1to5_input_global_id_2_0_stall_in_0_NO_SHIFT_REG = (local_bb1_cmp1138_stall_local | ~(local_bb1_cmp1138_inputs_ready));
assign rstag_5to5_bb1_ld_memcoalesce_param_load_0143_stall_in_1 = (local_bb1_cmp1138_stall_local | ~(local_bb1_cmp1138_inputs_ready));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb1_cmp1138_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb1_memcoalesce_param_extrValue_6_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb1_cmp1138_consumed_0_NO_SHIFT_REG <= (local_bb1_cmp1138_inputs_ready & (local_bb1_cmp1138_consumed_0_NO_SHIFT_REG | ~(local_bb1_cmp1138_stall_in)) & local_bb1_cmp1138_stall_local);
		local_bb1_memcoalesce_param_extrValue_6_consumed_1_NO_SHIFT_REG <= (local_bb1_cmp1138_inputs_ready & (local_bb1_memcoalesce_param_extrValue_6_consumed_1_NO_SHIFT_REG | ~(local_bb1_memcoalesce_param_extrValue_6_stall_in_1)) & local_bb1_cmp1138_stall_local);
	end
end


// Register node:
//  * latency = 8
//  * capacity = 8
 logic rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_valid_out_NO_SHIFT_REG;
 logic rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_NO_SHIFT_REG;
 logic rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_reg_13_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_reg_13_NO_SHIFT_REG;
 logic rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_valid_out_reg_13_NO_SHIFT_REG;
 logic rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_stall_in_reg_13_NO_SHIFT_REG;
 logic rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_stall_out_reg_13_NO_SHIFT_REG;

acl_data_fifo rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_reg_13_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_reg_13_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_stall_in_reg_13_NO_SHIFT_REG),
	.valid_out(rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_valid_out_reg_13_NO_SHIFT_REG),
	.stall_out(rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_stall_out_reg_13_NO_SHIFT_REG),
	.data_in(local_bb1_memcoalesce_param_extrValue_3),
	.data_out(rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_reg_13_NO_SHIFT_REG)
);

defparam rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_reg_13_fifo.DEPTH = 9;
defparam rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_reg_13_fifo.DATA_WIDTH = 32;
defparam rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_reg_13_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_reg_13_fifo.IMPL = "ram_plus_reg";

assign rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_reg_13_inputs_ready_NO_SHIFT_REG = local_bb1_memcoalesce_param_extrValue_3_valid_out_1;
assign local_bb1_memcoalesce_param_extrValue_3_stall_in_1 = rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_stall_out_reg_13_NO_SHIFT_REG;
assign rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_NO_SHIFT_REG = rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_reg_13_NO_SHIFT_REG;
assign rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_stall_in_reg_13_NO_SHIFT_REG = rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_stall_in_NO_SHIFT_REG;
assign rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_valid_out_NO_SHIFT_REG = rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_valid_out_reg_13_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_5to6_bb1_cmp1430_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1430_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1430_0_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1430_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1430_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1430_1_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1430_0_reg_6_inputs_ready_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1430_0_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1430_0_valid_out_0_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1430_0_stall_in_0_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1430_0_stall_out_reg_6_NO_SHIFT_REG;
 reg rnode_5to6_bb1_cmp1430_0_consumed_0_NO_SHIFT_REG;
 reg rnode_5to6_bb1_cmp1430_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_5to6_bb1_cmp1430_0_reg_6_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_5to6_bb1_cmp1430_0_reg_6_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_5to6_bb1_cmp1430_0_stall_in_0_reg_6_NO_SHIFT_REG),
	.valid_out(rnode_5to6_bb1_cmp1430_0_valid_out_0_reg_6_NO_SHIFT_REG),
	.stall_out(rnode_5to6_bb1_cmp1430_0_stall_out_reg_6_NO_SHIFT_REG),
	.data_in(local_bb1_cmp1430),
	.data_out(rnode_5to6_bb1_cmp1430_0_reg_6_NO_SHIFT_REG)
);

defparam rnode_5to6_bb1_cmp1430_0_reg_6_fifo.DEPTH = 2;
defparam rnode_5to6_bb1_cmp1430_0_reg_6_fifo.DATA_WIDTH = 1;
defparam rnode_5to6_bb1_cmp1430_0_reg_6_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_5to6_bb1_cmp1430_0_reg_6_fifo.IMPL = "ll_reg";

assign rnode_5to6_bb1_cmp1430_0_reg_6_inputs_ready_NO_SHIFT_REG = local_bb1_cmp1430_valid_out;
assign local_bb1_cmp1430_stall_in = rnode_5to6_bb1_cmp1430_0_stall_out_reg_6_NO_SHIFT_REG;
assign rnode_5to6_bb1_cmp1430_0_stall_in_0_reg_6_NO_SHIFT_REG = ((rnode_5to6_bb1_cmp1430_0_stall_in_0_NO_SHIFT_REG & ~(rnode_5to6_bb1_cmp1430_0_consumed_0_NO_SHIFT_REG)) | (rnode_5to6_bb1_cmp1430_0_stall_in_1_NO_SHIFT_REG & ~(rnode_5to6_bb1_cmp1430_0_consumed_1_NO_SHIFT_REG)));
assign rnode_5to6_bb1_cmp1430_0_valid_out_0_NO_SHIFT_REG = (rnode_5to6_bb1_cmp1430_0_valid_out_0_reg_6_NO_SHIFT_REG & ~(rnode_5to6_bb1_cmp1430_0_consumed_0_NO_SHIFT_REG));
assign rnode_5to6_bb1_cmp1430_0_valid_out_1_NO_SHIFT_REG = (rnode_5to6_bb1_cmp1430_0_valid_out_0_reg_6_NO_SHIFT_REG & ~(rnode_5to6_bb1_cmp1430_0_consumed_1_NO_SHIFT_REG));
assign rnode_5to6_bb1_cmp1430_0_NO_SHIFT_REG = rnode_5to6_bb1_cmp1430_0_reg_6_NO_SHIFT_REG;
assign rnode_5to6_bb1_cmp1430_1_NO_SHIFT_REG = rnode_5to6_bb1_cmp1430_0_reg_6_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_5to6_bb1_cmp1430_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_5to6_bb1_cmp1430_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_5to6_bb1_cmp1430_0_consumed_0_NO_SHIFT_REG <= (rnode_5to6_bb1_cmp1430_0_valid_out_0_reg_6_NO_SHIFT_REG & (rnode_5to6_bb1_cmp1430_0_consumed_0_NO_SHIFT_REG | ~(rnode_5to6_bb1_cmp1430_0_stall_in_0_NO_SHIFT_REG)) & rnode_5to6_bb1_cmp1430_0_stall_in_0_reg_6_NO_SHIFT_REG);
		rnode_5to6_bb1_cmp1430_0_consumed_1_NO_SHIFT_REG <= (rnode_5to6_bb1_cmp1430_0_valid_out_0_reg_6_NO_SHIFT_REG & (rnode_5to6_bb1_cmp1430_0_consumed_1_NO_SHIFT_REG | ~(rnode_5to6_bb1_cmp1430_0_stall_in_1_NO_SHIFT_REG)) & rnode_5to6_bb1_cmp1430_0_stall_in_0_reg_6_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_5to6_bb1_cmp1138_0_valid_out_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1138_0_stall_in_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1138_0_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1138_0_reg_6_inputs_ready_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1138_0_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1138_0_valid_out_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1138_0_stall_in_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb1_cmp1138_0_stall_out_reg_6_NO_SHIFT_REG;

acl_data_fifo rnode_5to6_bb1_cmp1138_0_reg_6_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_5to6_bb1_cmp1138_0_reg_6_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_5to6_bb1_cmp1138_0_stall_in_reg_6_NO_SHIFT_REG),
	.valid_out(rnode_5to6_bb1_cmp1138_0_valid_out_reg_6_NO_SHIFT_REG),
	.stall_out(rnode_5to6_bb1_cmp1138_0_stall_out_reg_6_NO_SHIFT_REG),
	.data_in(local_bb1_cmp1138),
	.data_out(rnode_5to6_bb1_cmp1138_0_reg_6_NO_SHIFT_REG)
);

defparam rnode_5to6_bb1_cmp1138_0_reg_6_fifo.DEPTH = 2;
defparam rnode_5to6_bb1_cmp1138_0_reg_6_fifo.DATA_WIDTH = 1;
defparam rnode_5to6_bb1_cmp1138_0_reg_6_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_5to6_bb1_cmp1138_0_reg_6_fifo.IMPL = "ll_reg";

assign rnode_5to6_bb1_cmp1138_0_reg_6_inputs_ready_NO_SHIFT_REG = local_bb1_cmp1138_valid_out;
assign local_bb1_cmp1138_stall_in = rnode_5to6_bb1_cmp1138_0_stall_out_reg_6_NO_SHIFT_REG;
assign rnode_5to6_bb1_cmp1138_0_NO_SHIFT_REG = rnode_5to6_bb1_cmp1138_0_reg_6_NO_SHIFT_REG;
assign rnode_5to6_bb1_cmp1138_0_stall_in_reg_6_NO_SHIFT_REG = rnode_5to6_bb1_cmp1138_0_stall_in_NO_SHIFT_REG;
assign rnode_5to6_bb1_cmp1138_0_valid_out_NO_SHIFT_REG = rnode_5to6_bb1_cmp1138_0_valid_out_reg_6_NO_SHIFT_REG;

// Register node:
//  * latency = 8
//  * capacity = 8
 logic rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_valid_out_NO_SHIFT_REG;
 logic rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG;
 logic rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_reg_13_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_reg_13_NO_SHIFT_REG;
 logic rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_valid_out_reg_13_NO_SHIFT_REG;
 logic rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_stall_in_reg_13_NO_SHIFT_REG;
 logic rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_stall_out_reg_13_NO_SHIFT_REG;

acl_data_fifo rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_reg_13_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_reg_13_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_stall_in_reg_13_NO_SHIFT_REG),
	.valid_out(rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_valid_out_reg_13_NO_SHIFT_REG),
	.stall_out(rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_stall_out_reg_13_NO_SHIFT_REG),
	.data_in(local_bb1_memcoalesce_param_extrValue_6),
	.data_out(rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_reg_13_NO_SHIFT_REG)
);

defparam rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_reg_13_fifo.DEPTH = 9;
defparam rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_reg_13_fifo.DATA_WIDTH = 32;
defparam rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_reg_13_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_reg_13_fifo.IMPL = "ram_plus_reg";

assign rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_reg_13_inputs_ready_NO_SHIFT_REG = local_bb1_memcoalesce_param_extrValue_6_valid_out_1;
assign local_bb1_memcoalesce_param_extrValue_6_stall_in_1 = rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_stall_out_reg_13_NO_SHIFT_REG;
assign rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG = rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_reg_13_NO_SHIFT_REG;
assign rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_stall_in_reg_13_NO_SHIFT_REG = rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_stall_in_NO_SHIFT_REG;
assign rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_valid_out_NO_SHIFT_REG = rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_valid_out_reg_13_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb1_cmp1430_NEG_stall_local;
wire local_bb1_cmp1430_NEG;
wire [1:0] rci_rcnode_6to13_rc1_bb1_var__0_reg_6;

assign local_bb1_cmp1430_NEG = (rnode_5to6_bb1_cmp1430_0_NO_SHIFT_REG ^ 1'b1);
assign rci_rcnode_6to13_rc1_bb1_var__0_reg_6[0] = rnode_2to6_bb1_var__1_NO_SHIFT_REG;
assign rci_rcnode_6to13_rc1_bb1_var__0_reg_6[1] = rnode_5to6_bb1_cmp1430_1_NO_SHIFT_REG;

// Register node:
//  * latency = 7
//  * capacity = 7
 logic rcnode_6to13_rc1_bb1_var__0_valid_out_NO_SHIFT_REG;
 logic rcnode_6to13_rc1_bb1_var__0_stall_in_NO_SHIFT_REG;
 logic [1:0] rcnode_6to13_rc1_bb1_var__0_NO_SHIFT_REG;
 logic rcnode_6to13_rc1_bb1_var__0_reg_13_inputs_ready_NO_SHIFT_REG;
 logic [1:0] rcnode_6to13_rc1_bb1_var__0_reg_13_NO_SHIFT_REG;
 logic rcnode_6to13_rc1_bb1_var__0_valid_out_reg_13_NO_SHIFT_REG;
 logic rcnode_6to13_rc1_bb1_var__0_stall_in_reg_13_NO_SHIFT_REG;
 logic rcnode_6to13_rc1_bb1_var__0_stall_out_0_reg_13_IP_NO_SHIFT_REG;
 logic rcnode_6to13_rc1_bb1_var__0_stall_out_0_reg_13_NO_SHIFT_REG;

acl_data_fifo rcnode_6to13_rc1_bb1_var__0_reg_13_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_6to13_rc1_bb1_var__0_reg_13_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_6to13_rc1_bb1_var__0_stall_in_reg_13_NO_SHIFT_REG),
	.valid_out(rcnode_6to13_rc1_bb1_var__0_valid_out_reg_13_NO_SHIFT_REG),
	.stall_out(rcnode_6to13_rc1_bb1_var__0_stall_out_0_reg_13_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_6to13_rc1_bb1_var__0_reg_6),
	.data_out(rcnode_6to13_rc1_bb1_var__0_reg_13_NO_SHIFT_REG)
);

defparam rcnode_6to13_rc1_bb1_var__0_reg_13_fifo.DEPTH = 8;
defparam rcnode_6to13_rc1_bb1_var__0_reg_13_fifo.DATA_WIDTH = 2;
defparam rcnode_6to13_rc1_bb1_var__0_reg_13_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_6to13_rc1_bb1_var__0_reg_13_fifo.IMPL = "ll_reg";

assign rcnode_6to13_rc1_bb1_var__0_reg_13_inputs_ready_NO_SHIFT_REG = (rnode_2to6_bb1_var__0_valid_out_1_NO_SHIFT_REG & rnode_5to6_bb1_cmp1430_0_valid_out_1_NO_SHIFT_REG);
assign rcnode_6to13_rc1_bb1_var__0_stall_out_0_reg_13_NO_SHIFT_REG = (~(rcnode_6to13_rc1_bb1_var__0_reg_13_inputs_ready_NO_SHIFT_REG) | rcnode_6to13_rc1_bb1_var__0_stall_out_0_reg_13_IP_NO_SHIFT_REG);
assign rnode_2to6_bb1_var__0_stall_in_1_NO_SHIFT_REG = rcnode_6to13_rc1_bb1_var__0_stall_out_0_reg_13_NO_SHIFT_REG;
assign rnode_5to6_bb1_cmp1430_0_stall_in_1_NO_SHIFT_REG = rcnode_6to13_rc1_bb1_var__0_stall_out_0_reg_13_NO_SHIFT_REG;
assign rcnode_6to13_rc1_bb1_var__0_NO_SHIFT_REG = rcnode_6to13_rc1_bb1_var__0_reg_13_NO_SHIFT_REG;
assign rcnode_6to13_rc1_bb1_var__0_stall_in_reg_13_NO_SHIFT_REG = rcnode_6to13_rc1_bb1_var__0_stall_in_NO_SHIFT_REG;
assign rcnode_6to13_rc1_bb1_var__0_valid_out_NO_SHIFT_REG = rcnode_6to13_rc1_bb1_var__0_valid_out_reg_13_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb1_var__u0_stall_local;
wire local_bb1_var__u0;

assign local_bb1_var__u0 = (rnode_2to6_bb1_var__0_NO_SHIFT_REG & rnode_5to6_bb1_cmp1138_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb1__phi_decision_xor118_stall_local;
wire local_bb1__phi_decision_xor118;

assign local_bb1__phi_decision_xor118 = (local_bb1_var__u0 ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb1_var__u0_valid_out_1;
wire local_bb1_var__u0_stall_in_1;
wire local_bb1__phi_decision_xor118_valid_out_1;
wire local_bb1__phi_decision_xor118_stall_in_1;
wire local_bb1__phi_decision_xor118_or_valid_out;
wire local_bb1__phi_decision_xor118_or_stall_in;
wire local_bb1_cmp1430_NEG_valid_out_1;
wire local_bb1_cmp1430_NEG_stall_in_1;
wire local_bb1__phi_decision_xor118_or_inputs_ready;
wire local_bb1__phi_decision_xor118_or_stall_local;
wire local_bb1__phi_decision_xor118_or;
 reg local_bb1_var__u0_consumed_1_NO_SHIFT_REG;
 reg local_bb1__phi_decision_xor118_consumed_1_NO_SHIFT_REG;
 reg local_bb1__phi_decision_xor118_or_consumed_0_NO_SHIFT_REG;
 reg local_bb1_cmp1430_NEG_consumed_1_NO_SHIFT_REG;

assign local_bb1__phi_decision_xor118_or_inputs_ready = (rnode_5to6_bb1_cmp1138_0_valid_out_NO_SHIFT_REG & rnode_2to6_bb1_var__0_valid_out_0_NO_SHIFT_REG & rnode_5to6_bb1_cmp1430_0_valid_out_0_NO_SHIFT_REG);
assign local_bb1__phi_decision_xor118_or = (local_bb1_cmp1430_NEG | local_bb1__phi_decision_xor118);
assign local_bb1__phi_decision_xor118_or_stall_local = ((local_bb1_var__u0_stall_in_1 & ~(local_bb1_var__u0_consumed_1_NO_SHIFT_REG)) | (local_bb1__phi_decision_xor118_stall_in_1 & ~(local_bb1__phi_decision_xor118_consumed_1_NO_SHIFT_REG)) | (local_bb1__phi_decision_xor118_or_stall_in & ~(local_bb1__phi_decision_xor118_or_consumed_0_NO_SHIFT_REG)) | (local_bb1_cmp1430_NEG_stall_in_1 & ~(local_bb1_cmp1430_NEG_consumed_1_NO_SHIFT_REG)));
assign local_bb1_var__u0_valid_out_1 = (local_bb1__phi_decision_xor118_or_inputs_ready & ~(local_bb1_var__u0_consumed_1_NO_SHIFT_REG));
assign local_bb1__phi_decision_xor118_valid_out_1 = (local_bb1__phi_decision_xor118_or_inputs_ready & ~(local_bb1__phi_decision_xor118_consumed_1_NO_SHIFT_REG));
assign local_bb1__phi_decision_xor118_or_valid_out = (local_bb1__phi_decision_xor118_or_inputs_ready & ~(local_bb1__phi_decision_xor118_or_consumed_0_NO_SHIFT_REG));
assign local_bb1_cmp1430_NEG_valid_out_1 = (local_bb1__phi_decision_xor118_or_inputs_ready & ~(local_bb1_cmp1430_NEG_consumed_1_NO_SHIFT_REG));
assign rnode_5to6_bb1_cmp1138_0_stall_in_NO_SHIFT_REG = (local_bb1__phi_decision_xor118_or_stall_local | ~(local_bb1__phi_decision_xor118_or_inputs_ready));
assign rnode_2to6_bb1_var__0_stall_in_0_NO_SHIFT_REG = (local_bb1__phi_decision_xor118_or_stall_local | ~(local_bb1__phi_decision_xor118_or_inputs_ready));
assign rnode_5to6_bb1_cmp1430_0_stall_in_0_NO_SHIFT_REG = (local_bb1__phi_decision_xor118_or_stall_local | ~(local_bb1__phi_decision_xor118_or_inputs_ready));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb1_var__u0_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb1__phi_decision_xor118_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb1__phi_decision_xor118_or_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb1_cmp1430_NEG_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb1_var__u0_consumed_1_NO_SHIFT_REG <= (local_bb1__phi_decision_xor118_or_inputs_ready & (local_bb1_var__u0_consumed_1_NO_SHIFT_REG | ~(local_bb1_var__u0_stall_in_1)) & local_bb1__phi_decision_xor118_or_stall_local);
		local_bb1__phi_decision_xor118_consumed_1_NO_SHIFT_REG <= (local_bb1__phi_decision_xor118_or_inputs_ready & (local_bb1__phi_decision_xor118_consumed_1_NO_SHIFT_REG | ~(local_bb1__phi_decision_xor118_stall_in_1)) & local_bb1__phi_decision_xor118_or_stall_local);
		local_bb1__phi_decision_xor118_or_consumed_0_NO_SHIFT_REG <= (local_bb1__phi_decision_xor118_or_inputs_ready & (local_bb1__phi_decision_xor118_or_consumed_0_NO_SHIFT_REG | ~(local_bb1__phi_decision_xor118_or_stall_in)) & local_bb1__phi_decision_xor118_or_stall_local);
		local_bb1_cmp1430_NEG_consumed_1_NO_SHIFT_REG <= (local_bb1__phi_decision_xor118_or_inputs_ready & (local_bb1_cmp1430_NEG_consumed_1_NO_SHIFT_REG | ~(local_bb1_cmp1430_NEG_stall_in_1)) & local_bb1__phi_decision_xor118_or_stall_local);
	end
end


// Register node:
//  * latency = 7
//  * capacity = 7
 logic rnode_6to13_bb1_var__u0_0_valid_out_NO_SHIFT_REG;
 logic rnode_6to13_bb1_var__u0_0_stall_in_NO_SHIFT_REG;
 logic rnode_6to13_bb1_var__u0_0_NO_SHIFT_REG;
 logic rnode_6to13_bb1_var__u0_0_reg_13_inputs_ready_NO_SHIFT_REG;
 logic rnode_6to13_bb1_var__u0_0_reg_13_NO_SHIFT_REG;
 logic rnode_6to13_bb1_var__u0_0_valid_out_reg_13_NO_SHIFT_REG;
 logic rnode_6to13_bb1_var__u0_0_stall_in_reg_13_NO_SHIFT_REG;
 logic rnode_6to13_bb1_var__u0_0_stall_out_reg_13_NO_SHIFT_REG;

acl_data_fifo rnode_6to13_bb1_var__u0_0_reg_13_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_6to13_bb1_var__u0_0_reg_13_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_6to13_bb1_var__u0_0_stall_in_reg_13_NO_SHIFT_REG),
	.valid_out(rnode_6to13_bb1_var__u0_0_valid_out_reg_13_NO_SHIFT_REG),
	.stall_out(rnode_6to13_bb1_var__u0_0_stall_out_reg_13_NO_SHIFT_REG),
	.data_in(local_bb1_var__u0),
	.data_out(rnode_6to13_bb1_var__u0_0_reg_13_NO_SHIFT_REG)
);

defparam rnode_6to13_bb1_var__u0_0_reg_13_fifo.DEPTH = 8;
defparam rnode_6to13_bb1_var__u0_0_reg_13_fifo.DATA_WIDTH = 1;
defparam rnode_6to13_bb1_var__u0_0_reg_13_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_6to13_bb1_var__u0_0_reg_13_fifo.IMPL = "ll_reg";

assign rnode_6to13_bb1_var__u0_0_reg_13_inputs_ready_NO_SHIFT_REG = local_bb1_var__u0_valid_out_1;
assign local_bb1_var__u0_stall_in_1 = rnode_6to13_bb1_var__u0_0_stall_out_reg_13_NO_SHIFT_REG;
assign rnode_6to13_bb1_var__u0_0_NO_SHIFT_REG = rnode_6to13_bb1_var__u0_0_reg_13_NO_SHIFT_REG;
assign rnode_6to13_bb1_var__u0_0_stall_in_reg_13_NO_SHIFT_REG = rnode_6to13_bb1_var__u0_0_stall_in_NO_SHIFT_REG;
assign rnode_6to13_bb1_var__u0_0_valid_out_NO_SHIFT_REG = rnode_6to13_bb1_var__u0_0_valid_out_reg_13_NO_SHIFT_REG;

// Register node:
//  * latency = 4
//  * capacity = 4
 logic rnode_6to10_bb1__phi_decision_xor118_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_6to10_bb1__phi_decision_xor118_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_6to10_bb1__phi_decision_xor118_0_NO_SHIFT_REG;
 logic rnode_6to10_bb1__phi_decision_xor118_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_6to10_bb1__phi_decision_xor118_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_6to10_bb1__phi_decision_xor118_1_NO_SHIFT_REG;
 logic rnode_6to10_bb1__phi_decision_xor118_0_reg_10_inputs_ready_NO_SHIFT_REG;
 logic rnode_6to10_bb1__phi_decision_xor118_0_reg_10_NO_SHIFT_REG;
 logic rnode_6to10_bb1__phi_decision_xor118_0_valid_out_0_reg_10_NO_SHIFT_REG;
 logic rnode_6to10_bb1__phi_decision_xor118_0_stall_in_0_reg_10_NO_SHIFT_REG;
 logic rnode_6to10_bb1__phi_decision_xor118_0_stall_out_reg_10_NO_SHIFT_REG;
 reg rnode_6to10_bb1__phi_decision_xor118_0_consumed_0_NO_SHIFT_REG;
 reg rnode_6to10_bb1__phi_decision_xor118_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_6to10_bb1__phi_decision_xor118_0_reg_10_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_6to10_bb1__phi_decision_xor118_0_reg_10_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_6to10_bb1__phi_decision_xor118_0_stall_in_0_reg_10_NO_SHIFT_REG),
	.valid_out(rnode_6to10_bb1__phi_decision_xor118_0_valid_out_0_reg_10_NO_SHIFT_REG),
	.stall_out(rnode_6to10_bb1__phi_decision_xor118_0_stall_out_reg_10_NO_SHIFT_REG),
	.data_in(local_bb1__phi_decision_xor118),
	.data_out(rnode_6to10_bb1__phi_decision_xor118_0_reg_10_NO_SHIFT_REG)
);

defparam rnode_6to10_bb1__phi_decision_xor118_0_reg_10_fifo.DEPTH = 5;
defparam rnode_6to10_bb1__phi_decision_xor118_0_reg_10_fifo.DATA_WIDTH = 1;
defparam rnode_6to10_bb1__phi_decision_xor118_0_reg_10_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_6to10_bb1__phi_decision_xor118_0_reg_10_fifo.IMPL = "ll_reg";

assign rnode_6to10_bb1__phi_decision_xor118_0_reg_10_inputs_ready_NO_SHIFT_REG = local_bb1__phi_decision_xor118_valid_out_1;
assign local_bb1__phi_decision_xor118_stall_in_1 = rnode_6to10_bb1__phi_decision_xor118_0_stall_out_reg_10_NO_SHIFT_REG;
assign rnode_6to10_bb1__phi_decision_xor118_0_stall_in_0_reg_10_NO_SHIFT_REG = ((rnode_6to10_bb1__phi_decision_xor118_0_stall_in_0_NO_SHIFT_REG & ~(rnode_6to10_bb1__phi_decision_xor118_0_consumed_0_NO_SHIFT_REG)) | (rnode_6to10_bb1__phi_decision_xor118_0_stall_in_1_NO_SHIFT_REG & ~(rnode_6to10_bb1__phi_decision_xor118_0_consumed_1_NO_SHIFT_REG)));
assign rnode_6to10_bb1__phi_decision_xor118_0_valid_out_0_NO_SHIFT_REG = (rnode_6to10_bb1__phi_decision_xor118_0_valid_out_0_reg_10_NO_SHIFT_REG & ~(rnode_6to10_bb1__phi_decision_xor118_0_consumed_0_NO_SHIFT_REG));
assign rnode_6to10_bb1__phi_decision_xor118_0_valid_out_1_NO_SHIFT_REG = (rnode_6to10_bb1__phi_decision_xor118_0_valid_out_0_reg_10_NO_SHIFT_REG & ~(rnode_6to10_bb1__phi_decision_xor118_0_consumed_1_NO_SHIFT_REG));
assign rnode_6to10_bb1__phi_decision_xor118_0_NO_SHIFT_REG = rnode_6to10_bb1__phi_decision_xor118_0_reg_10_NO_SHIFT_REG;
assign rnode_6to10_bb1__phi_decision_xor118_1_NO_SHIFT_REG = rnode_6to10_bb1__phi_decision_xor118_0_reg_10_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_6to10_bb1__phi_decision_xor118_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_6to10_bb1__phi_decision_xor118_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_6to10_bb1__phi_decision_xor118_0_consumed_0_NO_SHIFT_REG <= (rnode_6to10_bb1__phi_decision_xor118_0_valid_out_0_reg_10_NO_SHIFT_REG & (rnode_6to10_bb1__phi_decision_xor118_0_consumed_0_NO_SHIFT_REG | ~(rnode_6to10_bb1__phi_decision_xor118_0_stall_in_0_NO_SHIFT_REG)) & rnode_6to10_bb1__phi_decision_xor118_0_stall_in_0_reg_10_NO_SHIFT_REG);
		rnode_6to10_bb1__phi_decision_xor118_0_consumed_1_NO_SHIFT_REG <= (rnode_6to10_bb1__phi_decision_xor118_0_valid_out_0_reg_10_NO_SHIFT_REG & (rnode_6to10_bb1__phi_decision_xor118_0_consumed_1_NO_SHIFT_REG | ~(rnode_6to10_bb1__phi_decision_xor118_0_stall_in_1_NO_SHIFT_REG)) & rnode_6to10_bb1__phi_decision_xor118_0_stall_in_0_reg_10_NO_SHIFT_REG);
	end
end


// This section implements a staging register.
// 
wire rstag_6to6_bb1__phi_decision_xor118_or_valid_out;
wire rstag_6to6_bb1__phi_decision_xor118_or_stall_in;
wire rstag_6to6_bb1__phi_decision_xor118_or_inputs_ready;
wire rstag_6to6_bb1__phi_decision_xor118_or_stall_local;
 reg rstag_6to6_bb1__phi_decision_xor118_or_staging_valid_NO_SHIFT_REG;
wire rstag_6to6_bb1__phi_decision_xor118_or_combined_valid;
 reg rstag_6to6_bb1__phi_decision_xor118_or_staging_reg_NO_SHIFT_REG;
wire rstag_6to6_bb1__phi_decision_xor118_or;

assign rstag_6to6_bb1__phi_decision_xor118_or_inputs_ready = local_bb1__phi_decision_xor118_or_valid_out;
assign rstag_6to6_bb1__phi_decision_xor118_or = (rstag_6to6_bb1__phi_decision_xor118_or_staging_valid_NO_SHIFT_REG ? rstag_6to6_bb1__phi_decision_xor118_or_staging_reg_NO_SHIFT_REG : local_bb1__phi_decision_xor118_or);
assign rstag_6to6_bb1__phi_decision_xor118_or_combined_valid = (rstag_6to6_bb1__phi_decision_xor118_or_staging_valid_NO_SHIFT_REG | rstag_6to6_bb1__phi_decision_xor118_or_inputs_ready);
assign rstag_6to6_bb1__phi_decision_xor118_or_valid_out = rstag_6to6_bb1__phi_decision_xor118_or_combined_valid;
assign rstag_6to6_bb1__phi_decision_xor118_or_stall_local = rstag_6to6_bb1__phi_decision_xor118_or_stall_in;
assign local_bb1__phi_decision_xor118_or_stall_in = (|rstag_6to6_bb1__phi_decision_xor118_or_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_6to6_bb1__phi_decision_xor118_or_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_6to6_bb1__phi_decision_xor118_or_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_6to6_bb1__phi_decision_xor118_or_stall_local)
		begin
			if (~(rstag_6to6_bb1__phi_decision_xor118_or_staging_valid_NO_SHIFT_REG))
			begin
				rstag_6to6_bb1__phi_decision_xor118_or_staging_valid_NO_SHIFT_REG <= rstag_6to6_bb1__phi_decision_xor118_or_inputs_ready;
			end
		end
		else
		begin
			rstag_6to6_bb1__phi_decision_xor118_or_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_6to6_bb1__phi_decision_xor118_or_staging_valid_NO_SHIFT_REG))
		begin
			rstag_6to6_bb1__phi_decision_xor118_or_staging_reg_NO_SHIFT_REG <= local_bb1__phi_decision_xor118_or;
		end
	end
end


// Register node:
//  * latency = 4
//  * capacity = 4
 logic rnode_6to10_bb1_cmp1430_NEG_0_valid_out_NO_SHIFT_REG;
 logic rnode_6to10_bb1_cmp1430_NEG_0_stall_in_NO_SHIFT_REG;
 logic rnode_6to10_bb1_cmp1430_NEG_0_NO_SHIFT_REG;
 logic rnode_6to10_bb1_cmp1430_NEG_0_reg_10_inputs_ready_NO_SHIFT_REG;
 logic rnode_6to10_bb1_cmp1430_NEG_0_reg_10_NO_SHIFT_REG;
 logic rnode_6to10_bb1_cmp1430_NEG_0_valid_out_reg_10_NO_SHIFT_REG;
 logic rnode_6to10_bb1_cmp1430_NEG_0_stall_in_reg_10_NO_SHIFT_REG;
 logic rnode_6to10_bb1_cmp1430_NEG_0_stall_out_reg_10_NO_SHIFT_REG;

acl_data_fifo rnode_6to10_bb1_cmp1430_NEG_0_reg_10_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_6to10_bb1_cmp1430_NEG_0_reg_10_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_6to10_bb1_cmp1430_NEG_0_stall_in_reg_10_NO_SHIFT_REG),
	.valid_out(rnode_6to10_bb1_cmp1430_NEG_0_valid_out_reg_10_NO_SHIFT_REG),
	.stall_out(rnode_6to10_bb1_cmp1430_NEG_0_stall_out_reg_10_NO_SHIFT_REG),
	.data_in(local_bb1_cmp1430_NEG),
	.data_out(rnode_6to10_bb1_cmp1430_NEG_0_reg_10_NO_SHIFT_REG)
);

defparam rnode_6to10_bb1_cmp1430_NEG_0_reg_10_fifo.DEPTH = 5;
defparam rnode_6to10_bb1_cmp1430_NEG_0_reg_10_fifo.DATA_WIDTH = 1;
defparam rnode_6to10_bb1_cmp1430_NEG_0_reg_10_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_6to10_bb1_cmp1430_NEG_0_reg_10_fifo.IMPL = "ll_reg";

assign rnode_6to10_bb1_cmp1430_NEG_0_reg_10_inputs_ready_NO_SHIFT_REG = local_bb1_cmp1430_NEG_valid_out_1;
assign local_bb1_cmp1430_NEG_stall_in_1 = rnode_6to10_bb1_cmp1430_NEG_0_stall_out_reg_10_NO_SHIFT_REG;
assign rnode_6to10_bb1_cmp1430_NEG_0_NO_SHIFT_REG = rnode_6to10_bb1_cmp1430_NEG_0_reg_10_NO_SHIFT_REG;
assign rnode_6to10_bb1_cmp1430_NEG_0_stall_in_reg_10_NO_SHIFT_REG = rnode_6to10_bb1_cmp1430_NEG_0_stall_in_NO_SHIFT_REG;
assign rnode_6to10_bb1_cmp1430_NEG_0_valid_out_NO_SHIFT_REG = rnode_6to10_bb1_cmp1430_NEG_0_valid_out_reg_10_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb1_ld__inputs_ready;
 reg local_bb1_ld__valid_out_NO_SHIFT_REG;
wire local_bb1_ld__stall_in;
wire local_bb1_ld__output_regs_ready;
wire local_bb1_ld__fu_stall_out;
wire local_bb1_ld__fu_valid_out;
wire [31:0] local_bb1_ld__lsu_dataout;
 reg [31:0] local_bb1_ld__NO_SHIFT_REG;
wire local_bb1_ld__causedstall;

lsu_top lsu_local_bb1_ld_ (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb1_ld__fu_stall_out),
	.i_valid(local_bb1_ld__inputs_ready),
	.i_address(((input_wii_kernelSize17 & 64'hFFFFFFFFFFFFFC08) | 64'h8)),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(rstag_6to6_bb1__phi_decision_xor118_or),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb1_ld__output_regs_ready)),
	.o_valid(local_bb1_ld__fu_valid_out),
	.o_readdata(local_bb1_ld__lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb1_ld__active),
	.avm_address(avm_local_bb1_ld__address),
	.avm_read(avm_local_bb1_ld__read),
	.avm_enable(avm_local_bb1_ld__enable),
	.avm_readdata(avm_local_bb1_ld__readdata),
	.avm_write(avm_local_bb1_ld__write),
	.avm_writeack(avm_local_bb1_ld__writeack),
	.avm_burstcount(avm_local_bb1_ld__burstcount),
	.avm_writedata(avm_local_bb1_ld__writedata),
	.avm_byteenable(avm_local_bb1_ld__byteenable),
	.avm_waitrequest(avm_local_bb1_ld__waitrequest),
	.avm_readdatavalid(avm_local_bb1_ld__readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb1_ld_.AWIDTH = 32;
defparam lsu_local_bb1_ld_.WIDTH_BYTES = 4;
defparam lsu_local_bb1_ld_.MWIDTH_BYTES = 64;
defparam lsu_local_bb1_ld_.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb1_ld_.ALIGNMENT_BYTES = 8;
defparam lsu_local_bb1_ld_.READ = 1;
defparam lsu_local_bb1_ld_.ATOMIC = 0;
defparam lsu_local_bb1_ld_.WIDTH = 32;
defparam lsu_local_bb1_ld_.MWIDTH = 512;
defparam lsu_local_bb1_ld_.ATOMIC_WIDTH = 3;
defparam lsu_local_bb1_ld_.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb1_ld_.KERNEL_SIDE_MEM_LATENCY = 3;
defparam lsu_local_bb1_ld_.MEMORY_SIDE_MEM_LATENCY = 71;
defparam lsu_local_bb1_ld_.USE_WRITE_ACK = 0;
defparam lsu_local_bb1_ld_.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb1_ld_.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb1_ld_.NUMBER_BANKS = 1;
defparam lsu_local_bb1_ld_.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb1_ld_.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb1_ld_.USEINPUTFIFO = 0;
defparam lsu_local_bb1_ld_.USECACHING = 1;
defparam lsu_local_bb1_ld_.CACHESIZE = 128;
defparam lsu_local_bb1_ld_.USEOUTPUTFIFO = 1;
defparam lsu_local_bb1_ld_.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb1_ld_.ADDRSPACE = 1;
defparam lsu_local_bb1_ld_.STYLE = "SEMI-STREAMING";

assign local_bb1_ld__inputs_ready = (rnode_1to6_kernelSize17_0_valid_out_NO_SHIFT_REG & rstag_6to6_bb1__phi_decision_xor118_or_valid_out);
assign local_bb1_ld__output_regs_ready = (&(~(local_bb1_ld__valid_out_NO_SHIFT_REG) | ~(local_bb1_ld__stall_in)));
assign rnode_1to6_kernelSize17_0_stall_in_NO_SHIFT_REG = (local_bb1_ld__fu_stall_out | ~(local_bb1_ld__inputs_ready));
assign rstag_6to6_bb1__phi_decision_xor118_or_stall_in = (local_bb1_ld__fu_stall_out | ~(local_bb1_ld__inputs_ready));
assign local_bb1_ld__causedstall = (local_bb1_ld__inputs_ready && (local_bb1_ld__fu_stall_out && !(~(local_bb1_ld__output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb1_ld__NO_SHIFT_REG <= 'x;
		local_bb1_ld__valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb1_ld__output_regs_ready)
		begin
			local_bb1_ld__NO_SHIFT_REG <= local_bb1_ld__lsu_dataout;
			local_bb1_ld__valid_out_NO_SHIFT_REG <= local_bb1_ld__fu_valid_out;
		end
		else
		begin
			if (~(local_bb1_ld__stall_in))
			begin
				local_bb1_ld__valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 0
//  * capacity = 1
 logic rnode_9to9_bb1_ld__0_valid_out_0_NO_SHIFT_REG;
 logic rnode_9to9_bb1_ld__0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_9to9_bb1_ld__0_NO_SHIFT_REG;
 logic rnode_9to9_bb1_ld__0_valid_out_1_NO_SHIFT_REG;
 logic rnode_9to9_bb1_ld__0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_9to9_bb1_ld__1_NO_SHIFT_REG;
 logic rnode_9to9_bb1_ld__0_reg_9_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_9to9_bb1_ld__0_reg_9_NO_SHIFT_REG;
 logic rnode_9to9_bb1_ld__0_valid_out_0_reg_9_NO_SHIFT_REG;
 logic rnode_9to9_bb1_ld__0_stall_in_0_reg_9_NO_SHIFT_REG;
 logic rnode_9to9_bb1_ld__0_stall_out_reg_9_NO_SHIFT_REG;
 reg rnode_9to9_bb1_ld__0_consumed_0_NO_SHIFT_REG;
 reg rnode_9to9_bb1_ld__0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_9to9_bb1_ld__0_reg_9_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_9to9_bb1_ld__0_reg_9_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_9to9_bb1_ld__0_stall_in_0_reg_9_NO_SHIFT_REG),
	.valid_out(rnode_9to9_bb1_ld__0_valid_out_0_reg_9_NO_SHIFT_REG),
	.stall_out(rnode_9to9_bb1_ld__0_stall_out_reg_9_NO_SHIFT_REG),
	.data_in(local_bb1_ld__NO_SHIFT_REG),
	.data_out(rnode_9to9_bb1_ld__0_reg_9_NO_SHIFT_REG)
);

defparam rnode_9to9_bb1_ld__0_reg_9_fifo.DEPTH = 2;
defparam rnode_9to9_bb1_ld__0_reg_9_fifo.DATA_WIDTH = 32;
defparam rnode_9to9_bb1_ld__0_reg_9_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_9to9_bb1_ld__0_reg_9_fifo.IMPL = "zl_reg";

assign rnode_9to9_bb1_ld__0_reg_9_inputs_ready_NO_SHIFT_REG = local_bb1_ld__valid_out_NO_SHIFT_REG;
assign local_bb1_ld__stall_in = rnode_9to9_bb1_ld__0_stall_out_reg_9_NO_SHIFT_REG;
assign rnode_9to9_bb1_ld__0_stall_in_0_reg_9_NO_SHIFT_REG = ((rnode_9to9_bb1_ld__0_stall_in_0_NO_SHIFT_REG & ~(rnode_9to9_bb1_ld__0_consumed_0_NO_SHIFT_REG)) | (rnode_9to9_bb1_ld__0_stall_in_1_NO_SHIFT_REG & ~(rnode_9to9_bb1_ld__0_consumed_1_NO_SHIFT_REG)));
assign rnode_9to9_bb1_ld__0_valid_out_0_NO_SHIFT_REG = (rnode_9to9_bb1_ld__0_valid_out_0_reg_9_NO_SHIFT_REG & ~(rnode_9to9_bb1_ld__0_consumed_0_NO_SHIFT_REG));
assign rnode_9to9_bb1_ld__0_valid_out_1_NO_SHIFT_REG = (rnode_9to9_bb1_ld__0_valid_out_0_reg_9_NO_SHIFT_REG & ~(rnode_9to9_bb1_ld__0_consumed_1_NO_SHIFT_REG));
assign rnode_9to9_bb1_ld__0_NO_SHIFT_REG = rnode_9to9_bb1_ld__0_reg_9_NO_SHIFT_REG;
assign rnode_9to9_bb1_ld__1_NO_SHIFT_REG = rnode_9to9_bb1_ld__0_reg_9_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_9to9_bb1_ld__0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_9to9_bb1_ld__0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_9to9_bb1_ld__0_consumed_0_NO_SHIFT_REG <= (rnode_9to9_bb1_ld__0_valid_out_0_reg_9_NO_SHIFT_REG & (rnode_9to9_bb1_ld__0_consumed_0_NO_SHIFT_REG | ~(rnode_9to9_bb1_ld__0_stall_in_0_NO_SHIFT_REG)) & rnode_9to9_bb1_ld__0_stall_in_0_reg_9_NO_SHIFT_REG);
		rnode_9to9_bb1_ld__0_consumed_1_NO_SHIFT_REG <= (rnode_9to9_bb1_ld__0_valid_out_0_reg_9_NO_SHIFT_REG & (rnode_9to9_bb1_ld__0_consumed_1_NO_SHIFT_REG | ~(rnode_9to9_bb1_ld__0_stall_in_1_NO_SHIFT_REG)) & rnode_9to9_bb1_ld__0_stall_in_0_reg_9_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 4
//  * capacity = 4
 logic rnode_9to13_bb1_ld__0_valid_out_NO_SHIFT_REG;
 logic rnode_9to13_bb1_ld__0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_9to13_bb1_ld__0_NO_SHIFT_REG;
 logic rnode_9to13_bb1_ld__0_reg_13_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_9to13_bb1_ld__0_reg_13_NO_SHIFT_REG;
 logic rnode_9to13_bb1_ld__0_valid_out_reg_13_NO_SHIFT_REG;
 logic rnode_9to13_bb1_ld__0_stall_in_reg_13_NO_SHIFT_REG;
 logic rnode_9to13_bb1_ld__0_stall_out_reg_13_NO_SHIFT_REG;

acl_data_fifo rnode_9to13_bb1_ld__0_reg_13_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_9to13_bb1_ld__0_reg_13_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_9to13_bb1_ld__0_stall_in_reg_13_NO_SHIFT_REG),
	.valid_out(rnode_9to13_bb1_ld__0_valid_out_reg_13_NO_SHIFT_REG),
	.stall_out(rnode_9to13_bb1_ld__0_stall_out_reg_13_NO_SHIFT_REG),
	.data_in(rnode_9to9_bb1_ld__0_NO_SHIFT_REG),
	.data_out(rnode_9to13_bb1_ld__0_reg_13_NO_SHIFT_REG)
);

defparam rnode_9to13_bb1_ld__0_reg_13_fifo.DEPTH = 5;
defparam rnode_9to13_bb1_ld__0_reg_13_fifo.DATA_WIDTH = 32;
defparam rnode_9to13_bb1_ld__0_reg_13_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_9to13_bb1_ld__0_reg_13_fifo.IMPL = "ll_reg";

assign rnode_9to13_bb1_ld__0_reg_13_inputs_ready_NO_SHIFT_REG = rnode_9to9_bb1_ld__0_valid_out_0_NO_SHIFT_REG;
assign rnode_9to9_bb1_ld__0_stall_in_0_NO_SHIFT_REG = rnode_9to13_bb1_ld__0_stall_out_reg_13_NO_SHIFT_REG;
assign rnode_9to13_bb1_ld__0_NO_SHIFT_REG = rnode_9to13_bb1_ld__0_reg_13_NO_SHIFT_REG;
assign rnode_9to13_bb1_ld__0_stall_in_reg_13_NO_SHIFT_REG = rnode_9to13_bb1_ld__0_stall_in_NO_SHIFT_REG;
assign rnode_9to13_bb1_ld__0_valid_out_NO_SHIFT_REG = rnode_9to13_bb1_ld__0_valid_out_reg_13_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb1_cmp1824_valid_out;
wire local_bb1_cmp1824_stall_in;
wire local_bb1_cmp1824_inputs_ready;
wire local_bb1_cmp1824_stall_local;
wire local_bb1_cmp1824;

assign local_bb1_cmp1824_inputs_ready = rnode_9to9_bb1_ld__0_valid_out_1_NO_SHIFT_REG;
assign local_bb1_cmp1824 = ($signed(rnode_9to9_bb1_ld__1_NO_SHIFT_REG) > $signed(32'h0));
assign local_bb1_cmp1824_valid_out = local_bb1_cmp1824_inputs_ready;
assign local_bb1_cmp1824_stall_local = local_bb1_cmp1824_stall_in;
assign rnode_9to9_bb1_ld__0_stall_in_1_NO_SHIFT_REG = (|local_bb1_cmp1824_stall_local);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_9to10_bb1_cmp1824_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_9to10_bb1_cmp1824_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_9to10_bb1_cmp1824_0_NO_SHIFT_REG;
 logic rnode_9to10_bb1_cmp1824_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_9to10_bb1_cmp1824_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_9to10_bb1_cmp1824_1_NO_SHIFT_REG;
 logic rnode_9to10_bb1_cmp1824_0_reg_10_inputs_ready_NO_SHIFT_REG;
 logic rnode_9to10_bb1_cmp1824_0_reg_10_NO_SHIFT_REG;
 logic rnode_9to10_bb1_cmp1824_0_valid_out_0_reg_10_NO_SHIFT_REG;
 logic rnode_9to10_bb1_cmp1824_0_stall_in_0_reg_10_NO_SHIFT_REG;
 logic rnode_9to10_bb1_cmp1824_0_stall_out_reg_10_NO_SHIFT_REG;
 reg rnode_9to10_bb1_cmp1824_0_consumed_0_NO_SHIFT_REG;
 reg rnode_9to10_bb1_cmp1824_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_9to10_bb1_cmp1824_0_reg_10_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_9to10_bb1_cmp1824_0_reg_10_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_9to10_bb1_cmp1824_0_stall_in_0_reg_10_NO_SHIFT_REG),
	.valid_out(rnode_9to10_bb1_cmp1824_0_valid_out_0_reg_10_NO_SHIFT_REG),
	.stall_out(rnode_9to10_bb1_cmp1824_0_stall_out_reg_10_NO_SHIFT_REG),
	.data_in(local_bb1_cmp1824),
	.data_out(rnode_9to10_bb1_cmp1824_0_reg_10_NO_SHIFT_REG)
);

defparam rnode_9to10_bb1_cmp1824_0_reg_10_fifo.DEPTH = 1;
defparam rnode_9to10_bb1_cmp1824_0_reg_10_fifo.DATA_WIDTH = 1;
defparam rnode_9to10_bb1_cmp1824_0_reg_10_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_9to10_bb1_cmp1824_0_reg_10_fifo.IMPL = "ll_reg";

assign rnode_9to10_bb1_cmp1824_0_reg_10_inputs_ready_NO_SHIFT_REG = local_bb1_cmp1824_valid_out;
assign local_bb1_cmp1824_stall_in = rnode_9to10_bb1_cmp1824_0_stall_out_reg_10_NO_SHIFT_REG;
assign rnode_9to10_bb1_cmp1824_0_stall_in_0_reg_10_NO_SHIFT_REG = ((rnode_9to10_bb1_cmp1824_0_stall_in_0_NO_SHIFT_REG & ~(rnode_9to10_bb1_cmp1824_0_consumed_0_NO_SHIFT_REG)) | (rnode_9to10_bb1_cmp1824_0_stall_in_1_NO_SHIFT_REG & ~(rnode_9to10_bb1_cmp1824_0_consumed_1_NO_SHIFT_REG)));
assign rnode_9to10_bb1_cmp1824_0_valid_out_0_NO_SHIFT_REG = (rnode_9to10_bb1_cmp1824_0_valid_out_0_reg_10_NO_SHIFT_REG & ~(rnode_9to10_bb1_cmp1824_0_consumed_0_NO_SHIFT_REG));
assign rnode_9to10_bb1_cmp1824_0_valid_out_1_NO_SHIFT_REG = (rnode_9to10_bb1_cmp1824_0_valid_out_0_reg_10_NO_SHIFT_REG & ~(rnode_9to10_bb1_cmp1824_0_consumed_1_NO_SHIFT_REG));
assign rnode_9to10_bb1_cmp1824_0_NO_SHIFT_REG = rnode_9to10_bb1_cmp1824_0_reg_10_NO_SHIFT_REG;
assign rnode_9to10_bb1_cmp1824_1_NO_SHIFT_REG = rnode_9to10_bb1_cmp1824_0_reg_10_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_9to10_bb1_cmp1824_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_9to10_bb1_cmp1824_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_9to10_bb1_cmp1824_0_consumed_0_NO_SHIFT_REG <= (rnode_9to10_bb1_cmp1824_0_valid_out_0_reg_10_NO_SHIFT_REG & (rnode_9to10_bb1_cmp1824_0_consumed_0_NO_SHIFT_REG | ~(rnode_9to10_bb1_cmp1824_0_stall_in_0_NO_SHIFT_REG)) & rnode_9to10_bb1_cmp1824_0_stall_in_0_reg_10_NO_SHIFT_REG);
		rnode_9to10_bb1_cmp1824_0_consumed_1_NO_SHIFT_REG <= (rnode_9to10_bb1_cmp1824_0_valid_out_0_reg_10_NO_SHIFT_REG & (rnode_9to10_bb1_cmp1824_0_consumed_1_NO_SHIFT_REG | ~(rnode_9to10_bb1_cmp1824_0_stall_in_1_NO_SHIFT_REG)) & rnode_9to10_bb1_cmp1824_0_stall_in_0_reg_10_NO_SHIFT_REG);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1_cmp1824_NEG_stall_local;
wire local_bb1_cmp1824_NEG;
wire [1:0] rci_rcnode_10to13_rc1_bb1_cmp1824_0_reg_10;

assign local_bb1_cmp1824_NEG = (rnode_9to10_bb1_cmp1824_0_NO_SHIFT_REG ^ 1'b1);
assign rci_rcnode_10to13_rc1_bb1_cmp1824_0_reg_10[0] = rnode_9to10_bb1_cmp1824_1_NO_SHIFT_REG;
assign rci_rcnode_10to13_rc1_bb1_cmp1824_0_reg_10[1] = rnode_6to10_bb1__phi_decision_xor118_1_NO_SHIFT_REG;

// Register node:
//  * latency = 3
//  * capacity = 3
 logic rcnode_10to13_rc1_bb1_cmp1824_0_valid_out_NO_SHIFT_REG;
 logic rcnode_10to13_rc1_bb1_cmp1824_0_stall_in_NO_SHIFT_REG;
 logic [1:0] rcnode_10to13_rc1_bb1_cmp1824_0_NO_SHIFT_REG;
 logic rcnode_10to13_rc1_bb1_cmp1824_0_reg_13_inputs_ready_NO_SHIFT_REG;
 logic [1:0] rcnode_10to13_rc1_bb1_cmp1824_0_reg_13_NO_SHIFT_REG;
 logic rcnode_10to13_rc1_bb1_cmp1824_0_valid_out_reg_13_NO_SHIFT_REG;
 logic rcnode_10to13_rc1_bb1_cmp1824_0_stall_in_reg_13_NO_SHIFT_REG;
 logic rcnode_10to13_rc1_bb1_cmp1824_0_stall_out_0_reg_13_IP_NO_SHIFT_REG;
 logic rcnode_10to13_rc1_bb1_cmp1824_0_stall_out_0_reg_13_NO_SHIFT_REG;

acl_data_fifo rcnode_10to13_rc1_bb1_cmp1824_0_reg_13_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_10to13_rc1_bb1_cmp1824_0_reg_13_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_10to13_rc1_bb1_cmp1824_0_stall_in_reg_13_NO_SHIFT_REG),
	.valid_out(rcnode_10to13_rc1_bb1_cmp1824_0_valid_out_reg_13_NO_SHIFT_REG),
	.stall_out(rcnode_10to13_rc1_bb1_cmp1824_0_stall_out_0_reg_13_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_10to13_rc1_bb1_cmp1824_0_reg_10),
	.data_out(rcnode_10to13_rc1_bb1_cmp1824_0_reg_13_NO_SHIFT_REG)
);

defparam rcnode_10to13_rc1_bb1_cmp1824_0_reg_13_fifo.DEPTH = 4;
defparam rcnode_10to13_rc1_bb1_cmp1824_0_reg_13_fifo.DATA_WIDTH = 2;
defparam rcnode_10to13_rc1_bb1_cmp1824_0_reg_13_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_10to13_rc1_bb1_cmp1824_0_reg_13_fifo.IMPL = "ll_reg";

assign rcnode_10to13_rc1_bb1_cmp1824_0_reg_13_inputs_ready_NO_SHIFT_REG = (rnode_9to10_bb1_cmp1824_0_valid_out_1_NO_SHIFT_REG & rnode_6to10_bb1__phi_decision_xor118_0_valid_out_1_NO_SHIFT_REG);
assign rcnode_10to13_rc1_bb1_cmp1824_0_stall_out_0_reg_13_NO_SHIFT_REG = (~(rcnode_10to13_rc1_bb1_cmp1824_0_reg_13_inputs_ready_NO_SHIFT_REG) | rcnode_10to13_rc1_bb1_cmp1824_0_stall_out_0_reg_13_IP_NO_SHIFT_REG);
assign rnode_9to10_bb1_cmp1824_0_stall_in_1_NO_SHIFT_REG = rcnode_10to13_rc1_bb1_cmp1824_0_stall_out_0_reg_13_NO_SHIFT_REG;
assign rnode_6to10_bb1__phi_decision_xor118_0_stall_in_1_NO_SHIFT_REG = rcnode_10to13_rc1_bb1_cmp1824_0_stall_out_0_reg_13_NO_SHIFT_REG;
assign rcnode_10to13_rc1_bb1_cmp1824_0_NO_SHIFT_REG = rcnode_10to13_rc1_bb1_cmp1824_0_reg_13_NO_SHIFT_REG;
assign rcnode_10to13_rc1_bb1_cmp1824_0_stall_in_reg_13_NO_SHIFT_REG = rcnode_10to13_rc1_bb1_cmp1824_0_stall_in_NO_SHIFT_REG;
assign rcnode_10to13_rc1_bb1_cmp1824_0_valid_out_NO_SHIFT_REG = rcnode_10to13_rc1_bb1_cmp1824_0_valid_out_reg_13_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb1_cmp1430_NEG_or98_stall_local;
wire local_bb1_cmp1430_NEG_or98;

assign local_bb1_cmp1430_NEG_or98 = (local_bb1_cmp1824_NEG | rnode_6to10_bb1_cmp1430_NEG_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb1__phi_decision_xor119_or_valid_out;
wire local_bb1__phi_decision_xor119_or_stall_in;
wire local_bb1__phi_decision_xor119_or_inputs_ready;
wire local_bb1__phi_decision_xor119_or_stall_local;
wire local_bb1__phi_decision_xor119_or;

assign local_bb1__phi_decision_xor119_or_inputs_ready = (rnode_9to10_bb1_cmp1824_0_valid_out_0_NO_SHIFT_REG & rnode_6to10_bb1_cmp1430_NEG_0_valid_out_NO_SHIFT_REG & rnode_6to10_bb1__phi_decision_xor118_0_valid_out_0_NO_SHIFT_REG);
assign local_bb1__phi_decision_xor119_or = (local_bb1_cmp1430_NEG_or98 | rnode_6to10_bb1__phi_decision_xor118_0_NO_SHIFT_REG);
assign local_bb1__phi_decision_xor119_or_valid_out = local_bb1__phi_decision_xor119_or_inputs_ready;
assign local_bb1__phi_decision_xor119_or_stall_local = local_bb1__phi_decision_xor119_or_stall_in;
assign rnode_9to10_bb1_cmp1824_0_stall_in_0_NO_SHIFT_REG = (local_bb1__phi_decision_xor119_or_stall_local | ~(local_bb1__phi_decision_xor119_or_inputs_ready));
assign rnode_6to10_bb1_cmp1430_NEG_0_stall_in_NO_SHIFT_REG = (local_bb1__phi_decision_xor119_or_stall_local | ~(local_bb1__phi_decision_xor119_or_inputs_ready));
assign rnode_6to10_bb1__phi_decision_xor118_0_stall_in_0_NO_SHIFT_REG = (local_bb1__phi_decision_xor119_or_stall_local | ~(local_bb1__phi_decision_xor119_or_inputs_ready));

// This section implements a staging register.
// 
wire rstag_10to10_bb1__phi_decision_xor119_or_valid_out_0;
wire rstag_10to10_bb1__phi_decision_xor119_or_stall_in_0;
wire rstag_10to10_bb1__phi_decision_xor119_or_valid_out_1;
wire rstag_10to10_bb1__phi_decision_xor119_or_stall_in_1;
wire rstag_10to10_bb1__phi_decision_xor119_or_inputs_ready;
wire rstag_10to10_bb1__phi_decision_xor119_or_stall_local;
 reg rstag_10to10_bb1__phi_decision_xor119_or_staging_valid_NO_SHIFT_REG;
wire rstag_10to10_bb1__phi_decision_xor119_or_combined_valid;
 reg rstag_10to10_bb1__phi_decision_xor119_or_staging_reg_NO_SHIFT_REG;
wire rstag_10to10_bb1__phi_decision_xor119_or;
 reg rstag_10to10_bb1__phi_decision_xor119_or_consumed_0_NO_SHIFT_REG;
 reg rstag_10to10_bb1__phi_decision_xor119_or_consumed_1_NO_SHIFT_REG;

assign rstag_10to10_bb1__phi_decision_xor119_or_inputs_ready = local_bb1__phi_decision_xor119_or_valid_out;
assign rstag_10to10_bb1__phi_decision_xor119_or = (rstag_10to10_bb1__phi_decision_xor119_or_staging_valid_NO_SHIFT_REG ? rstag_10to10_bb1__phi_decision_xor119_or_staging_reg_NO_SHIFT_REG : local_bb1__phi_decision_xor119_or);
assign rstag_10to10_bb1__phi_decision_xor119_or_combined_valid = (rstag_10to10_bb1__phi_decision_xor119_or_staging_valid_NO_SHIFT_REG | rstag_10to10_bb1__phi_decision_xor119_or_inputs_ready);
assign rstag_10to10_bb1__phi_decision_xor119_or_stall_local = ((rstag_10to10_bb1__phi_decision_xor119_or_stall_in_0 & ~(rstag_10to10_bb1__phi_decision_xor119_or_consumed_0_NO_SHIFT_REG)) | (rstag_10to10_bb1__phi_decision_xor119_or_stall_in_1 & ~(rstag_10to10_bb1__phi_decision_xor119_or_consumed_1_NO_SHIFT_REG)));
assign rstag_10to10_bb1__phi_decision_xor119_or_valid_out_0 = (rstag_10to10_bb1__phi_decision_xor119_or_combined_valid & ~(rstag_10to10_bb1__phi_decision_xor119_or_consumed_0_NO_SHIFT_REG));
assign rstag_10to10_bb1__phi_decision_xor119_or_valid_out_1 = (rstag_10to10_bb1__phi_decision_xor119_or_combined_valid & ~(rstag_10to10_bb1__phi_decision_xor119_or_consumed_1_NO_SHIFT_REG));
assign local_bb1__phi_decision_xor119_or_stall_in = (|rstag_10to10_bb1__phi_decision_xor119_or_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_10to10_bb1__phi_decision_xor119_or_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_10to10_bb1__phi_decision_xor119_or_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_10to10_bb1__phi_decision_xor119_or_stall_local)
		begin
			if (~(rstag_10to10_bb1__phi_decision_xor119_or_staging_valid_NO_SHIFT_REG))
			begin
				rstag_10to10_bb1__phi_decision_xor119_or_staging_valid_NO_SHIFT_REG <= rstag_10to10_bb1__phi_decision_xor119_or_inputs_ready;
			end
		end
		else
		begin
			rstag_10to10_bb1__phi_decision_xor119_or_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_10to10_bb1__phi_decision_xor119_or_staging_valid_NO_SHIFT_REG))
		begin
			rstag_10to10_bb1__phi_decision_xor119_or_staging_reg_NO_SHIFT_REG <= local_bb1__phi_decision_xor119_or;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_10to10_bb1__phi_decision_xor119_or_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_10to10_bb1__phi_decision_xor119_or_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_10to10_bb1__phi_decision_xor119_or_consumed_0_NO_SHIFT_REG <= (rstag_10to10_bb1__phi_decision_xor119_or_combined_valid & (rstag_10to10_bb1__phi_decision_xor119_or_consumed_0_NO_SHIFT_REG | ~(rstag_10to10_bb1__phi_decision_xor119_or_stall_in_0)) & rstag_10to10_bb1__phi_decision_xor119_or_stall_local);
		rstag_10to10_bb1__phi_decision_xor119_or_consumed_1_NO_SHIFT_REG <= (rstag_10to10_bb1__phi_decision_xor119_or_combined_valid & (rstag_10to10_bb1__phi_decision_xor119_or_consumed_1_NO_SHIFT_REG | ~(rstag_10to10_bb1__phi_decision_xor119_or_stall_in_1)) & rstag_10to10_bb1__phi_decision_xor119_or_stall_local);
	end
end


// Register node:
//  * latency = 3
//  * capacity = 3
 logic rnode_10to13_bb1__phi_decision_xor119_or_0_valid_out_NO_SHIFT_REG;
 logic rnode_10to13_bb1__phi_decision_xor119_or_0_stall_in_NO_SHIFT_REG;
 logic rnode_10to13_bb1__phi_decision_xor119_or_0_NO_SHIFT_REG;
 logic rnode_10to13_bb1__phi_decision_xor119_or_0_reg_13_inputs_ready_NO_SHIFT_REG;
 logic rnode_10to13_bb1__phi_decision_xor119_or_0_reg_13_NO_SHIFT_REG;
 logic rnode_10to13_bb1__phi_decision_xor119_or_0_valid_out_reg_13_NO_SHIFT_REG;
 logic rnode_10to13_bb1__phi_decision_xor119_or_0_stall_in_reg_13_NO_SHIFT_REG;
 logic rnode_10to13_bb1__phi_decision_xor119_or_0_stall_out_reg_13_NO_SHIFT_REG;

acl_data_fifo rnode_10to13_bb1__phi_decision_xor119_or_0_reg_13_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_10to13_bb1__phi_decision_xor119_or_0_reg_13_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_10to13_bb1__phi_decision_xor119_or_0_stall_in_reg_13_NO_SHIFT_REG),
	.valid_out(rnode_10to13_bb1__phi_decision_xor119_or_0_valid_out_reg_13_NO_SHIFT_REG),
	.stall_out(rnode_10to13_bb1__phi_decision_xor119_or_0_stall_out_reg_13_NO_SHIFT_REG),
	.data_in(rstag_10to10_bb1__phi_decision_xor119_or),
	.data_out(rnode_10to13_bb1__phi_decision_xor119_or_0_reg_13_NO_SHIFT_REG)
);

defparam rnode_10to13_bb1__phi_decision_xor119_or_0_reg_13_fifo.DEPTH = 4;
defparam rnode_10to13_bb1__phi_decision_xor119_or_0_reg_13_fifo.DATA_WIDTH = 1;
defparam rnode_10to13_bb1__phi_decision_xor119_or_0_reg_13_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_10to13_bb1__phi_decision_xor119_or_0_reg_13_fifo.IMPL = "ll_reg";

assign rnode_10to13_bb1__phi_decision_xor119_or_0_reg_13_inputs_ready_NO_SHIFT_REG = rstag_10to10_bb1__phi_decision_xor119_or_valid_out_0;
assign rstag_10to10_bb1__phi_decision_xor119_or_stall_in_0 = rnode_10to13_bb1__phi_decision_xor119_or_0_stall_out_reg_13_NO_SHIFT_REG;
assign rnode_10to13_bb1__phi_decision_xor119_or_0_NO_SHIFT_REG = rnode_10to13_bb1__phi_decision_xor119_or_0_reg_13_NO_SHIFT_REG;
assign rnode_10to13_bb1__phi_decision_xor119_or_0_stall_in_reg_13_NO_SHIFT_REG = rnode_10to13_bb1__phi_decision_xor119_or_0_stall_in_NO_SHIFT_REG;
assign rnode_10to13_bb1__phi_decision_xor119_or_0_valid_out_NO_SHIFT_REG = rnode_10to13_bb1__phi_decision_xor119_or_0_valid_out_reg_13_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb1_ld_memcoalesce_param_load_0147_inputs_ready;
 reg local_bb1_ld_memcoalesce_param_load_0147_valid_out_NO_SHIFT_REG;
wire local_bb1_ld_memcoalesce_param_load_0147_stall_in;
wire local_bb1_ld_memcoalesce_param_load_0147_output_regs_ready;
wire local_bb1_ld_memcoalesce_param_load_0147_fu_stall_out;
wire local_bb1_ld_memcoalesce_param_load_0147_fu_valid_out;
wire [255:0] local_bb1_ld_memcoalesce_param_load_0147_lsu_dataout;
 reg [255:0] local_bb1_ld_memcoalesce_param_load_0147_NO_SHIFT_REG;
wire local_bb1_ld_memcoalesce_param_load_0147_causedstall;

lsu_top lsu_local_bb1_ld_memcoalesce_param_load_0147 (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb1_ld_memcoalesce_param_load_0147_fu_stall_out),
	.i_valid(local_bb1_ld_memcoalesce_param_load_0147_inputs_ready),
	.i_address((input_wii_memcoalesce_param_bitcast_0146 & 64'hFFFFFFFFFFFFFC00)),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(rstag_10to10_bb1__phi_decision_xor119_or),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb1_ld_memcoalesce_param_load_0147_output_regs_ready)),
	.o_valid(local_bb1_ld_memcoalesce_param_load_0147_fu_valid_out),
	.o_readdata(local_bb1_ld_memcoalesce_param_load_0147_lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb1_ld_memcoalesce_param_load_0147_active),
	.avm_address(avm_local_bb1_ld_memcoalesce_param_load_0147_address),
	.avm_read(avm_local_bb1_ld_memcoalesce_param_load_0147_read),
	.avm_enable(avm_local_bb1_ld_memcoalesce_param_load_0147_enable),
	.avm_readdata(avm_local_bb1_ld_memcoalesce_param_load_0147_readdata),
	.avm_write(avm_local_bb1_ld_memcoalesce_param_load_0147_write),
	.avm_writeack(avm_local_bb1_ld_memcoalesce_param_load_0147_writeack),
	.avm_burstcount(avm_local_bb1_ld_memcoalesce_param_load_0147_burstcount),
	.avm_writedata(avm_local_bb1_ld_memcoalesce_param_load_0147_writedata),
	.avm_byteenable(avm_local_bb1_ld_memcoalesce_param_load_0147_byteenable),
	.avm_waitrequest(avm_local_bb1_ld_memcoalesce_param_load_0147_waitrequest),
	.avm_readdatavalid(avm_local_bb1_ld_memcoalesce_param_load_0147_readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.AWIDTH = 32;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.WIDTH_BYTES = 32;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.MWIDTH_BYTES = 64;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.ALIGNMENT_BYTES = 64;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.READ = 1;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.ATOMIC = 0;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.WIDTH = 256;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.MWIDTH = 512;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.ATOMIC_WIDTH = 3;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.KERNEL_SIDE_MEM_LATENCY = 3;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.MEMORY_SIDE_MEM_LATENCY = 93;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.USE_WRITE_ACK = 0;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.NUMBER_BANKS = 1;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.USEINPUTFIFO = 0;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.USECACHING = 1;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.CACHESIZE = 128;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.USEOUTPUTFIFO = 1;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.ADDRSPACE = 1;
defparam lsu_local_bb1_ld_memcoalesce_param_load_0147.STYLE = "SEMI-STREAMING";

assign local_bb1_ld_memcoalesce_param_load_0147_inputs_ready = (rnode_9to10_memcoalesce_param_bitcast_0146_0_valid_out_NO_SHIFT_REG & rstag_10to10_bb1__phi_decision_xor119_or_valid_out_1);
assign local_bb1_ld_memcoalesce_param_load_0147_output_regs_ready = (&(~(local_bb1_ld_memcoalesce_param_load_0147_valid_out_NO_SHIFT_REG) | ~(local_bb1_ld_memcoalesce_param_load_0147_stall_in)));
assign rnode_9to10_memcoalesce_param_bitcast_0146_0_stall_in_NO_SHIFT_REG = (local_bb1_ld_memcoalesce_param_load_0147_fu_stall_out | ~(local_bb1_ld_memcoalesce_param_load_0147_inputs_ready));
assign rstag_10to10_bb1__phi_decision_xor119_or_stall_in_1 = (local_bb1_ld_memcoalesce_param_load_0147_fu_stall_out | ~(local_bb1_ld_memcoalesce_param_load_0147_inputs_ready));
assign local_bb1_ld_memcoalesce_param_load_0147_causedstall = (local_bb1_ld_memcoalesce_param_load_0147_inputs_ready && (local_bb1_ld_memcoalesce_param_load_0147_fu_stall_out && !(~(local_bb1_ld_memcoalesce_param_load_0147_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb1_ld_memcoalesce_param_load_0147_NO_SHIFT_REG <= 'x;
		local_bb1_ld_memcoalesce_param_load_0147_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb1_ld_memcoalesce_param_load_0147_output_regs_ready)
		begin
			local_bb1_ld_memcoalesce_param_load_0147_NO_SHIFT_REG <= local_bb1_ld_memcoalesce_param_load_0147_lsu_dataout;
			local_bb1_ld_memcoalesce_param_load_0147_valid_out_NO_SHIFT_REG <= local_bb1_ld_memcoalesce_param_load_0147_fu_valid_out;
		end
		else
		begin
			if (~(local_bb1_ld_memcoalesce_param_load_0147_stall_in))
			begin
				local_bb1_ld_memcoalesce_param_load_0147_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 0
//  * capacity = 1
 logic rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_stall_in_0_NO_SHIFT_REG;
 logic [255:0] rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_NO_SHIFT_REG;
 logic rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_stall_in_1_NO_SHIFT_REG;
 logic [255:0] rnode_13to13_bb1_ld_memcoalesce_param_load_0147_1_NO_SHIFT_REG;
 logic rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_stall_in_2_NO_SHIFT_REG;
 logic [255:0] rnode_13to13_bb1_ld_memcoalesce_param_load_0147_2_NO_SHIFT_REG;
 logic rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_valid_out_3_NO_SHIFT_REG;
 logic rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_stall_in_3_NO_SHIFT_REG;
 logic [255:0] rnode_13to13_bb1_ld_memcoalesce_param_load_0147_3_NO_SHIFT_REG;
 logic rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_valid_out_4_NO_SHIFT_REG;
 logic rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_stall_in_4_NO_SHIFT_REG;
 logic [255:0] rnode_13to13_bb1_ld_memcoalesce_param_load_0147_4_NO_SHIFT_REG;
 logic rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_reg_13_inputs_ready_NO_SHIFT_REG;
 logic [255:0] rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_reg_13_NO_SHIFT_REG;
 logic rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_valid_out_0_reg_13_NO_SHIFT_REG;
 logic rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_stall_in_0_reg_13_NO_SHIFT_REG;
 logic rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_stall_out_reg_13_NO_SHIFT_REG;

acl_data_fifo rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_reg_13_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_reg_13_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_stall_in_0_reg_13_NO_SHIFT_REG),
	.valid_out(rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_valid_out_0_reg_13_NO_SHIFT_REG),
	.stall_out(rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_stall_out_reg_13_NO_SHIFT_REG),
	.data_in(local_bb1_ld_memcoalesce_param_load_0147_NO_SHIFT_REG),
	.data_out(rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_reg_13_NO_SHIFT_REG)
);

defparam rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_reg_13_fifo.DEPTH = 2;
defparam rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_reg_13_fifo.DATA_WIDTH = 256;
defparam rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_reg_13_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_reg_13_fifo.IMPL = "zl_reg";

assign rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_reg_13_inputs_ready_NO_SHIFT_REG = local_bb1_ld_memcoalesce_param_load_0147_valid_out_NO_SHIFT_REG;
assign local_bb1_ld_memcoalesce_param_load_0147_stall_in = rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_stall_out_reg_13_NO_SHIFT_REG;
assign rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_stall_in_0_reg_13_NO_SHIFT_REG = (rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_stall_in_0_NO_SHIFT_REG | rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_stall_in_1_NO_SHIFT_REG | rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_stall_in_2_NO_SHIFT_REG | rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_stall_in_3_NO_SHIFT_REG | rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_stall_in_4_NO_SHIFT_REG);
assign rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_valid_out_0_NO_SHIFT_REG = rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_valid_out_0_reg_13_NO_SHIFT_REG;
assign rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_valid_out_1_NO_SHIFT_REG = rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_valid_out_0_reg_13_NO_SHIFT_REG;
assign rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_valid_out_2_NO_SHIFT_REG = rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_valid_out_0_reg_13_NO_SHIFT_REG;
assign rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_valid_out_3_NO_SHIFT_REG = rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_valid_out_0_reg_13_NO_SHIFT_REG;
assign rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_valid_out_4_NO_SHIFT_REG = rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_valid_out_0_reg_13_NO_SHIFT_REG;
assign rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_NO_SHIFT_REG = rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_reg_13_NO_SHIFT_REG;
assign rnode_13to13_bb1_ld_memcoalesce_param_load_0147_1_NO_SHIFT_REG = rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_reg_13_NO_SHIFT_REG;
assign rnode_13to13_bb1_ld_memcoalesce_param_load_0147_2_NO_SHIFT_REG = rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_reg_13_NO_SHIFT_REG;
assign rnode_13to13_bb1_ld_memcoalesce_param_load_0147_3_NO_SHIFT_REG = rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_reg_13_NO_SHIFT_REG;
assign rnode_13to13_bb1_ld_memcoalesce_param_load_0147_4_NO_SHIFT_REG = rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_reg_13_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb1_memcoalesce_param_extrValue_4_stall_local;
wire [31:0] local_bb1_memcoalesce_param_extrValue_4;

assign local_bb1_memcoalesce_param_extrValue_4[31:0] = rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_NO_SHIFT_REG[191:160];

// This section implements an unregistered operation.
// 
wire local_bb1_memcoalesce_param_extrValue_3150_stall_local;
wire [31:0] local_bb1_memcoalesce_param_extrValue_3150;

assign local_bb1_memcoalesce_param_extrValue_3150[31:0] = rnode_13to13_bb1_ld_memcoalesce_param_load_0147_1_NO_SHIFT_REG[159:128];

// This section implements an unregistered operation.
// 
wire local_bb1_memcoalesce_param_extrValue_1149_stall_local;
wire [31:0] local_bb1_memcoalesce_param_extrValue_1149;

assign local_bb1_memcoalesce_param_extrValue_1149[31:0] = rnode_13to13_bb1_ld_memcoalesce_param_load_0147_2_NO_SHIFT_REG[63:32];

// This section implements an unregistered operation.
// 
wire local_bb1_memcoalesce_param_extrValue_6148_stall_local;
wire [31:0] local_bb1_memcoalesce_param_extrValue_6148;

assign local_bb1_memcoalesce_param_extrValue_6148[31:0] = rnode_13to13_bb1_ld_memcoalesce_param_load_0147_3_NO_SHIFT_REG[255:224];

// This section implements an unregistered operation.
// 
wire local_bb1_memcoalesce_param_extrValue_4_valid_out;
wire local_bb1_memcoalesce_param_extrValue_4_stall_in;
wire local_bb1_memcoalesce_param_extrValue_3150_valid_out;
wire local_bb1_memcoalesce_param_extrValue_3150_stall_in;
wire local_bb1_memcoalesce_param_extrValue_1149_valid_out;
wire local_bb1_memcoalesce_param_extrValue_1149_stall_in;
wire local_bb1_memcoalesce_param_extrValue_6148_valid_out;
wire local_bb1_memcoalesce_param_extrValue_6148_stall_in;
wire local_bb1_memcoalesce_param_extrValue_5_valid_out;
wire local_bb1_memcoalesce_param_extrValue_5_stall_in;
wire local_bb1_memcoalesce_param_extrValue_5_inputs_ready;
wire local_bb1_memcoalesce_param_extrValue_5_stall_local;
wire [31:0] local_bb1_memcoalesce_param_extrValue_5;

assign local_bb1_memcoalesce_param_extrValue_5_inputs_ready = (rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_valid_out_0_NO_SHIFT_REG & rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_valid_out_1_NO_SHIFT_REG & rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_valid_out_2_NO_SHIFT_REG & rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_valid_out_3_NO_SHIFT_REG & rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_valid_out_4_NO_SHIFT_REG);
assign local_bb1_memcoalesce_param_extrValue_5[31:0] = rnode_13to13_bb1_ld_memcoalesce_param_load_0147_4_NO_SHIFT_REG[223:192];
assign local_bb1_memcoalesce_param_extrValue_5_stall_local = (local_bb1_memcoalesce_param_extrValue_4_stall_in | local_bb1_memcoalesce_param_extrValue_3150_stall_in | local_bb1_memcoalesce_param_extrValue_1149_stall_in | local_bb1_memcoalesce_param_extrValue_6148_stall_in | local_bb1_memcoalesce_param_extrValue_5_stall_in);
assign local_bb1_memcoalesce_param_extrValue_4_valid_out = local_bb1_memcoalesce_param_extrValue_5_inputs_ready;
assign local_bb1_memcoalesce_param_extrValue_3150_valid_out = local_bb1_memcoalesce_param_extrValue_5_inputs_ready;
assign local_bb1_memcoalesce_param_extrValue_1149_valid_out = local_bb1_memcoalesce_param_extrValue_5_inputs_ready;
assign local_bb1_memcoalesce_param_extrValue_6148_valid_out = local_bb1_memcoalesce_param_extrValue_5_inputs_ready;
assign local_bb1_memcoalesce_param_extrValue_5_valid_out = local_bb1_memcoalesce_param_extrValue_5_inputs_ready;
assign rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_stall_in_0_NO_SHIFT_REG = (local_bb1_memcoalesce_param_extrValue_5_stall_local | ~(local_bb1_memcoalesce_param_extrValue_5_inputs_ready));
assign rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_stall_in_1_NO_SHIFT_REG = (local_bb1_memcoalesce_param_extrValue_5_stall_local | ~(local_bb1_memcoalesce_param_extrValue_5_inputs_ready));
assign rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_stall_in_2_NO_SHIFT_REG = (local_bb1_memcoalesce_param_extrValue_5_stall_local | ~(local_bb1_memcoalesce_param_extrValue_5_inputs_ready));
assign rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_stall_in_3_NO_SHIFT_REG = (local_bb1_memcoalesce_param_extrValue_5_stall_local | ~(local_bb1_memcoalesce_param_extrValue_5_inputs_ready));
assign rnode_13to13_bb1_ld_memcoalesce_param_load_0147_0_stall_in_4_NO_SHIFT_REG = (local_bb1_memcoalesce_param_extrValue_5_stall_local | ~(local_bb1_memcoalesce_param_extrValue_5_inputs_ready));

// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg lvb_bb1_cmp56_reg_NO_SHIFT_REG;
 reg lvb_bb1_var__reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb1_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb1_memcoalesce_param_extrValue_3_reg_NO_SHIFT_REG;
 reg lvb_bb1_cmp1430_reg_NO_SHIFT_REG;
 reg lvb_bb1_var__u0_reg_NO_SHIFT_REG;
 reg lvb_bb1__phi_decision_xor118_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb1_ld__reg_NO_SHIFT_REG;
 reg lvb_bb1_cmp1824_reg_NO_SHIFT_REG;
 reg lvb_bb1__phi_decision_xor119_or_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb1_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb1_memcoalesce_param_extrValue_6148_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb1_memcoalesce_param_extrValue_1149_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb1_memcoalesce_param_extrValue_3150_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb1_memcoalesce_param_extrValue_4_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb1_memcoalesce_param_extrValue_4_valid_out & local_bb1_memcoalesce_param_extrValue_3150_valid_out & local_bb1_memcoalesce_param_extrValue_1149_valid_out & local_bb1_memcoalesce_param_extrValue_6148_valid_out & local_bb1_memcoalesce_param_extrValue_5_valid_out & rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_valid_out_NO_SHIFT_REG & rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_valid_out_NO_SHIFT_REG & rnode_6to13_bb1_var__u0_0_valid_out_NO_SHIFT_REG & rnode_9to13_bb1_ld__0_valid_out_NO_SHIFT_REG & rnode_10to13_bb1__phi_decision_xor119_or_0_valid_out_NO_SHIFT_REG & rnode_5to13_input_global_id_2_0_valid_out_NO_SHIFT_REG & rcnode_6to13_rc1_bb1_var__0_valid_out_NO_SHIFT_REG & rcnode_10to13_rc1_bb1_cmp1824_0_valid_out_NO_SHIFT_REG & rcnode_12to13_rc0_input_global_id_0_0_valid_out_NO_SHIFT_REG);
assign branch_var__output_regs_ready = (~(stall_in) | ~(branch_node_valid_out_NO_SHIFT_REG));
assign local_bb1_memcoalesce_param_extrValue_4_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb1_memcoalesce_param_extrValue_3150_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb1_memcoalesce_param_extrValue_1149_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb1_memcoalesce_param_extrValue_6148_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb1_memcoalesce_param_extrValue_5_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_6to13_bb1_var__u0_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_9to13_bb1_ld__0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_10to13_bb1__phi_decision_xor119_or_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_5to13_input_global_id_2_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_6to13_rc1_bb1_var__0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_10to13_rc1_bb1_cmp1824_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_12to13_rc0_input_global_id_0_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_bb1_cmp56 = lvb_bb1_cmp56_reg_NO_SHIFT_REG;
assign lvb_bb1_var_ = lvb_bb1_var__reg_NO_SHIFT_REG;
assign lvb_bb1_memcoalesce_param_extrValue_6 = lvb_bb1_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG;
assign lvb_bb1_memcoalesce_param_extrValue_3 = lvb_bb1_memcoalesce_param_extrValue_3_reg_NO_SHIFT_REG;
assign lvb_bb1_cmp1430 = lvb_bb1_cmp1430_reg_NO_SHIFT_REG;
assign lvb_bb1_var__u0 = lvb_bb1_var__u0_reg_NO_SHIFT_REG;
assign lvb_bb1__phi_decision_xor118 = lvb_bb1__phi_decision_xor118_reg_NO_SHIFT_REG;
assign lvb_bb1_ld_ = lvb_bb1_ld__reg_NO_SHIFT_REG;
assign lvb_bb1_cmp1824 = lvb_bb1_cmp1824_reg_NO_SHIFT_REG;
assign lvb_bb1__phi_decision_xor119_or = lvb_bb1__phi_decision_xor119_or_reg_NO_SHIFT_REG;
assign lvb_bb1_memcoalesce_param_extrValue_5 = lvb_bb1_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG;
assign lvb_bb1_memcoalesce_param_extrValue_6148 = lvb_bb1_memcoalesce_param_extrValue_6148_reg_NO_SHIFT_REG;
assign lvb_bb1_memcoalesce_param_extrValue_1149 = lvb_bb1_memcoalesce_param_extrValue_1149_reg_NO_SHIFT_REG;
assign lvb_bb1_memcoalesce_param_extrValue_3150 = lvb_bb1_memcoalesce_param_extrValue_3150_reg_NO_SHIFT_REG;
assign lvb_bb1_memcoalesce_param_extrValue_4 = lvb_bb1_memcoalesce_param_extrValue_4_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0 = lvb_input_global_id_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1 = lvb_input_global_id_1_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2 = lvb_input_global_id_2_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id = lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;
assign combined_branch_stall_in_signal = stall_in;
assign valid_out = branch_node_valid_out_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
		lvb_bb1_cmp56_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_var__reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_memcoalesce_param_extrValue_3_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_cmp1430_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_var__u0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1__phi_decision_xor118_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_ld__reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_cmp1824_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1__phi_decision_xor119_or_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_memcoalesce_param_extrValue_6148_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_memcoalesce_param_extrValue_1149_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_memcoalesce_param_extrValue_3150_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_memcoalesce_param_extrValue_4_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_bb1_cmp56_reg_NO_SHIFT_REG <= rcnode_12to13_rc0_input_global_id_0_0_NO_SHIFT_REG[96];
			lvb_bb1_var__reg_NO_SHIFT_REG <= rcnode_6to13_rc1_bb1_var__0_NO_SHIFT_REG[0];
			lvb_bb1_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG <= rnode_5to13_bb1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG;
			lvb_bb1_memcoalesce_param_extrValue_3_reg_NO_SHIFT_REG <= rnode_5to13_bb1_memcoalesce_param_extrValue_3_0_NO_SHIFT_REG;
			lvb_bb1_cmp1430_reg_NO_SHIFT_REG <= rcnode_6to13_rc1_bb1_var__0_NO_SHIFT_REG[1];
			lvb_bb1_var__u0_reg_NO_SHIFT_REG <= rnode_6to13_bb1_var__u0_0_NO_SHIFT_REG;
			lvb_bb1__phi_decision_xor118_reg_NO_SHIFT_REG <= rcnode_10to13_rc1_bb1_cmp1824_0_NO_SHIFT_REG[1];
			lvb_bb1_ld__reg_NO_SHIFT_REG <= rnode_9to13_bb1_ld__0_NO_SHIFT_REG;
			lvb_bb1_cmp1824_reg_NO_SHIFT_REG <= rcnode_10to13_rc1_bb1_cmp1824_0_NO_SHIFT_REG[0];
			lvb_bb1__phi_decision_xor119_or_reg_NO_SHIFT_REG <= rnode_10to13_bb1__phi_decision_xor119_or_0_NO_SHIFT_REG;
			lvb_bb1_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG <= local_bb1_memcoalesce_param_extrValue_5;
			lvb_bb1_memcoalesce_param_extrValue_6148_reg_NO_SHIFT_REG <= local_bb1_memcoalesce_param_extrValue_6148;
			lvb_bb1_memcoalesce_param_extrValue_1149_reg_NO_SHIFT_REG <= local_bb1_memcoalesce_param_extrValue_1149;
			lvb_bb1_memcoalesce_param_extrValue_3150_reg_NO_SHIFT_REG <= local_bb1_memcoalesce_param_extrValue_3150;
			lvb_bb1_memcoalesce_param_extrValue_4_reg_NO_SHIFT_REG <= local_bb1_memcoalesce_param_extrValue_4;
			lvb_input_global_id_0_reg_NO_SHIFT_REG <= rcnode_12to13_rc0_input_global_id_0_0_NO_SHIFT_REG[31:0];
			lvb_input_global_id_1_reg_NO_SHIFT_REG <= rcnode_12to13_rc0_input_global_id_0_0_NO_SHIFT_REG[63:32];
			lvb_input_global_id_2_reg_NO_SHIFT_REG <= rnode_5to13_input_global_id_2_0_NO_SHIFT_REG;
			lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= rcnode_12to13_rc0_input_global_id_0_0_NO_SHIFT_REG[95:64];
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module convLayer_basic_block_2
	(
		input 		clock,
		input 		resetn,
		input [63:0] 		input_bias,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_0,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_1,
		input 		valid_in_0,
		output 		stall_out_0,
		input 		input_cmp56_0,
		input 		input_var__0,
		input [31:0] 		input_memcoalesce_param_extrValue_6_0,
		input [31:0] 		input_memcoalesce_param_extrValue_3_0,
		input 		input_cmp1430_0,
		input 		input_var__u1_0,
		input 		input__phi_decision_xor118_0,
		input [31:0] 		input_ld__0,
		input 		input_cmp1824_0,
		input 		input__phi_decision_xor119_or_0,
		input [31:0] 		input_memcoalesce_param_extrValue_5_0,
		input [31:0] 		input_memcoalesce_param_extrValue_6148_0,
		input [31:0] 		input_memcoalesce_param_extrValue_1149_0,
		input [31:0] 		input_memcoalesce_param_extrValue_3150_0,
		input [31:0] 		input_memcoalesce_param_extrValue_4_0,
		input [31:0] 		input_channelCounter_058_0,
		input [31:0] 		input_global_id_1_0,
		input [31:0] 		input_global_id_2_0,
		input [31:0] 		input_acl_hw_wg_id_0,
		input 		valid_in_1,
		output 		stall_out_1,
		input 		input_cmp56_1,
		input 		input_var__1,
		input [31:0] 		input_memcoalesce_param_extrValue_6_1,
		input [31:0] 		input_memcoalesce_param_extrValue_3_1,
		input 		input_cmp1430_1,
		input 		input_var__u1_1,
		input 		input__phi_decision_xor118_1,
		input [31:0] 		input_ld__1,
		input 		input_cmp1824_1,
		input 		input__phi_decision_xor119_or_1,
		input [31:0] 		input_memcoalesce_param_extrValue_5_1,
		input [31:0] 		input_memcoalesce_param_extrValue_6148_1,
		input [31:0] 		input_memcoalesce_param_extrValue_1149_1,
		input [31:0] 		input_memcoalesce_param_extrValue_3150_1,
		input [31:0] 		input_memcoalesce_param_extrValue_4_1,
		input [31:0] 		input_channelCounter_058_1,
		input [31:0] 		input_global_id_1_1,
		input [31:0] 		input_global_id_2_1,
		input [31:0] 		input_acl_hw_wg_id_1,
		output 		valid_out,
		input 		stall_in,
		output 		lvb_cmp56,
		output 		lvb_var_,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6,
		output [31:0] 		lvb_memcoalesce_param_extrValue_3,
		output 		lvb_cmp1430,
		output 		lvb_var__u1,
		output 		lvb__phi_decision_xor118,
		output [31:0] 		lvb_ld_,
		output 		lvb_cmp1824,
		output 		lvb__phi_decision_xor119_or,
		output [31:0] 		lvb_memcoalesce_param_extrValue_5,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6148,
		output [31:0] 		lvb_memcoalesce_param_extrValue_1149,
		output [31:0] 		lvb_memcoalesce_param_extrValue_3150,
		output [31:0] 		lvb_memcoalesce_param_extrValue_4,
		output [31:0] 		lvb_channelCounter_058,
		output [63:0] 		lvb_bb2_arrayidx67,
		output [31:0] 		lvb_bb2_mul70,
		output [31:0] 		lvb_bb2_mul46,
		output [31:0] 		lvb_input_global_id_1,
		output [31:0] 		lvb_input_global_id_2,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		input 		start
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((valid_in_0 & valid_in_1) & ~((stall_out_0 | stall_out_1)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
 reg input_cmp56_0_staging_reg_NO_SHIFT_REG;
 reg input_var__0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_3_0_staging_reg_NO_SHIFT_REG;
 reg input_cmp1430_0_staging_reg_NO_SHIFT_REG;
 reg input_var__u1_0_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor118_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__0_staging_reg_NO_SHIFT_REG;
 reg input_cmp1824_0_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor119_or_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6148_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_1149_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_3150_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_4_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_058_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
 reg local_lvm_cmp56_NO_SHIFT_REG;
 reg local_lvm_var__NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG;
 reg local_lvm_cmp1430_NO_SHIFT_REG;
 reg local_lvm_var__u1_NO_SHIFT_REG;
 reg local_lvm__phi_decision_xor118_NO_SHIFT_REG;
 reg [31:0] local_lvm_ld__NO_SHIFT_REG;
 reg local_lvm_cmp1824_NO_SHIFT_REG;
 reg local_lvm__phi_decision_xor119_or_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG;
 reg [31:0] local_lvm_channelCounter_058_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;
 reg input_cmp56_1_staging_reg_NO_SHIFT_REG;
 reg input_var__1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_3_1_staging_reg_NO_SHIFT_REG;
 reg input_cmp1430_1_staging_reg_NO_SHIFT_REG;
 reg input_var__u1_1_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor118_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__1_staging_reg_NO_SHIFT_REG;
 reg input_cmp1824_1_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor119_or_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6148_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_1149_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_3150_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_4_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_058_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG));
assign stall_out_0 = merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
assign stall_out_1 = merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_0_staging_reg_NO_SHIFT_REG | valid_in_0))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		if ((merge_node_valid_in_1_staging_reg_NO_SHIFT_REG | valid_in_1))
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b1;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
		end
		else
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b0;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_cmp56_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_3_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1430_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u1_0_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor118_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__0_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1824_0_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor119_or_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6148_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_1149_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_3150_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_4_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_058_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		input_cmp56_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_3_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1430_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u1_1_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor118_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__1_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1824_1_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor119_or_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6148_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_1149_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_3150_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_4_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_058_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_0_staging_reg_NO_SHIFT_REG))
			begin
				input_cmp56_0_staging_reg_NO_SHIFT_REG <= input_cmp56_0;
				input_var__0_staging_reg_NO_SHIFT_REG <= input_var__0;
				input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_0;
				input_memcoalesce_param_extrValue_3_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_0;
				input_cmp1430_0_staging_reg_NO_SHIFT_REG <= input_cmp1430_0;
				input_var__u1_0_staging_reg_NO_SHIFT_REG <= input_var__u1_0;
				input__phi_decision_xor118_0_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor118_0;
				input_ld__0_staging_reg_NO_SHIFT_REG <= input_ld__0;
				input_cmp1824_0_staging_reg_NO_SHIFT_REG <= input_cmp1824_0;
				input__phi_decision_xor119_or_0_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor119_or_0;
				input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_0;
				input_memcoalesce_param_extrValue_6148_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_0;
				input_memcoalesce_param_extrValue_1149_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_0;
				input_memcoalesce_param_extrValue_3150_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_0;
				input_memcoalesce_param_extrValue_4_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_0;
				input_channelCounter_058_0_staging_reg_NO_SHIFT_REG <= input_channelCounter_058_0;
				input_global_id_1_0_staging_reg_NO_SHIFT_REG <= input_global_id_1_0;
				input_global_id_2_0_staging_reg_NO_SHIFT_REG <= input_global_id_2_0;
				input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= valid_in_0;
			end
		end
		else
		begin
			merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
		if (((merge_block_selector_NO_SHIFT_REG != 1'b1) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_1_staging_reg_NO_SHIFT_REG))
			begin
				input_cmp56_1_staging_reg_NO_SHIFT_REG <= input_cmp56_1;
				input_var__1_staging_reg_NO_SHIFT_REG <= input_var__1;
				input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_1;
				input_memcoalesce_param_extrValue_3_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_1;
				input_cmp1430_1_staging_reg_NO_SHIFT_REG <= input_cmp1430_1;
				input_var__u1_1_staging_reg_NO_SHIFT_REG <= input_var__u1_1;
				input__phi_decision_xor118_1_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor118_1;
				input_ld__1_staging_reg_NO_SHIFT_REG <= input_ld__1;
				input_cmp1824_1_staging_reg_NO_SHIFT_REG <= input_cmp1824_1;
				input__phi_decision_xor119_or_1_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor119_or_1;
				input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_1;
				input_memcoalesce_param_extrValue_6148_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_1;
				input_memcoalesce_param_extrValue_1149_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_1;
				input_memcoalesce_param_extrValue_3150_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_1;
				input_memcoalesce_param_extrValue_4_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_1;
				input_channelCounter_058_1_staging_reg_NO_SHIFT_REG <= input_channelCounter_058_1;
				input_global_id_1_1_staging_reg_NO_SHIFT_REG <= input_global_id_1_1;
				input_global_id_2_1_staging_reg_NO_SHIFT_REG <= input_global_id_2_1;
				input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= valid_in_1;
			end
		end
		else
		begin
			merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_0_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_cmp56_NO_SHIFT_REG <= input_cmp56_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_0_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1430_NO_SHIFT_REG <= input_cmp1430_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u1_NO_SHIFT_REG <= input_var__u1_0_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor118_NO_SHIFT_REG <= input__phi_decision_xor118_0_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__0_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1824_NO_SHIFT_REG <= input_cmp1824_0_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor119_or_NO_SHIFT_REG <= input__phi_decision_xor119_or_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_0_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_058_NO_SHIFT_REG <= input_channelCounter_058_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_cmp56_NO_SHIFT_REG <= input_cmp56_0;
					local_lvm_var__NO_SHIFT_REG <= input_var__0;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_0;
					local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_0;
					local_lvm_cmp1430_NO_SHIFT_REG <= input_cmp1430_0;
					local_lvm_var__u1_NO_SHIFT_REG <= input_var__u1_0;
					local_lvm__phi_decision_xor118_NO_SHIFT_REG <= input__phi_decision_xor118_0;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__0;
					local_lvm_cmp1824_NO_SHIFT_REG <= input_cmp1824_0;
					local_lvm__phi_decision_xor119_or_NO_SHIFT_REG <= input__phi_decision_xor119_or_0;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_0;
					local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_0;
					local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_0;
					local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_0;
					local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_0;
					local_lvm_channelCounter_058_NO_SHIFT_REG <= input_channelCounter_058_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_0;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_0;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				end
			end

			1'b1:
			begin
				if (merge_node_valid_in_1_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_cmp56_NO_SHIFT_REG <= input_cmp56_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_1_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1430_NO_SHIFT_REG <= input_cmp1430_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u1_NO_SHIFT_REG <= input_var__u1_1_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor118_NO_SHIFT_REG <= input__phi_decision_xor118_1_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__1_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1824_NO_SHIFT_REG <= input_cmp1824_1_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor119_or_NO_SHIFT_REG <= input__phi_decision_xor119_or_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_1_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_058_NO_SHIFT_REG <= input_channelCounter_058_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_cmp56_NO_SHIFT_REG <= input_cmp56_1;
					local_lvm_var__NO_SHIFT_REG <= input_var__1;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_1;
					local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_1;
					local_lvm_cmp1430_NO_SHIFT_REG <= input_cmp1430_1;
					local_lvm_var__u1_NO_SHIFT_REG <= input_var__u1_1;
					local_lvm__phi_decision_xor118_NO_SHIFT_REG <= input__phi_decision_xor118_1;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__1;
					local_lvm_cmp1824_NO_SHIFT_REG <= input_cmp1824_1;
					local_lvm__phi_decision_xor119_or_NO_SHIFT_REG <= input__phi_decision_xor119_or_1;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_1;
					local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_1;
					local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_1;
					local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_1;
					local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_1;
					local_lvm_channelCounter_058_NO_SHIFT_REG <= input_channelCounter_058_1;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_1;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements a registered operation.
// 
wire local_bb2_mul70_inputs_ready;
 reg local_bb2_mul70_valid_out_NO_SHIFT_REG;
wire local_bb2_mul70_stall_in;
wire local_bb2_mul70_output_regs_ready;
wire [31:0] local_bb2_mul70;
 reg local_bb2_mul70_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb2_mul70_valid_pipe_1_NO_SHIFT_REG;
wire local_bb2_mul70_causedstall;

acl_int_mult int_module_local_bb2_mul70 (
	.clock(clock),
	.dataa(input_wii_memcoalesce_param_extrValue_1),
	.datab(local_lvm_channelCounter_058_NO_SHIFT_REG),
	.enable(local_bb2_mul70_output_regs_ready),
	.result(local_bb2_mul70)
);

defparam int_module_local_bb2_mul70.INPUT1_WIDTH = 32;
defparam int_module_local_bb2_mul70.INPUT2_WIDTH = 32;
defparam int_module_local_bb2_mul70.OUTPUT_WIDTH = 32;
defparam int_module_local_bb2_mul70.LATENCY = 3;
defparam int_module_local_bb2_mul70.SIGNED = 0;

assign local_bb2_mul70_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb2_mul70_output_regs_ready = (&(~(local_bb2_mul70_valid_out_NO_SHIFT_REG) | ~(local_bb2_mul70_stall_in)));
assign merge_node_stall_in_0 = (~(local_bb2_mul70_output_regs_ready) | ~(local_bb2_mul70_inputs_ready));
assign local_bb2_mul70_causedstall = (local_bb2_mul70_inputs_ready && (~(local_bb2_mul70_output_regs_ready) && !(~(local_bb2_mul70_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_mul70_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_mul70_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_mul70_output_regs_ready)
		begin
			local_bb2_mul70_valid_pipe_0_NO_SHIFT_REG <= local_bb2_mul70_inputs_ready;
			local_bb2_mul70_valid_pipe_1_NO_SHIFT_REG <= local_bb2_mul70_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_mul70_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_mul70_output_regs_ready)
		begin
			local_bb2_mul70_valid_out_NO_SHIFT_REG <= local_bb2_mul70_valid_pipe_1_NO_SHIFT_REG;
		end
		else
		begin
			if (~(local_bb2_mul70_stall_in))
			begin
				local_bb2_mul70_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb2_mul46_inputs_ready;
 reg local_bb2_mul46_valid_out_NO_SHIFT_REG;
wire local_bb2_mul46_stall_in;
wire local_bb2_mul46_output_regs_ready;
wire [31:0] local_bb2_mul46;
 reg local_bb2_mul46_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb2_mul46_valid_pipe_1_NO_SHIFT_REG;
wire local_bb2_mul46_causedstall;

acl_int_mult int_module_local_bb2_mul46 (
	.clock(clock),
	.dataa(local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG),
	.datab(local_lvm_channelCounter_058_NO_SHIFT_REG),
	.enable(local_bb2_mul46_output_regs_ready),
	.result(local_bb2_mul46)
);

defparam int_module_local_bb2_mul46.INPUT1_WIDTH = 32;
defparam int_module_local_bb2_mul46.INPUT2_WIDTH = 32;
defparam int_module_local_bb2_mul46.OUTPUT_WIDTH = 32;
defparam int_module_local_bb2_mul46.LATENCY = 3;
defparam int_module_local_bb2_mul46.SIGNED = 0;

assign local_bb2_mul46_inputs_ready = merge_node_valid_out_1_NO_SHIFT_REG;
assign local_bb2_mul46_output_regs_ready = (&(~(local_bb2_mul46_valid_out_NO_SHIFT_REG) | ~(local_bb2_mul46_stall_in)));
assign merge_node_stall_in_1 = (~(local_bb2_mul46_output_regs_ready) | ~(local_bb2_mul46_inputs_ready));
assign local_bb2_mul46_causedstall = (local_bb2_mul46_inputs_ready && (~(local_bb2_mul46_output_regs_ready) && !(~(local_bb2_mul46_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_mul46_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_mul46_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_mul46_output_regs_ready)
		begin
			local_bb2_mul46_valid_pipe_0_NO_SHIFT_REG <= local_bb2_mul46_inputs_ready;
			local_bb2_mul46_valid_pipe_1_NO_SHIFT_REG <= local_bb2_mul46_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_mul46_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_mul46_output_regs_ready)
		begin
			local_bb2_mul46_valid_out_NO_SHIFT_REG <= local_bb2_mul46_valid_pipe_1_NO_SHIFT_REG;
		end
		else
		begin
			if (~(local_bb2_mul46_stall_in))
			begin
				local_bb2_mul46_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_1to3_channelCounter_058_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to3_channelCounter_058_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to3_channelCounter_058_0_NO_SHIFT_REG;
 logic rnode_1to3_channelCounter_058_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to3_channelCounter_058_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to3_channelCounter_058_1_NO_SHIFT_REG;
 logic rnode_1to3_channelCounter_058_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to3_channelCounter_058_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_channelCounter_058_0_valid_out_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_channelCounter_058_0_stall_in_0_reg_3_NO_SHIFT_REG;
 logic rnode_1to3_channelCounter_058_0_stall_out_reg_3_NO_SHIFT_REG;
wire [358:0] rci_rcnode_1to4_rc3_cmp56_0_reg_1;

acl_data_fifo rnode_1to3_channelCounter_058_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to3_channelCounter_058_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to3_channelCounter_058_0_stall_in_0_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_1to3_channelCounter_058_0_valid_out_0_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_1to3_channelCounter_058_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_lvm_channelCounter_058_NO_SHIFT_REG),
	.data_out(rnode_1to3_channelCounter_058_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_1to3_channelCounter_058_0_reg_3_fifo.DEPTH = 3;
defparam rnode_1to3_channelCounter_058_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_1to3_channelCounter_058_0_reg_3_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to3_channelCounter_058_0_reg_3_fifo.IMPL = "ll_reg";

assign rnode_1to3_channelCounter_058_0_reg_3_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_2_NO_SHIFT_REG;
assign merge_node_stall_in_2 = rnode_1to3_channelCounter_058_0_stall_out_reg_3_NO_SHIFT_REG;
assign rnode_1to3_channelCounter_058_0_stall_in_0_reg_3_NO_SHIFT_REG = (rnode_1to3_channelCounter_058_0_stall_in_0_NO_SHIFT_REG | rnode_1to3_channelCounter_058_0_stall_in_1_NO_SHIFT_REG);
assign rnode_1to3_channelCounter_058_0_valid_out_0_NO_SHIFT_REG = rnode_1to3_channelCounter_058_0_valid_out_0_reg_3_NO_SHIFT_REG;
assign rnode_1to3_channelCounter_058_0_valid_out_1_NO_SHIFT_REG = rnode_1to3_channelCounter_058_0_valid_out_0_reg_3_NO_SHIFT_REG;
assign rnode_1to3_channelCounter_058_0_NO_SHIFT_REG = rnode_1to3_channelCounter_058_0_reg_3_NO_SHIFT_REG;
assign rnode_1to3_channelCounter_058_1_NO_SHIFT_REG = rnode_1to3_channelCounter_058_0_reg_3_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc3_cmp56_0_reg_1[0] = local_lvm_cmp56_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc3_cmp56_0_reg_1[1] = local_lvm_var__NO_SHIFT_REG;
assign rci_rcnode_1to4_rc3_cmp56_0_reg_1[33:2] = local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc3_cmp56_0_reg_1[65:34] = local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc3_cmp56_0_reg_1[66] = local_lvm_cmp1430_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc3_cmp56_0_reg_1[67] = local_lvm_var__u1_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc3_cmp56_0_reg_1[68] = local_lvm__phi_decision_xor118_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc3_cmp56_0_reg_1[100:69] = local_lvm_ld__NO_SHIFT_REG;
assign rci_rcnode_1to4_rc3_cmp56_0_reg_1[101] = local_lvm_cmp1824_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc3_cmp56_0_reg_1[102] = local_lvm__phi_decision_xor119_or_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc3_cmp56_0_reg_1[134:103] = local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc3_cmp56_0_reg_1[166:135] = local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc3_cmp56_0_reg_1[198:167] = local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc3_cmp56_0_reg_1[230:199] = local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc3_cmp56_0_reg_1[262:231] = local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc3_cmp56_0_reg_1[294:263] = local_lvm_input_global_id_1_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc3_cmp56_0_reg_1[326:295] = local_lvm_input_global_id_2_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc3_cmp56_0_reg_1[358:327] = local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;

// Register node:
//  * latency = 3
//  * capacity = 3
 logic rcnode_1to4_rc3_cmp56_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to4_rc3_cmp56_0_stall_in_NO_SHIFT_REG;
 logic [358:0] rcnode_1to4_rc3_cmp56_0_NO_SHIFT_REG;
 logic rcnode_1to4_rc3_cmp56_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [358:0] rcnode_1to4_rc3_cmp56_0_reg_4_NO_SHIFT_REG;
 logic rcnode_1to4_rc3_cmp56_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rcnode_1to4_rc3_cmp56_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rcnode_1to4_rc3_cmp56_0_stall_out_reg_4_IP_NO_SHIFT_REG;
 logic rcnode_1to4_rc3_cmp56_0_stall_out_reg_4_NO_SHIFT_REG;
wire [63:0] rci_rcnode_4to4_rc0_bb2_mul70_0_reg_4;

acl_data_fifo rcnode_1to4_rc3_cmp56_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to4_rc3_cmp56_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to4_rc3_cmp56_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rcnode_1to4_rc3_cmp56_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rcnode_1to4_rc3_cmp56_0_stall_out_reg_4_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to4_rc3_cmp56_0_reg_1),
	.data_out(rcnode_1to4_rc3_cmp56_0_reg_4_NO_SHIFT_REG)
);

defparam rcnode_1to4_rc3_cmp56_0_reg_4_fifo.DEPTH = 4;
defparam rcnode_1to4_rc3_cmp56_0_reg_4_fifo.DATA_WIDTH = 359;
defparam rcnode_1to4_rc3_cmp56_0_reg_4_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to4_rc3_cmp56_0_reg_4_fifo.IMPL = "ll_reg";

assign rcnode_1to4_rc3_cmp56_0_reg_4_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_3_NO_SHIFT_REG;
assign rcnode_1to4_rc3_cmp56_0_stall_out_reg_4_NO_SHIFT_REG = (~(rcnode_1to4_rc3_cmp56_0_reg_4_inputs_ready_NO_SHIFT_REG) | rcnode_1to4_rc3_cmp56_0_stall_out_reg_4_IP_NO_SHIFT_REG);
assign merge_node_stall_in_3 = rcnode_1to4_rc3_cmp56_0_stall_out_reg_4_NO_SHIFT_REG;
assign rcnode_1to4_rc3_cmp56_0_NO_SHIFT_REG = rcnode_1to4_rc3_cmp56_0_reg_4_NO_SHIFT_REG;
assign rcnode_1to4_rc3_cmp56_0_stall_in_reg_4_NO_SHIFT_REG = rcnode_1to4_rc3_cmp56_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to4_rc3_cmp56_0_valid_out_NO_SHIFT_REG = rcnode_1to4_rc3_cmp56_0_valid_out_reg_4_NO_SHIFT_REG;
assign rci_rcnode_4to4_rc0_bb2_mul70_0_reg_4[31:0] = local_bb2_mul70;
assign rci_rcnode_4to4_rc0_bb2_mul70_0_reg_4[63:32] = local_bb2_mul46;

// Register node:
//  * latency = 0
//  * capacity = 2
 logic rcnode_4to4_rc0_bb2_mul70_0_valid_out_NO_SHIFT_REG;
 logic rcnode_4to4_rc0_bb2_mul70_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rcnode_4to4_rc0_bb2_mul70_0_NO_SHIFT_REG;
 logic rcnode_4to4_rc0_bb2_mul70_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rcnode_4to4_rc0_bb2_mul70_0_reg_4_NO_SHIFT_REG;
 logic rcnode_4to4_rc0_bb2_mul70_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rcnode_4to4_rc0_bb2_mul70_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rcnode_4to4_rc0_bb2_mul70_0_stall_out_0_reg_4_IP_NO_SHIFT_REG;
 logic rcnode_4to4_rc0_bb2_mul70_0_stall_out_0_reg_4_NO_SHIFT_REG;

acl_data_fifo rcnode_4to4_rc0_bb2_mul70_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_4to4_rc0_bb2_mul70_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_4to4_rc0_bb2_mul70_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rcnode_4to4_rc0_bb2_mul70_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rcnode_4to4_rc0_bb2_mul70_0_stall_out_0_reg_4_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_4to4_rc0_bb2_mul70_0_reg_4),
	.data_out(rcnode_4to4_rc0_bb2_mul70_0_reg_4_NO_SHIFT_REG)
);

defparam rcnode_4to4_rc0_bb2_mul70_0_reg_4_fifo.DEPTH = 3;
defparam rcnode_4to4_rc0_bb2_mul70_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rcnode_4to4_rc0_bb2_mul70_0_reg_4_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_4to4_rc0_bb2_mul70_0_reg_4_fifo.IMPL = "zl_reg";

assign rcnode_4to4_rc0_bb2_mul70_0_reg_4_inputs_ready_NO_SHIFT_REG = (local_bb2_mul70_valid_out_NO_SHIFT_REG & local_bb2_mul46_valid_out_NO_SHIFT_REG);
assign rcnode_4to4_rc0_bb2_mul70_0_stall_out_0_reg_4_NO_SHIFT_REG = (~(rcnode_4to4_rc0_bb2_mul70_0_reg_4_inputs_ready_NO_SHIFT_REG) | rcnode_4to4_rc0_bb2_mul70_0_stall_out_0_reg_4_IP_NO_SHIFT_REG);
assign local_bb2_mul70_stall_in = rcnode_4to4_rc0_bb2_mul70_0_stall_out_0_reg_4_NO_SHIFT_REG;
assign local_bb2_mul46_stall_in = rcnode_4to4_rc0_bb2_mul70_0_stall_out_0_reg_4_NO_SHIFT_REG;
assign rcnode_4to4_rc0_bb2_mul70_0_NO_SHIFT_REG = rcnode_4to4_rc0_bb2_mul70_0_reg_4_NO_SHIFT_REG;
assign rcnode_4to4_rc0_bb2_mul70_0_stall_in_reg_4_NO_SHIFT_REG = rcnode_4to4_rc0_bb2_mul70_0_stall_in_NO_SHIFT_REG;
assign rcnode_4to4_rc0_bb2_mul70_0_valid_out_NO_SHIFT_REG = rcnode_4to4_rc0_bb2_mul70_0_valid_out_reg_4_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb2_idxprom66_stall_local;
wire [63:0] local_bb2_idxprom66;

assign local_bb2_idxprom66[32] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[33] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[34] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[35] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[36] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[37] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[38] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[39] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[40] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[41] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[42] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[43] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[44] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[45] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[46] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[47] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[48] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[49] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[50] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[51] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[52] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[53] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[54] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[55] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[56] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[57] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[58] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[59] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[60] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[61] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[62] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[63] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG[31];
assign local_bb2_idxprom66[31:0] = rnode_1to3_channelCounter_058_0_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb2_arrayidx67_valid_out;
wire local_bb2_arrayidx67_stall_in;
wire local_bb2_arrayidx67_inputs_ready;
wire local_bb2_arrayidx67_stall_local;
wire [63:0] local_bb2_arrayidx67;
wire [95:0] rci_rcnode_3to4_rc0_bb2_arrayidx67_0_reg_3;

assign local_bb2_arrayidx67_inputs_ready = rnode_1to3_channelCounter_058_0_valid_out_0_NO_SHIFT_REG;
assign local_bb2_arrayidx67 = ((input_bias & 64'hFFFFFFFFFFFFFC00) + (local_bb2_idxprom66 << 6'h2));
assign local_bb2_arrayidx67_valid_out = local_bb2_arrayidx67_inputs_ready;
assign local_bb2_arrayidx67_stall_local = local_bb2_arrayidx67_stall_in;
assign rnode_1to3_channelCounter_058_0_stall_in_0_NO_SHIFT_REG = (|local_bb2_arrayidx67_stall_local);
assign rci_rcnode_3to4_rc0_bb2_arrayidx67_0_reg_3[63:0] = (local_bb2_arrayidx67 & 64'hFFFFFFFFFFFFFFFC);
assign rci_rcnode_3to4_rc0_bb2_arrayidx67_0_reg_3[95:64] = rnode_1to3_channelCounter_058_1_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_3to4_rc0_bb2_arrayidx67_0_valid_out_NO_SHIFT_REG;
 logic rcnode_3to4_rc0_bb2_arrayidx67_0_stall_in_NO_SHIFT_REG;
 logic [95:0] rcnode_3to4_rc0_bb2_arrayidx67_0_NO_SHIFT_REG;
 logic rcnode_3to4_rc0_bb2_arrayidx67_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [95:0] rcnode_3to4_rc0_bb2_arrayidx67_0_reg_4_NO_SHIFT_REG;
 logic rcnode_3to4_rc0_bb2_arrayidx67_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rcnode_3to4_rc0_bb2_arrayidx67_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rcnode_3to4_rc0_bb2_arrayidx67_0_stall_out_0_reg_4_IP_NO_SHIFT_REG;
 logic rcnode_3to4_rc0_bb2_arrayidx67_0_stall_out_0_reg_4_NO_SHIFT_REG;

acl_data_fifo rcnode_3to4_rc0_bb2_arrayidx67_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_3to4_rc0_bb2_arrayidx67_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_3to4_rc0_bb2_arrayidx67_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rcnode_3to4_rc0_bb2_arrayidx67_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rcnode_3to4_rc0_bb2_arrayidx67_0_stall_out_0_reg_4_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_3to4_rc0_bb2_arrayidx67_0_reg_3),
	.data_out(rcnode_3to4_rc0_bb2_arrayidx67_0_reg_4_NO_SHIFT_REG)
);

defparam rcnode_3to4_rc0_bb2_arrayidx67_0_reg_4_fifo.DEPTH = 1;
defparam rcnode_3to4_rc0_bb2_arrayidx67_0_reg_4_fifo.DATA_WIDTH = 96;
defparam rcnode_3to4_rc0_bb2_arrayidx67_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rcnode_3to4_rc0_bb2_arrayidx67_0_reg_4_fifo.IMPL = "ll_reg";

assign rcnode_3to4_rc0_bb2_arrayidx67_0_reg_4_inputs_ready_NO_SHIFT_REG = (local_bb2_arrayidx67_valid_out & rnode_1to3_channelCounter_058_0_valid_out_1_NO_SHIFT_REG);
assign rcnode_3to4_rc0_bb2_arrayidx67_0_stall_out_0_reg_4_NO_SHIFT_REG = (~(rcnode_3to4_rc0_bb2_arrayidx67_0_reg_4_inputs_ready_NO_SHIFT_REG) | rcnode_3to4_rc0_bb2_arrayidx67_0_stall_out_0_reg_4_IP_NO_SHIFT_REG);
assign local_bb2_arrayidx67_stall_in = rcnode_3to4_rc0_bb2_arrayidx67_0_stall_out_0_reg_4_NO_SHIFT_REG;
assign rnode_1to3_channelCounter_058_0_stall_in_1_NO_SHIFT_REG = rcnode_3to4_rc0_bb2_arrayidx67_0_stall_out_0_reg_4_NO_SHIFT_REG;
assign rcnode_3to4_rc0_bb2_arrayidx67_0_NO_SHIFT_REG = rcnode_3to4_rc0_bb2_arrayidx67_0_reg_4_NO_SHIFT_REG;
assign rcnode_3to4_rc0_bb2_arrayidx67_0_stall_in_reg_4_NO_SHIFT_REG = rcnode_3to4_rc0_bb2_arrayidx67_0_stall_in_NO_SHIFT_REG;
assign rcnode_3to4_rc0_bb2_arrayidx67_0_valid_out_NO_SHIFT_REG = rcnode_3to4_rc0_bb2_arrayidx67_0_valid_out_reg_4_NO_SHIFT_REG;

// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg lvb_cmp56_reg_NO_SHIFT_REG;
 reg lvb_var__reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_3_reg_NO_SHIFT_REG;
 reg lvb_cmp1430_reg_NO_SHIFT_REG;
 reg lvb_var__u1_reg_NO_SHIFT_REG;
 reg lvb__phi_decision_xor118_reg_NO_SHIFT_REG;
 reg [31:0] lvb_ld__reg_NO_SHIFT_REG;
 reg lvb_cmp1824_reg_NO_SHIFT_REG;
 reg lvb__phi_decision_xor119_or_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_6148_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_1149_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_3150_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_4_reg_NO_SHIFT_REG;
 reg [31:0] lvb_channelCounter_058_reg_NO_SHIFT_REG;
 reg [63:0] lvb_bb2_arrayidx67_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb2_mul70_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb2_mul46_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (rcnode_1to4_rc3_cmp56_0_valid_out_NO_SHIFT_REG & rcnode_3to4_rc0_bb2_arrayidx67_0_valid_out_NO_SHIFT_REG & rcnode_4to4_rc0_bb2_mul70_0_valid_out_NO_SHIFT_REG);
assign branch_var__output_regs_ready = (~(stall_in) | ~(branch_node_valid_out_NO_SHIFT_REG));
assign rcnode_1to4_rc3_cmp56_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_3to4_rc0_bb2_arrayidx67_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_4to4_rc0_bb2_mul70_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_cmp56 = lvb_cmp56_reg_NO_SHIFT_REG;
assign lvb_var_ = lvb_var__reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6 = lvb_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_3 = lvb_memcoalesce_param_extrValue_3_reg_NO_SHIFT_REG;
assign lvb_cmp1430 = lvb_cmp1430_reg_NO_SHIFT_REG;
assign lvb_var__u1 = lvb_var__u1_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor118 = lvb__phi_decision_xor118_reg_NO_SHIFT_REG;
assign lvb_ld_ = lvb_ld__reg_NO_SHIFT_REG;
assign lvb_cmp1824 = lvb_cmp1824_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor119_or = lvb__phi_decision_xor119_or_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_5 = lvb_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6148 = lvb_memcoalesce_param_extrValue_6148_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_1149 = lvb_memcoalesce_param_extrValue_1149_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_3150 = lvb_memcoalesce_param_extrValue_3150_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_4 = lvb_memcoalesce_param_extrValue_4_reg_NO_SHIFT_REG;
assign lvb_channelCounter_058 = lvb_channelCounter_058_reg_NO_SHIFT_REG;
assign lvb_bb2_arrayidx67 = lvb_bb2_arrayidx67_reg_NO_SHIFT_REG;
assign lvb_bb2_mul70 = lvb_bb2_mul70_reg_NO_SHIFT_REG;
assign lvb_bb2_mul46 = lvb_bb2_mul46_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1 = lvb_input_global_id_1_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2 = lvb_input_global_id_2_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id = lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;
assign combined_branch_stall_in_signal = stall_in;
assign valid_out = branch_node_valid_out_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
		lvb_cmp56_reg_NO_SHIFT_REG <= 'x;
		lvb_var__reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_3_reg_NO_SHIFT_REG <= 'x;
		lvb_cmp1430_reg_NO_SHIFT_REG <= 'x;
		lvb_var__u1_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision_xor118_reg_NO_SHIFT_REG <= 'x;
		lvb_ld__reg_NO_SHIFT_REG <= 'x;
		lvb_cmp1824_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision_xor119_or_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_6148_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_1149_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_3150_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_4_reg_NO_SHIFT_REG <= 'x;
		lvb_channelCounter_058_reg_NO_SHIFT_REG <= 'x;
		lvb_bb2_arrayidx67_reg_NO_SHIFT_REG <= 'x;
		lvb_bb2_mul70_reg_NO_SHIFT_REG <= 'x;
		lvb_bb2_mul46_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_cmp56_reg_NO_SHIFT_REG <= rcnode_1to4_rc3_cmp56_0_NO_SHIFT_REG[0];
			lvb_var__reg_NO_SHIFT_REG <= rcnode_1to4_rc3_cmp56_0_NO_SHIFT_REG[1];
			lvb_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG <= rcnode_1to4_rc3_cmp56_0_NO_SHIFT_REG[33:2];
			lvb_memcoalesce_param_extrValue_3_reg_NO_SHIFT_REG <= rcnode_1to4_rc3_cmp56_0_NO_SHIFT_REG[65:34];
			lvb_cmp1430_reg_NO_SHIFT_REG <= rcnode_1to4_rc3_cmp56_0_NO_SHIFT_REG[66];
			lvb_var__u1_reg_NO_SHIFT_REG <= rcnode_1to4_rc3_cmp56_0_NO_SHIFT_REG[67];
			lvb__phi_decision_xor118_reg_NO_SHIFT_REG <= rcnode_1to4_rc3_cmp56_0_NO_SHIFT_REG[68];
			lvb_ld__reg_NO_SHIFT_REG <= rcnode_1to4_rc3_cmp56_0_NO_SHIFT_REG[100:69];
			lvb_cmp1824_reg_NO_SHIFT_REG <= rcnode_1to4_rc3_cmp56_0_NO_SHIFT_REG[101];
			lvb__phi_decision_xor119_or_reg_NO_SHIFT_REG <= rcnode_1to4_rc3_cmp56_0_NO_SHIFT_REG[102];
			lvb_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG <= rcnode_1to4_rc3_cmp56_0_NO_SHIFT_REG[134:103];
			lvb_memcoalesce_param_extrValue_6148_reg_NO_SHIFT_REG <= rcnode_1to4_rc3_cmp56_0_NO_SHIFT_REG[166:135];
			lvb_memcoalesce_param_extrValue_1149_reg_NO_SHIFT_REG <= rcnode_1to4_rc3_cmp56_0_NO_SHIFT_REG[198:167];
			lvb_memcoalesce_param_extrValue_3150_reg_NO_SHIFT_REG <= rcnode_1to4_rc3_cmp56_0_NO_SHIFT_REG[230:199];
			lvb_memcoalesce_param_extrValue_4_reg_NO_SHIFT_REG <= rcnode_1to4_rc3_cmp56_0_NO_SHIFT_REG[262:231];
			lvb_channelCounter_058_reg_NO_SHIFT_REG <= rcnode_3to4_rc0_bb2_arrayidx67_0_NO_SHIFT_REG[95:64];
			lvb_bb2_arrayidx67_reg_NO_SHIFT_REG <= (rcnode_3to4_rc0_bb2_arrayidx67_0_NO_SHIFT_REG[63:0] & 64'hFFFFFFFFFFFFFFFC);
			lvb_bb2_mul70_reg_NO_SHIFT_REG <= rcnode_4to4_rc0_bb2_mul70_0_NO_SHIFT_REG[31:0];
			lvb_bb2_mul46_reg_NO_SHIFT_REG <= rcnode_4to4_rc0_bb2_mul70_0_NO_SHIFT_REG[63:32];
			lvb_input_global_id_1_reg_NO_SHIFT_REG <= rcnode_1to4_rc3_cmp56_0_NO_SHIFT_REG[294:263];
			lvb_input_global_id_2_reg_NO_SHIFT_REG <= rcnode_1to4_rc3_cmp56_0_NO_SHIFT_REG[326:295];
			lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= rcnode_1to4_rc3_cmp56_0_NO_SHIFT_REG[358:327];
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module convLayer_basic_block_3
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_0,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_1,
		input 		valid_in_0,
		output 		stall_out_0,
		input 		input_cmp56_0,
		input 		input_var__0,
		input [31:0] 		input_memcoalesce_param_extrValue_6_0,
		input [31:0] 		input_memcoalesce_param_extrValue_3_0,
		input 		input_cmp1430_0,
		input 		input_var__u2_0,
		input 		input__phi_decision_xor118_0,
		input [31:0] 		input_ld__0,
		input 		input_cmp1824_0,
		input 		input__phi_decision_xor119_or_0,
		input [31:0] 		input_memcoalesce_param_extrValue_5_0,
		input [31:0] 		input_memcoalesce_param_extrValue_6148_0,
		input [31:0] 		input_memcoalesce_param_extrValue_1149_0,
		input [31:0] 		input_memcoalesce_param_extrValue_3150_0,
		input [31:0] 		input_memcoalesce_param_extrValue_4_0,
		input [31:0] 		input_channelCounter_058_0,
		input [63:0] 		input_arrayidx67_0,
		input [31:0] 		input_mul70_0,
		input [31:0] 		input_mul46_0,
		input [31:0] 		input_heightCounter_148_0,
		input [31:0] 		input_global_id_1_0,
		input [31:0] 		input_global_id_2_0,
		input [31:0] 		input_acl_hw_wg_id_0,
		input 		valid_in_1,
		output 		stall_out_1,
		input 		input_cmp56_1,
		input 		input_var__1,
		input [31:0] 		input_memcoalesce_param_extrValue_6_1,
		input [31:0] 		input_memcoalesce_param_extrValue_3_1,
		input 		input_cmp1430_1,
		input 		input_var__u2_1,
		input 		input__phi_decision_xor118_1,
		input [31:0] 		input_ld__1,
		input 		input_cmp1824_1,
		input 		input__phi_decision_xor119_or_1,
		input [31:0] 		input_memcoalesce_param_extrValue_5_1,
		input [31:0] 		input_memcoalesce_param_extrValue_6148_1,
		input [31:0] 		input_memcoalesce_param_extrValue_1149_1,
		input [31:0] 		input_memcoalesce_param_extrValue_3150_1,
		input [31:0] 		input_memcoalesce_param_extrValue_4_1,
		input [31:0] 		input_channelCounter_058_1,
		input [63:0] 		input_arrayidx67_1,
		input [31:0] 		input_mul70_1,
		input [31:0] 		input_mul46_1,
		input [31:0] 		input_heightCounter_148_1,
		input [31:0] 		input_global_id_1_1,
		input [31:0] 		input_global_id_2_1,
		input [31:0] 		input_acl_hw_wg_id_1,
		output 		valid_out,
		input 		stall_in,
		output 		lvb_cmp56,
		output 		lvb_var_,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6,
		output [31:0] 		lvb_memcoalesce_param_extrValue_3,
		output 		lvb_cmp1430,
		output 		lvb_var__u2,
		output 		lvb__phi_decision_xor118,
		output [31:0] 		lvb_ld_,
		output 		lvb_cmp1824,
		output 		lvb__phi_decision_xor119_or,
		output [31:0] 		lvb_memcoalesce_param_extrValue_5,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6148,
		output [31:0] 		lvb_memcoalesce_param_extrValue_1149,
		output [31:0] 		lvb_memcoalesce_param_extrValue_3150,
		output [31:0] 		lvb_memcoalesce_param_extrValue_4,
		output [31:0] 		lvb_channelCounter_058,
		output [63:0] 		lvb_arrayidx67,
		output [31:0] 		lvb_mul70,
		output [31:0] 		lvb_mul46,
		output [31:0] 		lvb_heightCounter_148,
		output [31:0] 		lvb_bb3_c0_exe1,
		output [31:0] 		lvb_bb3_mul28,
		output [31:0] 		lvb_input_global_id_1,
		output [31:0] 		lvb_input_global_id_2,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		input 		start
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((valid_in_0 & valid_in_1) & ~((stall_out_0 | stall_out_1)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_node_stall_in_4;
 reg merge_node_valid_out_4_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
 reg input_cmp56_0_staging_reg_NO_SHIFT_REG;
 reg input_var__0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_3_0_staging_reg_NO_SHIFT_REG;
 reg input_cmp1430_0_staging_reg_NO_SHIFT_REG;
 reg input_var__u2_0_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor118_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__0_staging_reg_NO_SHIFT_REG;
 reg input_cmp1824_0_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor119_or_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6148_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_1149_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_3150_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_4_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_058_0_staging_reg_NO_SHIFT_REG;
 reg [63:0] input_arrayidx67_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul70_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul46_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_heightCounter_148_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
 reg local_lvm_cmp56_NO_SHIFT_REG;
 reg local_lvm_var__NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG;
 reg local_lvm_cmp1430_NO_SHIFT_REG;
 reg local_lvm_var__u2_NO_SHIFT_REG;
 reg local_lvm__phi_decision_xor118_NO_SHIFT_REG;
 reg [31:0] local_lvm_ld__NO_SHIFT_REG;
 reg local_lvm_cmp1824_NO_SHIFT_REG;
 reg local_lvm__phi_decision_xor119_or_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG;
 reg [31:0] local_lvm_channelCounter_058_NO_SHIFT_REG;
 reg [63:0] local_lvm_arrayidx67_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul70_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul46_NO_SHIFT_REG;
 reg [31:0] local_lvm_heightCounter_148_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;
 reg input_cmp56_1_staging_reg_NO_SHIFT_REG;
 reg input_var__1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_3_1_staging_reg_NO_SHIFT_REG;
 reg input_cmp1430_1_staging_reg_NO_SHIFT_REG;
 reg input_var__u2_1_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor118_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__1_staging_reg_NO_SHIFT_REG;
 reg input_cmp1824_1_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor119_or_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6148_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_1149_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_3150_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_4_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_058_1_staging_reg_NO_SHIFT_REG;
 reg [63:0] input_arrayidx67_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul70_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul46_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_heightCounter_148_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG) | (merge_node_stall_in_4 & merge_node_valid_out_4_NO_SHIFT_REG));
assign stall_out_0 = merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
assign stall_out_1 = merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_0_staging_reg_NO_SHIFT_REG | valid_in_0))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		if ((merge_node_valid_in_1_staging_reg_NO_SHIFT_REG | valid_in_1))
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b1;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
		end
		else
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b0;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_cmp56_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_3_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1430_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor118_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__0_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1824_0_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor119_or_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6148_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_1149_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_3150_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_4_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_058_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_arrayidx67_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul70_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul46_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_heightCounter_148_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		input_cmp56_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_3_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1430_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor118_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__1_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1824_1_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor119_or_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6148_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_1149_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_3150_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_4_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_058_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_arrayidx67_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul70_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul46_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_heightCounter_148_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_0_staging_reg_NO_SHIFT_REG))
			begin
				input_cmp56_0_staging_reg_NO_SHIFT_REG <= input_cmp56_0;
				input_var__0_staging_reg_NO_SHIFT_REG <= input_var__0;
				input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_0;
				input_memcoalesce_param_extrValue_3_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_0;
				input_cmp1430_0_staging_reg_NO_SHIFT_REG <= input_cmp1430_0;
				input_var__u2_0_staging_reg_NO_SHIFT_REG <= input_var__u2_0;
				input__phi_decision_xor118_0_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor118_0;
				input_ld__0_staging_reg_NO_SHIFT_REG <= input_ld__0;
				input_cmp1824_0_staging_reg_NO_SHIFT_REG <= input_cmp1824_0;
				input__phi_decision_xor119_or_0_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor119_or_0;
				input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_0;
				input_memcoalesce_param_extrValue_6148_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_0;
				input_memcoalesce_param_extrValue_1149_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_0;
				input_memcoalesce_param_extrValue_3150_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_0;
				input_memcoalesce_param_extrValue_4_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_0;
				input_channelCounter_058_0_staging_reg_NO_SHIFT_REG <= input_channelCounter_058_0;
				input_arrayidx67_0_staging_reg_NO_SHIFT_REG <= input_arrayidx67_0;
				input_mul70_0_staging_reg_NO_SHIFT_REG <= input_mul70_0;
				input_mul46_0_staging_reg_NO_SHIFT_REG <= input_mul46_0;
				input_heightCounter_148_0_staging_reg_NO_SHIFT_REG <= input_heightCounter_148_0;
				input_global_id_1_0_staging_reg_NO_SHIFT_REG <= input_global_id_1_0;
				input_global_id_2_0_staging_reg_NO_SHIFT_REG <= input_global_id_2_0;
				input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= valid_in_0;
			end
		end
		else
		begin
			merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
		if (((merge_block_selector_NO_SHIFT_REG != 1'b1) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_1_staging_reg_NO_SHIFT_REG))
			begin
				input_cmp56_1_staging_reg_NO_SHIFT_REG <= input_cmp56_1;
				input_var__1_staging_reg_NO_SHIFT_REG <= input_var__1;
				input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_1;
				input_memcoalesce_param_extrValue_3_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_1;
				input_cmp1430_1_staging_reg_NO_SHIFT_REG <= input_cmp1430_1;
				input_var__u2_1_staging_reg_NO_SHIFT_REG <= input_var__u2_1;
				input__phi_decision_xor118_1_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor118_1;
				input_ld__1_staging_reg_NO_SHIFT_REG <= input_ld__1;
				input_cmp1824_1_staging_reg_NO_SHIFT_REG <= input_cmp1824_1;
				input__phi_decision_xor119_or_1_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor119_or_1;
				input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_1;
				input_memcoalesce_param_extrValue_6148_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_1;
				input_memcoalesce_param_extrValue_1149_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_1;
				input_memcoalesce_param_extrValue_3150_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_1;
				input_memcoalesce_param_extrValue_4_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_1;
				input_channelCounter_058_1_staging_reg_NO_SHIFT_REG <= input_channelCounter_058_1;
				input_arrayidx67_1_staging_reg_NO_SHIFT_REG <= input_arrayidx67_1;
				input_mul70_1_staging_reg_NO_SHIFT_REG <= input_mul70_1;
				input_mul46_1_staging_reg_NO_SHIFT_REG <= input_mul46_1;
				input_heightCounter_148_1_staging_reg_NO_SHIFT_REG <= input_heightCounter_148_1;
				input_global_id_1_1_staging_reg_NO_SHIFT_REG <= input_global_id_1_1;
				input_global_id_2_1_staging_reg_NO_SHIFT_REG <= input_global_id_2_1;
				input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= valid_in_1;
			end
		end
		else
		begin
			merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_0_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_cmp56_NO_SHIFT_REG <= input_cmp56_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_0_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1430_NO_SHIFT_REG <= input_cmp1430_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u2_NO_SHIFT_REG <= input_var__u2_0_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor118_NO_SHIFT_REG <= input__phi_decision_xor118_0_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__0_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1824_NO_SHIFT_REG <= input_cmp1824_0_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor119_or_NO_SHIFT_REG <= input__phi_decision_xor119_or_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_0_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_058_NO_SHIFT_REG <= input_channelCounter_058_0_staging_reg_NO_SHIFT_REG;
					local_lvm_arrayidx67_NO_SHIFT_REG <= input_arrayidx67_0_staging_reg_NO_SHIFT_REG;
					local_lvm_mul70_NO_SHIFT_REG <= input_mul70_0_staging_reg_NO_SHIFT_REG;
					local_lvm_mul46_NO_SHIFT_REG <= input_mul46_0_staging_reg_NO_SHIFT_REG;
					local_lvm_heightCounter_148_NO_SHIFT_REG <= input_heightCounter_148_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_cmp56_NO_SHIFT_REG <= input_cmp56_0;
					local_lvm_var__NO_SHIFT_REG <= input_var__0;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_0;
					local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_0;
					local_lvm_cmp1430_NO_SHIFT_REG <= input_cmp1430_0;
					local_lvm_var__u2_NO_SHIFT_REG <= input_var__u2_0;
					local_lvm__phi_decision_xor118_NO_SHIFT_REG <= input__phi_decision_xor118_0;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__0;
					local_lvm_cmp1824_NO_SHIFT_REG <= input_cmp1824_0;
					local_lvm__phi_decision_xor119_or_NO_SHIFT_REG <= input__phi_decision_xor119_or_0;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_0;
					local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_0;
					local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_0;
					local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_0;
					local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_0;
					local_lvm_channelCounter_058_NO_SHIFT_REG <= input_channelCounter_058_0;
					local_lvm_arrayidx67_NO_SHIFT_REG <= input_arrayidx67_0;
					local_lvm_mul70_NO_SHIFT_REG <= input_mul70_0;
					local_lvm_mul46_NO_SHIFT_REG <= input_mul46_0;
					local_lvm_heightCounter_148_NO_SHIFT_REG <= input_heightCounter_148_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_0;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_0;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				end
			end

			1'b1:
			begin
				if (merge_node_valid_in_1_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_cmp56_NO_SHIFT_REG <= input_cmp56_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_1_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1430_NO_SHIFT_REG <= input_cmp1430_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u2_NO_SHIFT_REG <= input_var__u2_1_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor118_NO_SHIFT_REG <= input__phi_decision_xor118_1_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__1_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1824_NO_SHIFT_REG <= input_cmp1824_1_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor119_or_NO_SHIFT_REG <= input__phi_decision_xor119_or_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_1_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_058_NO_SHIFT_REG <= input_channelCounter_058_1_staging_reg_NO_SHIFT_REG;
					local_lvm_arrayidx67_NO_SHIFT_REG <= input_arrayidx67_1_staging_reg_NO_SHIFT_REG;
					local_lvm_mul70_NO_SHIFT_REG <= input_mul70_1_staging_reg_NO_SHIFT_REG;
					local_lvm_mul46_NO_SHIFT_REG <= input_mul46_1_staging_reg_NO_SHIFT_REG;
					local_lvm_heightCounter_148_NO_SHIFT_REG <= input_heightCounter_148_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_cmp56_NO_SHIFT_REG <= input_cmp56_1;
					local_lvm_var__NO_SHIFT_REG <= input_var__1;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_1;
					local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_1;
					local_lvm_cmp1430_NO_SHIFT_REG <= input_cmp1430_1;
					local_lvm_var__u2_NO_SHIFT_REG <= input_var__u2_1;
					local_lvm__phi_decision_xor118_NO_SHIFT_REG <= input__phi_decision_xor118_1;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__1;
					local_lvm_cmp1824_NO_SHIFT_REG <= input_cmp1824_1;
					local_lvm__phi_decision_xor119_or_NO_SHIFT_REG <= input__phi_decision_xor119_or_1;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_1;
					local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_1;
					local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_1;
					local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_1;
					local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_1;
					local_lvm_channelCounter_058_NO_SHIFT_REG <= input_channelCounter_058_1;
					local_lvm_arrayidx67_NO_SHIFT_REG <= input_arrayidx67_1;
					local_lvm_mul70_NO_SHIFT_REG <= input_mul70_1;
					local_lvm_mul46_NO_SHIFT_REG <= input_mul46_1;
					local_lvm_heightCounter_148_NO_SHIFT_REG <= input_heightCounter_148_1;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_1;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_4_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_4))
			begin
				merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(*)
begin
	merge_node_valid_out_1_NO_SHIFT_REG = merge_node_valid_out_0_NO_SHIFT_REG;
	merge_node_valid_out_2_NO_SHIFT_REG = merge_node_valid_out_0_NO_SHIFT_REG;
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb3_c0_eni1_stall_local;
wire [127:0] local_bb3_c0_eni1;

assign local_bb3_c0_eni1[31:0] = 32'bx;
assign local_bb3_c0_eni1[63:32] = local_lvm_mul70_NO_SHIFT_REG;
assign local_bb3_c0_eni1[127:64] = 64'bx;

// This section implements a registered operation.
// 
wire local_bb3_mul28_inputs_ready;
 reg local_bb3_mul28_valid_out_NO_SHIFT_REG;
wire local_bb3_mul28_stall_in;
wire local_bb3_mul28_output_regs_ready;
wire [31:0] local_bb3_mul28;
 reg local_bb3_mul28_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb3_mul28_valid_pipe_1_NO_SHIFT_REG;
wire local_bb3_mul28_causedstall;
wire [550:0] rci_rcnode_1to4_rc4_cmp56_0_reg_1;

acl_int_mult int_module_local_bb3_mul28 (
	.clock(clock),
	.dataa(local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG),
	.datab(local_lvm_heightCounter_148_NO_SHIFT_REG),
	.enable(local_bb3_mul28_output_regs_ready),
	.result(local_bb3_mul28)
);

defparam int_module_local_bb3_mul28.INPUT1_WIDTH = 32;
defparam int_module_local_bb3_mul28.INPUT2_WIDTH = 32;
defparam int_module_local_bb3_mul28.OUTPUT_WIDTH = 32;
defparam int_module_local_bb3_mul28.LATENCY = 3;
defparam int_module_local_bb3_mul28.SIGNED = 0;

assign local_bb3_mul28_inputs_ready = merge_node_valid_out_3_NO_SHIFT_REG;
assign local_bb3_mul28_output_regs_ready = (&(~(local_bb3_mul28_valid_out_NO_SHIFT_REG) | ~(local_bb3_mul28_stall_in)));
assign merge_node_stall_in_3 = (~(local_bb3_mul28_output_regs_ready) | ~(local_bb3_mul28_inputs_ready));
assign local_bb3_mul28_causedstall = (local_bb3_mul28_inputs_ready && (~(local_bb3_mul28_output_regs_ready) && !(~(local_bb3_mul28_output_regs_ready))));
assign rci_rcnode_1to4_rc4_cmp56_0_reg_1[0] = local_lvm_cmp56_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc4_cmp56_0_reg_1[1] = local_lvm_var__NO_SHIFT_REG;
assign rci_rcnode_1to4_rc4_cmp56_0_reg_1[33:2] = local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc4_cmp56_0_reg_1[65:34] = local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc4_cmp56_0_reg_1[66] = local_lvm_cmp1430_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc4_cmp56_0_reg_1[67] = local_lvm_var__u2_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc4_cmp56_0_reg_1[68] = local_lvm__phi_decision_xor118_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc4_cmp56_0_reg_1[100:69] = local_lvm_ld__NO_SHIFT_REG;
assign rci_rcnode_1to4_rc4_cmp56_0_reg_1[101] = local_lvm_cmp1824_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc4_cmp56_0_reg_1[102] = local_lvm__phi_decision_xor119_or_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc4_cmp56_0_reg_1[134:103] = local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc4_cmp56_0_reg_1[166:135] = local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc4_cmp56_0_reg_1[198:167] = local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc4_cmp56_0_reg_1[230:199] = local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc4_cmp56_0_reg_1[262:231] = local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc4_cmp56_0_reg_1[294:263] = local_lvm_channelCounter_058_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc4_cmp56_0_reg_1[358:295] = (local_lvm_arrayidx67_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFFFC);
assign rci_rcnode_1to4_rc4_cmp56_0_reg_1[390:359] = local_lvm_mul70_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc4_cmp56_0_reg_1[422:391] = local_lvm_mul46_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc4_cmp56_0_reg_1[454:423] = local_lvm_heightCounter_148_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc4_cmp56_0_reg_1[486:455] = local_lvm_input_global_id_1_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc4_cmp56_0_reg_1[518:487] = local_lvm_input_global_id_2_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc4_cmp56_0_reg_1[550:519] = local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb3_mul28_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb3_mul28_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb3_mul28_output_regs_ready)
		begin
			local_bb3_mul28_valid_pipe_0_NO_SHIFT_REG <= local_bb3_mul28_inputs_ready;
			local_bb3_mul28_valid_pipe_1_NO_SHIFT_REG <= local_bb3_mul28_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb3_mul28_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb3_mul28_output_regs_ready)
		begin
			local_bb3_mul28_valid_out_NO_SHIFT_REG <= local_bb3_mul28_valid_pipe_1_NO_SHIFT_REG;
		end
		else
		begin
			if (~(local_bb3_mul28_stall_in))
			begin
				local_bb3_mul28_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 3
//  * capacity = 3
 logic rcnode_1to4_rc4_cmp56_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to4_rc4_cmp56_0_stall_in_NO_SHIFT_REG;
 logic [550:0] rcnode_1to4_rc4_cmp56_0_NO_SHIFT_REG;
 logic rcnode_1to4_rc4_cmp56_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [550:0] rcnode_1to4_rc4_cmp56_0_reg_4_NO_SHIFT_REG;
 logic rcnode_1to4_rc4_cmp56_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rcnode_1to4_rc4_cmp56_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rcnode_1to4_rc4_cmp56_0_stall_out_reg_4_IP_NO_SHIFT_REG;
 logic rcnode_1to4_rc4_cmp56_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rcnode_1to4_rc4_cmp56_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to4_rc4_cmp56_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to4_rc4_cmp56_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rcnode_1to4_rc4_cmp56_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rcnode_1to4_rc4_cmp56_0_stall_out_reg_4_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to4_rc4_cmp56_0_reg_1),
	.data_out(rcnode_1to4_rc4_cmp56_0_reg_4_NO_SHIFT_REG)
);

defparam rcnode_1to4_rc4_cmp56_0_reg_4_fifo.DEPTH = 4;
defparam rcnode_1to4_rc4_cmp56_0_reg_4_fifo.DATA_WIDTH = 551;
defparam rcnode_1to4_rc4_cmp56_0_reg_4_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to4_rc4_cmp56_0_reg_4_fifo.IMPL = "ll_reg";

assign rcnode_1to4_rc4_cmp56_0_reg_4_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_4_NO_SHIFT_REG;
assign rcnode_1to4_rc4_cmp56_0_stall_out_reg_4_NO_SHIFT_REG = (~(rcnode_1to4_rc4_cmp56_0_reg_4_inputs_ready_NO_SHIFT_REG) | rcnode_1to4_rc4_cmp56_0_stall_out_reg_4_IP_NO_SHIFT_REG);
assign merge_node_stall_in_4 = rcnode_1to4_rc4_cmp56_0_stall_out_reg_4_NO_SHIFT_REG;
assign rcnode_1to4_rc4_cmp56_0_NO_SHIFT_REG = rcnode_1to4_rc4_cmp56_0_reg_4_NO_SHIFT_REG;
assign rcnode_1to4_rc4_cmp56_0_stall_in_reg_4_NO_SHIFT_REG = rcnode_1to4_rc4_cmp56_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to4_rc4_cmp56_0_valid_out_NO_SHIFT_REG = rcnode_1to4_rc4_cmp56_0_valid_out_reg_4_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb3_c0_eni2_stall_local;
wire [127:0] local_bb3_c0_eni2;

assign local_bb3_c0_eni2[63:0] = local_bb3_c0_eni1[63:0];
assign local_bb3_c0_eni2[95:64] = local_lvm_heightCounter_148_NO_SHIFT_REG;
assign local_bb3_c0_eni2[127:96] = local_bb3_c0_eni1[127:96];

// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_4to4_bb3_mul28_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to4_bb3_mul28_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to4_bb3_mul28_0_NO_SHIFT_REG;
 logic rnode_4to4_bb3_mul28_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to4_bb3_mul28_0_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb3_mul28_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb3_mul28_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb3_mul28_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_4to4_bb3_mul28_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to4_bb3_mul28_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to4_bb3_mul28_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_4to4_bb3_mul28_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_4to4_bb3_mul28_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb3_mul28),
	.data_out(rnode_4to4_bb3_mul28_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_4to4_bb3_mul28_0_reg_4_fifo.DEPTH = 3;
defparam rnode_4to4_bb3_mul28_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_4to4_bb3_mul28_0_reg_4_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_4to4_bb3_mul28_0_reg_4_fifo.IMPL = "zl_reg";

assign rnode_4to4_bb3_mul28_0_reg_4_inputs_ready_NO_SHIFT_REG = local_bb3_mul28_valid_out_NO_SHIFT_REG;
assign local_bb3_mul28_stall_in = rnode_4to4_bb3_mul28_0_stall_out_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb3_mul28_0_NO_SHIFT_REG = rnode_4to4_bb3_mul28_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb3_mul28_0_stall_in_reg_4_NO_SHIFT_REG = rnode_4to4_bb3_mul28_0_stall_in_NO_SHIFT_REG;
assign rnode_4to4_bb3_mul28_0_valid_out_NO_SHIFT_REG = rnode_4to4_bb3_mul28_0_valid_out_reg_4_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb3_c0_eni3_valid_out;
wire local_bb3_c0_eni3_stall_in;
wire local_bb3_c0_eni3_inputs_ready;
wire local_bb3_c0_eni3_stall_local;
wire [127:0] local_bb3_c0_eni3;

assign local_bb3_c0_eni3_inputs_ready = (merge_node_valid_out_0_NO_SHIFT_REG & merge_node_valid_out_1_NO_SHIFT_REG & merge_node_valid_out_2_NO_SHIFT_REG);
assign local_bb3_c0_eni3[95:0] = local_bb3_c0_eni2[95:0];
assign local_bb3_c0_eni3[127:96] = local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
assign local_bb3_c0_eni3_valid_out = local_bb3_c0_eni3_inputs_ready;
assign local_bb3_c0_eni3_stall_local = local_bb3_c0_eni3_stall_in;
assign merge_node_stall_in_0 = (local_bb3_c0_eni3_stall_local | ~(local_bb3_c0_eni3_inputs_ready));
assign merge_node_stall_in_1 = (local_bb3_c0_eni3_stall_local | ~(local_bb3_c0_eni3_inputs_ready));
assign merge_node_stall_in_2 = (local_bb3_c0_eni3_stall_local | ~(local_bb3_c0_eni3_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb3_c0_enter_c0_eni3_valid_out_0;
wire local_bb3_c0_enter_c0_eni3_stall_in_0;
wire local_bb3_c0_enter_c0_eni3_valid_out_1;
wire local_bb3_c0_enter_c0_eni3_stall_in_1;
wire local_bb3_c0_enter_c0_eni3_valid_out_2;
wire local_bb3_c0_enter_c0_eni3_stall_in_2;
wire local_bb3_c0_enter_c0_eni3_valid_out_3;
wire local_bb3_c0_enter_c0_eni3_stall_in_3;
wire local_bb3_c0_enter_c0_eni3_inputs_ready;
wire local_bb3_c0_enter_c0_eni3_stall_local;
wire local_bb3_c0_enter_c0_eni3_input_accepted;
wire [127:0] local_bb3_c0_enter_c0_eni3;
wire local_bb3_c0_exit_c0_exi1_enable;
wire local_bb3_c0_exit_c0_exi1_entry_stall;
wire local_bb3_c0_enter_c0_eni3_valid_bit;
wire local_bb3_c0_exit_c0_exi1_output_regs_ready;
wire local_bb3_c0_exit_c0_exi1_valid_in;
wire local_bb3_c0_exit_c0_exi1_phases;
wire local_bb3_c0_enter_c0_eni3_inc_pipelined_thread;
wire local_bb3_c0_enter_c0_eni3_dec_pipelined_thread;
wire local_bb3_c0_enter_c0_eni3_fu_stall_out;

assign local_bb3_c0_enter_c0_eni3_inputs_ready = local_bb3_c0_eni3_valid_out;
assign local_bb3_c0_enter_c0_eni3 = local_bb3_c0_eni3;
assign local_bb3_c0_enter_c0_eni3_input_accepted = (local_bb3_c0_enter_c0_eni3_inputs_ready && !(local_bb3_c0_exit_c0_exi1_entry_stall));
assign local_bb3_c0_enter_c0_eni3_valid_bit = local_bb3_c0_enter_c0_eni3_input_accepted;
assign local_bb3_c0_enter_c0_eni3_inc_pipelined_thread = 1'b1;
assign local_bb3_c0_enter_c0_eni3_dec_pipelined_thread = ~(1'b0);
assign local_bb3_c0_enter_c0_eni3_fu_stall_out = (~(local_bb3_c0_enter_c0_eni3_inputs_ready) | local_bb3_c0_exit_c0_exi1_entry_stall);
assign local_bb3_c0_enter_c0_eni3_stall_local = (local_bb3_c0_enter_c0_eni3_stall_in_0 | local_bb3_c0_enter_c0_eni3_stall_in_1 | local_bb3_c0_enter_c0_eni3_stall_in_2 | local_bb3_c0_enter_c0_eni3_stall_in_3);
assign local_bb3_c0_enter_c0_eni3_valid_out_0 = local_bb3_c0_enter_c0_eni3_inputs_ready;
assign local_bb3_c0_enter_c0_eni3_valid_out_1 = local_bb3_c0_enter_c0_eni3_inputs_ready;
assign local_bb3_c0_enter_c0_eni3_valid_out_2 = local_bb3_c0_enter_c0_eni3_inputs_ready;
assign local_bb3_c0_enter_c0_eni3_valid_out_3 = local_bb3_c0_enter_c0_eni3_inputs_ready;
assign local_bb3_c0_eni3_stall_in = (|local_bb3_c0_enter_c0_eni3_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb3_c0_ene1_stall_local;
wire [31:0] local_bb3_c0_ene1;

assign local_bb3_c0_ene1[31:0] = local_bb3_c0_enter_c0_eni3[63:32];

// This section implements an unregistered operation.
// 
wire local_bb3_c0_ene2_stall_local;
wire [31:0] local_bb3_c0_ene2;

assign local_bb3_c0_ene2[31:0] = local_bb3_c0_enter_c0_eni3[95:64];

// This section implements an unregistered operation.
// 
wire local_bb3_c0_ene3_valid_out;
wire local_bb3_c0_ene3_stall_in;
wire local_bb3_c0_ene3_inputs_ready;
wire local_bb3_c0_ene3_stall_local;
wire [31:0] local_bb3_c0_ene3;

assign local_bb3_c0_ene3_inputs_ready = local_bb3_c0_enter_c0_eni3_valid_out_2;
assign local_bb3_c0_ene3[31:0] = local_bb3_c0_enter_c0_eni3[127:96];
assign local_bb3_c0_ene3_valid_out = 1'b1;
assign local_bb3_c0_enter_c0_eni3_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire SFC_1_VALID_1_1_0_valid_out;
wire SFC_1_VALID_1_1_0_stall_in;
wire SFC_1_VALID_1_1_0_inputs_ready;
wire SFC_1_VALID_1_1_0_stall_local;
wire SFC_1_VALID_1_1_0;

assign SFC_1_VALID_1_1_0_inputs_ready = local_bb3_c0_enter_c0_eni3_valid_out_3;
assign SFC_1_VALID_1_1_0 = local_bb3_c0_enter_c0_eni3_valid_bit;
assign SFC_1_VALID_1_1_0_valid_out = 1'b1;
assign local_bb3_c0_enter_c0_eni3_stall_in_3 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb3_mul7213_valid_out;
wire local_bb3_mul7213_stall_in;
wire local_bb3_mul7213_inputs_ready;
wire local_bb3_mul7213_stall_local;
wire [31:0] local_bb3_mul7213;

assign local_bb3_mul7213_inputs_ready = (local_bb3_c0_enter_c0_eni3_valid_out_0 & local_bb3_c0_enter_c0_eni3_valid_out_1);
assign local_bb3_mul7213 = (local_bb3_c0_ene1 + local_bb3_c0_ene2);
assign local_bb3_mul7213_valid_out = 1'b1;
assign local_bb3_c0_enter_c0_eni3_stall_in_0 = 1'b0;
assign local_bb3_c0_enter_c0_eni3_stall_in_1 = 1'b0;

// This section implements a registered operation.
// 
wire SFC_1_VALID_1_2_0_inputs_ready;
 reg SFC_1_VALID_1_2_0_valid_out_NO_SHIFT_REG;
wire SFC_1_VALID_1_2_0_stall_in;
wire SFC_1_VALID_1_2_0_output_regs_ready;
 reg SFC_1_VALID_1_2_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_1_VALID_1_2_0_causedstall;

assign SFC_1_VALID_1_2_0_inputs_ready = 1'b1;
assign SFC_1_VALID_1_2_0_output_regs_ready = local_bb3_c0_exit_c0_exi1_enable;
assign SFC_1_VALID_1_1_0_stall_in = 1'b0;
assign SFC_1_VALID_1_2_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb3_c0_exit_c0_exi1_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_1_VALID_1_2_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_1_VALID_1_2_0_output_regs_ready)
		begin
			SFC_1_VALID_1_2_0_NO_SHIFT_REG <= SFC_1_VALID_1_1_0;
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb3_add75_inputs_ready;
 reg local_bb3_add75_valid_out_NO_SHIFT_REG;
wire local_bb3_add75_stall_in;
wire local_bb3_add75_output_regs_ready;
wire [31:0] local_bb3_add75;
 reg local_bb3_add75_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb3_add75_valid_pipe_1_NO_SHIFT_REG;
wire local_bb3_add75_causedstall;

acl_int_mult int_module_local_bb3_add75 (
	.clock(clock),
	.dataa(local_bb3_mul7213),
	.datab(local_bb3_c0_ene3),
	.enable(local_bb3_add75_output_regs_ready),
	.result(local_bb3_add75)
);

defparam int_module_local_bb3_add75.INPUT1_WIDTH = 32;
defparam int_module_local_bb3_add75.INPUT2_WIDTH = 32;
defparam int_module_local_bb3_add75.OUTPUT_WIDTH = 32;
defparam int_module_local_bb3_add75.LATENCY = 3;
defparam int_module_local_bb3_add75.SIGNED = 0;

assign local_bb3_add75_inputs_ready = 1'b1;
assign local_bb3_add75_output_regs_ready = local_bb3_c0_exit_c0_exi1_enable;
assign local_bb3_mul7213_stall_in = 1'b0;
assign local_bb3_c0_ene3_stall_in = 1'b0;
assign local_bb3_add75_causedstall = (1'b1 && (1'b0 && !(~(local_bb3_c0_exit_c0_exi1_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb3_add75_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb3_add75_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb3_add75_output_regs_ready)
		begin
			local_bb3_add75_valid_pipe_0_NO_SHIFT_REG <= 1'b1;
			local_bb3_add75_valid_pipe_1_NO_SHIFT_REG <= local_bb3_add75_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb3_add75_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb3_add75_output_regs_ready)
		begin
			local_bb3_add75_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb3_add75_stall_in))
			begin
				local_bb3_add75_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire SFC_1_VALID_2_3_0_inputs_ready;
 reg SFC_1_VALID_2_3_0_valid_out_NO_SHIFT_REG;
wire SFC_1_VALID_2_3_0_stall_in;
wire SFC_1_VALID_2_3_0_output_regs_ready;
 reg SFC_1_VALID_2_3_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_1_VALID_2_3_0_causedstall;

assign SFC_1_VALID_2_3_0_inputs_ready = 1'b1;
assign SFC_1_VALID_2_3_0_output_regs_ready = local_bb3_c0_exit_c0_exi1_enable;
assign SFC_1_VALID_1_2_0_stall_in = 1'b0;
assign SFC_1_VALID_2_3_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb3_c0_exit_c0_exi1_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_1_VALID_2_3_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_1_VALID_2_3_0_output_regs_ready)
		begin
			SFC_1_VALID_2_3_0_NO_SHIFT_REG <= SFC_1_VALID_1_2_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb3_c0_exi1_valid_out;
wire local_bb3_c0_exi1_stall_in;
wire local_bb3_c0_exi1_inputs_ready;
wire local_bb3_c0_exi1_stall_local;
wire [63:0] local_bb3_c0_exi1;

assign local_bb3_c0_exi1_inputs_ready = local_bb3_add75_valid_out_NO_SHIFT_REG;
assign local_bb3_c0_exi1[31:0] = 32'bx;
assign local_bb3_c0_exi1[63:32] = local_bb3_add75;
assign local_bb3_c0_exi1_valid_out = 1'b1;
assign local_bb3_add75_stall_in = 1'b0;

// This section implements a registered operation.
// 
wire SFC_1_VALID_3_4_0_inputs_ready;
 reg SFC_1_VALID_3_4_0_valid_out_NO_SHIFT_REG;
wire SFC_1_VALID_3_4_0_stall_in;
wire SFC_1_VALID_3_4_0_output_regs_ready;
 reg SFC_1_VALID_3_4_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_1_VALID_3_4_0_causedstall;

assign SFC_1_VALID_3_4_0_inputs_ready = 1'b1;
assign SFC_1_VALID_3_4_0_output_regs_ready = local_bb3_c0_exit_c0_exi1_enable;
assign SFC_1_VALID_2_3_0_stall_in = 1'b0;
assign SFC_1_VALID_3_4_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb3_c0_exit_c0_exi1_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_1_VALID_3_4_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_1_VALID_3_4_0_output_regs_ready)
		begin
			SFC_1_VALID_3_4_0_NO_SHIFT_REG <= SFC_1_VALID_2_3_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb3_c0_exit_c0_exi1_valid_out;
wire local_bb3_c0_exit_c0_exi1_stall_in;
wire local_bb3_c0_exit_c0_exi1_inputs_ready;
wire local_bb3_c0_exit_c0_exi1_stall_local;
wire [63:0] local_bb3_c0_exit_c0_exi1;
wire local_bb3_c0_exit_c0_exi1_valid;
wire local_bb3_c0_exit_c0_exi1_fu_stall_out;

acl_enable_sink local_bb3_c0_exit_c0_exi1_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb3_c0_exi1),
	.data_out(local_bb3_c0_exit_c0_exi1),
	.input_accepted(local_bb3_c0_enter_c0_eni3_input_accepted),
	.valid_out(local_bb3_c0_exit_c0_exi1_valid),
	.stall_in(local_bb3_c0_exit_c0_exi1_stall_local),
	.enable(local_bb3_c0_exit_c0_exi1_enable),
	.valid_in(local_bb3_c0_exit_c0_exi1_valid_in),
	.stall_entry(local_bb3_c0_exit_c0_exi1_entry_stall),
	.inc_pipelined_thread(local_bb3_c0_enter_c0_eni3_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb3_c0_enter_c0_eni3_dec_pipelined_thread)
);

defparam local_bb3_c0_exit_c0_exi1_instance.DATA_WIDTH = 64;
defparam local_bb3_c0_exit_c0_exi1_instance.PIPELINE_DEPTH = 3;
defparam local_bb3_c0_exit_c0_exi1_instance.SCHEDULEII = 1;
defparam local_bb3_c0_exit_c0_exi1_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb3_c0_exit_c0_exi1_inputs_ready = (local_bb3_c0_exi1_valid_out & SFC_1_VALID_3_4_0_valid_out_NO_SHIFT_REG);
assign local_bb3_c0_exit_c0_exi1_valid_in = SFC_1_VALID_3_4_0_NO_SHIFT_REG;
assign local_bb3_c0_exit_c0_exi1_fu_stall_out = ~(local_bb3_c0_exit_c0_exi1_enable);
assign local_bb3_c0_exit_c0_exi1_valid_out = local_bb3_c0_exit_c0_exi1_valid;
assign local_bb3_c0_exit_c0_exi1_stall_local = local_bb3_c0_exit_c0_exi1_stall_in;
assign local_bb3_c0_exi1_stall_in = 1'b0;
assign SFC_1_VALID_3_4_0_stall_in = 1'b0;

// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_4to4_bb3_c0_exit_c0_exi1_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to4_bb3_c0_exit_c0_exi1_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to4_bb3_c0_exit_c0_exi1_0_NO_SHIFT_REG;
 logic rnode_4to4_bb3_c0_exit_c0_exi1_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to4_bb3_c0_exit_c0_exi1_0_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb3_c0_exit_c0_exi1_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb3_c0_exit_c0_exi1_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb3_c0_exit_c0_exi1_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_4to4_bb3_c0_exit_c0_exi1_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to4_bb3_c0_exit_c0_exi1_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to4_bb3_c0_exit_c0_exi1_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_4to4_bb3_c0_exit_c0_exi1_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_4to4_bb3_c0_exit_c0_exi1_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb3_c0_exit_c0_exi1),
	.data_out(rnode_4to4_bb3_c0_exit_c0_exi1_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_4to4_bb3_c0_exit_c0_exi1_0_reg_4_fifo.DEPTH = 3;
defparam rnode_4to4_bb3_c0_exit_c0_exi1_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_4to4_bb3_c0_exit_c0_exi1_0_reg_4_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_4to4_bb3_c0_exit_c0_exi1_0_reg_4_fifo.IMPL = "zl_reg";

assign rnode_4to4_bb3_c0_exit_c0_exi1_0_reg_4_inputs_ready_NO_SHIFT_REG = local_bb3_c0_exit_c0_exi1_valid_out;
assign local_bb3_c0_exit_c0_exi1_stall_in = rnode_4to4_bb3_c0_exit_c0_exi1_0_stall_out_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb3_c0_exit_c0_exi1_0_NO_SHIFT_REG = rnode_4to4_bb3_c0_exit_c0_exi1_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb3_c0_exit_c0_exi1_0_stall_in_reg_4_NO_SHIFT_REG = rnode_4to4_bb3_c0_exit_c0_exi1_0_stall_in_NO_SHIFT_REG;
assign rnode_4to4_bb3_c0_exit_c0_exi1_0_valid_out_NO_SHIFT_REG = rnode_4to4_bb3_c0_exit_c0_exi1_0_valid_out_reg_4_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb3_c0_exe1_valid_out;
wire local_bb3_c0_exe1_stall_in;
wire local_bb3_c0_exe1_inputs_ready;
wire local_bb3_c0_exe1_stall_local;
wire [31:0] local_bb3_c0_exe1;

assign local_bb3_c0_exe1_inputs_ready = rnode_4to4_bb3_c0_exit_c0_exi1_0_valid_out_NO_SHIFT_REG;
assign local_bb3_c0_exe1[31:0] = rnode_4to4_bb3_c0_exit_c0_exi1_0_NO_SHIFT_REG[63:32];
assign local_bb3_c0_exe1_valid_out = local_bb3_c0_exe1_inputs_ready;
assign local_bb3_c0_exe1_stall_local = local_bb3_c0_exe1_stall_in;
assign rnode_4to4_bb3_c0_exit_c0_exi1_0_stall_in_NO_SHIFT_REG = (|local_bb3_c0_exe1_stall_local);

// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg lvb_cmp56_reg_NO_SHIFT_REG;
 reg lvb_var__reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_3_reg_NO_SHIFT_REG;
 reg lvb_cmp1430_reg_NO_SHIFT_REG;
 reg lvb_var__u2_reg_NO_SHIFT_REG;
 reg lvb__phi_decision_xor118_reg_NO_SHIFT_REG;
 reg [31:0] lvb_ld__reg_NO_SHIFT_REG;
 reg lvb_cmp1824_reg_NO_SHIFT_REG;
 reg lvb__phi_decision_xor119_or_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_6148_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_1149_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_3150_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_4_reg_NO_SHIFT_REG;
 reg [31:0] lvb_channelCounter_058_reg_NO_SHIFT_REG;
 reg [63:0] lvb_arrayidx67_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul70_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul46_reg_NO_SHIFT_REG;
 reg [31:0] lvb_heightCounter_148_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb3_c0_exe1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb3_mul28_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb3_c0_exe1_valid_out & rnode_4to4_bb3_mul28_0_valid_out_NO_SHIFT_REG & rcnode_1to4_rc4_cmp56_0_valid_out_NO_SHIFT_REG);
assign branch_var__output_regs_ready = (~(stall_in) | ~(branch_node_valid_out_NO_SHIFT_REG));
assign local_bb3_c0_exe1_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_4to4_bb3_mul28_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_1to4_rc4_cmp56_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_cmp56 = lvb_cmp56_reg_NO_SHIFT_REG;
assign lvb_var_ = lvb_var__reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6 = lvb_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_3 = lvb_memcoalesce_param_extrValue_3_reg_NO_SHIFT_REG;
assign lvb_cmp1430 = lvb_cmp1430_reg_NO_SHIFT_REG;
assign lvb_var__u2 = lvb_var__u2_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor118 = lvb__phi_decision_xor118_reg_NO_SHIFT_REG;
assign lvb_ld_ = lvb_ld__reg_NO_SHIFT_REG;
assign lvb_cmp1824 = lvb_cmp1824_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor119_or = lvb__phi_decision_xor119_or_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_5 = lvb_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6148 = lvb_memcoalesce_param_extrValue_6148_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_1149 = lvb_memcoalesce_param_extrValue_1149_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_3150 = lvb_memcoalesce_param_extrValue_3150_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_4 = lvb_memcoalesce_param_extrValue_4_reg_NO_SHIFT_REG;
assign lvb_channelCounter_058 = lvb_channelCounter_058_reg_NO_SHIFT_REG;
assign lvb_arrayidx67 = lvb_arrayidx67_reg_NO_SHIFT_REG;
assign lvb_mul70 = lvb_mul70_reg_NO_SHIFT_REG;
assign lvb_mul46 = lvb_mul46_reg_NO_SHIFT_REG;
assign lvb_heightCounter_148 = lvb_heightCounter_148_reg_NO_SHIFT_REG;
assign lvb_bb3_c0_exe1 = lvb_bb3_c0_exe1_reg_NO_SHIFT_REG;
assign lvb_bb3_mul28 = lvb_bb3_mul28_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1 = lvb_input_global_id_1_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2 = lvb_input_global_id_2_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id = lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;
assign combined_branch_stall_in_signal = stall_in;
assign valid_out = branch_node_valid_out_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
		lvb_cmp56_reg_NO_SHIFT_REG <= 'x;
		lvb_var__reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_3_reg_NO_SHIFT_REG <= 'x;
		lvb_cmp1430_reg_NO_SHIFT_REG <= 'x;
		lvb_var__u2_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision_xor118_reg_NO_SHIFT_REG <= 'x;
		lvb_ld__reg_NO_SHIFT_REG <= 'x;
		lvb_cmp1824_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision_xor119_or_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_6148_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_1149_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_3150_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_4_reg_NO_SHIFT_REG <= 'x;
		lvb_channelCounter_058_reg_NO_SHIFT_REG <= 'x;
		lvb_arrayidx67_reg_NO_SHIFT_REG <= 'x;
		lvb_mul70_reg_NO_SHIFT_REG <= 'x;
		lvb_mul46_reg_NO_SHIFT_REG <= 'x;
		lvb_heightCounter_148_reg_NO_SHIFT_REG <= 'x;
		lvb_bb3_c0_exe1_reg_NO_SHIFT_REG <= 'x;
		lvb_bb3_mul28_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_cmp56_reg_NO_SHIFT_REG <= rcnode_1to4_rc4_cmp56_0_NO_SHIFT_REG[0];
			lvb_var__reg_NO_SHIFT_REG <= rcnode_1to4_rc4_cmp56_0_NO_SHIFT_REG[1];
			lvb_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG <= rcnode_1to4_rc4_cmp56_0_NO_SHIFT_REG[33:2];
			lvb_memcoalesce_param_extrValue_3_reg_NO_SHIFT_REG <= rcnode_1to4_rc4_cmp56_0_NO_SHIFT_REG[65:34];
			lvb_cmp1430_reg_NO_SHIFT_REG <= rcnode_1to4_rc4_cmp56_0_NO_SHIFT_REG[66];
			lvb_var__u2_reg_NO_SHIFT_REG <= rcnode_1to4_rc4_cmp56_0_NO_SHIFT_REG[67];
			lvb__phi_decision_xor118_reg_NO_SHIFT_REG <= rcnode_1to4_rc4_cmp56_0_NO_SHIFT_REG[68];
			lvb_ld__reg_NO_SHIFT_REG <= rcnode_1to4_rc4_cmp56_0_NO_SHIFT_REG[100:69];
			lvb_cmp1824_reg_NO_SHIFT_REG <= rcnode_1to4_rc4_cmp56_0_NO_SHIFT_REG[101];
			lvb__phi_decision_xor119_or_reg_NO_SHIFT_REG <= rcnode_1to4_rc4_cmp56_0_NO_SHIFT_REG[102];
			lvb_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG <= rcnode_1to4_rc4_cmp56_0_NO_SHIFT_REG[134:103];
			lvb_memcoalesce_param_extrValue_6148_reg_NO_SHIFT_REG <= rcnode_1to4_rc4_cmp56_0_NO_SHIFT_REG[166:135];
			lvb_memcoalesce_param_extrValue_1149_reg_NO_SHIFT_REG <= rcnode_1to4_rc4_cmp56_0_NO_SHIFT_REG[198:167];
			lvb_memcoalesce_param_extrValue_3150_reg_NO_SHIFT_REG <= rcnode_1to4_rc4_cmp56_0_NO_SHIFT_REG[230:199];
			lvb_memcoalesce_param_extrValue_4_reg_NO_SHIFT_REG <= rcnode_1to4_rc4_cmp56_0_NO_SHIFT_REG[262:231];
			lvb_channelCounter_058_reg_NO_SHIFT_REG <= rcnode_1to4_rc4_cmp56_0_NO_SHIFT_REG[294:263];
			lvb_arrayidx67_reg_NO_SHIFT_REG <= (rcnode_1to4_rc4_cmp56_0_NO_SHIFT_REG[358:295] & 64'hFFFFFFFFFFFFFFFC);
			lvb_mul70_reg_NO_SHIFT_REG <= rcnode_1to4_rc4_cmp56_0_NO_SHIFT_REG[390:359];
			lvb_mul46_reg_NO_SHIFT_REG <= rcnode_1to4_rc4_cmp56_0_NO_SHIFT_REG[422:391];
			lvb_heightCounter_148_reg_NO_SHIFT_REG <= rcnode_1to4_rc4_cmp56_0_NO_SHIFT_REG[454:423];
			lvb_bb3_c0_exe1_reg_NO_SHIFT_REG <= local_bb3_c0_exe1;
			lvb_bb3_mul28_reg_NO_SHIFT_REG <= rnode_4to4_bb3_mul28_0_NO_SHIFT_REG;
			lvb_input_global_id_1_reg_NO_SHIFT_REG <= rcnode_1to4_rc4_cmp56_0_NO_SHIFT_REG[486:455];
			lvb_input_global_id_2_reg_NO_SHIFT_REG <= rcnode_1to4_rc4_cmp56_0_NO_SHIFT_REG[518:487];
			lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= rcnode_1to4_rc4_cmp56_0_NO_SHIFT_REG[550:519];
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module convLayer_basic_block_4
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_0,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_1,
		input 		valid_in_0,
		output 		stall_out_0,
		input 		input_cmp56_0,
		input 		input_var__0,
		input [31:0] 		input_memcoalesce_param_extrValue_6_0,
		input [31:0] 		input_memcoalesce_param_extrValue_3_0,
		input 		input_cmp1430_0,
		input 		input_var__u3_0,
		input 		input__phi_decision_xor118_0,
		input [31:0] 		input_ld__0,
		input 		input_cmp1824_0,
		input 		input__phi_decision_xor119_or_0,
		input [31:0] 		input_memcoalesce_param_extrValue_5_0,
		input [31:0] 		input_memcoalesce_param_extrValue_6148_0,
		input [31:0] 		input_memcoalesce_param_extrValue_1149_0,
		input [31:0] 		input_memcoalesce_param_extrValue_3150_0,
		input [31:0] 		input_memcoalesce_param_extrValue_4_0,
		input [31:0] 		input_channelCounter_058_0,
		input [63:0] 		input_arrayidx67_0,
		input [31:0] 		input_mul70_0,
		input [31:0] 		input_mul46_0,
		input [31:0] 		input_heightCounter_148_0,
		input [31:0] 		input_c0_exe1_0,
		input [31:0] 		input_mul28_0,
		input [31:0] 		input_var__u4_0,
		input [31:0] 		input_widthCounter_239_0,
		input [31:0] 		input_global_id_1_0,
		input [31:0] 		input_global_id_2_0,
		input [31:0] 		input_acl_hw_wg_id_0,
		input 		valid_in_1,
		output 		stall_out_1,
		input 		input_cmp56_1,
		input 		input_var__1,
		input [31:0] 		input_memcoalesce_param_extrValue_6_1,
		input [31:0] 		input_memcoalesce_param_extrValue_3_1,
		input 		input_cmp1430_1,
		input 		input_var__u3_1,
		input 		input__phi_decision_xor118_1,
		input [31:0] 		input_ld__1,
		input 		input_cmp1824_1,
		input 		input__phi_decision_xor119_or_1,
		input [31:0] 		input_memcoalesce_param_extrValue_5_1,
		input [31:0] 		input_memcoalesce_param_extrValue_6148_1,
		input [31:0] 		input_memcoalesce_param_extrValue_1149_1,
		input [31:0] 		input_memcoalesce_param_extrValue_3150_1,
		input [31:0] 		input_memcoalesce_param_extrValue_4_1,
		input [31:0] 		input_channelCounter_058_1,
		input [63:0] 		input_arrayidx67_1,
		input [31:0] 		input_mul70_1,
		input [31:0] 		input_mul46_1,
		input [31:0] 		input_heightCounter_148_1,
		input [31:0] 		input_c0_exe1_1,
		input [31:0] 		input_mul28_1,
		input [31:0] 		input_var__u4_1,
		input [31:0] 		input_widthCounter_239_1,
		input [31:0] 		input_global_id_1_1,
		input [31:0] 		input_global_id_2_1,
		input [31:0] 		input_acl_hw_wg_id_1,
		output 		valid_out,
		input 		stall_in,
		output 		lvb_cmp56,
		output 		lvb_var_,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6,
		output [31:0] 		lvb_memcoalesce_param_extrValue_3,
		output 		lvb_cmp1430,
		output 		lvb_var__u3,
		output 		lvb__phi_decision_xor118,
		output [31:0] 		lvb_ld_,
		output 		lvb_cmp1824,
		output 		lvb__phi_decision_xor119_or,
		output [31:0] 		lvb_memcoalesce_param_extrValue_5,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6148,
		output [31:0] 		lvb_memcoalesce_param_extrValue_1149,
		output [31:0] 		lvb_memcoalesce_param_extrValue_3150,
		output [31:0] 		lvb_memcoalesce_param_extrValue_4,
		output [31:0] 		lvb_channelCounter_058,
		output [63:0] 		lvb_arrayidx67,
		output [31:0] 		lvb_mul70,
		output [31:0] 		lvb_mul46,
		output [31:0] 		lvb_heightCounter_148,
		output [31:0] 		lvb_c0_exe1,
		output [31:0] 		lvb_mul28,
		output [31:0] 		lvb_var__u4,
		output [31:0] 		lvb_widthCounter_239,
		output [31:0] 		lvb_bb4_mul36,
		output [31:0] 		lvb_input_global_id_1,
		output [31:0] 		lvb_input_global_id_2,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		input 		start
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((valid_in_0 & valid_in_1) & ~((stall_out_0 | stall_out_1)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
 reg input_cmp56_0_staging_reg_NO_SHIFT_REG;
 reg input_var__0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_3_0_staging_reg_NO_SHIFT_REG;
 reg input_cmp1430_0_staging_reg_NO_SHIFT_REG;
 reg input_var__u3_0_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor118_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__0_staging_reg_NO_SHIFT_REG;
 reg input_cmp1824_0_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor119_or_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6148_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_1149_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_3150_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_4_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_058_0_staging_reg_NO_SHIFT_REG;
 reg [63:0] input_arrayidx67_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul70_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul46_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_heightCounter_148_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe1_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul28_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__u4_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_widthCounter_239_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
 reg local_lvm_cmp56_NO_SHIFT_REG;
 reg local_lvm_var__NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG;
 reg local_lvm_cmp1430_NO_SHIFT_REG;
 reg local_lvm_var__u3_NO_SHIFT_REG;
 reg local_lvm__phi_decision_xor118_NO_SHIFT_REG;
 reg [31:0] local_lvm_ld__NO_SHIFT_REG;
 reg local_lvm_cmp1824_NO_SHIFT_REG;
 reg local_lvm__phi_decision_xor119_or_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG;
 reg [31:0] local_lvm_channelCounter_058_NO_SHIFT_REG;
 reg [63:0] local_lvm_arrayidx67_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul70_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul46_NO_SHIFT_REG;
 reg [31:0] local_lvm_heightCounter_148_NO_SHIFT_REG;
 reg [31:0] local_lvm_c0_exe1_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul28_NO_SHIFT_REG;
 reg [31:0] local_lvm_var__u4_NO_SHIFT_REG;
 reg [31:0] local_lvm_widthCounter_239_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;
 reg input_cmp56_1_staging_reg_NO_SHIFT_REG;
 reg input_var__1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_3_1_staging_reg_NO_SHIFT_REG;
 reg input_cmp1430_1_staging_reg_NO_SHIFT_REG;
 reg input_var__u3_1_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor118_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__1_staging_reg_NO_SHIFT_REG;
 reg input_cmp1824_1_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor119_or_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6148_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_1149_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_3150_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_4_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_058_1_staging_reg_NO_SHIFT_REG;
 reg [63:0] input_arrayidx67_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul70_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul46_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_heightCounter_148_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe1_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul28_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__u4_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_widthCounter_239_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG));
assign stall_out_0 = merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
assign stall_out_1 = merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_0_staging_reg_NO_SHIFT_REG | valid_in_0))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		if ((merge_node_valid_in_1_staging_reg_NO_SHIFT_REG | valid_in_1))
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b1;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
		end
		else
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b0;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_cmp56_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_3_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1430_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u3_0_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor118_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__0_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1824_0_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor119_or_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6148_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_1149_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_3150_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_4_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_058_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_arrayidx67_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul70_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul46_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_heightCounter_148_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe1_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul28_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u4_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_widthCounter_239_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		input_cmp56_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_3_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1430_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u3_1_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor118_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__1_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1824_1_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor119_or_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6148_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_1149_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_3150_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_4_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_058_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_arrayidx67_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul70_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul46_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_heightCounter_148_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe1_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul28_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u4_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_widthCounter_239_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_0_staging_reg_NO_SHIFT_REG))
			begin
				input_cmp56_0_staging_reg_NO_SHIFT_REG <= input_cmp56_0;
				input_var__0_staging_reg_NO_SHIFT_REG <= input_var__0;
				input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_0;
				input_memcoalesce_param_extrValue_3_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_0;
				input_cmp1430_0_staging_reg_NO_SHIFT_REG <= input_cmp1430_0;
				input_var__u3_0_staging_reg_NO_SHIFT_REG <= input_var__u3_0;
				input__phi_decision_xor118_0_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor118_0;
				input_ld__0_staging_reg_NO_SHIFT_REG <= input_ld__0;
				input_cmp1824_0_staging_reg_NO_SHIFT_REG <= input_cmp1824_0;
				input__phi_decision_xor119_or_0_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor119_or_0;
				input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_0;
				input_memcoalesce_param_extrValue_6148_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_0;
				input_memcoalesce_param_extrValue_1149_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_0;
				input_memcoalesce_param_extrValue_3150_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_0;
				input_memcoalesce_param_extrValue_4_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_0;
				input_channelCounter_058_0_staging_reg_NO_SHIFT_REG <= input_channelCounter_058_0;
				input_arrayidx67_0_staging_reg_NO_SHIFT_REG <= input_arrayidx67_0;
				input_mul70_0_staging_reg_NO_SHIFT_REG <= input_mul70_0;
				input_mul46_0_staging_reg_NO_SHIFT_REG <= input_mul46_0;
				input_heightCounter_148_0_staging_reg_NO_SHIFT_REG <= input_heightCounter_148_0;
				input_c0_exe1_0_staging_reg_NO_SHIFT_REG <= input_c0_exe1_0;
				input_mul28_0_staging_reg_NO_SHIFT_REG <= input_mul28_0;
				input_var__u4_0_staging_reg_NO_SHIFT_REG <= input_var__u4_0;
				input_widthCounter_239_0_staging_reg_NO_SHIFT_REG <= input_widthCounter_239_0;
				input_global_id_1_0_staging_reg_NO_SHIFT_REG <= input_global_id_1_0;
				input_global_id_2_0_staging_reg_NO_SHIFT_REG <= input_global_id_2_0;
				input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= valid_in_0;
			end
		end
		else
		begin
			merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
		if (((merge_block_selector_NO_SHIFT_REG != 1'b1) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_1_staging_reg_NO_SHIFT_REG))
			begin
				input_cmp56_1_staging_reg_NO_SHIFT_REG <= input_cmp56_1;
				input_var__1_staging_reg_NO_SHIFT_REG <= input_var__1;
				input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_1;
				input_memcoalesce_param_extrValue_3_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_1;
				input_cmp1430_1_staging_reg_NO_SHIFT_REG <= input_cmp1430_1;
				input_var__u3_1_staging_reg_NO_SHIFT_REG <= input_var__u3_1;
				input__phi_decision_xor118_1_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor118_1;
				input_ld__1_staging_reg_NO_SHIFT_REG <= input_ld__1;
				input_cmp1824_1_staging_reg_NO_SHIFT_REG <= input_cmp1824_1;
				input__phi_decision_xor119_or_1_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor119_or_1;
				input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_1;
				input_memcoalesce_param_extrValue_6148_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_1;
				input_memcoalesce_param_extrValue_1149_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_1;
				input_memcoalesce_param_extrValue_3150_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_1;
				input_memcoalesce_param_extrValue_4_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_1;
				input_channelCounter_058_1_staging_reg_NO_SHIFT_REG <= input_channelCounter_058_1;
				input_arrayidx67_1_staging_reg_NO_SHIFT_REG <= input_arrayidx67_1;
				input_mul70_1_staging_reg_NO_SHIFT_REG <= input_mul70_1;
				input_mul46_1_staging_reg_NO_SHIFT_REG <= input_mul46_1;
				input_heightCounter_148_1_staging_reg_NO_SHIFT_REG <= input_heightCounter_148_1;
				input_c0_exe1_1_staging_reg_NO_SHIFT_REG <= input_c0_exe1_1;
				input_mul28_1_staging_reg_NO_SHIFT_REG <= input_mul28_1;
				input_var__u4_1_staging_reg_NO_SHIFT_REG <= input_var__u4_1;
				input_widthCounter_239_1_staging_reg_NO_SHIFT_REG <= input_widthCounter_239_1;
				input_global_id_1_1_staging_reg_NO_SHIFT_REG <= input_global_id_1_1;
				input_global_id_2_1_staging_reg_NO_SHIFT_REG <= input_global_id_2_1;
				input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= valid_in_1;
			end
		end
		else
		begin
			merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_0_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_cmp56_NO_SHIFT_REG <= input_cmp56_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_0_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1430_NO_SHIFT_REG <= input_cmp1430_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u3_NO_SHIFT_REG <= input_var__u3_0_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor118_NO_SHIFT_REG <= input__phi_decision_xor118_0_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__0_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1824_NO_SHIFT_REG <= input_cmp1824_0_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor119_or_NO_SHIFT_REG <= input__phi_decision_xor119_or_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_0_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_058_NO_SHIFT_REG <= input_channelCounter_058_0_staging_reg_NO_SHIFT_REG;
					local_lvm_arrayidx67_NO_SHIFT_REG <= input_arrayidx67_0_staging_reg_NO_SHIFT_REG;
					local_lvm_mul70_NO_SHIFT_REG <= input_mul70_0_staging_reg_NO_SHIFT_REG;
					local_lvm_mul46_NO_SHIFT_REG <= input_mul46_0_staging_reg_NO_SHIFT_REG;
					local_lvm_heightCounter_148_NO_SHIFT_REG <= input_heightCounter_148_0_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_0_staging_reg_NO_SHIFT_REG;
					local_lvm_mul28_NO_SHIFT_REG <= input_mul28_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u4_NO_SHIFT_REG <= input_var__u4_0_staging_reg_NO_SHIFT_REG;
					local_lvm_widthCounter_239_NO_SHIFT_REG <= input_widthCounter_239_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_cmp56_NO_SHIFT_REG <= input_cmp56_0;
					local_lvm_var__NO_SHIFT_REG <= input_var__0;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_0;
					local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_0;
					local_lvm_cmp1430_NO_SHIFT_REG <= input_cmp1430_0;
					local_lvm_var__u3_NO_SHIFT_REG <= input_var__u3_0;
					local_lvm__phi_decision_xor118_NO_SHIFT_REG <= input__phi_decision_xor118_0;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__0;
					local_lvm_cmp1824_NO_SHIFT_REG <= input_cmp1824_0;
					local_lvm__phi_decision_xor119_or_NO_SHIFT_REG <= input__phi_decision_xor119_or_0;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_0;
					local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_0;
					local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_0;
					local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_0;
					local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_0;
					local_lvm_channelCounter_058_NO_SHIFT_REG <= input_channelCounter_058_0;
					local_lvm_arrayidx67_NO_SHIFT_REG <= input_arrayidx67_0;
					local_lvm_mul70_NO_SHIFT_REG <= input_mul70_0;
					local_lvm_mul46_NO_SHIFT_REG <= input_mul46_0;
					local_lvm_heightCounter_148_NO_SHIFT_REG <= input_heightCounter_148_0;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_0;
					local_lvm_mul28_NO_SHIFT_REG <= input_mul28_0;
					local_lvm_var__u4_NO_SHIFT_REG <= input_var__u4_0;
					local_lvm_widthCounter_239_NO_SHIFT_REG <= input_widthCounter_239_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_0;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_0;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				end
			end

			1'b1:
			begin
				if (merge_node_valid_in_1_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_cmp56_NO_SHIFT_REG <= input_cmp56_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_1_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1430_NO_SHIFT_REG <= input_cmp1430_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u3_NO_SHIFT_REG <= input_var__u3_1_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor118_NO_SHIFT_REG <= input__phi_decision_xor118_1_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__1_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1824_NO_SHIFT_REG <= input_cmp1824_1_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor119_or_NO_SHIFT_REG <= input__phi_decision_xor119_or_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_1_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_058_NO_SHIFT_REG <= input_channelCounter_058_1_staging_reg_NO_SHIFT_REG;
					local_lvm_arrayidx67_NO_SHIFT_REG <= input_arrayidx67_1_staging_reg_NO_SHIFT_REG;
					local_lvm_mul70_NO_SHIFT_REG <= input_mul70_1_staging_reg_NO_SHIFT_REG;
					local_lvm_mul46_NO_SHIFT_REG <= input_mul46_1_staging_reg_NO_SHIFT_REG;
					local_lvm_heightCounter_148_NO_SHIFT_REG <= input_heightCounter_148_1_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_1_staging_reg_NO_SHIFT_REG;
					local_lvm_mul28_NO_SHIFT_REG <= input_mul28_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u4_NO_SHIFT_REG <= input_var__u4_1_staging_reg_NO_SHIFT_REG;
					local_lvm_widthCounter_239_NO_SHIFT_REG <= input_widthCounter_239_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_cmp56_NO_SHIFT_REG <= input_cmp56_1;
					local_lvm_var__NO_SHIFT_REG <= input_var__1;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_1;
					local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_1;
					local_lvm_cmp1430_NO_SHIFT_REG <= input_cmp1430_1;
					local_lvm_var__u3_NO_SHIFT_REG <= input_var__u3_1;
					local_lvm__phi_decision_xor118_NO_SHIFT_REG <= input__phi_decision_xor118_1;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__1;
					local_lvm_cmp1824_NO_SHIFT_REG <= input_cmp1824_1;
					local_lvm__phi_decision_xor119_or_NO_SHIFT_REG <= input__phi_decision_xor119_or_1;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_1;
					local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_1;
					local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_1;
					local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_1;
					local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_1;
					local_lvm_channelCounter_058_NO_SHIFT_REG <= input_channelCounter_058_1;
					local_lvm_arrayidx67_NO_SHIFT_REG <= input_arrayidx67_1;
					local_lvm_mul70_NO_SHIFT_REG <= input_mul70_1;
					local_lvm_mul46_NO_SHIFT_REG <= input_mul46_1;
					local_lvm_heightCounter_148_NO_SHIFT_REG <= input_heightCounter_148_1;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_1;
					local_lvm_mul28_NO_SHIFT_REG <= input_mul28_1;
					local_lvm_var__u4_NO_SHIFT_REG <= input_var__u4_1;
					local_lvm_widthCounter_239_NO_SHIFT_REG <= input_widthCounter_239_1;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_1;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements a registered operation.
// 
wire local_bb4_mul36_inputs_ready;
 reg local_bb4_mul36_valid_out_NO_SHIFT_REG;
wire local_bb4_mul36_stall_in;
wire local_bb4_mul36_output_regs_ready;
wire [31:0] local_bb4_mul36;
 reg local_bb4_mul36_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb4_mul36_valid_pipe_1_NO_SHIFT_REG;
wire local_bb4_mul36_causedstall;
wire [678:0] rci_rcnode_1to4_rc1_cmp56_0_reg_1;

acl_int_mult int_module_local_bb4_mul36 (
	.clock(clock),
	.dataa(local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG),
	.datab(local_lvm_widthCounter_239_NO_SHIFT_REG),
	.enable(local_bb4_mul36_output_regs_ready),
	.result(local_bb4_mul36)
);

defparam int_module_local_bb4_mul36.INPUT1_WIDTH = 32;
defparam int_module_local_bb4_mul36.INPUT2_WIDTH = 32;
defparam int_module_local_bb4_mul36.OUTPUT_WIDTH = 32;
defparam int_module_local_bb4_mul36.LATENCY = 3;
defparam int_module_local_bb4_mul36.SIGNED = 0;

assign local_bb4_mul36_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb4_mul36_output_regs_ready = (&(~(local_bb4_mul36_valid_out_NO_SHIFT_REG) | ~(local_bb4_mul36_stall_in)));
assign merge_node_stall_in_0 = (~(local_bb4_mul36_output_regs_ready) | ~(local_bb4_mul36_inputs_ready));
assign local_bb4_mul36_causedstall = (local_bb4_mul36_inputs_ready && (~(local_bb4_mul36_output_regs_ready) && !(~(local_bb4_mul36_output_regs_ready))));
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[0] = local_lvm_cmp56_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[1] = local_lvm_var__NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[33:2] = local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[65:34] = local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[66] = local_lvm_cmp1430_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[67] = local_lvm_var__u3_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[68] = local_lvm__phi_decision_xor118_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[100:69] = local_lvm_ld__NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[101] = local_lvm_cmp1824_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[102] = local_lvm__phi_decision_xor119_or_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[134:103] = local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[166:135] = local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[198:167] = local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[230:199] = local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[262:231] = local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[294:263] = local_lvm_channelCounter_058_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[358:295] = (local_lvm_arrayidx67_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFFFC);
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[390:359] = local_lvm_mul70_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[422:391] = local_lvm_mul46_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[454:423] = local_lvm_heightCounter_148_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[486:455] = local_lvm_c0_exe1_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[518:487] = local_lvm_mul28_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[550:519] = local_lvm_var__u4_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[582:551] = local_lvm_widthCounter_239_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[614:583] = local_lvm_input_global_id_1_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[646:615] = local_lvm_input_global_id_2_NO_SHIFT_REG;
assign rci_rcnode_1to4_rc1_cmp56_0_reg_1[678:647] = local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_mul36_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb4_mul36_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4_mul36_output_regs_ready)
		begin
			local_bb4_mul36_valid_pipe_0_NO_SHIFT_REG <= local_bb4_mul36_inputs_ready;
			local_bb4_mul36_valid_pipe_1_NO_SHIFT_REG <= local_bb4_mul36_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_mul36_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4_mul36_output_regs_ready)
		begin
			local_bb4_mul36_valid_out_NO_SHIFT_REG <= local_bb4_mul36_valid_pipe_1_NO_SHIFT_REG;
		end
		else
		begin
			if (~(local_bb4_mul36_stall_in))
			begin
				local_bb4_mul36_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 3
//  * capacity = 3
 logic rcnode_1to4_rc1_cmp56_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to4_rc1_cmp56_0_stall_in_NO_SHIFT_REG;
 logic [678:0] rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG;
 logic rcnode_1to4_rc1_cmp56_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [678:0] rcnode_1to4_rc1_cmp56_0_reg_4_NO_SHIFT_REG;
 logic rcnode_1to4_rc1_cmp56_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rcnode_1to4_rc1_cmp56_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rcnode_1to4_rc1_cmp56_0_stall_out_reg_4_IP_NO_SHIFT_REG;
 logic rcnode_1to4_rc1_cmp56_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rcnode_1to4_rc1_cmp56_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to4_rc1_cmp56_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to4_rc1_cmp56_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rcnode_1to4_rc1_cmp56_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rcnode_1to4_rc1_cmp56_0_stall_out_reg_4_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to4_rc1_cmp56_0_reg_1),
	.data_out(rcnode_1to4_rc1_cmp56_0_reg_4_NO_SHIFT_REG)
);

defparam rcnode_1to4_rc1_cmp56_0_reg_4_fifo.DEPTH = 4;
defparam rcnode_1to4_rc1_cmp56_0_reg_4_fifo.DATA_WIDTH = 679;
defparam rcnode_1to4_rc1_cmp56_0_reg_4_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to4_rc1_cmp56_0_reg_4_fifo.IMPL = "ll_reg";

assign rcnode_1to4_rc1_cmp56_0_reg_4_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_1_NO_SHIFT_REG;
assign rcnode_1to4_rc1_cmp56_0_stall_out_reg_4_NO_SHIFT_REG = (~(rcnode_1to4_rc1_cmp56_0_reg_4_inputs_ready_NO_SHIFT_REG) | rcnode_1to4_rc1_cmp56_0_stall_out_reg_4_IP_NO_SHIFT_REG);
assign merge_node_stall_in_1 = rcnode_1to4_rc1_cmp56_0_stall_out_reg_4_NO_SHIFT_REG;
assign rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG = rcnode_1to4_rc1_cmp56_0_reg_4_NO_SHIFT_REG;
assign rcnode_1to4_rc1_cmp56_0_stall_in_reg_4_NO_SHIFT_REG = rcnode_1to4_rc1_cmp56_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to4_rc1_cmp56_0_valid_out_NO_SHIFT_REG = rcnode_1to4_rc1_cmp56_0_valid_out_reg_4_NO_SHIFT_REG;

// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_4to4_bb4_mul36_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to4_bb4_mul36_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to4_bb4_mul36_0_NO_SHIFT_REG;
 logic rnode_4to4_bb4_mul36_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to4_bb4_mul36_0_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb4_mul36_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb4_mul36_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb4_mul36_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_4to4_bb4_mul36_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to4_bb4_mul36_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to4_bb4_mul36_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_4to4_bb4_mul36_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_4to4_bb4_mul36_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb4_mul36),
	.data_out(rnode_4to4_bb4_mul36_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_4to4_bb4_mul36_0_reg_4_fifo.DEPTH = 3;
defparam rnode_4to4_bb4_mul36_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_4to4_bb4_mul36_0_reg_4_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_4to4_bb4_mul36_0_reg_4_fifo.IMPL = "zl_reg";

assign rnode_4to4_bb4_mul36_0_reg_4_inputs_ready_NO_SHIFT_REG = local_bb4_mul36_valid_out_NO_SHIFT_REG;
assign local_bb4_mul36_stall_in = rnode_4to4_bb4_mul36_0_stall_out_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb4_mul36_0_NO_SHIFT_REG = rnode_4to4_bb4_mul36_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb4_mul36_0_stall_in_reg_4_NO_SHIFT_REG = rnode_4to4_bb4_mul36_0_stall_in_NO_SHIFT_REG;
assign rnode_4to4_bb4_mul36_0_valid_out_NO_SHIFT_REG = rnode_4to4_bb4_mul36_0_valid_out_reg_4_NO_SHIFT_REG;

// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg lvb_cmp56_reg_NO_SHIFT_REG;
 reg lvb_var__reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_3_reg_NO_SHIFT_REG;
 reg lvb_cmp1430_reg_NO_SHIFT_REG;
 reg lvb_var__u3_reg_NO_SHIFT_REG;
 reg lvb__phi_decision_xor118_reg_NO_SHIFT_REG;
 reg [31:0] lvb_ld__reg_NO_SHIFT_REG;
 reg lvb_cmp1824_reg_NO_SHIFT_REG;
 reg lvb__phi_decision_xor119_or_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_6148_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_1149_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_3150_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_4_reg_NO_SHIFT_REG;
 reg [31:0] lvb_channelCounter_058_reg_NO_SHIFT_REG;
 reg [63:0] lvb_arrayidx67_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul70_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul46_reg_NO_SHIFT_REG;
 reg [31:0] lvb_heightCounter_148_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c0_exe1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul28_reg_NO_SHIFT_REG;
 reg [31:0] lvb_var__u4_reg_NO_SHIFT_REG;
 reg [31:0] lvb_widthCounter_239_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb4_mul36_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (rnode_4to4_bb4_mul36_0_valid_out_NO_SHIFT_REG & rcnode_1to4_rc1_cmp56_0_valid_out_NO_SHIFT_REG);
assign branch_var__output_regs_ready = (~(stall_in) | ~(branch_node_valid_out_NO_SHIFT_REG));
assign rnode_4to4_bb4_mul36_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_1to4_rc1_cmp56_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_cmp56 = lvb_cmp56_reg_NO_SHIFT_REG;
assign lvb_var_ = lvb_var__reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6 = lvb_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_3 = lvb_memcoalesce_param_extrValue_3_reg_NO_SHIFT_REG;
assign lvb_cmp1430 = lvb_cmp1430_reg_NO_SHIFT_REG;
assign lvb_var__u3 = lvb_var__u3_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor118 = lvb__phi_decision_xor118_reg_NO_SHIFT_REG;
assign lvb_ld_ = lvb_ld__reg_NO_SHIFT_REG;
assign lvb_cmp1824 = lvb_cmp1824_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor119_or = lvb__phi_decision_xor119_or_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_5 = lvb_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6148 = lvb_memcoalesce_param_extrValue_6148_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_1149 = lvb_memcoalesce_param_extrValue_1149_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_3150 = lvb_memcoalesce_param_extrValue_3150_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_4 = lvb_memcoalesce_param_extrValue_4_reg_NO_SHIFT_REG;
assign lvb_channelCounter_058 = lvb_channelCounter_058_reg_NO_SHIFT_REG;
assign lvb_arrayidx67 = lvb_arrayidx67_reg_NO_SHIFT_REG;
assign lvb_mul70 = lvb_mul70_reg_NO_SHIFT_REG;
assign lvb_mul46 = lvb_mul46_reg_NO_SHIFT_REG;
assign lvb_heightCounter_148 = lvb_heightCounter_148_reg_NO_SHIFT_REG;
assign lvb_c0_exe1 = lvb_c0_exe1_reg_NO_SHIFT_REG;
assign lvb_mul28 = lvb_mul28_reg_NO_SHIFT_REG;
assign lvb_var__u4 = lvb_var__u4_reg_NO_SHIFT_REG;
assign lvb_widthCounter_239 = lvb_widthCounter_239_reg_NO_SHIFT_REG;
assign lvb_bb4_mul36 = lvb_bb4_mul36_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1 = lvb_input_global_id_1_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2 = lvb_input_global_id_2_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id = lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;
assign combined_branch_stall_in_signal = stall_in;
assign valid_out = branch_node_valid_out_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
		lvb_cmp56_reg_NO_SHIFT_REG <= 'x;
		lvb_var__reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_3_reg_NO_SHIFT_REG <= 'x;
		lvb_cmp1430_reg_NO_SHIFT_REG <= 'x;
		lvb_var__u3_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision_xor118_reg_NO_SHIFT_REG <= 'x;
		lvb_ld__reg_NO_SHIFT_REG <= 'x;
		lvb_cmp1824_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision_xor119_or_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_6148_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_1149_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_3150_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_4_reg_NO_SHIFT_REG <= 'x;
		lvb_channelCounter_058_reg_NO_SHIFT_REG <= 'x;
		lvb_arrayidx67_reg_NO_SHIFT_REG <= 'x;
		lvb_mul70_reg_NO_SHIFT_REG <= 'x;
		lvb_mul46_reg_NO_SHIFT_REG <= 'x;
		lvb_heightCounter_148_reg_NO_SHIFT_REG <= 'x;
		lvb_c0_exe1_reg_NO_SHIFT_REG <= 'x;
		lvb_mul28_reg_NO_SHIFT_REG <= 'x;
		lvb_var__u4_reg_NO_SHIFT_REG <= 'x;
		lvb_widthCounter_239_reg_NO_SHIFT_REG <= 'x;
		lvb_bb4_mul36_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_cmp56_reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[0];
			lvb_var__reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[1];
			lvb_memcoalesce_param_extrValue_6_reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[33:2];
			lvb_memcoalesce_param_extrValue_3_reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[65:34];
			lvb_cmp1430_reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[66];
			lvb_var__u3_reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[67];
			lvb__phi_decision_xor118_reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[68];
			lvb_ld__reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[100:69];
			lvb_cmp1824_reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[101];
			lvb__phi_decision_xor119_or_reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[102];
			lvb_memcoalesce_param_extrValue_5_reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[134:103];
			lvb_memcoalesce_param_extrValue_6148_reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[166:135];
			lvb_memcoalesce_param_extrValue_1149_reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[198:167];
			lvb_memcoalesce_param_extrValue_3150_reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[230:199];
			lvb_memcoalesce_param_extrValue_4_reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[262:231];
			lvb_channelCounter_058_reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[294:263];
			lvb_arrayidx67_reg_NO_SHIFT_REG <= (rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[358:295] & 64'hFFFFFFFFFFFFFFFC);
			lvb_mul70_reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[390:359];
			lvb_mul46_reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[422:391];
			lvb_heightCounter_148_reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[454:423];
			lvb_c0_exe1_reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[486:455];
			lvb_mul28_reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[518:487];
			lvb_var__u4_reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[550:519];
			lvb_widthCounter_239_reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[582:551];
			lvb_bb4_mul36_reg_NO_SHIFT_REG <= rnode_4to4_bb4_mul36_0_NO_SHIFT_REG;
			lvb_input_global_id_1_reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[614:583];
			lvb_input_global_id_2_reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[646:615];
			lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= rcnode_1to4_rc1_cmp56_0_NO_SHIFT_REG[678:647];
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module convLayer_basic_block_5
	(
		input 		clock,
		input 		resetn,
		input [63:0] 		input_inputFeatureMap,
		input [63:0] 		input_weight,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_0,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_1,
		input 		valid_in_0,
		output 		stall_out_0,
		input 		input_cmp56_0,
		input 		input_var__0,
		input [31:0] 		input_memcoalesce_param_extrValue_6_0,
		input [31:0] 		input_memcoalesce_param_extrValue_3_0,
		input 		input_cmp1430_0,
		input 		input_var__u5_0,
		input 		input__phi_decision_xor118_0,
		input [31:0] 		input_ld__0,
		input 		input_cmp1824_0,
		input 		input__phi_decision_xor119_or_0,
		input [31:0] 		input_memcoalesce_param_extrValue_5_0,
		input [31:0] 		input_memcoalesce_param_extrValue_6148_0,
		input [31:0] 		input_memcoalesce_param_extrValue_1149_0,
		input [31:0] 		input_memcoalesce_param_extrValue_3150_0,
		input [31:0] 		input_memcoalesce_param_extrValue_4_0,
		input [31:0] 		input_channelCounter_058_0,
		input [63:0] 		input_arrayidx67_0,
		input [31:0] 		input_mul70_0,
		input [31:0] 		input_mul46_0,
		input [31:0] 		input_heightCounter_148_0,
		input [31:0] 		input_c0_exe1_0,
		input [31:0] 		input_mul28_0,
		input [31:0] 		input_var__u6_0,
		input [31:0] 		input_widthCounter_239_0,
		input [31:0] 		input_mul36_0,
		input [31:0] 		input_var__u7_0,
		input [31:0] 		input_c_332_0,
		input [31:0] 		input_result_331_0,
		input [31:0] 		input_i_426_0,
		input [31:0] 		input_j_522_0,
		input [31:0] 		input_result_521_0,
		input [31:0] 		input_global_id_1_0,
		input [31:0] 		input_global_id_2_0,
		input [31:0] 		input_acl_hw_wg_id_0,
		input 		valid_in_1,
		output 		stall_out_1,
		input 		input_cmp56_1,
		input 		input_var__1,
		input [31:0] 		input_memcoalesce_param_extrValue_6_1,
		input [31:0] 		input_memcoalesce_param_extrValue_3_1,
		input 		input_cmp1430_1,
		input 		input_var__u5_1,
		input 		input__phi_decision_xor118_1,
		input [31:0] 		input_ld__1,
		input 		input_cmp1824_1,
		input 		input__phi_decision_xor119_or_1,
		input [31:0] 		input_memcoalesce_param_extrValue_5_1,
		input [31:0] 		input_memcoalesce_param_extrValue_6148_1,
		input [31:0] 		input_memcoalesce_param_extrValue_1149_1,
		input [31:0] 		input_memcoalesce_param_extrValue_3150_1,
		input [31:0] 		input_memcoalesce_param_extrValue_4_1,
		input [31:0] 		input_channelCounter_058_1,
		input [63:0] 		input_arrayidx67_1,
		input [31:0] 		input_mul70_1,
		input [31:0] 		input_mul46_1,
		input [31:0] 		input_heightCounter_148_1,
		input [31:0] 		input_c0_exe1_1,
		input [31:0] 		input_mul28_1,
		input [31:0] 		input_var__u6_1,
		input [31:0] 		input_widthCounter_239_1,
		input [31:0] 		input_mul36_1,
		input [31:0] 		input_var__u7_1,
		input [31:0] 		input_c_332_1,
		input [31:0] 		input_result_331_1,
		input [31:0] 		input_i_426_1,
		input [31:0] 		input_j_522_1,
		input [31:0] 		input_result_521_1,
		input [31:0] 		input_global_id_1_1,
		input [31:0] 		input_global_id_2_1,
		input [31:0] 		input_acl_hw_wg_id_1,
		output 		valid_out_0,
		input 		stall_in_0,
		output 		lvb_cmp56_0,
		output 		lvb_var__0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_3_0,
		output 		lvb_cmp1430_0,
		output 		lvb_var__u5_0,
		output 		lvb__phi_decision_xor118_0,
		output [31:0] 		lvb_ld__0,
		output 		lvb_cmp1824_0,
		output 		lvb__phi_decision_xor119_or_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_5_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6148_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_1149_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_3150_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_4_0,
		output [31:0] 		lvb_channelCounter_058_0,
		output [63:0] 		lvb_arrayidx67_0,
		output [31:0] 		lvb_mul70_0,
		output [31:0] 		lvb_mul46_0,
		output [31:0] 		lvb_heightCounter_148_0,
		output [31:0] 		lvb_c0_exe1_0,
		output [31:0] 		lvb_mul28_0,
		output [31:0] 		lvb_var__u6_0,
		output [31:0] 		lvb_widthCounter_239_0,
		output [31:0] 		lvb_mul36_0,
		output [319:0] 		lvb_bb5_c2_exit_c2_exi9_0,
		output [31:0] 		lvb_bb5_c2_exe3_0,
		output [31:0] 		lvb_bb5_c2_exe4_0,
		output [31:0] 		lvb_bb5_c2_exe5_0,
		output [31:0] 		lvb_bb5_c2_exe6_0,
		output [31:0] 		lvb_bb5_c2_exe7_0,
		output [31:0] 		lvb_bb5_c2_exe8_0,
		output [31:0] 		lvb_input_global_id_1_0,
		output [31:0] 		lvb_input_global_id_2_0,
		output [31:0] 		lvb_input_acl_hw_wg_id_0,
		output 		valid_out_1,
		input 		stall_in_1,
		output 		lvb_cmp56_1,
		output 		lvb_var__1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_3_1,
		output 		lvb_cmp1430_1,
		output 		lvb_var__u5_1,
		output 		lvb__phi_decision_xor118_1,
		output [31:0] 		lvb_ld__1,
		output 		lvb_cmp1824_1,
		output 		lvb__phi_decision_xor119_or_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_5_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6148_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_1149_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_3150_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_4_1,
		output [31:0] 		lvb_channelCounter_058_1,
		output [63:0] 		lvb_arrayidx67_1,
		output [31:0] 		lvb_mul70_1,
		output [31:0] 		lvb_mul46_1,
		output [31:0] 		lvb_heightCounter_148_1,
		output [31:0] 		lvb_c0_exe1_1,
		output [31:0] 		lvb_mul28_1,
		output [31:0] 		lvb_var__u6_1,
		output [31:0] 		lvb_widthCounter_239_1,
		output [31:0] 		lvb_mul36_1,
		output [319:0] 		lvb_bb5_c2_exit_c2_exi9_1,
		output [31:0] 		lvb_bb5_c2_exe3_1,
		output [31:0] 		lvb_bb5_c2_exe4_1,
		output [31:0] 		lvb_bb5_c2_exe5_1,
		output [31:0] 		lvb_bb5_c2_exe6_1,
		output [31:0] 		lvb_bb5_c2_exe7_1,
		output [31:0] 		lvb_bb5_c2_exe8_1,
		output [31:0] 		lvb_input_global_id_1_1,
		output [31:0] 		lvb_input_global_id_2_1,
		output [31:0] 		lvb_input_acl_hw_wg_id_1,
		input [31:0] 		workgroup_size,
		input 		start,
		output 		avm_local_bb5_ld__enable,
		input [511:0] 		avm_local_bb5_ld__readdata,
		input 		avm_local_bb5_ld__readdatavalid,
		input 		avm_local_bb5_ld__waitrequest,
		output [31:0] 		avm_local_bb5_ld__address,
		output 		avm_local_bb5_ld__read,
		output 		avm_local_bb5_ld__write,
		input 		avm_local_bb5_ld__writeack,
		output [511:0] 		avm_local_bb5_ld__writedata,
		output [63:0] 		avm_local_bb5_ld__byteenable,
		output [4:0] 		avm_local_bb5_ld__burstcount,
		output 		local_bb5_ld__active,
		input 		clock2x,
		output 		avm_local_bb5_ld__u8_enable,
		input [511:0] 		avm_local_bb5_ld__u8_readdata,
		input 		avm_local_bb5_ld__u8_readdatavalid,
		input 		avm_local_bb5_ld__u8_waitrequest,
		output [31:0] 		avm_local_bb5_ld__u8_address,
		output 		avm_local_bb5_ld__u8_read,
		output 		avm_local_bb5_ld__u8_write,
		input 		avm_local_bb5_ld__u8_writeack,
		output [511:0] 		avm_local_bb5_ld__u8_writedata,
		output [63:0] 		avm_local_bb5_ld__u8_byteenable,
		output [4:0] 		avm_local_bb5_ld__u8_burstcount,
		output 		local_bb5_ld__u8_active
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((valid_in_0 & valid_in_1) & ~((stall_out_0 | stall_out_1)));
assign _exit = ((valid_out_0 & valid_out_1) & ~((stall_in_0 | stall_in_1)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_node_stall_in_4;
 reg merge_node_valid_out_4_NO_SHIFT_REG;
wire merge_node_stall_in_5;
 reg merge_node_valid_out_5_NO_SHIFT_REG;
wire merge_node_stall_in_6;
 reg merge_node_valid_out_6_NO_SHIFT_REG;
wire merge_node_stall_in_7;
 reg merge_node_valid_out_7_NO_SHIFT_REG;
wire merge_node_stall_in_8;
 reg merge_node_valid_out_8_NO_SHIFT_REG;
wire merge_node_stall_in_9;
 reg merge_node_valid_out_9_NO_SHIFT_REG;
wire merge_node_stall_in_10;
 reg merge_node_valid_out_10_NO_SHIFT_REG;
wire merge_node_stall_in_11;
 reg merge_node_valid_out_11_NO_SHIFT_REG;
wire merge_node_stall_in_12;
 reg merge_node_valid_out_12_NO_SHIFT_REG;
wire merge_node_stall_in_13;
 reg merge_node_valid_out_13_NO_SHIFT_REG;
wire merge_node_stall_in_14;
 reg merge_node_valid_out_14_NO_SHIFT_REG;
wire merge_node_stall_in_15;
 reg merge_node_valid_out_15_NO_SHIFT_REG;
wire merge_node_stall_in_16;
 reg merge_node_valid_out_16_NO_SHIFT_REG;
wire merge_node_stall_in_17;
 reg merge_node_valid_out_17_NO_SHIFT_REG;
wire merge_node_stall_in_18;
 reg merge_node_valid_out_18_NO_SHIFT_REG;
wire merge_node_stall_in_19;
 reg merge_node_valid_out_19_NO_SHIFT_REG;
wire merge_node_stall_in_20;
 reg merge_node_valid_out_20_NO_SHIFT_REG;
wire merge_node_stall_in_21;
 reg merge_node_valid_out_21_NO_SHIFT_REG;
wire merge_node_stall_in_22;
 reg merge_node_valid_out_22_NO_SHIFT_REG;
wire merge_node_stall_in_23;
 reg merge_node_valid_out_23_NO_SHIFT_REG;
wire merge_node_stall_in_24;
 reg merge_node_valid_out_24_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
 reg input_cmp56_0_staging_reg_NO_SHIFT_REG;
 reg input_var__0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_3_0_staging_reg_NO_SHIFT_REG;
 reg input_cmp1430_0_staging_reg_NO_SHIFT_REG;
 reg input_var__u5_0_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor118_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__0_staging_reg_NO_SHIFT_REG;
 reg input_cmp1824_0_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor119_or_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6148_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_1149_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_3150_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_4_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_058_0_staging_reg_NO_SHIFT_REG;
 reg [63:0] input_arrayidx67_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul70_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul46_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_heightCounter_148_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe1_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul28_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__u6_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_widthCounter_239_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul36_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__u7_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c_332_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_result_331_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_i_426_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_j_522_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_result_521_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
 reg local_lvm_cmp56_NO_SHIFT_REG;
 reg local_lvm_var__NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG;
 reg local_lvm_cmp1430_NO_SHIFT_REG;
 reg local_lvm_var__u5_NO_SHIFT_REG;
 reg local_lvm__phi_decision_xor118_NO_SHIFT_REG;
 reg [31:0] local_lvm_ld__NO_SHIFT_REG;
 reg local_lvm_cmp1824_NO_SHIFT_REG;
 reg local_lvm__phi_decision_xor119_or_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG;
 reg [31:0] local_lvm_channelCounter_058_NO_SHIFT_REG;
 reg [63:0] local_lvm_arrayidx67_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul70_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul46_NO_SHIFT_REG;
 reg [31:0] local_lvm_heightCounter_148_NO_SHIFT_REG;
 reg [31:0] local_lvm_c0_exe1_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul28_NO_SHIFT_REG;
 reg [31:0] local_lvm_var__u6_NO_SHIFT_REG;
 reg [31:0] local_lvm_widthCounter_239_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul36_NO_SHIFT_REG;
 reg [31:0] local_lvm_var__u7_NO_SHIFT_REG;
 reg [31:0] local_lvm_c_332_NO_SHIFT_REG;
 reg [31:0] local_lvm_result_331_NO_SHIFT_REG;
 reg [31:0] local_lvm_i_426_NO_SHIFT_REG;
 reg [31:0] local_lvm_j_522_NO_SHIFT_REG;
 reg [31:0] local_lvm_result_521_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;
 reg input_cmp56_1_staging_reg_NO_SHIFT_REG;
 reg input_var__1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_3_1_staging_reg_NO_SHIFT_REG;
 reg input_cmp1430_1_staging_reg_NO_SHIFT_REG;
 reg input_var__u5_1_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor118_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__1_staging_reg_NO_SHIFT_REG;
 reg input_cmp1824_1_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor119_or_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6148_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_1149_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_3150_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_4_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_058_1_staging_reg_NO_SHIFT_REG;
 reg [63:0] input_arrayidx67_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul70_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul46_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_heightCounter_148_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe1_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul28_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__u6_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_widthCounter_239_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul36_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__u7_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c_332_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_result_331_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_i_426_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_j_522_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_result_521_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG) | (merge_node_stall_in_4 & merge_node_valid_out_4_NO_SHIFT_REG) | (merge_node_stall_in_5 & merge_node_valid_out_5_NO_SHIFT_REG) | (merge_node_stall_in_6 & merge_node_valid_out_6_NO_SHIFT_REG) | (merge_node_stall_in_7 & merge_node_valid_out_7_NO_SHIFT_REG) | (merge_node_stall_in_8 & merge_node_valid_out_8_NO_SHIFT_REG) | (merge_node_stall_in_9 & merge_node_valid_out_9_NO_SHIFT_REG) | (merge_node_stall_in_10 & merge_node_valid_out_10_NO_SHIFT_REG) | (merge_node_stall_in_11 & merge_node_valid_out_11_NO_SHIFT_REG) | (merge_node_stall_in_12 & merge_node_valid_out_12_NO_SHIFT_REG) | (merge_node_stall_in_13 & merge_node_valid_out_13_NO_SHIFT_REG) | (merge_node_stall_in_14 & merge_node_valid_out_14_NO_SHIFT_REG) | (merge_node_stall_in_15 & merge_node_valid_out_15_NO_SHIFT_REG) | (merge_node_stall_in_16 & merge_node_valid_out_16_NO_SHIFT_REG) | (merge_node_stall_in_17 & merge_node_valid_out_17_NO_SHIFT_REG) | (merge_node_stall_in_18 & merge_node_valid_out_18_NO_SHIFT_REG) | (merge_node_stall_in_19 & merge_node_valid_out_19_NO_SHIFT_REG) | (merge_node_stall_in_20 & merge_node_valid_out_20_NO_SHIFT_REG) | (merge_node_stall_in_21 & merge_node_valid_out_21_NO_SHIFT_REG) | (merge_node_stall_in_22 & merge_node_valid_out_22_NO_SHIFT_REG) | (merge_node_stall_in_23 & merge_node_valid_out_23_NO_SHIFT_REG) | (merge_node_stall_in_24 & merge_node_valid_out_24_NO_SHIFT_REG));
assign stall_out_0 = merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
assign stall_out_1 = merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_0_staging_reg_NO_SHIFT_REG | valid_in_0))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		if ((merge_node_valid_in_1_staging_reg_NO_SHIFT_REG | valid_in_1))
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b1;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
		end
		else
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b0;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_cmp56_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_3_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1430_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u5_0_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor118_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__0_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1824_0_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor119_or_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6148_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_1149_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_3150_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_4_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_058_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_arrayidx67_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul70_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul46_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_heightCounter_148_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe1_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul28_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u6_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_widthCounter_239_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul36_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u7_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_c_332_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_result_331_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_i_426_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_j_522_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_result_521_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		input_cmp56_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_3_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1430_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u5_1_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor118_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__1_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1824_1_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor119_or_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6148_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_1149_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_3150_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_4_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_058_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_arrayidx67_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul70_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul46_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_heightCounter_148_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe1_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul28_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u6_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_widthCounter_239_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul36_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u7_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_c_332_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_result_331_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_i_426_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_j_522_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_result_521_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_0_staging_reg_NO_SHIFT_REG))
			begin
				input_cmp56_0_staging_reg_NO_SHIFT_REG <= input_cmp56_0;
				input_var__0_staging_reg_NO_SHIFT_REG <= input_var__0;
				input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_0;
				input_memcoalesce_param_extrValue_3_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_0;
				input_cmp1430_0_staging_reg_NO_SHIFT_REG <= input_cmp1430_0;
				input_var__u5_0_staging_reg_NO_SHIFT_REG <= input_var__u5_0;
				input__phi_decision_xor118_0_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor118_0;
				input_ld__0_staging_reg_NO_SHIFT_REG <= input_ld__0;
				input_cmp1824_0_staging_reg_NO_SHIFT_REG <= input_cmp1824_0;
				input__phi_decision_xor119_or_0_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor119_or_0;
				input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_0;
				input_memcoalesce_param_extrValue_6148_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_0;
				input_memcoalesce_param_extrValue_1149_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_0;
				input_memcoalesce_param_extrValue_3150_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_0;
				input_memcoalesce_param_extrValue_4_0_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_0;
				input_channelCounter_058_0_staging_reg_NO_SHIFT_REG <= input_channelCounter_058_0;
				input_arrayidx67_0_staging_reg_NO_SHIFT_REG <= input_arrayidx67_0;
				input_mul70_0_staging_reg_NO_SHIFT_REG <= input_mul70_0;
				input_mul46_0_staging_reg_NO_SHIFT_REG <= input_mul46_0;
				input_heightCounter_148_0_staging_reg_NO_SHIFT_REG <= input_heightCounter_148_0;
				input_c0_exe1_0_staging_reg_NO_SHIFT_REG <= input_c0_exe1_0;
				input_mul28_0_staging_reg_NO_SHIFT_REG <= input_mul28_0;
				input_var__u6_0_staging_reg_NO_SHIFT_REG <= input_var__u6_0;
				input_widthCounter_239_0_staging_reg_NO_SHIFT_REG <= input_widthCounter_239_0;
				input_mul36_0_staging_reg_NO_SHIFT_REG <= input_mul36_0;
				input_var__u7_0_staging_reg_NO_SHIFT_REG <= input_var__u7_0;
				input_c_332_0_staging_reg_NO_SHIFT_REG <= input_c_332_0;
				input_result_331_0_staging_reg_NO_SHIFT_REG <= input_result_331_0;
				input_i_426_0_staging_reg_NO_SHIFT_REG <= input_i_426_0;
				input_j_522_0_staging_reg_NO_SHIFT_REG <= input_j_522_0;
				input_result_521_0_staging_reg_NO_SHIFT_REG <= input_result_521_0;
				input_global_id_1_0_staging_reg_NO_SHIFT_REG <= input_global_id_1_0;
				input_global_id_2_0_staging_reg_NO_SHIFT_REG <= input_global_id_2_0;
				input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= valid_in_0;
			end
		end
		else
		begin
			merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
		if (((merge_block_selector_NO_SHIFT_REG != 1'b1) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_1_staging_reg_NO_SHIFT_REG))
			begin
				input_cmp56_1_staging_reg_NO_SHIFT_REG <= input_cmp56_1;
				input_var__1_staging_reg_NO_SHIFT_REG <= input_var__1;
				input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_1;
				input_memcoalesce_param_extrValue_3_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_1;
				input_cmp1430_1_staging_reg_NO_SHIFT_REG <= input_cmp1430_1;
				input_var__u5_1_staging_reg_NO_SHIFT_REG <= input_var__u5_1;
				input__phi_decision_xor118_1_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor118_1;
				input_ld__1_staging_reg_NO_SHIFT_REG <= input_ld__1;
				input_cmp1824_1_staging_reg_NO_SHIFT_REG <= input_cmp1824_1;
				input__phi_decision_xor119_or_1_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor119_or_1;
				input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_1;
				input_memcoalesce_param_extrValue_6148_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_1;
				input_memcoalesce_param_extrValue_1149_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_1;
				input_memcoalesce_param_extrValue_3150_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_1;
				input_memcoalesce_param_extrValue_4_1_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_1;
				input_channelCounter_058_1_staging_reg_NO_SHIFT_REG <= input_channelCounter_058_1;
				input_arrayidx67_1_staging_reg_NO_SHIFT_REG <= input_arrayidx67_1;
				input_mul70_1_staging_reg_NO_SHIFT_REG <= input_mul70_1;
				input_mul46_1_staging_reg_NO_SHIFT_REG <= input_mul46_1;
				input_heightCounter_148_1_staging_reg_NO_SHIFT_REG <= input_heightCounter_148_1;
				input_c0_exe1_1_staging_reg_NO_SHIFT_REG <= input_c0_exe1_1;
				input_mul28_1_staging_reg_NO_SHIFT_REG <= input_mul28_1;
				input_var__u6_1_staging_reg_NO_SHIFT_REG <= input_var__u6_1;
				input_widthCounter_239_1_staging_reg_NO_SHIFT_REG <= input_widthCounter_239_1;
				input_mul36_1_staging_reg_NO_SHIFT_REG <= input_mul36_1;
				input_var__u7_1_staging_reg_NO_SHIFT_REG <= input_var__u7_1;
				input_c_332_1_staging_reg_NO_SHIFT_REG <= input_c_332_1;
				input_result_331_1_staging_reg_NO_SHIFT_REG <= input_result_331_1;
				input_i_426_1_staging_reg_NO_SHIFT_REG <= input_i_426_1;
				input_j_522_1_staging_reg_NO_SHIFT_REG <= input_j_522_1;
				input_result_521_1_staging_reg_NO_SHIFT_REG <= input_result_521_1;
				input_global_id_1_1_staging_reg_NO_SHIFT_REG <= input_global_id_1_1;
				input_global_id_2_1_staging_reg_NO_SHIFT_REG <= input_global_id_2_1;
				input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= valid_in_1;
			end
		end
		else
		begin
			merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_0_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_cmp56_NO_SHIFT_REG <= input_cmp56_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_0_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1430_NO_SHIFT_REG <= input_cmp1430_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u5_NO_SHIFT_REG <= input_var__u5_0_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor118_NO_SHIFT_REG <= input__phi_decision_xor118_0_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__0_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1824_NO_SHIFT_REG <= input_cmp1824_0_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor119_or_NO_SHIFT_REG <= input__phi_decision_xor119_or_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_0_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_0_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_058_NO_SHIFT_REG <= input_channelCounter_058_0_staging_reg_NO_SHIFT_REG;
					local_lvm_arrayidx67_NO_SHIFT_REG <= input_arrayidx67_0_staging_reg_NO_SHIFT_REG;
					local_lvm_mul70_NO_SHIFT_REG <= input_mul70_0_staging_reg_NO_SHIFT_REG;
					local_lvm_mul46_NO_SHIFT_REG <= input_mul46_0_staging_reg_NO_SHIFT_REG;
					local_lvm_heightCounter_148_NO_SHIFT_REG <= input_heightCounter_148_0_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_0_staging_reg_NO_SHIFT_REG;
					local_lvm_mul28_NO_SHIFT_REG <= input_mul28_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u6_NO_SHIFT_REG <= input_var__u6_0_staging_reg_NO_SHIFT_REG;
					local_lvm_widthCounter_239_NO_SHIFT_REG <= input_widthCounter_239_0_staging_reg_NO_SHIFT_REG;
					local_lvm_mul36_NO_SHIFT_REG <= input_mul36_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u7_NO_SHIFT_REG <= input_var__u7_0_staging_reg_NO_SHIFT_REG;
					local_lvm_c_332_NO_SHIFT_REG <= input_c_332_0_staging_reg_NO_SHIFT_REG;
					local_lvm_result_331_NO_SHIFT_REG <= input_result_331_0_staging_reg_NO_SHIFT_REG;
					local_lvm_i_426_NO_SHIFT_REG <= input_i_426_0_staging_reg_NO_SHIFT_REG;
					local_lvm_j_522_NO_SHIFT_REG <= input_j_522_0_staging_reg_NO_SHIFT_REG;
					local_lvm_result_521_NO_SHIFT_REG <= input_result_521_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_cmp56_NO_SHIFT_REG <= input_cmp56_0;
					local_lvm_var__NO_SHIFT_REG <= input_var__0;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_0;
					local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_0;
					local_lvm_cmp1430_NO_SHIFT_REG <= input_cmp1430_0;
					local_lvm_var__u5_NO_SHIFT_REG <= input_var__u5_0;
					local_lvm__phi_decision_xor118_NO_SHIFT_REG <= input__phi_decision_xor118_0;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__0;
					local_lvm_cmp1824_NO_SHIFT_REG <= input_cmp1824_0;
					local_lvm__phi_decision_xor119_or_NO_SHIFT_REG <= input__phi_decision_xor119_or_0;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_0;
					local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_0;
					local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_0;
					local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_0;
					local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_0;
					local_lvm_channelCounter_058_NO_SHIFT_REG <= input_channelCounter_058_0;
					local_lvm_arrayidx67_NO_SHIFT_REG <= input_arrayidx67_0;
					local_lvm_mul70_NO_SHIFT_REG <= input_mul70_0;
					local_lvm_mul46_NO_SHIFT_REG <= input_mul46_0;
					local_lvm_heightCounter_148_NO_SHIFT_REG <= input_heightCounter_148_0;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_0;
					local_lvm_mul28_NO_SHIFT_REG <= input_mul28_0;
					local_lvm_var__u6_NO_SHIFT_REG <= input_var__u6_0;
					local_lvm_widthCounter_239_NO_SHIFT_REG <= input_widthCounter_239_0;
					local_lvm_mul36_NO_SHIFT_REG <= input_mul36_0;
					local_lvm_var__u7_NO_SHIFT_REG <= input_var__u7_0;
					local_lvm_c_332_NO_SHIFT_REG <= input_c_332_0;
					local_lvm_result_331_NO_SHIFT_REG <= input_result_331_0;
					local_lvm_i_426_NO_SHIFT_REG <= input_i_426_0;
					local_lvm_j_522_NO_SHIFT_REG <= input_j_522_0;
					local_lvm_result_521_NO_SHIFT_REG <= input_result_521_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_0;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_0;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				end
			end

			1'b1:
			begin
				if (merge_node_valid_in_1_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_cmp56_NO_SHIFT_REG <= input_cmp56_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_1_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1430_NO_SHIFT_REG <= input_cmp1430_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u5_NO_SHIFT_REG <= input_var__u5_1_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor118_NO_SHIFT_REG <= input__phi_decision_xor118_1_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__1_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1824_NO_SHIFT_REG <= input_cmp1824_1_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor119_or_NO_SHIFT_REG <= input__phi_decision_xor119_or_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_1_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_1_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_058_NO_SHIFT_REG <= input_channelCounter_058_1_staging_reg_NO_SHIFT_REG;
					local_lvm_arrayidx67_NO_SHIFT_REG <= input_arrayidx67_1_staging_reg_NO_SHIFT_REG;
					local_lvm_mul70_NO_SHIFT_REG <= input_mul70_1_staging_reg_NO_SHIFT_REG;
					local_lvm_mul46_NO_SHIFT_REG <= input_mul46_1_staging_reg_NO_SHIFT_REG;
					local_lvm_heightCounter_148_NO_SHIFT_REG <= input_heightCounter_148_1_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_1_staging_reg_NO_SHIFT_REG;
					local_lvm_mul28_NO_SHIFT_REG <= input_mul28_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u6_NO_SHIFT_REG <= input_var__u6_1_staging_reg_NO_SHIFT_REG;
					local_lvm_widthCounter_239_NO_SHIFT_REG <= input_widthCounter_239_1_staging_reg_NO_SHIFT_REG;
					local_lvm_mul36_NO_SHIFT_REG <= input_mul36_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u7_NO_SHIFT_REG <= input_var__u7_1_staging_reg_NO_SHIFT_REG;
					local_lvm_c_332_NO_SHIFT_REG <= input_c_332_1_staging_reg_NO_SHIFT_REG;
					local_lvm_result_331_NO_SHIFT_REG <= input_result_331_1_staging_reg_NO_SHIFT_REG;
					local_lvm_i_426_NO_SHIFT_REG <= input_i_426_1_staging_reg_NO_SHIFT_REG;
					local_lvm_j_522_NO_SHIFT_REG <= input_j_522_1_staging_reg_NO_SHIFT_REG;
					local_lvm_result_521_NO_SHIFT_REG <= input_result_521_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_cmp56_NO_SHIFT_REG <= input_cmp56_1;
					local_lvm_var__NO_SHIFT_REG <= input_var__1;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_1;
					local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_1;
					local_lvm_cmp1430_NO_SHIFT_REG <= input_cmp1430_1;
					local_lvm_var__u5_NO_SHIFT_REG <= input_var__u5_1;
					local_lvm__phi_decision_xor118_NO_SHIFT_REG <= input__phi_decision_xor118_1;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__1;
					local_lvm_cmp1824_NO_SHIFT_REG <= input_cmp1824_1;
					local_lvm__phi_decision_xor119_or_NO_SHIFT_REG <= input__phi_decision_xor119_or_1;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_1;
					local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_1;
					local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_1;
					local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_1;
					local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_1;
					local_lvm_channelCounter_058_NO_SHIFT_REG <= input_channelCounter_058_1;
					local_lvm_arrayidx67_NO_SHIFT_REG <= input_arrayidx67_1;
					local_lvm_mul70_NO_SHIFT_REG <= input_mul70_1;
					local_lvm_mul46_NO_SHIFT_REG <= input_mul46_1;
					local_lvm_heightCounter_148_NO_SHIFT_REG <= input_heightCounter_148_1;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_1;
					local_lvm_mul28_NO_SHIFT_REG <= input_mul28_1;
					local_lvm_var__u6_NO_SHIFT_REG <= input_var__u6_1;
					local_lvm_widthCounter_239_NO_SHIFT_REG <= input_widthCounter_239_1;
					local_lvm_mul36_NO_SHIFT_REG <= input_mul36_1;
					local_lvm_var__u7_NO_SHIFT_REG <= input_var__u7_1;
					local_lvm_c_332_NO_SHIFT_REG <= input_c_332_1;
					local_lvm_result_331_NO_SHIFT_REG <= input_result_331_1;
					local_lvm_i_426_NO_SHIFT_REG <= input_i_426_1;
					local_lvm_j_522_NO_SHIFT_REG <= input_j_522_1;
					local_lvm_result_521_NO_SHIFT_REG <= input_result_521_1;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_1;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_8_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_9_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_10_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_11_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_12_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_13_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_14_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_15_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_16_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_17_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_18_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_19_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_20_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_21_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_22_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_23_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_24_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_8_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_9_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_10_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_11_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_12_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_13_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_14_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_15_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_16_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_17_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_18_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_19_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_20_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_21_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_22_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_23_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_24_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_8))
			begin
				merge_node_valid_out_8_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_9))
			begin
				merge_node_valid_out_9_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_10))
			begin
				merge_node_valid_out_10_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_11))
			begin
				merge_node_valid_out_11_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_12))
			begin
				merge_node_valid_out_12_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_13))
			begin
				merge_node_valid_out_13_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_14))
			begin
				merge_node_valid_out_14_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_15))
			begin
				merge_node_valid_out_15_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_16))
			begin
				merge_node_valid_out_16_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_17))
			begin
				merge_node_valid_out_17_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_18))
			begin
				merge_node_valid_out_18_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_19))
			begin
				merge_node_valid_out_19_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_20))
			begin
				merge_node_valid_out_20_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_21))
			begin
				merge_node_valid_out_21_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_22))
			begin
				merge_node_valid_out_22_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_23))
			begin
				merge_node_valid_out_23_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_24))
			begin
				merge_node_valid_out_24_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(*)
begin
	merge_node_valid_out_1_NO_SHIFT_REG = merge_node_valid_out_0_NO_SHIFT_REG;
	merge_node_valid_out_2_NO_SHIFT_REG = merge_node_valid_out_0_NO_SHIFT_REG;
	merge_node_valid_out_3_NO_SHIFT_REG = merge_node_valid_out_0_NO_SHIFT_REG;
	merge_node_valid_out_4_NO_SHIFT_REG = merge_node_valid_out_0_NO_SHIFT_REG;
	merge_node_valid_out_5_NO_SHIFT_REG = merge_node_valid_out_0_NO_SHIFT_REG;
	merge_node_valid_out_6_NO_SHIFT_REG = merge_node_valid_out_0_NO_SHIFT_REG;
	merge_node_valid_out_7_NO_SHIFT_REG = merge_node_valid_out_0_NO_SHIFT_REG;
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_c1_eni131_stall_local;
wire [287:0] local_bb5_c1_eni131;

assign local_bb5_c1_eni131[31:0] = 32'bx;
assign local_bb5_c1_eni131[63:32] = local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
assign local_bb5_c1_eni131[287:64] = 224'bx;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_mul46_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_mul46_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_mul46_0_NO_SHIFT_REG;
 logic rnode_1to2_mul46_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_mul46_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_mul46_1_NO_SHIFT_REG;
 logic rnode_1to2_mul46_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_mul46_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_mul46_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_mul46_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_mul46_0_stall_out_reg_2_NO_SHIFT_REG;
 reg rnode_1to2_mul46_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to2_mul46_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_mul46_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_mul46_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_mul46_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_mul46_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_mul46_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_lvm_mul46_NO_SHIFT_REG),
	.data_out(rnode_1to2_mul46_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_mul46_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_mul46_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_mul46_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_mul46_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_mul46_0_reg_2_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_8_NO_SHIFT_REG;
assign merge_node_stall_in_8 = rnode_1to2_mul46_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_mul46_0_stall_in_0_reg_2_NO_SHIFT_REG = ((rnode_1to2_mul46_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to2_mul46_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to2_mul46_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to2_mul46_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to2_mul46_0_valid_out_0_NO_SHIFT_REG = (rnode_1to2_mul46_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_mul46_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_mul46_0_valid_out_1_NO_SHIFT_REG = (rnode_1to2_mul46_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_mul46_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to2_mul46_0_NO_SHIFT_REG = rnode_1to2_mul46_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_mul46_1_NO_SHIFT_REG = rnode_1to2_mul46_0_reg_2_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to2_mul46_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_mul46_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to2_mul46_0_consumed_0_NO_SHIFT_REG <= (rnode_1to2_mul46_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_mul46_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to2_mul46_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to2_mul46_0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_mul46_0_consumed_1_NO_SHIFT_REG <= (rnode_1to2_mul46_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_mul46_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to2_mul46_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to2_mul46_0_stall_in_0_reg_2_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_c_332_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_c_332_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_c_332_0_NO_SHIFT_REG;
 logic rnode_1to2_c_332_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_c_332_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_c_332_1_NO_SHIFT_REG;
 logic rnode_1to2_c_332_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_c_332_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_c_332_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_c_332_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_c_332_0_stall_out_reg_2_NO_SHIFT_REG;
 reg rnode_1to2_c_332_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to2_c_332_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_c_332_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_c_332_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_c_332_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_c_332_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_c_332_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_lvm_c_332_NO_SHIFT_REG),
	.data_out(rnode_1to2_c_332_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_c_332_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_c_332_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_c_332_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_c_332_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_c_332_0_reg_2_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_9_NO_SHIFT_REG;
assign merge_node_stall_in_9 = rnode_1to2_c_332_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_c_332_0_stall_in_0_reg_2_NO_SHIFT_REG = ((rnode_1to2_c_332_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to2_c_332_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to2_c_332_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to2_c_332_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to2_c_332_0_valid_out_0_NO_SHIFT_REG = (rnode_1to2_c_332_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_c_332_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_c_332_0_valid_out_1_NO_SHIFT_REG = (rnode_1to2_c_332_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_c_332_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to2_c_332_0_NO_SHIFT_REG = rnode_1to2_c_332_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_c_332_1_NO_SHIFT_REG = rnode_1to2_c_332_0_reg_2_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to2_c_332_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_c_332_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to2_c_332_0_consumed_0_NO_SHIFT_REG <= (rnode_1to2_c_332_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_c_332_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to2_c_332_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to2_c_332_0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_c_332_0_consumed_1_NO_SHIFT_REG <= (rnode_1to2_c_332_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_c_332_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to2_c_332_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to2_c_332_0_stall_in_0_reg_2_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_ld__0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_ld__0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_ld__0_NO_SHIFT_REG;
 logic rnode_1to2_ld__0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_ld__0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_ld__1_NO_SHIFT_REG;
 logic rnode_1to2_ld__0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_ld__0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_ld__0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_ld__0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_ld__0_stall_out_reg_2_NO_SHIFT_REG;
 reg rnode_1to2_ld__0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to2_ld__0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_ld__0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_ld__0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_ld__0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_ld__0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_ld__0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_lvm_ld__NO_SHIFT_REG),
	.data_out(rnode_1to2_ld__0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_ld__0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_ld__0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_ld__0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_ld__0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_ld__0_reg_2_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_10_NO_SHIFT_REG;
assign merge_node_stall_in_10 = rnode_1to2_ld__0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_ld__0_stall_in_0_reg_2_NO_SHIFT_REG = ((rnode_1to2_ld__0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to2_ld__0_consumed_0_NO_SHIFT_REG)) | (rnode_1to2_ld__0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to2_ld__0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to2_ld__0_valid_out_0_NO_SHIFT_REG = (rnode_1to2_ld__0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_ld__0_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_ld__0_valid_out_1_NO_SHIFT_REG = (rnode_1to2_ld__0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_ld__0_consumed_1_NO_SHIFT_REG));
assign rnode_1to2_ld__0_NO_SHIFT_REG = rnode_1to2_ld__0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_ld__1_NO_SHIFT_REG = rnode_1to2_ld__0_reg_2_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to2_ld__0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_ld__0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to2_ld__0_consumed_0_NO_SHIFT_REG <= (rnode_1to2_ld__0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_ld__0_consumed_0_NO_SHIFT_REG | ~(rnode_1to2_ld__0_stall_in_0_NO_SHIFT_REG)) & rnode_1to2_ld__0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_ld__0_consumed_1_NO_SHIFT_REG <= (rnode_1to2_ld__0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_ld__0_consumed_1_NO_SHIFT_REG | ~(rnode_1to2_ld__0_stall_in_1_NO_SHIFT_REG)) & rnode_1to2_ld__0_stall_in_0_reg_2_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_i_426_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_i_426_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_i_426_0_NO_SHIFT_REG;
 logic rnode_1to2_i_426_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_i_426_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_i_426_1_NO_SHIFT_REG;
 logic rnode_1to2_i_426_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_i_426_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_i_426_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_i_426_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_i_426_0_stall_out_reg_2_NO_SHIFT_REG;
 reg rnode_1to2_i_426_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to2_i_426_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_i_426_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_i_426_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_i_426_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_i_426_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_i_426_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_lvm_i_426_NO_SHIFT_REG),
	.data_out(rnode_1to2_i_426_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_i_426_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_i_426_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_i_426_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_i_426_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_i_426_0_reg_2_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_11_NO_SHIFT_REG;
assign merge_node_stall_in_11 = rnode_1to2_i_426_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_i_426_0_stall_in_0_reg_2_NO_SHIFT_REG = ((rnode_1to2_i_426_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to2_i_426_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to2_i_426_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to2_i_426_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to2_i_426_0_valid_out_0_NO_SHIFT_REG = (rnode_1to2_i_426_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_i_426_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_i_426_0_valid_out_1_NO_SHIFT_REG = (rnode_1to2_i_426_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_i_426_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to2_i_426_0_NO_SHIFT_REG = rnode_1to2_i_426_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_i_426_1_NO_SHIFT_REG = rnode_1to2_i_426_0_reg_2_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to2_i_426_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_i_426_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to2_i_426_0_consumed_0_NO_SHIFT_REG <= (rnode_1to2_i_426_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_i_426_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to2_i_426_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to2_i_426_0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_i_426_0_consumed_1_NO_SHIFT_REG <= (rnode_1to2_i_426_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_i_426_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to2_i_426_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to2_i_426_0_stall_in_0_reg_2_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_j_522_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_j_522_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_j_522_0_NO_SHIFT_REG;
 logic rnode_1to2_j_522_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_j_522_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_j_522_1_NO_SHIFT_REG;
 logic rnode_1to2_j_522_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_j_522_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_j_522_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_j_522_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_j_522_0_stall_out_reg_2_NO_SHIFT_REG;
 reg rnode_1to2_j_522_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to2_j_522_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_j_522_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_j_522_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_j_522_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_j_522_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_j_522_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_lvm_j_522_NO_SHIFT_REG),
	.data_out(rnode_1to2_j_522_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_j_522_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_j_522_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_j_522_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_j_522_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_j_522_0_reg_2_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_12_NO_SHIFT_REG;
assign merge_node_stall_in_12 = rnode_1to2_j_522_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_j_522_0_stall_in_0_reg_2_NO_SHIFT_REG = ((rnode_1to2_j_522_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to2_j_522_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to2_j_522_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to2_j_522_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to2_j_522_0_valid_out_0_NO_SHIFT_REG = (rnode_1to2_j_522_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_j_522_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_j_522_0_valid_out_1_NO_SHIFT_REG = (rnode_1to2_j_522_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_j_522_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to2_j_522_0_NO_SHIFT_REG = rnode_1to2_j_522_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_j_522_1_NO_SHIFT_REG = rnode_1to2_j_522_0_reg_2_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to2_j_522_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_j_522_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to2_j_522_0_consumed_0_NO_SHIFT_REG <= (rnode_1to2_j_522_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_j_522_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to2_j_522_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to2_j_522_0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_j_522_0_consumed_1_NO_SHIFT_REG <= (rnode_1to2_j_522_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_j_522_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to2_j_522_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to2_j_522_0_stall_in_0_reg_2_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 8
//  * capacity = 8
 logic rnode_1to9__phi_decision_xor119_or_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to9__phi_decision_xor119_or_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to9__phi_decision_xor119_or_0_NO_SHIFT_REG;
 logic rnode_1to9__phi_decision_xor119_or_0_reg_9_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to9__phi_decision_xor119_or_0_reg_9_NO_SHIFT_REG;
 logic rnode_1to9__phi_decision_xor119_or_0_valid_out_reg_9_NO_SHIFT_REG;
 logic rnode_1to9__phi_decision_xor119_or_0_stall_in_reg_9_NO_SHIFT_REG;
 logic rnode_1to9__phi_decision_xor119_or_0_stall_out_reg_9_NO_SHIFT_REG;

acl_data_fifo rnode_1to9__phi_decision_xor119_or_0_reg_9_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to9__phi_decision_xor119_or_0_reg_9_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to9__phi_decision_xor119_or_0_stall_in_reg_9_NO_SHIFT_REG),
	.valid_out(rnode_1to9__phi_decision_xor119_or_0_valid_out_reg_9_NO_SHIFT_REG),
	.stall_out(rnode_1to9__phi_decision_xor119_or_0_stall_out_reg_9_NO_SHIFT_REG),
	.data_in(local_lvm__phi_decision_xor119_or_NO_SHIFT_REG),
	.data_out(rnode_1to9__phi_decision_xor119_or_0_reg_9_NO_SHIFT_REG)
);

defparam rnode_1to9__phi_decision_xor119_or_0_reg_9_fifo.DEPTH = 9;
defparam rnode_1to9__phi_decision_xor119_or_0_reg_9_fifo.DATA_WIDTH = 1;
defparam rnode_1to9__phi_decision_xor119_or_0_reg_9_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to9__phi_decision_xor119_or_0_reg_9_fifo.IMPL = "ram";

assign rnode_1to9__phi_decision_xor119_or_0_reg_9_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_13_NO_SHIFT_REG;
assign merge_node_stall_in_13 = rnode_1to9__phi_decision_xor119_or_0_stall_out_reg_9_NO_SHIFT_REG;
assign rnode_1to9__phi_decision_xor119_or_0_NO_SHIFT_REG = rnode_1to9__phi_decision_xor119_or_0_reg_9_NO_SHIFT_REG;
assign rnode_1to9__phi_decision_xor119_or_0_stall_in_reg_9_NO_SHIFT_REG = rnode_1to9__phi_decision_xor119_or_0_stall_in_NO_SHIFT_REG;
assign rnode_1to9__phi_decision_xor119_or_0_valid_out_NO_SHIFT_REG = rnode_1to9__phi_decision_xor119_or_0_valid_out_reg_9_NO_SHIFT_REG;

// Register node:
//  * latency = 168
//  * capacity = 168
 logic rnode_1to169_cmp1824_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to169_cmp1824_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to169_cmp1824_0_NO_SHIFT_REG;
 logic rnode_1to169_cmp1824_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to169_cmp1824_0_reg_169_NO_SHIFT_REG;
 logic rnode_1to169_cmp1824_0_valid_out_reg_169_NO_SHIFT_REG;
 logic rnode_1to169_cmp1824_0_stall_in_reg_169_NO_SHIFT_REG;
 logic rnode_1to169_cmp1824_0_stall_out_reg_169_NO_SHIFT_REG;

acl_data_fifo rnode_1to169_cmp1824_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to169_cmp1824_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to169_cmp1824_0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rnode_1to169_cmp1824_0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rnode_1to169_cmp1824_0_stall_out_reg_169_NO_SHIFT_REG),
	.data_in(local_lvm_cmp1824_NO_SHIFT_REG),
	.data_out(rnode_1to169_cmp1824_0_reg_169_NO_SHIFT_REG)
);

defparam rnode_1to169_cmp1824_0_reg_169_fifo.DEPTH = 169;
defparam rnode_1to169_cmp1824_0_reg_169_fifo.DATA_WIDTH = 1;
defparam rnode_1to169_cmp1824_0_reg_169_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to169_cmp1824_0_reg_169_fifo.IMPL = "ram";

assign rnode_1to169_cmp1824_0_reg_169_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_14_NO_SHIFT_REG;
assign merge_node_stall_in_14 = rnode_1to169_cmp1824_0_stall_out_reg_169_NO_SHIFT_REG;
assign rnode_1to169_cmp1824_0_NO_SHIFT_REG = rnode_1to169_cmp1824_0_reg_169_NO_SHIFT_REG;
assign rnode_1to169_cmp1824_0_stall_in_reg_169_NO_SHIFT_REG = rnode_1to169_cmp1824_0_stall_in_NO_SHIFT_REG;
assign rnode_1to169_cmp1824_0_valid_out_NO_SHIFT_REG = rnode_1to169_cmp1824_0_valid_out_reg_169_NO_SHIFT_REG;

// Register node:
//  * latency = 168
//  * capacity = 168
 logic rnode_1to169_memcoalesce_param_extrValue_4_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to169_memcoalesce_param_extrValue_4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to169_memcoalesce_param_extrValue_4_0_NO_SHIFT_REG;
 logic rnode_1to169_memcoalesce_param_extrValue_4_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to169_memcoalesce_param_extrValue_4_0_reg_169_NO_SHIFT_REG;
 logic rnode_1to169_memcoalesce_param_extrValue_4_0_valid_out_reg_169_NO_SHIFT_REG;
 logic rnode_1to169_memcoalesce_param_extrValue_4_0_stall_in_reg_169_NO_SHIFT_REG;
 logic rnode_1to169_memcoalesce_param_extrValue_4_0_stall_out_reg_169_NO_SHIFT_REG;

acl_data_fifo rnode_1to169_memcoalesce_param_extrValue_4_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to169_memcoalesce_param_extrValue_4_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to169_memcoalesce_param_extrValue_4_0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rnode_1to169_memcoalesce_param_extrValue_4_0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rnode_1to169_memcoalesce_param_extrValue_4_0_stall_out_reg_169_NO_SHIFT_REG),
	.data_in(local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG),
	.data_out(rnode_1to169_memcoalesce_param_extrValue_4_0_reg_169_NO_SHIFT_REG)
);

defparam rnode_1to169_memcoalesce_param_extrValue_4_0_reg_169_fifo.DEPTH = 169;
defparam rnode_1to169_memcoalesce_param_extrValue_4_0_reg_169_fifo.DATA_WIDTH = 32;
defparam rnode_1to169_memcoalesce_param_extrValue_4_0_reg_169_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to169_memcoalesce_param_extrValue_4_0_reg_169_fifo.IMPL = "ram";

assign rnode_1to169_memcoalesce_param_extrValue_4_0_reg_169_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_15_NO_SHIFT_REG;
assign merge_node_stall_in_15 = rnode_1to169_memcoalesce_param_extrValue_4_0_stall_out_reg_169_NO_SHIFT_REG;
assign rnode_1to169_memcoalesce_param_extrValue_4_0_NO_SHIFT_REG = rnode_1to169_memcoalesce_param_extrValue_4_0_reg_169_NO_SHIFT_REG;
assign rnode_1to169_memcoalesce_param_extrValue_4_0_stall_in_reg_169_NO_SHIFT_REG = rnode_1to169_memcoalesce_param_extrValue_4_0_stall_in_NO_SHIFT_REG;
assign rnode_1to169_memcoalesce_param_extrValue_4_0_valid_out_NO_SHIFT_REG = rnode_1to169_memcoalesce_param_extrValue_4_0_valid_out_reg_169_NO_SHIFT_REG;

// Register node:
//  * latency = 168
//  * capacity = 168
 logic rnode_1to169_var__u6_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to169_var__u6_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to169_var__u6_0_NO_SHIFT_REG;
 logic rnode_1to169_var__u6_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to169_var__u6_0_reg_169_NO_SHIFT_REG;
 logic rnode_1to169_var__u6_0_valid_out_reg_169_NO_SHIFT_REG;
 logic rnode_1to169_var__u6_0_stall_in_reg_169_NO_SHIFT_REG;
 logic rnode_1to169_var__u6_0_stall_out_reg_169_NO_SHIFT_REG;

acl_data_fifo rnode_1to169_var__u6_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to169_var__u6_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to169_var__u6_0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rnode_1to169_var__u6_0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rnode_1to169_var__u6_0_stall_out_reg_169_NO_SHIFT_REG),
	.data_in(local_lvm_var__u6_NO_SHIFT_REG),
	.data_out(rnode_1to169_var__u6_0_reg_169_NO_SHIFT_REG)
);

defparam rnode_1to169_var__u6_0_reg_169_fifo.DEPTH = 169;
defparam rnode_1to169_var__u6_0_reg_169_fifo.DATA_WIDTH = 32;
defparam rnode_1to169_var__u6_0_reg_169_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to169_var__u6_0_reg_169_fifo.IMPL = "ram";

assign rnode_1to169_var__u6_0_reg_169_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_16_NO_SHIFT_REG;
assign merge_node_stall_in_16 = rnode_1to169_var__u6_0_stall_out_reg_169_NO_SHIFT_REG;
assign rnode_1to169_var__u6_0_NO_SHIFT_REG = rnode_1to169_var__u6_0_reg_169_NO_SHIFT_REG;
assign rnode_1to169_var__u6_0_stall_in_reg_169_NO_SHIFT_REG = rnode_1to169_var__u6_0_stall_in_NO_SHIFT_REG;
assign rnode_1to169_var__u6_0_valid_out_NO_SHIFT_REG = rnode_1to169_var__u6_0_valid_out_reg_169_NO_SHIFT_REG;

// Register node:
//  * latency = 168
//  * capacity = 168
 logic rnode_1to169_cmp1430_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to169_cmp1430_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to169_cmp1430_0_NO_SHIFT_REG;
 logic rnode_1to169_cmp1430_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to169_cmp1430_0_reg_169_NO_SHIFT_REG;
 logic rnode_1to169_cmp1430_0_valid_out_reg_169_NO_SHIFT_REG;
 logic rnode_1to169_cmp1430_0_stall_in_reg_169_NO_SHIFT_REG;
 logic rnode_1to169_cmp1430_0_stall_out_reg_169_NO_SHIFT_REG;

acl_data_fifo rnode_1to169_cmp1430_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to169_cmp1430_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to169_cmp1430_0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rnode_1to169_cmp1430_0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rnode_1to169_cmp1430_0_stall_out_reg_169_NO_SHIFT_REG),
	.data_in(local_lvm_cmp1430_NO_SHIFT_REG),
	.data_out(rnode_1to169_cmp1430_0_reg_169_NO_SHIFT_REG)
);

defparam rnode_1to169_cmp1430_0_reg_169_fifo.DEPTH = 169;
defparam rnode_1to169_cmp1430_0_reg_169_fifo.DATA_WIDTH = 1;
defparam rnode_1to169_cmp1430_0_reg_169_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to169_cmp1430_0_reg_169_fifo.IMPL = "ram";

assign rnode_1to169_cmp1430_0_reg_169_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_17_NO_SHIFT_REG;
assign merge_node_stall_in_17 = rnode_1to169_cmp1430_0_stall_out_reg_169_NO_SHIFT_REG;
assign rnode_1to169_cmp1430_0_NO_SHIFT_REG = rnode_1to169_cmp1430_0_reg_169_NO_SHIFT_REG;
assign rnode_1to169_cmp1430_0_stall_in_reg_169_NO_SHIFT_REG = rnode_1to169_cmp1430_0_stall_in_NO_SHIFT_REG;
assign rnode_1to169_cmp1430_0_valid_out_NO_SHIFT_REG = rnode_1to169_cmp1430_0_valid_out_reg_169_NO_SHIFT_REG;

// Register node:
//  * latency = 168
//  * capacity = 168
 logic rnode_1to169_var__u5_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to169_var__u5_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to169_var__u5_0_NO_SHIFT_REG;
 logic rnode_1to169_var__u5_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to169_var__u5_0_reg_169_NO_SHIFT_REG;
 logic rnode_1to169_var__u5_0_valid_out_reg_169_NO_SHIFT_REG;
 logic rnode_1to169_var__u5_0_stall_in_reg_169_NO_SHIFT_REG;
 logic rnode_1to169_var__u5_0_stall_out_reg_169_NO_SHIFT_REG;
wire [95:0] rci_rcnode_1to169_rc19_result_521_0_reg_1;

acl_data_fifo rnode_1to169_var__u5_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to169_var__u5_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to169_var__u5_0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rnode_1to169_var__u5_0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rnode_1to169_var__u5_0_stall_out_reg_169_NO_SHIFT_REG),
	.data_in(local_lvm_var__u5_NO_SHIFT_REG),
	.data_out(rnode_1to169_var__u5_0_reg_169_NO_SHIFT_REG)
);

defparam rnode_1to169_var__u5_0_reg_169_fifo.DEPTH = 169;
defparam rnode_1to169_var__u5_0_reg_169_fifo.DATA_WIDTH = 1;
defparam rnode_1to169_var__u5_0_reg_169_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to169_var__u5_0_reg_169_fifo.IMPL = "ram";

assign rnode_1to169_var__u5_0_reg_169_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_18_NO_SHIFT_REG;
assign merge_node_stall_in_18 = rnode_1to169_var__u5_0_stall_out_reg_169_NO_SHIFT_REG;
assign rnode_1to169_var__u5_0_NO_SHIFT_REG = rnode_1to169_var__u5_0_reg_169_NO_SHIFT_REG;
assign rnode_1to169_var__u5_0_stall_in_reg_169_NO_SHIFT_REG = rnode_1to169_var__u5_0_stall_in_NO_SHIFT_REG;
assign rnode_1to169_var__u5_0_valid_out_NO_SHIFT_REG = rnode_1to169_var__u5_0_valid_out_reg_169_NO_SHIFT_REG;
assign rci_rcnode_1to169_rc19_result_521_0_reg_1[31:0] = local_lvm_result_521_NO_SHIFT_REG;
assign rci_rcnode_1to169_rc19_result_521_0_reg_1[63:32] = local_lvm_var__u7_NO_SHIFT_REG;
assign rci_rcnode_1to169_rc19_result_521_0_reg_1[95:64] = local_lvm_result_331_NO_SHIFT_REG;

// Register node:
//  * latency = 168
//  * capacity = 168
 logic rcnode_1to169_rc19_result_521_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to169_rc19_result_521_0_stall_in_NO_SHIFT_REG;
 logic [95:0] rcnode_1to169_rc19_result_521_0_NO_SHIFT_REG;
 logic rcnode_1to169_rc19_result_521_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic [95:0] rcnode_1to169_rc19_result_521_0_reg_169_NO_SHIFT_REG;
 logic rcnode_1to169_rc19_result_521_0_valid_out_reg_169_NO_SHIFT_REG;
 logic rcnode_1to169_rc19_result_521_0_stall_in_reg_169_NO_SHIFT_REG;
 logic rcnode_1to169_rc19_result_521_0_stall_out_reg_169_IP_NO_SHIFT_REG;
 logic rcnode_1to169_rc19_result_521_0_stall_out_reg_169_NO_SHIFT_REG;
wire [65:0] rci_rcnode_1to189_rc20_cmp56_0_reg_1;

acl_data_fifo rcnode_1to169_rc19_result_521_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to169_rc19_result_521_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to169_rc19_result_521_0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rcnode_1to169_rc19_result_521_0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rcnode_1to169_rc19_result_521_0_stall_out_reg_169_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to169_rc19_result_521_0_reg_1),
	.data_out(rcnode_1to169_rc19_result_521_0_reg_169_NO_SHIFT_REG)
);

defparam rcnode_1to169_rc19_result_521_0_reg_169_fifo.DEPTH = 169;
defparam rcnode_1to169_rc19_result_521_0_reg_169_fifo.DATA_WIDTH = 96;
defparam rcnode_1to169_rc19_result_521_0_reg_169_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to169_rc19_result_521_0_reg_169_fifo.IMPL = "ram";

assign rcnode_1to169_rc19_result_521_0_reg_169_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_19_NO_SHIFT_REG;
assign rcnode_1to169_rc19_result_521_0_stall_out_reg_169_NO_SHIFT_REG = (~(rcnode_1to169_rc19_result_521_0_reg_169_inputs_ready_NO_SHIFT_REG) | rcnode_1to169_rc19_result_521_0_stall_out_reg_169_IP_NO_SHIFT_REG);
assign merge_node_stall_in_19 = rcnode_1to169_rc19_result_521_0_stall_out_reg_169_NO_SHIFT_REG;
assign rcnode_1to169_rc19_result_521_0_NO_SHIFT_REG = rcnode_1to169_rc19_result_521_0_reg_169_NO_SHIFT_REG;
assign rcnode_1to169_rc19_result_521_0_stall_in_reg_169_NO_SHIFT_REG = rcnode_1to169_rc19_result_521_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to169_rc19_result_521_0_valid_out_NO_SHIFT_REG = rcnode_1to169_rc19_result_521_0_valid_out_reg_169_NO_SHIFT_REG;
assign rci_rcnode_1to189_rc20_cmp56_0_reg_1[0] = local_lvm_cmp56_NO_SHIFT_REG;
assign rci_rcnode_1to189_rc20_cmp56_0_reg_1[1] = local_lvm_var__NO_SHIFT_REG;
assign rci_rcnode_1to189_rc20_cmp56_0_reg_1[33:2] = local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
assign rci_rcnode_1to189_rc20_cmp56_0_reg_1[65:34] = local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG;

// Register node:
//  * latency = 188
//  * capacity = 188
 logic rcnode_1to189_rc20_cmp56_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to189_rc20_cmp56_0_stall_in_NO_SHIFT_REG;
 logic [65:0] rcnode_1to189_rc20_cmp56_0_NO_SHIFT_REG;
 logic rcnode_1to189_rc20_cmp56_0_reg_189_inputs_ready_NO_SHIFT_REG;
 logic [65:0] rcnode_1to189_rc20_cmp56_0_reg_189_NO_SHIFT_REG;
 logic rcnode_1to189_rc20_cmp56_0_valid_out_reg_189_NO_SHIFT_REG;
 logic rcnode_1to189_rc20_cmp56_0_stall_in_reg_189_NO_SHIFT_REG;
 logic rcnode_1to189_rc20_cmp56_0_stall_out_reg_189_IP_NO_SHIFT_REG;
 logic rcnode_1to189_rc20_cmp56_0_stall_out_reg_189_NO_SHIFT_REG;
wire [96:0] rci_rcnode_1to189_rc21__phi_decision_xor118_0_reg_1;

acl_data_fifo rcnode_1to189_rc20_cmp56_0_reg_189_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to189_rc20_cmp56_0_reg_189_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to189_rc20_cmp56_0_stall_in_reg_189_NO_SHIFT_REG),
	.valid_out(rcnode_1to189_rc20_cmp56_0_valid_out_reg_189_NO_SHIFT_REG),
	.stall_out(rcnode_1to189_rc20_cmp56_0_stall_out_reg_189_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to189_rc20_cmp56_0_reg_1),
	.data_out(rcnode_1to189_rc20_cmp56_0_reg_189_NO_SHIFT_REG)
);

defparam rcnode_1to189_rc20_cmp56_0_reg_189_fifo.DEPTH = 189;
defparam rcnode_1to189_rc20_cmp56_0_reg_189_fifo.DATA_WIDTH = 66;
defparam rcnode_1to189_rc20_cmp56_0_reg_189_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to189_rc20_cmp56_0_reg_189_fifo.IMPL = "ram";

assign rcnode_1to189_rc20_cmp56_0_reg_189_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_20_NO_SHIFT_REG;
assign rcnode_1to189_rc20_cmp56_0_stall_out_reg_189_NO_SHIFT_REG = (~(rcnode_1to189_rc20_cmp56_0_reg_189_inputs_ready_NO_SHIFT_REG) | rcnode_1to189_rc20_cmp56_0_stall_out_reg_189_IP_NO_SHIFT_REG);
assign merge_node_stall_in_20 = rcnode_1to189_rc20_cmp56_0_stall_out_reg_189_NO_SHIFT_REG;
assign rcnode_1to189_rc20_cmp56_0_NO_SHIFT_REG = rcnode_1to189_rc20_cmp56_0_reg_189_NO_SHIFT_REG;
assign rcnode_1to189_rc20_cmp56_0_stall_in_reg_189_NO_SHIFT_REG = rcnode_1to189_rc20_cmp56_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to189_rc20_cmp56_0_valid_out_NO_SHIFT_REG = rcnode_1to189_rc20_cmp56_0_valid_out_reg_189_NO_SHIFT_REG;
assign rci_rcnode_1to189_rc21__phi_decision_xor118_0_reg_1[0] = local_lvm__phi_decision_xor118_NO_SHIFT_REG;
assign rci_rcnode_1to189_rc21__phi_decision_xor118_0_reg_1[32:1] = local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
assign rci_rcnode_1to189_rc21__phi_decision_xor118_0_reg_1[64:33] = local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG;
assign rci_rcnode_1to189_rc21__phi_decision_xor118_0_reg_1[96:65] = local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG;

// Register node:
//  * latency = 188
//  * capacity = 188
 logic rcnode_1to189_rc21__phi_decision_xor118_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to189_rc21__phi_decision_xor118_0_stall_in_NO_SHIFT_REG;
 logic [96:0] rcnode_1to189_rc21__phi_decision_xor118_0_NO_SHIFT_REG;
 logic rcnode_1to189_rc21__phi_decision_xor118_0_reg_189_inputs_ready_NO_SHIFT_REG;
 logic [96:0] rcnode_1to189_rc21__phi_decision_xor118_0_reg_189_NO_SHIFT_REG;
 logic rcnode_1to189_rc21__phi_decision_xor118_0_valid_out_reg_189_NO_SHIFT_REG;
 logic rcnode_1to189_rc21__phi_decision_xor118_0_stall_in_reg_189_NO_SHIFT_REG;
 logic rcnode_1to189_rc21__phi_decision_xor118_0_stall_out_reg_189_IP_NO_SHIFT_REG;
 logic rcnode_1to189_rc21__phi_decision_xor118_0_stall_out_reg_189_NO_SHIFT_REG;
wire [159:0] rci_rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_reg_1;

acl_data_fifo rcnode_1to189_rc21__phi_decision_xor118_0_reg_189_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to189_rc21__phi_decision_xor118_0_reg_189_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to189_rc21__phi_decision_xor118_0_stall_in_reg_189_NO_SHIFT_REG),
	.valid_out(rcnode_1to189_rc21__phi_decision_xor118_0_valid_out_reg_189_NO_SHIFT_REG),
	.stall_out(rcnode_1to189_rc21__phi_decision_xor118_0_stall_out_reg_189_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to189_rc21__phi_decision_xor118_0_reg_1),
	.data_out(rcnode_1to189_rc21__phi_decision_xor118_0_reg_189_NO_SHIFT_REG)
);

defparam rcnode_1to189_rc21__phi_decision_xor118_0_reg_189_fifo.DEPTH = 189;
defparam rcnode_1to189_rc21__phi_decision_xor118_0_reg_189_fifo.DATA_WIDTH = 97;
defparam rcnode_1to189_rc21__phi_decision_xor118_0_reg_189_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to189_rc21__phi_decision_xor118_0_reg_189_fifo.IMPL = "ram";

assign rcnode_1to189_rc21__phi_decision_xor118_0_reg_189_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_21_NO_SHIFT_REG;
assign rcnode_1to189_rc21__phi_decision_xor118_0_stall_out_reg_189_NO_SHIFT_REG = (~(rcnode_1to189_rc21__phi_decision_xor118_0_reg_189_inputs_ready_NO_SHIFT_REG) | rcnode_1to189_rc21__phi_decision_xor118_0_stall_out_reg_189_IP_NO_SHIFT_REG);
assign merge_node_stall_in_21 = rcnode_1to189_rc21__phi_decision_xor118_0_stall_out_reg_189_NO_SHIFT_REG;
assign rcnode_1to189_rc21__phi_decision_xor118_0_NO_SHIFT_REG = rcnode_1to189_rc21__phi_decision_xor118_0_reg_189_NO_SHIFT_REG;
assign rcnode_1to189_rc21__phi_decision_xor118_0_stall_in_reg_189_NO_SHIFT_REG = rcnode_1to189_rc21__phi_decision_xor118_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to189_rc21__phi_decision_xor118_0_valid_out_NO_SHIFT_REG = rcnode_1to189_rc21__phi_decision_xor118_0_valid_out_reg_189_NO_SHIFT_REG;
assign rci_rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_reg_1[31:0] = local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG;
assign rci_rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_reg_1[63:32] = local_lvm_channelCounter_058_NO_SHIFT_REG;
assign rci_rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_reg_1[127:64] = (local_lvm_arrayidx67_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFFFC);
assign rci_rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_reg_1[159:128] = local_lvm_mul70_NO_SHIFT_REG;

// Register node:
//  * latency = 188
//  * capacity = 188
 logic rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_stall_in_NO_SHIFT_REG;
 logic [159:0] rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_NO_SHIFT_REG;
 logic rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_reg_189_inputs_ready_NO_SHIFT_REG;
 logic [159:0] rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_reg_189_NO_SHIFT_REG;
 logic rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_valid_out_reg_189_NO_SHIFT_REG;
 logic rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_stall_in_reg_189_NO_SHIFT_REG;
 logic rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_stall_out_reg_189_IP_NO_SHIFT_REG;
 logic rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_stall_out_reg_189_NO_SHIFT_REG;
wire [127:0] rci_rcnode_1to189_rc23_heightCounter_148_0_reg_1;

acl_data_fifo rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_reg_189_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_reg_189_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_stall_in_reg_189_NO_SHIFT_REG),
	.valid_out(rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_valid_out_reg_189_NO_SHIFT_REG),
	.stall_out(rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_stall_out_reg_189_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_reg_1),
	.data_out(rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_reg_189_NO_SHIFT_REG)
);

defparam rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_reg_189_fifo.DEPTH = 189;
defparam rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_reg_189_fifo.DATA_WIDTH = 160;
defparam rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_reg_189_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_reg_189_fifo.IMPL = "ram";

assign rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_reg_189_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_22_NO_SHIFT_REG;
assign rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_stall_out_reg_189_NO_SHIFT_REG = (~(rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_reg_189_inputs_ready_NO_SHIFT_REG) | rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_stall_out_reg_189_IP_NO_SHIFT_REG);
assign merge_node_stall_in_22 = rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_stall_out_reg_189_NO_SHIFT_REG;
assign rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_NO_SHIFT_REG = rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_reg_189_NO_SHIFT_REG;
assign rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_stall_in_reg_189_NO_SHIFT_REG = rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_valid_out_NO_SHIFT_REG = rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_valid_out_reg_189_NO_SHIFT_REG;
assign rci_rcnode_1to189_rc23_heightCounter_148_0_reg_1[31:0] = local_lvm_heightCounter_148_NO_SHIFT_REG;
assign rci_rcnode_1to189_rc23_heightCounter_148_0_reg_1[63:32] = local_lvm_c0_exe1_NO_SHIFT_REG;
assign rci_rcnode_1to189_rc23_heightCounter_148_0_reg_1[95:64] = local_lvm_mul28_NO_SHIFT_REG;
assign rci_rcnode_1to189_rc23_heightCounter_148_0_reg_1[127:96] = local_lvm_widthCounter_239_NO_SHIFT_REG;

// Register node:
//  * latency = 188
//  * capacity = 188
 logic rcnode_1to189_rc23_heightCounter_148_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to189_rc23_heightCounter_148_0_stall_in_NO_SHIFT_REG;
 logic [127:0] rcnode_1to189_rc23_heightCounter_148_0_NO_SHIFT_REG;
 logic rcnode_1to189_rc23_heightCounter_148_0_reg_189_inputs_ready_NO_SHIFT_REG;
 logic [127:0] rcnode_1to189_rc23_heightCounter_148_0_reg_189_NO_SHIFT_REG;
 logic rcnode_1to189_rc23_heightCounter_148_0_valid_out_reg_189_NO_SHIFT_REG;
 logic rcnode_1to189_rc23_heightCounter_148_0_stall_in_reg_189_NO_SHIFT_REG;
 logic rcnode_1to189_rc23_heightCounter_148_0_stall_out_reg_189_IP_NO_SHIFT_REG;
 logic rcnode_1to189_rc23_heightCounter_148_0_stall_out_reg_189_NO_SHIFT_REG;
wire [127:0] rci_rcnode_1to189_rc24_mul36_0_reg_1;

acl_data_fifo rcnode_1to189_rc23_heightCounter_148_0_reg_189_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to189_rc23_heightCounter_148_0_reg_189_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to189_rc23_heightCounter_148_0_stall_in_reg_189_NO_SHIFT_REG),
	.valid_out(rcnode_1to189_rc23_heightCounter_148_0_valid_out_reg_189_NO_SHIFT_REG),
	.stall_out(rcnode_1to189_rc23_heightCounter_148_0_stall_out_reg_189_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to189_rc23_heightCounter_148_0_reg_1),
	.data_out(rcnode_1to189_rc23_heightCounter_148_0_reg_189_NO_SHIFT_REG)
);

defparam rcnode_1to189_rc23_heightCounter_148_0_reg_189_fifo.DEPTH = 189;
defparam rcnode_1to189_rc23_heightCounter_148_0_reg_189_fifo.DATA_WIDTH = 128;
defparam rcnode_1to189_rc23_heightCounter_148_0_reg_189_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to189_rc23_heightCounter_148_0_reg_189_fifo.IMPL = "ram";

assign rcnode_1to189_rc23_heightCounter_148_0_reg_189_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_23_NO_SHIFT_REG;
assign rcnode_1to189_rc23_heightCounter_148_0_stall_out_reg_189_NO_SHIFT_REG = (~(rcnode_1to189_rc23_heightCounter_148_0_reg_189_inputs_ready_NO_SHIFT_REG) | rcnode_1to189_rc23_heightCounter_148_0_stall_out_reg_189_IP_NO_SHIFT_REG);
assign merge_node_stall_in_23 = rcnode_1to189_rc23_heightCounter_148_0_stall_out_reg_189_NO_SHIFT_REG;
assign rcnode_1to189_rc23_heightCounter_148_0_NO_SHIFT_REG = rcnode_1to189_rc23_heightCounter_148_0_reg_189_NO_SHIFT_REG;
assign rcnode_1to189_rc23_heightCounter_148_0_stall_in_reg_189_NO_SHIFT_REG = rcnode_1to189_rc23_heightCounter_148_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to189_rc23_heightCounter_148_0_valid_out_NO_SHIFT_REG = rcnode_1to189_rc23_heightCounter_148_0_valid_out_reg_189_NO_SHIFT_REG;
assign rci_rcnode_1to189_rc24_mul36_0_reg_1[31:0] = local_lvm_mul36_NO_SHIFT_REG;
assign rci_rcnode_1to189_rc24_mul36_0_reg_1[63:32] = local_lvm_input_global_id_1_NO_SHIFT_REG;
assign rci_rcnode_1to189_rc24_mul36_0_reg_1[95:64] = local_lvm_input_global_id_2_NO_SHIFT_REG;
assign rci_rcnode_1to189_rc24_mul36_0_reg_1[127:96] = local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;

// Register node:
//  * latency = 188
//  * capacity = 188
 logic rcnode_1to189_rc24_mul36_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to189_rc24_mul36_0_stall_in_NO_SHIFT_REG;
 logic [127:0] rcnode_1to189_rc24_mul36_0_NO_SHIFT_REG;
 logic rcnode_1to189_rc24_mul36_0_reg_189_inputs_ready_NO_SHIFT_REG;
 logic [127:0] rcnode_1to189_rc24_mul36_0_reg_189_NO_SHIFT_REG;
 logic rcnode_1to189_rc24_mul36_0_valid_out_reg_189_NO_SHIFT_REG;
 logic rcnode_1to189_rc24_mul36_0_stall_in_reg_189_NO_SHIFT_REG;
 logic rcnode_1to189_rc24_mul36_0_stall_out_reg_189_IP_NO_SHIFT_REG;
 logic rcnode_1to189_rc24_mul36_0_stall_out_reg_189_NO_SHIFT_REG;

acl_data_fifo rcnode_1to189_rc24_mul36_0_reg_189_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to189_rc24_mul36_0_reg_189_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to189_rc24_mul36_0_stall_in_reg_189_NO_SHIFT_REG),
	.valid_out(rcnode_1to189_rc24_mul36_0_valid_out_reg_189_NO_SHIFT_REG),
	.stall_out(rcnode_1to189_rc24_mul36_0_stall_out_reg_189_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to189_rc24_mul36_0_reg_1),
	.data_out(rcnode_1to189_rc24_mul36_0_reg_189_NO_SHIFT_REG)
);

defparam rcnode_1to189_rc24_mul36_0_reg_189_fifo.DEPTH = 189;
defparam rcnode_1to189_rc24_mul36_0_reg_189_fifo.DATA_WIDTH = 128;
defparam rcnode_1to189_rc24_mul36_0_reg_189_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to189_rc24_mul36_0_reg_189_fifo.IMPL = "ram";

assign rcnode_1to189_rc24_mul36_0_reg_189_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_24_NO_SHIFT_REG;
assign rcnode_1to189_rc24_mul36_0_stall_out_reg_189_NO_SHIFT_REG = (~(rcnode_1to189_rc24_mul36_0_reg_189_inputs_ready_NO_SHIFT_REG) | rcnode_1to189_rc24_mul36_0_stall_out_reg_189_IP_NO_SHIFT_REG);
assign merge_node_stall_in_24 = rcnode_1to189_rc24_mul36_0_stall_out_reg_189_NO_SHIFT_REG;
assign rcnode_1to189_rc24_mul36_0_NO_SHIFT_REG = rcnode_1to189_rc24_mul36_0_reg_189_NO_SHIFT_REG;
assign rcnode_1to189_rc24_mul36_0_stall_in_reg_189_NO_SHIFT_REG = rcnode_1to189_rc24_mul36_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to189_rc24_mul36_0_valid_out_NO_SHIFT_REG = rcnode_1to189_rc24_mul36_0_valid_out_reg_189_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_c1_eni230_stall_local;
wire [287:0] local_bb5_c1_eni230;

assign local_bb5_c1_eni230[63:0] = local_bb5_c1_eni131[63:0];
assign local_bb5_c1_eni230[95:64] = local_lvm_c_332_NO_SHIFT_REG;
assign local_bb5_c1_eni230[287:96] = local_bb5_c1_eni131[287:96];

// This section implements an unregistered operation.
// 
wire local_bb5_c5_eni1_stall_local;
wire [191:0] local_bb5_c5_eni1;

assign local_bb5_c5_eni1[31:0] = 32'bx;
assign local_bb5_c5_eni1[63:32] = rnode_1to2_mul46_0_NO_SHIFT_REG;
assign local_bb5_c5_eni1[191:64] = 128'bx;

// Register node:
//  * latency = 187
//  * capacity = 187
 logic rnode_2to189_mul46_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to189_mul46_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to189_mul46_0_NO_SHIFT_REG;
 logic rnode_2to189_mul46_0_reg_189_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to189_mul46_0_reg_189_NO_SHIFT_REG;
 logic rnode_2to189_mul46_0_valid_out_reg_189_NO_SHIFT_REG;
 logic rnode_2to189_mul46_0_stall_in_reg_189_NO_SHIFT_REG;
 logic rnode_2to189_mul46_0_stall_out_reg_189_NO_SHIFT_REG;

acl_data_fifo rnode_2to189_mul46_0_reg_189_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to189_mul46_0_reg_189_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to189_mul46_0_stall_in_reg_189_NO_SHIFT_REG),
	.valid_out(rnode_2to189_mul46_0_valid_out_reg_189_NO_SHIFT_REG),
	.stall_out(rnode_2to189_mul46_0_stall_out_reg_189_NO_SHIFT_REG),
	.data_in(rnode_1to2_mul46_1_NO_SHIFT_REG),
	.data_out(rnode_2to189_mul46_0_reg_189_NO_SHIFT_REG)
);

defparam rnode_2to189_mul46_0_reg_189_fifo.DEPTH = 188;
defparam rnode_2to189_mul46_0_reg_189_fifo.DATA_WIDTH = 32;
defparam rnode_2to189_mul46_0_reg_189_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_2to189_mul46_0_reg_189_fifo.IMPL = "ram";

assign rnode_2to189_mul46_0_reg_189_inputs_ready_NO_SHIFT_REG = rnode_1to2_mul46_0_valid_out_1_NO_SHIFT_REG;
assign rnode_1to2_mul46_0_stall_in_1_NO_SHIFT_REG = rnode_2to189_mul46_0_stall_out_reg_189_NO_SHIFT_REG;
assign rnode_2to189_mul46_0_NO_SHIFT_REG = rnode_2to189_mul46_0_reg_189_NO_SHIFT_REG;
assign rnode_2to189_mul46_0_stall_in_reg_189_NO_SHIFT_REG = rnode_2to189_mul46_0_stall_in_NO_SHIFT_REG;
assign rnode_2to189_mul46_0_valid_out_NO_SHIFT_REG = rnode_2to189_mul46_0_valid_out_reg_189_NO_SHIFT_REG;

// Register node:
//  * latency = 167
//  * capacity = 167
 logic rnode_2to169_ld__0_valid_out_NO_SHIFT_REG;
 logic rnode_2to169_ld__0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to169_ld__0_NO_SHIFT_REG;
 logic rnode_2to169_ld__0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to169_ld__0_reg_169_NO_SHIFT_REG;
 logic rnode_2to169_ld__0_valid_out_reg_169_NO_SHIFT_REG;
 logic rnode_2to169_ld__0_stall_in_reg_169_NO_SHIFT_REG;
 logic rnode_2to169_ld__0_stall_out_reg_169_NO_SHIFT_REG;
wire [95:0] rci_rcnode_2to169_rc1_j_522_0_reg_2;

acl_data_fifo rnode_2to169_ld__0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to169_ld__0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to169_ld__0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rnode_2to169_ld__0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rnode_2to169_ld__0_stall_out_reg_169_NO_SHIFT_REG),
	.data_in(rnode_1to2_ld__1_NO_SHIFT_REG),
	.data_out(rnode_2to169_ld__0_reg_169_NO_SHIFT_REG)
);

defparam rnode_2to169_ld__0_reg_169_fifo.DEPTH = 168;
defparam rnode_2to169_ld__0_reg_169_fifo.DATA_WIDTH = 32;
defparam rnode_2to169_ld__0_reg_169_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_2to169_ld__0_reg_169_fifo.IMPL = "ram";

assign rnode_2to169_ld__0_reg_169_inputs_ready_NO_SHIFT_REG = rnode_1to2_ld__0_valid_out_1_NO_SHIFT_REG;
assign rnode_1to2_ld__0_stall_in_1_NO_SHIFT_REG = rnode_2to169_ld__0_stall_out_reg_169_NO_SHIFT_REG;
assign rnode_2to169_ld__0_NO_SHIFT_REG = rnode_2to169_ld__0_reg_169_NO_SHIFT_REG;
assign rnode_2to169_ld__0_stall_in_reg_169_NO_SHIFT_REG = rnode_2to169_ld__0_stall_in_NO_SHIFT_REG;
assign rnode_2to169_ld__0_valid_out_NO_SHIFT_REG = rnode_2to169_ld__0_valid_out_reg_169_NO_SHIFT_REG;
assign rci_rcnode_2to169_rc1_j_522_0_reg_2[31:0] = rnode_1to2_j_522_1_NO_SHIFT_REG;
assign rci_rcnode_2to169_rc1_j_522_0_reg_2[63:32] = rnode_1to2_i_426_1_NO_SHIFT_REG;
assign rci_rcnode_2to169_rc1_j_522_0_reg_2[95:64] = rnode_1to2_c_332_1_NO_SHIFT_REG;

// Register node:
//  * latency = 167
//  * capacity = 167
 logic rcnode_2to169_rc1_j_522_0_valid_out_NO_SHIFT_REG;
 logic rcnode_2to169_rc1_j_522_0_stall_in_NO_SHIFT_REG;
 logic [95:0] rcnode_2to169_rc1_j_522_0_NO_SHIFT_REG;
 logic rcnode_2to169_rc1_j_522_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic [95:0] rcnode_2to169_rc1_j_522_0_reg_169_NO_SHIFT_REG;
 logic rcnode_2to169_rc1_j_522_0_valid_out_reg_169_NO_SHIFT_REG;
 logic rcnode_2to169_rc1_j_522_0_stall_in_reg_169_NO_SHIFT_REG;
 logic rcnode_2to169_rc1_j_522_0_stall_out_0_reg_169_IP_NO_SHIFT_REG;
 logic rcnode_2to169_rc1_j_522_0_stall_out_0_reg_169_NO_SHIFT_REG;

acl_data_fifo rcnode_2to169_rc1_j_522_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_2to169_rc1_j_522_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_2to169_rc1_j_522_0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rcnode_2to169_rc1_j_522_0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rcnode_2to169_rc1_j_522_0_stall_out_0_reg_169_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_2to169_rc1_j_522_0_reg_2),
	.data_out(rcnode_2to169_rc1_j_522_0_reg_169_NO_SHIFT_REG)
);

defparam rcnode_2to169_rc1_j_522_0_reg_169_fifo.DEPTH = 168;
defparam rcnode_2to169_rc1_j_522_0_reg_169_fifo.DATA_WIDTH = 96;
defparam rcnode_2to169_rc1_j_522_0_reg_169_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_2to169_rc1_j_522_0_reg_169_fifo.IMPL = "ram";

assign rcnode_2to169_rc1_j_522_0_reg_169_inputs_ready_NO_SHIFT_REG = (rnode_1to2_j_522_0_valid_out_1_NO_SHIFT_REG & rnode_1to2_i_426_0_valid_out_1_NO_SHIFT_REG & rnode_1to2_c_332_0_valid_out_1_NO_SHIFT_REG);
assign rcnode_2to169_rc1_j_522_0_stall_out_0_reg_169_NO_SHIFT_REG = (~(rcnode_2to169_rc1_j_522_0_reg_169_inputs_ready_NO_SHIFT_REG) | rcnode_2to169_rc1_j_522_0_stall_out_0_reg_169_IP_NO_SHIFT_REG);
assign rnode_1to2_j_522_0_stall_in_1_NO_SHIFT_REG = rcnode_2to169_rc1_j_522_0_stall_out_0_reg_169_NO_SHIFT_REG;
assign rnode_1to2_i_426_0_stall_in_1_NO_SHIFT_REG = rcnode_2to169_rc1_j_522_0_stall_out_0_reg_169_NO_SHIFT_REG;
assign rnode_1to2_c_332_0_stall_in_1_NO_SHIFT_REG = rcnode_2to169_rc1_j_522_0_stall_out_0_reg_169_NO_SHIFT_REG;
assign rcnode_2to169_rc1_j_522_0_NO_SHIFT_REG = rcnode_2to169_rc1_j_522_0_reg_169_NO_SHIFT_REG;
assign rcnode_2to169_rc1_j_522_0_stall_in_reg_169_NO_SHIFT_REG = rcnode_2to169_rc1_j_522_0_stall_in_NO_SHIFT_REG;
assign rcnode_2to169_rc1_j_522_0_valid_out_NO_SHIFT_REG = rcnode_2to169_rc1_j_522_0_valid_out_reg_169_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_9to10__phi_decision_xor119_or_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_9to10__phi_decision_xor119_or_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_9to10__phi_decision_xor119_or_0_NO_SHIFT_REG;
 logic rnode_9to10__phi_decision_xor119_or_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_9to10__phi_decision_xor119_or_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_9to10__phi_decision_xor119_or_1_NO_SHIFT_REG;
 logic rnode_9to10__phi_decision_xor119_or_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_9to10__phi_decision_xor119_or_0_stall_in_2_NO_SHIFT_REG;
 logic rnode_9to10__phi_decision_xor119_or_2_NO_SHIFT_REG;
 logic rnode_9to10__phi_decision_xor119_or_0_reg_10_inputs_ready_NO_SHIFT_REG;
 logic rnode_9to10__phi_decision_xor119_or_0_reg_10_NO_SHIFT_REG;
 logic rnode_9to10__phi_decision_xor119_or_0_valid_out_0_reg_10_NO_SHIFT_REG;
 logic rnode_9to10__phi_decision_xor119_or_0_stall_in_0_reg_10_NO_SHIFT_REG;
 logic rnode_9to10__phi_decision_xor119_or_0_stall_out_reg_10_NO_SHIFT_REG;
 reg rnode_9to10__phi_decision_xor119_or_0_consumed_0_NO_SHIFT_REG;
 reg rnode_9to10__phi_decision_xor119_or_0_consumed_1_NO_SHIFT_REG;
 reg rnode_9to10__phi_decision_xor119_or_0_consumed_2_NO_SHIFT_REG;

acl_data_fifo rnode_9to10__phi_decision_xor119_or_0_reg_10_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_9to10__phi_decision_xor119_or_0_reg_10_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_9to10__phi_decision_xor119_or_0_stall_in_0_reg_10_NO_SHIFT_REG),
	.valid_out(rnode_9to10__phi_decision_xor119_or_0_valid_out_0_reg_10_NO_SHIFT_REG),
	.stall_out(rnode_9to10__phi_decision_xor119_or_0_stall_out_reg_10_NO_SHIFT_REG),
	.data_in(rnode_1to9__phi_decision_xor119_or_0_NO_SHIFT_REG),
	.data_out(rnode_9to10__phi_decision_xor119_or_0_reg_10_NO_SHIFT_REG)
);

defparam rnode_9to10__phi_decision_xor119_or_0_reg_10_fifo.DEPTH = 2;
defparam rnode_9to10__phi_decision_xor119_or_0_reg_10_fifo.DATA_WIDTH = 1;
defparam rnode_9to10__phi_decision_xor119_or_0_reg_10_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_9to10__phi_decision_xor119_or_0_reg_10_fifo.IMPL = "ll_reg";

assign rnode_9to10__phi_decision_xor119_or_0_reg_10_inputs_ready_NO_SHIFT_REG = rnode_1to9__phi_decision_xor119_or_0_valid_out_NO_SHIFT_REG;
assign rnode_1to9__phi_decision_xor119_or_0_stall_in_NO_SHIFT_REG = rnode_9to10__phi_decision_xor119_or_0_stall_out_reg_10_NO_SHIFT_REG;
assign rnode_9to10__phi_decision_xor119_or_0_stall_in_0_reg_10_NO_SHIFT_REG = ((rnode_9to10__phi_decision_xor119_or_0_stall_in_0_NO_SHIFT_REG & ~(rnode_9to10__phi_decision_xor119_or_0_consumed_0_NO_SHIFT_REG)) | (rnode_9to10__phi_decision_xor119_or_0_stall_in_1_NO_SHIFT_REG & ~(rnode_9to10__phi_decision_xor119_or_0_consumed_1_NO_SHIFT_REG)) | (rnode_9to10__phi_decision_xor119_or_0_stall_in_2_NO_SHIFT_REG & ~(rnode_9to10__phi_decision_xor119_or_0_consumed_2_NO_SHIFT_REG)));
assign rnode_9to10__phi_decision_xor119_or_0_valid_out_0_NO_SHIFT_REG = (rnode_9to10__phi_decision_xor119_or_0_valid_out_0_reg_10_NO_SHIFT_REG & ~(rnode_9to10__phi_decision_xor119_or_0_consumed_0_NO_SHIFT_REG));
assign rnode_9to10__phi_decision_xor119_or_0_valid_out_1_NO_SHIFT_REG = (rnode_9to10__phi_decision_xor119_or_0_valid_out_0_reg_10_NO_SHIFT_REG & ~(rnode_9to10__phi_decision_xor119_or_0_consumed_1_NO_SHIFT_REG));
assign rnode_9to10__phi_decision_xor119_or_0_valid_out_2_NO_SHIFT_REG = (rnode_9to10__phi_decision_xor119_or_0_valid_out_0_reg_10_NO_SHIFT_REG & ~(rnode_9to10__phi_decision_xor119_or_0_consumed_2_NO_SHIFT_REG));
assign rnode_9to10__phi_decision_xor119_or_0_NO_SHIFT_REG = rnode_9to10__phi_decision_xor119_or_0_reg_10_NO_SHIFT_REG;
assign rnode_9to10__phi_decision_xor119_or_1_NO_SHIFT_REG = rnode_9to10__phi_decision_xor119_or_0_reg_10_NO_SHIFT_REG;
assign rnode_9to10__phi_decision_xor119_or_2_NO_SHIFT_REG = rnode_9to10__phi_decision_xor119_or_0_reg_10_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_9to10__phi_decision_xor119_or_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_9to10__phi_decision_xor119_or_0_consumed_1_NO_SHIFT_REG <= 1'b0;
		rnode_9to10__phi_decision_xor119_or_0_consumed_2_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_9to10__phi_decision_xor119_or_0_consumed_0_NO_SHIFT_REG <= (rnode_9to10__phi_decision_xor119_or_0_valid_out_0_reg_10_NO_SHIFT_REG & (rnode_9to10__phi_decision_xor119_or_0_consumed_0_NO_SHIFT_REG | ~(rnode_9to10__phi_decision_xor119_or_0_stall_in_0_NO_SHIFT_REG)) & rnode_9to10__phi_decision_xor119_or_0_stall_in_0_reg_10_NO_SHIFT_REG);
		rnode_9to10__phi_decision_xor119_or_0_consumed_1_NO_SHIFT_REG <= (rnode_9to10__phi_decision_xor119_or_0_valid_out_0_reg_10_NO_SHIFT_REG & (rnode_9to10__phi_decision_xor119_or_0_consumed_1_NO_SHIFT_REG | ~(rnode_9to10__phi_decision_xor119_or_0_stall_in_1_NO_SHIFT_REG)) & rnode_9to10__phi_decision_xor119_or_0_stall_in_0_reg_10_NO_SHIFT_REG);
		rnode_9to10__phi_decision_xor119_or_0_consumed_2_NO_SHIFT_REG <= (rnode_9to10__phi_decision_xor119_or_0_valid_out_0_reg_10_NO_SHIFT_REG & (rnode_9to10__phi_decision_xor119_or_0_consumed_2_NO_SHIFT_REG | ~(rnode_9to10__phi_decision_xor119_or_0_stall_in_2_NO_SHIFT_REG)) & rnode_9to10__phi_decision_xor119_or_0_stall_in_0_reg_10_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_169to170_cmp1824_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_169to170_cmp1824_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_169to170_cmp1824_0_NO_SHIFT_REG;
 logic rnode_169to170_cmp1824_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_169to170_cmp1824_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_169to170_cmp1824_1_NO_SHIFT_REG;
 logic rnode_169to170_cmp1824_0_reg_170_inputs_ready_NO_SHIFT_REG;
 logic rnode_169to170_cmp1824_0_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_cmp1824_0_valid_out_0_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_cmp1824_0_stall_in_0_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_cmp1824_0_stall_out_reg_170_NO_SHIFT_REG;
 reg rnode_169to170_cmp1824_0_consumed_0_NO_SHIFT_REG;
 reg rnode_169to170_cmp1824_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_169to170_cmp1824_0_reg_170_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_169to170_cmp1824_0_reg_170_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_169to170_cmp1824_0_stall_in_0_reg_170_NO_SHIFT_REG),
	.valid_out(rnode_169to170_cmp1824_0_valid_out_0_reg_170_NO_SHIFT_REG),
	.stall_out(rnode_169to170_cmp1824_0_stall_out_reg_170_NO_SHIFT_REG),
	.data_in(rnode_1to169_cmp1824_0_NO_SHIFT_REG),
	.data_out(rnode_169to170_cmp1824_0_reg_170_NO_SHIFT_REG)
);

defparam rnode_169to170_cmp1824_0_reg_170_fifo.DEPTH = 2;
defparam rnode_169to170_cmp1824_0_reg_170_fifo.DATA_WIDTH = 1;
defparam rnode_169to170_cmp1824_0_reg_170_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_169to170_cmp1824_0_reg_170_fifo.IMPL = "ll_reg";

assign rnode_169to170_cmp1824_0_reg_170_inputs_ready_NO_SHIFT_REG = rnode_1to169_cmp1824_0_valid_out_NO_SHIFT_REG;
assign rnode_1to169_cmp1824_0_stall_in_NO_SHIFT_REG = rnode_169to170_cmp1824_0_stall_out_reg_170_NO_SHIFT_REG;
assign rnode_169to170_cmp1824_0_stall_in_0_reg_170_NO_SHIFT_REG = ((rnode_169to170_cmp1824_0_stall_in_0_NO_SHIFT_REG & ~(rnode_169to170_cmp1824_0_consumed_0_NO_SHIFT_REG)) | (rnode_169to170_cmp1824_0_stall_in_1_NO_SHIFT_REG & ~(rnode_169to170_cmp1824_0_consumed_1_NO_SHIFT_REG)));
assign rnode_169to170_cmp1824_0_valid_out_0_NO_SHIFT_REG = (rnode_169to170_cmp1824_0_valid_out_0_reg_170_NO_SHIFT_REG & ~(rnode_169to170_cmp1824_0_consumed_0_NO_SHIFT_REG));
assign rnode_169to170_cmp1824_0_valid_out_1_NO_SHIFT_REG = (rnode_169to170_cmp1824_0_valid_out_0_reg_170_NO_SHIFT_REG & ~(rnode_169to170_cmp1824_0_consumed_1_NO_SHIFT_REG));
assign rnode_169to170_cmp1824_0_NO_SHIFT_REG = rnode_169to170_cmp1824_0_reg_170_NO_SHIFT_REG;
assign rnode_169to170_cmp1824_1_NO_SHIFT_REG = rnode_169to170_cmp1824_0_reg_170_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_169to170_cmp1824_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_169to170_cmp1824_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_169to170_cmp1824_0_consumed_0_NO_SHIFT_REG <= (rnode_169to170_cmp1824_0_valid_out_0_reg_170_NO_SHIFT_REG & (rnode_169to170_cmp1824_0_consumed_0_NO_SHIFT_REG | ~(rnode_169to170_cmp1824_0_stall_in_0_NO_SHIFT_REG)) & rnode_169to170_cmp1824_0_stall_in_0_reg_170_NO_SHIFT_REG);
		rnode_169to170_cmp1824_0_consumed_1_NO_SHIFT_REG <= (rnode_169to170_cmp1824_0_valid_out_0_reg_170_NO_SHIFT_REG & (rnode_169to170_cmp1824_0_consumed_1_NO_SHIFT_REG | ~(rnode_169to170_cmp1824_0_stall_in_1_NO_SHIFT_REG)) & rnode_169to170_cmp1824_0_stall_in_0_reg_170_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_169to170_memcoalesce_param_extrValue_4_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_169to170_memcoalesce_param_extrValue_4_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_169to170_memcoalesce_param_extrValue_4_0_NO_SHIFT_REG;
 logic rnode_169to170_memcoalesce_param_extrValue_4_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_169to170_memcoalesce_param_extrValue_4_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_169to170_memcoalesce_param_extrValue_4_1_NO_SHIFT_REG;
 logic rnode_169to170_memcoalesce_param_extrValue_4_0_reg_170_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_169to170_memcoalesce_param_extrValue_4_0_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_memcoalesce_param_extrValue_4_0_valid_out_0_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_memcoalesce_param_extrValue_4_0_stall_in_0_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_memcoalesce_param_extrValue_4_0_stall_out_reg_170_NO_SHIFT_REG;
 reg rnode_169to170_memcoalesce_param_extrValue_4_0_consumed_0_NO_SHIFT_REG;
 reg rnode_169to170_memcoalesce_param_extrValue_4_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_169to170_memcoalesce_param_extrValue_4_0_reg_170_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_169to170_memcoalesce_param_extrValue_4_0_reg_170_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_169to170_memcoalesce_param_extrValue_4_0_stall_in_0_reg_170_NO_SHIFT_REG),
	.valid_out(rnode_169to170_memcoalesce_param_extrValue_4_0_valid_out_0_reg_170_NO_SHIFT_REG),
	.stall_out(rnode_169to170_memcoalesce_param_extrValue_4_0_stall_out_reg_170_NO_SHIFT_REG),
	.data_in(rnode_1to169_memcoalesce_param_extrValue_4_0_NO_SHIFT_REG),
	.data_out(rnode_169to170_memcoalesce_param_extrValue_4_0_reg_170_NO_SHIFT_REG)
);

defparam rnode_169to170_memcoalesce_param_extrValue_4_0_reg_170_fifo.DEPTH = 2;
defparam rnode_169to170_memcoalesce_param_extrValue_4_0_reg_170_fifo.DATA_WIDTH = 32;
defparam rnode_169to170_memcoalesce_param_extrValue_4_0_reg_170_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_169to170_memcoalesce_param_extrValue_4_0_reg_170_fifo.IMPL = "ll_reg";

assign rnode_169to170_memcoalesce_param_extrValue_4_0_reg_170_inputs_ready_NO_SHIFT_REG = rnode_1to169_memcoalesce_param_extrValue_4_0_valid_out_NO_SHIFT_REG;
assign rnode_1to169_memcoalesce_param_extrValue_4_0_stall_in_NO_SHIFT_REG = rnode_169to170_memcoalesce_param_extrValue_4_0_stall_out_reg_170_NO_SHIFT_REG;
assign rnode_169to170_memcoalesce_param_extrValue_4_0_stall_in_0_reg_170_NO_SHIFT_REG = ((rnode_169to170_memcoalesce_param_extrValue_4_0_stall_in_0_NO_SHIFT_REG & ~(rnode_169to170_memcoalesce_param_extrValue_4_0_consumed_0_NO_SHIFT_REG)) | (rnode_169to170_memcoalesce_param_extrValue_4_0_stall_in_1_NO_SHIFT_REG & ~(rnode_169to170_memcoalesce_param_extrValue_4_0_consumed_1_NO_SHIFT_REG)));
assign rnode_169to170_memcoalesce_param_extrValue_4_0_valid_out_0_NO_SHIFT_REG = (rnode_169to170_memcoalesce_param_extrValue_4_0_valid_out_0_reg_170_NO_SHIFT_REG & ~(rnode_169to170_memcoalesce_param_extrValue_4_0_consumed_0_NO_SHIFT_REG));
assign rnode_169to170_memcoalesce_param_extrValue_4_0_valid_out_1_NO_SHIFT_REG = (rnode_169to170_memcoalesce_param_extrValue_4_0_valid_out_0_reg_170_NO_SHIFT_REG & ~(rnode_169to170_memcoalesce_param_extrValue_4_0_consumed_1_NO_SHIFT_REG));
assign rnode_169to170_memcoalesce_param_extrValue_4_0_NO_SHIFT_REG = rnode_169to170_memcoalesce_param_extrValue_4_0_reg_170_NO_SHIFT_REG;
assign rnode_169to170_memcoalesce_param_extrValue_4_1_NO_SHIFT_REG = rnode_169to170_memcoalesce_param_extrValue_4_0_reg_170_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_169to170_memcoalesce_param_extrValue_4_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_169to170_memcoalesce_param_extrValue_4_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_169to170_memcoalesce_param_extrValue_4_0_consumed_0_NO_SHIFT_REG <= (rnode_169to170_memcoalesce_param_extrValue_4_0_valid_out_0_reg_170_NO_SHIFT_REG & (rnode_169to170_memcoalesce_param_extrValue_4_0_consumed_0_NO_SHIFT_REG | ~(rnode_169to170_memcoalesce_param_extrValue_4_0_stall_in_0_NO_SHIFT_REG)) & rnode_169to170_memcoalesce_param_extrValue_4_0_stall_in_0_reg_170_NO_SHIFT_REG);
		rnode_169to170_memcoalesce_param_extrValue_4_0_consumed_1_NO_SHIFT_REG <= (rnode_169to170_memcoalesce_param_extrValue_4_0_valid_out_0_reg_170_NO_SHIFT_REG & (rnode_169to170_memcoalesce_param_extrValue_4_0_consumed_1_NO_SHIFT_REG | ~(rnode_169to170_memcoalesce_param_extrValue_4_0_stall_in_1_NO_SHIFT_REG)) & rnode_169to170_memcoalesce_param_extrValue_4_0_stall_in_0_reg_170_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_169to170_var__u6_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_169to170_var__u6_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_169to170_var__u6_0_NO_SHIFT_REG;
 logic rnode_169to170_var__u6_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_169to170_var__u6_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_169to170_var__u6_1_NO_SHIFT_REG;
 logic rnode_169to170_var__u6_0_reg_170_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_169to170_var__u6_0_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_var__u6_0_valid_out_0_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_var__u6_0_stall_in_0_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_var__u6_0_stall_out_reg_170_NO_SHIFT_REG;
 reg rnode_169to170_var__u6_0_consumed_0_NO_SHIFT_REG;
 reg rnode_169to170_var__u6_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_169to170_var__u6_0_reg_170_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_169to170_var__u6_0_reg_170_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_169to170_var__u6_0_stall_in_0_reg_170_NO_SHIFT_REG),
	.valid_out(rnode_169to170_var__u6_0_valid_out_0_reg_170_NO_SHIFT_REG),
	.stall_out(rnode_169to170_var__u6_0_stall_out_reg_170_NO_SHIFT_REG),
	.data_in(rnode_1to169_var__u6_0_NO_SHIFT_REG),
	.data_out(rnode_169to170_var__u6_0_reg_170_NO_SHIFT_REG)
);

defparam rnode_169to170_var__u6_0_reg_170_fifo.DEPTH = 2;
defparam rnode_169to170_var__u6_0_reg_170_fifo.DATA_WIDTH = 32;
defparam rnode_169to170_var__u6_0_reg_170_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_169to170_var__u6_0_reg_170_fifo.IMPL = "ll_reg";

assign rnode_169to170_var__u6_0_reg_170_inputs_ready_NO_SHIFT_REG = rnode_1to169_var__u6_0_valid_out_NO_SHIFT_REG;
assign rnode_1to169_var__u6_0_stall_in_NO_SHIFT_REG = rnode_169to170_var__u6_0_stall_out_reg_170_NO_SHIFT_REG;
assign rnode_169to170_var__u6_0_stall_in_0_reg_170_NO_SHIFT_REG = ((rnode_169to170_var__u6_0_stall_in_0_NO_SHIFT_REG & ~(rnode_169to170_var__u6_0_consumed_0_NO_SHIFT_REG)) | (rnode_169to170_var__u6_0_stall_in_1_NO_SHIFT_REG & ~(rnode_169to170_var__u6_0_consumed_1_NO_SHIFT_REG)));
assign rnode_169to170_var__u6_0_valid_out_0_NO_SHIFT_REG = (rnode_169to170_var__u6_0_valid_out_0_reg_170_NO_SHIFT_REG & ~(rnode_169to170_var__u6_0_consumed_0_NO_SHIFT_REG));
assign rnode_169to170_var__u6_0_valid_out_1_NO_SHIFT_REG = (rnode_169to170_var__u6_0_valid_out_0_reg_170_NO_SHIFT_REG & ~(rnode_169to170_var__u6_0_consumed_1_NO_SHIFT_REG));
assign rnode_169to170_var__u6_0_NO_SHIFT_REG = rnode_169to170_var__u6_0_reg_170_NO_SHIFT_REG;
assign rnode_169to170_var__u6_1_NO_SHIFT_REG = rnode_169to170_var__u6_0_reg_170_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_169to170_var__u6_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_169to170_var__u6_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_169to170_var__u6_0_consumed_0_NO_SHIFT_REG <= (rnode_169to170_var__u6_0_valid_out_0_reg_170_NO_SHIFT_REG & (rnode_169to170_var__u6_0_consumed_0_NO_SHIFT_REG | ~(rnode_169to170_var__u6_0_stall_in_0_NO_SHIFT_REG)) & rnode_169to170_var__u6_0_stall_in_0_reg_170_NO_SHIFT_REG);
		rnode_169to170_var__u6_0_consumed_1_NO_SHIFT_REG <= (rnode_169to170_var__u6_0_valid_out_0_reg_170_NO_SHIFT_REG & (rnode_169to170_var__u6_0_consumed_1_NO_SHIFT_REG | ~(rnode_169to170_var__u6_0_stall_in_1_NO_SHIFT_REG)) & rnode_169to170_var__u6_0_stall_in_0_reg_170_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_169to170_cmp1430_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_169to170_cmp1430_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_169to170_cmp1430_0_NO_SHIFT_REG;
 logic rnode_169to170_cmp1430_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_169to170_cmp1430_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_169to170_cmp1430_1_NO_SHIFT_REG;
 logic rnode_169to170_cmp1430_0_reg_170_inputs_ready_NO_SHIFT_REG;
 logic rnode_169to170_cmp1430_0_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_cmp1430_0_valid_out_0_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_cmp1430_0_stall_in_0_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_cmp1430_0_stall_out_reg_170_NO_SHIFT_REG;
 reg rnode_169to170_cmp1430_0_consumed_0_NO_SHIFT_REG;
 reg rnode_169to170_cmp1430_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_169to170_cmp1430_0_reg_170_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_169to170_cmp1430_0_reg_170_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_169to170_cmp1430_0_stall_in_0_reg_170_NO_SHIFT_REG),
	.valid_out(rnode_169to170_cmp1430_0_valid_out_0_reg_170_NO_SHIFT_REG),
	.stall_out(rnode_169to170_cmp1430_0_stall_out_reg_170_NO_SHIFT_REG),
	.data_in(rnode_1to169_cmp1430_0_NO_SHIFT_REG),
	.data_out(rnode_169to170_cmp1430_0_reg_170_NO_SHIFT_REG)
);

defparam rnode_169to170_cmp1430_0_reg_170_fifo.DEPTH = 2;
defparam rnode_169to170_cmp1430_0_reg_170_fifo.DATA_WIDTH = 1;
defparam rnode_169to170_cmp1430_0_reg_170_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_169to170_cmp1430_0_reg_170_fifo.IMPL = "ll_reg";

assign rnode_169to170_cmp1430_0_reg_170_inputs_ready_NO_SHIFT_REG = rnode_1to169_cmp1430_0_valid_out_NO_SHIFT_REG;
assign rnode_1to169_cmp1430_0_stall_in_NO_SHIFT_REG = rnode_169to170_cmp1430_0_stall_out_reg_170_NO_SHIFT_REG;
assign rnode_169to170_cmp1430_0_stall_in_0_reg_170_NO_SHIFT_REG = ((rnode_169to170_cmp1430_0_stall_in_0_NO_SHIFT_REG & ~(rnode_169to170_cmp1430_0_consumed_0_NO_SHIFT_REG)) | (rnode_169to170_cmp1430_0_stall_in_1_NO_SHIFT_REG & ~(rnode_169to170_cmp1430_0_consumed_1_NO_SHIFT_REG)));
assign rnode_169to170_cmp1430_0_valid_out_0_NO_SHIFT_REG = (rnode_169to170_cmp1430_0_valid_out_0_reg_170_NO_SHIFT_REG & ~(rnode_169to170_cmp1430_0_consumed_0_NO_SHIFT_REG));
assign rnode_169to170_cmp1430_0_valid_out_1_NO_SHIFT_REG = (rnode_169to170_cmp1430_0_valid_out_0_reg_170_NO_SHIFT_REG & ~(rnode_169to170_cmp1430_0_consumed_1_NO_SHIFT_REG));
assign rnode_169to170_cmp1430_0_NO_SHIFT_REG = rnode_169to170_cmp1430_0_reg_170_NO_SHIFT_REG;
assign rnode_169to170_cmp1430_1_NO_SHIFT_REG = rnode_169to170_cmp1430_0_reg_170_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_169to170_cmp1430_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_169to170_cmp1430_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_169to170_cmp1430_0_consumed_0_NO_SHIFT_REG <= (rnode_169to170_cmp1430_0_valid_out_0_reg_170_NO_SHIFT_REG & (rnode_169to170_cmp1430_0_consumed_0_NO_SHIFT_REG | ~(rnode_169to170_cmp1430_0_stall_in_0_NO_SHIFT_REG)) & rnode_169to170_cmp1430_0_stall_in_0_reg_170_NO_SHIFT_REG);
		rnode_169to170_cmp1430_0_consumed_1_NO_SHIFT_REG <= (rnode_169to170_cmp1430_0_valid_out_0_reg_170_NO_SHIFT_REG & (rnode_169to170_cmp1430_0_consumed_1_NO_SHIFT_REG | ~(rnode_169to170_cmp1430_0_stall_in_1_NO_SHIFT_REG)) & rnode_169to170_cmp1430_0_stall_in_0_reg_170_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_169to170_var__u5_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_169to170_var__u5_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_169to170_var__u5_0_NO_SHIFT_REG;
 logic rnode_169to170_var__u5_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_169to170_var__u5_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_169to170_var__u5_1_NO_SHIFT_REG;
 logic rnode_169to170_var__u5_0_reg_170_inputs_ready_NO_SHIFT_REG;
 logic rnode_169to170_var__u5_0_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_var__u5_0_valid_out_0_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_var__u5_0_stall_in_0_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_var__u5_0_stall_out_reg_170_NO_SHIFT_REG;
 reg rnode_169to170_var__u5_0_consumed_0_NO_SHIFT_REG;
 reg rnode_169to170_var__u5_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_169to170_var__u5_0_reg_170_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_169to170_var__u5_0_reg_170_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_169to170_var__u5_0_stall_in_0_reg_170_NO_SHIFT_REG),
	.valid_out(rnode_169to170_var__u5_0_valid_out_0_reg_170_NO_SHIFT_REG),
	.stall_out(rnode_169to170_var__u5_0_stall_out_reg_170_NO_SHIFT_REG),
	.data_in(rnode_1to169_var__u5_0_NO_SHIFT_REG),
	.data_out(rnode_169to170_var__u5_0_reg_170_NO_SHIFT_REG)
);

defparam rnode_169to170_var__u5_0_reg_170_fifo.DEPTH = 2;
defparam rnode_169to170_var__u5_0_reg_170_fifo.DATA_WIDTH = 1;
defparam rnode_169to170_var__u5_0_reg_170_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_169to170_var__u5_0_reg_170_fifo.IMPL = "ll_reg";

assign rnode_169to170_var__u5_0_reg_170_inputs_ready_NO_SHIFT_REG = rnode_1to169_var__u5_0_valid_out_NO_SHIFT_REG;
assign rnode_1to169_var__u5_0_stall_in_NO_SHIFT_REG = rnode_169to170_var__u5_0_stall_out_reg_170_NO_SHIFT_REG;
assign rnode_169to170_var__u5_0_stall_in_0_reg_170_NO_SHIFT_REG = ((rnode_169to170_var__u5_0_stall_in_0_NO_SHIFT_REG & ~(rnode_169to170_var__u5_0_consumed_0_NO_SHIFT_REG)) | (rnode_169to170_var__u5_0_stall_in_1_NO_SHIFT_REG & ~(rnode_169to170_var__u5_0_consumed_1_NO_SHIFT_REG)));
assign rnode_169to170_var__u5_0_valid_out_0_NO_SHIFT_REG = (rnode_169to170_var__u5_0_valid_out_0_reg_170_NO_SHIFT_REG & ~(rnode_169to170_var__u5_0_consumed_0_NO_SHIFT_REG));
assign rnode_169to170_var__u5_0_valid_out_1_NO_SHIFT_REG = (rnode_169to170_var__u5_0_valid_out_0_reg_170_NO_SHIFT_REG & ~(rnode_169to170_var__u5_0_consumed_1_NO_SHIFT_REG));
assign rnode_169to170_var__u5_0_NO_SHIFT_REG = rnode_169to170_var__u5_0_reg_170_NO_SHIFT_REG;
assign rnode_169to170_var__u5_1_NO_SHIFT_REG = rnode_169to170_var__u5_0_reg_170_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_169to170_var__u5_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_169to170_var__u5_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_169to170_var__u5_0_consumed_0_NO_SHIFT_REG <= (rnode_169to170_var__u5_0_valid_out_0_reg_170_NO_SHIFT_REG & (rnode_169to170_var__u5_0_consumed_0_NO_SHIFT_REG | ~(rnode_169to170_var__u5_0_stall_in_0_NO_SHIFT_REG)) & rnode_169to170_var__u5_0_stall_in_0_reg_170_NO_SHIFT_REG);
		rnode_169to170_var__u5_0_consumed_1_NO_SHIFT_REG <= (rnode_169to170_var__u5_0_valid_out_0_reg_170_NO_SHIFT_REG & (rnode_169to170_var__u5_0_consumed_1_NO_SHIFT_REG | ~(rnode_169to170_var__u5_0_stall_in_1_NO_SHIFT_REG)) & rnode_169to170_var__u5_0_stall_in_0_reg_170_NO_SHIFT_REG);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_c1_eni329_stall_local;
wire [287:0] local_bb5_c1_eni329;

assign local_bb5_c1_eni329[95:0] = local_bb5_c1_eni230[95:0];
assign local_bb5_c1_eni329[127:96] = local_lvm_mul28_NO_SHIFT_REG;
assign local_bb5_c1_eni329[287:128] = local_bb5_c1_eni230[287:128];

// This section implements an unregistered operation.
// 
wire local_bb5_c5_eni2_stall_local;
wire [191:0] local_bb5_c5_eni2;

assign local_bb5_c5_eni2[63:0] = local_bb5_c5_eni1[63:0];
assign local_bb5_c5_eni2[95:64] = rnode_1to2_c_332_0_NO_SHIFT_REG;
assign local_bb5_c5_eni2[191:96] = local_bb5_c5_eni1[191:96];

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_169to170_ld__0_valid_out_0_NO_SHIFT_REG;
 logic rnode_169to170_ld__0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_169to170_ld__0_NO_SHIFT_REG;
 logic rnode_169to170_ld__0_valid_out_1_NO_SHIFT_REG;
 logic rnode_169to170_ld__0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_169to170_ld__1_NO_SHIFT_REG;
 logic rnode_169to170_ld__0_reg_170_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_169to170_ld__0_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_ld__0_valid_out_0_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_ld__0_stall_in_0_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_ld__0_stall_out_reg_170_NO_SHIFT_REG;
 reg rnode_169to170_ld__0_consumed_0_NO_SHIFT_REG;
 reg rnode_169to170_ld__0_consumed_1_NO_SHIFT_REG;
wire [191:0] rci_rcnode_169to170_rc0_result_521_0_reg_169;

acl_data_fifo rnode_169to170_ld__0_reg_170_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_169to170_ld__0_reg_170_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_169to170_ld__0_stall_in_0_reg_170_NO_SHIFT_REG),
	.valid_out(rnode_169to170_ld__0_valid_out_0_reg_170_NO_SHIFT_REG),
	.stall_out(rnode_169to170_ld__0_stall_out_reg_170_NO_SHIFT_REG),
	.data_in(rnode_2to169_ld__0_NO_SHIFT_REG),
	.data_out(rnode_169to170_ld__0_reg_170_NO_SHIFT_REG)
);

defparam rnode_169to170_ld__0_reg_170_fifo.DEPTH = 2;
defparam rnode_169to170_ld__0_reg_170_fifo.DATA_WIDTH = 32;
defparam rnode_169to170_ld__0_reg_170_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_169to170_ld__0_reg_170_fifo.IMPL = "ll_reg";

assign rnode_169to170_ld__0_reg_170_inputs_ready_NO_SHIFT_REG = rnode_2to169_ld__0_valid_out_NO_SHIFT_REG;
assign rnode_2to169_ld__0_stall_in_NO_SHIFT_REG = rnode_169to170_ld__0_stall_out_reg_170_NO_SHIFT_REG;
assign rnode_169to170_ld__0_stall_in_0_reg_170_NO_SHIFT_REG = ((rnode_169to170_ld__0_stall_in_0_NO_SHIFT_REG & ~(rnode_169to170_ld__0_consumed_0_NO_SHIFT_REG)) | (rnode_169to170_ld__0_stall_in_1_NO_SHIFT_REG & ~(rnode_169to170_ld__0_consumed_1_NO_SHIFT_REG)));
assign rnode_169to170_ld__0_valid_out_0_NO_SHIFT_REG = (rnode_169to170_ld__0_valid_out_0_reg_170_NO_SHIFT_REG & ~(rnode_169to170_ld__0_consumed_0_NO_SHIFT_REG));
assign rnode_169to170_ld__0_valid_out_1_NO_SHIFT_REG = (rnode_169to170_ld__0_valid_out_0_reg_170_NO_SHIFT_REG & ~(rnode_169to170_ld__0_consumed_1_NO_SHIFT_REG));
assign rnode_169to170_ld__0_NO_SHIFT_REG = rnode_169to170_ld__0_reg_170_NO_SHIFT_REG;
assign rnode_169to170_ld__1_NO_SHIFT_REG = rnode_169to170_ld__0_reg_170_NO_SHIFT_REG;
assign rci_rcnode_169to170_rc0_result_521_0_reg_169[31:0] = rcnode_1to169_rc19_result_521_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_169to170_rc0_result_521_0_reg_169[63:32] = rcnode_2to169_rc1_j_522_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_169to170_rc0_result_521_0_reg_169[95:64] = rcnode_2to169_rc1_j_522_0_NO_SHIFT_REG[63:32];
assign rci_rcnode_169to170_rc0_result_521_0_reg_169[127:96] = rcnode_1to169_rc19_result_521_0_NO_SHIFT_REG[63:32];
assign rci_rcnode_169to170_rc0_result_521_0_reg_169[159:128] = rcnode_1to169_rc19_result_521_0_NO_SHIFT_REG[95:64];
assign rci_rcnode_169to170_rc0_result_521_0_reg_169[191:160] = rcnode_2to169_rc1_j_522_0_NO_SHIFT_REG[95:64];

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_169to170_ld__0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_169to170_ld__0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_169to170_ld__0_consumed_0_NO_SHIFT_REG <= (rnode_169to170_ld__0_valid_out_0_reg_170_NO_SHIFT_REG & (rnode_169to170_ld__0_consumed_0_NO_SHIFT_REG | ~(rnode_169to170_ld__0_stall_in_0_NO_SHIFT_REG)) & rnode_169to170_ld__0_stall_in_0_reg_170_NO_SHIFT_REG);
		rnode_169to170_ld__0_consumed_1_NO_SHIFT_REG <= (rnode_169to170_ld__0_valid_out_0_reg_170_NO_SHIFT_REG & (rnode_169to170_ld__0_consumed_1_NO_SHIFT_REG | ~(rnode_169to170_ld__0_stall_in_1_NO_SHIFT_REG)) & rnode_169to170_ld__0_stall_in_0_reg_170_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_169to170_rc0_result_521_0_valid_out_0_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_result_521_0_stall_in_0_NO_SHIFT_REG;
 logic [191:0] rcnode_169to170_rc0_result_521_0_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_result_521_0_valid_out_1_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_result_521_0_stall_in_1_NO_SHIFT_REG;
 logic [191:0] rcnode_169to170_rc0_result_521_1_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_result_521_0_valid_out_2_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_result_521_0_stall_in_2_NO_SHIFT_REG;
 logic [191:0] rcnode_169to170_rc0_result_521_2_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_result_521_0_valid_out_3_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_result_521_0_stall_in_3_NO_SHIFT_REG;
 logic [191:0] rcnode_169to170_rc0_result_521_3_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_result_521_0_valid_out_4_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_result_521_0_stall_in_4_NO_SHIFT_REG;
 logic [191:0] rcnode_169to170_rc0_result_521_4_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_result_521_0_valid_out_5_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_result_521_0_stall_in_5_NO_SHIFT_REG;
 logic [191:0] rcnode_169to170_rc0_result_521_5_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_result_521_0_reg_170_inputs_ready_NO_SHIFT_REG;
 logic [191:0] rcnode_169to170_rc0_result_521_0_reg_170_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_result_521_0_valid_out_0_reg_170_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_result_521_0_stall_in_0_reg_170_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_result_521_0_stall_out_0_reg_170_IP_NO_SHIFT_REG;
 logic rcnode_169to170_rc0_result_521_0_stall_out_0_reg_170_NO_SHIFT_REG;

acl_data_fifo rcnode_169to170_rc0_result_521_0_reg_170_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_169to170_rc0_result_521_0_reg_170_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_169to170_rc0_result_521_0_stall_in_0_reg_170_NO_SHIFT_REG),
	.valid_out(rcnode_169to170_rc0_result_521_0_valid_out_0_reg_170_NO_SHIFT_REG),
	.stall_out(rcnode_169to170_rc0_result_521_0_stall_out_0_reg_170_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_169to170_rc0_result_521_0_reg_169),
	.data_out(rcnode_169to170_rc0_result_521_0_reg_170_NO_SHIFT_REG)
);

defparam rcnode_169to170_rc0_result_521_0_reg_170_fifo.DEPTH = 2;
defparam rcnode_169to170_rc0_result_521_0_reg_170_fifo.DATA_WIDTH = 192;
defparam rcnode_169to170_rc0_result_521_0_reg_170_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_169to170_rc0_result_521_0_reg_170_fifo.IMPL = "ll_reg";

assign rcnode_169to170_rc0_result_521_0_reg_170_inputs_ready_NO_SHIFT_REG = (rcnode_1to169_rc19_result_521_0_valid_out_NO_SHIFT_REG & rcnode_2to169_rc1_j_522_0_valid_out_NO_SHIFT_REG);
assign rcnode_169to170_rc0_result_521_0_stall_out_0_reg_170_NO_SHIFT_REG = (~(rcnode_169to170_rc0_result_521_0_reg_170_inputs_ready_NO_SHIFT_REG) | rcnode_169to170_rc0_result_521_0_stall_out_0_reg_170_IP_NO_SHIFT_REG);
assign rcnode_1to169_rc19_result_521_0_stall_in_NO_SHIFT_REG = rcnode_169to170_rc0_result_521_0_stall_out_0_reg_170_NO_SHIFT_REG;
assign rcnode_2to169_rc1_j_522_0_stall_in_NO_SHIFT_REG = rcnode_169to170_rc0_result_521_0_stall_out_0_reg_170_NO_SHIFT_REG;
assign rcnode_169to170_rc0_result_521_0_stall_in_0_reg_170_NO_SHIFT_REG = (rcnode_169to170_rc0_result_521_0_stall_in_0_NO_SHIFT_REG | rcnode_169to170_rc0_result_521_0_stall_in_1_NO_SHIFT_REG | rcnode_169to170_rc0_result_521_0_stall_in_2_NO_SHIFT_REG | rcnode_169to170_rc0_result_521_0_stall_in_3_NO_SHIFT_REG | rcnode_169to170_rc0_result_521_0_stall_in_4_NO_SHIFT_REG | rcnode_169to170_rc0_result_521_0_stall_in_5_NO_SHIFT_REG);
assign rcnode_169to170_rc0_result_521_0_valid_out_0_NO_SHIFT_REG = rcnode_169to170_rc0_result_521_0_valid_out_0_reg_170_NO_SHIFT_REG;
assign rcnode_169to170_rc0_result_521_0_valid_out_1_NO_SHIFT_REG = rcnode_169to170_rc0_result_521_0_valid_out_0_reg_170_NO_SHIFT_REG;
assign rcnode_169to170_rc0_result_521_0_valid_out_2_NO_SHIFT_REG = rcnode_169to170_rc0_result_521_0_valid_out_0_reg_170_NO_SHIFT_REG;
assign rcnode_169to170_rc0_result_521_0_valid_out_3_NO_SHIFT_REG = rcnode_169to170_rc0_result_521_0_valid_out_0_reg_170_NO_SHIFT_REG;
assign rcnode_169to170_rc0_result_521_0_valid_out_4_NO_SHIFT_REG = rcnode_169to170_rc0_result_521_0_valid_out_0_reg_170_NO_SHIFT_REG;
assign rcnode_169to170_rc0_result_521_0_valid_out_5_NO_SHIFT_REG = rcnode_169to170_rc0_result_521_0_valid_out_0_reg_170_NO_SHIFT_REG;
assign rcnode_169to170_rc0_result_521_0_NO_SHIFT_REG = rcnode_169to170_rc0_result_521_0_reg_170_NO_SHIFT_REG;
assign rcnode_169to170_rc0_result_521_1_NO_SHIFT_REG = rcnode_169to170_rc0_result_521_0_reg_170_NO_SHIFT_REG;
assign rcnode_169to170_rc0_result_521_2_NO_SHIFT_REG = rcnode_169to170_rc0_result_521_0_reg_170_NO_SHIFT_REG;
assign rcnode_169to170_rc0_result_521_3_NO_SHIFT_REG = rcnode_169to170_rc0_result_521_0_reg_170_NO_SHIFT_REG;
assign rcnode_169to170_rc0_result_521_4_NO_SHIFT_REG = rcnode_169to170_rc0_result_521_0_reg_170_NO_SHIFT_REG;
assign rcnode_169to170_rc0_result_521_5_NO_SHIFT_REG = rcnode_169to170_rc0_result_521_0_reg_170_NO_SHIFT_REG;

// Register node:
//  * latency = 179
//  * capacity = 179
 logic rnode_10to189__phi_decision_xor119_or_0_valid_out_NO_SHIFT_REG;
 logic rnode_10to189__phi_decision_xor119_or_0_stall_in_NO_SHIFT_REG;
 logic rnode_10to189__phi_decision_xor119_or_0_NO_SHIFT_REG;
 logic rnode_10to189__phi_decision_xor119_or_0_reg_189_inputs_ready_NO_SHIFT_REG;
 logic rnode_10to189__phi_decision_xor119_or_0_reg_189_NO_SHIFT_REG;
 logic rnode_10to189__phi_decision_xor119_or_0_valid_out_reg_189_NO_SHIFT_REG;
 logic rnode_10to189__phi_decision_xor119_or_0_stall_in_reg_189_NO_SHIFT_REG;
 logic rnode_10to189__phi_decision_xor119_or_0_stall_out_reg_189_NO_SHIFT_REG;
wire [65:0] rci_rcnode_170to189_rc1_cmp1824_0_reg_170;

acl_data_fifo rnode_10to189__phi_decision_xor119_or_0_reg_189_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_10to189__phi_decision_xor119_or_0_reg_189_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_10to189__phi_decision_xor119_or_0_stall_in_reg_189_NO_SHIFT_REG),
	.valid_out(rnode_10to189__phi_decision_xor119_or_0_valid_out_reg_189_NO_SHIFT_REG),
	.stall_out(rnode_10to189__phi_decision_xor119_or_0_stall_out_reg_189_NO_SHIFT_REG),
	.data_in(rnode_9to10__phi_decision_xor119_or_2_NO_SHIFT_REG),
	.data_out(rnode_10to189__phi_decision_xor119_or_0_reg_189_NO_SHIFT_REG)
);

defparam rnode_10to189__phi_decision_xor119_or_0_reg_189_fifo.DEPTH = 180;
defparam rnode_10to189__phi_decision_xor119_or_0_reg_189_fifo.DATA_WIDTH = 1;
defparam rnode_10to189__phi_decision_xor119_or_0_reg_189_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_10to189__phi_decision_xor119_or_0_reg_189_fifo.IMPL = "ram";

assign rnode_10to189__phi_decision_xor119_or_0_reg_189_inputs_ready_NO_SHIFT_REG = rnode_9to10__phi_decision_xor119_or_0_valid_out_2_NO_SHIFT_REG;
assign rnode_9to10__phi_decision_xor119_or_0_stall_in_2_NO_SHIFT_REG = rnode_10to189__phi_decision_xor119_or_0_stall_out_reg_189_NO_SHIFT_REG;
assign rnode_10to189__phi_decision_xor119_or_0_NO_SHIFT_REG = rnode_10to189__phi_decision_xor119_or_0_reg_189_NO_SHIFT_REG;
assign rnode_10to189__phi_decision_xor119_or_0_stall_in_reg_189_NO_SHIFT_REG = rnode_10to189__phi_decision_xor119_or_0_stall_in_NO_SHIFT_REG;
assign rnode_10to189__phi_decision_xor119_or_0_valid_out_NO_SHIFT_REG = rnode_10to189__phi_decision_xor119_or_0_valid_out_reg_189_NO_SHIFT_REG;
assign rci_rcnode_170to189_rc1_cmp1824_0_reg_170[0] = rnode_169to170_cmp1824_1_NO_SHIFT_REG;
assign rci_rcnode_170to189_rc1_cmp1824_0_reg_170[32:1] = rnode_169to170_memcoalesce_param_extrValue_4_1_NO_SHIFT_REG;
assign rci_rcnode_170to189_rc1_cmp1824_0_reg_170[64:33] = rnode_169to170_var__u6_1_NO_SHIFT_REG;
assign rci_rcnode_170to189_rc1_cmp1824_0_reg_170[65] = rnode_169to170_cmp1430_1_NO_SHIFT_REG;

// Register node:
//  * latency = 19
//  * capacity = 19
 logic rcnode_170to189_rc1_cmp1824_0_valid_out_NO_SHIFT_REG;
 logic rcnode_170to189_rc1_cmp1824_0_stall_in_NO_SHIFT_REG;
 logic [65:0] rcnode_170to189_rc1_cmp1824_0_NO_SHIFT_REG;
 logic rcnode_170to189_rc1_cmp1824_0_reg_189_inputs_ready_NO_SHIFT_REG;
 logic [65:0] rcnode_170to189_rc1_cmp1824_0_reg_189_NO_SHIFT_REG;
 logic rcnode_170to189_rc1_cmp1824_0_valid_out_reg_189_NO_SHIFT_REG;
 logic rcnode_170to189_rc1_cmp1824_0_stall_in_reg_189_NO_SHIFT_REG;
 logic rcnode_170to189_rc1_cmp1824_0_stall_out_0_reg_189_IP_NO_SHIFT_REG;
 logic rcnode_170to189_rc1_cmp1824_0_stall_out_0_reg_189_NO_SHIFT_REG;

acl_data_fifo rcnode_170to189_rc1_cmp1824_0_reg_189_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_170to189_rc1_cmp1824_0_reg_189_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_170to189_rc1_cmp1824_0_stall_in_reg_189_NO_SHIFT_REG),
	.valid_out(rcnode_170to189_rc1_cmp1824_0_valid_out_reg_189_NO_SHIFT_REG),
	.stall_out(rcnode_170to189_rc1_cmp1824_0_stall_out_0_reg_189_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_170to189_rc1_cmp1824_0_reg_170),
	.data_out(rcnode_170to189_rc1_cmp1824_0_reg_189_NO_SHIFT_REG)
);

defparam rcnode_170to189_rc1_cmp1824_0_reg_189_fifo.DEPTH = 20;
defparam rcnode_170to189_rc1_cmp1824_0_reg_189_fifo.DATA_WIDTH = 66;
defparam rcnode_170to189_rc1_cmp1824_0_reg_189_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_170to189_rc1_cmp1824_0_reg_189_fifo.IMPL = "ram";

assign rcnode_170to189_rc1_cmp1824_0_reg_189_inputs_ready_NO_SHIFT_REG = (rnode_169to170_cmp1824_0_valid_out_1_NO_SHIFT_REG & rnode_169to170_memcoalesce_param_extrValue_4_0_valid_out_1_NO_SHIFT_REG & rnode_169to170_var__u6_0_valid_out_1_NO_SHIFT_REG & rnode_169to170_cmp1430_0_valid_out_1_NO_SHIFT_REG);
assign rcnode_170to189_rc1_cmp1824_0_stall_out_0_reg_189_NO_SHIFT_REG = (~(rcnode_170to189_rc1_cmp1824_0_reg_189_inputs_ready_NO_SHIFT_REG) | rcnode_170to189_rc1_cmp1824_0_stall_out_0_reg_189_IP_NO_SHIFT_REG);
assign rnode_169to170_cmp1824_0_stall_in_1_NO_SHIFT_REG = rcnode_170to189_rc1_cmp1824_0_stall_out_0_reg_189_NO_SHIFT_REG;
assign rnode_169to170_memcoalesce_param_extrValue_4_0_stall_in_1_NO_SHIFT_REG = rcnode_170to189_rc1_cmp1824_0_stall_out_0_reg_189_NO_SHIFT_REG;
assign rnode_169to170_var__u6_0_stall_in_1_NO_SHIFT_REG = rcnode_170to189_rc1_cmp1824_0_stall_out_0_reg_189_NO_SHIFT_REG;
assign rnode_169to170_cmp1430_0_stall_in_1_NO_SHIFT_REG = rcnode_170to189_rc1_cmp1824_0_stall_out_0_reg_189_NO_SHIFT_REG;
assign rcnode_170to189_rc1_cmp1824_0_NO_SHIFT_REG = rcnode_170to189_rc1_cmp1824_0_reg_189_NO_SHIFT_REG;
assign rcnode_170to189_rc1_cmp1824_0_stall_in_reg_189_NO_SHIFT_REG = rcnode_170to189_rc1_cmp1824_0_stall_in_NO_SHIFT_REG;
assign rcnode_170to189_rc1_cmp1824_0_valid_out_NO_SHIFT_REG = rcnode_170to189_rc1_cmp1824_0_valid_out_reg_189_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_c1_eni428_stall_local;
wire [287:0] local_bb5_c1_eni428;

assign local_bb5_c1_eni428[127:0] = local_bb5_c1_eni329[127:0];
assign local_bb5_c1_eni428[159:128] = local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG;
assign local_bb5_c1_eni428[287:160] = local_bb5_c1_eni329[287:160];

// This section implements an unregistered operation.
// 
wire local_bb5_c5_eni3_stall_local;
wire [191:0] local_bb5_c5_eni3;
wire [32:0] rci_rcnode_170to189_rc1_var__u5_0_reg_170;

assign local_bb5_c5_eni3[95:0] = local_bb5_c5_eni2[95:0];
assign local_bb5_c5_eni3[127:96] = rnode_1to2_ld__0_NO_SHIFT_REG;
assign local_bb5_c5_eni3[191:128] = local_bb5_c5_eni2[191:128];
assign rci_rcnode_170to189_rc1_var__u5_0_reg_170[0] = rnode_169to170_var__u5_1_NO_SHIFT_REG;
assign rci_rcnode_170to189_rc1_var__u5_0_reg_170[32:1] = rnode_169to170_ld__1_NO_SHIFT_REG;

// Register node:
//  * latency = 19
//  * capacity = 19
 logic rcnode_170to189_rc1_var__u5_0_valid_out_NO_SHIFT_REG;
 logic rcnode_170to189_rc1_var__u5_0_stall_in_NO_SHIFT_REG;
 logic [32:0] rcnode_170to189_rc1_var__u5_0_NO_SHIFT_REG;
 logic rcnode_170to189_rc1_var__u5_0_reg_189_inputs_ready_NO_SHIFT_REG;
 logic [32:0] rcnode_170to189_rc1_var__u5_0_reg_189_NO_SHIFT_REG;
 logic rcnode_170to189_rc1_var__u5_0_valid_out_reg_189_NO_SHIFT_REG;
 logic rcnode_170to189_rc1_var__u5_0_stall_in_reg_189_NO_SHIFT_REG;
 logic rcnode_170to189_rc1_var__u5_0_stall_out_0_reg_189_IP_NO_SHIFT_REG;
 logic rcnode_170to189_rc1_var__u5_0_stall_out_0_reg_189_NO_SHIFT_REG;

acl_data_fifo rcnode_170to189_rc1_var__u5_0_reg_189_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_170to189_rc1_var__u5_0_reg_189_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_170to189_rc1_var__u5_0_stall_in_reg_189_NO_SHIFT_REG),
	.valid_out(rcnode_170to189_rc1_var__u5_0_valid_out_reg_189_NO_SHIFT_REG),
	.stall_out(rcnode_170to189_rc1_var__u5_0_stall_out_0_reg_189_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_170to189_rc1_var__u5_0_reg_170),
	.data_out(rcnode_170to189_rc1_var__u5_0_reg_189_NO_SHIFT_REG)
);

defparam rcnode_170to189_rc1_var__u5_0_reg_189_fifo.DEPTH = 20;
defparam rcnode_170to189_rc1_var__u5_0_reg_189_fifo.DATA_WIDTH = 33;
defparam rcnode_170to189_rc1_var__u5_0_reg_189_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_170to189_rc1_var__u5_0_reg_189_fifo.IMPL = "ram";

assign rcnode_170to189_rc1_var__u5_0_reg_189_inputs_ready_NO_SHIFT_REG = (rnode_169to170_var__u5_0_valid_out_1_NO_SHIFT_REG & rnode_169to170_ld__0_valid_out_1_NO_SHIFT_REG);
assign rcnode_170to189_rc1_var__u5_0_stall_out_0_reg_189_NO_SHIFT_REG = (~(rcnode_170to189_rc1_var__u5_0_reg_189_inputs_ready_NO_SHIFT_REG) | rcnode_170to189_rc1_var__u5_0_stall_out_0_reg_189_IP_NO_SHIFT_REG);
assign rnode_169to170_var__u5_0_stall_in_1_NO_SHIFT_REG = rcnode_170to189_rc1_var__u5_0_stall_out_0_reg_189_NO_SHIFT_REG;
assign rnode_169to170_ld__0_stall_in_1_NO_SHIFT_REG = rcnode_170to189_rc1_var__u5_0_stall_out_0_reg_189_NO_SHIFT_REG;
assign rcnode_170to189_rc1_var__u5_0_NO_SHIFT_REG = rcnode_170to189_rc1_var__u5_0_reg_189_NO_SHIFT_REG;
assign rcnode_170to189_rc1_var__u5_0_stall_in_reg_189_NO_SHIFT_REG = rcnode_170to189_rc1_var__u5_0_stall_in_NO_SHIFT_REG;
assign rcnode_170to189_rc1_var__u5_0_valid_out_NO_SHIFT_REG = rcnode_170to189_rc1_var__u5_0_valid_out_reg_189_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_c1_eni527_stall_local;
wire [287:0] local_bb5_c1_eni527;

assign local_bb5_c1_eni527[159:0] = local_bb5_c1_eni428[159:0];
assign local_bb5_c1_eni527[191:160] = local_lvm_i_426_NO_SHIFT_REG;
assign local_bb5_c1_eni527[287:192] = local_bb5_c1_eni428[287:192];

// This section implements an unregistered operation.
// 
wire local_bb5_c5_eni4_stall_local;
wire [191:0] local_bb5_c5_eni4;
wire [710:0] rci_rcnode_189to190_rc0_cmp56_0_reg_189;

assign local_bb5_c5_eni4[127:0] = local_bb5_c5_eni3[127:0];
assign local_bb5_c5_eni4[159:128] = rnode_1to2_i_426_0_NO_SHIFT_REG;
assign local_bb5_c5_eni4[191:160] = local_bb5_c5_eni3[191:160];
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[0] = rcnode_1to189_rc20_cmp56_0_NO_SHIFT_REG[0];
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[1] = rcnode_1to189_rc20_cmp56_0_NO_SHIFT_REG[1];
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[33:2] = rcnode_1to189_rc20_cmp56_0_NO_SHIFT_REG[33:2];
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[65:34] = rcnode_1to189_rc20_cmp56_0_NO_SHIFT_REG[65:34];
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[66] = rcnode_1to189_rc21__phi_decision_xor118_0_NO_SHIFT_REG[0];
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[98:67] = rcnode_1to189_rc21__phi_decision_xor118_0_NO_SHIFT_REG[32:1];
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[130:99] = rcnode_1to189_rc21__phi_decision_xor118_0_NO_SHIFT_REG[64:33];
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[162:131] = rcnode_1to189_rc21__phi_decision_xor118_0_NO_SHIFT_REG[96:65];
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[194:163] = rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[226:195] = rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_NO_SHIFT_REG[63:32];
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[290:227] = (rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_NO_SHIFT_REG[127:64] & 64'hFFFFFFFFFFFFFFFC);
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[322:291] = rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_NO_SHIFT_REG[159:128];
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[354:323] = rcnode_1to189_rc23_heightCounter_148_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[386:355] = rcnode_1to189_rc23_heightCounter_148_0_NO_SHIFT_REG[63:32];
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[418:387] = rcnode_1to189_rc23_heightCounter_148_0_NO_SHIFT_REG[95:64];
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[450:419] = rcnode_1to189_rc23_heightCounter_148_0_NO_SHIFT_REG[127:96];
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[482:451] = rcnode_1to189_rc24_mul36_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[514:483] = rcnode_1to189_rc24_mul36_0_NO_SHIFT_REG[63:32];
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[546:515] = rcnode_1to189_rc24_mul36_0_NO_SHIFT_REG[95:64];
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[578:547] = rcnode_1to189_rc24_mul36_0_NO_SHIFT_REG[127:96];
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[610:579] = rnode_2to189_mul46_0_NO_SHIFT_REG;
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[611] = rnode_10to189__phi_decision_xor119_or_0_NO_SHIFT_REG;
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[612] = rcnode_170to189_rc1_cmp1824_0_NO_SHIFT_REG[0];
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[644:613] = rcnode_170to189_rc1_cmp1824_0_NO_SHIFT_REG[32:1];
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[676:645] = rcnode_170to189_rc1_cmp1824_0_NO_SHIFT_REG[64:33];
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[677] = rcnode_170to189_rc1_cmp1824_0_NO_SHIFT_REG[65];
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[678] = rcnode_170to189_rc1_var__u5_0_NO_SHIFT_REG[0];
assign rci_rcnode_189to190_rc0_cmp56_0_reg_189[710:679] = rcnode_170to189_rc1_var__u5_0_NO_SHIFT_REG[32:1];

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_189to190_rc0_cmp56_0_valid_out_NO_SHIFT_REG;
 logic rcnode_189to190_rc0_cmp56_0_stall_in_NO_SHIFT_REG;
 logic [710:0] rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG;
 logic rcnode_189to190_rc0_cmp56_0_reg_190_inputs_ready_NO_SHIFT_REG;
 logic [710:0] rcnode_189to190_rc0_cmp56_0_reg_190_NO_SHIFT_REG;
 logic rcnode_189to190_rc0_cmp56_0_valid_out_reg_190_NO_SHIFT_REG;
 logic rcnode_189to190_rc0_cmp56_0_stall_in_reg_190_NO_SHIFT_REG;
 logic rcnode_189to190_rc0_cmp56_0_stall_out_0_reg_190_IP_NO_SHIFT_REG;
 logic rcnode_189to190_rc0_cmp56_0_stall_out_0_reg_190_NO_SHIFT_REG;

acl_data_fifo rcnode_189to190_rc0_cmp56_0_reg_190_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_189to190_rc0_cmp56_0_reg_190_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_189to190_rc0_cmp56_0_stall_in_reg_190_NO_SHIFT_REG),
	.valid_out(rcnode_189to190_rc0_cmp56_0_valid_out_reg_190_NO_SHIFT_REG),
	.stall_out(rcnode_189to190_rc0_cmp56_0_stall_out_0_reg_190_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_189to190_rc0_cmp56_0_reg_189),
	.data_out(rcnode_189to190_rc0_cmp56_0_reg_190_NO_SHIFT_REG)
);

defparam rcnode_189to190_rc0_cmp56_0_reg_190_fifo.DEPTH = 1;
defparam rcnode_189to190_rc0_cmp56_0_reg_190_fifo.DATA_WIDTH = 711;
defparam rcnode_189to190_rc0_cmp56_0_reg_190_fifo.ALLOW_FULL_WRITE = 1;
defparam rcnode_189to190_rc0_cmp56_0_reg_190_fifo.IMPL = "ll_reg";

assign rcnode_189to190_rc0_cmp56_0_reg_190_inputs_ready_NO_SHIFT_REG = (rnode_2to189_mul46_0_valid_out_NO_SHIFT_REG & rnode_10to189__phi_decision_xor119_or_0_valid_out_NO_SHIFT_REG & rcnode_1to189_rc20_cmp56_0_valid_out_NO_SHIFT_REG & rcnode_1to189_rc21__phi_decision_xor118_0_valid_out_NO_SHIFT_REG & rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_valid_out_NO_SHIFT_REG & rcnode_1to189_rc23_heightCounter_148_0_valid_out_NO_SHIFT_REG & rcnode_1to189_rc24_mul36_0_valid_out_NO_SHIFT_REG & rcnode_170to189_rc1_cmp1824_0_valid_out_NO_SHIFT_REG & rcnode_170to189_rc1_var__u5_0_valid_out_NO_SHIFT_REG);
assign rcnode_189to190_rc0_cmp56_0_stall_out_0_reg_190_NO_SHIFT_REG = (~(rcnode_189to190_rc0_cmp56_0_reg_190_inputs_ready_NO_SHIFT_REG) | rcnode_189to190_rc0_cmp56_0_stall_out_0_reg_190_IP_NO_SHIFT_REG);
assign rnode_2to189_mul46_0_stall_in_NO_SHIFT_REG = rcnode_189to190_rc0_cmp56_0_stall_out_0_reg_190_NO_SHIFT_REG;
assign rnode_10to189__phi_decision_xor119_or_0_stall_in_NO_SHIFT_REG = rcnode_189to190_rc0_cmp56_0_stall_out_0_reg_190_NO_SHIFT_REG;
assign rcnode_1to189_rc20_cmp56_0_stall_in_NO_SHIFT_REG = rcnode_189to190_rc0_cmp56_0_stall_out_0_reg_190_NO_SHIFT_REG;
assign rcnode_1to189_rc21__phi_decision_xor118_0_stall_in_NO_SHIFT_REG = rcnode_189to190_rc0_cmp56_0_stall_out_0_reg_190_NO_SHIFT_REG;
assign rcnode_1to189_rc22_memcoalesce_param_extrValue_3150_0_stall_in_NO_SHIFT_REG = rcnode_189to190_rc0_cmp56_0_stall_out_0_reg_190_NO_SHIFT_REG;
assign rcnode_1to189_rc23_heightCounter_148_0_stall_in_NO_SHIFT_REG = rcnode_189to190_rc0_cmp56_0_stall_out_0_reg_190_NO_SHIFT_REG;
assign rcnode_1to189_rc24_mul36_0_stall_in_NO_SHIFT_REG = rcnode_189to190_rc0_cmp56_0_stall_out_0_reg_190_NO_SHIFT_REG;
assign rcnode_170to189_rc1_cmp1824_0_stall_in_NO_SHIFT_REG = rcnode_189to190_rc0_cmp56_0_stall_out_0_reg_190_NO_SHIFT_REG;
assign rcnode_170to189_rc1_var__u5_0_stall_in_NO_SHIFT_REG = rcnode_189to190_rc0_cmp56_0_stall_out_0_reg_190_NO_SHIFT_REG;
assign rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG = rcnode_189to190_rc0_cmp56_0_reg_190_NO_SHIFT_REG;
assign rcnode_189to190_rc0_cmp56_0_stall_in_reg_190_NO_SHIFT_REG = rcnode_189to190_rc0_cmp56_0_stall_in_NO_SHIFT_REG;
assign rcnode_189to190_rc0_cmp56_0_valid_out_NO_SHIFT_REG = rcnode_189to190_rc0_cmp56_0_valid_out_reg_190_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_c1_eni6_stall_local;
wire [287:0] local_bb5_c1_eni6;

assign local_bb5_c1_eni6[191:0] = local_bb5_c1_eni527[191:0];
assign local_bb5_c1_eni6[223:192] = local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG;
assign local_bb5_c1_eni6[287:224] = local_bb5_c1_eni527[287:224];

// This section implements an unregistered operation.
// 
wire local_bb5_c5_eni5_valid_out;
wire local_bb5_c5_eni5_stall_in;
wire local_bb5_c5_eni5_inputs_ready;
wire local_bb5_c5_eni5_stall_local;
wire [191:0] local_bb5_c5_eni5;

assign local_bb5_c5_eni5_inputs_ready = (rnode_1to2_mul46_0_valid_out_0_NO_SHIFT_REG & rnode_1to2_c_332_0_valid_out_0_NO_SHIFT_REG & rnode_1to2_ld__0_valid_out_0_NO_SHIFT_REG & rnode_1to2_i_426_0_valid_out_0_NO_SHIFT_REG & rnode_1to2_j_522_0_valid_out_0_NO_SHIFT_REG);
assign local_bb5_c5_eni5[159:0] = local_bb5_c5_eni4[159:0];
assign local_bb5_c5_eni5[191:160] = rnode_1to2_j_522_0_NO_SHIFT_REG;
assign local_bb5_c5_eni5_valid_out = local_bb5_c5_eni5_inputs_ready;
assign local_bb5_c5_eni5_stall_local = local_bb5_c5_eni5_stall_in;
assign rnode_1to2_mul46_0_stall_in_0_NO_SHIFT_REG = (local_bb5_c5_eni5_stall_local | ~(local_bb5_c5_eni5_inputs_ready));
assign rnode_1to2_c_332_0_stall_in_0_NO_SHIFT_REG = (local_bb5_c5_eni5_stall_local | ~(local_bb5_c5_eni5_inputs_ready));
assign rnode_1to2_ld__0_stall_in_0_NO_SHIFT_REG = (local_bb5_c5_eni5_stall_local | ~(local_bb5_c5_eni5_inputs_ready));
assign rnode_1to2_i_426_0_stall_in_0_NO_SHIFT_REG = (local_bb5_c5_eni5_stall_local | ~(local_bb5_c5_eni5_inputs_ready));
assign rnode_1to2_j_522_0_stall_in_0_NO_SHIFT_REG = (local_bb5_c5_eni5_stall_local | ~(local_bb5_c5_eni5_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb5_c1_eni7_stall_local;
wire [287:0] local_bb5_c1_eni7;

assign local_bb5_c1_eni7[223:0] = local_bb5_c1_eni6[223:0];
assign local_bb5_c1_eni7[255:224] = local_lvm_j_522_NO_SHIFT_REG;
assign local_bb5_c1_eni7[287:256] = local_bb5_c1_eni6[287:256];

// This section implements a staging register.
// 
wire rstag_2to2_bb5_c5_eni5_valid_out;
wire rstag_2to2_bb5_c5_eni5_stall_in;
wire rstag_2to2_bb5_c5_eni5_inputs_ready;
wire rstag_2to2_bb5_c5_eni5_stall_local;
 reg rstag_2to2_bb5_c5_eni5_staging_valid_NO_SHIFT_REG;
wire rstag_2to2_bb5_c5_eni5_combined_valid;
 reg [191:0] rstag_2to2_bb5_c5_eni5_staging_reg_NO_SHIFT_REG;
wire [191:0] rstag_2to2_bb5_c5_eni5;

assign rstag_2to2_bb5_c5_eni5_inputs_ready = local_bb5_c5_eni5_valid_out;
assign rstag_2to2_bb5_c5_eni5 = (rstag_2to2_bb5_c5_eni5_staging_valid_NO_SHIFT_REG ? rstag_2to2_bb5_c5_eni5_staging_reg_NO_SHIFT_REG : local_bb5_c5_eni5);
assign rstag_2to2_bb5_c5_eni5_combined_valid = (rstag_2to2_bb5_c5_eni5_staging_valid_NO_SHIFT_REG | rstag_2to2_bb5_c5_eni5_inputs_ready);
assign rstag_2to2_bb5_c5_eni5_valid_out = rstag_2to2_bb5_c5_eni5_combined_valid;
assign rstag_2to2_bb5_c5_eni5_stall_local = rstag_2to2_bb5_c5_eni5_stall_in;
assign local_bb5_c5_eni5_stall_in = (|rstag_2to2_bb5_c5_eni5_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_2to2_bb5_c5_eni5_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_2to2_bb5_c5_eni5_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_2to2_bb5_c5_eni5_stall_local)
		begin
			if (~(rstag_2to2_bb5_c5_eni5_staging_valid_NO_SHIFT_REG))
			begin
				rstag_2to2_bb5_c5_eni5_staging_valid_NO_SHIFT_REG <= rstag_2to2_bb5_c5_eni5_inputs_ready;
			end
		end
		else
		begin
			rstag_2to2_bb5_c5_eni5_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_2to2_bb5_c5_eni5_staging_valid_NO_SHIFT_REG))
		begin
			rstag_2to2_bb5_c5_eni5_staging_reg_NO_SHIFT_REG <= local_bb5_c5_eni5;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_c1_eni8_valid_out;
wire local_bb5_c1_eni8_stall_in;
wire local_bb5_c1_eni8_inputs_ready;
wire local_bb5_c1_eni8_stall_local;
wire [287:0] local_bb5_c1_eni8;

assign local_bb5_c1_eni8_inputs_ready = (merge_node_valid_out_0_NO_SHIFT_REG & merge_node_valid_out_1_NO_SHIFT_REG & merge_node_valid_out_2_NO_SHIFT_REG & merge_node_valid_out_3_NO_SHIFT_REG & merge_node_valid_out_4_NO_SHIFT_REG & merge_node_valid_out_5_NO_SHIFT_REG & merge_node_valid_out_6_NO_SHIFT_REG & merge_node_valid_out_7_NO_SHIFT_REG);
assign local_bb5_c1_eni8[255:0] = local_bb5_c1_eni7[255:0];
assign local_bb5_c1_eni8[287:256] = local_lvm_mul36_NO_SHIFT_REG;
assign local_bb5_c1_eni8_valid_out = local_bb5_c1_eni8_inputs_ready;
assign local_bb5_c1_eni8_stall_local = local_bb5_c1_eni8_stall_in;
assign merge_node_stall_in_0 = (local_bb5_c1_eni8_stall_local | ~(local_bb5_c1_eni8_inputs_ready));
assign merge_node_stall_in_1 = (local_bb5_c1_eni8_stall_local | ~(local_bb5_c1_eni8_inputs_ready));
assign merge_node_stall_in_2 = (local_bb5_c1_eni8_stall_local | ~(local_bb5_c1_eni8_inputs_ready));
assign merge_node_stall_in_3 = (local_bb5_c1_eni8_stall_local | ~(local_bb5_c1_eni8_inputs_ready));
assign merge_node_stall_in_4 = (local_bb5_c1_eni8_stall_local | ~(local_bb5_c1_eni8_inputs_ready));
assign merge_node_stall_in_5 = (local_bb5_c1_eni8_stall_local | ~(local_bb5_c1_eni8_inputs_ready));
assign merge_node_stall_in_6 = (local_bb5_c1_eni8_stall_local | ~(local_bb5_c1_eni8_inputs_ready));
assign merge_node_stall_in_7 = (local_bb5_c1_eni8_stall_local | ~(local_bb5_c1_eni8_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb5_c5_enter_c5_eni5_valid_out_0;
wire local_bb5_c5_enter_c5_eni5_stall_in_0;
wire local_bb5_c5_enter_c5_eni5_valid_out_1;
wire local_bb5_c5_enter_c5_eni5_stall_in_1;
wire local_bb5_c5_enter_c5_eni5_valid_out_2;
wire local_bb5_c5_enter_c5_eni5_stall_in_2;
wire local_bb5_c5_enter_c5_eni5_valid_out_3;
wire local_bb5_c5_enter_c5_eni5_stall_in_3;
wire local_bb5_c5_enter_c5_eni5_valid_out_4;
wire local_bb5_c5_enter_c5_eni5_stall_in_4;
wire local_bb5_c5_enter_c5_eni5_valid_out_5;
wire local_bb5_c5_enter_c5_eni5_stall_in_5;
wire local_bb5_c5_enter_c5_eni5_inputs_ready;
wire local_bb5_c5_enter_c5_eni5_stall_local;
wire local_bb5_c5_enter_c5_eni5_input_accepted;
wire [191:0] local_bb5_c5_enter_c5_eni5;
wire local_bb5_c5_exit_c5_exi4_enable;
wire local_bb5_c5_exit_c5_exi4_entry_stall;
wire local_bb5_c5_enter_c5_eni5_valid_bit;
wire local_bb5_c5_exit_c5_exi4_output_regs_ready;
wire local_bb5_c5_exit_c5_exi4_valid_in;
wire local_bb5_c5_exit_c5_exi4_phases;
wire local_bb5_c5_enter_c5_eni5_inc_pipelined_thread;
wire local_bb5_c5_enter_c5_eni5_dec_pipelined_thread;
wire local_bb5_c5_enter_c5_eni5_fu_stall_out;

assign local_bb5_c5_enter_c5_eni5_inputs_ready = rstag_2to2_bb5_c5_eni5_valid_out;
assign local_bb5_c5_enter_c5_eni5 = rstag_2to2_bb5_c5_eni5;
assign local_bb5_c5_enter_c5_eni5_input_accepted = (local_bb5_c5_enter_c5_eni5_inputs_ready && !(local_bb5_c5_exit_c5_exi4_entry_stall));
assign local_bb5_c5_enter_c5_eni5_valid_bit = local_bb5_c5_enter_c5_eni5_input_accepted;
assign local_bb5_c5_enter_c5_eni5_inc_pipelined_thread = 1'b1;
assign local_bb5_c5_enter_c5_eni5_dec_pipelined_thread = ~(1'b0);
assign local_bb5_c5_enter_c5_eni5_fu_stall_out = (~(local_bb5_c5_enter_c5_eni5_inputs_ready) | local_bb5_c5_exit_c5_exi4_entry_stall);
assign local_bb5_c5_enter_c5_eni5_stall_local = (local_bb5_c5_enter_c5_eni5_stall_in_0 | local_bb5_c5_enter_c5_eni5_stall_in_1 | local_bb5_c5_enter_c5_eni5_stall_in_2 | local_bb5_c5_enter_c5_eni5_stall_in_3 | local_bb5_c5_enter_c5_eni5_stall_in_4 | local_bb5_c5_enter_c5_eni5_stall_in_5);
assign local_bb5_c5_enter_c5_eni5_valid_out_0 = local_bb5_c5_enter_c5_eni5_inputs_ready;
assign local_bb5_c5_enter_c5_eni5_valid_out_1 = local_bb5_c5_enter_c5_eni5_inputs_ready;
assign local_bb5_c5_enter_c5_eni5_valid_out_2 = local_bb5_c5_enter_c5_eni5_inputs_ready;
assign local_bb5_c5_enter_c5_eni5_valid_out_3 = local_bb5_c5_enter_c5_eni5_inputs_ready;
assign local_bb5_c5_enter_c5_eni5_valid_out_4 = local_bb5_c5_enter_c5_eni5_inputs_ready;
assign local_bb5_c5_enter_c5_eni5_valid_out_5 = local_bb5_c5_enter_c5_eni5_inputs_ready;
assign rstag_2to2_bb5_c5_eni5_stall_in = (|local_bb5_c5_enter_c5_eni5_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb5_c1_enter26_c1_eni8_valid_out_0;
wire local_bb5_c1_enter26_c1_eni8_stall_in_0;
wire local_bb5_c1_enter26_c1_eni8_valid_out_1;
wire local_bb5_c1_enter26_c1_eni8_stall_in_1;
wire local_bb5_c1_enter26_c1_eni8_valid_out_2;
wire local_bb5_c1_enter26_c1_eni8_stall_in_2;
wire local_bb5_c1_enter26_c1_eni8_valid_out_3;
wire local_bb5_c1_enter26_c1_eni8_stall_in_3;
wire local_bb5_c1_enter26_c1_eni8_valid_out_4;
wire local_bb5_c1_enter26_c1_eni8_stall_in_4;
wire local_bb5_c1_enter26_c1_eni8_valid_out_5;
wire local_bb5_c1_enter26_c1_eni8_stall_in_5;
wire local_bb5_c1_enter26_c1_eni8_valid_out_6;
wire local_bb5_c1_enter26_c1_eni8_stall_in_6;
wire local_bb5_c1_enter26_c1_eni8_valid_out_7;
wire local_bb5_c1_enter26_c1_eni8_stall_in_7;
wire local_bb5_c1_enter26_c1_eni8_valid_out_8;
wire local_bb5_c1_enter26_c1_eni8_stall_in_8;
wire local_bb5_c1_enter26_c1_eni8_inputs_ready;
wire local_bb5_c1_enter26_c1_eni8_stall_local;
wire local_bb5_c1_enter26_c1_eni8_input_accepted;
wire [287:0] local_bb5_c1_enter26_c1_eni8;
wire local_bb5_c1_exit24_c1_exi6_enable;
wire local_bb5_c1_exit24_c1_exi6_entry_stall;
wire local_bb5_c1_enter26_c1_eni8_valid_bit;
wire local_bb5_c1_exit24_c1_exi6_output_regs_ready;
wire local_bb5_c1_exit24_c1_exi6_valid_in;
wire local_bb5_c1_exit24_c1_exi6_phases;
wire local_bb5_c1_enter26_c1_eni8_inc_pipelined_thread;
wire local_bb5_c1_enter26_c1_eni8_dec_pipelined_thread;
wire local_bb5_c1_enter26_c1_eni8_fu_stall_out;

assign local_bb5_c1_enter26_c1_eni8_inputs_ready = local_bb5_c1_eni8_valid_out;
assign local_bb5_c1_enter26_c1_eni8 = local_bb5_c1_eni8;
assign local_bb5_c1_enter26_c1_eni8_input_accepted = (local_bb5_c1_enter26_c1_eni8_inputs_ready && !(local_bb5_c1_exit24_c1_exi6_entry_stall));
assign local_bb5_c1_enter26_c1_eni8_valid_bit = local_bb5_c1_enter26_c1_eni8_input_accepted;
assign local_bb5_c1_enter26_c1_eni8_inc_pipelined_thread = 1'b1;
assign local_bb5_c1_enter26_c1_eni8_dec_pipelined_thread = ~(1'b0);
assign local_bb5_c1_enter26_c1_eni8_fu_stall_out = (~(local_bb5_c1_enter26_c1_eni8_inputs_ready) | local_bb5_c1_exit24_c1_exi6_entry_stall);
assign local_bb5_c1_enter26_c1_eni8_stall_local = (local_bb5_c1_enter26_c1_eni8_stall_in_0 | local_bb5_c1_enter26_c1_eni8_stall_in_1 | local_bb5_c1_enter26_c1_eni8_stall_in_2 | local_bb5_c1_enter26_c1_eni8_stall_in_3 | local_bb5_c1_enter26_c1_eni8_stall_in_4 | local_bb5_c1_enter26_c1_eni8_stall_in_5 | local_bb5_c1_enter26_c1_eni8_stall_in_6 | local_bb5_c1_enter26_c1_eni8_stall_in_7 | local_bb5_c1_enter26_c1_eni8_stall_in_8);
assign local_bb5_c1_enter26_c1_eni8_valid_out_0 = local_bb5_c1_enter26_c1_eni8_inputs_ready;
assign local_bb5_c1_enter26_c1_eni8_valid_out_1 = local_bb5_c1_enter26_c1_eni8_inputs_ready;
assign local_bb5_c1_enter26_c1_eni8_valid_out_2 = local_bb5_c1_enter26_c1_eni8_inputs_ready;
assign local_bb5_c1_enter26_c1_eni8_valid_out_3 = local_bb5_c1_enter26_c1_eni8_inputs_ready;
assign local_bb5_c1_enter26_c1_eni8_valid_out_4 = local_bb5_c1_enter26_c1_eni8_inputs_ready;
assign local_bb5_c1_enter26_c1_eni8_valid_out_5 = local_bb5_c1_enter26_c1_eni8_inputs_ready;
assign local_bb5_c1_enter26_c1_eni8_valid_out_6 = local_bb5_c1_enter26_c1_eni8_inputs_ready;
assign local_bb5_c1_enter26_c1_eni8_valid_out_7 = local_bb5_c1_enter26_c1_eni8_inputs_ready;
assign local_bb5_c1_enter26_c1_eni8_valid_out_8 = local_bb5_c1_enter26_c1_eni8_inputs_ready;
assign local_bb5_c1_eni8_stall_in = (|local_bb5_c1_enter26_c1_eni8_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb5_c5_ene1_stall_local;
wire [31:0] local_bb5_c5_ene1;

assign local_bb5_c5_ene1[31:0] = local_bb5_c5_enter_c5_eni5[63:32];

// This section implements an unregistered operation.
// 
wire local_bb5_c5_ene2_stall_local;
wire [31:0] local_bb5_c5_ene2;

assign local_bb5_c5_ene2[31:0] = local_bb5_c5_enter_c5_eni5[95:64];

// This section implements an unregistered operation.
// 
wire local_bb5_c5_ene3_valid_out_0;
wire local_bb5_c5_ene3_stall_in_0;
wire local_bb5_c5_ene3_valid_out_1;
wire local_bb5_c5_ene3_stall_in_1;
wire local_bb5_c5_ene3_inputs_ready;
wire local_bb5_c5_ene3_stall_local;
wire [31:0] local_bb5_c5_ene3;

assign local_bb5_c5_ene3_inputs_ready = local_bb5_c5_enter_c5_eni5_valid_out_2;
assign local_bb5_c5_ene3[31:0] = local_bb5_c5_enter_c5_eni5[127:96];
assign local_bb5_c5_ene3_valid_out_0 = 1'b1;
assign local_bb5_c5_ene3_valid_out_1 = 1'b1;
assign local_bb5_c5_enter_c5_eni5_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c5_ene4_valid_out;
wire local_bb5_c5_ene4_stall_in;
wire local_bb5_c5_ene4_inputs_ready;
wire local_bb5_c5_ene4_stall_local;
wire [31:0] local_bb5_c5_ene4;

assign local_bb5_c5_ene4_inputs_ready = local_bb5_c5_enter_c5_eni5_valid_out_3;
assign local_bb5_c5_ene4[31:0] = local_bb5_c5_enter_c5_eni5[159:128];
assign local_bb5_c5_ene4_valid_out = 1'b1;
assign local_bb5_c5_enter_c5_eni5_stall_in_3 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c5_ene5_valid_out;
wire local_bb5_c5_ene5_stall_in;
wire local_bb5_c5_ene5_inputs_ready;
wire local_bb5_c5_ene5_stall_local;
wire [31:0] local_bb5_c5_ene5;

assign local_bb5_c5_ene5_inputs_ready = local_bb5_c5_enter_c5_eni5_valid_out_4;
assign local_bb5_c5_ene5[31:0] = local_bb5_c5_enter_c5_eni5[191:160];
assign local_bb5_c5_ene5_valid_out = 1'b1;
assign local_bb5_c5_enter_c5_eni5_stall_in_4 = 1'b0;

// This section implements an unregistered operation.
// 
wire SFC_6_VALID_2_2_0_valid_out;
wire SFC_6_VALID_2_2_0_stall_in;
wire SFC_6_VALID_2_2_0_inputs_ready;
wire SFC_6_VALID_2_2_0_stall_local;
wire SFC_6_VALID_2_2_0;

assign SFC_6_VALID_2_2_0_inputs_ready = local_bb5_c5_enter_c5_eni5_valid_out_5;
assign SFC_6_VALID_2_2_0 = local_bb5_c5_enter_c5_eni5_valid_bit;
assign SFC_6_VALID_2_2_0_valid_out = 1'b1;
assign local_bb5_c5_enter_c5_eni5_stall_in_5 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c1_ene136_valid_out;
wire local_bb5_c1_ene136_stall_in;
wire local_bb5_c1_ene136_inputs_ready;
wire local_bb5_c1_ene136_stall_local;
wire [31:0] local_bb5_c1_ene136;

assign local_bb5_c1_ene136_inputs_ready = local_bb5_c1_enter26_c1_eni8_valid_out_0;
assign local_bb5_c1_ene136[31:0] = local_bb5_c1_enter26_c1_eni8[63:32];
assign local_bb5_c1_ene136_valid_out = 1'b1;
assign local_bb5_c1_enter26_c1_eni8_stall_in_0 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c1_ene235_valid_out;
wire local_bb5_c1_ene235_stall_in;
wire local_bb5_c1_ene235_inputs_ready;
wire local_bb5_c1_ene235_stall_local;
wire [31:0] local_bb5_c1_ene235;

assign local_bb5_c1_ene235_inputs_ready = local_bb5_c1_enter26_c1_eni8_valid_out_1;
assign local_bb5_c1_ene235[31:0] = local_bb5_c1_enter26_c1_eni8[95:64];
assign local_bb5_c1_ene235_valid_out = 1'b1;
assign local_bb5_c1_enter26_c1_eni8_stall_in_1 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c1_ene334_valid_out;
wire local_bb5_c1_ene334_stall_in;
wire local_bb5_c1_ene334_inputs_ready;
wire local_bb5_c1_ene334_stall_local;
wire [31:0] local_bb5_c1_ene334;

assign local_bb5_c1_ene334_inputs_ready = local_bb5_c1_enter26_c1_eni8_valid_out_2;
assign local_bb5_c1_ene334[31:0] = local_bb5_c1_enter26_c1_eni8[127:96];
assign local_bb5_c1_ene334_valid_out = 1'b1;
assign local_bb5_c1_enter26_c1_eni8_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c1_ene433_valid_out_0;
wire local_bb5_c1_ene433_stall_in_0;
wire local_bb5_c1_ene433_valid_out_1;
wire local_bb5_c1_ene433_stall_in_1;
wire local_bb5_c1_ene433_inputs_ready;
wire local_bb5_c1_ene433_stall_local;
wire [31:0] local_bb5_c1_ene433;

assign local_bb5_c1_ene433_inputs_ready = local_bb5_c1_enter26_c1_eni8_valid_out_3;
assign local_bb5_c1_ene433[31:0] = local_bb5_c1_enter26_c1_eni8[159:128];
assign local_bb5_c1_ene433_valid_out_0 = 1'b1;
assign local_bb5_c1_ene433_valid_out_1 = 1'b1;
assign local_bb5_c1_enter26_c1_eni8_stall_in_3 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c1_ene532_valid_out;
wire local_bb5_c1_ene532_stall_in;
wire local_bb5_c1_ene532_inputs_ready;
wire local_bb5_c1_ene532_stall_local;
wire [31:0] local_bb5_c1_ene532;

assign local_bb5_c1_ene532_inputs_ready = local_bb5_c1_enter26_c1_eni8_valid_out_4;
assign local_bb5_c1_ene532[31:0] = local_bb5_c1_enter26_c1_eni8[191:160];
assign local_bb5_c1_ene532_valid_out = 1'b1;
assign local_bb5_c1_enter26_c1_eni8_stall_in_4 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c1_ene6_valid_out;
wire local_bb5_c1_ene6_stall_in;
wire local_bb5_c1_ene6_inputs_ready;
wire local_bb5_c1_ene6_stall_local;
wire [31:0] local_bb5_c1_ene6;

assign local_bb5_c1_ene6_inputs_ready = local_bb5_c1_enter26_c1_eni8_valid_out_5;
assign local_bb5_c1_ene6[31:0] = local_bb5_c1_enter26_c1_eni8[223:192];
assign local_bb5_c1_ene6_valid_out = 1'b1;
assign local_bb5_c1_enter26_c1_eni8_stall_in_5 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c1_ene7_valid_out;
wire local_bb5_c1_ene7_stall_in;
wire local_bb5_c1_ene7_inputs_ready;
wire local_bb5_c1_ene7_stall_local;
wire [31:0] local_bb5_c1_ene7;

assign local_bb5_c1_ene7_inputs_ready = local_bb5_c1_enter26_c1_eni8_valid_out_6;
assign local_bb5_c1_ene7[31:0] = local_bb5_c1_enter26_c1_eni8[255:224];
assign local_bb5_c1_ene7_valid_out = 1'b1;
assign local_bb5_c1_enter26_c1_eni8_stall_in_6 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c1_ene8_valid_out;
wire local_bb5_c1_ene8_stall_in;
wire local_bb5_c1_ene8_inputs_ready;
wire local_bb5_c1_ene8_stall_local;
wire [31:0] local_bb5_c1_ene8;

assign local_bb5_c1_ene8_inputs_ready = local_bb5_c1_enter26_c1_eni8_valid_out_7;
assign local_bb5_c1_ene8[31:0] = local_bb5_c1_enter26_c1_eni8[287:256];
assign local_bb5_c1_ene8_valid_out = 1'b1;
assign local_bb5_c1_enter26_c1_eni8_stall_in_7 = 1'b0;

// This section implements an unregistered operation.
// 
wire SFC_2_VALID_1_1_0_valid_out;
wire SFC_2_VALID_1_1_0_stall_in;
wire SFC_2_VALID_1_1_0_inputs_ready;
wire SFC_2_VALID_1_1_0_stall_local;
wire SFC_2_VALID_1_1_0;

assign SFC_2_VALID_1_1_0_inputs_ready = local_bb5_c1_enter26_c1_eni8_valid_out_8;
assign SFC_2_VALID_1_1_0 = local_bb5_c1_enter26_c1_eni8_valid_bit;
assign SFC_2_VALID_1_1_0_valid_out = 1'b1;
assign local_bb5_c1_enter26_c1_eni8_stall_in_8 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_tmp17_valid_out;
wire local_bb5_tmp17_stall_in;
wire local_bb5_tmp17_inputs_ready;
wire local_bb5_tmp17_stall_local;
wire [31:0] local_bb5_tmp17;

assign local_bb5_tmp17_inputs_ready = (local_bb5_c5_enter_c5_eni5_valid_out_0 & local_bb5_c5_enter_c5_eni5_valid_out_1);
assign local_bb5_tmp17 = (local_bb5_c5_ene1 + local_bb5_c5_ene2);
assign local_bb5_tmp17_valid_out = 1'b1;
assign local_bb5_c5_enter_c5_eni5_stall_in_0 = 1'b0;
assign local_bb5_c5_enter_c5_eni5_stall_in_1 = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb5_c5_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c5_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb5_c5_ene3_0_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c5_ene3_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb5_c5_ene3_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c5_ene3_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c5_ene3_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c5_ene3_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb5_c5_ene3_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb5_c5_ene3_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb5_c5_ene3_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb5_c5_ene3_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb5_c5_ene3_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb5_c5_ene3),
	.data_out(rnode_2to3_bb5_c5_ene3_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb5_c5_ene3_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb5_c5_ene3_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb5_c5_ene3_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb5_c5_ene3_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb5_c5_ene3_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_c5_ene3_stall_in_1 = 1'b0;
assign rnode_2to3_bb5_c5_ene3_0_NO_SHIFT_REG = rnode_2to3_bb5_c5_ene3_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb5_c5_ene3_0_stall_in_reg_3_NO_SHIFT_REG = ~(local_bb5_c5_exit_c5_exi4_enable);
assign rnode_2to3_bb5_c5_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb5_c5_ene4_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c5_ene4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb5_c5_ene4_0_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c5_ene4_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb5_c5_ene4_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c5_ene4_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c5_ene4_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c5_ene4_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb5_c5_ene4_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb5_c5_ene4_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb5_c5_ene4_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb5_c5_ene4_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb5_c5_ene4_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb5_c5_ene4),
	.data_out(rnode_2to3_bb5_c5_ene4_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb5_c5_ene4_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb5_c5_ene4_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb5_c5_ene4_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb5_c5_ene4_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb5_c5_ene4_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_c5_ene4_stall_in = 1'b0;
assign rnode_2to3_bb5_c5_ene4_0_NO_SHIFT_REG = rnode_2to3_bb5_c5_ene4_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb5_c5_ene4_0_stall_in_reg_3_NO_SHIFT_REG = ~(local_bb5_c5_exit_c5_exi4_enable);
assign rnode_2to3_bb5_c5_ene4_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb5_c5_ene5_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c5_ene5_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb5_c5_ene5_0_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c5_ene5_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb5_c5_ene5_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c5_ene5_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c5_ene5_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c5_ene5_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb5_c5_ene5_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb5_c5_ene5_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb5_c5_ene5_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb5_c5_ene5_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb5_c5_ene5_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb5_c5_ene5),
	.data_out(rnode_2to3_bb5_c5_ene5_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb5_c5_ene5_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb5_c5_ene5_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb5_c5_ene5_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb5_c5_ene5_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb5_c5_ene5_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_c5_ene5_stall_in = 1'b0;
assign rnode_2to3_bb5_c5_ene5_0_NO_SHIFT_REG = rnode_2to3_bb5_c5_ene5_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb5_c5_ene5_0_stall_in_reg_3_NO_SHIFT_REG = ~(local_bb5_c5_exit_c5_exi4_enable);
assign rnode_2to3_bb5_c5_ene5_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_6_VALID_2_3_0_inputs_ready;
 reg SFC_6_VALID_2_3_0_valid_out_NO_SHIFT_REG;
wire SFC_6_VALID_2_3_0_stall_in;
wire SFC_6_VALID_2_3_0_output_regs_ready;
 reg SFC_6_VALID_2_3_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_6_VALID_2_3_0_causedstall;

assign SFC_6_VALID_2_3_0_inputs_ready = 1'b1;
assign SFC_6_VALID_2_3_0_output_regs_ready = local_bb5_c5_exit_c5_exi4_enable;
assign SFC_6_VALID_2_2_0_stall_in = 1'b0;
assign SFC_6_VALID_2_3_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c5_exit_c5_exi4_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_6_VALID_2_3_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_6_VALID_2_3_0_output_regs_ready)
		begin
			SFC_6_VALID_2_3_0_NO_SHIFT_REG <= SFC_6_VALID_2_2_0;
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb5_mul26_inputs_ready;
 reg local_bb5_mul26_valid_out_NO_SHIFT_REG;
wire local_bb5_mul26_stall_in;
wire local_bb5_mul26_output_regs_ready;
wire [31:0] local_bb5_mul26;
 reg local_bb5_mul26_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb5_mul26_valid_pipe_1_NO_SHIFT_REG;
wire local_bb5_mul26_causedstall;

acl_int_mult int_module_local_bb5_mul26 (
	.clock(clock),
	.dataa(local_bb5_c1_ene136),
	.datab(local_bb5_c1_ene235),
	.enable(local_bb5_mul26_output_regs_ready),
	.result(local_bb5_mul26)
);

defparam int_module_local_bb5_mul26.INPUT1_WIDTH = 32;
defparam int_module_local_bb5_mul26.INPUT2_WIDTH = 32;
defparam int_module_local_bb5_mul26.OUTPUT_WIDTH = 32;
defparam int_module_local_bb5_mul26.LATENCY = 3;
defparam int_module_local_bb5_mul26.SIGNED = 0;

assign local_bb5_mul26_inputs_ready = 1'b1;
assign local_bb5_mul26_output_regs_ready = local_bb5_c1_exit24_c1_exi6_enable;
assign local_bb5_c1_ene136_stall_in = 1'b0;
assign local_bb5_c1_ene235_stall_in = 1'b0;
assign local_bb5_mul26_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c1_exit24_c1_exi6_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_mul26_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb5_mul26_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_mul26_output_regs_ready)
		begin
			local_bb5_mul26_valid_pipe_0_NO_SHIFT_REG <= 1'b1;
			local_bb5_mul26_valid_pipe_1_NO_SHIFT_REG <= local_bb5_mul26_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_mul26_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_mul26_output_regs_ready)
		begin
			local_bb5_mul26_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb5_mul26_stall_in))
			begin
				local_bb5_mul26_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb5_c1_ene334_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb5_c1_ene334_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb5_c1_ene334_0_NO_SHIFT_REG;
 logic rnode_1to2_bb5_c1_ene334_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb5_c1_ene334_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb5_c1_ene334_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb5_c1_ene334_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb5_c1_ene334_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb5_c1_ene334_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb5_c1_ene334_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb5_c1_ene334_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb5_c1_ene334_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb5_c1_ene334_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb5_c1_ene334),
	.data_out(rnode_1to2_bb5_c1_ene334_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb5_c1_ene334_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb5_c1_ene334_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb5_c1_ene334_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb5_c1_ene334_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb5_c1_ene334_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_c1_ene334_stall_in = 1'b0;
assign rnode_1to2_bb5_c1_ene334_0_NO_SHIFT_REG = rnode_1to2_bb5_c1_ene334_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb5_c1_ene334_0_stall_in_reg_2_NO_SHIFT_REG = ~(local_bb5_c1_exit24_c1_exi6_enable);
assign rnode_1to2_bb5_c1_ene334_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire local_bb5_mul30_inputs_ready;
 reg local_bb5_mul30_valid_out_NO_SHIFT_REG;
wire local_bb5_mul30_stall_in;
wire local_bb5_mul30_output_regs_ready;
wire [31:0] local_bb5_mul30;
 reg local_bb5_mul30_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb5_mul30_valid_pipe_1_NO_SHIFT_REG;
wire local_bb5_mul30_causedstall;

acl_int_mult int_module_local_bb5_mul30 (
	.clock(clock),
	.dataa(local_bb5_c1_ene433),
	.datab(local_bb5_c1_ene532),
	.enable(local_bb5_mul30_output_regs_ready),
	.result(local_bb5_mul30)
);

defparam int_module_local_bb5_mul30.INPUT1_WIDTH = 32;
defparam int_module_local_bb5_mul30.INPUT2_WIDTH = 32;
defparam int_module_local_bb5_mul30.OUTPUT_WIDTH = 32;
defparam int_module_local_bb5_mul30.LATENCY = 3;
defparam int_module_local_bb5_mul30.SIGNED = 0;

assign local_bb5_mul30_inputs_ready = 1'b1;
assign local_bb5_mul30_output_regs_ready = local_bb5_c1_exit24_c1_exi6_enable;
assign local_bb5_c1_ene433_stall_in_0 = 1'b0;
assign local_bb5_c1_ene532_stall_in = 1'b0;
assign local_bb5_mul30_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c1_exit24_c1_exi6_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_mul30_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb5_mul30_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_mul30_output_regs_ready)
		begin
			local_bb5_mul30_valid_pipe_0_NO_SHIFT_REG <= 1'b1;
			local_bb5_mul30_valid_pipe_1_NO_SHIFT_REG <= local_bb5_mul30_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_mul30_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_mul30_output_regs_ready)
		begin
			local_bb5_mul30_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb5_mul30_stall_in))
			begin
				local_bb5_mul30_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb5_c1_ene6_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb5_c1_ene6_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb5_c1_ene6_0_NO_SHIFT_REG;
 logic rnode_1to2_bb5_c1_ene6_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb5_c1_ene6_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb5_c1_ene6_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb5_c1_ene6_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb5_c1_ene6_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb5_c1_ene6_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb5_c1_ene6_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb5_c1_ene6_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb5_c1_ene6_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb5_c1_ene6_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb5_c1_ene6),
	.data_out(rnode_1to2_bb5_c1_ene6_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb5_c1_ene6_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb5_c1_ene6_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb5_c1_ene6_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb5_c1_ene6_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb5_c1_ene6_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_c1_ene6_stall_in = 1'b0;
assign rnode_1to2_bb5_c1_ene6_0_NO_SHIFT_REG = rnode_1to2_bb5_c1_ene6_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb5_c1_ene6_0_stall_in_reg_2_NO_SHIFT_REG = ~(local_bb5_c1_exit24_c1_exi6_enable);
assign rnode_1to2_bb5_c1_ene6_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire local_bb5_mul38_inputs_ready;
 reg local_bb5_mul38_valid_out_NO_SHIFT_REG;
wire local_bb5_mul38_stall_in;
wire local_bb5_mul38_output_regs_ready;
wire [31:0] local_bb5_mul38;
 reg local_bb5_mul38_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb5_mul38_valid_pipe_1_NO_SHIFT_REG;
wire local_bb5_mul38_causedstall;

acl_int_mult int_module_local_bb5_mul38 (
	.clock(clock),
	.dataa(local_bb5_c1_ene433),
	.datab(local_bb5_c1_ene7),
	.enable(local_bb5_mul38_output_regs_ready),
	.result(local_bb5_mul38)
);

defparam int_module_local_bb5_mul38.INPUT1_WIDTH = 32;
defparam int_module_local_bb5_mul38.INPUT2_WIDTH = 32;
defparam int_module_local_bb5_mul38.OUTPUT_WIDTH = 32;
defparam int_module_local_bb5_mul38.LATENCY = 3;
defparam int_module_local_bb5_mul38.SIGNED = 0;

assign local_bb5_mul38_inputs_ready = 1'b1;
assign local_bb5_mul38_output_regs_ready = local_bb5_c1_exit24_c1_exi6_enable;
assign local_bb5_c1_ene433_stall_in_1 = 1'b0;
assign local_bb5_c1_ene7_stall_in = 1'b0;
assign local_bb5_mul38_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c1_exit24_c1_exi6_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_mul38_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb5_mul38_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_mul38_output_regs_ready)
		begin
			local_bb5_mul38_valid_pipe_0_NO_SHIFT_REG <= 1'b1;
			local_bb5_mul38_valid_pipe_1_NO_SHIFT_REG <= local_bb5_mul38_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_mul38_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_mul38_output_regs_ready)
		begin
			local_bb5_mul38_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb5_mul38_stall_in))
			begin
				local_bb5_mul38_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb5_c1_ene8_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb5_c1_ene8_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb5_c1_ene8_0_NO_SHIFT_REG;
 logic rnode_1to2_bb5_c1_ene8_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb5_c1_ene8_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb5_c1_ene8_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb5_c1_ene8_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb5_c1_ene8_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb5_c1_ene8_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb5_c1_ene8_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb5_c1_ene8_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb5_c1_ene8_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb5_c1_ene8_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb5_c1_ene8),
	.data_out(rnode_1to2_bb5_c1_ene8_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb5_c1_ene8_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb5_c1_ene8_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb5_c1_ene8_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb5_c1_ene8_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb5_c1_ene8_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_c1_ene8_stall_in = 1'b0;
assign rnode_1to2_bb5_c1_ene8_0_NO_SHIFT_REG = rnode_1to2_bb5_c1_ene8_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb5_c1_ene8_0_stall_in_reg_2_NO_SHIFT_REG = ~(local_bb5_c1_exit24_c1_exi6_enable);
assign rnode_1to2_bb5_c1_ene8_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_2_VALID_1_2_0_inputs_ready;
 reg SFC_2_VALID_1_2_0_valid_out_NO_SHIFT_REG;
wire SFC_2_VALID_1_2_0_stall_in;
wire SFC_2_VALID_1_2_0_output_regs_ready;
 reg SFC_2_VALID_1_2_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_2_VALID_1_2_0_causedstall;

assign SFC_2_VALID_1_2_0_inputs_ready = 1'b1;
assign SFC_2_VALID_1_2_0_output_regs_ready = local_bb5_c1_exit24_c1_exi6_enable;
assign SFC_2_VALID_1_1_0_stall_in = 1'b0;
assign SFC_2_VALID_1_2_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c1_exit24_c1_exi6_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_2_VALID_1_2_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_2_VALID_1_2_0_output_regs_ready)
		begin
			SFC_2_VALID_1_2_0_NO_SHIFT_REG <= SFC_2_VALID_1_1_0;
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb5_tmp18_inputs_ready;
 reg local_bb5_tmp18_valid_out_NO_SHIFT_REG;
wire local_bb5_tmp18_stall_in;
wire local_bb5_tmp18_output_regs_ready;
wire [31:0] local_bb5_tmp18;
 reg local_bb5_tmp18_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb5_tmp18_valid_pipe_1_NO_SHIFT_REG;
wire local_bb5_tmp18_causedstall;

acl_int_mult int_module_local_bb5_tmp18 (
	.clock(clock),
	.dataa(local_bb5_tmp17),
	.datab(local_bb5_c5_ene3),
	.enable(local_bb5_tmp18_output_regs_ready),
	.result(local_bb5_tmp18)
);

defparam int_module_local_bb5_tmp18.INPUT1_WIDTH = 32;
defparam int_module_local_bb5_tmp18.INPUT2_WIDTH = 32;
defparam int_module_local_bb5_tmp18.OUTPUT_WIDTH = 32;
defparam int_module_local_bb5_tmp18.LATENCY = 3;
defparam int_module_local_bb5_tmp18.SIGNED = 0;

assign local_bb5_tmp18_inputs_ready = 1'b1;
assign local_bb5_tmp18_output_regs_ready = local_bb5_c5_exit_c5_exi4_enable;
assign local_bb5_tmp17_stall_in = 1'b0;
assign local_bb5_c5_ene3_stall_in_0 = 1'b0;
assign local_bb5_tmp18_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c5_exit_c5_exi4_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_tmp18_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb5_tmp18_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_tmp18_output_regs_ready)
		begin
			local_bb5_tmp18_valid_pipe_0_NO_SHIFT_REG <= 1'b1;
			local_bb5_tmp18_valid_pipe_1_NO_SHIFT_REG <= local_bb5_tmp18_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_tmp18_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_tmp18_output_regs_ready)
		begin
			local_bb5_tmp18_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb5_tmp18_stall_in))
			begin
				local_bb5_tmp18_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_c5_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c5_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb5_c5_ene3_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c5_ene3_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb5_c5_ene3_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c5_ene3_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c5_ene3_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c5_ene3_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_c5_ene3_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_c5_ene3_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_c5_ene3_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_c5_ene3_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_c5_ene3_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb5_c5_ene3_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb5_c5_ene3_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_c5_ene3_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_c5_ene3_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb5_c5_ene3_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_c5_ene3_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_c5_ene3_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb5_c5_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_c5_ene3_0_NO_SHIFT_REG = rnode_3to4_bb5_c5_ene3_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_c5_ene3_0_stall_in_reg_4_NO_SHIFT_REG = ~(local_bb5_c5_exit_c5_exi4_enable);
assign rnode_3to4_bb5_c5_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_c5_ene4_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c5_ene4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb5_c5_ene4_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c5_ene4_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb5_c5_ene4_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c5_ene4_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c5_ene4_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c5_ene4_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_c5_ene4_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_c5_ene4_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_c5_ene4_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_c5_ene4_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_c5_ene4_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb5_c5_ene4_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb5_c5_ene4_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_c5_ene4_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_c5_ene4_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb5_c5_ene4_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_c5_ene4_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_c5_ene4_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb5_c5_ene4_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_c5_ene4_0_NO_SHIFT_REG = rnode_3to4_bb5_c5_ene4_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_c5_ene4_0_stall_in_reg_4_NO_SHIFT_REG = ~(local_bb5_c5_exit_c5_exi4_enable);
assign rnode_3to4_bb5_c5_ene4_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_c5_ene5_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c5_ene5_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb5_c5_ene5_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c5_ene5_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb5_c5_ene5_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c5_ene5_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c5_ene5_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c5_ene5_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_c5_ene5_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_c5_ene5_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_c5_ene5_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_c5_ene5_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_c5_ene5_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb5_c5_ene5_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb5_c5_ene5_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_c5_ene5_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_c5_ene5_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb5_c5_ene5_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_c5_ene5_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_c5_ene5_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb5_c5_ene5_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_c5_ene5_0_NO_SHIFT_REG = rnode_3to4_bb5_c5_ene5_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_c5_ene5_0_stall_in_reg_4_NO_SHIFT_REG = ~(local_bb5_c5_exit_c5_exi4_enable);
assign rnode_3to4_bb5_c5_ene5_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_6_VALID_3_4_0_inputs_ready;
 reg SFC_6_VALID_3_4_0_valid_out_NO_SHIFT_REG;
wire SFC_6_VALID_3_4_0_stall_in;
wire SFC_6_VALID_3_4_0_output_regs_ready;
 reg SFC_6_VALID_3_4_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_6_VALID_3_4_0_causedstall;

assign SFC_6_VALID_3_4_0_inputs_ready = 1'b1;
assign SFC_6_VALID_3_4_0_output_regs_ready = local_bb5_c5_exit_c5_exi4_enable;
assign SFC_6_VALID_2_3_0_stall_in = 1'b0;
assign SFC_6_VALID_3_4_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c5_exit_c5_exi4_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_6_VALID_3_4_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_6_VALID_3_4_0_output_regs_ready)
		begin
			SFC_6_VALID_3_4_0_NO_SHIFT_REG <= SFC_6_VALID_2_3_0_NO_SHIFT_REG;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb5_c1_ene334_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c1_ene334_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb5_c1_ene334_0_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c1_ene334_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb5_c1_ene334_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c1_ene334_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c1_ene334_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c1_ene334_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb5_c1_ene334_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb5_c1_ene334_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb5_c1_ene334_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb5_c1_ene334_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb5_c1_ene334_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb5_c1_ene334_0_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb5_c1_ene334_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb5_c1_ene334_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb5_c1_ene334_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb5_c1_ene334_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb5_c1_ene334_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb5_c1_ene334_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb5_c1_ene334_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb5_c1_ene334_0_NO_SHIFT_REG = rnode_2to3_bb5_c1_ene334_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb5_c1_ene334_0_stall_in_reg_3_NO_SHIFT_REG = ~(local_bb5_c1_exit24_c1_exi6_enable);
assign rnode_2to3_bb5_c1_ene334_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb5_c1_ene6_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c1_ene6_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb5_c1_ene6_0_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c1_ene6_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb5_c1_ene6_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c1_ene6_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c1_ene6_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c1_ene6_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb5_c1_ene6_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb5_c1_ene6_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb5_c1_ene6_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb5_c1_ene6_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb5_c1_ene6_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb5_c1_ene6_0_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb5_c1_ene6_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb5_c1_ene6_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb5_c1_ene6_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb5_c1_ene6_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb5_c1_ene6_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb5_c1_ene6_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb5_c1_ene6_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb5_c1_ene6_0_NO_SHIFT_REG = rnode_2to3_bb5_c1_ene6_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb5_c1_ene6_0_stall_in_reg_3_NO_SHIFT_REG = ~(local_bb5_c1_exit24_c1_exi6_enable);
assign rnode_2to3_bb5_c1_ene6_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb5_c1_ene8_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c1_ene8_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb5_c1_ene8_0_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c1_ene8_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb5_c1_ene8_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c1_ene8_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c1_ene8_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c1_ene8_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb5_c1_ene8_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb5_c1_ene8_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb5_c1_ene8_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb5_c1_ene8_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb5_c1_ene8_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb5_c1_ene8_0_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb5_c1_ene8_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb5_c1_ene8_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb5_c1_ene8_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb5_c1_ene8_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb5_c1_ene8_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb5_c1_ene8_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb5_c1_ene8_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb5_c1_ene8_0_NO_SHIFT_REG = rnode_2to3_bb5_c1_ene8_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb5_c1_ene8_0_stall_in_reg_3_NO_SHIFT_REG = ~(local_bb5_c1_exit24_c1_exi6_enable);
assign rnode_2to3_bb5_c1_ene8_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_2_VALID_2_3_0_inputs_ready;
 reg SFC_2_VALID_2_3_0_valid_out_NO_SHIFT_REG;
wire SFC_2_VALID_2_3_0_stall_in;
wire SFC_2_VALID_2_3_0_output_regs_ready;
 reg SFC_2_VALID_2_3_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_2_VALID_2_3_0_causedstall;

assign SFC_2_VALID_2_3_0_inputs_ready = 1'b1;
assign SFC_2_VALID_2_3_0_output_regs_ready = local_bb5_c1_exit24_c1_exi6_enable;
assign SFC_2_VALID_1_2_0_stall_in = 1'b0;
assign SFC_2_VALID_2_3_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c1_exit24_c1_exi6_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_2_VALID_2_3_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_2_VALID_2_3_0_output_regs_ready)
		begin
			SFC_2_VALID_2_3_0_NO_SHIFT_REG <= SFC_2_VALID_1_2_0_NO_SHIFT_REG;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb5_c5_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb5_c5_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb5_c5_ene3_0_NO_SHIFT_REG;
 logic rnode_4to5_bb5_c5_ene3_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb5_c5_ene3_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_c5_ene3_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_c5_ene3_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_c5_ene3_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb5_c5_ene3_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb5_c5_ene3_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb5_c5_ene3_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb5_c5_ene3_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb5_c5_ene3_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_c5_ene3_0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb5_c5_ene3_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb5_c5_ene3_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb5_c5_ene3_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_4to5_bb5_c5_ene3_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb5_c5_ene3_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb5_c5_ene3_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_c5_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb5_c5_ene3_0_NO_SHIFT_REG = rnode_4to5_bb5_c5_ene3_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb5_c5_ene3_0_stall_in_reg_5_NO_SHIFT_REG = ~(local_bb5_c5_exit_c5_exi4_enable);
assign rnode_4to5_bb5_c5_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb5_c5_ene4_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb5_c5_ene4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb5_c5_ene4_0_NO_SHIFT_REG;
 logic rnode_4to5_bb5_c5_ene4_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb5_c5_ene4_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_c5_ene4_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_c5_ene4_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_c5_ene4_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb5_c5_ene4_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb5_c5_ene4_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb5_c5_ene4_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb5_c5_ene4_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb5_c5_ene4_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_c5_ene4_0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb5_c5_ene4_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb5_c5_ene4_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb5_c5_ene4_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_4to5_bb5_c5_ene4_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb5_c5_ene4_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb5_c5_ene4_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_c5_ene4_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb5_c5_ene4_0_NO_SHIFT_REG = rnode_4to5_bb5_c5_ene4_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb5_c5_ene4_0_stall_in_reg_5_NO_SHIFT_REG = ~(local_bb5_c5_exit_c5_exi4_enable);
assign rnode_4to5_bb5_c5_ene4_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb5_c5_ene5_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb5_c5_ene5_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb5_c5_ene5_0_NO_SHIFT_REG;
 logic rnode_4to5_bb5_c5_ene5_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb5_c5_ene5_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_c5_ene5_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_c5_ene5_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_c5_ene5_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb5_c5_ene5_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb5_c5_ene5_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb5_c5_ene5_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb5_c5_ene5_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb5_c5_ene5_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_c5_ene5_0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb5_c5_ene5_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb5_c5_ene5_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb5_c5_ene5_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_4to5_bb5_c5_ene5_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb5_c5_ene5_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb5_c5_ene5_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_c5_ene5_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb5_c5_ene5_0_NO_SHIFT_REG = rnode_4to5_bb5_c5_ene5_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb5_c5_ene5_0_stall_in_reg_5_NO_SHIFT_REG = ~(local_bb5_c5_exit_c5_exi4_enable);
assign rnode_4to5_bb5_c5_ene5_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_6_VALID_4_5_0_inputs_ready;
 reg SFC_6_VALID_4_5_0_valid_out_NO_SHIFT_REG;
wire SFC_6_VALID_4_5_0_stall_in;
wire SFC_6_VALID_4_5_0_output_regs_ready;
 reg SFC_6_VALID_4_5_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_6_VALID_4_5_0_causedstall;

assign SFC_6_VALID_4_5_0_inputs_ready = 1'b1;
assign SFC_6_VALID_4_5_0_output_regs_ready = local_bb5_c5_exit_c5_exi4_enable;
assign SFC_6_VALID_3_4_0_stall_in = 1'b0;
assign SFC_6_VALID_4_5_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c5_exit_c5_exi4_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_6_VALID_4_5_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_6_VALID_4_5_0_output_regs_ready)
		begin
			SFC_6_VALID_4_5_0_NO_SHIFT_REG <= SFC_6_VALID_3_4_0_NO_SHIFT_REG;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_c1_ene334_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c1_ene334_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb5_c1_ene334_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c1_ene334_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb5_c1_ene334_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c1_ene334_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c1_ene334_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c1_ene334_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_c1_ene334_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_c1_ene334_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_c1_ene334_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_c1_ene334_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_c1_ene334_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb5_c1_ene334_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb5_c1_ene334_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_c1_ene334_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_c1_ene334_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb5_c1_ene334_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_c1_ene334_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_c1_ene334_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb5_c1_ene334_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_c1_ene334_0_NO_SHIFT_REG = rnode_3to4_bb5_c1_ene334_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_c1_ene334_0_stall_in_reg_4_NO_SHIFT_REG = ~(local_bb5_c1_exit24_c1_exi6_enable);
assign rnode_3to4_bb5_c1_ene334_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_c1_ene6_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c1_ene6_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb5_c1_ene6_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c1_ene6_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb5_c1_ene6_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c1_ene6_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c1_ene6_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c1_ene6_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_c1_ene6_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_c1_ene6_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_c1_ene6_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_c1_ene6_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_c1_ene6_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb5_c1_ene6_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb5_c1_ene6_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_c1_ene6_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_c1_ene6_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb5_c1_ene6_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_c1_ene6_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_c1_ene6_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb5_c1_ene6_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_c1_ene6_0_NO_SHIFT_REG = rnode_3to4_bb5_c1_ene6_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_c1_ene6_0_stall_in_reg_4_NO_SHIFT_REG = ~(local_bb5_c1_exit24_c1_exi6_enable);
assign rnode_3to4_bb5_c1_ene6_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_c1_ene8_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c1_ene8_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb5_c1_ene8_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c1_ene8_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb5_c1_ene8_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c1_ene8_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c1_ene8_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_c1_ene8_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_c1_ene8_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_c1_ene8_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_c1_ene8_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_c1_ene8_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_c1_ene8_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb5_c1_ene8_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb5_c1_ene8_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_c1_ene8_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_c1_ene8_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb5_c1_ene8_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_c1_ene8_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_c1_ene8_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb5_c1_ene8_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_c1_ene8_0_NO_SHIFT_REG = rnode_3to4_bb5_c1_ene8_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_c1_ene8_0_stall_in_reg_4_NO_SHIFT_REG = ~(local_bb5_c1_exit24_c1_exi6_enable);
assign rnode_3to4_bb5_c1_ene8_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_2_VALID_3_4_0_inputs_ready;
 reg SFC_2_VALID_3_4_0_valid_out_NO_SHIFT_REG;
wire SFC_2_VALID_3_4_0_stall_in;
wire SFC_2_VALID_3_4_0_output_regs_ready;
 reg SFC_2_VALID_3_4_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_2_VALID_3_4_0_causedstall;

assign SFC_2_VALID_3_4_0_inputs_ready = 1'b1;
assign SFC_2_VALID_3_4_0_output_regs_ready = local_bb5_c1_exit24_c1_exi6_enable;
assign SFC_2_VALID_2_3_0_stall_in = 1'b0;
assign SFC_2_VALID_3_4_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c1_exit24_c1_exi6_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_2_VALID_3_4_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_2_VALID_3_4_0_output_regs_ready)
		begin
			SFC_2_VALID_3_4_0_NO_SHIFT_REG <= SFC_2_VALID_2_3_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_c5_exi1_stall_local;
wire [159:0] local_bb5_c5_exi1;

assign local_bb5_c5_exi1[31:0] = 32'bx;
assign local_bb5_c5_exi1[63:32] = rnode_4to5_bb5_c5_ene3_0_NO_SHIFT_REG;
assign local_bb5_c5_exi1[159:64] = 96'bx;

// This section implements an unregistered operation.
// 
wire local_bb5_c1_exi123_stall_local;
wire [223:0] local_bb5_c1_exi123;

assign local_bb5_c1_exi123[31:0] = 32'bx;
assign local_bb5_c1_exi123[63:32] = rnode_3to4_bb5_c1_ene334_0_NO_SHIFT_REG;
assign local_bb5_c1_exi123[223:64] = 160'bx;

// This section implements an unregistered operation.
// 
wire local_bb5_c5_exi2_stall_local;
wire [159:0] local_bb5_c5_exi2;

assign local_bb5_c5_exi2[63:0] = local_bb5_c5_exi1[63:0];
assign local_bb5_c5_exi2[95:64] = local_bb5_tmp18;
assign local_bb5_c5_exi2[159:96] = local_bb5_c5_exi1[159:96];

// This section implements an unregistered operation.
// 
wire local_bb5_c1_exi2_stall_local;
wire [223:0] local_bb5_c1_exi2;

assign local_bb5_c1_exi2[63:0] = local_bb5_c1_exi123[63:0];
assign local_bb5_c1_exi2[95:64] = local_bb5_mul26;
assign local_bb5_c1_exi2[223:96] = local_bb5_c1_exi123[223:96];

// This section implements an unregistered operation.
// 
wire local_bb5_c5_exi3_stall_local;
wire [159:0] local_bb5_c5_exi3;

assign local_bb5_c5_exi3[95:0] = local_bb5_c5_exi2[95:0];
assign local_bb5_c5_exi3[127:96] = rnode_4to5_bb5_c5_ene4_0_NO_SHIFT_REG;
assign local_bb5_c5_exi3[159:128] = local_bb5_c5_exi2[159:128];

// This section implements an unregistered operation.
// 
wire local_bb5_c1_exi3_stall_local;
wire [223:0] local_bb5_c1_exi3;

assign local_bb5_c1_exi3[95:0] = local_bb5_c1_exi2[95:0];
assign local_bb5_c1_exi3[127:96] = local_bb5_mul38;
assign local_bb5_c1_exi3[223:128] = local_bb5_c1_exi2[223:128];

// This section implements an unregistered operation.
// 
wire local_bb5_c5_exi4_valid_out;
wire local_bb5_c5_exi4_stall_in;
wire local_bb5_c5_exi4_inputs_ready;
wire local_bb5_c5_exi4_stall_local;
wire [159:0] local_bb5_c5_exi4;

assign local_bb5_c5_exi4_inputs_ready = (local_bb5_tmp18_valid_out_NO_SHIFT_REG & rnode_4to5_bb5_c5_ene4_0_valid_out_NO_SHIFT_REG & rnode_4to5_bb5_c5_ene5_0_valid_out_NO_SHIFT_REG & rnode_4to5_bb5_c5_ene3_0_valid_out_NO_SHIFT_REG);
assign local_bb5_c5_exi4[127:0] = local_bb5_c5_exi3[127:0];
assign local_bb5_c5_exi4[159:128] = rnode_4to5_bb5_c5_ene5_0_NO_SHIFT_REG;
assign local_bb5_c5_exi4_valid_out = 1'b1;
assign local_bb5_tmp18_stall_in = 1'b0;
assign rnode_4to5_bb5_c5_ene4_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb5_c5_ene5_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb5_c5_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c1_exi4_stall_local;
wire [223:0] local_bb5_c1_exi4;

assign local_bb5_c1_exi4[127:0] = local_bb5_c1_exi3[127:0];
assign local_bb5_c1_exi4[159:128] = rnode_3to4_bb5_c1_ene8_0_NO_SHIFT_REG;
assign local_bb5_c1_exi4[223:160] = local_bb5_c1_exi3[223:160];

// This section implements an unregistered operation.
// 
wire local_bb5_c5_exit_c5_exi4_valid_out;
wire local_bb5_c5_exit_c5_exi4_stall_in;
wire local_bb5_c5_exit_c5_exi4_inputs_ready;
wire local_bb5_c5_exit_c5_exi4_stall_local;
wire [159:0] local_bb5_c5_exit_c5_exi4;
wire local_bb5_c5_exit_c5_exi4_valid;
wire local_bb5_c5_exit_c5_exi4_fu_stall_out;

acl_enable_sink local_bb5_c5_exit_c5_exi4_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb5_c5_exi4),
	.data_out(local_bb5_c5_exit_c5_exi4),
	.input_accepted(local_bb5_c5_enter_c5_eni5_input_accepted),
	.valid_out(local_bb5_c5_exit_c5_exi4_valid),
	.stall_in(local_bb5_c5_exit_c5_exi4_stall_local),
	.enable(local_bb5_c5_exit_c5_exi4_enable),
	.valid_in(local_bb5_c5_exit_c5_exi4_valid_in),
	.stall_entry(local_bb5_c5_exit_c5_exi4_entry_stall),
	.inc_pipelined_thread(local_bb5_c5_enter_c5_eni5_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb5_c5_enter_c5_eni5_dec_pipelined_thread)
);

defparam local_bb5_c5_exit_c5_exi4_instance.DATA_WIDTH = 160;
defparam local_bb5_c5_exit_c5_exi4_instance.PIPELINE_DEPTH = 3;
defparam local_bb5_c5_exit_c5_exi4_instance.SCHEDULEII = 1;
defparam local_bb5_c5_exit_c5_exi4_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb5_c5_exit_c5_exi4_inputs_ready = (local_bb5_c5_exi4_valid_out & SFC_6_VALID_4_5_0_valid_out_NO_SHIFT_REG);
assign local_bb5_c5_exit_c5_exi4_valid_in = SFC_6_VALID_4_5_0_NO_SHIFT_REG;
assign local_bb5_c5_exit_c5_exi4_fu_stall_out = ~(local_bb5_c5_exit_c5_exi4_enable);
assign local_bb5_c5_exit_c5_exi4_valid_out = local_bb5_c5_exit_c5_exi4_valid;
assign local_bb5_c5_exit_c5_exi4_stall_local = local_bb5_c5_exit_c5_exi4_stall_in;
assign local_bb5_c5_exi4_stall_in = 1'b0;
assign SFC_6_VALID_4_5_0_stall_in = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c1_exi5_stall_local;
wire [223:0] local_bb5_c1_exi5;

assign local_bb5_c1_exi5[159:0] = local_bb5_c1_exi4[159:0];
assign local_bb5_c1_exi5[191:160] = rnode_3to4_bb5_c1_ene6_0_NO_SHIFT_REG;
assign local_bb5_c1_exi5[223:192] = local_bb5_c1_exi4[223:192];

// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_5to5_bb5_c5_exit_c5_exi4_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_5to5_bb5_c5_exit_c5_exi4_0_stall_in_0_NO_SHIFT_REG;
 logic [159:0] rnode_5to5_bb5_c5_exit_c5_exi4_0_NO_SHIFT_REG;
 logic rnode_5to5_bb5_c5_exit_c5_exi4_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_5to5_bb5_c5_exit_c5_exi4_0_stall_in_1_NO_SHIFT_REG;
 logic [159:0] rnode_5to5_bb5_c5_exit_c5_exi4_1_NO_SHIFT_REG;
 logic rnode_5to5_bb5_c5_exit_c5_exi4_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_5to5_bb5_c5_exit_c5_exi4_0_stall_in_2_NO_SHIFT_REG;
 logic [159:0] rnode_5to5_bb5_c5_exit_c5_exi4_2_NO_SHIFT_REG;
 logic rnode_5to5_bb5_c5_exit_c5_exi4_0_valid_out_3_NO_SHIFT_REG;
 logic rnode_5to5_bb5_c5_exit_c5_exi4_0_stall_in_3_NO_SHIFT_REG;
 logic [159:0] rnode_5to5_bb5_c5_exit_c5_exi4_3_NO_SHIFT_REG;
 logic rnode_5to5_bb5_c5_exit_c5_exi4_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [159:0] rnode_5to5_bb5_c5_exit_c5_exi4_0_reg_5_NO_SHIFT_REG;
 logic rnode_5to5_bb5_c5_exit_c5_exi4_0_valid_out_0_reg_5_NO_SHIFT_REG;
 logic rnode_5to5_bb5_c5_exit_c5_exi4_0_stall_in_0_reg_5_NO_SHIFT_REG;
 logic rnode_5to5_bb5_c5_exit_c5_exi4_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_5to5_bb5_c5_exit_c5_exi4_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_5to5_bb5_c5_exit_c5_exi4_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_5to5_bb5_c5_exit_c5_exi4_0_stall_in_0_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_5to5_bb5_c5_exit_c5_exi4_0_valid_out_0_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_5to5_bb5_c5_exit_c5_exi4_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb5_c5_exit_c5_exi4),
	.data_out(rnode_5to5_bb5_c5_exit_c5_exi4_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_5to5_bb5_c5_exit_c5_exi4_0_reg_5_fifo.DEPTH = 3;
defparam rnode_5to5_bb5_c5_exit_c5_exi4_0_reg_5_fifo.DATA_WIDTH = 160;
defparam rnode_5to5_bb5_c5_exit_c5_exi4_0_reg_5_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_5to5_bb5_c5_exit_c5_exi4_0_reg_5_fifo.IMPL = "zl_reg";

assign rnode_5to5_bb5_c5_exit_c5_exi4_0_reg_5_inputs_ready_NO_SHIFT_REG = local_bb5_c5_exit_c5_exi4_valid_out;
assign local_bb5_c5_exit_c5_exi4_stall_in = rnode_5to5_bb5_c5_exit_c5_exi4_0_stall_out_reg_5_NO_SHIFT_REG;
assign rnode_5to5_bb5_c5_exit_c5_exi4_0_stall_in_0_reg_5_NO_SHIFT_REG = (rnode_5to5_bb5_c5_exit_c5_exi4_0_stall_in_0_NO_SHIFT_REG | rnode_5to5_bb5_c5_exit_c5_exi4_0_stall_in_1_NO_SHIFT_REG | rnode_5to5_bb5_c5_exit_c5_exi4_0_stall_in_2_NO_SHIFT_REG | rnode_5to5_bb5_c5_exit_c5_exi4_0_stall_in_3_NO_SHIFT_REG);
assign rnode_5to5_bb5_c5_exit_c5_exi4_0_valid_out_0_NO_SHIFT_REG = rnode_5to5_bb5_c5_exit_c5_exi4_0_valid_out_0_reg_5_NO_SHIFT_REG;
assign rnode_5to5_bb5_c5_exit_c5_exi4_0_valid_out_1_NO_SHIFT_REG = rnode_5to5_bb5_c5_exit_c5_exi4_0_valid_out_0_reg_5_NO_SHIFT_REG;
assign rnode_5to5_bb5_c5_exit_c5_exi4_0_valid_out_2_NO_SHIFT_REG = rnode_5to5_bb5_c5_exit_c5_exi4_0_valid_out_0_reg_5_NO_SHIFT_REG;
assign rnode_5to5_bb5_c5_exit_c5_exi4_0_valid_out_3_NO_SHIFT_REG = rnode_5to5_bb5_c5_exit_c5_exi4_0_valid_out_0_reg_5_NO_SHIFT_REG;
assign rnode_5to5_bb5_c5_exit_c5_exi4_0_NO_SHIFT_REG = rnode_5to5_bb5_c5_exit_c5_exi4_0_reg_5_NO_SHIFT_REG;
assign rnode_5to5_bb5_c5_exit_c5_exi4_1_NO_SHIFT_REG = rnode_5to5_bb5_c5_exit_c5_exi4_0_reg_5_NO_SHIFT_REG;
assign rnode_5to5_bb5_c5_exit_c5_exi4_2_NO_SHIFT_REG = rnode_5to5_bb5_c5_exit_c5_exi4_0_reg_5_NO_SHIFT_REG;
assign rnode_5to5_bb5_c5_exit_c5_exi4_3_NO_SHIFT_REG = rnode_5to5_bb5_c5_exit_c5_exi4_0_reg_5_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_c1_exi6_valid_out;
wire local_bb5_c1_exi6_stall_in;
wire local_bb5_c1_exi6_inputs_ready;
wire local_bb5_c1_exi6_stall_local;
wire [223:0] local_bb5_c1_exi6;

assign local_bb5_c1_exi6_inputs_ready = (local_bb5_mul26_valid_out_NO_SHIFT_REG & local_bb5_mul38_valid_out_NO_SHIFT_REG & rnode_3to4_bb5_c1_ene8_0_valid_out_NO_SHIFT_REG & rnode_3to4_bb5_c1_ene6_0_valid_out_NO_SHIFT_REG & rnode_3to4_bb5_c1_ene334_0_valid_out_NO_SHIFT_REG & local_bb5_mul30_valid_out_NO_SHIFT_REG);
assign local_bb5_c1_exi6[191:0] = local_bb5_c1_exi5[191:0];
assign local_bb5_c1_exi6[223:192] = local_bb5_mul30;
assign local_bb5_c1_exi6_valid_out = 1'b1;
assign local_bb5_mul26_stall_in = 1'b0;
assign local_bb5_mul38_stall_in = 1'b0;
assign rnode_3to4_bb5_c1_ene8_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_c1_ene6_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_c1_ene334_0_stall_in_NO_SHIFT_REG = 1'b0;
assign local_bb5_mul30_stall_in = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c5_exe4_stall_local;
wire [31:0] local_bb5_c5_exe4;

assign local_bb5_c5_exe4[31:0] = rnode_5to5_bb5_c5_exit_c5_exi4_0_NO_SHIFT_REG[159:128];

// This section implements an unregistered operation.
// 
wire local_bb5_c5_exe3_stall_local;
wire [31:0] local_bb5_c5_exe3;

assign local_bb5_c5_exe3[31:0] = rnode_5to5_bb5_c5_exit_c5_exi4_1_NO_SHIFT_REG[127:96];

// This section implements an unregistered operation.
// 
wire local_bb5_c5_exe2_stall_local;
wire [31:0] local_bb5_c5_exe2;

assign local_bb5_c5_exe2[31:0] = rnode_5to5_bb5_c5_exit_c5_exi4_2_NO_SHIFT_REG[95:64];

// This section implements an unregistered operation.
// 
wire local_bb5_c5_exe1_stall_local;
wire [31:0] local_bb5_c5_exe1;

assign local_bb5_c5_exe1[31:0] = rnode_5to5_bb5_c5_exit_c5_exi4_3_NO_SHIFT_REG[63:32];

// This section implements an unregistered operation.
// 
wire local_bb5_c1_exit24_c1_exi6_valid_out;
wire local_bb5_c1_exit24_c1_exi6_stall_in;
wire local_bb5_c1_exit24_c1_exi6_inputs_ready;
wire local_bb5_c1_exit24_c1_exi6_stall_local;
wire [223:0] local_bb5_c1_exit24_c1_exi6;
wire local_bb5_c1_exit24_c1_exi6_valid;
wire local_bb5_c1_exit24_c1_exi6_fu_stall_out;

acl_enable_sink local_bb5_c1_exit24_c1_exi6_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb5_c1_exi6),
	.data_out(local_bb5_c1_exit24_c1_exi6),
	.input_accepted(local_bb5_c1_enter26_c1_eni8_input_accepted),
	.valid_out(local_bb5_c1_exit24_c1_exi6_valid),
	.stall_in(local_bb5_c1_exit24_c1_exi6_stall_local),
	.enable(local_bb5_c1_exit24_c1_exi6_enable),
	.valid_in(local_bb5_c1_exit24_c1_exi6_valid_in),
	.stall_entry(local_bb5_c1_exit24_c1_exi6_entry_stall),
	.inc_pipelined_thread(local_bb5_c1_enter26_c1_eni8_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb5_c1_enter26_c1_eni8_dec_pipelined_thread)
);

defparam local_bb5_c1_exit24_c1_exi6_instance.DATA_WIDTH = 224;
defparam local_bb5_c1_exit24_c1_exi6_instance.PIPELINE_DEPTH = 3;
defparam local_bb5_c1_exit24_c1_exi6_instance.SCHEDULEII = 1;
defparam local_bb5_c1_exit24_c1_exi6_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb5_c1_exit24_c1_exi6_inputs_ready = (local_bb5_c1_exi6_valid_out & SFC_2_VALID_3_4_0_valid_out_NO_SHIFT_REG);
assign local_bb5_c1_exit24_c1_exi6_valid_in = SFC_2_VALID_3_4_0_NO_SHIFT_REG;
assign local_bb5_c1_exit24_c1_exi6_fu_stall_out = ~(local_bb5_c1_exit24_c1_exi6_enable);
assign local_bb5_c1_exit24_c1_exi6_valid_out = local_bb5_c1_exit24_c1_exi6_valid;
assign local_bb5_c1_exit24_c1_exi6_stall_local = local_bb5_c1_exit24_c1_exi6_stall_in;
assign local_bb5_c1_exi6_stall_in = 1'b0;
assign SFC_2_VALID_3_4_0_stall_in = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c6_eni1_stall_local;
wire [159:0] local_bb5_c6_eni1;

assign local_bb5_c6_eni1[31:0] = 32'bx;
assign local_bb5_c6_eni1[63:32] = local_bb5_c5_exe1;
assign local_bb5_c6_eni1[159:64] = 96'bx;

// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_4to4_bb5_c1_exit24_c1_exi6_0_stall_in_0_NO_SHIFT_REG;
 logic [223:0] rnode_4to4_bb5_c1_exit24_c1_exi6_0_NO_SHIFT_REG;
 logic rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_4to4_bb5_c1_exit24_c1_exi6_0_stall_in_1_NO_SHIFT_REG;
 logic [223:0] rnode_4to4_bb5_c1_exit24_c1_exi6_1_NO_SHIFT_REG;
 logic rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_4to4_bb5_c1_exit24_c1_exi6_0_stall_in_2_NO_SHIFT_REG;
 logic [223:0] rnode_4to4_bb5_c1_exit24_c1_exi6_2_NO_SHIFT_REG;
 logic rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_3_NO_SHIFT_REG;
 logic rnode_4to4_bb5_c1_exit24_c1_exi6_0_stall_in_3_NO_SHIFT_REG;
 logic [223:0] rnode_4to4_bb5_c1_exit24_c1_exi6_3_NO_SHIFT_REG;
 logic rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_4_NO_SHIFT_REG;
 logic rnode_4to4_bb5_c1_exit24_c1_exi6_0_stall_in_4_NO_SHIFT_REG;
 logic [223:0] rnode_4to4_bb5_c1_exit24_c1_exi6_4_NO_SHIFT_REG;
 logic rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_5_NO_SHIFT_REG;
 logic rnode_4to4_bb5_c1_exit24_c1_exi6_0_stall_in_5_NO_SHIFT_REG;
 logic [223:0] rnode_4to4_bb5_c1_exit24_c1_exi6_5_NO_SHIFT_REG;
 logic rnode_4to4_bb5_c1_exit24_c1_exi6_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [223:0] rnode_4to4_bb5_c1_exit24_c1_exi6_0_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_0_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb5_c1_exit24_c1_exi6_0_stall_in_0_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb5_c1_exit24_c1_exi6_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_4to4_bb5_c1_exit24_c1_exi6_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to4_bb5_c1_exit24_c1_exi6_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to4_bb5_c1_exit24_c1_exi6_0_stall_in_0_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_0_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_4to4_bb5_c1_exit24_c1_exi6_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_c1_exit24_c1_exi6),
	.data_out(rnode_4to4_bb5_c1_exit24_c1_exi6_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_4to4_bb5_c1_exit24_c1_exi6_0_reg_4_fifo.DEPTH = 3;
defparam rnode_4to4_bb5_c1_exit24_c1_exi6_0_reg_4_fifo.DATA_WIDTH = 224;
defparam rnode_4to4_bb5_c1_exit24_c1_exi6_0_reg_4_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_4to4_bb5_c1_exit24_c1_exi6_0_reg_4_fifo.IMPL = "zl_reg";

assign rnode_4to4_bb5_c1_exit24_c1_exi6_0_reg_4_inputs_ready_NO_SHIFT_REG = local_bb5_c1_exit24_c1_exi6_valid_out;
assign local_bb5_c1_exit24_c1_exi6_stall_in = rnode_4to4_bb5_c1_exit24_c1_exi6_0_stall_out_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb5_c1_exit24_c1_exi6_0_stall_in_0_reg_4_NO_SHIFT_REG = (rnode_4to4_bb5_c1_exit24_c1_exi6_0_stall_in_0_NO_SHIFT_REG | rnode_4to4_bb5_c1_exit24_c1_exi6_0_stall_in_1_NO_SHIFT_REG | rnode_4to4_bb5_c1_exit24_c1_exi6_0_stall_in_2_NO_SHIFT_REG | rnode_4to4_bb5_c1_exit24_c1_exi6_0_stall_in_3_NO_SHIFT_REG | rnode_4to4_bb5_c1_exit24_c1_exi6_0_stall_in_4_NO_SHIFT_REG | rnode_4to4_bb5_c1_exit24_c1_exi6_0_stall_in_5_NO_SHIFT_REG);
assign rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_0_NO_SHIFT_REG = rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_1_NO_SHIFT_REG = rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_2_NO_SHIFT_REG = rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_3_NO_SHIFT_REG = rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_4_NO_SHIFT_REG = rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_5_NO_SHIFT_REG = rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb5_c1_exit24_c1_exi6_0_NO_SHIFT_REG = rnode_4to4_bb5_c1_exit24_c1_exi6_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb5_c1_exit24_c1_exi6_1_NO_SHIFT_REG = rnode_4to4_bb5_c1_exit24_c1_exi6_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb5_c1_exit24_c1_exi6_2_NO_SHIFT_REG = rnode_4to4_bb5_c1_exit24_c1_exi6_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb5_c1_exit24_c1_exi6_3_NO_SHIFT_REG = rnode_4to4_bb5_c1_exit24_c1_exi6_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb5_c1_exit24_c1_exi6_4_NO_SHIFT_REG = rnode_4to4_bb5_c1_exit24_c1_exi6_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb5_c1_exit24_c1_exi6_5_NO_SHIFT_REG = rnode_4to4_bb5_c1_exit24_c1_exi6_0_reg_4_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_c6_eni2_stall_local;
wire [159:0] local_bb5_c6_eni2;

assign local_bb5_c6_eni2[63:0] = local_bb5_c6_eni1[63:0];
assign local_bb5_c6_eni2[95:64] = local_bb5_c5_exe2;
assign local_bb5_c6_eni2[159:96] = local_bb5_c6_eni1[159:96];

// This section implements an unregistered operation.
// 
wire local_bb5_c1_exe6_stall_local;
wire [31:0] local_bb5_c1_exe6;

assign local_bb5_c1_exe6[31:0] = rnode_4to4_bb5_c1_exit24_c1_exi6_0_NO_SHIFT_REG[223:192];

// This section implements an unregistered operation.
// 
wire local_bb5_c1_exe5_stall_local;
wire [31:0] local_bb5_c1_exe5;

assign local_bb5_c1_exe5[31:0] = rnode_4to4_bb5_c1_exit24_c1_exi6_1_NO_SHIFT_REG[191:160];

// This section implements an unregistered operation.
// 
wire local_bb5_c1_exe4_stall_local;
wire [31:0] local_bb5_c1_exe4;

assign local_bb5_c1_exe4[31:0] = rnode_4to4_bb5_c1_exit24_c1_exi6_2_NO_SHIFT_REG[159:128];

// This section implements an unregistered operation.
// 
wire local_bb5_c1_exe3_stall_local;
wire [31:0] local_bb5_c1_exe3;

assign local_bb5_c1_exe3[31:0] = rnode_4to4_bb5_c1_exit24_c1_exi6_3_NO_SHIFT_REG[127:96];

// This section implements an unregistered operation.
// 
wire local_bb5_c1_exe2_stall_local;
wire [31:0] local_bb5_c1_exe2;

assign local_bb5_c1_exe2[31:0] = rnode_4to4_bb5_c1_exit24_c1_exi6_4_NO_SHIFT_REG[95:64];

// This section implements an unregistered operation.
// 
wire local_bb5_c1_exe125_stall_local;
wire [31:0] local_bb5_c1_exe125;

assign local_bb5_c1_exe125[31:0] = rnode_4to4_bb5_c1_exit24_c1_exi6_5_NO_SHIFT_REG[63:32];

// This section implements an unregistered operation.
// 
wire local_bb5_c6_eni3_stall_local;
wire [159:0] local_bb5_c6_eni3;

assign local_bb5_c6_eni3[95:0] = local_bb5_c6_eni2[95:0];
assign local_bb5_c6_eni3[127:96] = local_bb5_c5_exe3;
assign local_bb5_c6_eni3[159:128] = local_bb5_c6_eni2[159:128];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_eni110_stall_local;
wire [223:0] local_bb5_c2_eni110;

assign local_bb5_c2_eni110[31:0] = 32'bx;
assign local_bb5_c2_eni110[63:32] = local_bb5_c1_exe125;
assign local_bb5_c2_eni110[223:64] = 160'bx;

// This section implements an unregistered operation.
// 
wire local_bb5_c6_eni4_valid_out;
wire local_bb5_c6_eni4_stall_in;
wire local_bb5_c6_eni4_inputs_ready;
wire local_bb5_c6_eni4_stall_local;
wire [159:0] local_bb5_c6_eni4;

assign local_bb5_c6_eni4_inputs_ready = (rnode_5to5_bb5_c5_exit_c5_exi4_0_valid_out_0_NO_SHIFT_REG & rnode_5to5_bb5_c5_exit_c5_exi4_0_valid_out_1_NO_SHIFT_REG & rnode_5to5_bb5_c5_exit_c5_exi4_0_valid_out_2_NO_SHIFT_REG & rnode_5to5_bb5_c5_exit_c5_exi4_0_valid_out_3_NO_SHIFT_REG);
assign local_bb5_c6_eni4[127:0] = local_bb5_c6_eni3[127:0];
assign local_bb5_c6_eni4[159:128] = local_bb5_c5_exe4;
assign local_bb5_c6_eni4_valid_out = local_bb5_c6_eni4_inputs_ready;
assign local_bb5_c6_eni4_stall_local = local_bb5_c6_eni4_stall_in;
assign rnode_5to5_bb5_c5_exit_c5_exi4_0_stall_in_0_NO_SHIFT_REG = (local_bb5_c6_eni4_stall_local | ~(local_bb5_c6_eni4_inputs_ready));
assign rnode_5to5_bb5_c5_exit_c5_exi4_0_stall_in_1_NO_SHIFT_REG = (local_bb5_c6_eni4_stall_local | ~(local_bb5_c6_eni4_inputs_ready));
assign rnode_5to5_bb5_c5_exit_c5_exi4_0_stall_in_2_NO_SHIFT_REG = (local_bb5_c6_eni4_stall_local | ~(local_bb5_c6_eni4_inputs_ready));
assign rnode_5to5_bb5_c5_exit_c5_exi4_0_stall_in_3_NO_SHIFT_REG = (local_bb5_c6_eni4_stall_local | ~(local_bb5_c6_eni4_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb5_c2_eni211_stall_local;
wire [223:0] local_bb5_c2_eni211;

assign local_bb5_c2_eni211[63:0] = local_bb5_c2_eni110[63:0];
assign local_bb5_c2_eni211[95:64] = local_bb5_c1_exe2;
assign local_bb5_c2_eni211[223:96] = local_bb5_c2_eni110[223:96];

// This section implements an unregistered operation.
// 
wire local_bb5_c6_enter_c6_eni4_valid_out_0;
wire local_bb5_c6_enter_c6_eni4_stall_in_0;
wire local_bb5_c6_enter_c6_eni4_valid_out_1;
wire local_bb5_c6_enter_c6_eni4_stall_in_1;
wire local_bb5_c6_enter_c6_eni4_valid_out_2;
wire local_bb5_c6_enter_c6_eni4_stall_in_2;
wire local_bb5_c6_enter_c6_eni4_valid_out_3;
wire local_bb5_c6_enter_c6_eni4_stall_in_3;
wire local_bb5_c6_enter_c6_eni4_valid_out_4;
wire local_bb5_c6_enter_c6_eni4_stall_in_4;
wire local_bb5_c6_enter_c6_eni4_inputs_ready;
wire local_bb5_c6_enter_c6_eni4_stall_local;
wire local_bb5_c6_enter_c6_eni4_input_accepted;
wire [159:0] local_bb5_c6_enter_c6_eni4;
wire local_bb5_c6_exit_c6_exi2_enable;
wire local_bb5_c6_exit_c6_exi2_entry_stall;
wire local_bb5_c6_enter_c6_eni4_valid_bit;
wire local_bb5_c6_exit_c6_exi2_output_regs_ready;
wire local_bb5_c6_exit_c6_exi2_valid_in;
wire local_bb5_c6_exit_c6_exi2_phases;
wire local_bb5_c6_enter_c6_eni4_inc_pipelined_thread;
wire local_bb5_c6_enter_c6_eni4_dec_pipelined_thread;
wire local_bb5_c6_enter_c6_eni4_fu_stall_out;

assign local_bb5_c6_enter_c6_eni4_inputs_ready = local_bb5_c6_eni4_valid_out;
assign local_bb5_c6_enter_c6_eni4 = local_bb5_c6_eni4;
assign local_bb5_c6_enter_c6_eni4_input_accepted = (local_bb5_c6_enter_c6_eni4_inputs_ready && !(local_bb5_c6_exit_c6_exi2_entry_stall));
assign local_bb5_c6_enter_c6_eni4_valid_bit = local_bb5_c6_enter_c6_eni4_input_accepted;
assign local_bb5_c6_enter_c6_eni4_inc_pipelined_thread = 1'b1;
assign local_bb5_c6_enter_c6_eni4_dec_pipelined_thread = ~(1'b0);
assign local_bb5_c6_enter_c6_eni4_fu_stall_out = (~(local_bb5_c6_enter_c6_eni4_inputs_ready) | local_bb5_c6_exit_c6_exi2_entry_stall);
assign local_bb5_c6_enter_c6_eni4_stall_local = (local_bb5_c6_enter_c6_eni4_stall_in_0 | local_bb5_c6_enter_c6_eni4_stall_in_1 | local_bb5_c6_enter_c6_eni4_stall_in_2 | local_bb5_c6_enter_c6_eni4_stall_in_3 | local_bb5_c6_enter_c6_eni4_stall_in_4);
assign local_bb5_c6_enter_c6_eni4_valid_out_0 = local_bb5_c6_enter_c6_eni4_inputs_ready;
assign local_bb5_c6_enter_c6_eni4_valid_out_1 = local_bb5_c6_enter_c6_eni4_inputs_ready;
assign local_bb5_c6_enter_c6_eni4_valid_out_2 = local_bb5_c6_enter_c6_eni4_inputs_ready;
assign local_bb5_c6_enter_c6_eni4_valid_out_3 = local_bb5_c6_enter_c6_eni4_inputs_ready;
assign local_bb5_c6_enter_c6_eni4_valid_out_4 = local_bb5_c6_enter_c6_eni4_inputs_ready;
assign local_bb5_c6_eni4_stall_in = (|local_bb5_c6_enter_c6_eni4_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb5_c2_eni312_stall_local;
wire [223:0] local_bb5_c2_eni312;

assign local_bb5_c2_eni312[95:0] = local_bb5_c2_eni211[95:0];
assign local_bb5_c2_eni312[127:96] = local_bb5_c1_exe3;
assign local_bb5_c2_eni312[223:128] = local_bb5_c2_eni211[223:128];

// This section implements an unregistered operation.
// 
wire local_bb5_c6_ene1_valid_out;
wire local_bb5_c6_ene1_stall_in;
wire local_bb5_c6_ene1_inputs_ready;
wire local_bb5_c6_ene1_stall_local;
wire [31:0] local_bb5_c6_ene1;

assign local_bb5_c6_ene1_inputs_ready = local_bb5_c6_enter_c6_eni4_valid_out_0;
assign local_bb5_c6_ene1[31:0] = local_bb5_c6_enter_c6_eni4[63:32];
assign local_bb5_c6_ene1_valid_out = 1'b1;
assign local_bb5_c6_enter_c6_eni4_stall_in_0 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c6_ene2_stall_local;
wire [31:0] local_bb5_c6_ene2;

assign local_bb5_c6_ene2[31:0] = local_bb5_c6_enter_c6_eni4[95:64];

// This section implements an unregistered operation.
// 
wire local_bb5_c6_ene3_stall_local;
wire [31:0] local_bb5_c6_ene3;

assign local_bb5_c6_ene3[31:0] = local_bb5_c6_enter_c6_eni4[127:96];

// This section implements an unregistered operation.
// 
wire local_bb5_c6_ene4_valid_out;
wire local_bb5_c6_ene4_stall_in;
wire local_bb5_c6_ene4_inputs_ready;
wire local_bb5_c6_ene4_stall_local;
wire [31:0] local_bb5_c6_ene4;

assign local_bb5_c6_ene4_inputs_ready = local_bb5_c6_enter_c6_eni4_valid_out_3;
assign local_bb5_c6_ene4[31:0] = local_bb5_c6_enter_c6_eni4[159:128];
assign local_bb5_c6_ene4_valid_out = 1'b1;
assign local_bb5_c6_enter_c6_eni4_stall_in_3 = 1'b0;

// This section implements an unregistered operation.
// 
wire SFC_7_VALID_5_5_0_valid_out;
wire SFC_7_VALID_5_5_0_stall_in;
wire SFC_7_VALID_5_5_0_inputs_ready;
wire SFC_7_VALID_5_5_0_stall_local;
wire SFC_7_VALID_5_5_0;

assign SFC_7_VALID_5_5_0_inputs_ready = local_bb5_c6_enter_c6_eni4_valid_out_4;
assign SFC_7_VALID_5_5_0 = local_bb5_c6_enter_c6_eni4_valid_bit;
assign SFC_7_VALID_5_5_0_valid_out = 1'b1;
assign local_bb5_c6_enter_c6_eni4_stall_in_4 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c2_eni413_stall_local;
wire [223:0] local_bb5_c2_eni413;

assign local_bb5_c2_eni413[127:0] = local_bb5_c2_eni312[127:0];
assign local_bb5_c2_eni413[159:128] = local_bb5_c1_exe4;
assign local_bb5_c2_eni413[223:160] = local_bb5_c2_eni312[223:160];

// This section implements an unregistered operation.
// 
wire local_bb5_tmp16_valid_out;
wire local_bb5_tmp16_stall_in;
wire local_bb5_tmp16_inputs_ready;
wire local_bb5_tmp16_stall_local;
wire [31:0] local_bb5_tmp16;

assign local_bb5_tmp16_inputs_ready = (local_bb5_c6_enter_c6_eni4_valid_out_1 & local_bb5_c6_enter_c6_eni4_valid_out_2);
assign local_bb5_tmp16 = (local_bb5_c6_ene2 + local_bb5_c6_ene3);
assign local_bb5_tmp16_valid_out = 1'b1;
assign local_bb5_c6_enter_c6_eni4_stall_in_1 = 1'b0;
assign local_bb5_c6_enter_c6_eni4_stall_in_2 = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_5to6_bb5_c6_ene4_0_valid_out_NO_SHIFT_REG;
 logic rnode_5to6_bb5_c6_ene4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_5to6_bb5_c6_ene4_0_NO_SHIFT_REG;
 logic rnode_5to6_bb5_c6_ene4_0_reg_6_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_5to6_bb5_c6_ene4_0_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb5_c6_ene4_0_valid_out_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb5_c6_ene4_0_stall_in_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb5_c6_ene4_0_stall_out_reg_6_NO_SHIFT_REG;

acl_data_fifo rnode_5to6_bb5_c6_ene4_0_reg_6_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_5to6_bb5_c6_ene4_0_reg_6_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_5to6_bb5_c6_ene4_0_stall_in_reg_6_NO_SHIFT_REG),
	.valid_out(rnode_5to6_bb5_c6_ene4_0_valid_out_reg_6_NO_SHIFT_REG),
	.stall_out(rnode_5to6_bb5_c6_ene4_0_stall_out_reg_6_NO_SHIFT_REG),
	.data_in(local_bb5_c6_ene4),
	.data_out(rnode_5to6_bb5_c6_ene4_0_reg_6_NO_SHIFT_REG)
);

defparam rnode_5to6_bb5_c6_ene4_0_reg_6_fifo.DEPTH = 1;
defparam rnode_5to6_bb5_c6_ene4_0_reg_6_fifo.DATA_WIDTH = 32;
defparam rnode_5to6_bb5_c6_ene4_0_reg_6_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_5to6_bb5_c6_ene4_0_reg_6_fifo.IMPL = "shift_reg";

assign rnode_5to6_bb5_c6_ene4_0_reg_6_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_c6_ene4_stall_in = 1'b0;
assign rnode_5to6_bb5_c6_ene4_0_NO_SHIFT_REG = rnode_5to6_bb5_c6_ene4_0_reg_6_NO_SHIFT_REG;
assign rnode_5to6_bb5_c6_ene4_0_stall_in_reg_6_NO_SHIFT_REG = ~(local_bb5_c6_exit_c6_exi2_enable);
assign rnode_5to6_bb5_c6_ene4_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_7_VALID_5_6_0_inputs_ready;
 reg SFC_7_VALID_5_6_0_valid_out_NO_SHIFT_REG;
wire SFC_7_VALID_5_6_0_stall_in;
wire SFC_7_VALID_5_6_0_output_regs_ready;
 reg SFC_7_VALID_5_6_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_7_VALID_5_6_0_causedstall;

assign SFC_7_VALID_5_6_0_inputs_ready = 1'b1;
assign SFC_7_VALID_5_6_0_output_regs_ready = local_bb5_c6_exit_c6_exi2_enable;
assign SFC_7_VALID_5_5_0_stall_in = 1'b0;
assign SFC_7_VALID_5_6_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c6_exit_c6_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_7_VALID_5_6_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_7_VALID_5_6_0_output_regs_ready)
		begin
			SFC_7_VALID_5_6_0_NO_SHIFT_REG <= SFC_7_VALID_5_5_0;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_c2_eni514_stall_local;
wire [223:0] local_bb5_c2_eni514;

assign local_bb5_c2_eni514[159:0] = local_bb5_c2_eni413[159:0];
assign local_bb5_c2_eni514[191:160] = local_bb5_c1_exe5;
assign local_bb5_c2_eni514[223:192] = local_bb5_c2_eni413[223:192];

// This section implements a registered operation.
// 
wire local_bb5_tmp19_inputs_ready;
 reg local_bb5_tmp19_valid_out_NO_SHIFT_REG;
wire local_bb5_tmp19_stall_in;
wire local_bb5_tmp19_output_regs_ready;
wire [31:0] local_bb5_tmp19;
 reg local_bb5_tmp19_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb5_tmp19_valid_pipe_1_NO_SHIFT_REG;
wire local_bb5_tmp19_causedstall;

acl_int_mult int_module_local_bb5_tmp19 (
	.clock(clock),
	.dataa(local_bb5_tmp16),
	.datab(local_bb5_c6_ene1),
	.enable(local_bb5_tmp19_output_regs_ready),
	.result(local_bb5_tmp19)
);

defparam int_module_local_bb5_tmp19.INPUT1_WIDTH = 32;
defparam int_module_local_bb5_tmp19.INPUT2_WIDTH = 32;
defparam int_module_local_bb5_tmp19.OUTPUT_WIDTH = 32;
defparam int_module_local_bb5_tmp19.LATENCY = 3;
defparam int_module_local_bb5_tmp19.SIGNED = 0;

assign local_bb5_tmp19_inputs_ready = 1'b1;
assign local_bb5_tmp19_output_regs_ready = local_bb5_c6_exit_c6_exi2_enable;
assign local_bb5_tmp16_stall_in = 1'b0;
assign local_bb5_c6_ene1_stall_in = 1'b0;
assign local_bb5_tmp19_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c6_exit_c6_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_tmp19_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb5_tmp19_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_tmp19_output_regs_ready)
		begin
			local_bb5_tmp19_valid_pipe_0_NO_SHIFT_REG <= 1'b1;
			local_bb5_tmp19_valid_pipe_1_NO_SHIFT_REG <= local_bb5_tmp19_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_tmp19_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_tmp19_output_regs_ready)
		begin
			local_bb5_tmp19_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb5_tmp19_stall_in))
			begin
				local_bb5_tmp19_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_6to7_bb5_c6_ene4_0_valid_out_NO_SHIFT_REG;
 logic rnode_6to7_bb5_c6_ene4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_6to7_bb5_c6_ene4_0_NO_SHIFT_REG;
 logic rnode_6to7_bb5_c6_ene4_0_reg_7_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_6to7_bb5_c6_ene4_0_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb5_c6_ene4_0_valid_out_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb5_c6_ene4_0_stall_in_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb5_c6_ene4_0_stall_out_reg_7_NO_SHIFT_REG;

acl_data_fifo rnode_6to7_bb5_c6_ene4_0_reg_7_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_6to7_bb5_c6_ene4_0_reg_7_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_6to7_bb5_c6_ene4_0_stall_in_reg_7_NO_SHIFT_REG),
	.valid_out(rnode_6to7_bb5_c6_ene4_0_valid_out_reg_7_NO_SHIFT_REG),
	.stall_out(rnode_6to7_bb5_c6_ene4_0_stall_out_reg_7_NO_SHIFT_REG),
	.data_in(rnode_5to6_bb5_c6_ene4_0_NO_SHIFT_REG),
	.data_out(rnode_6to7_bb5_c6_ene4_0_reg_7_NO_SHIFT_REG)
);

defparam rnode_6to7_bb5_c6_ene4_0_reg_7_fifo.DEPTH = 1;
defparam rnode_6to7_bb5_c6_ene4_0_reg_7_fifo.DATA_WIDTH = 32;
defparam rnode_6to7_bb5_c6_ene4_0_reg_7_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_6to7_bb5_c6_ene4_0_reg_7_fifo.IMPL = "shift_reg";

assign rnode_6to7_bb5_c6_ene4_0_reg_7_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_5to6_bb5_c6_ene4_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_6to7_bb5_c6_ene4_0_NO_SHIFT_REG = rnode_6to7_bb5_c6_ene4_0_reg_7_NO_SHIFT_REG;
assign rnode_6to7_bb5_c6_ene4_0_stall_in_reg_7_NO_SHIFT_REG = ~(local_bb5_c6_exit_c6_exi2_enable);
assign rnode_6to7_bb5_c6_ene4_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_7_VALID_6_7_0_inputs_ready;
 reg SFC_7_VALID_6_7_0_valid_out_NO_SHIFT_REG;
wire SFC_7_VALID_6_7_0_stall_in;
wire SFC_7_VALID_6_7_0_output_regs_ready;
 reg SFC_7_VALID_6_7_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_7_VALID_6_7_0_causedstall;

assign SFC_7_VALID_6_7_0_inputs_ready = 1'b1;
assign SFC_7_VALID_6_7_0_output_regs_ready = local_bb5_c6_exit_c6_exi2_enable;
assign SFC_7_VALID_5_6_0_stall_in = 1'b0;
assign SFC_7_VALID_6_7_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c6_exit_c6_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_7_VALID_6_7_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_7_VALID_6_7_0_output_regs_ready)
		begin
			SFC_7_VALID_6_7_0_NO_SHIFT_REG <= SFC_7_VALID_5_6_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_c2_eni615_valid_out;
wire local_bb5_c2_eni615_stall_in;
wire local_bb5_c2_eni615_inputs_ready;
wire local_bb5_c2_eni615_stall_local;
wire [223:0] local_bb5_c2_eni615;

assign local_bb5_c2_eni615_inputs_ready = (rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_0_NO_SHIFT_REG & rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_1_NO_SHIFT_REG & rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_2_NO_SHIFT_REG & rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_3_NO_SHIFT_REG & rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_4_NO_SHIFT_REG & rnode_4to4_bb5_c1_exit24_c1_exi6_0_valid_out_5_NO_SHIFT_REG);
assign local_bb5_c2_eni615[191:0] = local_bb5_c2_eni514[191:0];
assign local_bb5_c2_eni615[223:192] = local_bb5_c1_exe6;
assign local_bb5_c2_eni615_valid_out = local_bb5_c2_eni615_inputs_ready;
assign local_bb5_c2_eni615_stall_local = local_bb5_c2_eni615_stall_in;
assign rnode_4to4_bb5_c1_exit24_c1_exi6_0_stall_in_0_NO_SHIFT_REG = (local_bb5_c2_eni615_stall_local | ~(local_bb5_c2_eni615_inputs_ready));
assign rnode_4to4_bb5_c1_exit24_c1_exi6_0_stall_in_1_NO_SHIFT_REG = (local_bb5_c2_eni615_stall_local | ~(local_bb5_c2_eni615_inputs_ready));
assign rnode_4to4_bb5_c1_exit24_c1_exi6_0_stall_in_2_NO_SHIFT_REG = (local_bb5_c2_eni615_stall_local | ~(local_bb5_c2_eni615_inputs_ready));
assign rnode_4to4_bb5_c1_exit24_c1_exi6_0_stall_in_3_NO_SHIFT_REG = (local_bb5_c2_eni615_stall_local | ~(local_bb5_c2_eni615_inputs_ready));
assign rnode_4to4_bb5_c1_exit24_c1_exi6_0_stall_in_4_NO_SHIFT_REG = (local_bb5_c2_eni615_stall_local | ~(local_bb5_c2_eni615_inputs_ready));
assign rnode_4to4_bb5_c1_exit24_c1_exi6_0_stall_in_5_NO_SHIFT_REG = (local_bb5_c2_eni615_stall_local | ~(local_bb5_c2_eni615_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb5_c6_exi1_stall_local;
wire [95:0] local_bb5_c6_exi1;

assign local_bb5_c6_exi1[31:0] = 32'bx;
assign local_bb5_c6_exi1[63:32] = local_bb5_tmp19;
assign local_bb5_c6_exi1[95:64] = 32'bx;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_7to8_bb5_c6_ene4_0_valid_out_NO_SHIFT_REG;
 logic rnode_7to8_bb5_c6_ene4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_7to8_bb5_c6_ene4_0_NO_SHIFT_REG;
 logic rnode_7to8_bb5_c6_ene4_0_reg_8_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_7to8_bb5_c6_ene4_0_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb5_c6_ene4_0_valid_out_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb5_c6_ene4_0_stall_in_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb5_c6_ene4_0_stall_out_reg_8_NO_SHIFT_REG;

acl_data_fifo rnode_7to8_bb5_c6_ene4_0_reg_8_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_7to8_bb5_c6_ene4_0_reg_8_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_7to8_bb5_c6_ene4_0_stall_in_reg_8_NO_SHIFT_REG),
	.valid_out(rnode_7to8_bb5_c6_ene4_0_valid_out_reg_8_NO_SHIFT_REG),
	.stall_out(rnode_7to8_bb5_c6_ene4_0_stall_out_reg_8_NO_SHIFT_REG),
	.data_in(rnode_6to7_bb5_c6_ene4_0_NO_SHIFT_REG),
	.data_out(rnode_7to8_bb5_c6_ene4_0_reg_8_NO_SHIFT_REG)
);

defparam rnode_7to8_bb5_c6_ene4_0_reg_8_fifo.DEPTH = 1;
defparam rnode_7to8_bb5_c6_ene4_0_reg_8_fifo.DATA_WIDTH = 32;
defparam rnode_7to8_bb5_c6_ene4_0_reg_8_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_7to8_bb5_c6_ene4_0_reg_8_fifo.IMPL = "shift_reg";

assign rnode_7to8_bb5_c6_ene4_0_reg_8_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_6to7_bb5_c6_ene4_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_7to8_bb5_c6_ene4_0_NO_SHIFT_REG = rnode_7to8_bb5_c6_ene4_0_reg_8_NO_SHIFT_REG;
assign rnode_7to8_bb5_c6_ene4_0_stall_in_reg_8_NO_SHIFT_REG = ~(local_bb5_c6_exit_c6_exi2_enable);
assign rnode_7to8_bb5_c6_ene4_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_7_VALID_7_8_0_inputs_ready;
 reg SFC_7_VALID_7_8_0_valid_out_NO_SHIFT_REG;
wire SFC_7_VALID_7_8_0_stall_in;
wire SFC_7_VALID_7_8_0_output_regs_ready;
 reg SFC_7_VALID_7_8_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_7_VALID_7_8_0_causedstall;

assign SFC_7_VALID_7_8_0_inputs_ready = 1'b1;
assign SFC_7_VALID_7_8_0_output_regs_ready = local_bb5_c6_exit_c6_exi2_enable;
assign SFC_7_VALID_6_7_0_stall_in = 1'b0;
assign SFC_7_VALID_7_8_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c6_exit_c6_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_7_VALID_7_8_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_7_VALID_7_8_0_output_regs_ready)
		begin
			SFC_7_VALID_7_8_0_NO_SHIFT_REG <= SFC_7_VALID_6_7_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_c2_enter16_c2_eni615_valid_out_0;
wire local_bb5_c2_enter16_c2_eni615_stall_in_0;
wire local_bb5_c2_enter16_c2_eni615_valid_out_1;
wire local_bb5_c2_enter16_c2_eni615_stall_in_1;
wire local_bb5_c2_enter16_c2_eni615_valid_out_2;
wire local_bb5_c2_enter16_c2_eni615_stall_in_2;
wire local_bb5_c2_enter16_c2_eni615_valid_out_3;
wire local_bb5_c2_enter16_c2_eni615_stall_in_3;
wire local_bb5_c2_enter16_c2_eni615_valid_out_4;
wire local_bb5_c2_enter16_c2_eni615_stall_in_4;
wire local_bb5_c2_enter16_c2_eni615_valid_out_5;
wire local_bb5_c2_enter16_c2_eni615_stall_in_5;
wire local_bb5_c2_enter16_c2_eni615_valid_out_6;
wire local_bb5_c2_enter16_c2_eni615_stall_in_6;
wire local_bb5_c2_enter16_c2_eni615_inputs_ready;
wire local_bb5_c2_enter16_c2_eni615_stall_local;
wire local_bb5_c2_enter16_c2_eni615_input_accepted;
wire [223:0] local_bb5_c2_enter16_c2_eni615;
wire local_bb5_c2_exit5_c2_exi44_enable;
wire local_bb5_c2_exit5_c2_exi44_entry_stall;
wire local_bb5_c2_enter16_c2_eni615_valid_bit;
wire local_bb5_c2_exit5_c2_exi44_output_regs_ready;
wire local_bb5_c2_exit5_c2_exi44_valid_in;
wire local_bb5_c2_exit5_c2_exi44_phases;
wire local_bb5_c2_enter16_c2_eni615_inc_pipelined_thread;
wire local_bb5_c2_enter16_c2_eni615_dec_pipelined_thread;
wire local_bb5_c2_enter16_c2_eni615_fu_stall_out;

assign local_bb5_c2_enter16_c2_eni615_inputs_ready = local_bb5_c2_eni615_valid_out;
assign local_bb5_c2_enter16_c2_eni615 = local_bb5_c2_eni615;
assign local_bb5_c2_enter16_c2_eni615_input_accepted = (local_bb5_c2_enter16_c2_eni615_inputs_ready && !(local_bb5_c2_exit5_c2_exi44_entry_stall));
assign local_bb5_c2_enter16_c2_eni615_valid_bit = local_bb5_c2_enter16_c2_eni615_input_accepted;
assign local_bb5_c2_enter16_c2_eni615_inc_pipelined_thread = 1'b1;
assign local_bb5_c2_enter16_c2_eni615_dec_pipelined_thread = ~(1'b0);
assign local_bb5_c2_enter16_c2_eni615_fu_stall_out = (~(local_bb5_c2_enter16_c2_eni615_inputs_ready) | local_bb5_c2_exit5_c2_exi44_entry_stall);
assign local_bb5_c2_enter16_c2_eni615_stall_local = (local_bb5_c2_enter16_c2_eni615_stall_in_0 | local_bb5_c2_enter16_c2_eni615_stall_in_1 | local_bb5_c2_enter16_c2_eni615_stall_in_2 | local_bb5_c2_enter16_c2_eni615_stall_in_3 | local_bb5_c2_enter16_c2_eni615_stall_in_4 | local_bb5_c2_enter16_c2_eni615_stall_in_5 | local_bb5_c2_enter16_c2_eni615_stall_in_6);
assign local_bb5_c2_enter16_c2_eni615_valid_out_0 = local_bb5_c2_enter16_c2_eni615_inputs_ready;
assign local_bb5_c2_enter16_c2_eni615_valid_out_1 = local_bb5_c2_enter16_c2_eni615_inputs_ready;
assign local_bb5_c2_enter16_c2_eni615_valid_out_2 = local_bb5_c2_enter16_c2_eni615_inputs_ready;
assign local_bb5_c2_enter16_c2_eni615_valid_out_3 = local_bb5_c2_enter16_c2_eni615_inputs_ready;
assign local_bb5_c2_enter16_c2_eni615_valid_out_4 = local_bb5_c2_enter16_c2_eni615_inputs_ready;
assign local_bb5_c2_enter16_c2_eni615_valid_out_5 = local_bb5_c2_enter16_c2_eni615_inputs_ready;
assign local_bb5_c2_enter16_c2_eni615_valid_out_6 = local_bb5_c2_enter16_c2_eni615_inputs_ready;
assign local_bb5_c2_eni615_stall_in = (|local_bb5_c2_enter16_c2_eni615_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb5_c6_exi2_valid_out;
wire local_bb5_c6_exi2_stall_in;
wire local_bb5_c6_exi2_inputs_ready;
wire local_bb5_c6_exi2_stall_local;
wire [95:0] local_bb5_c6_exi2;

assign local_bb5_c6_exi2_inputs_ready = (local_bb5_tmp19_valid_out_NO_SHIFT_REG & rnode_7to8_bb5_c6_ene4_0_valid_out_NO_SHIFT_REG);
assign local_bb5_c6_exi2[63:0] = local_bb5_c6_exi1[63:0];
assign local_bb5_c6_exi2[95:64] = rnode_7to8_bb5_c6_ene4_0_NO_SHIFT_REG;
assign local_bb5_c6_exi2_valid_out = 1'b1;
assign local_bb5_tmp19_stall_in = 1'b0;
assign rnode_7to8_bb5_c6_ene4_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c2_ene117_stall_local;
wire [31:0] local_bb5_c2_ene117;

assign local_bb5_c2_ene117[31:0] = local_bb5_c2_enter16_c2_eni615[63:32];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_ene218_stall_local;
wire [31:0] local_bb5_c2_ene218;

assign local_bb5_c2_ene218[31:0] = local_bb5_c2_enter16_c2_eni615[95:64];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_ene319_stall_local;
wire [31:0] local_bb5_c2_ene319;

assign local_bb5_c2_ene319[31:0] = local_bb5_c2_enter16_c2_eni615[127:96];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_ene420_stall_local;
wire [31:0] local_bb5_c2_ene420;

assign local_bb5_c2_ene420[31:0] = local_bb5_c2_enter16_c2_eni615[159:128];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_ene521_valid_out;
wire local_bb5_c2_ene521_stall_in;
wire local_bb5_c2_ene521_inputs_ready;
wire local_bb5_c2_ene521_stall_local;
wire [31:0] local_bb5_c2_ene521;

assign local_bb5_c2_ene521_inputs_ready = local_bb5_c2_enter16_c2_eni615_valid_out_4;
assign local_bb5_c2_ene521[31:0] = local_bb5_c2_enter16_c2_eni615[191:160];
assign local_bb5_c2_ene521_valid_out = 1'b1;
assign local_bb5_c2_enter16_c2_eni615_stall_in_4 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c2_ene622_valid_out;
wire local_bb5_c2_ene622_stall_in;
wire local_bb5_c2_ene622_inputs_ready;
wire local_bb5_c2_ene622_stall_local;
wire [31:0] local_bb5_c2_ene622;

assign local_bb5_c2_ene622_inputs_ready = local_bb5_c2_enter16_c2_eni615_valid_out_5;
assign local_bb5_c2_ene622[31:0] = local_bb5_c2_enter16_c2_eni615[223:192];
assign local_bb5_c2_ene622_valid_out = 1'b1;
assign local_bb5_c2_enter16_c2_eni615_stall_in_5 = 1'b0;

// This section implements an unregistered operation.
// 
wire SFC_3_VALID_4_4_0_valid_out;
wire SFC_3_VALID_4_4_0_stall_in;
wire SFC_3_VALID_4_4_0_inputs_ready;
wire SFC_3_VALID_4_4_0_stall_local;
wire SFC_3_VALID_4_4_0;

assign SFC_3_VALID_4_4_0_inputs_ready = local_bb5_c2_enter16_c2_eni615_valid_out_6;
assign SFC_3_VALID_4_4_0 = local_bb5_c2_enter16_c2_eni615_valid_bit;
assign SFC_3_VALID_4_4_0_valid_out = 1'b1;
assign local_bb5_c2_enter16_c2_eni615_stall_in_6 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c6_exit_c6_exi2_valid_out;
wire local_bb5_c6_exit_c6_exi2_stall_in;
wire local_bb5_c6_exit_c6_exi2_inputs_ready;
wire local_bb5_c6_exit_c6_exi2_stall_local;
wire [95:0] local_bb5_c6_exit_c6_exi2;
wire local_bb5_c6_exit_c6_exi2_valid;
wire local_bb5_c6_exit_c6_exi2_fu_stall_out;

acl_enable_sink local_bb5_c6_exit_c6_exi2_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb5_c6_exi2),
	.data_out(local_bb5_c6_exit_c6_exi2),
	.input_accepted(local_bb5_c6_enter_c6_eni4_input_accepted),
	.valid_out(local_bb5_c6_exit_c6_exi2_valid),
	.stall_in(local_bb5_c6_exit_c6_exi2_stall_local),
	.enable(local_bb5_c6_exit_c6_exi2_enable),
	.valid_in(local_bb5_c6_exit_c6_exi2_valid_in),
	.stall_entry(local_bb5_c6_exit_c6_exi2_entry_stall),
	.inc_pipelined_thread(local_bb5_c6_enter_c6_eni4_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb5_c6_enter_c6_eni4_dec_pipelined_thread)
);

defparam local_bb5_c6_exit_c6_exi2_instance.DATA_WIDTH = 96;
defparam local_bb5_c6_exit_c6_exi2_instance.PIPELINE_DEPTH = 3;
defparam local_bb5_c6_exit_c6_exi2_instance.SCHEDULEII = 1;
defparam local_bb5_c6_exit_c6_exi2_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb5_c6_exit_c6_exi2_inputs_ready = (local_bb5_c6_exi2_valid_out & SFC_7_VALID_7_8_0_valid_out_NO_SHIFT_REG);
assign local_bb5_c6_exit_c6_exi2_valid_in = SFC_7_VALID_7_8_0_NO_SHIFT_REG;
assign local_bb5_c6_exit_c6_exi2_fu_stall_out = ~(local_bb5_c6_exit_c6_exi2_enable);
assign local_bb5_c6_exit_c6_exi2_valid_out = local_bb5_c6_exit_c6_exi2_valid;
assign local_bb5_c6_exit_c6_exi2_stall_local = local_bb5_c6_exit_c6_exi2_stall_in;
assign local_bb5_c6_exi2_stall_in = 1'b0;
assign SFC_7_VALID_7_8_0_stall_in = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_add31_valid_out;
wire local_bb5_add31_stall_in;
wire local_bb5_add31_inputs_ready;
wire local_bb5_add31_stall_local;
wire [31:0] local_bb5_add31;

assign local_bb5_add31_inputs_ready = (local_bb5_c2_enter16_c2_eni615_valid_out_0 & local_bb5_c2_enter16_c2_eni615_valid_out_1);
assign local_bb5_add31 = (local_bb5_c2_ene117 + local_bb5_c2_ene218);
assign local_bb5_add31_valid_out = 1'b1;
assign local_bb5_c2_enter16_c2_eni615_stall_in_0 = 1'b0;
assign local_bb5_c2_enter16_c2_eni615_stall_in_1 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_add39_valid_out;
wire local_bb5_add39_stall_in;
wire local_bb5_add39_inputs_ready;
wire local_bb5_add39_stall_local;
wire [31:0] local_bb5_add39;

assign local_bb5_add39_inputs_ready = (local_bb5_c2_enter16_c2_eni615_valid_out_2 & local_bb5_c2_enter16_c2_eni615_valid_out_3);
assign local_bb5_add39 = (local_bb5_c2_ene319 + local_bb5_c2_ene420);
assign local_bb5_add39_valid_out = 1'b1;
assign local_bb5_c2_enter16_c2_eni615_stall_in_2 = 1'b0;
assign local_bb5_c2_enter16_c2_eni615_stall_in_3 = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb5_c2_ene521_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb5_c2_ene521_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb5_c2_ene521_0_NO_SHIFT_REG;
 logic rnode_4to5_bb5_c2_ene521_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb5_c2_ene521_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_c2_ene521_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_c2_ene521_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_c2_ene521_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb5_c2_ene521_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb5_c2_ene521_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb5_c2_ene521_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb5_c2_ene521_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb5_c2_ene521_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb5_c2_ene521),
	.data_out(rnode_4to5_bb5_c2_ene521_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb5_c2_ene521_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb5_c2_ene521_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_4to5_bb5_c2_ene521_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb5_c2_ene521_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb5_c2_ene521_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_c2_ene521_stall_in = 1'b0;
assign rnode_4to5_bb5_c2_ene521_0_NO_SHIFT_REG = rnode_4to5_bb5_c2_ene521_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb5_c2_ene521_0_stall_in_reg_5_NO_SHIFT_REG = ~(local_bb5_c2_exit5_c2_exi44_enable);
assign rnode_4to5_bb5_c2_ene521_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb5_c2_ene622_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb5_c2_ene622_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb5_c2_ene622_0_NO_SHIFT_REG;
 logic rnode_4to5_bb5_c2_ene622_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb5_c2_ene622_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_c2_ene622_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_c2_ene622_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_c2_ene622_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb5_c2_ene622_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb5_c2_ene622_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb5_c2_ene622_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb5_c2_ene622_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb5_c2_ene622_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb5_c2_ene622),
	.data_out(rnode_4to5_bb5_c2_ene622_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb5_c2_ene622_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb5_c2_ene622_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_4to5_bb5_c2_ene622_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb5_c2_ene622_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb5_c2_ene622_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_c2_ene622_stall_in = 1'b0;
assign rnode_4to5_bb5_c2_ene622_0_NO_SHIFT_REG = rnode_4to5_bb5_c2_ene622_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb5_c2_ene622_0_stall_in_reg_5_NO_SHIFT_REG = ~(local_bb5_c2_exit5_c2_exi44_enable);
assign rnode_4to5_bb5_c2_ene622_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_3_VALID_4_5_0_inputs_ready;
 reg SFC_3_VALID_4_5_0_valid_out_NO_SHIFT_REG;
wire SFC_3_VALID_4_5_0_stall_in;
wire SFC_3_VALID_4_5_0_output_regs_ready;
 reg SFC_3_VALID_4_5_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_3_VALID_4_5_0_causedstall;

assign SFC_3_VALID_4_5_0_inputs_ready = 1'b1;
assign SFC_3_VALID_4_5_0_output_regs_ready = local_bb5_c2_exit5_c2_exi44_enable;
assign SFC_3_VALID_4_4_0_stall_in = 1'b0;
assign SFC_3_VALID_4_5_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c2_exit5_c2_exi44_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_3_VALID_4_5_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_3_VALID_4_5_0_output_regs_ready)
		begin
			SFC_3_VALID_4_5_0_NO_SHIFT_REG <= SFC_3_VALID_4_4_0;
		end
	end
end


// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_8to8_bb5_c6_exit_c6_exi2_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_8to8_bb5_c6_exit_c6_exi2_0_stall_in_0_NO_SHIFT_REG;
 logic [95:0] rnode_8to8_bb5_c6_exit_c6_exi2_0_NO_SHIFT_REG;
 logic rnode_8to8_bb5_c6_exit_c6_exi2_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_8to8_bb5_c6_exit_c6_exi2_0_stall_in_1_NO_SHIFT_REG;
 logic [95:0] rnode_8to8_bb5_c6_exit_c6_exi2_1_NO_SHIFT_REG;
 logic rnode_8to8_bb5_c6_exit_c6_exi2_0_reg_8_inputs_ready_NO_SHIFT_REG;
 logic [95:0] rnode_8to8_bb5_c6_exit_c6_exi2_0_reg_8_NO_SHIFT_REG;
 logic rnode_8to8_bb5_c6_exit_c6_exi2_0_valid_out_0_reg_8_NO_SHIFT_REG;
 logic rnode_8to8_bb5_c6_exit_c6_exi2_0_stall_in_0_reg_8_NO_SHIFT_REG;
 logic rnode_8to8_bb5_c6_exit_c6_exi2_0_stall_out_reg_8_NO_SHIFT_REG;

acl_data_fifo rnode_8to8_bb5_c6_exit_c6_exi2_0_reg_8_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_8to8_bb5_c6_exit_c6_exi2_0_reg_8_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_8to8_bb5_c6_exit_c6_exi2_0_stall_in_0_reg_8_NO_SHIFT_REG),
	.valid_out(rnode_8to8_bb5_c6_exit_c6_exi2_0_valid_out_0_reg_8_NO_SHIFT_REG),
	.stall_out(rnode_8to8_bb5_c6_exit_c6_exi2_0_stall_out_reg_8_NO_SHIFT_REG),
	.data_in(local_bb5_c6_exit_c6_exi2),
	.data_out(rnode_8to8_bb5_c6_exit_c6_exi2_0_reg_8_NO_SHIFT_REG)
);

defparam rnode_8to8_bb5_c6_exit_c6_exi2_0_reg_8_fifo.DEPTH = 3;
defparam rnode_8to8_bb5_c6_exit_c6_exi2_0_reg_8_fifo.DATA_WIDTH = 96;
defparam rnode_8to8_bb5_c6_exit_c6_exi2_0_reg_8_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_8to8_bb5_c6_exit_c6_exi2_0_reg_8_fifo.IMPL = "zl_reg";

assign rnode_8to8_bb5_c6_exit_c6_exi2_0_reg_8_inputs_ready_NO_SHIFT_REG = local_bb5_c6_exit_c6_exi2_valid_out;
assign local_bb5_c6_exit_c6_exi2_stall_in = rnode_8to8_bb5_c6_exit_c6_exi2_0_stall_out_reg_8_NO_SHIFT_REG;
assign rnode_8to8_bb5_c6_exit_c6_exi2_0_stall_in_0_reg_8_NO_SHIFT_REG = (rnode_8to8_bb5_c6_exit_c6_exi2_0_stall_in_0_NO_SHIFT_REG | rnode_8to8_bb5_c6_exit_c6_exi2_0_stall_in_1_NO_SHIFT_REG);
assign rnode_8to8_bb5_c6_exit_c6_exi2_0_valid_out_0_NO_SHIFT_REG = rnode_8to8_bb5_c6_exit_c6_exi2_0_valid_out_0_reg_8_NO_SHIFT_REG;
assign rnode_8to8_bb5_c6_exit_c6_exi2_0_valid_out_1_NO_SHIFT_REG = rnode_8to8_bb5_c6_exit_c6_exi2_0_valid_out_0_reg_8_NO_SHIFT_REG;
assign rnode_8to8_bb5_c6_exit_c6_exi2_0_NO_SHIFT_REG = rnode_8to8_bb5_c6_exit_c6_exi2_0_reg_8_NO_SHIFT_REG;
assign rnode_8to8_bb5_c6_exit_c6_exi2_1_NO_SHIFT_REG = rnode_8to8_bb5_c6_exit_c6_exi2_0_reg_8_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb5_add31_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb5_add31_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb5_add31_0_NO_SHIFT_REG;
 logic rnode_4to5_bb5_add31_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb5_add31_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_add31_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_add31_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_add31_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb5_add31_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb5_add31_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb5_add31_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb5_add31_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb5_add31_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb5_add31),
	.data_out(rnode_4to5_bb5_add31_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb5_add31_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb5_add31_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_4to5_bb5_add31_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb5_add31_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb5_add31_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_add31_stall_in = 1'b0;
assign rnode_4to5_bb5_add31_0_NO_SHIFT_REG = rnode_4to5_bb5_add31_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb5_add31_0_stall_in_reg_5_NO_SHIFT_REG = ~(local_bb5_c2_exit5_c2_exi44_enable);
assign rnode_4to5_bb5_add31_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb5_add39_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb5_add39_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb5_add39_0_NO_SHIFT_REG;
 logic rnode_4to5_bb5_add39_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb5_add39_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_add39_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_add39_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_add39_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb5_add39_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb5_add39_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb5_add39_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb5_add39_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb5_add39_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb5_add39),
	.data_out(rnode_4to5_bb5_add39_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb5_add39_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb5_add39_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_4to5_bb5_add39_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb5_add39_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb5_add39_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_add39_stall_in = 1'b0;
assign rnode_4to5_bb5_add39_0_NO_SHIFT_REG = rnode_4to5_bb5_add39_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb5_add39_0_stall_in_reg_5_NO_SHIFT_REG = ~(local_bb5_c2_exit5_c2_exi44_enable);
assign rnode_4to5_bb5_add39_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exi11_stall_local;
wire [159:0] local_bb5_c2_exi11;

assign local_bb5_c2_exi11[31:0] = 32'bx;
assign local_bb5_c2_exi11[63:32] = rnode_4to5_bb5_c2_ene521_0_NO_SHIFT_REG;
assign local_bb5_c2_exi11[159:64] = 96'bx;

// This section implements an unregistered operation.
// 
wire local_bb5_c6_exe2_stall_local;
wire [31:0] local_bb5_c6_exe2;

assign local_bb5_c6_exe2[31:0] = rnode_8to8_bb5_c6_exit_c6_exi2_0_NO_SHIFT_REG[95:64];

// This section implements an unregistered operation.
// 
wire local_bb5_c6_exe1_stall_local;
wire [31:0] local_bb5_c6_exe1;

assign local_bb5_c6_exe1[31:0] = rnode_8to8_bb5_c6_exit_c6_exi2_1_NO_SHIFT_REG[63:32];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exi22_stall_local;
wire [159:0] local_bb5_c2_exi22;

assign local_bb5_c2_exi22[63:0] = local_bb5_c2_exi11[63:0];
assign local_bb5_c2_exi22[95:64] = rnode_4to5_bb5_add31_0_NO_SHIFT_REG;
assign local_bb5_c2_exi22[159:96] = local_bb5_c2_exi11[159:96];

// This section implements an unregistered operation.
// 
wire local_bb5_c7_eni1_stall_local;
wire [95:0] local_bb5_c7_eni1;

assign local_bb5_c7_eni1[31:0] = 32'bx;
assign local_bb5_c7_eni1[63:32] = local_bb5_c6_exe1;
assign local_bb5_c7_eni1[95:64] = 32'bx;

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exi33_stall_local;
wire [159:0] local_bb5_c2_exi33;

assign local_bb5_c2_exi33[95:0] = local_bb5_c2_exi22[95:0];
assign local_bb5_c2_exi33[127:96] = rnode_4to5_bb5_c2_ene622_0_NO_SHIFT_REG;
assign local_bb5_c2_exi33[159:128] = local_bb5_c2_exi22[159:128];

// This section implements an unregistered operation.
// 
wire local_bb5_c7_eni2_valid_out;
wire local_bb5_c7_eni2_stall_in;
wire local_bb5_c7_eni2_inputs_ready;
wire local_bb5_c7_eni2_stall_local;
wire [95:0] local_bb5_c7_eni2;

assign local_bb5_c7_eni2_inputs_ready = (rnode_8to8_bb5_c6_exit_c6_exi2_0_valid_out_0_NO_SHIFT_REG & rnode_8to8_bb5_c6_exit_c6_exi2_0_valid_out_1_NO_SHIFT_REG);
assign local_bb5_c7_eni2[63:0] = local_bb5_c7_eni1[63:0];
assign local_bb5_c7_eni2[95:64] = local_bb5_c6_exe2;
assign local_bb5_c7_eni2_valid_out = local_bb5_c7_eni2_inputs_ready;
assign local_bb5_c7_eni2_stall_local = local_bb5_c7_eni2_stall_in;
assign rnode_8to8_bb5_c6_exit_c6_exi2_0_stall_in_0_NO_SHIFT_REG = (local_bb5_c7_eni2_stall_local | ~(local_bb5_c7_eni2_inputs_ready));
assign rnode_8to8_bb5_c6_exit_c6_exi2_0_stall_in_1_NO_SHIFT_REG = (local_bb5_c7_eni2_stall_local | ~(local_bb5_c7_eni2_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exi44_valid_out;
wire local_bb5_c2_exi44_stall_in;
wire local_bb5_c2_exi44_inputs_ready;
wire local_bb5_c2_exi44_stall_local;
wire [159:0] local_bb5_c2_exi44;

assign local_bb5_c2_exi44_inputs_ready = (rnode_4to5_bb5_c2_ene521_0_valid_out_NO_SHIFT_REG & rnode_4to5_bb5_add31_0_valid_out_NO_SHIFT_REG & rnode_4to5_bb5_c2_ene622_0_valid_out_NO_SHIFT_REG & rnode_4to5_bb5_add39_0_valid_out_NO_SHIFT_REG);
assign local_bb5_c2_exi44[127:0] = local_bb5_c2_exi33[127:0];
assign local_bb5_c2_exi44[159:128] = rnode_4to5_bb5_add39_0_NO_SHIFT_REG;
assign local_bb5_c2_exi44_valid_out = 1'b1;
assign rnode_4to5_bb5_c2_ene521_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb5_add31_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb5_c2_ene622_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb5_add39_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c7_enter_c7_eni2_valid_out_0;
wire local_bb5_c7_enter_c7_eni2_stall_in_0;
wire local_bb5_c7_enter_c7_eni2_valid_out_1;
wire local_bb5_c7_enter_c7_eni2_stall_in_1;
wire local_bb5_c7_enter_c7_eni2_valid_out_2;
wire local_bb5_c7_enter_c7_eni2_stall_in_2;
wire local_bb5_c7_enter_c7_eni2_inputs_ready;
wire local_bb5_c7_enter_c7_eni2_stall_local;
wire local_bb5_c7_enter_c7_eni2_input_accepted;
wire [95:0] local_bb5_c7_enter_c7_eni2;
wire local_bb5_c7_exit_c7_exi1_enable;
wire local_bb5_c7_exit_c7_exi1_entry_stall;
wire local_bb5_c7_enter_c7_eni2_valid_bit;
wire local_bb5_c7_exit_c7_exi1_output_regs_ready;
wire local_bb5_c7_exit_c7_exi1_valid_in;
wire local_bb5_c7_exit_c7_exi1_phases;
wire local_bb5_c7_enter_c7_eni2_inc_pipelined_thread;
wire local_bb5_c7_enter_c7_eni2_dec_pipelined_thread;
wire local_bb5_c7_enter_c7_eni2_fu_stall_out;

assign local_bb5_c7_enter_c7_eni2_inputs_ready = local_bb5_c7_eni2_valid_out;
assign local_bb5_c7_enter_c7_eni2 = local_bb5_c7_eni2;
assign local_bb5_c7_enter_c7_eni2_input_accepted = (local_bb5_c7_enter_c7_eni2_inputs_ready && !(local_bb5_c7_exit_c7_exi1_entry_stall));
assign local_bb5_c7_enter_c7_eni2_valid_bit = local_bb5_c7_enter_c7_eni2_input_accepted;
assign local_bb5_c7_enter_c7_eni2_inc_pipelined_thread = 1'b1;
assign local_bb5_c7_enter_c7_eni2_dec_pipelined_thread = ~(1'b0);
assign local_bb5_c7_enter_c7_eni2_fu_stall_out = (~(local_bb5_c7_enter_c7_eni2_inputs_ready) | local_bb5_c7_exit_c7_exi1_entry_stall);
assign local_bb5_c7_enter_c7_eni2_stall_local = (local_bb5_c7_enter_c7_eni2_stall_in_0 | local_bb5_c7_enter_c7_eni2_stall_in_1 | local_bb5_c7_enter_c7_eni2_stall_in_2);
assign local_bb5_c7_enter_c7_eni2_valid_out_0 = local_bb5_c7_enter_c7_eni2_inputs_ready;
assign local_bb5_c7_enter_c7_eni2_valid_out_1 = local_bb5_c7_enter_c7_eni2_inputs_ready;
assign local_bb5_c7_enter_c7_eni2_valid_out_2 = local_bb5_c7_enter_c7_eni2_inputs_ready;
assign local_bb5_c7_eni2_stall_in = (|local_bb5_c7_enter_c7_eni2_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exit5_c2_exi44_valid_out_0;
wire local_bb5_c2_exit5_c2_exi44_stall_in_0;
wire local_bb5_c2_exit5_c2_exi44_valid_out_1;
wire local_bb5_c2_exit5_c2_exi44_stall_in_1;
wire local_bb5_c2_exit5_c2_exi44_valid_out_2;
wire local_bb5_c2_exit5_c2_exi44_stall_in_2;
wire local_bb5_c2_exit5_c2_exi44_valid_out_3;
wire local_bb5_c2_exit5_c2_exi44_stall_in_3;
wire local_bb5_c2_exit5_c2_exi44_inputs_ready;
wire local_bb5_c2_exit5_c2_exi44_stall_local;
wire [159:0] local_bb5_c2_exit5_c2_exi44;
wire local_bb5_c2_exit5_c2_exi44_valid;
wire local_bb5_c2_exit5_c2_exi44_fu_stall_out;

acl_enable_sink local_bb5_c2_exit5_c2_exi44_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb5_c2_exi44),
	.data_out(local_bb5_c2_exit5_c2_exi44),
	.input_accepted(local_bb5_c2_enter16_c2_eni615_input_accepted),
	.valid_out(local_bb5_c2_exit5_c2_exi44_valid),
	.stall_in(local_bb5_c2_exit5_c2_exi44_stall_local),
	.enable(local_bb5_c2_exit5_c2_exi44_enable),
	.valid_in(local_bb5_c2_exit5_c2_exi44_valid_in),
	.stall_entry(local_bb5_c2_exit5_c2_exi44_entry_stall),
	.inc_pipelined_thread(local_bb5_c2_enter16_c2_eni615_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb5_c2_enter16_c2_eni615_dec_pipelined_thread)
);

defparam local_bb5_c2_exit5_c2_exi44_instance.DATA_WIDTH = 160;
defparam local_bb5_c2_exit5_c2_exi44_instance.PIPELINE_DEPTH = 1;
defparam local_bb5_c2_exit5_c2_exi44_instance.SCHEDULEII = 1;
defparam local_bb5_c2_exit5_c2_exi44_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb5_c2_exit5_c2_exi44_inputs_ready = (local_bb5_c2_exi44_valid_out & SFC_3_VALID_4_5_0_valid_out_NO_SHIFT_REG);
assign local_bb5_c2_exit5_c2_exi44_valid_in = SFC_3_VALID_4_5_0_NO_SHIFT_REG;
assign local_bb5_c2_exit5_c2_exi44_fu_stall_out = ~(local_bb5_c2_exit5_c2_exi44_enable);
assign local_bb5_c2_exit5_c2_exi44_stall_local = (local_bb5_c2_exit5_c2_exi44_stall_in_0 | local_bb5_c2_exit5_c2_exi44_stall_in_1 | local_bb5_c2_exit5_c2_exi44_stall_in_2 | local_bb5_c2_exit5_c2_exi44_stall_in_3);
assign local_bb5_c2_exit5_c2_exi44_valid_out_0 = local_bb5_c2_exit5_c2_exi44_valid;
assign local_bb5_c2_exit5_c2_exi44_valid_out_1 = local_bb5_c2_exit5_c2_exi44_valid;
assign local_bb5_c2_exit5_c2_exi44_valid_out_2 = local_bb5_c2_exit5_c2_exi44_valid;
assign local_bb5_c2_exit5_c2_exi44_valid_out_3 = local_bb5_c2_exit5_c2_exi44_valid;
assign local_bb5_c2_exi44_stall_in = 1'b0;
assign SFC_3_VALID_4_5_0_stall_in = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c7_ene1_stall_local;
wire [31:0] local_bb5_c7_ene1;

assign local_bb5_c7_ene1[31:0] = local_bb5_c7_enter_c7_eni2[63:32];

// This section implements an unregistered operation.
// 
wire local_bb5_c7_ene2_stall_local;
wire [31:0] local_bb5_c7_ene2;

assign local_bb5_c7_ene2[31:0] = local_bb5_c7_enter_c7_eni2[95:64];

// This section implements an unregistered operation.
// 
wire SFC_8_VALID_8_8_0_valid_out;
wire SFC_8_VALID_8_8_0_stall_in;
wire SFC_8_VALID_8_8_0_inputs_ready;
wire SFC_8_VALID_8_8_0_stall_local;
wire SFC_8_VALID_8_8_0;

assign SFC_8_VALID_8_8_0_inputs_ready = local_bb5_c7_enter_c7_eni2_valid_out_2;
assign SFC_8_VALID_8_8_0 = local_bb5_c7_enter_c7_eni2_valid_bit;
assign SFC_8_VALID_8_8_0_valid_out = 1'b1;
assign local_bb5_c7_enter_c7_eni2_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exe16_stall_local;
wire [31:0] local_bb5_c2_exe16;

assign local_bb5_c2_exe16[31:0] = local_bb5_c2_exit5_c2_exi44[63:32];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exe27_stall_local;
wire [31:0] local_bb5_c2_exe27;

assign local_bb5_c2_exe27[31:0] = local_bb5_c2_exit5_c2_exi44[95:64];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exe38_stall_local;
wire [31:0] local_bb5_c2_exe38;

assign local_bb5_c2_exe38[31:0] = local_bb5_c2_exit5_c2_exi44[127:96];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exe49_stall_local;
wire [31:0] local_bb5_c2_exe49;

assign local_bb5_c2_exe49[31:0] = local_bb5_c2_exit5_c2_exi44[159:128];

// This section implements an unregistered operation.
// 
wire local_bb5_add55_valid_out;
wire local_bb5_add55_stall_in;
wire local_bb5_add55_inputs_ready;
wire local_bb5_add55_stall_local;
wire [31:0] local_bb5_add55;

assign local_bb5_add55_inputs_ready = (local_bb5_c7_enter_c7_eni2_valid_out_0 & local_bb5_c7_enter_c7_eni2_valid_out_1);
assign local_bb5_add55 = (local_bb5_c7_ene1 + local_bb5_c7_ene2);
assign local_bb5_add55_valid_out = 1'b1;
assign local_bb5_c7_enter_c7_eni2_stall_in_0 = 1'b0;
assign local_bb5_c7_enter_c7_eni2_stall_in_1 = 1'b0;

// This section implements a registered operation.
// 
wire SFC_8_VALID_8_9_0_inputs_ready;
 reg SFC_8_VALID_8_9_0_valid_out_NO_SHIFT_REG;
wire SFC_8_VALID_8_9_0_stall_in;
wire SFC_8_VALID_8_9_0_output_regs_ready;
 reg SFC_8_VALID_8_9_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_8_VALID_8_9_0_causedstall;

assign SFC_8_VALID_8_9_0_inputs_ready = 1'b1;
assign SFC_8_VALID_8_9_0_output_regs_ready = local_bb5_c7_exit_c7_exi1_enable;
assign SFC_8_VALID_8_8_0_stall_in = 1'b0;
assign SFC_8_VALID_8_9_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c7_exit_c7_exi1_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_8_VALID_8_9_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_8_VALID_8_9_0_output_regs_ready)
		begin
			SFC_8_VALID_8_9_0_NO_SHIFT_REG <= SFC_8_VALID_8_8_0;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_c3_eni1_stall_local;
wire [159:0] local_bb5_c3_eni1;

assign local_bb5_c3_eni1[31:0] = 32'bx;
assign local_bb5_c3_eni1[63:32] = local_bb5_c2_exe16;
assign local_bb5_c3_eni1[159:64] = 96'bx;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_8to9_bb5_add55_0_valid_out_NO_SHIFT_REG;
 logic rnode_8to9_bb5_add55_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_8to9_bb5_add55_0_NO_SHIFT_REG;
 logic rnode_8to9_bb5_add55_0_reg_9_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_8to9_bb5_add55_0_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb5_add55_0_valid_out_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb5_add55_0_stall_in_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb5_add55_0_stall_out_reg_9_NO_SHIFT_REG;

acl_data_fifo rnode_8to9_bb5_add55_0_reg_9_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_8to9_bb5_add55_0_reg_9_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_8to9_bb5_add55_0_stall_in_reg_9_NO_SHIFT_REG),
	.valid_out(rnode_8to9_bb5_add55_0_valid_out_reg_9_NO_SHIFT_REG),
	.stall_out(rnode_8to9_bb5_add55_0_stall_out_reg_9_NO_SHIFT_REG),
	.data_in(local_bb5_add55),
	.data_out(rnode_8to9_bb5_add55_0_reg_9_NO_SHIFT_REG)
);

defparam rnode_8to9_bb5_add55_0_reg_9_fifo.DEPTH = 1;
defparam rnode_8to9_bb5_add55_0_reg_9_fifo.DATA_WIDTH = 32;
defparam rnode_8to9_bb5_add55_0_reg_9_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_8to9_bb5_add55_0_reg_9_fifo.IMPL = "shift_reg";

assign rnode_8to9_bb5_add55_0_reg_9_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_add55_stall_in = 1'b0;
assign rnode_8to9_bb5_add55_0_NO_SHIFT_REG = rnode_8to9_bb5_add55_0_reg_9_NO_SHIFT_REG;
assign rnode_8to9_bb5_add55_0_stall_in_reg_9_NO_SHIFT_REG = ~(local_bb5_c7_exit_c7_exi1_enable);
assign rnode_8to9_bb5_add55_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_c3_eni2_stall_local;
wire [159:0] local_bb5_c3_eni2;

assign local_bb5_c3_eni2[63:0] = local_bb5_c3_eni1[63:0];
assign local_bb5_c3_eni2[95:64] = local_bb5_c2_exe27;
assign local_bb5_c3_eni2[159:96] = local_bb5_c3_eni1[159:96];

// This section implements an unregistered operation.
// 
wire local_bb5_idxprom56_stall_local;
wire [63:0] local_bb5_idxprom56;

assign local_bb5_idxprom56[32] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[33] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[34] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[35] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[36] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[37] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[38] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[39] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[40] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[41] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[42] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[43] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[44] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[45] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[46] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[47] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[48] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[49] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[50] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[51] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[52] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[53] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[54] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[55] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[56] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[57] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[58] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[59] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[60] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[61] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[62] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[63] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom56[31:0] = rnode_8to9_bb5_add55_0_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_c3_eni3_stall_local;
wire [159:0] local_bb5_c3_eni3;

assign local_bb5_c3_eni3[95:0] = local_bb5_c3_eni2[95:0];
assign local_bb5_c3_eni3[127:96] = local_bb5_c2_exe38;
assign local_bb5_c3_eni3[159:128] = local_bb5_c3_eni2[159:128];

// This section implements an unregistered operation.
// 
wire local_bb5_arrayidx57_stall_local;
wire [63:0] local_bb5_arrayidx57;

assign local_bb5_arrayidx57 = ((input_weight & 64'hFFFFFFFFFFFFFC00) + (local_bb5_idxprom56 << 6'h2));

// This section implements an unregistered operation.
// 
wire local_bb5_c3_eni4_valid_out;
wire local_bb5_c3_eni4_stall_in;
wire local_bb5_c3_eni4_inputs_ready;
wire local_bb5_c3_eni4_stall_local;
wire [159:0] local_bb5_c3_eni4;

assign local_bb5_c3_eni4_inputs_ready = (local_bb5_c2_exit5_c2_exi44_valid_out_0 & local_bb5_c2_exit5_c2_exi44_valid_out_1 & local_bb5_c2_exit5_c2_exi44_valid_out_2 & local_bb5_c2_exit5_c2_exi44_valid_out_3);
assign local_bb5_c3_eni4[127:0] = local_bb5_c3_eni3[127:0];
assign local_bb5_c3_eni4[159:128] = local_bb5_c2_exe49;
assign local_bb5_c3_eni4_valid_out = local_bb5_c3_eni4_inputs_ready;
assign local_bb5_c3_eni4_stall_local = local_bb5_c3_eni4_stall_in;
assign local_bb5_c2_exit5_c2_exi44_stall_in_0 = (local_bb5_c3_eni4_stall_local | ~(local_bb5_c3_eni4_inputs_ready));
assign local_bb5_c2_exit5_c2_exi44_stall_in_1 = (local_bb5_c3_eni4_stall_local | ~(local_bb5_c3_eni4_inputs_ready));
assign local_bb5_c2_exit5_c2_exi44_stall_in_2 = (local_bb5_c3_eni4_stall_local | ~(local_bb5_c3_eni4_inputs_ready));
assign local_bb5_c2_exit5_c2_exi44_stall_in_3 = (local_bb5_c3_eni4_stall_local | ~(local_bb5_c3_eni4_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb5_c7_exi1_valid_out;
wire local_bb5_c7_exi1_stall_in;
wire local_bb5_c7_exi1_inputs_ready;
wire local_bb5_c7_exi1_stall_local;
wire [127:0] local_bb5_c7_exi1;

assign local_bb5_c7_exi1_inputs_ready = rnode_8to9_bb5_add55_0_valid_out_NO_SHIFT_REG;
assign local_bb5_c7_exi1[63:0] = 64'bx;
assign local_bb5_c7_exi1[127:64] = (local_bb5_arrayidx57 & 64'hFFFFFFFFFFFFFFFC);
assign local_bb5_c7_exi1_valid_out = 1'b1;
assign rnode_8to9_bb5_add55_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c3_enter_c3_eni4_valid_out_0;
wire local_bb5_c3_enter_c3_eni4_stall_in_0;
wire local_bb5_c3_enter_c3_eni4_valid_out_1;
wire local_bb5_c3_enter_c3_eni4_stall_in_1;
wire local_bb5_c3_enter_c3_eni4_valid_out_2;
wire local_bb5_c3_enter_c3_eni4_stall_in_2;
wire local_bb5_c3_enter_c3_eni4_valid_out_3;
wire local_bb5_c3_enter_c3_eni4_stall_in_3;
wire local_bb5_c3_enter_c3_eni4_valid_out_4;
wire local_bb5_c3_enter_c3_eni4_stall_in_4;
wire local_bb5_c3_enter_c3_eni4_inputs_ready;
wire local_bb5_c3_enter_c3_eni4_stall_local;
wire local_bb5_c3_enter_c3_eni4_input_accepted;
wire [159:0] local_bb5_c3_enter_c3_eni4;
wire local_bb5_c3_exit_c3_exi2_enable;
wire local_bb5_c3_exit_c3_exi2_entry_stall;
wire local_bb5_c3_enter_c3_eni4_valid_bit;
wire local_bb5_c3_exit_c3_exi2_output_regs_ready;
wire local_bb5_c3_exit_c3_exi2_valid_in;
wire local_bb5_c3_exit_c3_exi2_phases;
wire local_bb5_c3_enter_c3_eni4_inc_pipelined_thread;
wire local_bb5_c3_enter_c3_eni4_dec_pipelined_thread;
wire local_bb5_c3_enter_c3_eni4_fu_stall_out;

assign local_bb5_c3_enter_c3_eni4_inputs_ready = local_bb5_c3_eni4_valid_out;
assign local_bb5_c3_enter_c3_eni4 = local_bb5_c3_eni4;
assign local_bb5_c3_enter_c3_eni4_input_accepted = (local_bb5_c3_enter_c3_eni4_inputs_ready && !(local_bb5_c3_exit_c3_exi2_entry_stall));
assign local_bb5_c3_enter_c3_eni4_valid_bit = local_bb5_c3_enter_c3_eni4_input_accepted;
assign local_bb5_c3_enter_c3_eni4_inc_pipelined_thread = 1'b1;
assign local_bb5_c3_enter_c3_eni4_dec_pipelined_thread = ~(1'b0);
assign local_bb5_c3_enter_c3_eni4_fu_stall_out = (~(local_bb5_c3_enter_c3_eni4_inputs_ready) | local_bb5_c3_exit_c3_exi2_entry_stall);
assign local_bb5_c3_enter_c3_eni4_stall_local = (local_bb5_c3_enter_c3_eni4_stall_in_0 | local_bb5_c3_enter_c3_eni4_stall_in_1 | local_bb5_c3_enter_c3_eni4_stall_in_2 | local_bb5_c3_enter_c3_eni4_stall_in_3 | local_bb5_c3_enter_c3_eni4_stall_in_4);
assign local_bb5_c3_enter_c3_eni4_valid_out_0 = local_bb5_c3_enter_c3_eni4_inputs_ready;
assign local_bb5_c3_enter_c3_eni4_valid_out_1 = local_bb5_c3_enter_c3_eni4_inputs_ready;
assign local_bb5_c3_enter_c3_eni4_valid_out_2 = local_bb5_c3_enter_c3_eni4_inputs_ready;
assign local_bb5_c3_enter_c3_eni4_valid_out_3 = local_bb5_c3_enter_c3_eni4_inputs_ready;
assign local_bb5_c3_enter_c3_eni4_valid_out_4 = local_bb5_c3_enter_c3_eni4_inputs_ready;
assign local_bb5_c3_eni4_stall_in = (|local_bb5_c3_enter_c3_eni4_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb5_c7_exit_c7_exi1_valid_out;
wire local_bb5_c7_exit_c7_exi1_stall_in;
wire local_bb5_c7_exit_c7_exi1_inputs_ready;
wire local_bb5_c7_exit_c7_exi1_stall_local;
wire [127:0] local_bb5_c7_exit_c7_exi1;
wire local_bb5_c7_exit_c7_exi1_valid;
wire local_bb5_c7_exit_c7_exi1_fu_stall_out;

acl_enable_sink local_bb5_c7_exit_c7_exi1_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb5_c7_exi1),
	.data_out(local_bb5_c7_exit_c7_exi1),
	.input_accepted(local_bb5_c7_enter_c7_eni2_input_accepted),
	.valid_out(local_bb5_c7_exit_c7_exi1_valid),
	.stall_in(local_bb5_c7_exit_c7_exi1_stall_local),
	.enable(local_bb5_c7_exit_c7_exi1_enable),
	.valid_in(local_bb5_c7_exit_c7_exi1_valid_in),
	.stall_entry(local_bb5_c7_exit_c7_exi1_entry_stall),
	.inc_pipelined_thread(local_bb5_c7_enter_c7_eni2_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb5_c7_enter_c7_eni2_dec_pipelined_thread)
);

defparam local_bb5_c7_exit_c7_exi1_instance.DATA_WIDTH = 128;
defparam local_bb5_c7_exit_c7_exi1_instance.PIPELINE_DEPTH = 1;
defparam local_bb5_c7_exit_c7_exi1_instance.SCHEDULEII = 1;
defparam local_bb5_c7_exit_c7_exi1_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb5_c7_exit_c7_exi1_inputs_ready = (local_bb5_c7_exi1_valid_out & SFC_8_VALID_8_9_0_valid_out_NO_SHIFT_REG);
assign local_bb5_c7_exit_c7_exi1_valid_in = SFC_8_VALID_8_9_0_NO_SHIFT_REG;
assign local_bb5_c7_exit_c7_exi1_fu_stall_out = ~(local_bb5_c7_exit_c7_exi1_enable);
assign local_bb5_c7_exit_c7_exi1_valid_out = local_bb5_c7_exit_c7_exi1_valid;
assign local_bb5_c7_exit_c7_exi1_stall_local = local_bb5_c7_exit_c7_exi1_stall_in;
assign local_bb5_c7_exi1_stall_in = 1'b0;
assign SFC_8_VALID_8_9_0_stall_in = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c3_ene1_valid_out;
wire local_bb5_c3_ene1_stall_in;
wire local_bb5_c3_ene1_inputs_ready;
wire local_bb5_c3_ene1_stall_local;
wire [31:0] local_bb5_c3_ene1;

assign local_bb5_c3_ene1_inputs_ready = local_bb5_c3_enter_c3_eni4_valid_out_0;
assign local_bb5_c3_ene1[31:0] = local_bb5_c3_enter_c3_eni4[63:32];
assign local_bb5_c3_ene1_valid_out = 1'b1;
assign local_bb5_c3_enter_c3_eni4_stall_in_0 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c3_ene2_stall_local;
wire [31:0] local_bb5_c3_ene2;

assign local_bb5_c3_ene2[31:0] = local_bb5_c3_enter_c3_eni4[95:64];

// This section implements an unregistered operation.
// 
wire local_bb5_c3_ene3_stall_local;
wire [31:0] local_bb5_c3_ene3;

assign local_bb5_c3_ene3[31:0] = local_bb5_c3_enter_c3_eni4[127:96];

// This section implements an unregistered operation.
// 
wire local_bb5_c3_ene4_valid_out;
wire local_bb5_c3_ene4_stall_in;
wire local_bb5_c3_ene4_inputs_ready;
wire local_bb5_c3_ene4_stall_local;
wire [31:0] local_bb5_c3_ene4;

assign local_bb5_c3_ene4_inputs_ready = local_bb5_c3_enter_c3_eni4_valid_out_3;
assign local_bb5_c3_ene4[31:0] = local_bb5_c3_enter_c3_eni4[159:128];
assign local_bb5_c3_ene4_valid_out = 1'b1;
assign local_bb5_c3_enter_c3_eni4_stall_in_3 = 1'b0;

// This section implements an unregistered operation.
// 
wire SFC_4_VALID_5_5_0_valid_out;
wire SFC_4_VALID_5_5_0_stall_in;
wire SFC_4_VALID_5_5_0_inputs_ready;
wire SFC_4_VALID_5_5_0_stall_local;
wire SFC_4_VALID_5_5_0;

assign SFC_4_VALID_5_5_0_inputs_ready = local_bb5_c3_enter_c3_eni4_valid_out_4;
assign SFC_4_VALID_5_5_0 = local_bb5_c3_enter_c3_eni4_valid_bit;
assign SFC_4_VALID_5_5_0_valid_out = 1'b1;
assign local_bb5_c3_enter_c3_eni4_stall_in_4 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c7_exe1_valid_out;
wire local_bb5_c7_exe1_stall_in;
wire local_bb5_c7_exe1_inputs_ready;
wire local_bb5_c7_exe1_stall_local;
wire [63:0] local_bb5_c7_exe1;

assign local_bb5_c7_exe1_inputs_ready = local_bb5_c7_exit_c7_exi1_valid_out;
assign local_bb5_c7_exe1[63:0] = local_bb5_c7_exit_c7_exi1[127:64];
assign local_bb5_c7_exe1_valid_out = local_bb5_c7_exe1_inputs_ready;
assign local_bb5_c7_exe1_stall_local = local_bb5_c7_exe1_stall_in;
assign local_bb5_c7_exit_c7_exi1_stall_in = (|local_bb5_c7_exe1_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb5_mul2715_valid_out;
wire local_bb5_mul2715_stall_in;
wire local_bb5_mul2715_inputs_ready;
wire local_bb5_mul2715_stall_local;
wire [31:0] local_bb5_mul2715;

assign local_bb5_mul2715_inputs_ready = (local_bb5_c3_enter_c3_eni4_valid_out_1 & local_bb5_c3_enter_c3_eni4_valid_out_2);
assign local_bb5_mul2715 = (local_bb5_c3_ene2 + local_bb5_c3_ene3);
assign local_bb5_mul2715_valid_out = 1'b1;
assign local_bb5_c3_enter_c3_eni4_stall_in_1 = 1'b0;
assign local_bb5_c3_enter_c3_eni4_stall_in_2 = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_5to6_bb5_c3_ene4_0_valid_out_NO_SHIFT_REG;
 logic rnode_5to6_bb5_c3_ene4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_5to6_bb5_c3_ene4_0_NO_SHIFT_REG;
 logic rnode_5to6_bb5_c3_ene4_0_reg_6_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_5to6_bb5_c3_ene4_0_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb5_c3_ene4_0_valid_out_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb5_c3_ene4_0_stall_in_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb5_c3_ene4_0_stall_out_reg_6_NO_SHIFT_REG;

acl_data_fifo rnode_5to6_bb5_c3_ene4_0_reg_6_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_5to6_bb5_c3_ene4_0_reg_6_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_5to6_bb5_c3_ene4_0_stall_in_reg_6_NO_SHIFT_REG),
	.valid_out(rnode_5to6_bb5_c3_ene4_0_valid_out_reg_6_NO_SHIFT_REG),
	.stall_out(rnode_5to6_bb5_c3_ene4_0_stall_out_reg_6_NO_SHIFT_REG),
	.data_in(local_bb5_c3_ene4),
	.data_out(rnode_5to6_bb5_c3_ene4_0_reg_6_NO_SHIFT_REG)
);

defparam rnode_5to6_bb5_c3_ene4_0_reg_6_fifo.DEPTH = 1;
defparam rnode_5to6_bb5_c3_ene4_0_reg_6_fifo.DATA_WIDTH = 32;
defparam rnode_5to6_bb5_c3_ene4_0_reg_6_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_5to6_bb5_c3_ene4_0_reg_6_fifo.IMPL = "shift_reg";

assign rnode_5to6_bb5_c3_ene4_0_reg_6_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_c3_ene4_stall_in = 1'b0;
assign rnode_5to6_bb5_c3_ene4_0_NO_SHIFT_REG = rnode_5to6_bb5_c3_ene4_0_reg_6_NO_SHIFT_REG;
assign rnode_5to6_bb5_c3_ene4_0_stall_in_reg_6_NO_SHIFT_REG = ~(local_bb5_c3_exit_c3_exi2_enable);
assign rnode_5to6_bb5_c3_ene4_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_4_VALID_5_6_0_inputs_ready;
 reg SFC_4_VALID_5_6_0_valid_out_NO_SHIFT_REG;
wire SFC_4_VALID_5_6_0_stall_in;
wire SFC_4_VALID_5_6_0_output_regs_ready;
 reg SFC_4_VALID_5_6_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_4_VALID_5_6_0_causedstall;

assign SFC_4_VALID_5_6_0_inputs_ready = 1'b1;
assign SFC_4_VALID_5_6_0_output_regs_ready = local_bb5_c3_exit_c3_exi2_enable;
assign SFC_4_VALID_5_5_0_stall_in = 1'b0;
assign SFC_4_VALID_5_6_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c3_exit_c3_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_4_VALID_5_6_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_4_VALID_5_6_0_output_regs_ready)
		begin
			SFC_4_VALID_5_6_0_NO_SHIFT_REG <= SFC_4_VALID_5_5_0;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_9to10_bb5_c7_exe1_0_valid_out_NO_SHIFT_REG;
 logic rnode_9to10_bb5_c7_exe1_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_9to10_bb5_c7_exe1_0_NO_SHIFT_REG;
 logic rnode_9to10_bb5_c7_exe1_0_reg_10_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_9to10_bb5_c7_exe1_0_reg_10_NO_SHIFT_REG;
 logic rnode_9to10_bb5_c7_exe1_0_valid_out_reg_10_NO_SHIFT_REG;
 logic rnode_9to10_bb5_c7_exe1_0_stall_in_reg_10_NO_SHIFT_REG;
 logic rnode_9to10_bb5_c7_exe1_0_stall_out_reg_10_NO_SHIFT_REG;

acl_data_fifo rnode_9to10_bb5_c7_exe1_0_reg_10_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_9to10_bb5_c7_exe1_0_reg_10_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_9to10_bb5_c7_exe1_0_stall_in_reg_10_NO_SHIFT_REG),
	.valid_out(rnode_9to10_bb5_c7_exe1_0_valid_out_reg_10_NO_SHIFT_REG),
	.stall_out(rnode_9to10_bb5_c7_exe1_0_stall_out_reg_10_NO_SHIFT_REG),
	.data_in((local_bb5_c7_exe1 & 64'hFFFFFFFFFFFFFFFC)),
	.data_out(rnode_9to10_bb5_c7_exe1_0_reg_10_NO_SHIFT_REG)
);

defparam rnode_9to10_bb5_c7_exe1_0_reg_10_fifo.DEPTH = 2;
defparam rnode_9to10_bb5_c7_exe1_0_reg_10_fifo.DATA_WIDTH = 64;
defparam rnode_9to10_bb5_c7_exe1_0_reg_10_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_9to10_bb5_c7_exe1_0_reg_10_fifo.IMPL = "ll_reg";

assign rnode_9to10_bb5_c7_exe1_0_reg_10_inputs_ready_NO_SHIFT_REG = local_bb5_c7_exe1_valid_out;
assign local_bb5_c7_exe1_stall_in = rnode_9to10_bb5_c7_exe1_0_stall_out_reg_10_NO_SHIFT_REG;
assign rnode_9to10_bb5_c7_exe1_0_NO_SHIFT_REG = rnode_9to10_bb5_c7_exe1_0_reg_10_NO_SHIFT_REG;
assign rnode_9to10_bb5_c7_exe1_0_stall_in_reg_10_NO_SHIFT_REG = rnode_9to10_bb5_c7_exe1_0_stall_in_NO_SHIFT_REG;
assign rnode_9to10_bb5_c7_exe1_0_valid_out_NO_SHIFT_REG = rnode_9to10_bb5_c7_exe1_0_valid_out_reg_10_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb5_add34_inputs_ready;
 reg local_bb5_add34_valid_out_NO_SHIFT_REG;
wire local_bb5_add34_stall_in;
wire local_bb5_add34_output_regs_ready;
wire [31:0] local_bb5_add34;
 reg local_bb5_add34_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb5_add34_valid_pipe_1_NO_SHIFT_REG;
wire local_bb5_add34_causedstall;

acl_int_mult int_module_local_bb5_add34 (
	.clock(clock),
	.dataa(local_bb5_mul2715),
	.datab(local_bb5_c3_ene1),
	.enable(local_bb5_add34_output_regs_ready),
	.result(local_bb5_add34)
);

defparam int_module_local_bb5_add34.INPUT1_WIDTH = 32;
defparam int_module_local_bb5_add34.INPUT2_WIDTH = 32;
defparam int_module_local_bb5_add34.OUTPUT_WIDTH = 32;
defparam int_module_local_bb5_add34.LATENCY = 3;
defparam int_module_local_bb5_add34.SIGNED = 0;

assign local_bb5_add34_inputs_ready = 1'b1;
assign local_bb5_add34_output_regs_ready = local_bb5_c3_exit_c3_exi2_enable;
assign local_bb5_mul2715_stall_in = 1'b0;
assign local_bb5_c3_ene1_stall_in = 1'b0;
assign local_bb5_add34_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c3_exit_c3_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_add34_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb5_add34_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_add34_output_regs_ready)
		begin
			local_bb5_add34_valid_pipe_0_NO_SHIFT_REG <= 1'b1;
			local_bb5_add34_valid_pipe_1_NO_SHIFT_REG <= local_bb5_add34_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_add34_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_add34_output_regs_ready)
		begin
			local_bb5_add34_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb5_add34_stall_in))
			begin
				local_bb5_add34_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_6to7_bb5_c3_ene4_0_valid_out_NO_SHIFT_REG;
 logic rnode_6to7_bb5_c3_ene4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_6to7_bb5_c3_ene4_0_NO_SHIFT_REG;
 logic rnode_6to7_bb5_c3_ene4_0_reg_7_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_6to7_bb5_c3_ene4_0_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb5_c3_ene4_0_valid_out_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb5_c3_ene4_0_stall_in_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb5_c3_ene4_0_stall_out_reg_7_NO_SHIFT_REG;

acl_data_fifo rnode_6to7_bb5_c3_ene4_0_reg_7_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_6to7_bb5_c3_ene4_0_reg_7_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_6to7_bb5_c3_ene4_0_stall_in_reg_7_NO_SHIFT_REG),
	.valid_out(rnode_6to7_bb5_c3_ene4_0_valid_out_reg_7_NO_SHIFT_REG),
	.stall_out(rnode_6to7_bb5_c3_ene4_0_stall_out_reg_7_NO_SHIFT_REG),
	.data_in(rnode_5to6_bb5_c3_ene4_0_NO_SHIFT_REG),
	.data_out(rnode_6to7_bb5_c3_ene4_0_reg_7_NO_SHIFT_REG)
);

defparam rnode_6to7_bb5_c3_ene4_0_reg_7_fifo.DEPTH = 1;
defparam rnode_6to7_bb5_c3_ene4_0_reg_7_fifo.DATA_WIDTH = 32;
defparam rnode_6to7_bb5_c3_ene4_0_reg_7_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_6to7_bb5_c3_ene4_0_reg_7_fifo.IMPL = "shift_reg";

assign rnode_6to7_bb5_c3_ene4_0_reg_7_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_5to6_bb5_c3_ene4_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_6to7_bb5_c3_ene4_0_NO_SHIFT_REG = rnode_6to7_bb5_c3_ene4_0_reg_7_NO_SHIFT_REG;
assign rnode_6to7_bb5_c3_ene4_0_stall_in_reg_7_NO_SHIFT_REG = ~(local_bb5_c3_exit_c3_exi2_enable);
assign rnode_6to7_bb5_c3_ene4_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_4_VALID_6_7_0_inputs_ready;
 reg SFC_4_VALID_6_7_0_valid_out_NO_SHIFT_REG;
wire SFC_4_VALID_6_7_0_stall_in;
wire SFC_4_VALID_6_7_0_output_regs_ready;
 reg SFC_4_VALID_6_7_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_4_VALID_6_7_0_causedstall;

assign SFC_4_VALID_6_7_0_inputs_ready = 1'b1;
assign SFC_4_VALID_6_7_0_output_regs_ready = local_bb5_c3_exit_c3_exi2_enable;
assign SFC_4_VALID_5_6_0_stall_in = 1'b0;
assign SFC_4_VALID_6_7_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c3_exit_c3_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_4_VALID_6_7_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_4_VALID_6_7_0_output_regs_ready)
		begin
			SFC_4_VALID_6_7_0_NO_SHIFT_REG <= SFC_4_VALID_5_6_0_NO_SHIFT_REG;
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb5_ld__inputs_ready;
 reg local_bb5_ld__valid_out_NO_SHIFT_REG;
wire local_bb5_ld__stall_in;
wire local_bb5_ld__output_regs_ready;
wire local_bb5_ld__fu_stall_out;
wire local_bb5_ld__fu_valid_out;
wire [31:0] local_bb5_ld__lsu_dataout;
 reg [31:0] local_bb5_ld__NO_SHIFT_REG;
wire local_bb5_ld__causedstall;

lsu_top lsu_local_bb5_ld_ (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb5_ld__fu_stall_out),
	.i_valid(local_bb5_ld__inputs_ready),
	.i_address((rnode_9to10_bb5_c7_exe1_0_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFFFC)),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(rnode_9to10__phi_decision_xor119_or_1_NO_SHIFT_REG),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb5_ld__output_regs_ready)),
	.o_valid(local_bb5_ld__fu_valid_out),
	.o_readdata(local_bb5_ld__lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb5_ld__active),
	.avm_address(avm_local_bb5_ld__address),
	.avm_read(avm_local_bb5_ld__read),
	.avm_enable(avm_local_bb5_ld__enable),
	.avm_readdata(avm_local_bb5_ld__readdata),
	.avm_write(avm_local_bb5_ld__write),
	.avm_writeack(avm_local_bb5_ld__writeack),
	.avm_burstcount(avm_local_bb5_ld__burstcount),
	.avm_writedata(avm_local_bb5_ld__writedata),
	.avm_byteenable(avm_local_bb5_ld__byteenable),
	.avm_waitrequest(avm_local_bb5_ld__waitrequest),
	.avm_readdatavalid(avm_local_bb5_ld__readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb5_ld_.AWIDTH = 32;
defparam lsu_local_bb5_ld_.WIDTH_BYTES = 4;
defparam lsu_local_bb5_ld_.MWIDTH_BYTES = 64;
defparam lsu_local_bb5_ld_.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb5_ld_.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb5_ld_.READ = 1;
defparam lsu_local_bb5_ld_.ATOMIC = 0;
defparam lsu_local_bb5_ld_.WIDTH = 32;
defparam lsu_local_bb5_ld_.MWIDTH = 512;
defparam lsu_local_bb5_ld_.ATOMIC_WIDTH = 3;
defparam lsu_local_bb5_ld_.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb5_ld_.KERNEL_SIDE_MEM_LATENCY = 160;
defparam lsu_local_bb5_ld_.MEMORY_SIDE_MEM_LATENCY = 71;
defparam lsu_local_bb5_ld_.USE_WRITE_ACK = 0;
defparam lsu_local_bb5_ld_.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb5_ld_.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb5_ld_.NUMBER_BANKS = 1;
defparam lsu_local_bb5_ld_.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb5_ld_.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb5_ld_.USEINPUTFIFO = 0;
defparam lsu_local_bb5_ld_.USECACHING = 0;
defparam lsu_local_bb5_ld_.USEOUTPUTFIFO = 1;
defparam lsu_local_bb5_ld_.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb5_ld_.ADDRSPACE = 1;
defparam lsu_local_bb5_ld_.STYLE = "BURST-COALESCED";

assign local_bb5_ld__inputs_ready = (rnode_9to10_bb5_c7_exe1_0_valid_out_NO_SHIFT_REG & rnode_9to10__phi_decision_xor119_or_0_valid_out_1_NO_SHIFT_REG);
assign local_bb5_ld__output_regs_ready = (&(~(local_bb5_ld__valid_out_NO_SHIFT_REG) | ~(local_bb5_ld__stall_in)));
assign rnode_9to10_bb5_c7_exe1_0_stall_in_NO_SHIFT_REG = (local_bb5_ld__fu_stall_out | ~(local_bb5_ld__inputs_ready));
assign rnode_9to10__phi_decision_xor119_or_0_stall_in_1_NO_SHIFT_REG = (local_bb5_ld__fu_stall_out | ~(local_bb5_ld__inputs_ready));
assign local_bb5_ld__causedstall = (local_bb5_ld__inputs_ready && (local_bb5_ld__fu_stall_out && !(~(local_bb5_ld__output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_ld__NO_SHIFT_REG <= 'x;
		local_bb5_ld__valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_ld__output_regs_ready)
		begin
			local_bb5_ld__NO_SHIFT_REG <= local_bb5_ld__lsu_dataout;
			local_bb5_ld__valid_out_NO_SHIFT_REG <= local_bb5_ld__fu_valid_out;
		end
		else
		begin
			if (~(local_bb5_ld__stall_in))
			begin
				local_bb5_ld__valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_7to8_bb5_c3_ene4_0_valid_out_NO_SHIFT_REG;
 logic rnode_7to8_bb5_c3_ene4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_7to8_bb5_c3_ene4_0_NO_SHIFT_REG;
 logic rnode_7to8_bb5_c3_ene4_0_reg_8_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_7to8_bb5_c3_ene4_0_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb5_c3_ene4_0_valid_out_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb5_c3_ene4_0_stall_in_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb5_c3_ene4_0_stall_out_reg_8_NO_SHIFT_REG;

acl_data_fifo rnode_7to8_bb5_c3_ene4_0_reg_8_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_7to8_bb5_c3_ene4_0_reg_8_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_7to8_bb5_c3_ene4_0_stall_in_reg_8_NO_SHIFT_REG),
	.valid_out(rnode_7to8_bb5_c3_ene4_0_valid_out_reg_8_NO_SHIFT_REG),
	.stall_out(rnode_7to8_bb5_c3_ene4_0_stall_out_reg_8_NO_SHIFT_REG),
	.data_in(rnode_6to7_bb5_c3_ene4_0_NO_SHIFT_REG),
	.data_out(rnode_7to8_bb5_c3_ene4_0_reg_8_NO_SHIFT_REG)
);

defparam rnode_7to8_bb5_c3_ene4_0_reg_8_fifo.DEPTH = 1;
defparam rnode_7to8_bb5_c3_ene4_0_reg_8_fifo.DATA_WIDTH = 32;
defparam rnode_7to8_bb5_c3_ene4_0_reg_8_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_7to8_bb5_c3_ene4_0_reg_8_fifo.IMPL = "shift_reg";

assign rnode_7to8_bb5_c3_ene4_0_reg_8_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_6to7_bb5_c3_ene4_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_7to8_bb5_c3_ene4_0_NO_SHIFT_REG = rnode_7to8_bb5_c3_ene4_0_reg_8_NO_SHIFT_REG;
assign rnode_7to8_bb5_c3_ene4_0_stall_in_reg_8_NO_SHIFT_REG = ~(local_bb5_c3_exit_c3_exi2_enable);
assign rnode_7to8_bb5_c3_ene4_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_4_VALID_7_8_0_inputs_ready;
 reg SFC_4_VALID_7_8_0_valid_out_NO_SHIFT_REG;
wire SFC_4_VALID_7_8_0_stall_in;
wire SFC_4_VALID_7_8_0_output_regs_ready;
 reg SFC_4_VALID_7_8_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_4_VALID_7_8_0_causedstall;

assign SFC_4_VALID_7_8_0_inputs_ready = 1'b1;
assign SFC_4_VALID_7_8_0_output_regs_ready = local_bb5_c3_exit_c3_exi2_enable;
assign SFC_4_VALID_6_7_0_stall_in = 1'b0;
assign SFC_4_VALID_7_8_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c3_exit_c3_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_4_VALID_7_8_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_4_VALID_7_8_0_output_regs_ready)
		begin
			SFC_4_VALID_7_8_0_NO_SHIFT_REG <= SFC_4_VALID_6_7_0_NO_SHIFT_REG;
		end
	end
end


// This section implements a staging register.
// 
wire rstag_170to170_bb5_ld__valid_out;
wire rstag_170to170_bb5_ld__stall_in;
wire rstag_170to170_bb5_ld__inputs_ready;
wire rstag_170to170_bb5_ld__stall_local;
 reg rstag_170to170_bb5_ld__staging_valid_NO_SHIFT_REG;
wire rstag_170to170_bb5_ld__combined_valid;
 reg [31:0] rstag_170to170_bb5_ld__staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_170to170_bb5_ld_;

assign rstag_170to170_bb5_ld__inputs_ready = local_bb5_ld__valid_out_NO_SHIFT_REG;
assign rstag_170to170_bb5_ld_ = (rstag_170to170_bb5_ld__staging_valid_NO_SHIFT_REG ? rstag_170to170_bb5_ld__staging_reg_NO_SHIFT_REG : local_bb5_ld__NO_SHIFT_REG);
assign rstag_170to170_bb5_ld__combined_valid = (rstag_170to170_bb5_ld__staging_valid_NO_SHIFT_REG | rstag_170to170_bb5_ld__inputs_ready);
assign rstag_170to170_bb5_ld__valid_out = rstag_170to170_bb5_ld__combined_valid;
assign rstag_170to170_bb5_ld__stall_local = rstag_170to170_bb5_ld__stall_in;
assign local_bb5_ld__stall_in = (|rstag_170to170_bb5_ld__staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_170to170_bb5_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_170to170_bb5_ld__staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_170to170_bb5_ld__stall_local)
		begin
			if (~(rstag_170to170_bb5_ld__staging_valid_NO_SHIFT_REG))
			begin
				rstag_170to170_bb5_ld__staging_valid_NO_SHIFT_REG <= rstag_170to170_bb5_ld__inputs_ready;
			end
		end
		else
		begin
			rstag_170to170_bb5_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_170to170_bb5_ld__staging_valid_NO_SHIFT_REG))
		begin
			rstag_170to170_bb5_ld__staging_reg_NO_SHIFT_REG <= local_bb5_ld__NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_c3_exi1_stall_local;
wire [95:0] local_bb5_c3_exi1;

assign local_bb5_c3_exi1[31:0] = 32'bx;
assign local_bb5_c3_exi1[63:32] = rnode_7to8_bb5_c3_ene4_0_NO_SHIFT_REG;
assign local_bb5_c3_exi1[95:64] = 32'bx;

// This section implements an unregistered operation.
// 
wire local_bb5_c3_exi2_valid_out;
wire local_bb5_c3_exi2_stall_in;
wire local_bb5_c3_exi2_inputs_ready;
wire local_bb5_c3_exi2_stall_local;
wire [95:0] local_bb5_c3_exi2;

assign local_bb5_c3_exi2_inputs_ready = (local_bb5_add34_valid_out_NO_SHIFT_REG & rnode_7to8_bb5_c3_ene4_0_valid_out_NO_SHIFT_REG);
assign local_bb5_c3_exi2[63:0] = local_bb5_c3_exi1[63:0];
assign local_bb5_c3_exi2[95:64] = local_bb5_add34;
assign local_bb5_c3_exi2_valid_out = 1'b1;
assign local_bb5_add34_stall_in = 1'b0;
assign rnode_7to8_bb5_c3_ene4_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c3_exit_c3_exi2_valid_out;
wire local_bb5_c3_exit_c3_exi2_stall_in;
wire local_bb5_c3_exit_c3_exi2_inputs_ready;
wire local_bb5_c3_exit_c3_exi2_stall_local;
wire [95:0] local_bb5_c3_exit_c3_exi2;
wire local_bb5_c3_exit_c3_exi2_valid;
wire local_bb5_c3_exit_c3_exi2_fu_stall_out;

acl_enable_sink local_bb5_c3_exit_c3_exi2_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb5_c3_exi2),
	.data_out(local_bb5_c3_exit_c3_exi2),
	.input_accepted(local_bb5_c3_enter_c3_eni4_input_accepted),
	.valid_out(local_bb5_c3_exit_c3_exi2_valid),
	.stall_in(local_bb5_c3_exit_c3_exi2_stall_local),
	.enable(local_bb5_c3_exit_c3_exi2_enable),
	.valid_in(local_bb5_c3_exit_c3_exi2_valid_in),
	.stall_entry(local_bb5_c3_exit_c3_exi2_entry_stall),
	.inc_pipelined_thread(local_bb5_c3_enter_c3_eni4_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb5_c3_enter_c3_eni4_dec_pipelined_thread)
);

defparam local_bb5_c3_exit_c3_exi2_instance.DATA_WIDTH = 96;
defparam local_bb5_c3_exit_c3_exi2_instance.PIPELINE_DEPTH = 3;
defparam local_bb5_c3_exit_c3_exi2_instance.SCHEDULEII = 1;
defparam local_bb5_c3_exit_c3_exi2_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb5_c3_exit_c3_exi2_inputs_ready = (local_bb5_c3_exi2_valid_out & SFC_4_VALID_7_8_0_valid_out_NO_SHIFT_REG);
assign local_bb5_c3_exit_c3_exi2_valid_in = SFC_4_VALID_7_8_0_NO_SHIFT_REG;
assign local_bb5_c3_exit_c3_exi2_fu_stall_out = ~(local_bb5_c3_exit_c3_exi2_enable);
assign local_bb5_c3_exit_c3_exi2_valid_out = local_bb5_c3_exit_c3_exi2_valid;
assign local_bb5_c3_exit_c3_exi2_stall_local = local_bb5_c3_exit_c3_exi2_stall_in;
assign local_bb5_c3_exi2_stall_in = 1'b0;
assign SFC_4_VALID_7_8_0_stall_in = 1'b0;

// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_8to8_bb5_c3_exit_c3_exi2_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_8to8_bb5_c3_exit_c3_exi2_0_stall_in_0_NO_SHIFT_REG;
 logic [95:0] rnode_8to8_bb5_c3_exit_c3_exi2_0_NO_SHIFT_REG;
 logic rnode_8to8_bb5_c3_exit_c3_exi2_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_8to8_bb5_c3_exit_c3_exi2_0_stall_in_1_NO_SHIFT_REG;
 logic [95:0] rnode_8to8_bb5_c3_exit_c3_exi2_1_NO_SHIFT_REG;
 logic rnode_8to8_bb5_c3_exit_c3_exi2_0_reg_8_inputs_ready_NO_SHIFT_REG;
 logic [95:0] rnode_8to8_bb5_c3_exit_c3_exi2_0_reg_8_NO_SHIFT_REG;
 logic rnode_8to8_bb5_c3_exit_c3_exi2_0_valid_out_0_reg_8_NO_SHIFT_REG;
 logic rnode_8to8_bb5_c3_exit_c3_exi2_0_stall_in_0_reg_8_NO_SHIFT_REG;
 logic rnode_8to8_bb5_c3_exit_c3_exi2_0_stall_out_reg_8_NO_SHIFT_REG;

acl_data_fifo rnode_8to8_bb5_c3_exit_c3_exi2_0_reg_8_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_8to8_bb5_c3_exit_c3_exi2_0_reg_8_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_8to8_bb5_c3_exit_c3_exi2_0_stall_in_0_reg_8_NO_SHIFT_REG),
	.valid_out(rnode_8to8_bb5_c3_exit_c3_exi2_0_valid_out_0_reg_8_NO_SHIFT_REG),
	.stall_out(rnode_8to8_bb5_c3_exit_c3_exi2_0_stall_out_reg_8_NO_SHIFT_REG),
	.data_in(local_bb5_c3_exit_c3_exi2),
	.data_out(rnode_8to8_bb5_c3_exit_c3_exi2_0_reg_8_NO_SHIFT_REG)
);

defparam rnode_8to8_bb5_c3_exit_c3_exi2_0_reg_8_fifo.DEPTH = 3;
defparam rnode_8to8_bb5_c3_exit_c3_exi2_0_reg_8_fifo.DATA_WIDTH = 96;
defparam rnode_8to8_bb5_c3_exit_c3_exi2_0_reg_8_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_8to8_bb5_c3_exit_c3_exi2_0_reg_8_fifo.IMPL = "zl_reg";

assign rnode_8to8_bb5_c3_exit_c3_exi2_0_reg_8_inputs_ready_NO_SHIFT_REG = local_bb5_c3_exit_c3_exi2_valid_out;
assign local_bb5_c3_exit_c3_exi2_stall_in = rnode_8to8_bb5_c3_exit_c3_exi2_0_stall_out_reg_8_NO_SHIFT_REG;
assign rnode_8to8_bb5_c3_exit_c3_exi2_0_stall_in_0_reg_8_NO_SHIFT_REG = (rnode_8to8_bb5_c3_exit_c3_exi2_0_stall_in_0_NO_SHIFT_REG | rnode_8to8_bb5_c3_exit_c3_exi2_0_stall_in_1_NO_SHIFT_REG);
assign rnode_8to8_bb5_c3_exit_c3_exi2_0_valid_out_0_NO_SHIFT_REG = rnode_8to8_bb5_c3_exit_c3_exi2_0_valid_out_0_reg_8_NO_SHIFT_REG;
assign rnode_8to8_bb5_c3_exit_c3_exi2_0_valid_out_1_NO_SHIFT_REG = rnode_8to8_bb5_c3_exit_c3_exi2_0_valid_out_0_reg_8_NO_SHIFT_REG;
assign rnode_8to8_bb5_c3_exit_c3_exi2_0_NO_SHIFT_REG = rnode_8to8_bb5_c3_exit_c3_exi2_0_reg_8_NO_SHIFT_REG;
assign rnode_8to8_bb5_c3_exit_c3_exi2_1_NO_SHIFT_REG = rnode_8to8_bb5_c3_exit_c3_exi2_0_reg_8_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_c3_exe2_stall_local;
wire [31:0] local_bb5_c3_exe2;

assign local_bb5_c3_exe2[31:0] = rnode_8to8_bb5_c3_exit_c3_exi2_0_NO_SHIFT_REG[95:64];

// This section implements an unregistered operation.
// 
wire local_bb5_c3_exe1_stall_local;
wire [31:0] local_bb5_c3_exe1;

assign local_bb5_c3_exe1[31:0] = rnode_8to8_bb5_c3_exit_c3_exi2_1_NO_SHIFT_REG[63:32];

// This section implements an unregistered operation.
// 
wire local_bb5_c4_eni1_stall_local;
wire [95:0] local_bb5_c4_eni1;

assign local_bb5_c4_eni1[31:0] = 32'bx;
assign local_bb5_c4_eni1[63:32] = local_bb5_c3_exe1;
assign local_bb5_c4_eni1[95:64] = 32'bx;

// This section implements an unregistered operation.
// 
wire local_bb5_c4_eni2_valid_out;
wire local_bb5_c4_eni2_stall_in;
wire local_bb5_c4_eni2_inputs_ready;
wire local_bb5_c4_eni2_stall_local;
wire [95:0] local_bb5_c4_eni2;

assign local_bb5_c4_eni2_inputs_ready = (rnode_8to8_bb5_c3_exit_c3_exi2_0_valid_out_0_NO_SHIFT_REG & rnode_8to8_bb5_c3_exit_c3_exi2_0_valid_out_1_NO_SHIFT_REG);
assign local_bb5_c4_eni2[63:0] = local_bb5_c4_eni1[63:0];
assign local_bb5_c4_eni2[95:64] = local_bb5_c3_exe2;
assign local_bb5_c4_eni2_valid_out = local_bb5_c4_eni2_inputs_ready;
assign local_bb5_c4_eni2_stall_local = local_bb5_c4_eni2_stall_in;
assign rnode_8to8_bb5_c3_exit_c3_exi2_0_stall_in_0_NO_SHIFT_REG = (local_bb5_c4_eni2_stall_local | ~(local_bb5_c4_eni2_inputs_ready));
assign rnode_8to8_bb5_c3_exit_c3_exi2_0_stall_in_1_NO_SHIFT_REG = (local_bb5_c4_eni2_stall_local | ~(local_bb5_c4_eni2_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb5_c4_enter_c4_eni2_valid_out_0;
wire local_bb5_c4_enter_c4_eni2_stall_in_0;
wire local_bb5_c4_enter_c4_eni2_valid_out_1;
wire local_bb5_c4_enter_c4_eni2_stall_in_1;
wire local_bb5_c4_enter_c4_eni2_valid_out_2;
wire local_bb5_c4_enter_c4_eni2_stall_in_2;
wire local_bb5_c4_enter_c4_eni2_inputs_ready;
wire local_bb5_c4_enter_c4_eni2_stall_local;
wire local_bb5_c4_enter_c4_eni2_input_accepted;
wire [95:0] local_bb5_c4_enter_c4_eni2;
wire local_bb5_c4_exit_c4_exi1_enable;
wire local_bb5_c4_exit_c4_exi1_entry_stall;
wire local_bb5_c4_enter_c4_eni2_valid_bit;
wire local_bb5_c4_exit_c4_exi1_output_regs_ready;
wire local_bb5_c4_exit_c4_exi1_valid_in;
wire local_bb5_c4_exit_c4_exi1_phases;
wire local_bb5_c4_enter_c4_eni2_inc_pipelined_thread;
wire local_bb5_c4_enter_c4_eni2_dec_pipelined_thread;
wire local_bb5_c4_enter_c4_eni2_fu_stall_out;

assign local_bb5_c4_enter_c4_eni2_inputs_ready = local_bb5_c4_eni2_valid_out;
assign local_bb5_c4_enter_c4_eni2 = local_bb5_c4_eni2;
assign local_bb5_c4_enter_c4_eni2_input_accepted = (local_bb5_c4_enter_c4_eni2_inputs_ready && !(local_bb5_c4_exit_c4_exi1_entry_stall));
assign local_bb5_c4_enter_c4_eni2_valid_bit = local_bb5_c4_enter_c4_eni2_input_accepted;
assign local_bb5_c4_enter_c4_eni2_inc_pipelined_thread = 1'b1;
assign local_bb5_c4_enter_c4_eni2_dec_pipelined_thread = ~(1'b0);
assign local_bb5_c4_enter_c4_eni2_fu_stall_out = (~(local_bb5_c4_enter_c4_eni2_inputs_ready) | local_bb5_c4_exit_c4_exi1_entry_stall);
assign local_bb5_c4_enter_c4_eni2_stall_local = (local_bb5_c4_enter_c4_eni2_stall_in_0 | local_bb5_c4_enter_c4_eni2_stall_in_1 | local_bb5_c4_enter_c4_eni2_stall_in_2);
assign local_bb5_c4_enter_c4_eni2_valid_out_0 = local_bb5_c4_enter_c4_eni2_inputs_ready;
assign local_bb5_c4_enter_c4_eni2_valid_out_1 = local_bb5_c4_enter_c4_eni2_inputs_ready;
assign local_bb5_c4_enter_c4_eni2_valid_out_2 = local_bb5_c4_enter_c4_eni2_inputs_ready;
assign local_bb5_c4_eni2_stall_in = (|local_bb5_c4_enter_c4_eni2_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb5_c4_ene1_stall_local;
wire [31:0] local_bb5_c4_ene1;

assign local_bb5_c4_ene1[31:0] = local_bb5_c4_enter_c4_eni2[63:32];

// This section implements an unregistered operation.
// 
wire local_bb5_c4_ene2_stall_local;
wire [31:0] local_bb5_c4_ene2;

assign local_bb5_c4_ene2[31:0] = local_bb5_c4_enter_c4_eni2[95:64];

// This section implements an unregistered operation.
// 
wire SFC_5_VALID_8_8_0_valid_out;
wire SFC_5_VALID_8_8_0_stall_in;
wire SFC_5_VALID_8_8_0_inputs_ready;
wire SFC_5_VALID_8_8_0_stall_local;
wire SFC_5_VALID_8_8_0;

assign SFC_5_VALID_8_8_0_inputs_ready = local_bb5_c4_enter_c4_eni2_valid_out_2;
assign SFC_5_VALID_8_8_0 = local_bb5_c4_enter_c4_eni2_valid_bit;
assign SFC_5_VALID_8_8_0_valid_out = 1'b1;
assign local_bb5_c4_enter_c4_eni2_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_add40_valid_out;
wire local_bb5_add40_stall_in;
wire local_bb5_add40_inputs_ready;
wire local_bb5_add40_stall_local;
wire [31:0] local_bb5_add40;

assign local_bb5_add40_inputs_ready = (local_bb5_c4_enter_c4_eni2_valid_out_0 & local_bb5_c4_enter_c4_eni2_valid_out_1);
assign local_bb5_add40 = (local_bb5_c4_ene1 + local_bb5_c4_ene2);
assign local_bb5_add40_valid_out = 1'b1;
assign local_bb5_c4_enter_c4_eni2_stall_in_0 = 1'b0;
assign local_bb5_c4_enter_c4_eni2_stall_in_1 = 1'b0;

// This section implements a registered operation.
// 
wire SFC_5_VALID_8_9_0_inputs_ready;
 reg SFC_5_VALID_8_9_0_valid_out_NO_SHIFT_REG;
wire SFC_5_VALID_8_9_0_stall_in;
wire SFC_5_VALID_8_9_0_output_regs_ready;
 reg SFC_5_VALID_8_9_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_5_VALID_8_9_0_causedstall;

assign SFC_5_VALID_8_9_0_inputs_ready = 1'b1;
assign SFC_5_VALID_8_9_0_output_regs_ready = local_bb5_c4_exit_c4_exi1_enable;
assign SFC_5_VALID_8_8_0_stall_in = 1'b0;
assign SFC_5_VALID_8_9_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c4_exit_c4_exi1_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_5_VALID_8_9_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_5_VALID_8_9_0_output_regs_ready)
		begin
			SFC_5_VALID_8_9_0_NO_SHIFT_REG <= SFC_5_VALID_8_8_0;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_8to9_bb5_add40_0_valid_out_NO_SHIFT_REG;
 logic rnode_8to9_bb5_add40_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_8to9_bb5_add40_0_NO_SHIFT_REG;
 logic rnode_8to9_bb5_add40_0_reg_9_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_8to9_bb5_add40_0_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb5_add40_0_valid_out_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb5_add40_0_stall_in_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb5_add40_0_stall_out_reg_9_NO_SHIFT_REG;

acl_data_fifo rnode_8to9_bb5_add40_0_reg_9_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_8to9_bb5_add40_0_reg_9_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_8to9_bb5_add40_0_stall_in_reg_9_NO_SHIFT_REG),
	.valid_out(rnode_8to9_bb5_add40_0_valid_out_reg_9_NO_SHIFT_REG),
	.stall_out(rnode_8to9_bb5_add40_0_stall_out_reg_9_NO_SHIFT_REG),
	.data_in(local_bb5_add40),
	.data_out(rnode_8to9_bb5_add40_0_reg_9_NO_SHIFT_REG)
);

defparam rnode_8to9_bb5_add40_0_reg_9_fifo.DEPTH = 1;
defparam rnode_8to9_bb5_add40_0_reg_9_fifo.DATA_WIDTH = 32;
defparam rnode_8to9_bb5_add40_0_reg_9_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_8to9_bb5_add40_0_reg_9_fifo.IMPL = "shift_reg";

assign rnode_8to9_bb5_add40_0_reg_9_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_add40_stall_in = 1'b0;
assign rnode_8to9_bb5_add40_0_NO_SHIFT_REG = rnode_8to9_bb5_add40_0_reg_9_NO_SHIFT_REG;
assign rnode_8to9_bb5_add40_0_stall_in_reg_9_NO_SHIFT_REG = ~(local_bb5_c4_exit_c4_exi1_enable);
assign rnode_8to9_bb5_add40_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_idxprom_stall_local;
wire [63:0] local_bb5_idxprom;

assign local_bb5_idxprom[32] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[33] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[34] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[35] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[36] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[37] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[38] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[39] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[40] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[41] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[42] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[43] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[44] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[45] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[46] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[47] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[48] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[49] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[50] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[51] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[52] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[53] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[54] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[55] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[56] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[57] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[58] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[59] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[60] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[61] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[62] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[63] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom[31:0] = rnode_8to9_bb5_add40_0_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_arrayidx_stall_local;
wire [63:0] local_bb5_arrayidx;

assign local_bb5_arrayidx = ((input_inputFeatureMap & 64'hFFFFFFFFFFFFFC00) + (local_bb5_idxprom << 6'h2));

// This section implements an unregistered operation.
// 
wire local_bb5_c4_exi1_valid_out;
wire local_bb5_c4_exi1_stall_in;
wire local_bb5_c4_exi1_inputs_ready;
wire local_bb5_c4_exi1_stall_local;
wire [127:0] local_bb5_c4_exi1;

assign local_bb5_c4_exi1_inputs_ready = rnode_8to9_bb5_add40_0_valid_out_NO_SHIFT_REG;
assign local_bb5_c4_exi1[63:0] = 64'bx;
assign local_bb5_c4_exi1[127:64] = (local_bb5_arrayidx & 64'hFFFFFFFFFFFFFFFC);
assign local_bb5_c4_exi1_valid_out = 1'b1;
assign rnode_8to9_bb5_add40_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c4_exit_c4_exi1_valid_out;
wire local_bb5_c4_exit_c4_exi1_stall_in;
wire local_bb5_c4_exit_c4_exi1_inputs_ready;
wire local_bb5_c4_exit_c4_exi1_stall_local;
wire [127:0] local_bb5_c4_exit_c4_exi1;
wire local_bb5_c4_exit_c4_exi1_valid;
wire local_bb5_c4_exit_c4_exi1_fu_stall_out;

acl_enable_sink local_bb5_c4_exit_c4_exi1_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb5_c4_exi1),
	.data_out(local_bb5_c4_exit_c4_exi1),
	.input_accepted(local_bb5_c4_enter_c4_eni2_input_accepted),
	.valid_out(local_bb5_c4_exit_c4_exi1_valid),
	.stall_in(local_bb5_c4_exit_c4_exi1_stall_local),
	.enable(local_bb5_c4_exit_c4_exi1_enable),
	.valid_in(local_bb5_c4_exit_c4_exi1_valid_in),
	.stall_entry(local_bb5_c4_exit_c4_exi1_entry_stall),
	.inc_pipelined_thread(local_bb5_c4_enter_c4_eni2_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb5_c4_enter_c4_eni2_dec_pipelined_thread)
);

defparam local_bb5_c4_exit_c4_exi1_instance.DATA_WIDTH = 128;
defparam local_bb5_c4_exit_c4_exi1_instance.PIPELINE_DEPTH = 1;
defparam local_bb5_c4_exit_c4_exi1_instance.SCHEDULEII = 1;
defparam local_bb5_c4_exit_c4_exi1_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb5_c4_exit_c4_exi1_inputs_ready = (local_bb5_c4_exi1_valid_out & SFC_5_VALID_8_9_0_valid_out_NO_SHIFT_REG);
assign local_bb5_c4_exit_c4_exi1_valid_in = SFC_5_VALID_8_9_0_NO_SHIFT_REG;
assign local_bb5_c4_exit_c4_exi1_fu_stall_out = ~(local_bb5_c4_exit_c4_exi1_enable);
assign local_bb5_c4_exit_c4_exi1_valid_out = local_bb5_c4_exit_c4_exi1_valid;
assign local_bb5_c4_exit_c4_exi1_stall_local = local_bb5_c4_exit_c4_exi1_stall_in;
assign local_bb5_c4_exi1_stall_in = 1'b0;
assign SFC_5_VALID_8_9_0_stall_in = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c4_exe1_valid_out;
wire local_bb5_c4_exe1_stall_in;
wire local_bb5_c4_exe1_inputs_ready;
wire local_bb5_c4_exe1_stall_local;
wire [63:0] local_bb5_c4_exe1;

assign local_bb5_c4_exe1_inputs_ready = local_bb5_c4_exit_c4_exi1_valid_out;
assign local_bb5_c4_exe1[63:0] = local_bb5_c4_exit_c4_exi1[127:64];
assign local_bb5_c4_exe1_valid_out = local_bb5_c4_exe1_inputs_ready;
assign local_bb5_c4_exe1_stall_local = local_bb5_c4_exe1_stall_in;
assign local_bb5_c4_exit_c4_exi1_stall_in = (|local_bb5_c4_exe1_stall_local);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_9to10_bb5_c4_exe1_0_valid_out_NO_SHIFT_REG;
 logic rnode_9to10_bb5_c4_exe1_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_9to10_bb5_c4_exe1_0_NO_SHIFT_REG;
 logic rnode_9to10_bb5_c4_exe1_0_reg_10_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_9to10_bb5_c4_exe1_0_reg_10_NO_SHIFT_REG;
 logic rnode_9to10_bb5_c4_exe1_0_valid_out_reg_10_NO_SHIFT_REG;
 logic rnode_9to10_bb5_c4_exe1_0_stall_in_reg_10_NO_SHIFT_REG;
 logic rnode_9to10_bb5_c4_exe1_0_stall_out_reg_10_NO_SHIFT_REG;

acl_data_fifo rnode_9to10_bb5_c4_exe1_0_reg_10_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_9to10_bb5_c4_exe1_0_reg_10_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_9to10_bb5_c4_exe1_0_stall_in_reg_10_NO_SHIFT_REG),
	.valid_out(rnode_9to10_bb5_c4_exe1_0_valid_out_reg_10_NO_SHIFT_REG),
	.stall_out(rnode_9to10_bb5_c4_exe1_0_stall_out_reg_10_NO_SHIFT_REG),
	.data_in((local_bb5_c4_exe1 & 64'hFFFFFFFFFFFFFFFC)),
	.data_out(rnode_9to10_bb5_c4_exe1_0_reg_10_NO_SHIFT_REG)
);

defparam rnode_9to10_bb5_c4_exe1_0_reg_10_fifo.DEPTH = 2;
defparam rnode_9to10_bb5_c4_exe1_0_reg_10_fifo.DATA_WIDTH = 64;
defparam rnode_9to10_bb5_c4_exe1_0_reg_10_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_9to10_bb5_c4_exe1_0_reg_10_fifo.IMPL = "ll_reg";

assign rnode_9to10_bb5_c4_exe1_0_reg_10_inputs_ready_NO_SHIFT_REG = local_bb5_c4_exe1_valid_out;
assign local_bb5_c4_exe1_stall_in = rnode_9to10_bb5_c4_exe1_0_stall_out_reg_10_NO_SHIFT_REG;
assign rnode_9to10_bb5_c4_exe1_0_NO_SHIFT_REG = rnode_9to10_bb5_c4_exe1_0_reg_10_NO_SHIFT_REG;
assign rnode_9to10_bb5_c4_exe1_0_stall_in_reg_10_NO_SHIFT_REG = rnode_9to10_bb5_c4_exe1_0_stall_in_NO_SHIFT_REG;
assign rnode_9to10_bb5_c4_exe1_0_valid_out_NO_SHIFT_REG = rnode_9to10_bb5_c4_exe1_0_valid_out_reg_10_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb5_ld__u8_inputs_ready;
 reg local_bb5_ld__u8_valid_out_NO_SHIFT_REG;
wire local_bb5_ld__u8_stall_in;
wire local_bb5_ld__u8_output_regs_ready;
wire local_bb5_ld__u8_fu_stall_out;
wire local_bb5_ld__u8_fu_valid_out;
wire [31:0] local_bb5_ld__u8_lsu_dataout;
 reg [31:0] local_bb5_ld__u8_NO_SHIFT_REG;
wire local_bb5_ld__u8_causedstall;

lsu_top lsu_local_bb5_ld__u8 (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb5_ld__u8_fu_stall_out),
	.i_valid(local_bb5_ld__u8_inputs_ready),
	.i_address((rnode_9to10_bb5_c4_exe1_0_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFFFC)),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(rnode_9to10__phi_decision_xor119_or_0_NO_SHIFT_REG),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb5_ld__u8_output_regs_ready)),
	.o_valid(local_bb5_ld__u8_fu_valid_out),
	.o_readdata(local_bb5_ld__u8_lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb5_ld__u8_active),
	.avm_address(avm_local_bb5_ld__u8_address),
	.avm_read(avm_local_bb5_ld__u8_read),
	.avm_enable(avm_local_bb5_ld__u8_enable),
	.avm_readdata(avm_local_bb5_ld__u8_readdata),
	.avm_write(avm_local_bb5_ld__u8_write),
	.avm_writeack(avm_local_bb5_ld__u8_writeack),
	.avm_burstcount(avm_local_bb5_ld__u8_burstcount),
	.avm_writedata(avm_local_bb5_ld__u8_writedata),
	.avm_byteenable(avm_local_bb5_ld__u8_byteenable),
	.avm_waitrequest(avm_local_bb5_ld__u8_waitrequest),
	.avm_readdatavalid(avm_local_bb5_ld__u8_readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb5_ld__u8.AWIDTH = 32;
defparam lsu_local_bb5_ld__u8.WIDTH_BYTES = 4;
defparam lsu_local_bb5_ld__u8.MWIDTH_BYTES = 64;
defparam lsu_local_bb5_ld__u8.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb5_ld__u8.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb5_ld__u8.READ = 1;
defparam lsu_local_bb5_ld__u8.ATOMIC = 0;
defparam lsu_local_bb5_ld__u8.WIDTH = 32;
defparam lsu_local_bb5_ld__u8.MWIDTH = 512;
defparam lsu_local_bb5_ld__u8.ATOMIC_WIDTH = 3;
defparam lsu_local_bb5_ld__u8.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb5_ld__u8.KERNEL_SIDE_MEM_LATENCY = 160;
defparam lsu_local_bb5_ld__u8.MEMORY_SIDE_MEM_LATENCY = 71;
defparam lsu_local_bb5_ld__u8.USE_WRITE_ACK = 0;
defparam lsu_local_bb5_ld__u8.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb5_ld__u8.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb5_ld__u8.NUMBER_BANKS = 1;
defparam lsu_local_bb5_ld__u8.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb5_ld__u8.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb5_ld__u8.USEINPUTFIFO = 0;
defparam lsu_local_bb5_ld__u8.USECACHING = 0;
defparam lsu_local_bb5_ld__u8.USEOUTPUTFIFO = 1;
defparam lsu_local_bb5_ld__u8.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb5_ld__u8.ADDRSPACE = 1;
defparam lsu_local_bb5_ld__u8.STYLE = "BURST-COALESCED";

assign local_bb5_ld__u8_inputs_ready = (rnode_9to10_bb5_c4_exe1_0_valid_out_NO_SHIFT_REG & rnode_9to10__phi_decision_xor119_or_0_valid_out_0_NO_SHIFT_REG);
assign local_bb5_ld__u8_output_regs_ready = (&(~(local_bb5_ld__u8_valid_out_NO_SHIFT_REG) | ~(local_bb5_ld__u8_stall_in)));
assign rnode_9to10_bb5_c4_exe1_0_stall_in_NO_SHIFT_REG = (local_bb5_ld__u8_fu_stall_out | ~(local_bb5_ld__u8_inputs_ready));
assign rnode_9to10__phi_decision_xor119_or_0_stall_in_0_NO_SHIFT_REG = (local_bb5_ld__u8_fu_stall_out | ~(local_bb5_ld__u8_inputs_ready));
assign local_bb5_ld__u8_causedstall = (local_bb5_ld__u8_inputs_ready && (local_bb5_ld__u8_fu_stall_out && !(~(local_bb5_ld__u8_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_ld__u8_NO_SHIFT_REG <= 'x;
		local_bb5_ld__u8_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_ld__u8_output_regs_ready)
		begin
			local_bb5_ld__u8_NO_SHIFT_REG <= local_bb5_ld__u8_lsu_dataout;
			local_bb5_ld__u8_valid_out_NO_SHIFT_REG <= local_bb5_ld__u8_fu_valid_out;
		end
		else
		begin
			if (~(local_bb5_ld__u8_stall_in))
			begin
				local_bb5_ld__u8_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_170to170_bb5_ld__u8_valid_out;
wire rstag_170to170_bb5_ld__u8_stall_in;
wire rstag_170to170_bb5_ld__u8_inputs_ready;
wire rstag_170to170_bb5_ld__u8_stall_local;
 reg rstag_170to170_bb5_ld__u8_staging_valid_NO_SHIFT_REG;
wire rstag_170to170_bb5_ld__u8_combined_valid;
 reg [31:0] rstag_170to170_bb5_ld__u8_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_170to170_bb5_ld__u8;

assign rstag_170to170_bb5_ld__u8_inputs_ready = local_bb5_ld__u8_valid_out_NO_SHIFT_REG;
assign rstag_170to170_bb5_ld__u8 = (rstag_170to170_bb5_ld__u8_staging_valid_NO_SHIFT_REG ? rstag_170to170_bb5_ld__u8_staging_reg_NO_SHIFT_REG : local_bb5_ld__u8_NO_SHIFT_REG);
assign rstag_170to170_bb5_ld__u8_combined_valid = (rstag_170to170_bb5_ld__u8_staging_valid_NO_SHIFT_REG | rstag_170to170_bb5_ld__u8_inputs_ready);
assign rstag_170to170_bb5_ld__u8_valid_out = rstag_170to170_bb5_ld__u8_combined_valid;
assign rstag_170to170_bb5_ld__u8_stall_local = rstag_170to170_bb5_ld__u8_stall_in;
assign local_bb5_ld__u8_stall_in = (|rstag_170to170_bb5_ld__u8_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_170to170_bb5_ld__u8_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_170to170_bb5_ld__u8_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_170to170_bb5_ld__u8_stall_local)
		begin
			if (~(rstag_170to170_bb5_ld__u8_staging_valid_NO_SHIFT_REG))
			begin
				rstag_170to170_bb5_ld__u8_staging_valid_NO_SHIFT_REG <= rstag_170to170_bb5_ld__u8_inputs_ready;
			end
		end
		else
		begin
			rstag_170to170_bb5_ld__u8_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_170to170_bb5_ld__u8_staging_valid_NO_SHIFT_REG))
		begin
			rstag_170to170_bb5_ld__u8_staging_reg_NO_SHIFT_REG <= local_bb5_ld__u8_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_c2_eni1_stall_local;
wire [447:0] local_bb5_c2_eni1;

assign local_bb5_c2_eni1[31:0] = 32'bx;
assign local_bb5_c2_eni1[63:32] = rstag_170to170_bb5_ld__u8;
assign local_bb5_c2_eni1[447:64] = 384'bx;

// This section implements an unregistered operation.
// 
wire local_bb5_c2_eni2_stall_local;
wire [447:0] local_bb5_c2_eni2;

assign local_bb5_c2_eni2[63:0] = local_bb5_c2_eni1[63:0];
assign local_bb5_c2_eni2[95:64] = rstag_170to170_bb5_ld_;
assign local_bb5_c2_eni2[447:96] = local_bb5_c2_eni1[447:96];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_eni3_stall_local;
wire [447:0] local_bb5_c2_eni3;

assign local_bb5_c2_eni3[95:0] = local_bb5_c2_eni2[95:0];
assign local_bb5_c2_eni3[127:96] = rcnode_169to170_rc0_result_521_0_NO_SHIFT_REG[31:0];
assign local_bb5_c2_eni3[447:128] = local_bb5_c2_eni2[447:128];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_eni4_stall_local;
wire [447:0] local_bb5_c2_eni4;

assign local_bb5_c2_eni4[127:0] = local_bb5_c2_eni3[127:0];
assign local_bb5_c2_eni4[159:128] = rcnode_169to170_rc0_result_521_0_NO_SHIFT_REG[63:32];
assign local_bb5_c2_eni4[447:160] = local_bb5_c2_eni3[447:160];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_eni5_stall_local;
wire [447:0] local_bb5_c2_eni5;

assign local_bb5_c2_eni5[159:0] = local_bb5_c2_eni4[159:0];
assign local_bb5_c2_eni5[191:160] = rnode_169to170_ld__0_NO_SHIFT_REG;
assign local_bb5_c2_eni5[447:192] = local_bb5_c2_eni4[447:192];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_eni6_stall_local;
wire [447:0] local_bb5_c2_eni6;

assign local_bb5_c2_eni6[191:0] = local_bb5_c2_eni5[191:0];
assign local_bb5_c2_eni6[223:192] = rcnode_169to170_rc0_result_521_0_NO_SHIFT_REG[95:64];
assign local_bb5_c2_eni6[447:224] = local_bb5_c2_eni5[447:224];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_eni7_stall_local;
wire [447:0] local_bb5_c2_eni7;

assign local_bb5_c2_eni7[223:0] = local_bb5_c2_eni6[223:0];
assign local_bb5_c2_eni7[224] = rnode_169to170_cmp1824_0_NO_SHIFT_REG;
assign local_bb5_c2_eni7[447:225] = local_bb5_c2_eni6[447:225];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_eni8_stall_local;
wire [447:0] local_bb5_c2_eni8;

assign local_bb5_c2_eni8[255:0] = local_bb5_c2_eni7[255:0];
assign local_bb5_c2_eni8[287:256] = rnode_169to170_memcoalesce_param_extrValue_4_0_NO_SHIFT_REG;
assign local_bb5_c2_eni8[447:288] = local_bb5_c2_eni7[447:288];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_eni9_stall_local;
wire [447:0] local_bb5_c2_eni9;

assign local_bb5_c2_eni9[287:0] = local_bb5_c2_eni8[287:0];
assign local_bb5_c2_eni9[319:288] = rcnode_169to170_rc0_result_521_0_NO_SHIFT_REG[127:96];
assign local_bb5_c2_eni9[447:320] = local_bb5_c2_eni8[447:320];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_eni10_stall_local;
wire [447:0] local_bb5_c2_eni10;

assign local_bb5_c2_eni10[319:0] = local_bb5_c2_eni9[319:0];
assign local_bb5_c2_eni10[351:320] = rcnode_169to170_rc0_result_521_0_NO_SHIFT_REG[159:128];
assign local_bb5_c2_eni10[447:352] = local_bb5_c2_eni9[447:352];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_eni11_stall_local;
wire [447:0] local_bb5_c2_eni11;

assign local_bb5_c2_eni11[351:0] = local_bb5_c2_eni10[351:0];
assign local_bb5_c2_eni11[383:352] = rcnode_169to170_rc0_result_521_0_NO_SHIFT_REG[191:160];
assign local_bb5_c2_eni11[447:384] = local_bb5_c2_eni10[447:384];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_eni12_stall_local;
wire [447:0] local_bb5_c2_eni12;

assign local_bb5_c2_eni12[383:0] = local_bb5_c2_eni11[383:0];
assign local_bb5_c2_eni12[415:384] = rnode_169to170_var__u6_0_NO_SHIFT_REG;
assign local_bb5_c2_eni12[447:416] = local_bb5_c2_eni11[447:416];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_eni13_stall_local;
wire [447:0] local_bb5_c2_eni13;

assign local_bb5_c2_eni13[415:0] = local_bb5_c2_eni12[415:0];
assign local_bb5_c2_eni13[416] = rnode_169to170_cmp1430_0_NO_SHIFT_REG;
assign local_bb5_c2_eni13[447:417] = local_bb5_c2_eni12[447:417];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_eni14_valid_out;
wire local_bb5_c2_eni14_stall_in;
wire local_bb5_c2_eni14_inputs_ready;
wire local_bb5_c2_eni14_stall_local;
wire [447:0] local_bb5_c2_eni14;

assign local_bb5_c2_eni14_inputs_ready = (rnode_169to170_cmp1824_0_valid_out_0_NO_SHIFT_REG & rnode_169to170_memcoalesce_param_extrValue_4_0_valid_out_0_NO_SHIFT_REG & rcnode_169to170_rc0_result_521_0_valid_out_3_NO_SHIFT_REG & rcnode_169to170_rc0_result_521_0_valid_out_2_NO_SHIFT_REG & rcnode_169to170_rc0_result_521_0_valid_out_4_NO_SHIFT_REG & rcnode_169to170_rc0_result_521_0_valid_out_5_NO_SHIFT_REG & rnode_169to170_var__u6_0_valid_out_0_NO_SHIFT_REG & rnode_169to170_cmp1430_0_valid_out_0_NO_SHIFT_REG & rnode_169to170_var__u5_0_valid_out_0_NO_SHIFT_REG & rcnode_169to170_rc0_result_521_0_valid_out_0_NO_SHIFT_REG & rcnode_169to170_rc0_result_521_0_valid_out_1_NO_SHIFT_REG & rnode_169to170_ld__0_valid_out_0_NO_SHIFT_REG & rstag_170to170_bb5_ld__u8_valid_out & rstag_170to170_bb5_ld__valid_out);
assign local_bb5_c2_eni14[423:0] = local_bb5_c2_eni13[423:0];
assign local_bb5_c2_eni14[424] = rnode_169to170_var__u5_0_NO_SHIFT_REG;
assign local_bb5_c2_eni14[447:425] = local_bb5_c2_eni13[447:425];
assign local_bb5_c2_eni14_valid_out = local_bb5_c2_eni14_inputs_ready;
assign local_bb5_c2_eni14_stall_local = local_bb5_c2_eni14_stall_in;
assign rnode_169to170_cmp1824_0_stall_in_0_NO_SHIFT_REG = (local_bb5_c2_eni14_stall_local | ~(local_bb5_c2_eni14_inputs_ready));
assign rnode_169to170_memcoalesce_param_extrValue_4_0_stall_in_0_NO_SHIFT_REG = (local_bb5_c2_eni14_stall_local | ~(local_bb5_c2_eni14_inputs_ready));
assign rcnode_169to170_rc0_result_521_0_stall_in_3_NO_SHIFT_REG = (local_bb5_c2_eni14_stall_local | ~(local_bb5_c2_eni14_inputs_ready));
assign rcnode_169to170_rc0_result_521_0_stall_in_2_NO_SHIFT_REG = (local_bb5_c2_eni14_stall_local | ~(local_bb5_c2_eni14_inputs_ready));
assign rcnode_169to170_rc0_result_521_0_stall_in_4_NO_SHIFT_REG = (local_bb5_c2_eni14_stall_local | ~(local_bb5_c2_eni14_inputs_ready));
assign rcnode_169to170_rc0_result_521_0_stall_in_5_NO_SHIFT_REG = (local_bb5_c2_eni14_stall_local | ~(local_bb5_c2_eni14_inputs_ready));
assign rnode_169to170_var__u6_0_stall_in_0_NO_SHIFT_REG = (local_bb5_c2_eni14_stall_local | ~(local_bb5_c2_eni14_inputs_ready));
assign rnode_169to170_cmp1430_0_stall_in_0_NO_SHIFT_REG = (local_bb5_c2_eni14_stall_local | ~(local_bb5_c2_eni14_inputs_ready));
assign rnode_169to170_var__u5_0_stall_in_0_NO_SHIFT_REG = (local_bb5_c2_eni14_stall_local | ~(local_bb5_c2_eni14_inputs_ready));
assign rcnode_169to170_rc0_result_521_0_stall_in_0_NO_SHIFT_REG = (local_bb5_c2_eni14_stall_local | ~(local_bb5_c2_eni14_inputs_ready));
assign rcnode_169to170_rc0_result_521_0_stall_in_1_NO_SHIFT_REG = (local_bb5_c2_eni14_stall_local | ~(local_bb5_c2_eni14_inputs_ready));
assign rnode_169to170_ld__0_stall_in_0_NO_SHIFT_REG = (local_bb5_c2_eni14_stall_local | ~(local_bb5_c2_eni14_inputs_ready));
assign rstag_170to170_bb5_ld__u8_stall_in = (local_bb5_c2_eni14_stall_local | ~(local_bb5_c2_eni14_inputs_ready));
assign rstag_170to170_bb5_ld__stall_in = (local_bb5_c2_eni14_stall_local | ~(local_bb5_c2_eni14_inputs_ready));

// This section implements a registered operation.
// 
wire local_bb5_c2_enter_c2_eni14_inputs_ready;
 reg local_bb5_c2_enter_c2_eni14_valid_out_0_NO_SHIFT_REG;
wire local_bb5_c2_enter_c2_eni14_stall_in_0;
 reg local_bb5_c2_enter_c2_eni14_valid_out_1_NO_SHIFT_REG;
wire local_bb5_c2_enter_c2_eni14_stall_in_1;
 reg local_bb5_c2_enter_c2_eni14_valid_out_2_NO_SHIFT_REG;
wire local_bb5_c2_enter_c2_eni14_stall_in_2;
 reg local_bb5_c2_enter_c2_eni14_valid_out_3_NO_SHIFT_REG;
wire local_bb5_c2_enter_c2_eni14_stall_in_3;
 reg local_bb5_c2_enter_c2_eni14_valid_out_4_NO_SHIFT_REG;
wire local_bb5_c2_enter_c2_eni14_stall_in_4;
 reg local_bb5_c2_enter_c2_eni14_valid_out_5_NO_SHIFT_REG;
wire local_bb5_c2_enter_c2_eni14_stall_in_5;
 reg local_bb5_c2_enter_c2_eni14_valid_out_6_NO_SHIFT_REG;
wire local_bb5_c2_enter_c2_eni14_stall_in_6;
 reg local_bb5_c2_enter_c2_eni14_valid_out_7_NO_SHIFT_REG;
wire local_bb5_c2_enter_c2_eni14_stall_in_7;
 reg local_bb5_c2_enter_c2_eni14_valid_out_8_NO_SHIFT_REG;
wire local_bb5_c2_enter_c2_eni14_stall_in_8;
 reg local_bb5_c2_enter_c2_eni14_valid_out_9_NO_SHIFT_REG;
wire local_bb5_c2_enter_c2_eni14_stall_in_9;
 reg local_bb5_c2_enter_c2_eni14_valid_out_10_NO_SHIFT_REG;
wire local_bb5_c2_enter_c2_eni14_stall_in_10;
 reg local_bb5_c2_enter_c2_eni14_valid_out_11_NO_SHIFT_REG;
wire local_bb5_c2_enter_c2_eni14_stall_in_11;
 reg local_bb5_c2_enter_c2_eni14_valid_out_12_NO_SHIFT_REG;
wire local_bb5_c2_enter_c2_eni14_stall_in_12;
 reg local_bb5_c2_enter_c2_eni14_valid_out_13_NO_SHIFT_REG;
wire local_bb5_c2_enter_c2_eni14_stall_in_13;
 reg local_bb5_c2_enter_c2_eni14_valid_out_14_NO_SHIFT_REG;
wire local_bb5_c2_enter_c2_eni14_stall_in_14;
wire local_bb5_c2_enter_c2_eni14_output_regs_ready;
 reg [447:0] local_bb5_c2_enter_c2_eni14_NO_SHIFT_REG;
wire local_bb5_c2_enter_c2_eni14_input_accepted;
 reg local_bb5_c2_enter_c2_eni14_valid_bit_NO_SHIFT_REG;
wire local_bb5_c2_exit_c2_exi9_entry_stall;
wire local_bb5_c2_exit_c2_exi9_output_regs_ready;
wire local_bb5_c2_exit_c2_exi9_valid_in;
wire local_bb5_c2_exit_c2_exi9_phases;
wire local_bb5_c2_enter_c2_eni14_inc_pipelined_thread;
wire local_bb5_c2_enter_c2_eni14_dec_pipelined_thread;
wire local_bb5_c2_enter_c2_eni14_causedstall;

assign local_bb5_c2_enter_c2_eni14_inputs_ready = local_bb5_c2_eni14_valid_out;
assign local_bb5_c2_enter_c2_eni14_output_regs_ready = 1'b1;
assign local_bb5_c2_enter_c2_eni14_input_accepted = (local_bb5_c2_enter_c2_eni14_inputs_ready && !(local_bb5_c2_exit_c2_exi9_entry_stall));
assign local_bb5_c2_enter_c2_eni14_inc_pipelined_thread = 1'b1;
assign local_bb5_c2_enter_c2_eni14_dec_pipelined_thread = ~(1'b0);
assign local_bb5_c2_eni14_stall_in = ((~(local_bb5_c2_enter_c2_eni14_inputs_ready) | local_bb5_c2_exit_c2_exi9_entry_stall) | ~(1'b1));
assign local_bb5_c2_enter_c2_eni14_causedstall = (1'b1 && ((~(local_bb5_c2_enter_c2_eni14_inputs_ready) | local_bb5_c2_exit_c2_exi9_entry_stall) && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_c2_enter_c2_eni14_valid_bit_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_c2_enter_c2_eni14_valid_bit_NO_SHIFT_REG <= local_bb5_c2_enter_c2_eni14_input_accepted;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_c2_enter_c2_eni14_NO_SHIFT_REG <= 'x;
		local_bb5_c2_enter_c2_eni14_valid_out_0_NO_SHIFT_REG <= 1'b0;
		local_bb5_c2_enter_c2_eni14_valid_out_2_NO_SHIFT_REG <= 1'b0;
		local_bb5_c2_enter_c2_eni14_valid_out_3_NO_SHIFT_REG <= 1'b0;
		local_bb5_c2_enter_c2_eni14_valid_out_4_NO_SHIFT_REG <= 1'b0;
		local_bb5_c2_enter_c2_eni14_valid_out_5_NO_SHIFT_REG <= 1'b0;
		local_bb5_c2_enter_c2_eni14_valid_out_6_NO_SHIFT_REG <= 1'b0;
		local_bb5_c2_enter_c2_eni14_valid_out_7_NO_SHIFT_REG <= 1'b0;
		local_bb5_c2_enter_c2_eni14_valid_out_8_NO_SHIFT_REG <= 1'b0;
		local_bb5_c2_enter_c2_eni14_valid_out_9_NO_SHIFT_REG <= 1'b0;
		local_bb5_c2_enter_c2_eni14_valid_out_10_NO_SHIFT_REG <= 1'b0;
		local_bb5_c2_enter_c2_eni14_valid_out_11_NO_SHIFT_REG <= 1'b0;
		local_bb5_c2_enter_c2_eni14_valid_out_12_NO_SHIFT_REG <= 1'b0;
		local_bb5_c2_enter_c2_eni14_valid_out_13_NO_SHIFT_REG <= 1'b0;
		local_bb5_c2_enter_c2_eni14_valid_out_14_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_c2_enter_c2_eni14_output_regs_ready)
		begin
			local_bb5_c2_enter_c2_eni14_NO_SHIFT_REG <= local_bb5_c2_eni14;
			local_bb5_c2_enter_c2_eni14_valid_out_0_NO_SHIFT_REG <= 1'b1;
			local_bb5_c2_enter_c2_eni14_valid_out_2_NO_SHIFT_REG <= 1'b1;
			local_bb5_c2_enter_c2_eni14_valid_out_3_NO_SHIFT_REG <= 1'b1;
			local_bb5_c2_enter_c2_eni14_valid_out_4_NO_SHIFT_REG <= 1'b1;
			local_bb5_c2_enter_c2_eni14_valid_out_5_NO_SHIFT_REG <= 1'b1;
			local_bb5_c2_enter_c2_eni14_valid_out_6_NO_SHIFT_REG <= 1'b1;
			local_bb5_c2_enter_c2_eni14_valid_out_7_NO_SHIFT_REG <= 1'b1;
			local_bb5_c2_enter_c2_eni14_valid_out_8_NO_SHIFT_REG <= 1'b1;
			local_bb5_c2_enter_c2_eni14_valid_out_9_NO_SHIFT_REG <= 1'b1;
			local_bb5_c2_enter_c2_eni14_valid_out_10_NO_SHIFT_REG <= 1'b1;
			local_bb5_c2_enter_c2_eni14_valid_out_11_NO_SHIFT_REG <= 1'b1;
			local_bb5_c2_enter_c2_eni14_valid_out_12_NO_SHIFT_REG <= 1'b1;
			local_bb5_c2_enter_c2_eni14_valid_out_13_NO_SHIFT_REG <= 1'b1;
			local_bb5_c2_enter_c2_eni14_valid_out_14_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb5_c2_enter_c2_eni14_stall_in_0))
			begin
				local_bb5_c2_enter_c2_eni14_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_c2_enter_c2_eni14_stall_in_2))
			begin
				local_bb5_c2_enter_c2_eni14_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_c2_enter_c2_eni14_stall_in_3))
			begin
				local_bb5_c2_enter_c2_eni14_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_c2_enter_c2_eni14_stall_in_4))
			begin
				local_bb5_c2_enter_c2_eni14_valid_out_4_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_c2_enter_c2_eni14_stall_in_5))
			begin
				local_bb5_c2_enter_c2_eni14_valid_out_5_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_c2_enter_c2_eni14_stall_in_6))
			begin
				local_bb5_c2_enter_c2_eni14_valid_out_6_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_c2_enter_c2_eni14_stall_in_7))
			begin
				local_bb5_c2_enter_c2_eni14_valid_out_7_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_c2_enter_c2_eni14_stall_in_8))
			begin
				local_bb5_c2_enter_c2_eni14_valid_out_8_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_c2_enter_c2_eni14_stall_in_9))
			begin
				local_bb5_c2_enter_c2_eni14_valid_out_9_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_c2_enter_c2_eni14_stall_in_10))
			begin
				local_bb5_c2_enter_c2_eni14_valid_out_10_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_c2_enter_c2_eni14_stall_in_11))
			begin
				local_bb5_c2_enter_c2_eni14_valid_out_11_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_c2_enter_c2_eni14_stall_in_12))
			begin
				local_bb5_c2_enter_c2_eni14_valid_out_12_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_c2_enter_c2_eni14_stall_in_13))
			begin
				local_bb5_c2_enter_c2_eni14_valid_out_13_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_c2_enter_c2_eni14_stall_in_14))
			begin
				local_bb5_c2_enter_c2_eni14_valid_out_14_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(*)
begin
	local_bb5_c2_enter_c2_eni14_valid_out_1_NO_SHIFT_REG = local_bb5_c2_enter_c2_eni14_valid_out_0_NO_SHIFT_REG;
end


// This section implements an unregistered operation.
// 
wire local_bb5_c2_ene1_stall_local;
wire [31:0] local_bb5_c2_ene1;

assign local_bb5_c2_ene1[31:0] = local_bb5_c2_enter_c2_eni14_NO_SHIFT_REG[63:32];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_ene2_stall_local;
wire [31:0] local_bb5_c2_ene2;

assign local_bb5_c2_ene2[31:0] = local_bb5_c2_enter_c2_eni14_NO_SHIFT_REG[95:64];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_ene3_valid_out;
wire local_bb5_c2_ene3_stall_in;
wire local_bb5_c2_ene3_inputs_ready;
wire local_bb5_c2_ene3_stall_local;
wire [31:0] local_bb5_c2_ene3;

assign local_bb5_c2_ene3_inputs_ready = local_bb5_c2_enter_c2_eni14_valid_out_2_NO_SHIFT_REG;
assign local_bb5_c2_ene3[31:0] = local_bb5_c2_enter_c2_eni14_NO_SHIFT_REG[127:96];
assign local_bb5_c2_ene3_valid_out = 1'b1;
assign local_bb5_c2_enter_c2_eni14_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c2_ene4_stall_local;
wire [31:0] local_bb5_c2_ene4;

assign local_bb5_c2_ene4[31:0] = local_bb5_c2_enter_c2_eni14_NO_SHIFT_REG[159:128];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_ene5_valid_out;
wire local_bb5_c2_ene5_stall_in;
wire local_bb5_c2_ene5_inputs_ready;
wire local_bb5_c2_ene5_stall_local;
wire [31:0] local_bb5_c2_ene5;

assign local_bb5_c2_ene5_inputs_ready = local_bb5_c2_enter_c2_eni14_valid_out_4_NO_SHIFT_REG;
assign local_bb5_c2_ene5[31:0] = local_bb5_c2_enter_c2_eni14_NO_SHIFT_REG[191:160];
assign local_bb5_c2_ene5_valid_out = 1'b1;
assign local_bb5_c2_enter_c2_eni14_stall_in_4 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c2_ene6_stall_local;
wire [31:0] local_bb5_c2_ene6;

assign local_bb5_c2_ene6[31:0] = local_bb5_c2_enter_c2_eni14_NO_SHIFT_REG[223:192];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_ene7_valid_out;
wire local_bb5_c2_ene7_stall_in;
wire local_bb5_c2_ene7_inputs_ready;
wire local_bb5_c2_ene7_stall_local;
wire local_bb5_c2_ene7;

assign local_bb5_c2_ene7_inputs_ready = local_bb5_c2_enter_c2_eni14_valid_out_6_NO_SHIFT_REG;
assign local_bb5_c2_ene7 = local_bb5_c2_enter_c2_eni14_NO_SHIFT_REG[224];
assign local_bb5_c2_ene7_valid_out = 1'b1;
assign local_bb5_c2_enter_c2_eni14_stall_in_6 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c2_ene8_valid_out;
wire local_bb5_c2_ene8_stall_in;
wire local_bb5_c2_ene8_inputs_ready;
wire local_bb5_c2_ene8_stall_local;
wire [31:0] local_bb5_c2_ene8;

assign local_bb5_c2_ene8_inputs_ready = local_bb5_c2_enter_c2_eni14_valid_out_7_NO_SHIFT_REG;
assign local_bb5_c2_ene8[31:0] = local_bb5_c2_enter_c2_eni14_NO_SHIFT_REG[287:256];
assign local_bb5_c2_ene8_valid_out = 1'b1;
assign local_bb5_c2_enter_c2_eni14_stall_in_7 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c2_ene9_valid_out;
wire local_bb5_c2_ene9_stall_in;
wire local_bb5_c2_ene9_inputs_ready;
wire local_bb5_c2_ene9_stall_local;
wire [31:0] local_bb5_c2_ene9;

assign local_bb5_c2_ene9_inputs_ready = local_bb5_c2_enter_c2_eni14_valid_out_8_NO_SHIFT_REG;
assign local_bb5_c2_ene9[31:0] = local_bb5_c2_enter_c2_eni14_NO_SHIFT_REG[319:288];
assign local_bb5_c2_ene9_valid_out = 1'b1;
assign local_bb5_c2_enter_c2_eni14_stall_in_8 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c2_ene10_valid_out;
wire local_bb5_c2_ene10_stall_in;
wire local_bb5_c2_ene10_inputs_ready;
wire local_bb5_c2_ene10_stall_local;
wire [31:0] local_bb5_c2_ene10;

assign local_bb5_c2_ene10_inputs_ready = local_bb5_c2_enter_c2_eni14_valid_out_9_NO_SHIFT_REG;
assign local_bb5_c2_ene10[31:0] = local_bb5_c2_enter_c2_eni14_NO_SHIFT_REG[351:320];
assign local_bb5_c2_ene10_valid_out = 1'b1;
assign local_bb5_c2_enter_c2_eni14_stall_in_9 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c2_ene11_stall_local;
wire [31:0] local_bb5_c2_ene11;

assign local_bb5_c2_ene11[31:0] = local_bb5_c2_enter_c2_eni14_NO_SHIFT_REG[383:352];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_ene12_valid_out;
wire local_bb5_c2_ene12_stall_in;
wire local_bb5_c2_ene12_inputs_ready;
wire local_bb5_c2_ene12_stall_local;
wire [31:0] local_bb5_c2_ene12;

assign local_bb5_c2_ene12_inputs_ready = local_bb5_c2_enter_c2_eni14_valid_out_11_NO_SHIFT_REG;
assign local_bb5_c2_ene12[31:0] = local_bb5_c2_enter_c2_eni14_NO_SHIFT_REG[415:384];
assign local_bb5_c2_ene12_valid_out = 1'b1;
assign local_bb5_c2_enter_c2_eni14_stall_in_11 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c2_ene13_valid_out;
wire local_bb5_c2_ene13_stall_in;
wire local_bb5_c2_ene13_inputs_ready;
wire local_bb5_c2_ene13_stall_local;
wire local_bb5_c2_ene13;

assign local_bb5_c2_ene13_inputs_ready = local_bb5_c2_enter_c2_eni14_valid_out_12_NO_SHIFT_REG;
assign local_bb5_c2_ene13 = local_bb5_c2_enter_c2_eni14_NO_SHIFT_REG[416];
assign local_bb5_c2_ene13_valid_out = 1'b1;
assign local_bb5_c2_enter_c2_eni14_stall_in_12 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_c2_ene14_valid_out;
wire local_bb5_c2_ene14_stall_in;
wire local_bb5_c2_ene14_inputs_ready;
wire local_bb5_c2_ene14_stall_local;
wire local_bb5_c2_ene14;

assign local_bb5_c2_ene14_inputs_ready = local_bb5_c2_enter_c2_eni14_valid_out_13_NO_SHIFT_REG;
assign local_bb5_c2_ene14 = local_bb5_c2_enter_c2_eni14_NO_SHIFT_REG[424];
assign local_bb5_c2_ene14_valid_out = 1'b1;
assign local_bb5_c2_enter_c2_eni14_stall_in_13 = 1'b0;

// This section implements an unregistered operation.
// 
wire SFC_9_VALID_171_171_0_valid_out;
wire SFC_9_VALID_171_171_0_stall_in;
wire SFC_9_VALID_171_171_0_inputs_ready;
wire SFC_9_VALID_171_171_0_stall_local;
wire SFC_9_VALID_171_171_0;

assign SFC_9_VALID_171_171_0_inputs_ready = local_bb5_c2_enter_c2_eni14_valid_out_14_NO_SHIFT_REG;
assign SFC_9_VALID_171_171_0 = local_bb5_c2_enter_c2_eni14_valid_bit_NO_SHIFT_REG;
assign SFC_9_VALID_171_171_0_valid_out = 1'b1;
assign local_bb5_c2_enter_c2_eni14_stall_in_14 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__stall_local;
wire [31:0] local_bb5_var_;

assign local_bb5_var_ = local_bb5_c2_ene1;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u9_stall_local;
wire [31:0] local_bb5_var__u9;

assign local_bb5_var__u9 = local_bb5_c2_ene2;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_171to172_bb5_c2_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_171to172_bb5_c2_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_bb5_c2_ene3_0_NO_SHIFT_REG;
 logic rnode_171to172_bb5_c2_ene3_0_reg_172_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_bb5_c2_ene3_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_c2_ene3_0_valid_out_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_c2_ene3_0_stall_in_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_c2_ene3_0_stall_out_reg_172_NO_SHIFT_REG;

acl_data_fifo rnode_171to172_bb5_c2_ene3_0_reg_172_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_171to172_bb5_c2_ene3_0_reg_172_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_171to172_bb5_c2_ene3_0_stall_in_reg_172_NO_SHIFT_REG),
	.valid_out(rnode_171to172_bb5_c2_ene3_0_valid_out_reg_172_NO_SHIFT_REG),
	.stall_out(rnode_171to172_bb5_c2_ene3_0_stall_out_reg_172_NO_SHIFT_REG),
	.data_in(local_bb5_c2_ene3),
	.data_out(rnode_171to172_bb5_c2_ene3_0_reg_172_NO_SHIFT_REG)
);

defparam rnode_171to172_bb5_c2_ene3_0_reg_172_fifo.DEPTH = 1;
defparam rnode_171to172_bb5_c2_ene3_0_reg_172_fifo.DATA_WIDTH = 32;
defparam rnode_171to172_bb5_c2_ene3_0_reg_172_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_171to172_bb5_c2_ene3_0_reg_172_fifo.IMPL = "shift_reg";

assign rnode_171to172_bb5_c2_ene3_0_reg_172_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_c2_ene3_stall_in = 1'b0;
assign rnode_171to172_bb5_c2_ene3_0_NO_SHIFT_REG = rnode_171to172_bb5_c2_ene3_0_reg_172_NO_SHIFT_REG;
assign rnode_171to172_bb5_c2_ene3_0_stall_in_reg_172_NO_SHIFT_REG = 1'b0;
assign rnode_171to172_bb5_c2_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_inc_valid_out;
wire local_bb5_inc_stall_in;
wire local_bb5_inc_inputs_ready;
wire local_bb5_inc_stall_local;
wire [31:0] local_bb5_inc;

assign local_bb5_inc_inputs_ready = local_bb5_c2_enter_c2_eni14_valid_out_3_NO_SHIFT_REG;
assign local_bb5_inc = (local_bb5_c2_ene4 + 32'h1);
assign local_bb5_inc_valid_out = 1'b1;
assign local_bb5_c2_enter_c2_eni14_stall_in_3 = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_171to172_bb5_c2_ene5_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_171to172_bb5_c2_ene5_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_bb5_c2_ene5_0_NO_SHIFT_REG;
 logic rnode_171to172_bb5_c2_ene5_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_171to172_bb5_c2_ene5_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_bb5_c2_ene5_1_NO_SHIFT_REG;
 logic rnode_171to172_bb5_c2_ene5_0_reg_172_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_bb5_c2_ene5_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_c2_ene5_0_valid_out_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_c2_ene5_0_stall_in_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_c2_ene5_0_stall_out_reg_172_NO_SHIFT_REG;

acl_data_fifo rnode_171to172_bb5_c2_ene5_0_reg_172_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_171to172_bb5_c2_ene5_0_reg_172_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_171to172_bb5_c2_ene5_0_stall_in_0_reg_172_NO_SHIFT_REG),
	.valid_out(rnode_171to172_bb5_c2_ene5_0_valid_out_0_reg_172_NO_SHIFT_REG),
	.stall_out(rnode_171to172_bb5_c2_ene5_0_stall_out_reg_172_NO_SHIFT_REG),
	.data_in(local_bb5_c2_ene5),
	.data_out(rnode_171to172_bb5_c2_ene5_0_reg_172_NO_SHIFT_REG)
);

defparam rnode_171to172_bb5_c2_ene5_0_reg_172_fifo.DEPTH = 1;
defparam rnode_171to172_bb5_c2_ene5_0_reg_172_fifo.DATA_WIDTH = 32;
defparam rnode_171to172_bb5_c2_ene5_0_reg_172_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_171to172_bb5_c2_ene5_0_reg_172_fifo.IMPL = "shift_reg";

assign rnode_171to172_bb5_c2_ene5_0_reg_172_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_c2_ene5_stall_in = 1'b0;
assign rnode_171to172_bb5_c2_ene5_0_stall_in_0_reg_172_NO_SHIFT_REG = 1'b0;
assign rnode_171to172_bb5_c2_ene5_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_171to172_bb5_c2_ene5_0_NO_SHIFT_REG = rnode_171to172_bb5_c2_ene5_0_reg_172_NO_SHIFT_REG;
assign rnode_171to172_bb5_c2_ene5_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_171to172_bb5_c2_ene5_1_NO_SHIFT_REG = rnode_171to172_bb5_c2_ene5_0_reg_172_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_c2_ene6_valid_out_1;
wire local_bb5_c2_ene6_stall_in_1;
wire local_bb5_inc61_valid_out;
wire local_bb5_inc61_stall_in;
wire local_bb5_inc61_inputs_ready;
wire local_bb5_inc61_stall_local;
wire [31:0] local_bb5_inc61;

assign local_bb5_inc61_inputs_ready = local_bb5_c2_enter_c2_eni14_valid_out_5_NO_SHIFT_REG;
assign local_bb5_inc61 = (local_bb5_c2_ene6 + 32'h1);
assign local_bb5_c2_ene6_valid_out_1 = 1'b1;
assign local_bb5_inc61_valid_out = 1'b1;
assign local_bb5_c2_enter_c2_eni14_stall_in_5 = 1'b0;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_171to173_bb5_c2_ene7_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene7_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene7_0_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene7_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene7_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene7_1_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene7_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene7_0_stall_in_2_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene7_2_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene7_0_reg_173_inputs_ready_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene7_0_reg_173_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene7_0_valid_out_0_reg_173_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene7_0_stall_in_0_reg_173_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene7_0_stall_out_reg_173_NO_SHIFT_REG;

acl_data_fifo rnode_171to173_bb5_c2_ene7_0_reg_173_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_171to173_bb5_c2_ene7_0_reg_173_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_171to173_bb5_c2_ene7_0_stall_in_0_reg_173_NO_SHIFT_REG),
	.valid_out(rnode_171to173_bb5_c2_ene7_0_valid_out_0_reg_173_NO_SHIFT_REG),
	.stall_out(rnode_171to173_bb5_c2_ene7_0_stall_out_reg_173_NO_SHIFT_REG),
	.data_in(local_bb5_c2_ene7),
	.data_out(rnode_171to173_bb5_c2_ene7_0_reg_173_NO_SHIFT_REG)
);

defparam rnode_171to173_bb5_c2_ene7_0_reg_173_fifo.DEPTH = 2;
defparam rnode_171to173_bb5_c2_ene7_0_reg_173_fifo.DATA_WIDTH = 1;
defparam rnode_171to173_bb5_c2_ene7_0_reg_173_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_171to173_bb5_c2_ene7_0_reg_173_fifo.IMPL = "shift_reg";

assign rnode_171to173_bb5_c2_ene7_0_reg_173_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_c2_ene7_stall_in = 1'b0;
assign rnode_171to173_bb5_c2_ene7_0_stall_in_0_reg_173_NO_SHIFT_REG = 1'b0;
assign rnode_171to173_bb5_c2_ene7_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_171to173_bb5_c2_ene7_0_NO_SHIFT_REG = rnode_171to173_bb5_c2_ene7_0_reg_173_NO_SHIFT_REG;
assign rnode_171to173_bb5_c2_ene7_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_171to173_bb5_c2_ene7_1_NO_SHIFT_REG = rnode_171to173_bb5_c2_ene7_0_reg_173_NO_SHIFT_REG;
assign rnode_171to173_bb5_c2_ene7_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_171to173_bb5_c2_ene7_2_NO_SHIFT_REG = rnode_171to173_bb5_c2_ene7_0_reg_173_NO_SHIFT_REG;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_171to173_bb5_c2_ene8_0_valid_out_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene8_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_171to173_bb5_c2_ene8_0_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene8_0_reg_173_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_171to173_bb5_c2_ene8_0_reg_173_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene8_0_valid_out_reg_173_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene8_0_stall_in_reg_173_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene8_0_stall_out_reg_173_NO_SHIFT_REG;

acl_data_fifo rnode_171to173_bb5_c2_ene8_0_reg_173_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_171to173_bb5_c2_ene8_0_reg_173_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_171to173_bb5_c2_ene8_0_stall_in_reg_173_NO_SHIFT_REG),
	.valid_out(rnode_171to173_bb5_c2_ene8_0_valid_out_reg_173_NO_SHIFT_REG),
	.stall_out(rnode_171to173_bb5_c2_ene8_0_stall_out_reg_173_NO_SHIFT_REG),
	.data_in(local_bb5_c2_ene8),
	.data_out(rnode_171to173_bb5_c2_ene8_0_reg_173_NO_SHIFT_REG)
);

defparam rnode_171to173_bb5_c2_ene8_0_reg_173_fifo.DEPTH = 2;
defparam rnode_171to173_bb5_c2_ene8_0_reg_173_fifo.DATA_WIDTH = 32;
defparam rnode_171to173_bb5_c2_ene8_0_reg_173_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_171to173_bb5_c2_ene8_0_reg_173_fifo.IMPL = "shift_reg";

assign rnode_171to173_bb5_c2_ene8_0_reg_173_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_c2_ene8_stall_in = 1'b0;
assign rnode_171to173_bb5_c2_ene8_0_NO_SHIFT_REG = rnode_171to173_bb5_c2_ene8_0_reg_173_NO_SHIFT_REG;
assign rnode_171to173_bb5_c2_ene8_0_stall_in_reg_173_NO_SHIFT_REG = 1'b0;
assign rnode_171to173_bb5_c2_ene8_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_171to173_bb5_c2_ene9_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene9_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_171to173_bb5_c2_ene9_0_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene9_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene9_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_171to173_bb5_c2_ene9_1_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene9_0_reg_173_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_171to173_bb5_c2_ene9_0_reg_173_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene9_0_valid_out_0_reg_173_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene9_0_stall_in_0_reg_173_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene9_0_stall_out_reg_173_NO_SHIFT_REG;

acl_data_fifo rnode_171to173_bb5_c2_ene9_0_reg_173_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_171to173_bb5_c2_ene9_0_reg_173_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_171to173_bb5_c2_ene9_0_stall_in_0_reg_173_NO_SHIFT_REG),
	.valid_out(rnode_171to173_bb5_c2_ene9_0_valid_out_0_reg_173_NO_SHIFT_REG),
	.stall_out(rnode_171to173_bb5_c2_ene9_0_stall_out_reg_173_NO_SHIFT_REG),
	.data_in(local_bb5_c2_ene9),
	.data_out(rnode_171to173_bb5_c2_ene9_0_reg_173_NO_SHIFT_REG)
);

defparam rnode_171to173_bb5_c2_ene9_0_reg_173_fifo.DEPTH = 2;
defparam rnode_171to173_bb5_c2_ene9_0_reg_173_fifo.DATA_WIDTH = 32;
defparam rnode_171to173_bb5_c2_ene9_0_reg_173_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_171to173_bb5_c2_ene9_0_reg_173_fifo.IMPL = "shift_reg";

assign rnode_171to173_bb5_c2_ene9_0_reg_173_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_c2_ene9_stall_in = 1'b0;
assign rnode_171to173_bb5_c2_ene9_0_stall_in_0_reg_173_NO_SHIFT_REG = 1'b0;
assign rnode_171to173_bb5_c2_ene9_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_171to173_bb5_c2_ene9_0_NO_SHIFT_REG = rnode_171to173_bb5_c2_ene9_0_reg_173_NO_SHIFT_REG;
assign rnode_171to173_bb5_c2_ene9_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_171to173_bb5_c2_ene9_1_NO_SHIFT_REG = rnode_171to173_bb5_c2_ene9_0_reg_173_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_171to172_bb5_c2_ene10_0_valid_out_NO_SHIFT_REG;
 logic rnode_171to172_bb5_c2_ene10_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_bb5_c2_ene10_0_NO_SHIFT_REG;
 logic rnode_171to172_bb5_c2_ene10_0_reg_172_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_bb5_c2_ene10_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_c2_ene10_0_valid_out_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_c2_ene10_0_stall_in_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_c2_ene10_0_stall_out_reg_172_NO_SHIFT_REG;

acl_data_fifo rnode_171to172_bb5_c2_ene10_0_reg_172_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_171to172_bb5_c2_ene10_0_reg_172_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_171to172_bb5_c2_ene10_0_stall_in_reg_172_NO_SHIFT_REG),
	.valid_out(rnode_171to172_bb5_c2_ene10_0_valid_out_reg_172_NO_SHIFT_REG),
	.stall_out(rnode_171to172_bb5_c2_ene10_0_stall_out_reg_172_NO_SHIFT_REG),
	.data_in(local_bb5_c2_ene10),
	.data_out(rnode_171to172_bb5_c2_ene10_0_reg_172_NO_SHIFT_REG)
);

defparam rnode_171to172_bb5_c2_ene10_0_reg_172_fifo.DEPTH = 1;
defparam rnode_171to172_bb5_c2_ene10_0_reg_172_fifo.DATA_WIDTH = 32;
defparam rnode_171to172_bb5_c2_ene10_0_reg_172_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_171to172_bb5_c2_ene10_0_reg_172_fifo.IMPL = "shift_reg";

assign rnode_171to172_bb5_c2_ene10_0_reg_172_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_c2_ene10_stall_in = 1'b0;
assign rnode_171to172_bb5_c2_ene10_0_NO_SHIFT_REG = rnode_171to172_bb5_c2_ene10_0_reg_172_NO_SHIFT_REG;
assign rnode_171to172_bb5_c2_ene10_0_stall_in_reg_172_NO_SHIFT_REG = 1'b0;
assign rnode_171to172_bb5_c2_ene10_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_c2_ene11_valid_out_1;
wire local_bb5_c2_ene11_stall_in_1;
wire local_bb5_inc64_valid_out;
wire local_bb5_inc64_stall_in;
wire local_bb5_inc64_inputs_ready;
wire local_bb5_inc64_stall_local;
wire [31:0] local_bb5_inc64;

assign local_bb5_inc64_inputs_ready = local_bb5_c2_enter_c2_eni14_valid_out_10_NO_SHIFT_REG;
assign local_bb5_inc64 = (local_bb5_c2_ene11 + 32'h1);
assign local_bb5_c2_ene11_valid_out_1 = 1'b1;
assign local_bb5_inc64_valid_out = 1'b1;
assign local_bb5_c2_enter_c2_eni14_stall_in_10 = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_171to172_bb5_c2_ene12_0_valid_out_NO_SHIFT_REG;
 logic rnode_171to172_bb5_c2_ene12_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_bb5_c2_ene12_0_NO_SHIFT_REG;
 logic rnode_171to172_bb5_c2_ene12_0_reg_172_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_bb5_c2_ene12_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_c2_ene12_0_valid_out_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_c2_ene12_0_stall_in_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_c2_ene12_0_stall_out_reg_172_NO_SHIFT_REG;

acl_data_fifo rnode_171to172_bb5_c2_ene12_0_reg_172_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_171to172_bb5_c2_ene12_0_reg_172_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_171to172_bb5_c2_ene12_0_stall_in_reg_172_NO_SHIFT_REG),
	.valid_out(rnode_171to172_bb5_c2_ene12_0_valid_out_reg_172_NO_SHIFT_REG),
	.stall_out(rnode_171to172_bb5_c2_ene12_0_stall_out_reg_172_NO_SHIFT_REG),
	.data_in(local_bb5_c2_ene12),
	.data_out(rnode_171to172_bb5_c2_ene12_0_reg_172_NO_SHIFT_REG)
);

defparam rnode_171to172_bb5_c2_ene12_0_reg_172_fifo.DEPTH = 1;
defparam rnode_171to172_bb5_c2_ene12_0_reg_172_fifo.DATA_WIDTH = 32;
defparam rnode_171to172_bb5_c2_ene12_0_reg_172_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_171to172_bb5_c2_ene12_0_reg_172_fifo.IMPL = "shift_reg";

assign rnode_171to172_bb5_c2_ene12_0_reg_172_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_c2_ene12_stall_in = 1'b0;
assign rnode_171to172_bb5_c2_ene12_0_NO_SHIFT_REG = rnode_171to172_bb5_c2_ene12_0_reg_172_NO_SHIFT_REG;
assign rnode_171to172_bb5_c2_ene12_0_stall_in_reg_172_NO_SHIFT_REG = 1'b0;
assign rnode_171to172_bb5_c2_ene12_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_171to173_bb5_c2_ene13_0_valid_out_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene13_0_stall_in_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene13_0_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene13_0_reg_173_inputs_ready_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene13_0_reg_173_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene13_0_valid_out_reg_173_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene13_0_stall_in_reg_173_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene13_0_stall_out_reg_173_NO_SHIFT_REG;

acl_data_fifo rnode_171to173_bb5_c2_ene13_0_reg_173_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_171to173_bb5_c2_ene13_0_reg_173_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_171to173_bb5_c2_ene13_0_stall_in_reg_173_NO_SHIFT_REG),
	.valid_out(rnode_171to173_bb5_c2_ene13_0_valid_out_reg_173_NO_SHIFT_REG),
	.stall_out(rnode_171to173_bb5_c2_ene13_0_stall_out_reg_173_NO_SHIFT_REG),
	.data_in(local_bb5_c2_ene13),
	.data_out(rnode_171to173_bb5_c2_ene13_0_reg_173_NO_SHIFT_REG)
);

defparam rnode_171to173_bb5_c2_ene13_0_reg_173_fifo.DEPTH = 2;
defparam rnode_171to173_bb5_c2_ene13_0_reg_173_fifo.DATA_WIDTH = 1;
defparam rnode_171to173_bb5_c2_ene13_0_reg_173_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_171to173_bb5_c2_ene13_0_reg_173_fifo.IMPL = "shift_reg";

assign rnode_171to173_bb5_c2_ene13_0_reg_173_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_c2_ene13_stall_in = 1'b0;
assign rnode_171to173_bb5_c2_ene13_0_NO_SHIFT_REG = rnode_171to173_bb5_c2_ene13_0_reg_173_NO_SHIFT_REG;
assign rnode_171to173_bb5_c2_ene13_0_stall_in_reg_173_NO_SHIFT_REG = 1'b0;
assign rnode_171to173_bb5_c2_ene13_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_171to173_bb5_c2_ene14_0_valid_out_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene14_0_stall_in_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene14_0_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene14_0_reg_173_inputs_ready_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene14_0_reg_173_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene14_0_valid_out_reg_173_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene14_0_stall_in_reg_173_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene14_0_stall_out_reg_173_NO_SHIFT_REG;

acl_data_fifo rnode_171to173_bb5_c2_ene14_0_reg_173_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_171to173_bb5_c2_ene14_0_reg_173_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_171to173_bb5_c2_ene14_0_stall_in_reg_173_NO_SHIFT_REG),
	.valid_out(rnode_171to173_bb5_c2_ene14_0_valid_out_reg_173_NO_SHIFT_REG),
	.stall_out(rnode_171to173_bb5_c2_ene14_0_stall_out_reg_173_NO_SHIFT_REG),
	.data_in(local_bb5_c2_ene14),
	.data_out(rnode_171to173_bb5_c2_ene14_0_reg_173_NO_SHIFT_REG)
);

defparam rnode_171to173_bb5_c2_ene14_0_reg_173_fifo.DEPTH = 2;
defparam rnode_171to173_bb5_c2_ene14_0_reg_173_fifo.DATA_WIDTH = 1;
defparam rnode_171to173_bb5_c2_ene14_0_reg_173_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_171to173_bb5_c2_ene14_0_reg_173_fifo.IMPL = "shift_reg";

assign rnode_171to173_bb5_c2_ene14_0_reg_173_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_c2_ene14_stall_in = 1'b0;
assign rnode_171to173_bb5_c2_ene14_0_NO_SHIFT_REG = rnode_171to173_bb5_c2_ene14_0_reg_173_NO_SHIFT_REG;
assign rnode_171to173_bb5_c2_ene14_0_stall_in_reg_173_NO_SHIFT_REG = 1'b0;
assign rnode_171to173_bb5_c2_ene14_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_9_VALID_171_172_0_inputs_ready;
 reg SFC_9_VALID_171_172_0_valid_out_NO_SHIFT_REG;
wire SFC_9_VALID_171_172_0_stall_in;
wire SFC_9_VALID_171_172_0_output_regs_ready;
 reg SFC_9_VALID_171_172_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_9_VALID_171_172_0_causedstall;

assign SFC_9_VALID_171_172_0_inputs_ready = 1'b1;
assign SFC_9_VALID_171_172_0_output_regs_ready = 1'b1;
assign SFC_9_VALID_171_171_0_stall_in = 1'b0;
assign SFC_9_VALID_171_172_0_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_9_VALID_171_172_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_9_VALID_171_172_0_output_regs_ready)
		begin
			SFC_9_VALID_171_172_0_NO_SHIFT_REG <= SFC_9_VALID_171_171_0;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_shr_i_stall_local;
wire [31:0] local_bb5_shr_i;

assign local_bb5_shr_i = (local_bb5_var_ >> 32'h17);

// This section implements an unregistered operation.
// 
wire local_bb5_and5_i_stall_local;
wire [31:0] local_bb5_and5_i;

assign local_bb5_and5_i = (local_bb5_var_ & 32'h7FFFFF);

// This section implements an unregistered operation.
// 
wire local_bb5_shr2_i_stall_local;
wire [31:0] local_bb5_shr2_i;

assign local_bb5_shr2_i = (local_bb5_var__u9 >> 32'h17);

// This section implements an unregistered operation.
// 
wire local_bb5_xor_i_stall_local;
wire [31:0] local_bb5_xor_i;

assign local_bb5_xor_i = (local_bb5_var__u9 ^ local_bb5_var_);

// This section implements an unregistered operation.
// 
wire local_bb5_and6_i_stall_local;
wire [31:0] local_bb5_and6_i;

assign local_bb5_and6_i = (local_bb5_var__u9 & 32'h7FFFFF);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u10_stall_local;
wire [31:0] local_bb5_var__u10;

assign local_bb5_var__u10 = (local_bb5_var_ | local_bb5_var__u9);

// Register node:
//  * latency = 4
//  * capacity = 4
 logic rnode_172to176_bb5_c2_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_172to176_bb5_c2_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_172to176_bb5_c2_ene3_0_NO_SHIFT_REG;
 logic rnode_172to176_bb5_c2_ene3_0_reg_176_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_172to176_bb5_c2_ene3_0_reg_176_NO_SHIFT_REG;
 logic rnode_172to176_bb5_c2_ene3_0_valid_out_reg_176_NO_SHIFT_REG;
 logic rnode_172to176_bb5_c2_ene3_0_stall_in_reg_176_NO_SHIFT_REG;
 logic rnode_172to176_bb5_c2_ene3_0_stall_out_reg_176_NO_SHIFT_REG;

acl_data_fifo rnode_172to176_bb5_c2_ene3_0_reg_176_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_172to176_bb5_c2_ene3_0_reg_176_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_172to176_bb5_c2_ene3_0_stall_in_reg_176_NO_SHIFT_REG),
	.valid_out(rnode_172to176_bb5_c2_ene3_0_valid_out_reg_176_NO_SHIFT_REG),
	.stall_out(rnode_172to176_bb5_c2_ene3_0_stall_out_reg_176_NO_SHIFT_REG),
	.data_in(rnode_171to172_bb5_c2_ene3_0_NO_SHIFT_REG),
	.data_out(rnode_172to176_bb5_c2_ene3_0_reg_176_NO_SHIFT_REG)
);

defparam rnode_172to176_bb5_c2_ene3_0_reg_176_fifo.DEPTH = 4;
defparam rnode_172to176_bb5_c2_ene3_0_reg_176_fifo.DATA_WIDTH = 32;
defparam rnode_172to176_bb5_c2_ene3_0_reg_176_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_172to176_bb5_c2_ene3_0_reg_176_fifo.IMPL = "shift_reg";

assign rnode_172to176_bb5_c2_ene3_0_reg_176_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_171to172_bb5_c2_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_172to176_bb5_c2_ene3_0_NO_SHIFT_REG = rnode_172to176_bb5_c2_ene3_0_reg_176_NO_SHIFT_REG;
assign rnode_172to176_bb5_c2_ene3_0_stall_in_reg_176_NO_SHIFT_REG = 1'b0;
assign rnode_172to176_bb5_c2_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_171to172_bb5_inc_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_171to172_bb5_inc_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_bb5_inc_0_NO_SHIFT_REG;
 logic rnode_171to172_bb5_inc_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_171to172_bb5_inc_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_bb5_inc_1_NO_SHIFT_REG;
 logic rnode_171to172_bb5_inc_0_reg_172_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_bb5_inc_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_inc_0_valid_out_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_inc_0_stall_in_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_inc_0_stall_out_reg_172_NO_SHIFT_REG;

acl_data_fifo rnode_171to172_bb5_inc_0_reg_172_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_171to172_bb5_inc_0_reg_172_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_171to172_bb5_inc_0_stall_in_0_reg_172_NO_SHIFT_REG),
	.valid_out(rnode_171to172_bb5_inc_0_valid_out_0_reg_172_NO_SHIFT_REG),
	.stall_out(rnode_171to172_bb5_inc_0_stall_out_reg_172_NO_SHIFT_REG),
	.data_in(local_bb5_inc),
	.data_out(rnode_171to172_bb5_inc_0_reg_172_NO_SHIFT_REG)
);

defparam rnode_171to172_bb5_inc_0_reg_172_fifo.DEPTH = 1;
defparam rnode_171to172_bb5_inc_0_reg_172_fifo.DATA_WIDTH = 32;
defparam rnode_171to172_bb5_inc_0_reg_172_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_171to172_bb5_inc_0_reg_172_fifo.IMPL = "shift_reg";

assign rnode_171to172_bb5_inc_0_reg_172_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_inc_stall_in = 1'b0;
assign rnode_171to172_bb5_inc_0_stall_in_0_reg_172_NO_SHIFT_REG = 1'b0;
assign rnode_171to172_bb5_inc_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_171to172_bb5_inc_0_NO_SHIFT_REG = rnode_171to172_bb5_inc_0_reg_172_NO_SHIFT_REG;
assign rnode_171to172_bb5_inc_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_171to172_bb5_inc_1_NO_SHIFT_REG = rnode_171to172_bb5_inc_0_reg_172_NO_SHIFT_REG;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_171to173_bb5_c2_ene6_0_valid_out_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene6_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_171to173_bb5_c2_ene6_0_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene6_0_reg_173_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_171to173_bb5_c2_ene6_0_reg_173_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene6_0_valid_out_reg_173_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene6_0_stall_in_reg_173_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene6_0_stall_out_reg_173_NO_SHIFT_REG;

acl_data_fifo rnode_171to173_bb5_c2_ene6_0_reg_173_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_171to173_bb5_c2_ene6_0_reg_173_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_171to173_bb5_c2_ene6_0_stall_in_reg_173_NO_SHIFT_REG),
	.valid_out(rnode_171to173_bb5_c2_ene6_0_valid_out_reg_173_NO_SHIFT_REG),
	.stall_out(rnode_171to173_bb5_c2_ene6_0_stall_out_reg_173_NO_SHIFT_REG),
	.data_in(local_bb5_c2_ene6),
	.data_out(rnode_171to173_bb5_c2_ene6_0_reg_173_NO_SHIFT_REG)
);

defparam rnode_171to173_bb5_c2_ene6_0_reg_173_fifo.DEPTH = 2;
defparam rnode_171to173_bb5_c2_ene6_0_reg_173_fifo.DATA_WIDTH = 32;
defparam rnode_171to173_bb5_c2_ene6_0_reg_173_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_171to173_bb5_c2_ene6_0_reg_173_fifo.IMPL = "shift_reg";

assign rnode_171to173_bb5_c2_ene6_0_reg_173_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_c2_ene6_stall_in_1 = 1'b0;
assign rnode_171to173_bb5_c2_ene6_0_NO_SHIFT_REG = rnode_171to173_bb5_c2_ene6_0_reg_173_NO_SHIFT_REG;
assign rnode_171to173_bb5_c2_ene6_0_stall_in_reg_173_NO_SHIFT_REG = 1'b0;
assign rnode_171to173_bb5_c2_ene6_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_171to172_bb5_inc61_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_171to172_bb5_inc61_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_bb5_inc61_0_NO_SHIFT_REG;
 logic rnode_171to172_bb5_inc61_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_171to172_bb5_inc61_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_bb5_inc61_1_NO_SHIFT_REG;
 logic rnode_171to172_bb5_inc61_0_reg_172_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_bb5_inc61_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_inc61_0_valid_out_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_inc61_0_stall_in_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_inc61_0_stall_out_reg_172_NO_SHIFT_REG;

acl_data_fifo rnode_171to172_bb5_inc61_0_reg_172_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_171to172_bb5_inc61_0_reg_172_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_171to172_bb5_inc61_0_stall_in_0_reg_172_NO_SHIFT_REG),
	.valid_out(rnode_171to172_bb5_inc61_0_valid_out_0_reg_172_NO_SHIFT_REG),
	.stall_out(rnode_171to172_bb5_inc61_0_stall_out_reg_172_NO_SHIFT_REG),
	.data_in(local_bb5_inc61),
	.data_out(rnode_171to172_bb5_inc61_0_reg_172_NO_SHIFT_REG)
);

defparam rnode_171to172_bb5_inc61_0_reg_172_fifo.DEPTH = 1;
defparam rnode_171to172_bb5_inc61_0_reg_172_fifo.DATA_WIDTH = 32;
defparam rnode_171to172_bb5_inc61_0_reg_172_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_171to172_bb5_inc61_0_reg_172_fifo.IMPL = "shift_reg";

assign rnode_171to172_bb5_inc61_0_reg_172_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_inc61_stall_in = 1'b0;
assign rnode_171to172_bb5_inc61_0_stall_in_0_reg_172_NO_SHIFT_REG = 1'b0;
assign rnode_171to172_bb5_inc61_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_171to172_bb5_inc61_0_NO_SHIFT_REG = rnode_171to172_bb5_inc61_0_reg_172_NO_SHIFT_REG;
assign rnode_171to172_bb5_inc61_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_171to172_bb5_inc61_1_NO_SHIFT_REG = rnode_171to172_bb5_inc61_0_reg_172_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_173to174_bb5_c2_ene7_0_valid_out_NO_SHIFT_REG;
 logic rnode_173to174_bb5_c2_ene7_0_stall_in_NO_SHIFT_REG;
 logic rnode_173to174_bb5_c2_ene7_0_NO_SHIFT_REG;
 logic rnode_173to174_bb5_c2_ene7_0_reg_174_inputs_ready_NO_SHIFT_REG;
 logic rnode_173to174_bb5_c2_ene7_0_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5_c2_ene7_0_valid_out_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5_c2_ene7_0_stall_in_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5_c2_ene7_0_stall_out_reg_174_NO_SHIFT_REG;

acl_data_fifo rnode_173to174_bb5_c2_ene7_0_reg_174_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_173to174_bb5_c2_ene7_0_reg_174_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_173to174_bb5_c2_ene7_0_stall_in_reg_174_NO_SHIFT_REG),
	.valid_out(rnode_173to174_bb5_c2_ene7_0_valid_out_reg_174_NO_SHIFT_REG),
	.stall_out(rnode_173to174_bb5_c2_ene7_0_stall_out_reg_174_NO_SHIFT_REG),
	.data_in(rnode_171to173_bb5_c2_ene7_2_NO_SHIFT_REG),
	.data_out(rnode_173to174_bb5_c2_ene7_0_reg_174_NO_SHIFT_REG)
);

defparam rnode_173to174_bb5_c2_ene7_0_reg_174_fifo.DEPTH = 1;
defparam rnode_173to174_bb5_c2_ene7_0_reg_174_fifo.DATA_WIDTH = 1;
defparam rnode_173to174_bb5_c2_ene7_0_reg_174_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_173to174_bb5_c2_ene7_0_reg_174_fifo.IMPL = "shift_reg";

assign rnode_173to174_bb5_c2_ene7_0_reg_174_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_171to173_bb5_c2_ene7_0_stall_in_2_NO_SHIFT_REG = 1'b0;
assign rnode_173to174_bb5_c2_ene7_0_NO_SHIFT_REG = rnode_173to174_bb5_c2_ene7_0_reg_174_NO_SHIFT_REG;
assign rnode_173to174_bb5_c2_ene7_0_stall_in_reg_174_NO_SHIFT_REG = 1'b0;
assign rnode_173to174_bb5_c2_ene7_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_select83_stall_local;
wire [31:0] local_bb5_select83;

assign local_bb5_select83 = (rnode_171to173_bb5_c2_ene7_1_NO_SHIFT_REG ? rnode_171to173_bb5_c2_ene8_0_NO_SHIFT_REG : rnode_171to173_bb5_c2_ene9_0_NO_SHIFT_REG);

// Register node:
//  * latency = 12
//  * capacity = 12
 logic rnode_172to184_bb5_c2_ene10_0_valid_out_NO_SHIFT_REG;
 logic rnode_172to184_bb5_c2_ene10_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_172to184_bb5_c2_ene10_0_NO_SHIFT_REG;
 logic rnode_172to184_bb5_c2_ene10_0_reg_184_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_172to184_bb5_c2_ene10_0_reg_184_NO_SHIFT_REG;
 logic rnode_172to184_bb5_c2_ene10_0_valid_out_reg_184_NO_SHIFT_REG;
 logic rnode_172to184_bb5_c2_ene10_0_stall_in_reg_184_NO_SHIFT_REG;
 logic rnode_172to184_bb5_c2_ene10_0_stall_out_reg_184_NO_SHIFT_REG;

acl_data_fifo rnode_172to184_bb5_c2_ene10_0_reg_184_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_172to184_bb5_c2_ene10_0_reg_184_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_172to184_bb5_c2_ene10_0_stall_in_reg_184_NO_SHIFT_REG),
	.valid_out(rnode_172to184_bb5_c2_ene10_0_valid_out_reg_184_NO_SHIFT_REG),
	.stall_out(rnode_172to184_bb5_c2_ene10_0_stall_out_reg_184_NO_SHIFT_REG),
	.data_in(rnode_171to172_bb5_c2_ene10_0_NO_SHIFT_REG),
	.data_out(rnode_172to184_bb5_c2_ene10_0_reg_184_NO_SHIFT_REG)
);

defparam rnode_172to184_bb5_c2_ene10_0_reg_184_fifo.DEPTH = 12;
defparam rnode_172to184_bb5_c2_ene10_0_reg_184_fifo.DATA_WIDTH = 32;
defparam rnode_172to184_bb5_c2_ene10_0_reg_184_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_172to184_bb5_c2_ene10_0_reg_184_fifo.IMPL = "shift_reg";

assign rnode_172to184_bb5_c2_ene10_0_reg_184_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_171to172_bb5_c2_ene10_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_172to184_bb5_c2_ene10_0_NO_SHIFT_REG = rnode_172to184_bb5_c2_ene10_0_reg_184_NO_SHIFT_REG;
assign rnode_172to184_bb5_c2_ene10_0_stall_in_reg_184_NO_SHIFT_REG = 1'b0;
assign rnode_172to184_bb5_c2_ene10_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_171to173_bb5_c2_ene11_0_valid_out_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene11_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_171to173_bb5_c2_ene11_0_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene11_0_reg_173_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_171to173_bb5_c2_ene11_0_reg_173_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene11_0_valid_out_reg_173_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene11_0_stall_in_reg_173_NO_SHIFT_REG;
 logic rnode_171to173_bb5_c2_ene11_0_stall_out_reg_173_NO_SHIFT_REG;

acl_data_fifo rnode_171to173_bb5_c2_ene11_0_reg_173_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_171to173_bb5_c2_ene11_0_reg_173_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_171to173_bb5_c2_ene11_0_stall_in_reg_173_NO_SHIFT_REG),
	.valid_out(rnode_171to173_bb5_c2_ene11_0_valid_out_reg_173_NO_SHIFT_REG),
	.stall_out(rnode_171to173_bb5_c2_ene11_0_stall_out_reg_173_NO_SHIFT_REG),
	.data_in(local_bb5_c2_ene11),
	.data_out(rnode_171to173_bb5_c2_ene11_0_reg_173_NO_SHIFT_REG)
);

defparam rnode_171to173_bb5_c2_ene11_0_reg_173_fifo.DEPTH = 2;
defparam rnode_171to173_bb5_c2_ene11_0_reg_173_fifo.DATA_WIDTH = 32;
defparam rnode_171to173_bb5_c2_ene11_0_reg_173_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_171to173_bb5_c2_ene11_0_reg_173_fifo.IMPL = "shift_reg";

assign rnode_171to173_bb5_c2_ene11_0_reg_173_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_c2_ene11_stall_in_1 = 1'b0;
assign rnode_171to173_bb5_c2_ene11_0_NO_SHIFT_REG = rnode_171to173_bb5_c2_ene11_0_reg_173_NO_SHIFT_REG;
assign rnode_171to173_bb5_c2_ene11_0_stall_in_reg_173_NO_SHIFT_REG = 1'b0;
assign rnode_171to173_bb5_c2_ene11_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_171to172_bb5_inc64_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_171to172_bb5_inc64_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_bb5_inc64_0_NO_SHIFT_REG;
 logic rnode_171to172_bb5_inc64_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_171to172_bb5_inc64_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_bb5_inc64_1_NO_SHIFT_REG;
 logic rnode_171to172_bb5_inc64_0_reg_172_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_bb5_inc64_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_inc64_0_valid_out_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_inc64_0_stall_in_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_inc64_0_stall_out_reg_172_NO_SHIFT_REG;

acl_data_fifo rnode_171to172_bb5_inc64_0_reg_172_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_171to172_bb5_inc64_0_reg_172_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_171to172_bb5_inc64_0_stall_in_0_reg_172_NO_SHIFT_REG),
	.valid_out(rnode_171to172_bb5_inc64_0_valid_out_0_reg_172_NO_SHIFT_REG),
	.stall_out(rnode_171to172_bb5_inc64_0_stall_out_reg_172_NO_SHIFT_REG),
	.data_in(local_bb5_inc64),
	.data_out(rnode_171to172_bb5_inc64_0_reg_172_NO_SHIFT_REG)
);

defparam rnode_171to172_bb5_inc64_0_reg_172_fifo.DEPTH = 1;
defparam rnode_171to172_bb5_inc64_0_reg_172_fifo.DATA_WIDTH = 32;
defparam rnode_171to172_bb5_inc64_0_reg_172_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_171to172_bb5_inc64_0_reg_172_fifo.IMPL = "shift_reg";

assign rnode_171to172_bb5_inc64_0_reg_172_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_inc64_stall_in = 1'b0;
assign rnode_171to172_bb5_inc64_0_stall_in_0_reg_172_NO_SHIFT_REG = 1'b0;
assign rnode_171to172_bb5_inc64_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_171to172_bb5_inc64_0_NO_SHIFT_REG = rnode_171to172_bb5_inc64_0_reg_172_NO_SHIFT_REG;
assign rnode_171to172_bb5_inc64_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_171to172_bb5_inc64_1_NO_SHIFT_REG = rnode_171to172_bb5_inc64_0_reg_172_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire SFC_9_VALID_172_173_0_inputs_ready;
 reg SFC_9_VALID_172_173_0_valid_out_NO_SHIFT_REG;
wire SFC_9_VALID_172_173_0_stall_in;
wire SFC_9_VALID_172_173_0_output_regs_ready;
 reg SFC_9_VALID_172_173_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_9_VALID_172_173_0_causedstall;

assign SFC_9_VALID_172_173_0_inputs_ready = 1'b1;
assign SFC_9_VALID_172_173_0_output_regs_ready = 1'b1;
assign SFC_9_VALID_171_172_0_stall_in = 1'b0;
assign SFC_9_VALID_172_173_0_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_9_VALID_172_173_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_9_VALID_172_173_0_output_regs_ready)
		begin
			SFC_9_VALID_172_173_0_NO_SHIFT_REG <= SFC_9_VALID_171_172_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_and_i_stall_local;
wire [31:0] local_bb5_and_i;

assign local_bb5_and_i = ((local_bb5_shr_i & 32'h1FF) & 32'hFF);

// This section implements an unregistered operation.
// 
wire local_bb5_lnot14_not_i_stall_local;
wire local_bb5_lnot14_not_i;

assign local_bb5_lnot14_not_i = ((local_bb5_and5_i & 32'h7FFFFF) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_stall_local;
wire [31:0] local_bb5_or_i;

assign local_bb5_or_i = ((local_bb5_and5_i & 32'h7FFFFF) | 32'h800000);

// This section implements an unregistered operation.
// 
wire local_bb5_and3_i_stall_local;
wire [31:0] local_bb5_and3_i;

assign local_bb5_and3_i = ((local_bb5_shr2_i & 32'h1FF) & 32'hFF);

// This section implements an unregistered operation.
// 
wire local_bb5_lnot17_i_stall_local;
wire local_bb5_lnot17_i;

assign local_bb5_lnot17_i = ((local_bb5_and6_i & 32'h7FFFFF) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_or47_i_stall_local;
wire [31:0] local_bb5_or47_i;

assign local_bb5_or47_i = ((local_bb5_and6_i & 32'h7FFFFF) | 32'h800000);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u11_stall_local;
wire [31:0] local_bb5_var__u11;

assign local_bb5_var__u11 = (local_bb5_var__u10 & 32'h7FFFFF);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_176to177_bb5_c2_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_176to177_bb5_c2_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_176to177_bb5_c2_ene3_0_NO_SHIFT_REG;
 logic rnode_176to177_bb5_c2_ene3_0_reg_177_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_176to177_bb5_c2_ene3_0_reg_177_NO_SHIFT_REG;
 logic rnode_176to177_bb5_c2_ene3_0_valid_out_reg_177_NO_SHIFT_REG;
 logic rnode_176to177_bb5_c2_ene3_0_stall_in_reg_177_NO_SHIFT_REG;
 logic rnode_176to177_bb5_c2_ene3_0_stall_out_reg_177_NO_SHIFT_REG;

acl_data_fifo rnode_176to177_bb5_c2_ene3_0_reg_177_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_176to177_bb5_c2_ene3_0_reg_177_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_176to177_bb5_c2_ene3_0_stall_in_reg_177_NO_SHIFT_REG),
	.valid_out(rnode_176to177_bb5_c2_ene3_0_valid_out_reg_177_NO_SHIFT_REG),
	.stall_out(rnode_176to177_bb5_c2_ene3_0_stall_out_reg_177_NO_SHIFT_REG),
	.data_in(rnode_172to176_bb5_c2_ene3_0_NO_SHIFT_REG),
	.data_out(rnode_176to177_bb5_c2_ene3_0_reg_177_NO_SHIFT_REG)
);

defparam rnode_176to177_bb5_c2_ene3_0_reg_177_fifo.DEPTH = 1;
defparam rnode_176to177_bb5_c2_ene3_0_reg_177_fifo.DATA_WIDTH = 32;
defparam rnode_176to177_bb5_c2_ene3_0_reg_177_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_176to177_bb5_c2_ene3_0_reg_177_fifo.IMPL = "shift_reg";

assign rnode_176to177_bb5_c2_ene3_0_reg_177_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_172to176_bb5_c2_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_176to177_bb5_c2_ene3_0_NO_SHIFT_REG = rnode_176to177_bb5_c2_ene3_0_reg_177_NO_SHIFT_REG;
assign rnode_176to177_bb5_c2_ene3_0_stall_in_reg_177_NO_SHIFT_REG = 1'b0;
assign rnode_176to177_bb5_c2_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cmp23_valid_out;
wire local_bb5_cmp23_stall_in;
wire local_bb5_cmp23_inputs_ready;
wire local_bb5_cmp23_stall_local;
wire local_bb5_cmp23;

assign local_bb5_cmp23_inputs_ready = (rnode_171to172_bb5_c2_ene5_0_valid_out_0_NO_SHIFT_REG & rnode_171to172_bb5_inc_0_valid_out_0_NO_SHIFT_REG);
assign local_bb5_cmp23 = ($signed(rnode_171to172_bb5_inc_0_NO_SHIFT_REG) < $signed(rnode_171to172_bb5_c2_ene5_0_NO_SHIFT_REG));
assign local_bb5_cmp23_valid_out = 1'b1;
assign rnode_171to172_bb5_c2_ene5_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_171to172_bb5_inc_0_stall_in_0_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_172to173_bb5_inc_0_valid_out_NO_SHIFT_REG;
 logic rnode_172to173_bb5_inc_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_172to173_bb5_inc_0_NO_SHIFT_REG;
 logic rnode_172to173_bb5_inc_0_reg_173_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_172to173_bb5_inc_0_reg_173_NO_SHIFT_REG;
 logic rnode_172to173_bb5_inc_0_valid_out_reg_173_NO_SHIFT_REG;
 logic rnode_172to173_bb5_inc_0_stall_in_reg_173_NO_SHIFT_REG;
 logic rnode_172to173_bb5_inc_0_stall_out_reg_173_NO_SHIFT_REG;

acl_data_fifo rnode_172to173_bb5_inc_0_reg_173_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_172to173_bb5_inc_0_reg_173_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_172to173_bb5_inc_0_stall_in_reg_173_NO_SHIFT_REG),
	.valid_out(rnode_172to173_bb5_inc_0_valid_out_reg_173_NO_SHIFT_REG),
	.stall_out(rnode_172to173_bb5_inc_0_stall_out_reg_173_NO_SHIFT_REG),
	.data_in(rnode_171to172_bb5_inc_1_NO_SHIFT_REG),
	.data_out(rnode_172to173_bb5_inc_0_reg_173_NO_SHIFT_REG)
);

defparam rnode_172to173_bb5_inc_0_reg_173_fifo.DEPTH = 1;
defparam rnode_172to173_bb5_inc_0_reg_173_fifo.DATA_WIDTH = 32;
defparam rnode_172to173_bb5_inc_0_reg_173_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_172to173_bb5_inc_0_reg_173_fifo.IMPL = "shift_reg";

assign rnode_172to173_bb5_inc_0_reg_173_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_171to172_bb5_inc_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_172to173_bb5_inc_0_NO_SHIFT_REG = rnode_172to173_bb5_inc_0_reg_173_NO_SHIFT_REG;
assign rnode_172to173_bb5_inc_0_stall_in_reg_173_NO_SHIFT_REG = 1'b0;
assign rnode_172to173_bb5_inc_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cmp18_valid_out;
wire local_bb5_cmp18_stall_in;
wire local_bb5_cmp18_inputs_ready;
wire local_bb5_cmp18_stall_local;
wire local_bb5_cmp18;

assign local_bb5_cmp18_inputs_ready = (rnode_171to172_bb5_c2_ene5_0_valid_out_1_NO_SHIFT_REG & rnode_171to172_bb5_inc61_0_valid_out_0_NO_SHIFT_REG);
assign local_bb5_cmp18 = ($signed(rnode_171to172_bb5_inc61_0_NO_SHIFT_REG) < $signed(rnode_171to172_bb5_c2_ene5_1_NO_SHIFT_REG));
assign local_bb5_cmp18_valid_out = 1'b1;
assign rnode_171to172_bb5_c2_ene5_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_171to172_bb5_inc61_0_stall_in_0_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_172to173_bb5_inc61_0_valid_out_NO_SHIFT_REG;
 logic rnode_172to173_bb5_inc61_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_172to173_bb5_inc61_0_NO_SHIFT_REG;
 logic rnode_172to173_bb5_inc61_0_reg_173_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_172to173_bb5_inc61_0_reg_173_NO_SHIFT_REG;
 logic rnode_172to173_bb5_inc61_0_valid_out_reg_173_NO_SHIFT_REG;
 logic rnode_172to173_bb5_inc61_0_stall_in_reg_173_NO_SHIFT_REG;
 logic rnode_172to173_bb5_inc61_0_stall_out_reg_173_NO_SHIFT_REG;

acl_data_fifo rnode_172to173_bb5_inc61_0_reg_173_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_172to173_bb5_inc61_0_reg_173_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_172to173_bb5_inc61_0_stall_in_reg_173_NO_SHIFT_REG),
	.valid_out(rnode_172to173_bb5_inc61_0_valid_out_reg_173_NO_SHIFT_REG),
	.stall_out(rnode_172to173_bb5_inc61_0_stall_out_reg_173_NO_SHIFT_REG),
	.data_in(rnode_171to172_bb5_inc61_1_NO_SHIFT_REG),
	.data_out(rnode_172to173_bb5_inc61_0_reg_173_NO_SHIFT_REG)
);

defparam rnode_172to173_bb5_inc61_0_reg_173_fifo.DEPTH = 1;
defparam rnode_172to173_bb5_inc61_0_reg_173_fifo.DATA_WIDTH = 32;
defparam rnode_172to173_bb5_inc61_0_reg_173_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_172to173_bb5_inc61_0_reg_173_fifo.IMPL = "shift_reg";

assign rnode_172to173_bb5_inc61_0_reg_173_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_171to172_bb5_inc61_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_172to173_bb5_inc61_0_NO_SHIFT_REG = rnode_172to173_bb5_inc61_0_reg_173_NO_SHIFT_REG;
assign rnode_172to173_bb5_inc61_0_stall_in_reg_173_NO_SHIFT_REG = 1'b0;
assign rnode_172to173_bb5_inc61_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 10
//  * capacity = 10
 logic rnode_174to184_bb5_c2_ene7_0_valid_out_NO_SHIFT_REG;
 logic rnode_174to184_bb5_c2_ene7_0_stall_in_NO_SHIFT_REG;
 logic rnode_174to184_bb5_c2_ene7_0_NO_SHIFT_REG;
 logic rnode_174to184_bb5_c2_ene7_0_reg_184_inputs_ready_NO_SHIFT_REG;
 logic rnode_174to184_bb5_c2_ene7_0_reg_184_NO_SHIFT_REG;
 logic rnode_174to184_bb5_c2_ene7_0_valid_out_reg_184_NO_SHIFT_REG;
 logic rnode_174to184_bb5_c2_ene7_0_stall_in_reg_184_NO_SHIFT_REG;
 logic rnode_174to184_bb5_c2_ene7_0_stall_out_reg_184_NO_SHIFT_REG;

acl_data_fifo rnode_174to184_bb5_c2_ene7_0_reg_184_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_174to184_bb5_c2_ene7_0_reg_184_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_174to184_bb5_c2_ene7_0_stall_in_reg_184_NO_SHIFT_REG),
	.valid_out(rnode_174to184_bb5_c2_ene7_0_valid_out_reg_184_NO_SHIFT_REG),
	.stall_out(rnode_174to184_bb5_c2_ene7_0_stall_out_reg_184_NO_SHIFT_REG),
	.data_in(rnode_173to174_bb5_c2_ene7_0_NO_SHIFT_REG),
	.data_out(rnode_174to184_bb5_c2_ene7_0_reg_184_NO_SHIFT_REG)
);

defparam rnode_174to184_bb5_c2_ene7_0_reg_184_fifo.DEPTH = 10;
defparam rnode_174to184_bb5_c2_ene7_0_reg_184_fifo.DATA_WIDTH = 1;
defparam rnode_174to184_bb5_c2_ene7_0_reg_184_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_174to184_bb5_c2_ene7_0_reg_184_fifo.IMPL = "shift_reg";

assign rnode_174to184_bb5_c2_ene7_0_reg_184_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_173to174_bb5_c2_ene7_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_174to184_bb5_c2_ene7_0_NO_SHIFT_REG = rnode_174to184_bb5_c2_ene7_0_reg_184_NO_SHIFT_REG;
assign rnode_174to184_bb5_c2_ene7_0_stall_in_reg_184_NO_SHIFT_REG = 1'b0;
assign rnode_174to184_bb5_c2_ene7_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_184to185_bb5_c2_ene10_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_184to185_bb5_c2_ene10_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_184to185_bb5_c2_ene10_0_NO_SHIFT_REG;
 logic rnode_184to185_bb5_c2_ene10_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_184to185_bb5_c2_ene10_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_184to185_bb5_c2_ene10_1_NO_SHIFT_REG;
 logic rnode_184to185_bb5_c2_ene10_0_reg_185_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_184to185_bb5_c2_ene10_0_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5_c2_ene10_0_valid_out_0_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5_c2_ene10_0_stall_in_0_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5_c2_ene10_0_stall_out_reg_185_NO_SHIFT_REG;

acl_data_fifo rnode_184to185_bb5_c2_ene10_0_reg_185_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_184to185_bb5_c2_ene10_0_reg_185_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_184to185_bb5_c2_ene10_0_stall_in_0_reg_185_NO_SHIFT_REG),
	.valid_out(rnode_184to185_bb5_c2_ene10_0_valid_out_0_reg_185_NO_SHIFT_REG),
	.stall_out(rnode_184to185_bb5_c2_ene10_0_stall_out_reg_185_NO_SHIFT_REG),
	.data_in(rnode_172to184_bb5_c2_ene10_0_NO_SHIFT_REG),
	.data_out(rnode_184to185_bb5_c2_ene10_0_reg_185_NO_SHIFT_REG)
);

defparam rnode_184to185_bb5_c2_ene10_0_reg_185_fifo.DEPTH = 1;
defparam rnode_184to185_bb5_c2_ene10_0_reg_185_fifo.DATA_WIDTH = 32;
defparam rnode_184to185_bb5_c2_ene10_0_reg_185_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_184to185_bb5_c2_ene10_0_reg_185_fifo.IMPL = "shift_reg";

assign rnode_184to185_bb5_c2_ene10_0_reg_185_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_172to184_bb5_c2_ene10_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_c2_ene10_0_stall_in_0_reg_185_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_c2_ene10_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_184to185_bb5_c2_ene10_0_NO_SHIFT_REG = rnode_184to185_bb5_c2_ene10_0_reg_185_NO_SHIFT_REG;
assign rnode_184to185_bb5_c2_ene10_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_184to185_bb5_c2_ene10_1_NO_SHIFT_REG = rnode_184to185_bb5_c2_ene10_0_reg_185_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_cmp14_valid_out;
wire local_bb5_cmp14_stall_in;
wire local_bb5_cmp14_inputs_ready;
wire local_bb5_cmp14_stall_local;
wire local_bb5_cmp14;

assign local_bb5_cmp14_inputs_ready = (rnode_171to172_bb5_c2_ene12_0_valid_out_NO_SHIFT_REG & rnode_171to172_bb5_inc64_0_valid_out_0_NO_SHIFT_REG);
assign local_bb5_cmp14 = ($signed(rnode_171to172_bb5_inc64_0_NO_SHIFT_REG) < $signed(rnode_171to172_bb5_c2_ene12_0_NO_SHIFT_REG));
assign local_bb5_cmp14_valid_out = 1'b1;
assign rnode_171to172_bb5_c2_ene12_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_171to172_bb5_inc64_0_stall_in_0_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_172to173_bb5_inc64_0_valid_out_NO_SHIFT_REG;
 logic rnode_172to173_bb5_inc64_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_172to173_bb5_inc64_0_NO_SHIFT_REG;
 logic rnode_172to173_bb5_inc64_0_reg_173_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_172to173_bb5_inc64_0_reg_173_NO_SHIFT_REG;
 logic rnode_172to173_bb5_inc64_0_valid_out_reg_173_NO_SHIFT_REG;
 logic rnode_172to173_bb5_inc64_0_stall_in_reg_173_NO_SHIFT_REG;
 logic rnode_172to173_bb5_inc64_0_stall_out_reg_173_NO_SHIFT_REG;

acl_data_fifo rnode_172to173_bb5_inc64_0_reg_173_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_172to173_bb5_inc64_0_reg_173_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_172to173_bb5_inc64_0_stall_in_reg_173_NO_SHIFT_REG),
	.valid_out(rnode_172to173_bb5_inc64_0_valid_out_reg_173_NO_SHIFT_REG),
	.stall_out(rnode_172to173_bb5_inc64_0_stall_out_reg_173_NO_SHIFT_REG),
	.data_in(rnode_171to172_bb5_inc64_1_NO_SHIFT_REG),
	.data_out(rnode_172to173_bb5_inc64_0_reg_173_NO_SHIFT_REG)
);

defparam rnode_172to173_bb5_inc64_0_reg_173_fifo.DEPTH = 1;
defparam rnode_172to173_bb5_inc64_0_reg_173_fifo.DATA_WIDTH = 32;
defparam rnode_172to173_bb5_inc64_0_reg_173_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_172to173_bb5_inc64_0_reg_173_fifo.IMPL = "shift_reg";

assign rnode_172to173_bb5_inc64_0_reg_173_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_171to172_bb5_inc64_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_172to173_bb5_inc64_0_NO_SHIFT_REG = rnode_172to173_bb5_inc64_0_reg_173_NO_SHIFT_REG;
assign rnode_172to173_bb5_inc64_0_stall_in_reg_173_NO_SHIFT_REG = 1'b0;
assign rnode_172to173_bb5_inc64_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_9_VALID_173_174_0_inputs_ready;
 reg SFC_9_VALID_173_174_0_valid_out_NO_SHIFT_REG;
wire SFC_9_VALID_173_174_0_stall_in;
wire SFC_9_VALID_173_174_0_output_regs_ready;
 reg SFC_9_VALID_173_174_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_9_VALID_173_174_0_causedstall;

assign SFC_9_VALID_173_174_0_inputs_ready = 1'b1;
assign SFC_9_VALID_173_174_0_output_regs_ready = 1'b1;
assign SFC_9_VALID_172_173_0_stall_in = 1'b0;
assign SFC_9_VALID_173_174_0_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_9_VALID_173_174_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_9_VALID_173_174_0_output_regs_ready)
		begin
			SFC_9_VALID_173_174_0_NO_SHIFT_REG <= SFC_9_VALID_172_173_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_lnot_i_stall_local;
wire local_bb5_lnot_i;

assign local_bb5_lnot_i = ((local_bb5_and_i & 32'hFF) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp_i_stall_local;
wire local_bb5_cmp_i;

assign local_bb5_cmp_i = ((local_bb5_and_i & 32'hFF) == 32'hFF);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u12_stall_local;
wire [31:0] local_bb5_var__u12;

assign local_bb5_var__u12 = ((local_bb5_and_i & 32'hFF) | (local_bb5_and5_i & 32'h7FFFFF));

// This section implements an unregistered operation.
// 
wire local_bb5_conv_i_i_stall_local;
wire [63:0] local_bb5_conv_i_i;

assign local_bb5_conv_i_i[63:32] = 32'h0;
assign local_bb5_conv_i_i[31:0] = ((local_bb5_or_i & 32'hFFFFFF) | 32'h800000);

// This section implements an unregistered operation.
// 
wire local_bb5_lnot8_i_stall_local;
wire local_bb5_lnot8_i;

assign local_bb5_lnot8_i = ((local_bb5_and3_i & 32'hFF) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp11_i_stall_local;
wire local_bb5_cmp11_i;

assign local_bb5_cmp11_i = ((local_bb5_and3_i & 32'hFF) == 32'hFF);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u13_stall_local;
wire [31:0] local_bb5_var__u13;

assign local_bb5_var__u13 = ((local_bb5_and3_i & 32'hFF) | (local_bb5_and6_i & 32'h7FFFFF));

// This section implements an unregistered operation.
// 
wire local_bb5_add_i_stall_local;
wire [31:0] local_bb5_add_i;

assign local_bb5_add_i = ((local_bb5_and3_i & 32'hFF) + (local_bb5_and_i & 32'hFF));

// This section implements an unregistered operation.
// 
wire local_bb5_conv1_i_i_stall_local;
wire [63:0] local_bb5_conv1_i_i;

assign local_bb5_conv1_i_i[63:32] = 32'h0;
assign local_bb5_conv1_i_i[31:0] = ((local_bb5_or47_i & 32'hFFFFFF) | 32'h800000);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u14_stall_local;
wire local_bb5_var__u14;

assign local_bb5_var__u14 = ((local_bb5_var__u11 & 32'h7FFFFF) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u15_stall_local;
wire [31:0] local_bb5_var__u15;

assign local_bb5_var__u15 = rnode_176to177_bb5_c2_ene3_0_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_172to173_bb5_cmp23_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp23_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp23_0_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp23_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp23_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp23_1_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp23_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp23_0_stall_in_2_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp23_2_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp23_0_reg_173_inputs_ready_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp23_0_reg_173_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp23_0_valid_out_0_reg_173_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp23_0_stall_in_0_reg_173_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp23_0_stall_out_reg_173_NO_SHIFT_REG;

acl_data_fifo rnode_172to173_bb5_cmp23_0_reg_173_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_172to173_bb5_cmp23_0_reg_173_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_172to173_bb5_cmp23_0_stall_in_0_reg_173_NO_SHIFT_REG),
	.valid_out(rnode_172to173_bb5_cmp23_0_valid_out_0_reg_173_NO_SHIFT_REG),
	.stall_out(rnode_172to173_bb5_cmp23_0_stall_out_reg_173_NO_SHIFT_REG),
	.data_in(local_bb5_cmp23),
	.data_out(rnode_172to173_bb5_cmp23_0_reg_173_NO_SHIFT_REG)
);

defparam rnode_172to173_bb5_cmp23_0_reg_173_fifo.DEPTH = 1;
defparam rnode_172to173_bb5_cmp23_0_reg_173_fifo.DATA_WIDTH = 1;
defparam rnode_172to173_bb5_cmp23_0_reg_173_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_172to173_bb5_cmp23_0_reg_173_fifo.IMPL = "shift_reg";

assign rnode_172to173_bb5_cmp23_0_reg_173_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp23_stall_in = 1'b0;
assign rnode_172to173_bb5_cmp23_0_stall_in_0_reg_173_NO_SHIFT_REG = 1'b0;
assign rnode_172to173_bb5_cmp23_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_172to173_bb5_cmp23_0_NO_SHIFT_REG = rnode_172to173_bb5_cmp23_0_reg_173_NO_SHIFT_REG;
assign rnode_172to173_bb5_cmp23_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_172to173_bb5_cmp23_1_NO_SHIFT_REG = rnode_172to173_bb5_cmp23_0_reg_173_NO_SHIFT_REG;
assign rnode_172to173_bb5_cmp23_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_172to173_bb5_cmp23_2_NO_SHIFT_REG = rnode_172to173_bb5_cmp23_0_reg_173_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_172to173_bb5_cmp18_0_valid_out_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp18_0_stall_in_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp18_0_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp18_0_reg_173_inputs_ready_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp18_0_reg_173_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp18_0_valid_out_reg_173_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp18_0_stall_in_reg_173_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp18_0_stall_out_reg_173_NO_SHIFT_REG;

acl_data_fifo rnode_172to173_bb5_cmp18_0_reg_173_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_172to173_bb5_cmp18_0_reg_173_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_172to173_bb5_cmp18_0_stall_in_reg_173_NO_SHIFT_REG),
	.valid_out(rnode_172to173_bb5_cmp18_0_valid_out_reg_173_NO_SHIFT_REG),
	.stall_out(rnode_172to173_bb5_cmp18_0_stall_out_reg_173_NO_SHIFT_REG),
	.data_in(local_bb5_cmp18),
	.data_out(rnode_172to173_bb5_cmp18_0_reg_173_NO_SHIFT_REG)
);

defparam rnode_172to173_bb5_cmp18_0_reg_173_fifo.DEPTH = 1;
defparam rnode_172to173_bb5_cmp18_0_reg_173_fifo.DATA_WIDTH = 1;
defparam rnode_172to173_bb5_cmp18_0_reg_173_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_172to173_bb5_cmp18_0_reg_173_fifo.IMPL = "shift_reg";

assign rnode_172to173_bb5_cmp18_0_reg_173_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp18_stall_in = 1'b0;
assign rnode_172to173_bb5_cmp18_0_NO_SHIFT_REG = rnode_172to173_bb5_cmp18_0_reg_173_NO_SHIFT_REG;
assign rnode_172to173_bb5_cmp18_0_stall_in_reg_173_NO_SHIFT_REG = 1'b0;
assign rnode_172to173_bb5_cmp18_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_184to185_bb5_c2_ene7_0_valid_out_NO_SHIFT_REG;
 logic rnode_184to185_bb5_c2_ene7_0_stall_in_NO_SHIFT_REG;
 logic rnode_184to185_bb5_c2_ene7_0_NO_SHIFT_REG;
 logic rnode_184to185_bb5_c2_ene7_0_reg_185_inputs_ready_NO_SHIFT_REG;
 logic rnode_184to185_bb5_c2_ene7_0_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5_c2_ene7_0_valid_out_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5_c2_ene7_0_stall_in_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5_c2_ene7_0_stall_out_reg_185_NO_SHIFT_REG;

acl_data_fifo rnode_184to185_bb5_c2_ene7_0_reg_185_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_184to185_bb5_c2_ene7_0_reg_185_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_184to185_bb5_c2_ene7_0_stall_in_reg_185_NO_SHIFT_REG),
	.valid_out(rnode_184to185_bb5_c2_ene7_0_valid_out_reg_185_NO_SHIFT_REG),
	.stall_out(rnode_184to185_bb5_c2_ene7_0_stall_out_reg_185_NO_SHIFT_REG),
	.data_in(rnode_174to184_bb5_c2_ene7_0_NO_SHIFT_REG),
	.data_out(rnode_184to185_bb5_c2_ene7_0_reg_185_NO_SHIFT_REG)
);

defparam rnode_184to185_bb5_c2_ene7_0_reg_185_fifo.DEPTH = 1;
defparam rnode_184to185_bb5_c2_ene7_0_reg_185_fifo.DATA_WIDTH = 1;
defparam rnode_184to185_bb5_c2_ene7_0_reg_185_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_184to185_bb5_c2_ene7_0_reg_185_fifo.IMPL = "shift_reg";

assign rnode_184to185_bb5_c2_ene7_0_reg_185_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_174to184_bb5_c2_ene7_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_c2_ene7_0_NO_SHIFT_REG = rnode_184to185_bb5_c2_ene7_0_reg_185_NO_SHIFT_REG;
assign rnode_184to185_bb5_c2_ene7_0_stall_in_reg_185_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_c2_ene7_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_172to173_bb5_cmp14_0_valid_out_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp14_0_stall_in_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp14_0_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp14_0_reg_173_inputs_ready_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp14_0_reg_173_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp14_0_valid_out_reg_173_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp14_0_stall_in_reg_173_NO_SHIFT_REG;
 logic rnode_172to173_bb5_cmp14_0_stall_out_reg_173_NO_SHIFT_REG;

acl_data_fifo rnode_172to173_bb5_cmp14_0_reg_173_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_172to173_bb5_cmp14_0_reg_173_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_172to173_bb5_cmp14_0_stall_in_reg_173_NO_SHIFT_REG),
	.valid_out(rnode_172to173_bb5_cmp14_0_valid_out_reg_173_NO_SHIFT_REG),
	.stall_out(rnode_172to173_bb5_cmp14_0_stall_out_reg_173_NO_SHIFT_REG),
	.data_in(local_bb5_cmp14),
	.data_out(rnode_172to173_bb5_cmp14_0_reg_173_NO_SHIFT_REG)
);

defparam rnode_172to173_bb5_cmp14_0_reg_173_fifo.DEPTH = 1;
defparam rnode_172to173_bb5_cmp14_0_reg_173_fifo.DATA_WIDTH = 1;
defparam rnode_172to173_bb5_cmp14_0_reg_173_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_172to173_bb5_cmp14_0_reg_173_fifo.IMPL = "shift_reg";

assign rnode_172to173_bb5_cmp14_0_reg_173_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp14_stall_in = 1'b0;
assign rnode_172to173_bb5_cmp14_0_NO_SHIFT_REG = rnode_172to173_bb5_cmp14_0_reg_173_NO_SHIFT_REG;
assign rnode_172to173_bb5_cmp14_0_stall_in_reg_173_NO_SHIFT_REG = 1'b0;
assign rnode_172to173_bb5_cmp14_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_9_VALID_174_175_0_inputs_ready;
 reg SFC_9_VALID_174_175_0_valid_out_NO_SHIFT_REG;
wire SFC_9_VALID_174_175_0_stall_in;
wire SFC_9_VALID_174_175_0_output_regs_ready;
 reg SFC_9_VALID_174_175_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_9_VALID_174_175_0_causedstall;

assign SFC_9_VALID_174_175_0_inputs_ready = 1'b1;
assign SFC_9_VALID_174_175_0_output_regs_ready = 1'b1;
assign SFC_9_VALID_173_174_0_stall_in = 1'b0;
assign SFC_9_VALID_174_175_0_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_9_VALID_174_175_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_9_VALID_174_175_0_output_regs_ready)
		begin
			SFC_9_VALID_174_175_0_NO_SHIFT_REG <= SFC_9_VALID_173_174_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5__22_i_stall_local;
wire local_bb5__22_i;

assign local_bb5__22_i = (local_bb5_cmp_i & local_bb5_lnot14_not_i);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u16_stall_local;
wire local_bb5_var__u16;

assign local_bb5_var__u16 = ((local_bb5_var__u12 & 32'h7FFFFF) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_reduction_3_i_stall_local;
wire local_bb5_reduction_3_i;

assign local_bb5_reduction_3_i = (local_bb5_lnot_i | local_bb5_lnot8_i);

// This section implements an unregistered operation.
// 
wire local_bb5_brmerge13_demorgan_i_stall_local;
wire local_bb5_brmerge13_demorgan_i;

assign local_bb5_brmerge13_demorgan_i = (local_bb5_cmp11_i & local_bb5_lnot17_i);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u17_stall_local;
wire local_bb5_var__u17;

assign local_bb5_var__u17 = (local_bb5_cmp_i | local_bb5_cmp11_i);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u18_stall_local;
wire local_bb5_var__u18;

assign local_bb5_var__u18 = ((local_bb5_var__u13 & 32'h7FFFFF) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_and2_i23_stall_local;
wire [31:0] local_bb5_and2_i23;

assign local_bb5_and2_i23 = (local_bb5_var__u15 >> 32'h10);

// This section implements an unregistered operation.
// 
wire local_bb5_and12_i28_stall_local;
wire [31:0] local_bb5_and12_i28;

assign local_bb5_and12_i28 = (local_bb5_var__u15 & 32'hFFFF);

// This section implements an unregistered operation.
// 
wire local_bb5_j_522_LC_InnerPHI_valid_out;
wire local_bb5_j_522_LC_InnerPHI_stall_in;
wire local_bb5_j_522_LC_InnerPHI_inputs_ready;
wire local_bb5_j_522_LC_InnerPHI_stall_local;
wire [31:0] local_bb5_j_522_LC_InnerPHI;

assign local_bb5_j_522_LC_InnerPHI_inputs_ready = (rnode_172to173_bb5_cmp23_0_valid_out_0_NO_SHIFT_REG & rnode_172to173_bb5_inc_0_valid_out_NO_SHIFT_REG);
assign local_bb5_j_522_LC_InnerPHI = (rnode_172to173_bb5_cmp23_0_NO_SHIFT_REG ? rnode_172to173_bb5_inc_0_NO_SHIFT_REG : 32'h0);
assign local_bb5_j_522_LC_InnerPHI_valid_out = 1'b1;
assign rnode_172to173_bb5_cmp23_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_172to173_bb5_inc_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_i_426_LC_OuterPHI_valid_out;
wire local_bb5_i_426_LC_OuterPHI_stall_in;
wire local_bb5_i_426_LC_OuterPHI_inputs_ready;
wire local_bb5_i_426_LC_OuterPHI_stall_local;
wire [31:0] local_bb5_i_426_LC_OuterPHI;

assign local_bb5_i_426_LC_OuterPHI_inputs_ready = (rnode_172to173_bb5_cmp23_0_valid_out_1_NO_SHIFT_REG & rnode_171to173_bb5_c2_ene6_0_valid_out_NO_SHIFT_REG & rnode_172to173_bb5_inc61_0_valid_out_NO_SHIFT_REG);
assign local_bb5_i_426_LC_OuterPHI = (rnode_172to173_bb5_cmp23_1_NO_SHIFT_REG ? rnode_171to173_bb5_c2_ene6_0_NO_SHIFT_REG : rnode_172to173_bb5_inc61_0_NO_SHIFT_REG);
assign local_bb5_i_426_LC_OuterPHI_valid_out = 1'b1;
assign rnode_172to173_bb5_cmp23_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_171to173_bb5_c2_ene6_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_172to173_bb5_inc61_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_for_inc63_loopexit_loopexit_LC_COND_stall_local;
wire local_bb5_for_inc63_loopexit_loopexit_LC_COND;

assign local_bb5_for_inc63_loopexit_loopexit_LC_COND = (rnode_172to173_bb5_cmp23_2_NO_SHIFT_REG | rnode_172to173_bb5_cmp18_0_NO_SHIFT_REG);

// This section implements a registered operation.
// 
wire SFC_9_VALID_175_176_0_inputs_ready;
 reg SFC_9_VALID_175_176_0_valid_out_NO_SHIFT_REG;
wire SFC_9_VALID_175_176_0_stall_in;
wire SFC_9_VALID_175_176_0_output_regs_ready;
 reg SFC_9_VALID_175_176_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_9_VALID_175_176_0_causedstall;

assign SFC_9_VALID_175_176_0_inputs_ready = 1'b1;
assign SFC_9_VALID_175_176_0_output_regs_ready = 1'b1;
assign SFC_9_VALID_174_175_0_stall_in = 1'b0;
assign SFC_9_VALID_175_176_0_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_9_VALID_175_176_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_9_VALID_175_176_0_output_regs_ready)
		begin
			SFC_9_VALID_175_176_0_NO_SHIFT_REG <= SFC_9_VALID_174_175_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5__20_demorgan_i_stall_local;
wire local_bb5__20_demorgan_i;

assign local_bb5__20_demorgan_i = (local_bb5_cmp_i | local_bb5_brmerge13_demorgan_i);

// This section implements an unregistered operation.
// 
wire local_bb5__not_i_stall_local;
wire local_bb5__not_i;

assign local_bb5__not_i = (local_bb5_var__u18 ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb5__mux_mux_i_stall_local;
wire local_bb5__mux_mux_i;

assign local_bb5__mux_mux_i = (local_bb5_var__u18 | local_bb5_cmp11_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shr3_i24_stall_local;
wire [31:0] local_bb5_shr3_i24;

assign local_bb5_shr3_i24 = ((local_bb5_and2_i23 & 32'hFFFF) & 32'h7FFF);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_173to174_bb5_j_522_LC_InnerPHI_0_valid_out_NO_SHIFT_REG;
 logic rnode_173to174_bb5_j_522_LC_InnerPHI_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_173to174_bb5_j_522_LC_InnerPHI_0_NO_SHIFT_REG;
 logic rnode_173to174_bb5_j_522_LC_InnerPHI_0_reg_174_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_173to174_bb5_j_522_LC_InnerPHI_0_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5_j_522_LC_InnerPHI_0_valid_out_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5_j_522_LC_InnerPHI_0_stall_in_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5_j_522_LC_InnerPHI_0_stall_out_reg_174_NO_SHIFT_REG;

acl_data_fifo rnode_173to174_bb5_j_522_LC_InnerPHI_0_reg_174_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_173to174_bb5_j_522_LC_InnerPHI_0_reg_174_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_173to174_bb5_j_522_LC_InnerPHI_0_stall_in_reg_174_NO_SHIFT_REG),
	.valid_out(rnode_173to174_bb5_j_522_LC_InnerPHI_0_valid_out_reg_174_NO_SHIFT_REG),
	.stall_out(rnode_173to174_bb5_j_522_LC_InnerPHI_0_stall_out_reg_174_NO_SHIFT_REG),
	.data_in(local_bb5_j_522_LC_InnerPHI),
	.data_out(rnode_173to174_bb5_j_522_LC_InnerPHI_0_reg_174_NO_SHIFT_REG)
);

defparam rnode_173to174_bb5_j_522_LC_InnerPHI_0_reg_174_fifo.DEPTH = 1;
defparam rnode_173to174_bb5_j_522_LC_InnerPHI_0_reg_174_fifo.DATA_WIDTH = 32;
defparam rnode_173to174_bb5_j_522_LC_InnerPHI_0_reg_174_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_173to174_bb5_j_522_LC_InnerPHI_0_reg_174_fifo.IMPL = "shift_reg";

assign rnode_173to174_bb5_j_522_LC_InnerPHI_0_reg_174_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_j_522_LC_InnerPHI_stall_in = 1'b0;
assign rnode_173to174_bb5_j_522_LC_InnerPHI_0_NO_SHIFT_REG = rnode_173to174_bb5_j_522_LC_InnerPHI_0_reg_174_NO_SHIFT_REG;
assign rnode_173to174_bb5_j_522_LC_InnerPHI_0_stall_in_reg_174_NO_SHIFT_REG = 1'b0;
assign rnode_173to174_bb5_j_522_LC_InnerPHI_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_173to174_bb5_i_426_LC_OuterPHI_0_valid_out_NO_SHIFT_REG;
 logic rnode_173to174_bb5_i_426_LC_OuterPHI_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_173to174_bb5_i_426_LC_OuterPHI_0_NO_SHIFT_REG;
 logic rnode_173to174_bb5_i_426_LC_OuterPHI_0_reg_174_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_173to174_bb5_i_426_LC_OuterPHI_0_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5_i_426_LC_OuterPHI_0_valid_out_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5_i_426_LC_OuterPHI_0_stall_in_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5_i_426_LC_OuterPHI_0_stall_out_reg_174_NO_SHIFT_REG;

acl_data_fifo rnode_173to174_bb5_i_426_LC_OuterPHI_0_reg_174_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_173to174_bb5_i_426_LC_OuterPHI_0_reg_174_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_173to174_bb5_i_426_LC_OuterPHI_0_stall_in_reg_174_NO_SHIFT_REG),
	.valid_out(rnode_173to174_bb5_i_426_LC_OuterPHI_0_valid_out_reg_174_NO_SHIFT_REG),
	.stall_out(rnode_173to174_bb5_i_426_LC_OuterPHI_0_stall_out_reg_174_NO_SHIFT_REG),
	.data_in(local_bb5_i_426_LC_OuterPHI),
	.data_out(rnode_173to174_bb5_i_426_LC_OuterPHI_0_reg_174_NO_SHIFT_REG)
);

defparam rnode_173to174_bb5_i_426_LC_OuterPHI_0_reg_174_fifo.DEPTH = 1;
defparam rnode_173to174_bb5_i_426_LC_OuterPHI_0_reg_174_fifo.DATA_WIDTH = 32;
defparam rnode_173to174_bb5_i_426_LC_OuterPHI_0_reg_174_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_173to174_bb5_i_426_LC_OuterPHI_0_reg_174_fifo.IMPL = "shift_reg";

assign rnode_173to174_bb5_i_426_LC_OuterPHI_0_reg_174_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_i_426_LC_OuterPHI_stall_in = 1'b0;
assign rnode_173to174_bb5_i_426_LC_OuterPHI_0_NO_SHIFT_REG = rnode_173to174_bb5_i_426_LC_OuterPHI_0_reg_174_NO_SHIFT_REG;
assign rnode_173to174_bb5_i_426_LC_OuterPHI_0_stall_in_reg_174_NO_SHIFT_REG = 1'b0;
assign rnode_173to174_bb5_i_426_LC_OuterPHI_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_stall_local;
wire local_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan;

assign local_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan = (local_bb5_for_inc63_loopexit_loopexit_LC_COND & rnode_171to173_bb5_c2_ene7_0_NO_SHIFT_REG);

// This section implements a registered operation.
// 
wire SFC_9_VALID_176_177_0_inputs_ready;
 reg SFC_9_VALID_176_177_0_valid_out_NO_SHIFT_REG;
wire SFC_9_VALID_176_177_0_stall_in;
wire SFC_9_VALID_176_177_0_output_regs_ready;
 reg SFC_9_VALID_176_177_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_9_VALID_176_177_0_causedstall;

assign SFC_9_VALID_176_177_0_inputs_ready = 1'b1;
assign SFC_9_VALID_176_177_0_output_regs_ready = 1'b1;
assign SFC_9_VALID_175_176_0_stall_in = 1'b0;
assign SFC_9_VALID_176_177_0_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_9_VALID_176_177_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_9_VALID_176_177_0_output_regs_ready)
		begin
			SFC_9_VALID_176_177_0_NO_SHIFT_REG <= SFC_9_VALID_175_176_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_reduction_1_i_stall_local;
wire local_bb5_reduction_1_i;

assign local_bb5_reduction_1_i = (local_bb5_cmp11_i & local_bb5__not_i);

// Register node:
//  * latency = 10
//  * capacity = 10
 logic rnode_174to184_bb5_j_522_LC_InnerPHI_0_valid_out_NO_SHIFT_REG;
 logic rnode_174to184_bb5_j_522_LC_InnerPHI_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_174to184_bb5_j_522_LC_InnerPHI_0_NO_SHIFT_REG;
 logic rnode_174to184_bb5_j_522_LC_InnerPHI_0_reg_184_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_174to184_bb5_j_522_LC_InnerPHI_0_reg_184_NO_SHIFT_REG;
 logic rnode_174to184_bb5_j_522_LC_InnerPHI_0_valid_out_reg_184_NO_SHIFT_REG;
 logic rnode_174to184_bb5_j_522_LC_InnerPHI_0_stall_in_reg_184_NO_SHIFT_REG;
 logic rnode_174to184_bb5_j_522_LC_InnerPHI_0_stall_out_reg_184_NO_SHIFT_REG;

acl_data_fifo rnode_174to184_bb5_j_522_LC_InnerPHI_0_reg_184_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_174to184_bb5_j_522_LC_InnerPHI_0_reg_184_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_174to184_bb5_j_522_LC_InnerPHI_0_stall_in_reg_184_NO_SHIFT_REG),
	.valid_out(rnode_174to184_bb5_j_522_LC_InnerPHI_0_valid_out_reg_184_NO_SHIFT_REG),
	.stall_out(rnode_174to184_bb5_j_522_LC_InnerPHI_0_stall_out_reg_184_NO_SHIFT_REG),
	.data_in(rnode_173to174_bb5_j_522_LC_InnerPHI_0_NO_SHIFT_REG),
	.data_out(rnode_174to184_bb5_j_522_LC_InnerPHI_0_reg_184_NO_SHIFT_REG)
);

defparam rnode_174to184_bb5_j_522_LC_InnerPHI_0_reg_184_fifo.DEPTH = 10;
defparam rnode_174to184_bb5_j_522_LC_InnerPHI_0_reg_184_fifo.DATA_WIDTH = 32;
defparam rnode_174to184_bb5_j_522_LC_InnerPHI_0_reg_184_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_174to184_bb5_j_522_LC_InnerPHI_0_reg_184_fifo.IMPL = "shift_reg";

assign rnode_174to184_bb5_j_522_LC_InnerPHI_0_reg_184_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_173to174_bb5_j_522_LC_InnerPHI_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_174to184_bb5_j_522_LC_InnerPHI_0_NO_SHIFT_REG = rnode_174to184_bb5_j_522_LC_InnerPHI_0_reg_184_NO_SHIFT_REG;
assign rnode_174to184_bb5_j_522_LC_InnerPHI_0_stall_in_reg_184_NO_SHIFT_REG = 1'b0;
assign rnode_174to184_bb5_j_522_LC_InnerPHI_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 10
//  * capacity = 10
 logic rnode_174to184_bb5_i_426_LC_OuterPHI_0_valid_out_NO_SHIFT_REG;
 logic rnode_174to184_bb5_i_426_LC_OuterPHI_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_174to184_bb5_i_426_LC_OuterPHI_0_NO_SHIFT_REG;
 logic rnode_174to184_bb5_i_426_LC_OuterPHI_0_reg_184_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_174to184_bb5_i_426_LC_OuterPHI_0_reg_184_NO_SHIFT_REG;
 logic rnode_174to184_bb5_i_426_LC_OuterPHI_0_valid_out_reg_184_NO_SHIFT_REG;
 logic rnode_174to184_bb5_i_426_LC_OuterPHI_0_stall_in_reg_184_NO_SHIFT_REG;
 logic rnode_174to184_bb5_i_426_LC_OuterPHI_0_stall_out_reg_184_NO_SHIFT_REG;

acl_data_fifo rnode_174to184_bb5_i_426_LC_OuterPHI_0_reg_184_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_174to184_bb5_i_426_LC_OuterPHI_0_reg_184_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_174to184_bb5_i_426_LC_OuterPHI_0_stall_in_reg_184_NO_SHIFT_REG),
	.valid_out(rnode_174to184_bb5_i_426_LC_OuterPHI_0_valid_out_reg_184_NO_SHIFT_REG),
	.stall_out(rnode_174to184_bb5_i_426_LC_OuterPHI_0_stall_out_reg_184_NO_SHIFT_REG),
	.data_in(rnode_173to174_bb5_i_426_LC_OuterPHI_0_NO_SHIFT_REG),
	.data_out(rnode_174to184_bb5_i_426_LC_OuterPHI_0_reg_184_NO_SHIFT_REG)
);

defparam rnode_174to184_bb5_i_426_LC_OuterPHI_0_reg_184_fifo.DEPTH = 10;
defparam rnode_174to184_bb5_i_426_LC_OuterPHI_0_reg_184_fifo.DATA_WIDTH = 32;
defparam rnode_174to184_bb5_i_426_LC_OuterPHI_0_reg_184_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_174to184_bb5_i_426_LC_OuterPHI_0_reg_184_fifo.IMPL = "shift_reg";

assign rnode_174to184_bb5_i_426_LC_OuterPHI_0_reg_184_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_173to174_bb5_i_426_LC_OuterPHI_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_174to184_bb5_i_426_LC_OuterPHI_0_NO_SHIFT_REG = rnode_174to184_bb5_i_426_LC_OuterPHI_0_reg_184_NO_SHIFT_REG;
assign rnode_174to184_bb5_i_426_LC_OuterPHI_0_stall_in_reg_184_NO_SHIFT_REG = 1'b0;
assign rnode_174to184_bb5_i_426_LC_OuterPHI_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5__LC_OuterPHI_stall_local;
wire [31:0] local_bb5__LC_OuterPHI;

assign local_bb5__LC_OuterPHI = (local_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan ? rnode_171to173_bb5_c2_ene9_1_NO_SHIFT_REG : local_bb5_select83);

// This section implements an unregistered operation.
// 
wire local_bb5_c_332_LC_OuterPHI_stall_local;
wire [31:0] local_bb5_c_332_LC_OuterPHI;

assign local_bb5_c_332_LC_OuterPHI = (local_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan ? rnode_171to173_bb5_c2_ene11_0_NO_SHIFT_REG : rnode_172to173_bb5_inc64_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb5_for_end65_loopexit_loopexit_LC_COND_stall_local;
wire local_bb5_for_end65_loopexit_loopexit_LC_COND;

assign local_bb5_for_end65_loopexit_loopexit_LC_COND = (local_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan | rnode_172to173_bb5_cmp14_0_NO_SHIFT_REG);

// This section implements a registered operation.
// 
wire SFC_9_VALID_177_178_0_inputs_ready;
 reg SFC_9_VALID_177_178_0_valid_out_NO_SHIFT_REG;
wire SFC_9_VALID_177_178_0_stall_in;
wire SFC_9_VALID_177_178_0_output_regs_ready;
 reg SFC_9_VALID_177_178_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_9_VALID_177_178_0_causedstall;

assign SFC_9_VALID_177_178_0_inputs_ready = 1'b1;
assign SFC_9_VALID_177_178_0_output_regs_ready = 1'b1;
assign SFC_9_VALID_176_177_0_stall_in = 1'b0;
assign SFC_9_VALID_177_178_0_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_9_VALID_177_178_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_9_VALID_177_178_0_output_regs_ready)
		begin
			SFC_9_VALID_177_178_0_NO_SHIFT_REG <= SFC_9_VALID_176_177_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_reduction_2_i_stall_local;
wire local_bb5_reduction_2_i;

assign local_bb5_reduction_2_i = (local_bb5_var__u14 & local_bb5_reduction_1_i);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_184to185_bb5_j_522_LC_InnerPHI_0_valid_out_NO_SHIFT_REG;
 logic rnode_184to185_bb5_j_522_LC_InnerPHI_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_184to185_bb5_j_522_LC_InnerPHI_0_NO_SHIFT_REG;
 logic rnode_184to185_bb5_j_522_LC_InnerPHI_0_reg_185_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_184to185_bb5_j_522_LC_InnerPHI_0_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5_j_522_LC_InnerPHI_0_valid_out_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5_j_522_LC_InnerPHI_0_stall_in_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5_j_522_LC_InnerPHI_0_stall_out_reg_185_NO_SHIFT_REG;

acl_data_fifo rnode_184to185_bb5_j_522_LC_InnerPHI_0_reg_185_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_184to185_bb5_j_522_LC_InnerPHI_0_reg_185_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_184to185_bb5_j_522_LC_InnerPHI_0_stall_in_reg_185_NO_SHIFT_REG),
	.valid_out(rnode_184to185_bb5_j_522_LC_InnerPHI_0_valid_out_reg_185_NO_SHIFT_REG),
	.stall_out(rnode_184to185_bb5_j_522_LC_InnerPHI_0_stall_out_reg_185_NO_SHIFT_REG),
	.data_in(rnode_174to184_bb5_j_522_LC_InnerPHI_0_NO_SHIFT_REG),
	.data_out(rnode_184to185_bb5_j_522_LC_InnerPHI_0_reg_185_NO_SHIFT_REG)
);

defparam rnode_184to185_bb5_j_522_LC_InnerPHI_0_reg_185_fifo.DEPTH = 1;
defparam rnode_184to185_bb5_j_522_LC_InnerPHI_0_reg_185_fifo.DATA_WIDTH = 32;
defparam rnode_184to185_bb5_j_522_LC_InnerPHI_0_reg_185_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_184to185_bb5_j_522_LC_InnerPHI_0_reg_185_fifo.IMPL = "shift_reg";

assign rnode_184to185_bb5_j_522_LC_InnerPHI_0_reg_185_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_174to184_bb5_j_522_LC_InnerPHI_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_j_522_LC_InnerPHI_0_NO_SHIFT_REG = rnode_184to185_bb5_j_522_LC_InnerPHI_0_reg_185_NO_SHIFT_REG;
assign rnode_184to185_bb5_j_522_LC_InnerPHI_0_stall_in_reg_185_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_j_522_LC_InnerPHI_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_184to185_bb5_i_426_LC_OuterPHI_0_valid_out_NO_SHIFT_REG;
 logic rnode_184to185_bb5_i_426_LC_OuterPHI_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_184to185_bb5_i_426_LC_OuterPHI_0_NO_SHIFT_REG;
 logic rnode_184to185_bb5_i_426_LC_OuterPHI_0_reg_185_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_184to185_bb5_i_426_LC_OuterPHI_0_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5_i_426_LC_OuterPHI_0_valid_out_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5_i_426_LC_OuterPHI_0_stall_in_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5_i_426_LC_OuterPHI_0_stall_out_reg_185_NO_SHIFT_REG;

acl_data_fifo rnode_184to185_bb5_i_426_LC_OuterPHI_0_reg_185_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_184to185_bb5_i_426_LC_OuterPHI_0_reg_185_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_184to185_bb5_i_426_LC_OuterPHI_0_stall_in_reg_185_NO_SHIFT_REG),
	.valid_out(rnode_184to185_bb5_i_426_LC_OuterPHI_0_valid_out_reg_185_NO_SHIFT_REG),
	.stall_out(rnode_184to185_bb5_i_426_LC_OuterPHI_0_stall_out_reg_185_NO_SHIFT_REG),
	.data_in(rnode_174to184_bb5_i_426_LC_OuterPHI_0_NO_SHIFT_REG),
	.data_out(rnode_184to185_bb5_i_426_LC_OuterPHI_0_reg_185_NO_SHIFT_REG)
);

defparam rnode_184to185_bb5_i_426_LC_OuterPHI_0_reg_185_fifo.DEPTH = 1;
defparam rnode_184to185_bb5_i_426_LC_OuterPHI_0_reg_185_fifo.DATA_WIDTH = 32;
defparam rnode_184to185_bb5_i_426_LC_OuterPHI_0_reg_185_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_184to185_bb5_i_426_LC_OuterPHI_0_reg_185_fifo.IMPL = "shift_reg";

assign rnode_184to185_bb5_i_426_LC_OuterPHI_0_reg_185_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_174to184_bb5_i_426_LC_OuterPHI_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_i_426_LC_OuterPHI_0_NO_SHIFT_REG = rnode_184to185_bb5_i_426_LC_OuterPHI_0_reg_185_NO_SHIFT_REG;
assign rnode_184to185_bb5_i_426_LC_OuterPHI_0_stall_in_reg_185_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_i_426_LC_OuterPHI_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_for_end65_loopexit_loopexit_LC_COND97_GUARD_demorgan_stall_local;
wire local_bb5_for_end65_loopexit_loopexit_LC_COND97_GUARD_demorgan;

assign local_bb5_for_end65_loopexit_loopexit_LC_COND97_GUARD_demorgan = (local_bb5_for_end65_loopexit_loopexit_LC_COND & rnode_171to173_bb5_c2_ene13_0_NO_SHIFT_REG);

// This section implements a registered operation.
// 
wire SFC_9_VALID_178_179_0_inputs_ready;
 reg SFC_9_VALID_178_179_0_valid_out_NO_SHIFT_REG;
wire SFC_9_VALID_178_179_0_stall_in;
wire SFC_9_VALID_178_179_0_output_regs_ready;
 reg SFC_9_VALID_178_179_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_9_VALID_178_179_0_causedstall;

assign SFC_9_VALID_178_179_0_inputs_ready = 1'b1;
assign SFC_9_VALID_178_179_0_output_regs_ready = 1'b1;
assign SFC_9_VALID_177_178_0_stall_in = 1'b0;
assign SFC_9_VALID_178_179_0_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_9_VALID_178_179_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_9_VALID_178_179_0_output_regs_ready)
		begin
			SFC_9_VALID_178_179_0_NO_SHIFT_REG <= SFC_9_VALID_177_178_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5__18_i_stall_local;
wire local_bb5__18_i;

assign local_bb5__18_i = (local_bb5_cmp_i ? local_bb5_reduction_2_i : local_bb5_brmerge13_demorgan_i);

// This section implements an unregistered operation.
// 
wire local_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_valid_out_3;
wire local_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_stall_in_3;
wire local_bb5__LC_OuterPHI_valid_out;
wire local_bb5__LC_OuterPHI_stall_in;
wire local_bb5_c_332_LC_OuterPHI_valid_out;
wire local_bb5_c_332_LC_OuterPHI_stall_in;
wire local_bb5_select83_valid_out_1;
wire local_bb5_select83_stall_in_1;
wire local_bb5__demorgan_valid_out;
wire local_bb5__demorgan_stall_in;
wire local_bb5__demorgan_inputs_ready;
wire local_bb5__demorgan_stall_local;
wire local_bb5__demorgan;

assign local_bb5__demorgan_inputs_ready = (rnode_171to173_bb5_c2_ene7_0_valid_out_0_NO_SHIFT_REG & rnode_171to173_bb5_c2_ene9_0_valid_out_1_NO_SHIFT_REG & rnode_171to173_bb5_c2_ene11_0_valid_out_NO_SHIFT_REG & rnode_172to173_bb5_inc64_0_valid_out_NO_SHIFT_REG & rnode_172to173_bb5_cmp14_0_valid_out_NO_SHIFT_REG & rnode_171to173_bb5_c2_ene8_0_valid_out_NO_SHIFT_REG & rnode_171to173_bb5_c2_ene9_0_valid_out_0_NO_SHIFT_REG & rnode_171to173_bb5_c2_ene7_0_valid_out_1_NO_SHIFT_REG & rnode_171to173_bb5_c2_ene13_0_valid_out_NO_SHIFT_REG & rnode_171to173_bb5_c2_ene14_0_valid_out_NO_SHIFT_REG & rnode_172to173_bb5_cmp23_0_valid_out_2_NO_SHIFT_REG & rnode_172to173_bb5_cmp18_0_valid_out_NO_SHIFT_REG);
assign local_bb5__demorgan = (rnode_171to173_bb5_c2_ene14_0_NO_SHIFT_REG & local_bb5_for_end65_loopexit_loopexit_LC_COND97_GUARD_demorgan);
assign local_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_valid_out_3 = 1'b1;
assign local_bb5__LC_OuterPHI_valid_out = 1'b1;
assign local_bb5_c_332_LC_OuterPHI_valid_out = 1'b1;
assign local_bb5_select83_valid_out_1 = 1'b1;
assign local_bb5__demorgan_valid_out = 1'b1;
assign rnode_171to173_bb5_c2_ene7_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_171to173_bb5_c2_ene9_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_171to173_bb5_c2_ene11_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_172to173_bb5_inc64_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_172to173_bb5_cmp14_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_171to173_bb5_c2_ene8_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_171to173_bb5_c2_ene9_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_171to173_bb5_c2_ene7_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_171to173_bb5_c2_ene13_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_171to173_bb5_c2_ene14_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_172to173_bb5_cmp23_0_stall_in_2_NO_SHIFT_REG = 1'b0;
assign rnode_172to173_bb5_cmp18_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements a registered operation.
// 
wire SFC_9_VALID_179_180_0_inputs_ready;
 reg SFC_9_VALID_179_180_0_valid_out_NO_SHIFT_REG;
wire SFC_9_VALID_179_180_0_stall_in;
wire SFC_9_VALID_179_180_0_output_regs_ready;
 reg SFC_9_VALID_179_180_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_9_VALID_179_180_0_causedstall;

assign SFC_9_VALID_179_180_0_inputs_ready = 1'b1;
assign SFC_9_VALID_179_180_0_output_regs_ready = 1'b1;
assign SFC_9_VALID_178_179_0_stall_in = 1'b0;
assign SFC_9_VALID_179_180_0_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_9_VALID_179_180_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_9_VALID_179_180_0_output_regs_ready)
		begin
			SFC_9_VALID_179_180_0_NO_SHIFT_REG <= SFC_9_VALID_178_179_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5__19_i_stall_local;
wire local_bb5__19_i;

assign local_bb5__19_i = (local_bb5__18_i ? local_bb5_var__u16 : local_bb5__mux_mux_i);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_173to174_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_valid_out_NO_SHIFT_REG;
 logic rnode_173to174_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_in_NO_SHIFT_REG;
 logic rnode_173to174_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_NO_SHIFT_REG;
 logic rnode_173to174_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_174_inputs_ready_NO_SHIFT_REG;
 logic rnode_173to174_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_valid_out_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_in_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_out_reg_174_NO_SHIFT_REG;

acl_data_fifo rnode_173to174_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_174_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_173to174_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_174_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_173to174_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_in_reg_174_NO_SHIFT_REG),
	.valid_out(rnode_173to174_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_valid_out_reg_174_NO_SHIFT_REG),
	.stall_out(rnode_173to174_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_out_reg_174_NO_SHIFT_REG),
	.data_in(local_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan),
	.data_out(rnode_173to174_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_174_NO_SHIFT_REG)
);

defparam rnode_173to174_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_174_fifo.DEPTH = 1;
defparam rnode_173to174_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_174_fifo.DATA_WIDTH = 1;
defparam rnode_173to174_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_174_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_173to174_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_174_fifo.IMPL = "shift_reg";

assign rnode_173to174_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_174_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_stall_in_3 = 1'b0;
assign rnode_173to174_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_NO_SHIFT_REG = rnode_173to174_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_174_NO_SHIFT_REG;
assign rnode_173to174_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_in_reg_174_NO_SHIFT_REG = 1'b0;
assign rnode_173to174_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_173to174_bb5__LC_OuterPHI_0_valid_out_NO_SHIFT_REG;
 logic rnode_173to174_bb5__LC_OuterPHI_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_173to174_bb5__LC_OuterPHI_0_NO_SHIFT_REG;
 logic rnode_173to174_bb5__LC_OuterPHI_0_reg_174_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_173to174_bb5__LC_OuterPHI_0_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5__LC_OuterPHI_0_valid_out_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5__LC_OuterPHI_0_stall_in_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5__LC_OuterPHI_0_stall_out_reg_174_NO_SHIFT_REG;

acl_data_fifo rnode_173to174_bb5__LC_OuterPHI_0_reg_174_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_173to174_bb5__LC_OuterPHI_0_reg_174_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_173to174_bb5__LC_OuterPHI_0_stall_in_reg_174_NO_SHIFT_REG),
	.valid_out(rnode_173to174_bb5__LC_OuterPHI_0_valid_out_reg_174_NO_SHIFT_REG),
	.stall_out(rnode_173to174_bb5__LC_OuterPHI_0_stall_out_reg_174_NO_SHIFT_REG),
	.data_in(local_bb5__LC_OuterPHI),
	.data_out(rnode_173to174_bb5__LC_OuterPHI_0_reg_174_NO_SHIFT_REG)
);

defparam rnode_173to174_bb5__LC_OuterPHI_0_reg_174_fifo.DEPTH = 1;
defparam rnode_173to174_bb5__LC_OuterPHI_0_reg_174_fifo.DATA_WIDTH = 32;
defparam rnode_173to174_bb5__LC_OuterPHI_0_reg_174_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_173to174_bb5__LC_OuterPHI_0_reg_174_fifo.IMPL = "shift_reg";

assign rnode_173to174_bb5__LC_OuterPHI_0_reg_174_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5__LC_OuterPHI_stall_in = 1'b0;
assign rnode_173to174_bb5__LC_OuterPHI_0_NO_SHIFT_REG = rnode_173to174_bb5__LC_OuterPHI_0_reg_174_NO_SHIFT_REG;
assign rnode_173to174_bb5__LC_OuterPHI_0_stall_in_reg_174_NO_SHIFT_REG = 1'b0;
assign rnode_173to174_bb5__LC_OuterPHI_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_173to174_bb5_c_332_LC_OuterPHI_0_valid_out_NO_SHIFT_REG;
 logic rnode_173to174_bb5_c_332_LC_OuterPHI_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_173to174_bb5_c_332_LC_OuterPHI_0_NO_SHIFT_REG;
 logic rnode_173to174_bb5_c_332_LC_OuterPHI_0_reg_174_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_173to174_bb5_c_332_LC_OuterPHI_0_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5_c_332_LC_OuterPHI_0_valid_out_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5_c_332_LC_OuterPHI_0_stall_in_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5_c_332_LC_OuterPHI_0_stall_out_reg_174_NO_SHIFT_REG;

acl_data_fifo rnode_173to174_bb5_c_332_LC_OuterPHI_0_reg_174_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_173to174_bb5_c_332_LC_OuterPHI_0_reg_174_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_173to174_bb5_c_332_LC_OuterPHI_0_stall_in_reg_174_NO_SHIFT_REG),
	.valid_out(rnode_173to174_bb5_c_332_LC_OuterPHI_0_valid_out_reg_174_NO_SHIFT_REG),
	.stall_out(rnode_173to174_bb5_c_332_LC_OuterPHI_0_stall_out_reg_174_NO_SHIFT_REG),
	.data_in(local_bb5_c_332_LC_OuterPHI),
	.data_out(rnode_173to174_bb5_c_332_LC_OuterPHI_0_reg_174_NO_SHIFT_REG)
);

defparam rnode_173to174_bb5_c_332_LC_OuterPHI_0_reg_174_fifo.DEPTH = 1;
defparam rnode_173to174_bb5_c_332_LC_OuterPHI_0_reg_174_fifo.DATA_WIDTH = 32;
defparam rnode_173to174_bb5_c_332_LC_OuterPHI_0_reg_174_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_173to174_bb5_c_332_LC_OuterPHI_0_reg_174_fifo.IMPL = "shift_reg";

assign rnode_173to174_bb5_c_332_LC_OuterPHI_0_reg_174_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_c_332_LC_OuterPHI_stall_in = 1'b0;
assign rnode_173to174_bb5_c_332_LC_OuterPHI_0_NO_SHIFT_REG = rnode_173to174_bb5_c_332_LC_OuterPHI_0_reg_174_NO_SHIFT_REG;
assign rnode_173to174_bb5_c_332_LC_OuterPHI_0_stall_in_reg_174_NO_SHIFT_REG = 1'b0;
assign rnode_173to174_bb5_c_332_LC_OuterPHI_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_173to174_bb5_select83_0_valid_out_NO_SHIFT_REG;
 logic rnode_173to174_bb5_select83_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_173to174_bb5_select83_0_NO_SHIFT_REG;
 logic rnode_173to174_bb5_select83_0_reg_174_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_173to174_bb5_select83_0_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5_select83_0_valid_out_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5_select83_0_stall_in_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5_select83_0_stall_out_reg_174_NO_SHIFT_REG;

acl_data_fifo rnode_173to174_bb5_select83_0_reg_174_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_173to174_bb5_select83_0_reg_174_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_173to174_bb5_select83_0_stall_in_reg_174_NO_SHIFT_REG),
	.valid_out(rnode_173to174_bb5_select83_0_valid_out_reg_174_NO_SHIFT_REG),
	.stall_out(rnode_173to174_bb5_select83_0_stall_out_reg_174_NO_SHIFT_REG),
	.data_in(local_bb5_select83),
	.data_out(rnode_173to174_bb5_select83_0_reg_174_NO_SHIFT_REG)
);

defparam rnode_173to174_bb5_select83_0_reg_174_fifo.DEPTH = 1;
defparam rnode_173to174_bb5_select83_0_reg_174_fifo.DATA_WIDTH = 32;
defparam rnode_173to174_bb5_select83_0_reg_174_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_173to174_bb5_select83_0_reg_174_fifo.IMPL = "shift_reg";

assign rnode_173to174_bb5_select83_0_reg_174_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_select83_stall_in_1 = 1'b0;
assign rnode_173to174_bb5_select83_0_NO_SHIFT_REG = rnode_173to174_bb5_select83_0_reg_174_NO_SHIFT_REG;
assign rnode_173to174_bb5_select83_0_stall_in_reg_174_NO_SHIFT_REG = 1'b0;
assign rnode_173to174_bb5_select83_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_173to174_bb5__demorgan_0_valid_out_NO_SHIFT_REG;
 logic rnode_173to174_bb5__demorgan_0_stall_in_NO_SHIFT_REG;
 logic rnode_173to174_bb5__demorgan_0_NO_SHIFT_REG;
 logic rnode_173to174_bb5__demorgan_0_reg_174_inputs_ready_NO_SHIFT_REG;
 logic rnode_173to174_bb5__demorgan_0_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5__demorgan_0_valid_out_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5__demorgan_0_stall_in_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5__demorgan_0_stall_out_reg_174_NO_SHIFT_REG;

acl_data_fifo rnode_173to174_bb5__demorgan_0_reg_174_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_173to174_bb5__demorgan_0_reg_174_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_173to174_bb5__demorgan_0_stall_in_reg_174_NO_SHIFT_REG),
	.valid_out(rnode_173to174_bb5__demorgan_0_valid_out_reg_174_NO_SHIFT_REG),
	.stall_out(rnode_173to174_bb5__demorgan_0_stall_out_reg_174_NO_SHIFT_REG),
	.data_in(local_bb5__demorgan),
	.data_out(rnode_173to174_bb5__demorgan_0_reg_174_NO_SHIFT_REG)
);

defparam rnode_173to174_bb5__demorgan_0_reg_174_fifo.DEPTH = 1;
defparam rnode_173to174_bb5__demorgan_0_reg_174_fifo.DATA_WIDTH = 1;
defparam rnode_173to174_bb5__demorgan_0_reg_174_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_173to174_bb5__demorgan_0_reg_174_fifo.IMPL = "shift_reg";

assign rnode_173to174_bb5__demorgan_0_reg_174_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5__demorgan_stall_in = 1'b0;
assign rnode_173to174_bb5__demorgan_0_NO_SHIFT_REG = rnode_173to174_bb5__demorgan_0_reg_174_NO_SHIFT_REG;
assign rnode_173to174_bb5__demorgan_0_stall_in_reg_174_NO_SHIFT_REG = 1'b0;
assign rnode_173to174_bb5__demorgan_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_9_VALID_180_181_0_inputs_ready;
 reg SFC_9_VALID_180_181_0_valid_out_NO_SHIFT_REG;
wire SFC_9_VALID_180_181_0_stall_in;
wire SFC_9_VALID_180_181_0_output_regs_ready;
 reg SFC_9_VALID_180_181_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_9_VALID_180_181_0_causedstall;

assign SFC_9_VALID_180_181_0_inputs_ready = 1'b1;
assign SFC_9_VALID_180_181_0_output_regs_ready = 1'b1;
assign SFC_9_VALID_179_180_0_stall_in = 1'b0;
assign SFC_9_VALID_180_181_0_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_9_VALID_180_181_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_9_VALID_180_181_0_output_regs_ready)
		begin
			SFC_9_VALID_180_181_0_NO_SHIFT_REG <= SFC_9_VALID_179_180_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5__21_i_stall_local;
wire local_bb5__21_i;

assign local_bb5__21_i = (local_bb5__20_demorgan_i ? local_bb5__19_i : local_bb5_cmp11_i);

// Register node:
//  * latency = 10
//  * capacity = 10
 logic rnode_174to184_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_valid_out_NO_SHIFT_REG;
 logic rnode_174to184_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_in_NO_SHIFT_REG;
 logic rnode_174to184_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_NO_SHIFT_REG;
 logic rnode_174to184_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_184_inputs_ready_NO_SHIFT_REG;
 logic rnode_174to184_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_184_NO_SHIFT_REG;
 logic rnode_174to184_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_valid_out_reg_184_NO_SHIFT_REG;
 logic rnode_174to184_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_in_reg_184_NO_SHIFT_REG;
 logic rnode_174to184_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_out_reg_184_NO_SHIFT_REG;

acl_data_fifo rnode_174to184_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_184_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_174to184_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_184_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_174to184_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_in_reg_184_NO_SHIFT_REG),
	.valid_out(rnode_174to184_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_valid_out_reg_184_NO_SHIFT_REG),
	.stall_out(rnode_174to184_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_out_reg_184_NO_SHIFT_REG),
	.data_in(rnode_173to174_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_NO_SHIFT_REG),
	.data_out(rnode_174to184_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_184_NO_SHIFT_REG)
);

defparam rnode_174to184_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_184_fifo.DEPTH = 10;
defparam rnode_174to184_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_184_fifo.DATA_WIDTH = 1;
defparam rnode_174to184_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_184_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_174to184_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_184_fifo.IMPL = "shift_reg";

assign rnode_174to184_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_184_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_173to174_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_174to184_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_NO_SHIFT_REG = rnode_174to184_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_184_NO_SHIFT_REG;
assign rnode_174to184_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_in_reg_184_NO_SHIFT_REG = 1'b0;
assign rnode_174to184_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 10
//  * capacity = 10
 logic rnode_174to184_bb5__LC_OuterPHI_0_valid_out_NO_SHIFT_REG;
 logic rnode_174to184_bb5__LC_OuterPHI_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_174to184_bb5__LC_OuterPHI_0_NO_SHIFT_REG;
 logic rnode_174to184_bb5__LC_OuterPHI_0_reg_184_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_174to184_bb5__LC_OuterPHI_0_reg_184_NO_SHIFT_REG;
 logic rnode_174to184_bb5__LC_OuterPHI_0_valid_out_reg_184_NO_SHIFT_REG;
 logic rnode_174to184_bb5__LC_OuterPHI_0_stall_in_reg_184_NO_SHIFT_REG;
 logic rnode_174to184_bb5__LC_OuterPHI_0_stall_out_reg_184_NO_SHIFT_REG;

acl_data_fifo rnode_174to184_bb5__LC_OuterPHI_0_reg_184_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_174to184_bb5__LC_OuterPHI_0_reg_184_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_174to184_bb5__LC_OuterPHI_0_stall_in_reg_184_NO_SHIFT_REG),
	.valid_out(rnode_174to184_bb5__LC_OuterPHI_0_valid_out_reg_184_NO_SHIFT_REG),
	.stall_out(rnode_174to184_bb5__LC_OuterPHI_0_stall_out_reg_184_NO_SHIFT_REG),
	.data_in(rnode_173to174_bb5__LC_OuterPHI_0_NO_SHIFT_REG),
	.data_out(rnode_174to184_bb5__LC_OuterPHI_0_reg_184_NO_SHIFT_REG)
);

defparam rnode_174to184_bb5__LC_OuterPHI_0_reg_184_fifo.DEPTH = 10;
defparam rnode_174to184_bb5__LC_OuterPHI_0_reg_184_fifo.DATA_WIDTH = 32;
defparam rnode_174to184_bb5__LC_OuterPHI_0_reg_184_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_174to184_bb5__LC_OuterPHI_0_reg_184_fifo.IMPL = "shift_reg";

assign rnode_174to184_bb5__LC_OuterPHI_0_reg_184_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_173to174_bb5__LC_OuterPHI_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_174to184_bb5__LC_OuterPHI_0_NO_SHIFT_REG = rnode_174to184_bb5__LC_OuterPHI_0_reg_184_NO_SHIFT_REG;
assign rnode_174to184_bb5__LC_OuterPHI_0_stall_in_reg_184_NO_SHIFT_REG = 1'b0;
assign rnode_174to184_bb5__LC_OuterPHI_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 10
//  * capacity = 10
 logic rnode_174to184_bb5_c_332_LC_OuterPHI_0_valid_out_NO_SHIFT_REG;
 logic rnode_174to184_bb5_c_332_LC_OuterPHI_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_174to184_bb5_c_332_LC_OuterPHI_0_NO_SHIFT_REG;
 logic rnode_174to184_bb5_c_332_LC_OuterPHI_0_reg_184_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_174to184_bb5_c_332_LC_OuterPHI_0_reg_184_NO_SHIFT_REG;
 logic rnode_174to184_bb5_c_332_LC_OuterPHI_0_valid_out_reg_184_NO_SHIFT_REG;
 logic rnode_174to184_bb5_c_332_LC_OuterPHI_0_stall_in_reg_184_NO_SHIFT_REG;
 logic rnode_174to184_bb5_c_332_LC_OuterPHI_0_stall_out_reg_184_NO_SHIFT_REG;

acl_data_fifo rnode_174to184_bb5_c_332_LC_OuterPHI_0_reg_184_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_174to184_bb5_c_332_LC_OuterPHI_0_reg_184_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_174to184_bb5_c_332_LC_OuterPHI_0_stall_in_reg_184_NO_SHIFT_REG),
	.valid_out(rnode_174to184_bb5_c_332_LC_OuterPHI_0_valid_out_reg_184_NO_SHIFT_REG),
	.stall_out(rnode_174to184_bb5_c_332_LC_OuterPHI_0_stall_out_reg_184_NO_SHIFT_REG),
	.data_in(rnode_173to174_bb5_c_332_LC_OuterPHI_0_NO_SHIFT_REG),
	.data_out(rnode_174to184_bb5_c_332_LC_OuterPHI_0_reg_184_NO_SHIFT_REG)
);

defparam rnode_174to184_bb5_c_332_LC_OuterPHI_0_reg_184_fifo.DEPTH = 10;
defparam rnode_174to184_bb5_c_332_LC_OuterPHI_0_reg_184_fifo.DATA_WIDTH = 32;
defparam rnode_174to184_bb5_c_332_LC_OuterPHI_0_reg_184_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_174to184_bb5_c_332_LC_OuterPHI_0_reg_184_fifo.IMPL = "shift_reg";

assign rnode_174to184_bb5_c_332_LC_OuterPHI_0_reg_184_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_173to174_bb5_c_332_LC_OuterPHI_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_174to184_bb5_c_332_LC_OuterPHI_0_NO_SHIFT_REG = rnode_174to184_bb5_c_332_LC_OuterPHI_0_reg_184_NO_SHIFT_REG;
assign rnode_174to184_bb5_c_332_LC_OuterPHI_0_stall_in_reg_184_NO_SHIFT_REG = 1'b0;
assign rnode_174to184_bb5_c_332_LC_OuterPHI_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 10
//  * capacity = 10
 logic rnode_174to184_bb5_select83_0_valid_out_NO_SHIFT_REG;
 logic rnode_174to184_bb5_select83_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_174to184_bb5_select83_0_NO_SHIFT_REG;
 logic rnode_174to184_bb5_select83_0_reg_184_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_174to184_bb5_select83_0_reg_184_NO_SHIFT_REG;
 logic rnode_174to184_bb5_select83_0_valid_out_reg_184_NO_SHIFT_REG;
 logic rnode_174to184_bb5_select83_0_stall_in_reg_184_NO_SHIFT_REG;
 logic rnode_174to184_bb5_select83_0_stall_out_reg_184_NO_SHIFT_REG;

acl_data_fifo rnode_174to184_bb5_select83_0_reg_184_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_174to184_bb5_select83_0_reg_184_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_174to184_bb5_select83_0_stall_in_reg_184_NO_SHIFT_REG),
	.valid_out(rnode_174to184_bb5_select83_0_valid_out_reg_184_NO_SHIFT_REG),
	.stall_out(rnode_174to184_bb5_select83_0_stall_out_reg_184_NO_SHIFT_REG),
	.data_in(rnode_173to174_bb5_select83_0_NO_SHIFT_REG),
	.data_out(rnode_174to184_bb5_select83_0_reg_184_NO_SHIFT_REG)
);

defparam rnode_174to184_bb5_select83_0_reg_184_fifo.DEPTH = 10;
defparam rnode_174to184_bb5_select83_0_reg_184_fifo.DATA_WIDTH = 32;
defparam rnode_174to184_bb5_select83_0_reg_184_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_174to184_bb5_select83_0_reg_184_fifo.IMPL = "shift_reg";

assign rnode_174to184_bb5_select83_0_reg_184_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_173to174_bb5_select83_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_174to184_bb5_select83_0_NO_SHIFT_REG = rnode_174to184_bb5_select83_0_reg_184_NO_SHIFT_REG;
assign rnode_174to184_bb5_select83_0_stall_in_reg_184_NO_SHIFT_REG = 1'b0;
assign rnode_174to184_bb5_select83_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 10
//  * capacity = 10
 logic rnode_174to184_bb5__demorgan_0_valid_out_NO_SHIFT_REG;
 logic rnode_174to184_bb5__demorgan_0_stall_in_NO_SHIFT_REG;
 logic rnode_174to184_bb5__demorgan_0_NO_SHIFT_REG;
 logic rnode_174to184_bb5__demorgan_0_reg_184_inputs_ready_NO_SHIFT_REG;
 logic rnode_174to184_bb5__demorgan_0_reg_184_NO_SHIFT_REG;
 logic rnode_174to184_bb5__demorgan_0_valid_out_reg_184_NO_SHIFT_REG;
 logic rnode_174to184_bb5__demorgan_0_stall_in_reg_184_NO_SHIFT_REG;
 logic rnode_174to184_bb5__demorgan_0_stall_out_reg_184_NO_SHIFT_REG;

acl_data_fifo rnode_174to184_bb5__demorgan_0_reg_184_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_174to184_bb5__demorgan_0_reg_184_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_174to184_bb5__demorgan_0_stall_in_reg_184_NO_SHIFT_REG),
	.valid_out(rnode_174to184_bb5__demorgan_0_valid_out_reg_184_NO_SHIFT_REG),
	.stall_out(rnode_174to184_bb5__demorgan_0_stall_out_reg_184_NO_SHIFT_REG),
	.data_in(rnode_173to174_bb5__demorgan_0_NO_SHIFT_REG),
	.data_out(rnode_174to184_bb5__demorgan_0_reg_184_NO_SHIFT_REG)
);

defparam rnode_174to184_bb5__demorgan_0_reg_184_fifo.DEPTH = 10;
defparam rnode_174to184_bb5__demorgan_0_reg_184_fifo.DATA_WIDTH = 1;
defparam rnode_174to184_bb5__demorgan_0_reg_184_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_174to184_bb5__demorgan_0_reg_184_fifo.IMPL = "shift_reg";

assign rnode_174to184_bb5__demorgan_0_reg_184_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_173to174_bb5__demorgan_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_174to184_bb5__demorgan_0_NO_SHIFT_REG = rnode_174to184_bb5__demorgan_0_reg_184_NO_SHIFT_REG;
assign rnode_174to184_bb5__demorgan_0_stall_in_reg_184_NO_SHIFT_REG = 1'b0;
assign rnode_174to184_bb5__demorgan_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_9_VALID_181_182_0_inputs_ready;
 reg SFC_9_VALID_181_182_0_valid_out_NO_SHIFT_REG;
wire SFC_9_VALID_181_182_0_stall_in;
wire SFC_9_VALID_181_182_0_output_regs_ready;
 reg SFC_9_VALID_181_182_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_9_VALID_181_182_0_causedstall;

assign SFC_9_VALID_181_182_0_inputs_ready = 1'b1;
assign SFC_9_VALID_181_182_0_output_regs_ready = 1'b1;
assign SFC_9_VALID_180_181_0_stall_in = 1'b0;
assign SFC_9_VALID_181_182_0_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_9_VALID_181_182_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_9_VALID_181_182_0_output_regs_ready)
		begin
			SFC_9_VALID_181_182_0_NO_SHIFT_REG <= SFC_9_VALID_180_181_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_xor_i_valid_out;
wire local_bb5_xor_i_stall_in;
wire local_bb5_add_i_valid_out;
wire local_bb5_add_i_stall_in;
wire local_bb5_conv_i_i_valid_out;
wire local_bb5_conv_i_i_stall_in;
wire local_bb5_conv1_i_i_valid_out;
wire local_bb5_conv1_i_i_stall_in;
wire local_bb5_reduction_3_i_valid_out;
wire local_bb5_reduction_3_i_stall_in;
wire local_bb5_var__u17_valid_out;
wire local_bb5_var__u17_stall_in;
wire local_bb5__23_i_valid_out;
wire local_bb5__23_i_stall_in;
wire local_bb5__23_i_inputs_ready;
wire local_bb5__23_i_stall_local;
wire local_bb5__23_i;

assign local_bb5__23_i_inputs_ready = (local_bb5_c2_enter_c2_eni14_valid_out_0_NO_SHIFT_REG & local_bb5_c2_enter_c2_eni14_valid_out_1_NO_SHIFT_REG);
assign local_bb5__23_i = (local_bb5__22_i | local_bb5__21_i);
assign local_bb5_xor_i_valid_out = 1'b1;
assign local_bb5_add_i_valid_out = 1'b1;
assign local_bb5_conv_i_i_valid_out = 1'b1;
assign local_bb5_conv1_i_i_valid_out = 1'b1;
assign local_bb5_reduction_3_i_valid_out = 1'b1;
assign local_bb5_var__u17_valid_out = 1'b1;
assign local_bb5__23_i_valid_out = 1'b1;
assign local_bb5_c2_enter_c2_eni14_stall_in_0 = 1'b0;
assign local_bb5_c2_enter_c2_eni14_stall_in_1 = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_NO_SHIFT_REG;
 logic rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_1_NO_SHIFT_REG;
 logic rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_in_2_NO_SHIFT_REG;
 logic rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_2_NO_SHIFT_REG;
 logic rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_valid_out_3_NO_SHIFT_REG;
 logic rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_in_3_NO_SHIFT_REG;
 logic rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_3_NO_SHIFT_REG;
 logic rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_185_inputs_ready_NO_SHIFT_REG;
 logic rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_valid_out_0_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_in_0_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_out_reg_185_NO_SHIFT_REG;

acl_data_fifo rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_185_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_185_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_in_0_reg_185_NO_SHIFT_REG),
	.valid_out(rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_valid_out_0_reg_185_NO_SHIFT_REG),
	.stall_out(rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_out_reg_185_NO_SHIFT_REG),
	.data_in(rnode_174to184_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_NO_SHIFT_REG),
	.data_out(rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_185_NO_SHIFT_REG)
);

defparam rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_185_fifo.DEPTH = 1;
defparam rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_185_fifo.DATA_WIDTH = 1;
defparam rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_185_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_185_fifo.IMPL = "shift_reg";

assign rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_185_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_174to184_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_in_0_reg_185_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_NO_SHIFT_REG = rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_185_NO_SHIFT_REG;
assign rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_1_NO_SHIFT_REG = rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_185_NO_SHIFT_REG;
assign rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_2_NO_SHIFT_REG = rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_185_NO_SHIFT_REG;
assign rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_valid_out_3_NO_SHIFT_REG = 1'b1;
assign rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_3_NO_SHIFT_REG = rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_reg_185_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_184to185_bb5__LC_OuterPHI_0_valid_out_NO_SHIFT_REG;
 logic rnode_184to185_bb5__LC_OuterPHI_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_184to185_bb5__LC_OuterPHI_0_NO_SHIFT_REG;
 logic rnode_184to185_bb5__LC_OuterPHI_0_reg_185_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_184to185_bb5__LC_OuterPHI_0_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5__LC_OuterPHI_0_valid_out_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5__LC_OuterPHI_0_stall_in_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5__LC_OuterPHI_0_stall_out_reg_185_NO_SHIFT_REG;

acl_data_fifo rnode_184to185_bb5__LC_OuterPHI_0_reg_185_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_184to185_bb5__LC_OuterPHI_0_reg_185_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_184to185_bb5__LC_OuterPHI_0_stall_in_reg_185_NO_SHIFT_REG),
	.valid_out(rnode_184to185_bb5__LC_OuterPHI_0_valid_out_reg_185_NO_SHIFT_REG),
	.stall_out(rnode_184to185_bb5__LC_OuterPHI_0_stall_out_reg_185_NO_SHIFT_REG),
	.data_in(rnode_174to184_bb5__LC_OuterPHI_0_NO_SHIFT_REG),
	.data_out(rnode_184to185_bb5__LC_OuterPHI_0_reg_185_NO_SHIFT_REG)
);

defparam rnode_184to185_bb5__LC_OuterPHI_0_reg_185_fifo.DEPTH = 1;
defparam rnode_184to185_bb5__LC_OuterPHI_0_reg_185_fifo.DATA_WIDTH = 32;
defparam rnode_184to185_bb5__LC_OuterPHI_0_reg_185_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_184to185_bb5__LC_OuterPHI_0_reg_185_fifo.IMPL = "shift_reg";

assign rnode_184to185_bb5__LC_OuterPHI_0_reg_185_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_174to184_bb5__LC_OuterPHI_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5__LC_OuterPHI_0_NO_SHIFT_REG = rnode_184to185_bb5__LC_OuterPHI_0_reg_185_NO_SHIFT_REG;
assign rnode_184to185_bb5__LC_OuterPHI_0_stall_in_reg_185_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5__LC_OuterPHI_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_184to185_bb5_c_332_LC_OuterPHI_0_valid_out_NO_SHIFT_REG;
 logic rnode_184to185_bb5_c_332_LC_OuterPHI_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_184to185_bb5_c_332_LC_OuterPHI_0_NO_SHIFT_REG;
 logic rnode_184to185_bb5_c_332_LC_OuterPHI_0_reg_185_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_184to185_bb5_c_332_LC_OuterPHI_0_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5_c_332_LC_OuterPHI_0_valid_out_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5_c_332_LC_OuterPHI_0_stall_in_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5_c_332_LC_OuterPHI_0_stall_out_reg_185_NO_SHIFT_REG;

acl_data_fifo rnode_184to185_bb5_c_332_LC_OuterPHI_0_reg_185_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_184to185_bb5_c_332_LC_OuterPHI_0_reg_185_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_184to185_bb5_c_332_LC_OuterPHI_0_stall_in_reg_185_NO_SHIFT_REG),
	.valid_out(rnode_184to185_bb5_c_332_LC_OuterPHI_0_valid_out_reg_185_NO_SHIFT_REG),
	.stall_out(rnode_184to185_bb5_c_332_LC_OuterPHI_0_stall_out_reg_185_NO_SHIFT_REG),
	.data_in(rnode_174to184_bb5_c_332_LC_OuterPHI_0_NO_SHIFT_REG),
	.data_out(rnode_184to185_bb5_c_332_LC_OuterPHI_0_reg_185_NO_SHIFT_REG)
);

defparam rnode_184to185_bb5_c_332_LC_OuterPHI_0_reg_185_fifo.DEPTH = 1;
defparam rnode_184to185_bb5_c_332_LC_OuterPHI_0_reg_185_fifo.DATA_WIDTH = 32;
defparam rnode_184to185_bb5_c_332_LC_OuterPHI_0_reg_185_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_184to185_bb5_c_332_LC_OuterPHI_0_reg_185_fifo.IMPL = "shift_reg";

assign rnode_184to185_bb5_c_332_LC_OuterPHI_0_reg_185_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_174to184_bb5_c_332_LC_OuterPHI_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_c_332_LC_OuterPHI_0_NO_SHIFT_REG = rnode_184to185_bb5_c_332_LC_OuterPHI_0_reg_185_NO_SHIFT_REG;
assign rnode_184to185_bb5_c_332_LC_OuterPHI_0_stall_in_reg_185_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_c_332_LC_OuterPHI_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_184to185_bb5_select83_0_valid_out_NO_SHIFT_REG;
 logic rnode_184to185_bb5_select83_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_184to185_bb5_select83_0_NO_SHIFT_REG;
 logic rnode_184to185_bb5_select83_0_reg_185_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_184to185_bb5_select83_0_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5_select83_0_valid_out_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5_select83_0_stall_in_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5_select83_0_stall_out_reg_185_NO_SHIFT_REG;

acl_data_fifo rnode_184to185_bb5_select83_0_reg_185_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_184to185_bb5_select83_0_reg_185_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_184to185_bb5_select83_0_stall_in_reg_185_NO_SHIFT_REG),
	.valid_out(rnode_184to185_bb5_select83_0_valid_out_reg_185_NO_SHIFT_REG),
	.stall_out(rnode_184to185_bb5_select83_0_stall_out_reg_185_NO_SHIFT_REG),
	.data_in(rnode_174to184_bb5_select83_0_NO_SHIFT_REG),
	.data_out(rnode_184to185_bb5_select83_0_reg_185_NO_SHIFT_REG)
);

defparam rnode_184to185_bb5_select83_0_reg_185_fifo.DEPTH = 1;
defparam rnode_184to185_bb5_select83_0_reg_185_fifo.DATA_WIDTH = 32;
defparam rnode_184to185_bb5_select83_0_reg_185_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_184to185_bb5_select83_0_reg_185_fifo.IMPL = "shift_reg";

assign rnode_184to185_bb5_select83_0_reg_185_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_174to184_bb5_select83_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_select83_0_NO_SHIFT_REG = rnode_184to185_bb5_select83_0_reg_185_NO_SHIFT_REG;
assign rnode_184to185_bb5_select83_0_stall_in_reg_185_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_select83_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_184to185_bb5__demorgan_0_valid_out_NO_SHIFT_REG;
 logic rnode_184to185_bb5__demorgan_0_stall_in_NO_SHIFT_REG;
 logic rnode_184to185_bb5__demorgan_0_NO_SHIFT_REG;
 logic rnode_184to185_bb5__demorgan_0_reg_185_inputs_ready_NO_SHIFT_REG;
 logic rnode_184to185_bb5__demorgan_0_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5__demorgan_0_valid_out_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5__demorgan_0_stall_in_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5__demorgan_0_stall_out_reg_185_NO_SHIFT_REG;

acl_data_fifo rnode_184to185_bb5__demorgan_0_reg_185_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_184to185_bb5__demorgan_0_reg_185_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_184to185_bb5__demorgan_0_stall_in_reg_185_NO_SHIFT_REG),
	.valid_out(rnode_184to185_bb5__demorgan_0_valid_out_reg_185_NO_SHIFT_REG),
	.stall_out(rnode_184to185_bb5__demorgan_0_stall_out_reg_185_NO_SHIFT_REG),
	.data_in(rnode_174to184_bb5__demorgan_0_NO_SHIFT_REG),
	.data_out(rnode_184to185_bb5__demorgan_0_reg_185_NO_SHIFT_REG)
);

defparam rnode_184to185_bb5__demorgan_0_reg_185_fifo.DEPTH = 1;
defparam rnode_184to185_bb5__demorgan_0_reg_185_fifo.DATA_WIDTH = 1;
defparam rnode_184to185_bb5__demorgan_0_reg_185_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_184to185_bb5__demorgan_0_reg_185_fifo.IMPL = "shift_reg";

assign rnode_184to185_bb5__demorgan_0_reg_185_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_174to184_bb5__demorgan_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5__demorgan_0_NO_SHIFT_REG = rnode_184to185_bb5__demorgan_0_reg_185_NO_SHIFT_REG;
assign rnode_184to185_bb5__demorgan_0_stall_in_reg_185_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5__demorgan_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_9_VALID_182_183_0_inputs_ready;
 reg SFC_9_VALID_182_183_0_valid_out_NO_SHIFT_REG;
wire SFC_9_VALID_182_183_0_stall_in;
wire SFC_9_VALID_182_183_0_output_regs_ready;
 reg SFC_9_VALID_182_183_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_9_VALID_182_183_0_causedstall;

assign SFC_9_VALID_182_183_0_inputs_ready = 1'b1;
assign SFC_9_VALID_182_183_0_output_regs_ready = 1'b1;
assign SFC_9_VALID_181_182_0_stall_in = 1'b0;
assign SFC_9_VALID_182_183_0_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_9_VALID_182_183_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_9_VALID_182_183_0_output_regs_ready)
		begin
			SFC_9_VALID_182_183_0_NO_SHIFT_REG <= SFC_9_VALID_181_182_0_NO_SHIFT_REG;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_171to172_bb5_xor_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_171to172_bb5_xor_i_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_bb5_xor_i_0_NO_SHIFT_REG;
 logic rnode_171to172_bb5_xor_i_0_reg_172_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_bb5_xor_i_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_xor_i_0_valid_out_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_xor_i_0_stall_in_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_xor_i_0_stall_out_reg_172_NO_SHIFT_REG;

acl_data_fifo rnode_171to172_bb5_xor_i_0_reg_172_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_171to172_bb5_xor_i_0_reg_172_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_171to172_bb5_xor_i_0_stall_in_reg_172_NO_SHIFT_REG),
	.valid_out(rnode_171to172_bb5_xor_i_0_valid_out_reg_172_NO_SHIFT_REG),
	.stall_out(rnode_171to172_bb5_xor_i_0_stall_out_reg_172_NO_SHIFT_REG),
	.data_in(local_bb5_xor_i),
	.data_out(rnode_171to172_bb5_xor_i_0_reg_172_NO_SHIFT_REG)
);

defparam rnode_171to172_bb5_xor_i_0_reg_172_fifo.DEPTH = 1;
defparam rnode_171to172_bb5_xor_i_0_reg_172_fifo.DATA_WIDTH = 32;
defparam rnode_171to172_bb5_xor_i_0_reg_172_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_171to172_bb5_xor_i_0_reg_172_fifo.IMPL = "shift_reg";

assign rnode_171to172_bb5_xor_i_0_reg_172_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_xor_i_stall_in = 1'b0;
assign rnode_171to172_bb5_xor_i_0_NO_SHIFT_REG = rnode_171to172_bb5_xor_i_0_reg_172_NO_SHIFT_REG;
assign rnode_171to172_bb5_xor_i_0_stall_in_reg_172_NO_SHIFT_REG = 1'b0;
assign rnode_171to172_bb5_xor_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_171to172_bb5_add_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_171to172_bb5_add_i_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_bb5_add_i_0_NO_SHIFT_REG;
 logic rnode_171to172_bb5_add_i_0_reg_172_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_bb5_add_i_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_add_i_0_valid_out_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_add_i_0_stall_in_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_add_i_0_stall_out_reg_172_NO_SHIFT_REG;

acl_data_fifo rnode_171to172_bb5_add_i_0_reg_172_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_171to172_bb5_add_i_0_reg_172_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_171to172_bb5_add_i_0_stall_in_reg_172_NO_SHIFT_REG),
	.valid_out(rnode_171to172_bb5_add_i_0_valid_out_reg_172_NO_SHIFT_REG),
	.stall_out(rnode_171to172_bb5_add_i_0_stall_out_reg_172_NO_SHIFT_REG),
	.data_in((local_bb5_add_i & 32'h1FF)),
	.data_out(rnode_171to172_bb5_add_i_0_reg_172_NO_SHIFT_REG)
);

defparam rnode_171to172_bb5_add_i_0_reg_172_fifo.DEPTH = 1;
defparam rnode_171to172_bb5_add_i_0_reg_172_fifo.DATA_WIDTH = 32;
defparam rnode_171to172_bb5_add_i_0_reg_172_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_171to172_bb5_add_i_0_reg_172_fifo.IMPL = "shift_reg";

assign rnode_171to172_bb5_add_i_0_reg_172_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_add_i_stall_in = 1'b0;
assign rnode_171to172_bb5_add_i_0_NO_SHIFT_REG = rnode_171to172_bb5_add_i_0_reg_172_NO_SHIFT_REG;
assign rnode_171to172_bb5_add_i_0_stall_in_reg_172_NO_SHIFT_REG = 1'b0;
assign rnode_171to172_bb5_add_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire local_bb5_mul_i_i_inputs_ready;
 reg local_bb5_mul_i_i_valid_out_0_NO_SHIFT_REG;
wire local_bb5_mul_i_i_stall_in_0;
 reg local_bb5_mul_i_i_valid_out_1_NO_SHIFT_REG;
wire local_bb5_mul_i_i_stall_in_1;
 reg local_bb5_mul_i_i_valid_out_2_NO_SHIFT_REG;
wire local_bb5_mul_i_i_stall_in_2;
wire local_bb5_mul_i_i_output_regs_ready;
wire [63:0] local_bb5_mul_i_i;
 reg local_bb5_mul_i_i_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb5_mul_i_i_valid_pipe_1_NO_SHIFT_REG;
wire local_bb5_mul_i_i_causedstall;

acl_int_mult int_module_local_bb5_mul_i_i (
	.clock(clock),
	.dataa(((local_bb5_conv1_i_i & 64'hFFFFFF) | 64'h800000)),
	.datab(((local_bb5_conv_i_i & 64'hFFFFFF) | 64'h800000)),
	.enable(local_bb5_mul_i_i_output_regs_ready),
	.result(local_bb5_mul_i_i)
);

defparam int_module_local_bb5_mul_i_i.INPUT1_WIDTH = 24;
defparam int_module_local_bb5_mul_i_i.INPUT2_WIDTH = 24;
defparam int_module_local_bb5_mul_i_i.OUTPUT_WIDTH = 64;
defparam int_module_local_bb5_mul_i_i.LATENCY = 3;
defparam int_module_local_bb5_mul_i_i.SIGNED = 0;

assign local_bb5_mul_i_i_inputs_ready = 1'b1;
assign local_bb5_mul_i_i_output_regs_ready = 1'b1;
assign local_bb5_conv1_i_i_stall_in = 1'b0;
assign local_bb5_conv_i_i_stall_in = 1'b0;
assign local_bb5_mul_i_i_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_mul_i_i_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb5_mul_i_i_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_mul_i_i_output_regs_ready)
		begin
			local_bb5_mul_i_i_valid_pipe_0_NO_SHIFT_REG <= 1'b1;
			local_bb5_mul_i_i_valid_pipe_1_NO_SHIFT_REG <= local_bb5_mul_i_i_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_mul_i_i_valid_out_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_mul_i_i_output_regs_ready)
		begin
			local_bb5_mul_i_i_valid_out_0_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb5_mul_i_i_stall_in_0))
			begin
				local_bb5_mul_i_i_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(*)
begin
	local_bb5_mul_i_i_valid_out_1_NO_SHIFT_REG = local_bb5_mul_i_i_valid_out_0_NO_SHIFT_REG;
	local_bb5_mul_i_i_valid_out_2_NO_SHIFT_REG = local_bb5_mul_i_i_valid_out_0_NO_SHIFT_REG;
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_171to172_bb5_reduction_3_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_171to172_bb5_reduction_3_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_171to172_bb5_reduction_3_i_0_NO_SHIFT_REG;
 logic rnode_171to172_bb5_reduction_3_i_0_reg_172_inputs_ready_NO_SHIFT_REG;
 logic rnode_171to172_bb5_reduction_3_i_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_reduction_3_i_0_valid_out_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_reduction_3_i_0_stall_in_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_reduction_3_i_0_stall_out_reg_172_NO_SHIFT_REG;

acl_data_fifo rnode_171to172_bb5_reduction_3_i_0_reg_172_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_171to172_bb5_reduction_3_i_0_reg_172_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_171to172_bb5_reduction_3_i_0_stall_in_reg_172_NO_SHIFT_REG),
	.valid_out(rnode_171to172_bb5_reduction_3_i_0_valid_out_reg_172_NO_SHIFT_REG),
	.stall_out(rnode_171to172_bb5_reduction_3_i_0_stall_out_reg_172_NO_SHIFT_REG),
	.data_in(local_bb5_reduction_3_i),
	.data_out(rnode_171to172_bb5_reduction_3_i_0_reg_172_NO_SHIFT_REG)
);

defparam rnode_171to172_bb5_reduction_3_i_0_reg_172_fifo.DEPTH = 1;
defparam rnode_171to172_bb5_reduction_3_i_0_reg_172_fifo.DATA_WIDTH = 1;
defparam rnode_171to172_bb5_reduction_3_i_0_reg_172_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_171to172_bb5_reduction_3_i_0_reg_172_fifo.IMPL = "shift_reg";

assign rnode_171to172_bb5_reduction_3_i_0_reg_172_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_reduction_3_i_stall_in = 1'b0;
assign rnode_171to172_bb5_reduction_3_i_0_NO_SHIFT_REG = rnode_171to172_bb5_reduction_3_i_0_reg_172_NO_SHIFT_REG;
assign rnode_171to172_bb5_reduction_3_i_0_stall_in_reg_172_NO_SHIFT_REG = 1'b0;
assign rnode_171to172_bb5_reduction_3_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_171to172_bb5_var__u17_0_valid_out_NO_SHIFT_REG;
 logic rnode_171to172_bb5_var__u17_0_stall_in_NO_SHIFT_REG;
 logic rnode_171to172_bb5_var__u17_0_NO_SHIFT_REG;
 logic rnode_171to172_bb5_var__u17_0_reg_172_inputs_ready_NO_SHIFT_REG;
 logic rnode_171to172_bb5_var__u17_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_var__u17_0_valid_out_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_var__u17_0_stall_in_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5_var__u17_0_stall_out_reg_172_NO_SHIFT_REG;

acl_data_fifo rnode_171to172_bb5_var__u17_0_reg_172_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_171to172_bb5_var__u17_0_reg_172_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_171to172_bb5_var__u17_0_stall_in_reg_172_NO_SHIFT_REG),
	.valid_out(rnode_171to172_bb5_var__u17_0_valid_out_reg_172_NO_SHIFT_REG),
	.stall_out(rnode_171to172_bb5_var__u17_0_stall_out_reg_172_NO_SHIFT_REG),
	.data_in(local_bb5_var__u17),
	.data_out(rnode_171to172_bb5_var__u17_0_reg_172_NO_SHIFT_REG)
);

defparam rnode_171to172_bb5_var__u17_0_reg_172_fifo.DEPTH = 1;
defparam rnode_171to172_bb5_var__u17_0_reg_172_fifo.DATA_WIDTH = 1;
defparam rnode_171to172_bb5_var__u17_0_reg_172_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_171to172_bb5_var__u17_0_reg_172_fifo.IMPL = "shift_reg";

assign rnode_171to172_bb5_var__u17_0_reg_172_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u17_stall_in = 1'b0;
assign rnode_171to172_bb5_var__u17_0_NO_SHIFT_REG = rnode_171to172_bb5_var__u17_0_reg_172_NO_SHIFT_REG;
assign rnode_171to172_bb5_var__u17_0_stall_in_reg_172_NO_SHIFT_REG = 1'b0;
assign rnode_171to172_bb5_var__u17_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_171to172_bb5__23_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_171to172_bb5__23_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_171to172_bb5__23_i_0_NO_SHIFT_REG;
 logic rnode_171to172_bb5__23_i_0_reg_172_inputs_ready_NO_SHIFT_REG;
 logic rnode_171to172_bb5__23_i_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5__23_i_0_valid_out_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5__23_i_0_stall_in_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_bb5__23_i_0_stall_out_reg_172_NO_SHIFT_REG;

acl_data_fifo rnode_171to172_bb5__23_i_0_reg_172_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_171to172_bb5__23_i_0_reg_172_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_171to172_bb5__23_i_0_stall_in_reg_172_NO_SHIFT_REG),
	.valid_out(rnode_171to172_bb5__23_i_0_valid_out_reg_172_NO_SHIFT_REG),
	.stall_out(rnode_171to172_bb5__23_i_0_stall_out_reg_172_NO_SHIFT_REG),
	.data_in(local_bb5__23_i),
	.data_out(rnode_171to172_bb5__23_i_0_reg_172_NO_SHIFT_REG)
);

defparam rnode_171to172_bb5__23_i_0_reg_172_fifo.DEPTH = 1;
defparam rnode_171to172_bb5__23_i_0_reg_172_fifo.DATA_WIDTH = 1;
defparam rnode_171to172_bb5__23_i_0_reg_172_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_171to172_bb5__23_i_0_reg_172_fifo.IMPL = "shift_reg";

assign rnode_171to172_bb5__23_i_0_reg_172_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5__23_i_stall_in = 1'b0;
assign rnode_171to172_bb5__23_i_0_NO_SHIFT_REG = rnode_171to172_bb5__23_i_0_reg_172_NO_SHIFT_REG;
assign rnode_171to172_bb5__23_i_0_stall_in_reg_172_NO_SHIFT_REG = 1'b0;
assign rnode_171to172_bb5__23_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_i_426_LC_InnerPHI_stall_local;
wire [31:0] local_bb5_i_426_LC_InnerPHI;

assign local_bb5_i_426_LC_InnerPHI = (rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_NO_SHIFT_REG ? rnode_184to185_bb5_i_426_LC_OuterPHI_0_NO_SHIFT_REG : 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_j_522_LC_InnerPHI95_stall_local;
wire [31:0] local_bb5_j_522_LC_InnerPHI95;

assign local_bb5_j_522_LC_InnerPHI95 = (rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_1_NO_SHIFT_REG ? rnode_184to185_bb5_j_522_LC_InnerPHI_0_NO_SHIFT_REG : 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exi1_stall_local;
wire [319:0] local_bb5_c2_exi1;

assign local_bb5_c2_exi1[31:0] = 32'bx;
assign local_bb5_c2_exi1[63:32] = rnode_184to185_bb5_select83_0_NO_SHIFT_REG;
assign local_bb5_c2_exi1[319:64] = 256'bx;

// This section implements a registered operation.
// 
wire SFC_9_VALID_183_184_0_inputs_ready;
 reg SFC_9_VALID_183_184_0_valid_out_NO_SHIFT_REG;
wire SFC_9_VALID_183_184_0_stall_in;
wire SFC_9_VALID_183_184_0_output_regs_ready;
 reg SFC_9_VALID_183_184_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_9_VALID_183_184_0_causedstall;

assign SFC_9_VALID_183_184_0_inputs_ready = 1'b1;
assign SFC_9_VALID_183_184_0_output_regs_ready = 1'b1;
assign SFC_9_VALID_182_183_0_stall_in = 1'b0;
assign SFC_9_VALID_183_184_0_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_9_VALID_183_184_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_9_VALID_183_184_0_output_regs_ready)
		begin
			SFC_9_VALID_183_184_0_NO_SHIFT_REG <= SFC_9_VALID_182_183_0_NO_SHIFT_REG;
		end
	end
end


// Register node:
//  * latency = 3
//  * capacity = 3
 logic rnode_172to175_bb5_xor_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_172to175_bb5_xor_i_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_172to175_bb5_xor_i_0_NO_SHIFT_REG;
 logic rnode_172to175_bb5_xor_i_0_reg_175_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_172to175_bb5_xor_i_0_reg_175_NO_SHIFT_REG;
 logic rnode_172to175_bb5_xor_i_0_valid_out_reg_175_NO_SHIFT_REG;
 logic rnode_172to175_bb5_xor_i_0_stall_in_reg_175_NO_SHIFT_REG;
 logic rnode_172to175_bb5_xor_i_0_stall_out_reg_175_NO_SHIFT_REG;

acl_data_fifo rnode_172to175_bb5_xor_i_0_reg_175_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_172to175_bb5_xor_i_0_reg_175_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_172to175_bb5_xor_i_0_stall_in_reg_175_NO_SHIFT_REG),
	.valid_out(rnode_172to175_bb5_xor_i_0_valid_out_reg_175_NO_SHIFT_REG),
	.stall_out(rnode_172to175_bb5_xor_i_0_stall_out_reg_175_NO_SHIFT_REG),
	.data_in(rnode_171to172_bb5_xor_i_0_NO_SHIFT_REG),
	.data_out(rnode_172to175_bb5_xor_i_0_reg_175_NO_SHIFT_REG)
);

defparam rnode_172to175_bb5_xor_i_0_reg_175_fifo.DEPTH = 3;
defparam rnode_172to175_bb5_xor_i_0_reg_175_fifo.DATA_WIDTH = 32;
defparam rnode_172to175_bb5_xor_i_0_reg_175_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_172to175_bb5_xor_i_0_reg_175_fifo.IMPL = "shift_reg";

assign rnode_172to175_bb5_xor_i_0_reg_175_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_171to172_bb5_xor_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_172to175_bb5_xor_i_0_NO_SHIFT_REG = rnode_172to175_bb5_xor_i_0_reg_175_NO_SHIFT_REG;
assign rnode_172to175_bb5_xor_i_0_stall_in_reg_175_NO_SHIFT_REG = 1'b0;
assign rnode_172to175_bb5_xor_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_172to173_bb5_add_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_172to173_bb5_add_i_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_172to173_bb5_add_i_0_NO_SHIFT_REG;
 logic rnode_172to173_bb5_add_i_0_reg_173_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_172to173_bb5_add_i_0_reg_173_NO_SHIFT_REG;
 logic rnode_172to173_bb5_add_i_0_valid_out_reg_173_NO_SHIFT_REG;
 logic rnode_172to173_bb5_add_i_0_stall_in_reg_173_NO_SHIFT_REG;
 logic rnode_172to173_bb5_add_i_0_stall_out_reg_173_NO_SHIFT_REG;

acl_data_fifo rnode_172to173_bb5_add_i_0_reg_173_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_172to173_bb5_add_i_0_reg_173_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_172to173_bb5_add_i_0_stall_in_reg_173_NO_SHIFT_REG),
	.valid_out(rnode_172to173_bb5_add_i_0_valid_out_reg_173_NO_SHIFT_REG),
	.stall_out(rnode_172to173_bb5_add_i_0_stall_out_reg_173_NO_SHIFT_REG),
	.data_in((rnode_171to172_bb5_add_i_0_NO_SHIFT_REG & 32'h1FF)),
	.data_out(rnode_172to173_bb5_add_i_0_reg_173_NO_SHIFT_REG)
);

defparam rnode_172to173_bb5_add_i_0_reg_173_fifo.DEPTH = 1;
defparam rnode_172to173_bb5_add_i_0_reg_173_fifo.DATA_WIDTH = 32;
defparam rnode_172to173_bb5_add_i_0_reg_173_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_172to173_bb5_add_i_0_reg_173_fifo.IMPL = "shift_reg";

assign rnode_172to173_bb5_add_i_0_reg_173_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_171to172_bb5_add_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_172to173_bb5_add_i_0_NO_SHIFT_REG = rnode_172to173_bb5_add_i_0_reg_173_NO_SHIFT_REG;
assign rnode_172to173_bb5_add_i_0_stall_in_reg_173_NO_SHIFT_REG = 1'b0;
assign rnode_172to173_bb5_add_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_conv3_i_i_stall_local;
wire [31:0] local_bb5_conv3_i_i;
wire [63:0] local_bb5_conv3_i_i$ps;

assign local_bb5_conv3_i_i$ps = (local_bb5_mul_i_i & 64'hFFFFFFFFFFFF);
assign local_bb5_conv3_i_i = local_bb5_conv3_i_i$ps[31:0];

// This section implements an unregistered operation.
// 
wire local_bb5_or_i3_vec_0_i_stall_local;
wire [63:0] local_bb5_or_i3_vec_0_i;

assign local_bb5_or_i3_vec_0_i[63:0] = (local_bb5_mul_i_i & 64'hFFFFFFFFFFFF);

// This section implements an unregistered operation.
// 
wire local_bb5_and48_i_stall_local;
wire [63:0] local_bb5_and48_i;

assign local_bb5_and48_i = ((local_bb5_mul_i_i & 64'hFFFFFFFFFFFF) & 64'h800000000000);

// Register node:
//  * latency = 3
//  * capacity = 3
 logic rnode_172to175_bb5_reduction_3_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_172to175_bb5_reduction_3_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_172to175_bb5_reduction_3_i_0_NO_SHIFT_REG;
 logic rnode_172to175_bb5_reduction_3_i_0_reg_175_inputs_ready_NO_SHIFT_REG;
 logic rnode_172to175_bb5_reduction_3_i_0_reg_175_NO_SHIFT_REG;
 logic rnode_172to175_bb5_reduction_3_i_0_valid_out_reg_175_NO_SHIFT_REG;
 logic rnode_172to175_bb5_reduction_3_i_0_stall_in_reg_175_NO_SHIFT_REG;
 logic rnode_172to175_bb5_reduction_3_i_0_stall_out_reg_175_NO_SHIFT_REG;

acl_data_fifo rnode_172to175_bb5_reduction_3_i_0_reg_175_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_172to175_bb5_reduction_3_i_0_reg_175_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_172to175_bb5_reduction_3_i_0_stall_in_reg_175_NO_SHIFT_REG),
	.valid_out(rnode_172to175_bb5_reduction_3_i_0_valid_out_reg_175_NO_SHIFT_REG),
	.stall_out(rnode_172to175_bb5_reduction_3_i_0_stall_out_reg_175_NO_SHIFT_REG),
	.data_in(rnode_171to172_bb5_reduction_3_i_0_NO_SHIFT_REG),
	.data_out(rnode_172to175_bb5_reduction_3_i_0_reg_175_NO_SHIFT_REG)
);

defparam rnode_172to175_bb5_reduction_3_i_0_reg_175_fifo.DEPTH = 3;
defparam rnode_172to175_bb5_reduction_3_i_0_reg_175_fifo.DATA_WIDTH = 1;
defparam rnode_172to175_bb5_reduction_3_i_0_reg_175_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_172to175_bb5_reduction_3_i_0_reg_175_fifo.IMPL = "shift_reg";

assign rnode_172to175_bb5_reduction_3_i_0_reg_175_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_171to172_bb5_reduction_3_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_172to175_bb5_reduction_3_i_0_NO_SHIFT_REG = rnode_172to175_bb5_reduction_3_i_0_reg_175_NO_SHIFT_REG;
assign rnode_172to175_bb5_reduction_3_i_0_stall_in_reg_175_NO_SHIFT_REG = 1'b0;
assign rnode_172to175_bb5_reduction_3_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_172to174_bb5_var__u17_0_valid_out_NO_SHIFT_REG;
 logic rnode_172to174_bb5_var__u17_0_stall_in_NO_SHIFT_REG;
 logic rnode_172to174_bb5_var__u17_0_NO_SHIFT_REG;
 logic rnode_172to174_bb5_var__u17_0_reg_174_inputs_ready_NO_SHIFT_REG;
 logic rnode_172to174_bb5_var__u17_0_reg_174_NO_SHIFT_REG;
 logic rnode_172to174_bb5_var__u17_0_valid_out_reg_174_NO_SHIFT_REG;
 logic rnode_172to174_bb5_var__u17_0_stall_in_reg_174_NO_SHIFT_REG;
 logic rnode_172to174_bb5_var__u17_0_stall_out_reg_174_NO_SHIFT_REG;

acl_data_fifo rnode_172to174_bb5_var__u17_0_reg_174_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_172to174_bb5_var__u17_0_reg_174_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_172to174_bb5_var__u17_0_stall_in_reg_174_NO_SHIFT_REG),
	.valid_out(rnode_172to174_bb5_var__u17_0_valid_out_reg_174_NO_SHIFT_REG),
	.stall_out(rnode_172to174_bb5_var__u17_0_stall_out_reg_174_NO_SHIFT_REG),
	.data_in(rnode_171to172_bb5_var__u17_0_NO_SHIFT_REG),
	.data_out(rnode_172to174_bb5_var__u17_0_reg_174_NO_SHIFT_REG)
);

defparam rnode_172to174_bb5_var__u17_0_reg_174_fifo.DEPTH = 2;
defparam rnode_172to174_bb5_var__u17_0_reg_174_fifo.DATA_WIDTH = 1;
defparam rnode_172to174_bb5_var__u17_0_reg_174_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_172to174_bb5_var__u17_0_reg_174_fifo.IMPL = "shift_reg";

assign rnode_172to174_bb5_var__u17_0_reg_174_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_171to172_bb5_var__u17_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_172to174_bb5_var__u17_0_NO_SHIFT_REG = rnode_172to174_bb5_var__u17_0_reg_174_NO_SHIFT_REG;
assign rnode_172to174_bb5_var__u17_0_stall_in_reg_174_NO_SHIFT_REG = 1'b0;
assign rnode_172to174_bb5_var__u17_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 3
//  * capacity = 3
 logic rnode_172to175_bb5__23_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_172to175_bb5__23_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_172to175_bb5__23_i_0_NO_SHIFT_REG;
 logic rnode_172to175_bb5__23_i_0_reg_175_inputs_ready_NO_SHIFT_REG;
 logic rnode_172to175_bb5__23_i_0_reg_175_NO_SHIFT_REG;
 logic rnode_172to175_bb5__23_i_0_valid_out_reg_175_NO_SHIFT_REG;
 logic rnode_172to175_bb5__23_i_0_stall_in_reg_175_NO_SHIFT_REG;
 logic rnode_172to175_bb5__23_i_0_stall_out_reg_175_NO_SHIFT_REG;

acl_data_fifo rnode_172to175_bb5__23_i_0_reg_175_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_172to175_bb5__23_i_0_reg_175_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_172to175_bb5__23_i_0_stall_in_reg_175_NO_SHIFT_REG),
	.valid_out(rnode_172to175_bb5__23_i_0_valid_out_reg_175_NO_SHIFT_REG),
	.stall_out(rnode_172to175_bb5__23_i_0_stall_out_reg_175_NO_SHIFT_REG),
	.data_in(rnode_171to172_bb5__23_i_0_NO_SHIFT_REG),
	.data_out(rnode_172to175_bb5__23_i_0_reg_175_NO_SHIFT_REG)
);

defparam rnode_172to175_bb5__23_i_0_reg_175_fifo.DEPTH = 3;
defparam rnode_172to175_bb5__23_i_0_reg_175_fifo.DATA_WIDTH = 1;
defparam rnode_172to175_bb5__23_i_0_reg_175_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_172to175_bb5__23_i_0_reg_175_fifo.IMPL = "shift_reg";

assign rnode_172to175_bb5__23_i_0_reg_175_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_171to172_bb5__23_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_172to175_bb5__23_i_0_NO_SHIFT_REG = rnode_172to175_bb5__23_i_0_reg_175_NO_SHIFT_REG;
assign rnode_172to175_bb5__23_i_0_stall_in_reg_175_NO_SHIFT_REG = 1'b0;
assign rnode_172to175_bb5__23_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_9_VALID_184_185_0_inputs_ready;
 reg SFC_9_VALID_184_185_0_valid_out_NO_SHIFT_REG;
wire SFC_9_VALID_184_185_0_stall_in;
wire SFC_9_VALID_184_185_0_output_regs_ready;
 reg SFC_9_VALID_184_185_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_9_VALID_184_185_0_causedstall;

assign SFC_9_VALID_184_185_0_inputs_ready = 1'b1;
assign SFC_9_VALID_184_185_0_output_regs_ready = 1'b1;
assign SFC_9_VALID_183_184_0_stall_in = 1'b0;
assign SFC_9_VALID_184_185_0_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_9_VALID_184_185_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_9_VALID_184_185_0_output_regs_ready)
		begin
			SFC_9_VALID_184_185_0_NO_SHIFT_REG <= SFC_9_VALID_183_184_0_NO_SHIFT_REG;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_175to176_bb5_xor_i_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_175to176_bb5_xor_i_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_175to176_bb5_xor_i_0_NO_SHIFT_REG;
 logic rnode_175to176_bb5_xor_i_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_175to176_bb5_xor_i_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_175to176_bb5_xor_i_1_NO_SHIFT_REG;
 logic rnode_175to176_bb5_xor_i_0_reg_176_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_175to176_bb5_xor_i_0_reg_176_NO_SHIFT_REG;
 logic rnode_175to176_bb5_xor_i_0_valid_out_0_reg_176_NO_SHIFT_REG;
 logic rnode_175to176_bb5_xor_i_0_stall_in_0_reg_176_NO_SHIFT_REG;
 logic rnode_175to176_bb5_xor_i_0_stall_out_reg_176_NO_SHIFT_REG;

acl_data_fifo rnode_175to176_bb5_xor_i_0_reg_176_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_175to176_bb5_xor_i_0_reg_176_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_175to176_bb5_xor_i_0_stall_in_0_reg_176_NO_SHIFT_REG),
	.valid_out(rnode_175to176_bb5_xor_i_0_valid_out_0_reg_176_NO_SHIFT_REG),
	.stall_out(rnode_175to176_bb5_xor_i_0_stall_out_reg_176_NO_SHIFT_REG),
	.data_in(rnode_172to175_bb5_xor_i_0_NO_SHIFT_REG),
	.data_out(rnode_175to176_bb5_xor_i_0_reg_176_NO_SHIFT_REG)
);

defparam rnode_175to176_bb5_xor_i_0_reg_176_fifo.DEPTH = 1;
defparam rnode_175to176_bb5_xor_i_0_reg_176_fifo.DATA_WIDTH = 32;
defparam rnode_175to176_bb5_xor_i_0_reg_176_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_175to176_bb5_xor_i_0_reg_176_fifo.IMPL = "shift_reg";

assign rnode_175to176_bb5_xor_i_0_reg_176_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_172to175_bb5_xor_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_175to176_bb5_xor_i_0_stall_in_0_reg_176_NO_SHIFT_REG = 1'b0;
assign rnode_175to176_bb5_xor_i_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_175to176_bb5_xor_i_0_NO_SHIFT_REG = rnode_175to176_bb5_xor_i_0_reg_176_NO_SHIFT_REG;
assign rnode_175to176_bb5_xor_i_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_175to176_bb5_xor_i_1_NO_SHIFT_REG = rnode_175to176_bb5_xor_i_0_reg_176_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_173to174_bb5_add_i_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_173to174_bb5_add_i_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_173to174_bb5_add_i_0_NO_SHIFT_REG;
 logic rnode_173to174_bb5_add_i_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_173to174_bb5_add_i_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_173to174_bb5_add_i_1_NO_SHIFT_REG;
 logic rnode_173to174_bb5_add_i_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_173to174_bb5_add_i_0_stall_in_2_NO_SHIFT_REG;
 logic [31:0] rnode_173to174_bb5_add_i_2_NO_SHIFT_REG;
 logic rnode_173to174_bb5_add_i_0_reg_174_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_173to174_bb5_add_i_0_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5_add_i_0_valid_out_0_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5_add_i_0_stall_in_0_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb5_add_i_0_stall_out_reg_174_NO_SHIFT_REG;

acl_data_fifo rnode_173to174_bb5_add_i_0_reg_174_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_173to174_bb5_add_i_0_reg_174_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_173to174_bb5_add_i_0_stall_in_0_reg_174_NO_SHIFT_REG),
	.valid_out(rnode_173to174_bb5_add_i_0_valid_out_0_reg_174_NO_SHIFT_REG),
	.stall_out(rnode_173to174_bb5_add_i_0_stall_out_reg_174_NO_SHIFT_REG),
	.data_in((rnode_172to173_bb5_add_i_0_NO_SHIFT_REG & 32'h1FF)),
	.data_out(rnode_173to174_bb5_add_i_0_reg_174_NO_SHIFT_REG)
);

defparam rnode_173to174_bb5_add_i_0_reg_174_fifo.DEPTH = 1;
defparam rnode_173to174_bb5_add_i_0_reg_174_fifo.DATA_WIDTH = 32;
defparam rnode_173to174_bb5_add_i_0_reg_174_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_173to174_bb5_add_i_0_reg_174_fifo.IMPL = "shift_reg";

assign rnode_173to174_bb5_add_i_0_reg_174_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_172to173_bb5_add_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_173to174_bb5_add_i_0_stall_in_0_reg_174_NO_SHIFT_REG = 1'b0;
assign rnode_173to174_bb5_add_i_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_173to174_bb5_add_i_0_NO_SHIFT_REG = rnode_173to174_bb5_add_i_0_reg_174_NO_SHIFT_REG;
assign rnode_173to174_bb5_add_i_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_173to174_bb5_add_i_1_NO_SHIFT_REG = rnode_173to174_bb5_add_i_0_reg_174_NO_SHIFT_REG;
assign rnode_173to174_bb5_add_i_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_173to174_bb5_add_i_2_NO_SHIFT_REG = rnode_173to174_bb5_add_i_0_reg_174_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_shl1_i4_i_stall_local;
wire [31:0] local_bb5_shl1_i4_i;

assign local_bb5_shl1_i4_i = (local_bb5_conv3_i_i << 32'h8);

// This section implements an unregistered operation.
// 
wire local_bb5_shl1_i_i_stall_local;
wire [31:0] local_bb5_shl1_i_i;

assign local_bb5_shl1_i_i = (local_bb5_conv3_i_i << 32'h9);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i3_bitvec_i_stall_local;
wire [63:0] local_bb5_or_i3_bitvec_i;

assign local_bb5_or_i3_bitvec_i = local_bb5_or_i3_vec_0_i;

// This section implements an unregistered operation.
// 
wire local_bb5_tobool49_i_stall_local;
wire local_bb5_tobool49_i;

assign local_bb5_tobool49_i = ((local_bb5_and48_i & 64'h800000000000) == 64'h0);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_175to176_bb5_reduction_3_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_175to176_bb5_reduction_3_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_175to176_bb5_reduction_3_i_0_NO_SHIFT_REG;
 logic rnode_175to176_bb5_reduction_3_i_0_reg_176_inputs_ready_NO_SHIFT_REG;
 logic rnode_175to176_bb5_reduction_3_i_0_reg_176_NO_SHIFT_REG;
 logic rnode_175to176_bb5_reduction_3_i_0_valid_out_reg_176_NO_SHIFT_REG;
 logic rnode_175to176_bb5_reduction_3_i_0_stall_in_reg_176_NO_SHIFT_REG;
 logic rnode_175to176_bb5_reduction_3_i_0_stall_out_reg_176_NO_SHIFT_REG;

acl_data_fifo rnode_175to176_bb5_reduction_3_i_0_reg_176_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_175to176_bb5_reduction_3_i_0_reg_176_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_175to176_bb5_reduction_3_i_0_stall_in_reg_176_NO_SHIFT_REG),
	.valid_out(rnode_175to176_bb5_reduction_3_i_0_valid_out_reg_176_NO_SHIFT_REG),
	.stall_out(rnode_175to176_bb5_reduction_3_i_0_stall_out_reg_176_NO_SHIFT_REG),
	.data_in(rnode_172to175_bb5_reduction_3_i_0_NO_SHIFT_REG),
	.data_out(rnode_175to176_bb5_reduction_3_i_0_reg_176_NO_SHIFT_REG)
);

defparam rnode_175to176_bb5_reduction_3_i_0_reg_176_fifo.DEPTH = 1;
defparam rnode_175to176_bb5_reduction_3_i_0_reg_176_fifo.DATA_WIDTH = 1;
defparam rnode_175to176_bb5_reduction_3_i_0_reg_176_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_175to176_bb5_reduction_3_i_0_reg_176_fifo.IMPL = "shift_reg";

assign rnode_175to176_bb5_reduction_3_i_0_reg_176_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_172to175_bb5_reduction_3_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_175to176_bb5_reduction_3_i_0_NO_SHIFT_REG = rnode_175to176_bb5_reduction_3_i_0_reg_176_NO_SHIFT_REG;
assign rnode_175to176_bb5_reduction_3_i_0_stall_in_reg_176_NO_SHIFT_REG = 1'b0;
assign rnode_175to176_bb5_reduction_3_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_174to175_bb5_var__u17_0_valid_out_NO_SHIFT_REG;
 logic rnode_174to175_bb5_var__u17_0_stall_in_NO_SHIFT_REG;
 logic rnode_174to175_bb5_var__u17_0_NO_SHIFT_REG;
 logic rnode_174to175_bb5_var__u17_0_reg_175_inputs_ready_NO_SHIFT_REG;
 logic rnode_174to175_bb5_var__u17_0_reg_175_NO_SHIFT_REG;
 logic rnode_174to175_bb5_var__u17_0_valid_out_reg_175_NO_SHIFT_REG;
 logic rnode_174to175_bb5_var__u17_0_stall_in_reg_175_NO_SHIFT_REG;
 logic rnode_174to175_bb5_var__u17_0_stall_out_reg_175_NO_SHIFT_REG;

acl_data_fifo rnode_174to175_bb5_var__u17_0_reg_175_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_174to175_bb5_var__u17_0_reg_175_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_174to175_bb5_var__u17_0_stall_in_reg_175_NO_SHIFT_REG),
	.valid_out(rnode_174to175_bb5_var__u17_0_valid_out_reg_175_NO_SHIFT_REG),
	.stall_out(rnode_174to175_bb5_var__u17_0_stall_out_reg_175_NO_SHIFT_REG),
	.data_in(rnode_172to174_bb5_var__u17_0_NO_SHIFT_REG),
	.data_out(rnode_174to175_bb5_var__u17_0_reg_175_NO_SHIFT_REG)
);

defparam rnode_174to175_bb5_var__u17_0_reg_175_fifo.DEPTH = 1;
defparam rnode_174to175_bb5_var__u17_0_reg_175_fifo.DATA_WIDTH = 1;
defparam rnode_174to175_bb5_var__u17_0_reg_175_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_174to175_bb5_var__u17_0_reg_175_fifo.IMPL = "shift_reg";

assign rnode_174to175_bb5_var__u17_0_reg_175_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_172to174_bb5_var__u17_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_174to175_bb5_var__u17_0_NO_SHIFT_REG = rnode_174to175_bb5_var__u17_0_reg_175_NO_SHIFT_REG;
assign rnode_174to175_bb5_var__u17_0_stall_in_reg_175_NO_SHIFT_REG = 1'b0;
assign rnode_174to175_bb5_var__u17_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_175to176_bb5__23_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_175to176_bb5__23_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_175to176_bb5__23_i_0_NO_SHIFT_REG;
 logic rnode_175to176_bb5__23_i_0_reg_176_inputs_ready_NO_SHIFT_REG;
 logic rnode_175to176_bb5__23_i_0_reg_176_NO_SHIFT_REG;
 logic rnode_175to176_bb5__23_i_0_valid_out_reg_176_NO_SHIFT_REG;
 logic rnode_175to176_bb5__23_i_0_stall_in_reg_176_NO_SHIFT_REG;
 logic rnode_175to176_bb5__23_i_0_stall_out_reg_176_NO_SHIFT_REG;

acl_data_fifo rnode_175to176_bb5__23_i_0_reg_176_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_175to176_bb5__23_i_0_reg_176_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_175to176_bb5__23_i_0_stall_in_reg_176_NO_SHIFT_REG),
	.valid_out(rnode_175to176_bb5__23_i_0_valid_out_reg_176_NO_SHIFT_REG),
	.stall_out(rnode_175to176_bb5__23_i_0_stall_out_reg_176_NO_SHIFT_REG),
	.data_in(rnode_172to175_bb5__23_i_0_NO_SHIFT_REG),
	.data_out(rnode_175to176_bb5__23_i_0_reg_176_NO_SHIFT_REG)
);

defparam rnode_175to176_bb5__23_i_0_reg_176_fifo.DEPTH = 1;
defparam rnode_175to176_bb5__23_i_0_reg_176_fifo.DATA_WIDTH = 1;
defparam rnode_175to176_bb5__23_i_0_reg_176_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_175to176_bb5__23_i_0_reg_176_fifo.IMPL = "shift_reg";

assign rnode_175to176_bb5__23_i_0_reg_176_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_172to175_bb5__23_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_175to176_bb5__23_i_0_NO_SHIFT_REG = rnode_175to176_bb5__23_i_0_reg_176_NO_SHIFT_REG;
assign rnode_175to176_bb5__23_i_0_stall_in_reg_176_NO_SHIFT_REG = 1'b0;
assign rnode_175to176_bb5__23_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_and4_i_stall_local;
wire [31:0] local_bb5_and4_i;

assign local_bb5_and4_i = (rnode_175to176_bb5_xor_i_0_NO_SHIFT_REG & 32'h80000000);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp50_not_i_stall_local;
wire local_bb5_cmp50_not_i;

assign local_bb5_cmp50_not_i = ((rnode_173to174_bb5_add_i_0_NO_SHIFT_REG & 32'h1FF) != 32'h7F);

// This section implements an unregistered operation.
// 
wire local_bb5_inc_i_stall_local;
wire [31:0] local_bb5_inc_i;

assign local_bb5_inc_i = ((rnode_173to174_bb5_add_i_1_NO_SHIFT_REG & 32'h1FF) + 32'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i3_shuffle_i_stall_local;
wire [31:0] local_bb5_or_i3_shuffle_i;

assign local_bb5_or_i3_shuffle_i[0] = local_bb5_or_i3_bitvec_i[24];
assign local_bb5_or_i3_shuffle_i[1] = local_bb5_or_i3_bitvec_i[25];
assign local_bb5_or_i3_shuffle_i[2] = local_bb5_or_i3_bitvec_i[26];
assign local_bb5_or_i3_shuffle_i[3] = local_bb5_or_i3_bitvec_i[27];
assign local_bb5_or_i3_shuffle_i[4] = local_bb5_or_i3_bitvec_i[28];
assign local_bb5_or_i3_shuffle_i[5] = local_bb5_or_i3_bitvec_i[29];
assign local_bb5_or_i3_shuffle_i[6] = local_bb5_or_i3_bitvec_i[30];
assign local_bb5_or_i3_shuffle_i[7] = local_bb5_or_i3_bitvec_i[31];
assign local_bb5_or_i3_shuffle_i[8] = local_bb5_or_i3_bitvec_i[32];
assign local_bb5_or_i3_shuffle_i[9] = local_bb5_or_i3_bitvec_i[33];
assign local_bb5_or_i3_shuffle_i[10] = local_bb5_or_i3_bitvec_i[34];
assign local_bb5_or_i3_shuffle_i[11] = local_bb5_or_i3_bitvec_i[35];
assign local_bb5_or_i3_shuffle_i[12] = local_bb5_or_i3_bitvec_i[36];
assign local_bb5_or_i3_shuffle_i[13] = local_bb5_or_i3_bitvec_i[37];
assign local_bb5_or_i3_shuffle_i[14] = local_bb5_or_i3_bitvec_i[38];
assign local_bb5_or_i3_shuffle_i[15] = local_bb5_or_i3_bitvec_i[39];
assign local_bb5_or_i3_shuffle_i[16] = local_bb5_or_i3_bitvec_i[40];
assign local_bb5_or_i3_shuffle_i[17] = local_bb5_or_i3_bitvec_i[41];
assign local_bb5_or_i3_shuffle_i[18] = local_bb5_or_i3_bitvec_i[42];
assign local_bb5_or_i3_shuffle_i[19] = local_bb5_or_i3_bitvec_i[43];
assign local_bb5_or_i3_shuffle_i[20] = local_bb5_or_i3_bitvec_i[44];
assign local_bb5_or_i3_shuffle_i[21] = local_bb5_or_i3_bitvec_i[45];
assign local_bb5_or_i3_shuffle_i[22] = local_bb5_or_i3_bitvec_i[46];
assign local_bb5_or_i3_shuffle_i[23] = local_bb5_or_i3_bitvec_i[47];
assign local_bb5_or_i3_shuffle_i[24] = 1'b0;
assign local_bb5_or_i3_shuffle_i[25] = 1'b0;
assign local_bb5_or_i3_shuffle_i[26] = 1'b0;
assign local_bb5_or_i3_shuffle_i[27] = 1'b0;
assign local_bb5_or_i3_shuffle_i[28] = 1'b0;
assign local_bb5_or_i3_shuffle_i[29] = 1'b0;
assign local_bb5_or_i3_shuffle_i[30] = 1'b0;
assign local_bb5_or_i3_shuffle_i[31] = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_shuffle_i_stall_local;
wire [31:0] local_bb5_or_i_shuffle_i;

assign local_bb5_or_i_shuffle_i[0] = local_bb5_or_i3_bitvec_i[23];
assign local_bb5_or_i_shuffle_i[1] = local_bb5_or_i3_bitvec_i[24];
assign local_bb5_or_i_shuffle_i[2] = local_bb5_or_i3_bitvec_i[25];
assign local_bb5_or_i_shuffle_i[3] = local_bb5_or_i3_bitvec_i[26];
assign local_bb5_or_i_shuffle_i[4] = local_bb5_or_i3_bitvec_i[27];
assign local_bb5_or_i_shuffle_i[5] = local_bb5_or_i3_bitvec_i[28];
assign local_bb5_or_i_shuffle_i[6] = local_bb5_or_i3_bitvec_i[29];
assign local_bb5_or_i_shuffle_i[7] = local_bb5_or_i3_bitvec_i[30];
assign local_bb5_or_i_shuffle_i[8] = local_bb5_or_i3_bitvec_i[31];
assign local_bb5_or_i_shuffle_i[9] = local_bb5_or_i3_bitvec_i[32];
assign local_bb5_or_i_shuffle_i[10] = local_bb5_or_i3_bitvec_i[33];
assign local_bb5_or_i_shuffle_i[11] = local_bb5_or_i3_bitvec_i[34];
assign local_bb5_or_i_shuffle_i[12] = local_bb5_or_i3_bitvec_i[35];
assign local_bb5_or_i_shuffle_i[13] = local_bb5_or_i3_bitvec_i[36];
assign local_bb5_or_i_shuffle_i[14] = local_bb5_or_i3_bitvec_i[37];
assign local_bb5_or_i_shuffle_i[15] = local_bb5_or_i3_bitvec_i[38];
assign local_bb5_or_i_shuffle_i[16] = local_bb5_or_i3_bitvec_i[39];
assign local_bb5_or_i_shuffle_i[17] = local_bb5_or_i3_bitvec_i[40];
assign local_bb5_or_i_shuffle_i[18] = local_bb5_or_i3_bitvec_i[41];
assign local_bb5_or_i_shuffle_i[19] = local_bb5_or_i3_bitvec_i[42];
assign local_bb5_or_i_shuffle_i[20] = local_bb5_or_i3_bitvec_i[43];
assign local_bb5_or_i_shuffle_i[21] = local_bb5_or_i3_bitvec_i[44];
assign local_bb5_or_i_shuffle_i[22] = local_bb5_or_i3_bitvec_i[45];
assign local_bb5_or_i_shuffle_i[23] = local_bb5_or_i3_bitvec_i[46];
assign local_bb5_or_i_shuffle_i[24] = local_bb5_or_i3_bitvec_i[47];
assign local_bb5_or_i_shuffle_i[25] = 1'b0;
assign local_bb5_or_i_shuffle_i[26] = 1'b0;
assign local_bb5_or_i_shuffle_i[27] = 1'b0;
assign local_bb5_or_i_shuffle_i[28] = 1'b0;
assign local_bb5_or_i_shuffle_i[29] = 1'b0;
assign local_bb5_or_i_shuffle_i[30] = 1'b0;
assign local_bb5_or_i_shuffle_i[31] = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5__25_i_stall_local;
wire local_bb5__25_i;

assign local_bb5__25_i = (local_bb5_tobool49_i & local_bb5_cmp50_not_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i3_compressed_i_stall_local;
wire [31:0] local_bb5_or_i3_compressed_i;

assign local_bb5_or_i3_compressed_i = local_bb5_or_i3_shuffle_i;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_compressed_i_stall_local;
wire [31:0] local_bb5_or_i_compressed_i;

assign local_bb5_or_i_compressed_i = local_bb5_or_i_shuffle_i;

// This section implements an unregistered operation.
// 
wire local_bb5__28_i_stall_local;
wire [31:0] local_bb5__28_i;

assign local_bb5__28_i = (local_bb5__25_i ? (local_bb5_shl1_i_i & 32'hFFFFFE00) : (local_bb5_shl1_i4_i & 32'hFFFFFF00));

// This section implements an unregistered operation.
// 
wire local_bb5__30_i_stall_local;
wire [31:0] local_bb5__30_i;

assign local_bb5__30_i = (local_bb5__25_i ? (rnode_173to174_bb5_add_i_2_NO_SHIFT_REG & 32'h1FF) : 32'h7F);

// This section implements an unregistered operation.
// 
wire local_bb5__26_i_stall_local;
wire [31:0] local_bb5__26_i;

assign local_bb5__26_i = (local_bb5__25_i ? (local_bb5_or_i_compressed_i & 32'h1FFFFFF) : (local_bb5_or_i3_compressed_i & 32'hFFFFFF));

// This section implements an unregistered operation.
// 
wire local_bb5__29_i_stall_local;
wire [31:0] local_bb5__29_i;

assign local_bb5__29_i = (local_bb5_tobool49_i ? (local_bb5__28_i & 32'hFFFFFF00) : (local_bb5_shl1_i4_i & 32'hFFFFFF00));

// This section implements an unregistered operation.
// 
wire local_bb5__31_i_stall_local;
wire [31:0] local_bb5__31_i;

assign local_bb5__31_i = (local_bb5_tobool49_i ? (local_bb5__30_i & 32'h1FF) : (local_bb5_inc_i & 32'h3FF));

// This section implements an unregistered operation.
// 
wire local_bb5__29_i_valid_out;
wire local_bb5__29_i_stall_in;
wire local_bb5__27_i_valid_out;
wire local_bb5__27_i_stall_in;
wire local_bb5__31_i_valid_out;
wire local_bb5__31_i_stall_in;
wire local_bb5__27_i_inputs_ready;
wire local_bb5__27_i_stall_local;
wire [31:0] local_bb5__27_i;

assign local_bb5__27_i_inputs_ready = (local_bb5_mul_i_i_valid_out_0_NO_SHIFT_REG & local_bb5_mul_i_i_valid_out_2_NO_SHIFT_REG & rnode_173to174_bb5_add_i_0_valid_out_0_NO_SHIFT_REG & rnode_173to174_bb5_add_i_0_valid_out_1_NO_SHIFT_REG & rnode_173to174_bb5_add_i_0_valid_out_2_NO_SHIFT_REG & local_bb5_mul_i_i_valid_out_1_NO_SHIFT_REG);
assign local_bb5__27_i = (local_bb5_tobool49_i ? (local_bb5__26_i & 32'h1FFFFFF) : (local_bb5_or_i3_compressed_i & 32'hFFFFFF));
assign local_bb5__29_i_valid_out = 1'b1;
assign local_bb5__27_i_valid_out = 1'b1;
assign local_bb5__31_i_valid_out = 1'b1;
assign local_bb5_mul_i_i_stall_in_0 = 1'b0;
assign local_bb5_mul_i_i_stall_in_2 = 1'b0;
assign rnode_173to174_bb5_add_i_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_173to174_bb5_add_i_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_173to174_bb5_add_i_0_stall_in_2_NO_SHIFT_REG = 1'b0;
assign local_bb5_mul_i_i_stall_in_1 = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_174to175_bb5__29_i_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_174to175_bb5__29_i_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_174to175_bb5__29_i_0_NO_SHIFT_REG;
 logic rnode_174to175_bb5__29_i_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_174to175_bb5__29_i_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_174to175_bb5__29_i_1_NO_SHIFT_REG;
 logic rnode_174to175_bb5__29_i_0_reg_175_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_174to175_bb5__29_i_0_reg_175_NO_SHIFT_REG;
 logic rnode_174to175_bb5__29_i_0_valid_out_0_reg_175_NO_SHIFT_REG;
 logic rnode_174to175_bb5__29_i_0_stall_in_0_reg_175_NO_SHIFT_REG;
 logic rnode_174to175_bb5__29_i_0_stall_out_reg_175_NO_SHIFT_REG;

acl_data_fifo rnode_174to175_bb5__29_i_0_reg_175_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_174to175_bb5__29_i_0_reg_175_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_174to175_bb5__29_i_0_stall_in_0_reg_175_NO_SHIFT_REG),
	.valid_out(rnode_174to175_bb5__29_i_0_valid_out_0_reg_175_NO_SHIFT_REG),
	.stall_out(rnode_174to175_bb5__29_i_0_stall_out_reg_175_NO_SHIFT_REG),
	.data_in((local_bb5__29_i & 32'hFFFFFF00)),
	.data_out(rnode_174to175_bb5__29_i_0_reg_175_NO_SHIFT_REG)
);

defparam rnode_174to175_bb5__29_i_0_reg_175_fifo.DEPTH = 1;
defparam rnode_174to175_bb5__29_i_0_reg_175_fifo.DATA_WIDTH = 32;
defparam rnode_174to175_bb5__29_i_0_reg_175_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_174to175_bb5__29_i_0_reg_175_fifo.IMPL = "shift_reg";

assign rnode_174to175_bb5__29_i_0_reg_175_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5__29_i_stall_in = 1'b0;
assign rnode_174to175_bb5__29_i_0_stall_in_0_reg_175_NO_SHIFT_REG = 1'b0;
assign rnode_174to175_bb5__29_i_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_174to175_bb5__29_i_0_NO_SHIFT_REG = rnode_174to175_bb5__29_i_0_reg_175_NO_SHIFT_REG;
assign rnode_174to175_bb5__29_i_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_174to175_bb5__29_i_1_NO_SHIFT_REG = rnode_174to175_bb5__29_i_0_reg_175_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_174to175_bb5__27_i_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_174to175_bb5__27_i_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_174to175_bb5__27_i_0_NO_SHIFT_REG;
 logic rnode_174to175_bb5__27_i_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_174to175_bb5__27_i_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_174to175_bb5__27_i_1_NO_SHIFT_REG;
 logic rnode_174to175_bb5__27_i_0_reg_175_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_174to175_bb5__27_i_0_reg_175_NO_SHIFT_REG;
 logic rnode_174to175_bb5__27_i_0_valid_out_0_reg_175_NO_SHIFT_REG;
 logic rnode_174to175_bb5__27_i_0_stall_in_0_reg_175_NO_SHIFT_REG;
 logic rnode_174to175_bb5__27_i_0_stall_out_reg_175_NO_SHIFT_REG;

acl_data_fifo rnode_174to175_bb5__27_i_0_reg_175_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_174to175_bb5__27_i_0_reg_175_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_174to175_bb5__27_i_0_stall_in_0_reg_175_NO_SHIFT_REG),
	.valid_out(rnode_174to175_bb5__27_i_0_valid_out_0_reg_175_NO_SHIFT_REG),
	.stall_out(rnode_174to175_bb5__27_i_0_stall_out_reg_175_NO_SHIFT_REG),
	.data_in((local_bb5__27_i & 32'h1FFFFFF)),
	.data_out(rnode_174to175_bb5__27_i_0_reg_175_NO_SHIFT_REG)
);

defparam rnode_174to175_bb5__27_i_0_reg_175_fifo.DEPTH = 1;
defparam rnode_174to175_bb5__27_i_0_reg_175_fifo.DATA_WIDTH = 32;
defparam rnode_174to175_bb5__27_i_0_reg_175_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_174to175_bb5__27_i_0_reg_175_fifo.IMPL = "shift_reg";

assign rnode_174to175_bb5__27_i_0_reg_175_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5__27_i_stall_in = 1'b0;
assign rnode_174to175_bb5__27_i_0_stall_in_0_reg_175_NO_SHIFT_REG = 1'b0;
assign rnode_174to175_bb5__27_i_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_174to175_bb5__27_i_0_NO_SHIFT_REG = rnode_174to175_bb5__27_i_0_reg_175_NO_SHIFT_REG;
assign rnode_174to175_bb5__27_i_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_174to175_bb5__27_i_1_NO_SHIFT_REG = rnode_174to175_bb5__27_i_0_reg_175_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_174to175_bb5__31_i_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_174to175_bb5__31_i_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_174to175_bb5__31_i_0_NO_SHIFT_REG;
 logic rnode_174to175_bb5__31_i_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_174to175_bb5__31_i_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_174to175_bb5__31_i_1_NO_SHIFT_REG;
 logic rnode_174to175_bb5__31_i_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_174to175_bb5__31_i_0_stall_in_2_NO_SHIFT_REG;
 logic [31:0] rnode_174to175_bb5__31_i_2_NO_SHIFT_REG;
 logic rnode_174to175_bb5__31_i_0_valid_out_3_NO_SHIFT_REG;
 logic rnode_174to175_bb5__31_i_0_stall_in_3_NO_SHIFT_REG;
 logic [31:0] rnode_174to175_bb5__31_i_3_NO_SHIFT_REG;
 logic rnode_174to175_bb5__31_i_0_reg_175_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_174to175_bb5__31_i_0_reg_175_NO_SHIFT_REG;
 logic rnode_174to175_bb5__31_i_0_valid_out_0_reg_175_NO_SHIFT_REG;
 logic rnode_174to175_bb5__31_i_0_stall_in_0_reg_175_NO_SHIFT_REG;
 logic rnode_174to175_bb5__31_i_0_stall_out_reg_175_NO_SHIFT_REG;

acl_data_fifo rnode_174to175_bb5__31_i_0_reg_175_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_174to175_bb5__31_i_0_reg_175_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_174to175_bb5__31_i_0_stall_in_0_reg_175_NO_SHIFT_REG),
	.valid_out(rnode_174to175_bb5__31_i_0_valid_out_0_reg_175_NO_SHIFT_REG),
	.stall_out(rnode_174to175_bb5__31_i_0_stall_out_reg_175_NO_SHIFT_REG),
	.data_in((local_bb5__31_i & 32'h3FF)),
	.data_out(rnode_174to175_bb5__31_i_0_reg_175_NO_SHIFT_REG)
);

defparam rnode_174to175_bb5__31_i_0_reg_175_fifo.DEPTH = 1;
defparam rnode_174to175_bb5__31_i_0_reg_175_fifo.DATA_WIDTH = 32;
defparam rnode_174to175_bb5__31_i_0_reg_175_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_174to175_bb5__31_i_0_reg_175_fifo.IMPL = "shift_reg";

assign rnode_174to175_bb5__31_i_0_reg_175_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5__31_i_stall_in = 1'b0;
assign rnode_174to175_bb5__31_i_0_stall_in_0_reg_175_NO_SHIFT_REG = 1'b0;
assign rnode_174to175_bb5__31_i_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_174to175_bb5__31_i_0_NO_SHIFT_REG = rnode_174to175_bb5__31_i_0_reg_175_NO_SHIFT_REG;
assign rnode_174to175_bb5__31_i_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_174to175_bb5__31_i_1_NO_SHIFT_REG = rnode_174to175_bb5__31_i_0_reg_175_NO_SHIFT_REG;
assign rnode_174to175_bb5__31_i_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_174to175_bb5__31_i_2_NO_SHIFT_REG = rnode_174to175_bb5__31_i_0_reg_175_NO_SHIFT_REG;
assign rnode_174to175_bb5__31_i_0_valid_out_3_NO_SHIFT_REG = 1'b1;
assign rnode_174to175_bb5__31_i_3_NO_SHIFT_REG = rnode_174to175_bb5__31_i_0_reg_175_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_cmp70_i_stall_local;
wire local_bb5_cmp70_i;

assign local_bb5_cmp70_i = ((rnode_174to175_bb5__29_i_0_NO_SHIFT_REG & 32'hFFFFFF00) > 32'h80000000);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u19_stall_local;
wire local_bb5_var__u19;

assign local_bb5_var__u19 = ($signed((rnode_174to175_bb5__29_i_1_NO_SHIFT_REG & 32'hFFFFFF00)) < $signed(32'h0));

// This section implements an unregistered operation.
// 
wire local_bb5_or69_vec_0_i_stall_local;
wire [63:0] local_bb5_or69_vec_0_i;

assign local_bb5_or69_vec_0_i[31:0] = (rnode_174to175_bb5__27_i_0_NO_SHIFT_REG & 32'h1FFFFFF);
assign local_bb5_or69_vec_0_i[63:32] = 32'bx;

// This section implements an unregistered operation.
// 
wire local_bb5_and74_i_stall_local;
wire [31:0] local_bb5_and74_i;

assign local_bb5_and74_i = ((rnode_174to175_bb5__27_i_1_NO_SHIFT_REG & 32'h1FFFFFF) & 32'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp53_i_stall_local;
wire local_bb5_cmp53_i;

assign local_bb5_cmp53_i = ((rnode_174to175_bb5__31_i_0_NO_SHIFT_REG & 32'h3FF) > 32'h17D);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp63_i_valid_out;
wire local_bb5_cmp63_i_stall_in;
wire local_bb5_cmp63_i_inputs_ready;
wire local_bb5_cmp63_i_stall_local;
wire local_bb5_cmp63_i;

assign local_bb5_cmp63_i_inputs_ready = rnode_174to175_bb5__31_i_0_valid_out_1_NO_SHIFT_REG;
assign local_bb5_cmp63_i = ((rnode_174to175_bb5__31_i_1_NO_SHIFT_REG & 32'h3FF) < 32'h80);
assign local_bb5_cmp63_i_valid_out = 1'b1;
assign rnode_174to175_bb5__31_i_0_stall_in_1_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_sub_i_stall_local;
wire [31:0] local_bb5_sub_i;

assign local_bb5_sub_i = ((rnode_174to175_bb5__31_i_2_NO_SHIFT_REG & 32'h3FF) << 32'h17);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp65_not_i_valid_out;
wire local_bb5_cmp65_not_i_stall_in;
wire local_bb5_cmp65_not_i_inputs_ready;
wire local_bb5_cmp65_not_i_stall_local;
wire local_bb5_cmp65_not_i;

assign local_bb5_cmp65_not_i_inputs_ready = rnode_174to175_bb5__31_i_0_valid_out_3_NO_SHIFT_REG;
assign local_bb5_cmp65_not_i = ((rnode_174to175_bb5__31_i_3_NO_SHIFT_REG & 32'h3FF) != 32'h7F);
assign local_bb5_cmp65_not_i_valid_out = 1'b1;
assign rnode_174to175_bb5__31_i_0_stall_in_3_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_tobool75_i_stall_local;
wire local_bb5_tobool75_i;

assign local_bb5_tobool75_i = ((local_bb5_and74_i & 32'h1) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_or57_i_valid_out;
wire local_bb5_or57_i_stall_in;
wire local_bb5_or57_i_inputs_ready;
wire local_bb5_or57_i_stall_local;
wire local_bb5_or57_i;

assign local_bb5_or57_i_inputs_ready = (rnode_174to175_bb5_var__u17_0_valid_out_NO_SHIFT_REG & rnode_174to175_bb5__31_i_0_valid_out_0_NO_SHIFT_REG);
assign local_bb5_or57_i = (rnode_174to175_bb5_var__u17_0_NO_SHIFT_REG | local_bb5_cmp53_i);
assign local_bb5_or57_i_valid_out = 1'b1;
assign rnode_174to175_bb5_var__u17_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_174to175_bb5__31_i_0_stall_in_0_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_175to176_bb5_cmp63_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_175to176_bb5_cmp63_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_175to176_bb5_cmp63_i_0_NO_SHIFT_REG;
 logic rnode_175to176_bb5_cmp63_i_0_reg_176_inputs_ready_NO_SHIFT_REG;
 logic rnode_175to176_bb5_cmp63_i_0_reg_176_NO_SHIFT_REG;
 logic rnode_175to176_bb5_cmp63_i_0_valid_out_reg_176_NO_SHIFT_REG;
 logic rnode_175to176_bb5_cmp63_i_0_stall_in_reg_176_NO_SHIFT_REG;
 logic rnode_175to176_bb5_cmp63_i_0_stall_out_reg_176_NO_SHIFT_REG;

acl_data_fifo rnode_175to176_bb5_cmp63_i_0_reg_176_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_175to176_bb5_cmp63_i_0_reg_176_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_175to176_bb5_cmp63_i_0_stall_in_reg_176_NO_SHIFT_REG),
	.valid_out(rnode_175to176_bb5_cmp63_i_0_valid_out_reg_176_NO_SHIFT_REG),
	.stall_out(rnode_175to176_bb5_cmp63_i_0_stall_out_reg_176_NO_SHIFT_REG),
	.data_in(local_bb5_cmp63_i),
	.data_out(rnode_175to176_bb5_cmp63_i_0_reg_176_NO_SHIFT_REG)
);

defparam rnode_175to176_bb5_cmp63_i_0_reg_176_fifo.DEPTH = 1;
defparam rnode_175to176_bb5_cmp63_i_0_reg_176_fifo.DATA_WIDTH = 1;
defparam rnode_175to176_bb5_cmp63_i_0_reg_176_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_175to176_bb5_cmp63_i_0_reg_176_fifo.IMPL = "shift_reg";

assign rnode_175to176_bb5_cmp63_i_0_reg_176_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp63_i_stall_in = 1'b0;
assign rnode_175to176_bb5_cmp63_i_0_NO_SHIFT_REG = rnode_175to176_bb5_cmp63_i_0_reg_176_NO_SHIFT_REG;
assign rnode_175to176_bb5_cmp63_i_0_stall_in_reg_176_NO_SHIFT_REG = 1'b0;
assign rnode_175to176_bb5_cmp63_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_and67_i_stall_local;
wire [31:0] local_bb5_and67_i;

assign local_bb5_and67_i = ((local_bb5_sub_i & 32'hFF800000) + 32'h40800000);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_175to176_bb5_cmp65_not_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_175to176_bb5_cmp65_not_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_175to176_bb5_cmp65_not_i_0_NO_SHIFT_REG;
 logic rnode_175to176_bb5_cmp65_not_i_0_reg_176_inputs_ready_NO_SHIFT_REG;
 logic rnode_175to176_bb5_cmp65_not_i_0_reg_176_NO_SHIFT_REG;
 logic rnode_175to176_bb5_cmp65_not_i_0_valid_out_reg_176_NO_SHIFT_REG;
 logic rnode_175to176_bb5_cmp65_not_i_0_stall_in_reg_176_NO_SHIFT_REG;
 logic rnode_175to176_bb5_cmp65_not_i_0_stall_out_reg_176_NO_SHIFT_REG;

acl_data_fifo rnode_175to176_bb5_cmp65_not_i_0_reg_176_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_175to176_bb5_cmp65_not_i_0_reg_176_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_175to176_bb5_cmp65_not_i_0_stall_in_reg_176_NO_SHIFT_REG),
	.valid_out(rnode_175to176_bb5_cmp65_not_i_0_valid_out_reg_176_NO_SHIFT_REG),
	.stall_out(rnode_175to176_bb5_cmp65_not_i_0_stall_out_reg_176_NO_SHIFT_REG),
	.data_in(local_bb5_cmp65_not_i),
	.data_out(rnode_175to176_bb5_cmp65_not_i_0_reg_176_NO_SHIFT_REG)
);

defparam rnode_175to176_bb5_cmp65_not_i_0_reg_176_fifo.DEPTH = 1;
defparam rnode_175to176_bb5_cmp65_not_i_0_reg_176_fifo.DATA_WIDTH = 1;
defparam rnode_175to176_bb5_cmp65_not_i_0_reg_176_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_175to176_bb5_cmp65_not_i_0_reg_176_fifo.IMPL = "shift_reg";

assign rnode_175to176_bb5_cmp65_not_i_0_reg_176_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp65_not_i_stall_in = 1'b0;
assign rnode_175to176_bb5_cmp65_not_i_0_NO_SHIFT_REG = rnode_175to176_bb5_cmp65_not_i_0_reg_176_NO_SHIFT_REG;
assign rnode_175to176_bb5_cmp65_not_i_0_stall_in_reg_176_NO_SHIFT_REG = 1'b0;
assign rnode_175to176_bb5_cmp65_not_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5__33_i_stall_local;
wire local_bb5__33_i;

assign local_bb5__33_i = (local_bb5_tobool75_i & local_bb5_var__u19);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_175to176_bb5_or57_i_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_175to176_bb5_or57_i_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_175to176_bb5_or57_i_0_NO_SHIFT_REG;
 logic rnode_175to176_bb5_or57_i_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_175to176_bb5_or57_i_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_175to176_bb5_or57_i_1_NO_SHIFT_REG;
 logic rnode_175to176_bb5_or57_i_0_reg_176_inputs_ready_NO_SHIFT_REG;
 logic rnode_175to176_bb5_or57_i_0_reg_176_NO_SHIFT_REG;
 logic rnode_175to176_bb5_or57_i_0_valid_out_0_reg_176_NO_SHIFT_REG;
 logic rnode_175to176_bb5_or57_i_0_stall_in_0_reg_176_NO_SHIFT_REG;
 logic rnode_175to176_bb5_or57_i_0_stall_out_reg_176_NO_SHIFT_REG;

acl_data_fifo rnode_175to176_bb5_or57_i_0_reg_176_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_175to176_bb5_or57_i_0_reg_176_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_175to176_bb5_or57_i_0_stall_in_0_reg_176_NO_SHIFT_REG),
	.valid_out(rnode_175to176_bb5_or57_i_0_valid_out_0_reg_176_NO_SHIFT_REG),
	.stall_out(rnode_175to176_bb5_or57_i_0_stall_out_reg_176_NO_SHIFT_REG),
	.data_in(local_bb5_or57_i),
	.data_out(rnode_175to176_bb5_or57_i_0_reg_176_NO_SHIFT_REG)
);

defparam rnode_175to176_bb5_or57_i_0_reg_176_fifo.DEPTH = 1;
defparam rnode_175to176_bb5_or57_i_0_reg_176_fifo.DATA_WIDTH = 1;
defparam rnode_175to176_bb5_or57_i_0_reg_176_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_175to176_bb5_or57_i_0_reg_176_fifo.IMPL = "shift_reg";

assign rnode_175to176_bb5_or57_i_0_reg_176_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or57_i_stall_in = 1'b0;
assign rnode_175to176_bb5_or57_i_0_stall_in_0_reg_176_NO_SHIFT_REG = 1'b0;
assign rnode_175to176_bb5_or57_i_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_175to176_bb5_or57_i_0_NO_SHIFT_REG = rnode_175to176_bb5_or57_i_0_reg_176_NO_SHIFT_REG;
assign rnode_175to176_bb5_or57_i_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_175to176_bb5_or57_i_1_NO_SHIFT_REG = rnode_175to176_bb5_or57_i_0_reg_176_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_or69_vec_1_i_stall_local;
wire [63:0] local_bb5_or69_vec_1_i;

assign local_bb5_or69_vec_1_i[31:0] = local_bb5_or69_vec_0_i[31:0];
assign local_bb5_or69_vec_1_i[63:32] = (local_bb5_and67_i & 32'hFF800000);

// This section implements an unregistered operation.
// 
wire local_bb5__34_i_valid_out;
wire local_bb5__34_i_stall_in;
wire local_bb5__34_i_inputs_ready;
wire local_bb5__34_i_stall_local;
wire local_bb5__34_i;

assign local_bb5__34_i_inputs_ready = (rnode_174to175_bb5__29_i_0_valid_out_0_NO_SHIFT_REG & rnode_174to175_bb5__29_i_0_valid_out_1_NO_SHIFT_REG & rnode_174to175_bb5__27_i_0_valid_out_1_NO_SHIFT_REG);
assign local_bb5__34_i = (local_bb5_cmp70_i | local_bb5__33_i);
assign local_bb5__34_i_valid_out = 1'b1;
assign rnode_174to175_bb5__29_i_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_174to175_bb5__29_i_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_174to175_bb5__27_i_0_stall_in_1_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_cond95_i_stall_local;
wire [31:0] local_bb5_cond95_i;

assign local_bb5_cond95_i = (rnode_175to176_bb5_or57_i_1_NO_SHIFT_REG ? 32'h7F800000 : 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_or69_bitvec_i_stall_local;
wire [63:0] local_bb5_or69_bitvec_i;

assign local_bb5_or69_bitvec_i = local_bb5_or69_vec_1_i;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_175to176_bb5__34_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_175to176_bb5__34_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_175to176_bb5__34_i_0_NO_SHIFT_REG;
 logic rnode_175to176_bb5__34_i_0_reg_176_inputs_ready_NO_SHIFT_REG;
 logic rnode_175to176_bb5__34_i_0_reg_176_NO_SHIFT_REG;
 logic rnode_175to176_bb5__34_i_0_valid_out_reg_176_NO_SHIFT_REG;
 logic rnode_175to176_bb5__34_i_0_stall_in_reg_176_NO_SHIFT_REG;
 logic rnode_175to176_bb5__34_i_0_stall_out_reg_176_NO_SHIFT_REG;

acl_data_fifo rnode_175to176_bb5__34_i_0_reg_176_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_175to176_bb5__34_i_0_reg_176_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_175to176_bb5__34_i_0_stall_in_reg_176_NO_SHIFT_REG),
	.valid_out(rnode_175to176_bb5__34_i_0_valid_out_reg_176_NO_SHIFT_REG),
	.stall_out(rnode_175to176_bb5__34_i_0_stall_out_reg_176_NO_SHIFT_REG),
	.data_in(local_bb5__34_i),
	.data_out(rnode_175to176_bb5__34_i_0_reg_176_NO_SHIFT_REG)
);

defparam rnode_175to176_bb5__34_i_0_reg_176_fifo.DEPTH = 1;
defparam rnode_175to176_bb5__34_i_0_reg_176_fifo.DATA_WIDTH = 1;
defparam rnode_175to176_bb5__34_i_0_reg_176_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_175to176_bb5__34_i_0_reg_176_fifo.IMPL = "shift_reg";

assign rnode_175to176_bb5__34_i_0_reg_176_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5__34_i_stall_in = 1'b0;
assign rnode_175to176_bb5__34_i_0_NO_SHIFT_REG = rnode_175to176_bb5__34_i_0_reg_176_NO_SHIFT_REG;
assign rnode_175to176_bb5__34_i_0_stall_in_reg_176_NO_SHIFT_REG = 1'b0;
assign rnode_175to176_bb5__34_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or69_shuffle_i_stall_local;
wire [31:0] local_bb5_or69_shuffle_i;

assign local_bb5_or69_shuffle_i[0] = local_bb5_or69_bitvec_i[0];
assign local_bb5_or69_shuffle_i[1] = local_bb5_or69_bitvec_i[1];
assign local_bb5_or69_shuffle_i[2] = local_bb5_or69_bitvec_i[2];
assign local_bb5_or69_shuffle_i[3] = local_bb5_or69_bitvec_i[3];
assign local_bb5_or69_shuffle_i[4] = local_bb5_or69_bitvec_i[4];
assign local_bb5_or69_shuffle_i[5] = local_bb5_or69_bitvec_i[5];
assign local_bb5_or69_shuffle_i[6] = local_bb5_or69_bitvec_i[6];
assign local_bb5_or69_shuffle_i[7] = local_bb5_or69_bitvec_i[7];
assign local_bb5_or69_shuffle_i[8] = local_bb5_or69_bitvec_i[8];
assign local_bb5_or69_shuffle_i[9] = local_bb5_or69_bitvec_i[9];
assign local_bb5_or69_shuffle_i[10] = local_bb5_or69_bitvec_i[10];
assign local_bb5_or69_shuffle_i[11] = local_bb5_or69_bitvec_i[11];
assign local_bb5_or69_shuffle_i[12] = local_bb5_or69_bitvec_i[12];
assign local_bb5_or69_shuffle_i[13] = local_bb5_or69_bitvec_i[13];
assign local_bb5_or69_shuffle_i[14] = local_bb5_or69_bitvec_i[14];
assign local_bb5_or69_shuffle_i[15] = local_bb5_or69_bitvec_i[15];
assign local_bb5_or69_shuffle_i[16] = local_bb5_or69_bitvec_i[16];
assign local_bb5_or69_shuffle_i[17] = local_bb5_or69_bitvec_i[17];
assign local_bb5_or69_shuffle_i[18] = local_bb5_or69_bitvec_i[18];
assign local_bb5_or69_shuffle_i[19] = local_bb5_or69_bitvec_i[19];
assign local_bb5_or69_shuffle_i[20] = local_bb5_or69_bitvec_i[20];
assign local_bb5_or69_shuffle_i[21] = local_bb5_or69_bitvec_i[21];
assign local_bb5_or69_shuffle_i[22] = local_bb5_or69_bitvec_i[22];
assign local_bb5_or69_shuffle_i[23] = local_bb5_or69_bitvec_i[55];
assign local_bb5_or69_shuffle_i[24] = local_bb5_or69_bitvec_i[56];
assign local_bb5_or69_shuffle_i[25] = local_bb5_or69_bitvec_i[57];
assign local_bb5_or69_shuffle_i[26] = local_bb5_or69_bitvec_i[58];
assign local_bb5_or69_shuffle_i[27] = local_bb5_or69_bitvec_i[59];
assign local_bb5_or69_shuffle_i[28] = local_bb5_or69_bitvec_i[60];
assign local_bb5_or69_shuffle_i[29] = local_bb5_or69_bitvec_i[61];
assign local_bb5_or69_shuffle_i[30] = local_bb5_or69_bitvec_i[62];
assign local_bb5_or69_shuffle_i[31] = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_stall_local;
wire [31:0] local_bb5_cond_i;

assign local_bb5_cond_i[31:1] = 31'h0;
assign local_bb5_cond_i[0] = rnode_175to176_bb5__34_i_0_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_or69_compressed_i_valid_out;
wire local_bb5_or69_compressed_i_stall_in;
wire local_bb5_or69_compressed_i_inputs_ready;
wire local_bb5_or69_compressed_i_stall_local;
wire [31:0] local_bb5_or69_compressed_i;

assign local_bb5_or69_compressed_i_inputs_ready = (rnode_174to175_bb5__27_i_0_valid_out_0_NO_SHIFT_REG & rnode_174to175_bb5__31_i_0_valid_out_2_NO_SHIFT_REG);
assign local_bb5_or69_compressed_i = local_bb5_or69_shuffle_i;
assign local_bb5_or69_compressed_i_valid_out = 1'b1;
assign rnode_174to175_bb5__27_i_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_174to175_bb5__31_i_0_stall_in_2_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_175to176_bb5_or69_compressed_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_175to176_bb5_or69_compressed_i_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_175to176_bb5_or69_compressed_i_0_NO_SHIFT_REG;
 logic rnode_175to176_bb5_or69_compressed_i_0_reg_176_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_175to176_bb5_or69_compressed_i_0_reg_176_NO_SHIFT_REG;
 logic rnode_175to176_bb5_or69_compressed_i_0_valid_out_reg_176_NO_SHIFT_REG;
 logic rnode_175to176_bb5_or69_compressed_i_0_stall_in_reg_176_NO_SHIFT_REG;
 logic rnode_175to176_bb5_or69_compressed_i_0_stall_out_reg_176_NO_SHIFT_REG;

acl_data_fifo rnode_175to176_bb5_or69_compressed_i_0_reg_176_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_175to176_bb5_or69_compressed_i_0_reg_176_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_175to176_bb5_or69_compressed_i_0_stall_in_reg_176_NO_SHIFT_REG),
	.valid_out(rnode_175to176_bb5_or69_compressed_i_0_valid_out_reg_176_NO_SHIFT_REG),
	.stall_out(rnode_175to176_bb5_or69_compressed_i_0_stall_out_reg_176_NO_SHIFT_REG),
	.data_in((local_bb5_or69_compressed_i & 32'h7FFFFFFF)),
	.data_out(rnode_175to176_bb5_or69_compressed_i_0_reg_176_NO_SHIFT_REG)
);

defparam rnode_175to176_bb5_or69_compressed_i_0_reg_176_fifo.DEPTH = 1;
defparam rnode_175to176_bb5_or69_compressed_i_0_reg_176_fifo.DATA_WIDTH = 32;
defparam rnode_175to176_bb5_or69_compressed_i_0_reg_176_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_175to176_bb5_or69_compressed_i_0_reg_176_fifo.IMPL = "shift_reg";

assign rnode_175to176_bb5_or69_compressed_i_0_reg_176_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or69_compressed_i_stall_in = 1'b0;
assign rnode_175to176_bb5_or69_compressed_i_0_NO_SHIFT_REG = rnode_175to176_bb5_or69_compressed_i_0_reg_176_NO_SHIFT_REG;
assign rnode_175to176_bb5_or69_compressed_i_0_stall_in_reg_176_NO_SHIFT_REG = 1'b0;
assign rnode_175to176_bb5_or69_compressed_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_add78_i_stall_local;
wire [31:0] local_bb5_add78_i;

assign local_bb5_add78_i = ((local_bb5_cond_i & 32'h1) + (rnode_175to176_bb5_or69_compressed_i_0_NO_SHIFT_REG & 32'h7FFFFFFF));

// This section implements an unregistered operation.
// 
wire local_bb5_or80_vec_0_i_stall_local;
wire [63:0] local_bb5_or80_vec_0_i;

assign local_bb5_or80_vec_0_i[31:0] = local_bb5_add78_i;
assign local_bb5_or80_vec_0_i[63:32] = 32'bx;

// This section implements an unregistered operation.
// 
wire local_bb5_and81_i_stall_local;
wire [31:0] local_bb5_and81_i;

assign local_bb5_and81_i = (local_bb5_add78_i & 32'h800000);

// This section implements an unregistered operation.
// 
wire local_bb5_or80_vec_1_i_stall_local;
wire [63:0] local_bb5_or80_vec_1_i;

assign local_bb5_or80_vec_1_i[31:0] = local_bb5_or80_vec_0_i[31:0];
assign local_bb5_or80_vec_1_i[63:32] = rnode_175to176_bb5_xor_i_1_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_cmp82_i_stall_local;
wire local_bb5_cmp82_i;

assign local_bb5_cmp82_i = ((local_bb5_and81_i & 32'h800000) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_or80_bitvec_i_stall_local;
wire [63:0] local_bb5_or80_bitvec_i;

assign local_bb5_or80_bitvec_i = local_bb5_or80_vec_1_i;

// This section implements an unregistered operation.
// 
wire local_bb5_brmerge16_i_stall_local;
wire local_bb5_brmerge16_i;

assign local_bb5_brmerge16_i = (local_bb5_cmp82_i | rnode_175to176_bb5_cmp65_not_i_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb5_or80_shuffle_i_stall_local;
wire [31:0] local_bb5_or80_shuffle_i;

assign local_bb5_or80_shuffle_i[0] = local_bb5_or80_bitvec_i[0];
assign local_bb5_or80_shuffle_i[1] = local_bb5_or80_bitvec_i[1];
assign local_bb5_or80_shuffle_i[2] = local_bb5_or80_bitvec_i[2];
assign local_bb5_or80_shuffle_i[3] = local_bb5_or80_bitvec_i[3];
assign local_bb5_or80_shuffle_i[4] = local_bb5_or80_bitvec_i[4];
assign local_bb5_or80_shuffle_i[5] = local_bb5_or80_bitvec_i[5];
assign local_bb5_or80_shuffle_i[6] = local_bb5_or80_bitvec_i[6];
assign local_bb5_or80_shuffle_i[7] = local_bb5_or80_bitvec_i[7];
assign local_bb5_or80_shuffle_i[8] = local_bb5_or80_bitvec_i[8];
assign local_bb5_or80_shuffle_i[9] = local_bb5_or80_bitvec_i[9];
assign local_bb5_or80_shuffle_i[10] = local_bb5_or80_bitvec_i[10];
assign local_bb5_or80_shuffle_i[11] = local_bb5_or80_bitvec_i[11];
assign local_bb5_or80_shuffle_i[12] = local_bb5_or80_bitvec_i[12];
assign local_bb5_or80_shuffle_i[13] = local_bb5_or80_bitvec_i[13];
assign local_bb5_or80_shuffle_i[14] = local_bb5_or80_bitvec_i[14];
assign local_bb5_or80_shuffle_i[15] = local_bb5_or80_bitvec_i[15];
assign local_bb5_or80_shuffle_i[16] = local_bb5_or80_bitvec_i[16];
assign local_bb5_or80_shuffle_i[17] = local_bb5_or80_bitvec_i[17];
assign local_bb5_or80_shuffle_i[18] = local_bb5_or80_bitvec_i[18];
assign local_bb5_or80_shuffle_i[19] = local_bb5_or80_bitvec_i[19];
assign local_bb5_or80_shuffle_i[20] = local_bb5_or80_bitvec_i[20];
assign local_bb5_or80_shuffle_i[21] = local_bb5_or80_bitvec_i[21];
assign local_bb5_or80_shuffle_i[22] = local_bb5_or80_bitvec_i[22];
assign local_bb5_or80_shuffle_i[23] = local_bb5_or80_bitvec_i[23];
assign local_bb5_or80_shuffle_i[24] = local_bb5_or80_bitvec_i[24];
assign local_bb5_or80_shuffle_i[25] = local_bb5_or80_bitvec_i[25];
assign local_bb5_or80_shuffle_i[26] = local_bb5_or80_bitvec_i[26];
assign local_bb5_or80_shuffle_i[27] = local_bb5_or80_bitvec_i[27];
assign local_bb5_or80_shuffle_i[28] = local_bb5_or80_bitvec_i[28];
assign local_bb5_or80_shuffle_i[29] = local_bb5_or80_bitvec_i[29];
assign local_bb5_or80_shuffle_i[30] = local_bb5_or80_bitvec_i[30];
assign local_bb5_or80_shuffle_i[31] = local_bb5_or80_bitvec_i[63];

// This section implements an unregistered operation.
// 
wire local_bb5_tobool87_i_stall_local;
wire local_bb5_tobool87_i;

assign local_bb5_tobool87_i = (local_bb5_brmerge16_i & rnode_175to176_bb5_cmp63_i_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb5_or80_compressed_i_stall_local;
wire [31:0] local_bb5_or80_compressed_i;

assign local_bb5_or80_compressed_i = local_bb5_or80_shuffle_i;

// This section implements an unregistered operation.
// 
wire local_bb5_reduction_5_i_stall_local;
wire local_bb5_reduction_5_i;

assign local_bb5_reduction_5_i = (local_bb5_tobool87_i | rnode_175to176_bb5_reduction_3_i_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb5_reduction_6_i_stall_local;
wire local_bb5_reduction_6_i;

assign local_bb5_reduction_6_i = (rnode_175to176_bb5_or57_i_0_NO_SHIFT_REG | local_bb5_reduction_5_i);

// This section implements an unregistered operation.
// 
wire local_bb5_and4__i_stall_local;
wire [31:0] local_bb5_and4__i;

assign local_bb5_and4__i = (local_bb5_reduction_6_i ? (local_bb5_and4_i & 32'h80000000) : 32'hFFFFFFFF);

// This section implements an unregistered operation.
// 
wire local_bb5_and93_i_stall_local;
wire [31:0] local_bb5_and93_i;

assign local_bb5_and93_i = (local_bb5_and4__i & local_bb5_or80_compressed_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or96_i_stall_local;
wire [31:0] local_bb5_or96_i;

assign local_bb5_or96_i = (local_bb5_and93_i | (local_bb5_cond95_i & 32'h7F800000));

// This section implements an unregistered operation.
// 
wire local_bb5_var__u20_valid_out;
wire local_bb5_var__u20_stall_in;
wire local_bb5_var__u20_inputs_ready;
wire local_bb5_var__u20_stall_local;
wire [31:0] local_bb5_var__u20;

assign local_bb5_var__u20_inputs_ready = (rnode_175to176_bb5_xor_i_0_valid_out_0_NO_SHIFT_REG & rnode_175to176_bb5__23_i_0_valid_out_NO_SHIFT_REG & rnode_175to176_bb5_xor_i_0_valid_out_1_NO_SHIFT_REG & rnode_175to176_bb5_reduction_3_i_0_valid_out_NO_SHIFT_REG & rnode_175to176_bb5_or57_i_0_valid_out_0_NO_SHIFT_REG & rnode_175to176_bb5_or57_i_0_valid_out_1_NO_SHIFT_REG & rnode_175to176_bb5_cmp63_i_0_valid_out_NO_SHIFT_REG & rnode_175to176_bb5_cmp65_not_i_0_valid_out_NO_SHIFT_REG & rnode_175to176_bb5__34_i_0_valid_out_NO_SHIFT_REG & rnode_175to176_bb5_or69_compressed_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_var__u20 = (rnode_175to176_bb5__23_i_0_NO_SHIFT_REG ? 32'h7FC00000 : local_bb5_or96_i);
assign local_bb5_var__u20_valid_out = 1'b1;
assign rnode_175to176_bb5_xor_i_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_175to176_bb5__23_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_175to176_bb5_xor_i_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_175to176_bb5_reduction_3_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_175to176_bb5_or57_i_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_175to176_bb5_or57_i_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_175to176_bb5_cmp63_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_175to176_bb5_cmp65_not_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_175to176_bb5__34_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_175to176_bb5_or69_compressed_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_176to177_bb5_var__u20_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_176to177_bb5_var__u20_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_176to177_bb5_var__u20_0_NO_SHIFT_REG;
 logic rnode_176to177_bb5_var__u20_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_176to177_bb5_var__u20_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_176to177_bb5_var__u20_1_NO_SHIFT_REG;
 logic rnode_176to177_bb5_var__u20_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_176to177_bb5_var__u20_0_stall_in_2_NO_SHIFT_REG;
 logic [31:0] rnode_176to177_bb5_var__u20_2_NO_SHIFT_REG;
 logic rnode_176to177_bb5_var__u20_0_reg_177_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_176to177_bb5_var__u20_0_reg_177_NO_SHIFT_REG;
 logic rnode_176to177_bb5_var__u20_0_valid_out_0_reg_177_NO_SHIFT_REG;
 logic rnode_176to177_bb5_var__u20_0_stall_in_0_reg_177_NO_SHIFT_REG;
 logic rnode_176to177_bb5_var__u20_0_stall_out_reg_177_NO_SHIFT_REG;

acl_data_fifo rnode_176to177_bb5_var__u20_0_reg_177_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_176to177_bb5_var__u20_0_reg_177_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_176to177_bb5_var__u20_0_stall_in_0_reg_177_NO_SHIFT_REG),
	.valid_out(rnode_176to177_bb5_var__u20_0_valid_out_0_reg_177_NO_SHIFT_REG),
	.stall_out(rnode_176to177_bb5_var__u20_0_stall_out_reg_177_NO_SHIFT_REG),
	.data_in(local_bb5_var__u20),
	.data_out(rnode_176to177_bb5_var__u20_0_reg_177_NO_SHIFT_REG)
);

defparam rnode_176to177_bb5_var__u20_0_reg_177_fifo.DEPTH = 1;
defparam rnode_176to177_bb5_var__u20_0_reg_177_fifo.DATA_WIDTH = 32;
defparam rnode_176to177_bb5_var__u20_0_reg_177_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_176to177_bb5_var__u20_0_reg_177_fifo.IMPL = "shift_reg";

assign rnode_176to177_bb5_var__u20_0_reg_177_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u20_stall_in = 1'b0;
assign rnode_176to177_bb5_var__u20_0_stall_in_0_reg_177_NO_SHIFT_REG = 1'b0;
assign rnode_176to177_bb5_var__u20_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_176to177_bb5_var__u20_0_NO_SHIFT_REG = rnode_176to177_bb5_var__u20_0_reg_177_NO_SHIFT_REG;
assign rnode_176to177_bb5_var__u20_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_176to177_bb5_var__u20_1_NO_SHIFT_REG = rnode_176to177_bb5_var__u20_0_reg_177_NO_SHIFT_REG;
assign rnode_176to177_bb5_var__u20_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_176to177_bb5_var__u20_2_NO_SHIFT_REG = rnode_176to177_bb5_var__u20_0_reg_177_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_and_i21_stall_local;
wire [31:0] local_bb5_and_i21;

assign local_bb5_and_i21 = (rnode_176to177_bb5_var__u20_0_NO_SHIFT_REG >> 32'h10);

// This section implements an unregistered operation.
// 
wire local_bb5_and10_i27_stall_local;
wire [31:0] local_bb5_and10_i27;

assign local_bb5_and10_i27 = (rnode_176to177_bb5_var__u20_1_NO_SHIFT_REG & 32'hFFFF);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_177to178_bb5_var__u20_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_177to178_bb5_var__u20_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_177to178_bb5_var__u20_0_NO_SHIFT_REG;
 logic rnode_177to178_bb5_var__u20_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_177to178_bb5_var__u20_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_177to178_bb5_var__u20_1_NO_SHIFT_REG;
 logic rnode_177to178_bb5_var__u20_0_reg_178_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_177to178_bb5_var__u20_0_reg_178_NO_SHIFT_REG;
 logic rnode_177to178_bb5_var__u20_0_valid_out_0_reg_178_NO_SHIFT_REG;
 logic rnode_177to178_bb5_var__u20_0_stall_in_0_reg_178_NO_SHIFT_REG;
 logic rnode_177to178_bb5_var__u20_0_stall_out_reg_178_NO_SHIFT_REG;

acl_data_fifo rnode_177to178_bb5_var__u20_0_reg_178_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_177to178_bb5_var__u20_0_reg_178_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_177to178_bb5_var__u20_0_stall_in_0_reg_178_NO_SHIFT_REG),
	.valid_out(rnode_177to178_bb5_var__u20_0_valid_out_0_reg_178_NO_SHIFT_REG),
	.stall_out(rnode_177to178_bb5_var__u20_0_stall_out_reg_178_NO_SHIFT_REG),
	.data_in(rnode_176to177_bb5_var__u20_2_NO_SHIFT_REG),
	.data_out(rnode_177to178_bb5_var__u20_0_reg_178_NO_SHIFT_REG)
);

defparam rnode_177to178_bb5_var__u20_0_reg_178_fifo.DEPTH = 1;
defparam rnode_177to178_bb5_var__u20_0_reg_178_fifo.DATA_WIDTH = 32;
defparam rnode_177to178_bb5_var__u20_0_reg_178_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_177to178_bb5_var__u20_0_reg_178_fifo.IMPL = "shift_reg";

assign rnode_177to178_bb5_var__u20_0_reg_178_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_176to177_bb5_var__u20_0_stall_in_2_NO_SHIFT_REG = 1'b0;
assign rnode_177to178_bb5_var__u20_0_stall_in_0_reg_178_NO_SHIFT_REG = 1'b0;
assign rnode_177to178_bb5_var__u20_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_177to178_bb5_var__u20_0_NO_SHIFT_REG = rnode_177to178_bb5_var__u20_0_reg_178_NO_SHIFT_REG;
assign rnode_177to178_bb5_var__u20_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_177to178_bb5_var__u20_1_NO_SHIFT_REG = rnode_177to178_bb5_var__u20_0_reg_178_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_shr_i22_stall_local;
wire [31:0] local_bb5_shr_i22;

assign local_bb5_shr_i22 = ((local_bb5_and_i21 & 32'hFFFF) & 32'h7FFF);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp13_i29_stall_local;
wire local_bb5_cmp13_i29;

assign local_bb5_cmp13_i29 = ((local_bb5_and10_i27 & 32'hFFFF) > (local_bb5_and12_i28 & 32'hFFFF));

// This section implements an unregistered operation.
// 
wire local_bb5_cmp_i25_stall_local;
wire local_bb5_cmp_i25;

assign local_bb5_cmp_i25 = ((local_bb5_shr_i22 & 32'h7FFF) > (local_bb5_shr3_i24 & 32'h7FFF));

// This section implements an unregistered operation.
// 
wire local_bb5_cmp8_i26_stall_local;
wire local_bb5_cmp8_i26;

assign local_bb5_cmp8_i26 = ((local_bb5_shr_i22 & 32'h7FFF) == (local_bb5_shr3_i24 & 32'h7FFF));

// This section implements an unregistered operation.
// 
wire local_bb5___i30_stall_local;
wire local_bb5___i30;

assign local_bb5___i30 = (local_bb5_cmp8_i26 & local_bb5_cmp13_i29);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u15_valid_out_2;
wire local_bb5_var__u15_stall_in_2;
wire local_bb5__8_i31_valid_out;
wire local_bb5__8_i31_stall_in;
wire local_bb5__8_i31_inputs_ready;
wire local_bb5__8_i31_stall_local;
wire local_bb5__8_i31;

assign local_bb5__8_i31_inputs_ready = (rnode_176to177_bb5_c2_ene3_0_valid_out_NO_SHIFT_REG & rnode_176to177_bb5_var__u20_0_valid_out_1_NO_SHIFT_REG & rnode_176to177_bb5_var__u20_0_valid_out_0_NO_SHIFT_REG);
assign local_bb5__8_i31 = (local_bb5_cmp_i25 | local_bb5___i30);
assign local_bb5_var__u15_valid_out_2 = 1'b1;
assign local_bb5__8_i31_valid_out = 1'b1;
assign rnode_176to177_bb5_c2_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_176to177_bb5_var__u20_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_176to177_bb5_var__u20_0_stall_in_0_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_177to178_bb5_var__u15_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_177to178_bb5_var__u15_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_177to178_bb5_var__u15_0_NO_SHIFT_REG;
 logic rnode_177to178_bb5_var__u15_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_177to178_bb5_var__u15_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_177to178_bb5_var__u15_1_NO_SHIFT_REG;
 logic rnode_177to178_bb5_var__u15_0_reg_178_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_177to178_bb5_var__u15_0_reg_178_NO_SHIFT_REG;
 logic rnode_177to178_bb5_var__u15_0_valid_out_0_reg_178_NO_SHIFT_REG;
 logic rnode_177to178_bb5_var__u15_0_stall_in_0_reg_178_NO_SHIFT_REG;
 logic rnode_177to178_bb5_var__u15_0_stall_out_reg_178_NO_SHIFT_REG;

acl_data_fifo rnode_177to178_bb5_var__u15_0_reg_178_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_177to178_bb5_var__u15_0_reg_178_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_177to178_bb5_var__u15_0_stall_in_0_reg_178_NO_SHIFT_REG),
	.valid_out(rnode_177to178_bb5_var__u15_0_valid_out_0_reg_178_NO_SHIFT_REG),
	.stall_out(rnode_177to178_bb5_var__u15_0_stall_out_reg_178_NO_SHIFT_REG),
	.data_in(local_bb5_var__u15),
	.data_out(rnode_177to178_bb5_var__u15_0_reg_178_NO_SHIFT_REG)
);

defparam rnode_177to178_bb5_var__u15_0_reg_178_fifo.DEPTH = 1;
defparam rnode_177to178_bb5_var__u15_0_reg_178_fifo.DATA_WIDTH = 32;
defparam rnode_177to178_bb5_var__u15_0_reg_178_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_177to178_bb5_var__u15_0_reg_178_fifo.IMPL = "shift_reg";

assign rnode_177to178_bb5_var__u15_0_reg_178_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u15_stall_in_2 = 1'b0;
assign rnode_177to178_bb5_var__u15_0_stall_in_0_reg_178_NO_SHIFT_REG = 1'b0;
assign rnode_177to178_bb5_var__u15_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_177to178_bb5_var__u15_0_NO_SHIFT_REG = rnode_177to178_bb5_var__u15_0_reg_178_NO_SHIFT_REG;
assign rnode_177to178_bb5_var__u15_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_177to178_bb5_var__u15_1_NO_SHIFT_REG = rnode_177to178_bb5_var__u15_0_reg_178_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_177to178_bb5__8_i31_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_177to178_bb5__8_i31_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_177to178_bb5__8_i31_0_NO_SHIFT_REG;
 logic rnode_177to178_bb5__8_i31_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_177to178_bb5__8_i31_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_177to178_bb5__8_i31_1_NO_SHIFT_REG;
 logic rnode_177to178_bb5__8_i31_0_reg_178_inputs_ready_NO_SHIFT_REG;
 logic rnode_177to178_bb5__8_i31_0_reg_178_NO_SHIFT_REG;
 logic rnode_177to178_bb5__8_i31_0_valid_out_0_reg_178_NO_SHIFT_REG;
 logic rnode_177to178_bb5__8_i31_0_stall_in_0_reg_178_NO_SHIFT_REG;
 logic rnode_177to178_bb5__8_i31_0_stall_out_reg_178_NO_SHIFT_REG;

acl_data_fifo rnode_177to178_bb5__8_i31_0_reg_178_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_177to178_bb5__8_i31_0_reg_178_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_177to178_bb5__8_i31_0_stall_in_0_reg_178_NO_SHIFT_REG),
	.valid_out(rnode_177to178_bb5__8_i31_0_valid_out_0_reg_178_NO_SHIFT_REG),
	.stall_out(rnode_177to178_bb5__8_i31_0_stall_out_reg_178_NO_SHIFT_REG),
	.data_in(local_bb5__8_i31),
	.data_out(rnode_177to178_bb5__8_i31_0_reg_178_NO_SHIFT_REG)
);

defparam rnode_177to178_bb5__8_i31_0_reg_178_fifo.DEPTH = 1;
defparam rnode_177to178_bb5__8_i31_0_reg_178_fifo.DATA_WIDTH = 1;
defparam rnode_177to178_bb5__8_i31_0_reg_178_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_177to178_bb5__8_i31_0_reg_178_fifo.IMPL = "shift_reg";

assign rnode_177to178_bb5__8_i31_0_reg_178_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5__8_i31_stall_in = 1'b0;
assign rnode_177to178_bb5__8_i31_0_stall_in_0_reg_178_NO_SHIFT_REG = 1'b0;
assign rnode_177to178_bb5__8_i31_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_177to178_bb5__8_i31_0_NO_SHIFT_REG = rnode_177to178_bb5__8_i31_0_reg_178_NO_SHIFT_REG;
assign rnode_177to178_bb5__8_i31_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_177to178_bb5__8_i31_1_NO_SHIFT_REG = rnode_177to178_bb5__8_i31_0_reg_178_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5__9_i32_stall_local;
wire [31:0] local_bb5__9_i32;

assign local_bb5__9_i32 = (rnode_177to178_bb5__8_i31_0_NO_SHIFT_REG ? rnode_177to178_bb5_var__u15_0_NO_SHIFT_REG : rnode_177to178_bb5_var__u20_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb5__10_i33_stall_local;
wire [31:0] local_bb5__10_i33;

assign local_bb5__10_i33 = (rnode_177to178_bb5__8_i31_1_NO_SHIFT_REG ? rnode_177to178_bb5_var__u20_1_NO_SHIFT_REG : rnode_177to178_bb5_var__u15_1_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb5_shr18_i36_stall_local;
wire [31:0] local_bb5_shr18_i36;

assign local_bb5_shr18_i36 = (local_bb5__9_i32 >> 32'h17);

// This section implements an unregistered operation.
// 
wire local_bb5_shr16_i34_stall_local;
wire [31:0] local_bb5_shr16_i34;

assign local_bb5_shr16_i34 = (local_bb5__10_i33 >> 32'h17);

// This section implements an unregistered operation.
// 
wire local_bb5_and19_i37_stall_local;
wire [31:0] local_bb5_and19_i37;

assign local_bb5_and19_i37 = ((local_bb5_shr18_i36 & 32'h1FF) & 32'hFF);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u21_stall_local;
wire [31:0] local_bb5_var__u21;

assign local_bb5_var__u21 = ((local_bb5_shr18_i36 & 32'h1FF) & (local_bb5_shr16_i34 & 32'h1FF));

// This section implements an unregistered operation.
// 
wire local_bb5_sub_i65_stall_local;
wire [31:0] local_bb5_sub_i65;

assign local_bb5_sub_i65 = ((local_bb5_shr16_i34 & 32'h1FF) - (local_bb5_shr18_i36 & 32'h1FF));

// This section implements an unregistered operation.
// 
wire local_bb5_lnot23_i41_stall_local;
wire local_bb5_lnot23_i41;

assign local_bb5_lnot23_i41 = ((local_bb5_and19_i37 & 32'hFF) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp27_i43_stall_local;
wire local_bb5_cmp27_i43;

assign local_bb5_cmp27_i43 = ((local_bb5_and19_i37 & 32'hFF) == 32'hFF);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u22_stall_local;
wire [31:0] local_bb5_var__u22;

assign local_bb5_var__u22 = ((local_bb5_var__u21 & 32'h1FF) & 32'hFF);

// This section implements an unregistered operation.
// 
wire local_bb5_and68_i66_stall_local;
wire [31:0] local_bb5_and68_i66;

assign local_bb5_and68_i66 = (local_bb5_sub_i65 & 32'hFF);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u23_stall_local;
wire local_bb5_var__u23;

assign local_bb5_var__u23 = ((local_bb5_var__u22 & 32'hFF) == 32'hFF);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp69_i67_stall_local;
wire local_bb5_cmp69_i67;

assign local_bb5_cmp69_i67 = ((local_bb5_and68_i66 & 32'hFF) > 32'h1F);

// This section implements an unregistered operation.
// 
wire local_bb5__9_i32_valid_out_1;
wire local_bb5__9_i32_stall_in_1;
wire local_bb5__10_i33_valid_out_1;
wire local_bb5__10_i33_stall_in_1;
wire local_bb5_shr16_i34_valid_out_2;
wire local_bb5_shr16_i34_stall_in_2;
wire local_bb5_lnot23_i41_valid_out;
wire local_bb5_lnot23_i41_stall_in;
wire local_bb5_cmp27_i43_valid_out;
wire local_bb5_cmp27_i43_stall_in;
wire local_bb5_var__u23_valid_out;
wire local_bb5_var__u23_stall_in;
wire local_bb5_align_0_i68_valid_out;
wire local_bb5_align_0_i68_stall_in;
wire local_bb5_align_0_i68_inputs_ready;
wire local_bb5_align_0_i68_stall_local;
wire [31:0] local_bb5_align_0_i68;

assign local_bb5_align_0_i68_inputs_ready = (rnode_177to178_bb5__8_i31_0_valid_out_0_NO_SHIFT_REG & rnode_177to178_bb5_var__u15_0_valid_out_0_NO_SHIFT_REG & rnode_177to178_bb5_var__u20_0_valid_out_0_NO_SHIFT_REG & rnode_177to178_bb5__8_i31_0_valid_out_1_NO_SHIFT_REG & rnode_177to178_bb5_var__u15_0_valid_out_1_NO_SHIFT_REG & rnode_177to178_bb5_var__u20_0_valid_out_1_NO_SHIFT_REG);
assign local_bb5_align_0_i68 = (local_bb5_cmp69_i67 ? 32'h1F : (local_bb5_and68_i66 & 32'hFF));
assign local_bb5__9_i32_valid_out_1 = 1'b1;
assign local_bb5__10_i33_valid_out_1 = 1'b1;
assign local_bb5_shr16_i34_valid_out_2 = 1'b1;
assign local_bb5_lnot23_i41_valid_out = 1'b1;
assign local_bb5_cmp27_i43_valid_out = 1'b1;
assign local_bb5_var__u23_valid_out = 1'b1;
assign local_bb5_align_0_i68_valid_out = 1'b1;
assign rnode_177to178_bb5__8_i31_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_177to178_bb5_var__u15_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_177to178_bb5_var__u20_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_177to178_bb5__8_i31_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_177to178_bb5_var__u15_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_177to178_bb5_var__u20_0_stall_in_1_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_178to179_bb5__9_i32_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_178to179_bb5__9_i32_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_178to179_bb5__9_i32_0_NO_SHIFT_REG;
 logic rnode_178to179_bb5__9_i32_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_178to179_bb5__9_i32_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_178to179_bb5__9_i32_1_NO_SHIFT_REG;
 logic rnode_178to179_bb5__9_i32_0_reg_179_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_178to179_bb5__9_i32_0_reg_179_NO_SHIFT_REG;
 logic rnode_178to179_bb5__9_i32_0_valid_out_0_reg_179_NO_SHIFT_REG;
 logic rnode_178to179_bb5__9_i32_0_stall_in_0_reg_179_NO_SHIFT_REG;
 logic rnode_178to179_bb5__9_i32_0_stall_out_reg_179_NO_SHIFT_REG;

acl_data_fifo rnode_178to179_bb5__9_i32_0_reg_179_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_178to179_bb5__9_i32_0_reg_179_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_178to179_bb5__9_i32_0_stall_in_0_reg_179_NO_SHIFT_REG),
	.valid_out(rnode_178to179_bb5__9_i32_0_valid_out_0_reg_179_NO_SHIFT_REG),
	.stall_out(rnode_178to179_bb5__9_i32_0_stall_out_reg_179_NO_SHIFT_REG),
	.data_in(local_bb5__9_i32),
	.data_out(rnode_178to179_bb5__9_i32_0_reg_179_NO_SHIFT_REG)
);

defparam rnode_178to179_bb5__9_i32_0_reg_179_fifo.DEPTH = 1;
defparam rnode_178to179_bb5__9_i32_0_reg_179_fifo.DATA_WIDTH = 32;
defparam rnode_178to179_bb5__9_i32_0_reg_179_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_178to179_bb5__9_i32_0_reg_179_fifo.IMPL = "shift_reg";

assign rnode_178to179_bb5__9_i32_0_reg_179_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5__9_i32_stall_in_1 = 1'b0;
assign rnode_178to179_bb5__9_i32_0_stall_in_0_reg_179_NO_SHIFT_REG = 1'b0;
assign rnode_178to179_bb5__9_i32_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_178to179_bb5__9_i32_0_NO_SHIFT_REG = rnode_178to179_bb5__9_i32_0_reg_179_NO_SHIFT_REG;
assign rnode_178to179_bb5__9_i32_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_178to179_bb5__9_i32_1_NO_SHIFT_REG = rnode_178to179_bb5__9_i32_0_reg_179_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_178to179_bb5__10_i33_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_178to179_bb5__10_i33_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_178to179_bb5__10_i33_0_NO_SHIFT_REG;
 logic rnode_178to179_bb5__10_i33_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_178to179_bb5__10_i33_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_178to179_bb5__10_i33_1_NO_SHIFT_REG;
 logic rnode_178to179_bb5__10_i33_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_178to179_bb5__10_i33_0_stall_in_2_NO_SHIFT_REG;
 logic [31:0] rnode_178to179_bb5__10_i33_2_NO_SHIFT_REG;
 logic rnode_178to179_bb5__10_i33_0_reg_179_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_178to179_bb5__10_i33_0_reg_179_NO_SHIFT_REG;
 logic rnode_178to179_bb5__10_i33_0_valid_out_0_reg_179_NO_SHIFT_REG;
 logic rnode_178to179_bb5__10_i33_0_stall_in_0_reg_179_NO_SHIFT_REG;
 logic rnode_178to179_bb5__10_i33_0_stall_out_reg_179_NO_SHIFT_REG;

acl_data_fifo rnode_178to179_bb5__10_i33_0_reg_179_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_178to179_bb5__10_i33_0_reg_179_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_178to179_bb5__10_i33_0_stall_in_0_reg_179_NO_SHIFT_REG),
	.valid_out(rnode_178to179_bb5__10_i33_0_valid_out_0_reg_179_NO_SHIFT_REG),
	.stall_out(rnode_178to179_bb5__10_i33_0_stall_out_reg_179_NO_SHIFT_REG),
	.data_in(local_bb5__10_i33),
	.data_out(rnode_178to179_bb5__10_i33_0_reg_179_NO_SHIFT_REG)
);

defparam rnode_178to179_bb5__10_i33_0_reg_179_fifo.DEPTH = 1;
defparam rnode_178to179_bb5__10_i33_0_reg_179_fifo.DATA_WIDTH = 32;
defparam rnode_178to179_bb5__10_i33_0_reg_179_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_178to179_bb5__10_i33_0_reg_179_fifo.IMPL = "shift_reg";

assign rnode_178to179_bb5__10_i33_0_reg_179_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5__10_i33_stall_in_1 = 1'b0;
assign rnode_178to179_bb5__10_i33_0_stall_in_0_reg_179_NO_SHIFT_REG = 1'b0;
assign rnode_178to179_bb5__10_i33_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_178to179_bb5__10_i33_0_NO_SHIFT_REG = rnode_178to179_bb5__10_i33_0_reg_179_NO_SHIFT_REG;
assign rnode_178to179_bb5__10_i33_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_178to179_bb5__10_i33_1_NO_SHIFT_REG = rnode_178to179_bb5__10_i33_0_reg_179_NO_SHIFT_REG;
assign rnode_178to179_bb5__10_i33_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_178to179_bb5__10_i33_2_NO_SHIFT_REG = rnode_178to179_bb5__10_i33_0_reg_179_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_178to179_bb5_shr16_i34_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_178to179_bb5_shr16_i34_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_178to179_bb5_shr16_i34_0_NO_SHIFT_REG;
 logic rnode_178to179_bb5_shr16_i34_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_178to179_bb5_shr16_i34_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_178to179_bb5_shr16_i34_1_NO_SHIFT_REG;
 logic rnode_178to179_bb5_shr16_i34_0_reg_179_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_178to179_bb5_shr16_i34_0_reg_179_NO_SHIFT_REG;
 logic rnode_178to179_bb5_shr16_i34_0_valid_out_0_reg_179_NO_SHIFT_REG;
 logic rnode_178to179_bb5_shr16_i34_0_stall_in_0_reg_179_NO_SHIFT_REG;
 logic rnode_178to179_bb5_shr16_i34_0_stall_out_reg_179_NO_SHIFT_REG;

acl_data_fifo rnode_178to179_bb5_shr16_i34_0_reg_179_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_178to179_bb5_shr16_i34_0_reg_179_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_178to179_bb5_shr16_i34_0_stall_in_0_reg_179_NO_SHIFT_REG),
	.valid_out(rnode_178to179_bb5_shr16_i34_0_valid_out_0_reg_179_NO_SHIFT_REG),
	.stall_out(rnode_178to179_bb5_shr16_i34_0_stall_out_reg_179_NO_SHIFT_REG),
	.data_in((local_bb5_shr16_i34 & 32'h1FF)),
	.data_out(rnode_178to179_bb5_shr16_i34_0_reg_179_NO_SHIFT_REG)
);

defparam rnode_178to179_bb5_shr16_i34_0_reg_179_fifo.DEPTH = 1;
defparam rnode_178to179_bb5_shr16_i34_0_reg_179_fifo.DATA_WIDTH = 32;
defparam rnode_178to179_bb5_shr16_i34_0_reg_179_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_178to179_bb5_shr16_i34_0_reg_179_fifo.IMPL = "shift_reg";

assign rnode_178to179_bb5_shr16_i34_0_reg_179_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shr16_i34_stall_in_2 = 1'b0;
assign rnode_178to179_bb5_shr16_i34_0_stall_in_0_reg_179_NO_SHIFT_REG = 1'b0;
assign rnode_178to179_bb5_shr16_i34_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_178to179_bb5_shr16_i34_0_NO_SHIFT_REG = rnode_178to179_bb5_shr16_i34_0_reg_179_NO_SHIFT_REG;
assign rnode_178to179_bb5_shr16_i34_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_178to179_bb5_shr16_i34_1_NO_SHIFT_REG = rnode_178to179_bb5_shr16_i34_0_reg_179_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_178to179_bb5_lnot23_i41_0_valid_out_NO_SHIFT_REG;
 logic rnode_178to179_bb5_lnot23_i41_0_stall_in_NO_SHIFT_REG;
 logic rnode_178to179_bb5_lnot23_i41_0_NO_SHIFT_REG;
 logic rnode_178to179_bb5_lnot23_i41_0_reg_179_inputs_ready_NO_SHIFT_REG;
 logic rnode_178to179_bb5_lnot23_i41_0_reg_179_NO_SHIFT_REG;
 logic rnode_178to179_bb5_lnot23_i41_0_valid_out_reg_179_NO_SHIFT_REG;
 logic rnode_178to179_bb5_lnot23_i41_0_stall_in_reg_179_NO_SHIFT_REG;
 logic rnode_178to179_bb5_lnot23_i41_0_stall_out_reg_179_NO_SHIFT_REG;

acl_data_fifo rnode_178to179_bb5_lnot23_i41_0_reg_179_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_178to179_bb5_lnot23_i41_0_reg_179_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_178to179_bb5_lnot23_i41_0_stall_in_reg_179_NO_SHIFT_REG),
	.valid_out(rnode_178to179_bb5_lnot23_i41_0_valid_out_reg_179_NO_SHIFT_REG),
	.stall_out(rnode_178to179_bb5_lnot23_i41_0_stall_out_reg_179_NO_SHIFT_REG),
	.data_in(local_bb5_lnot23_i41),
	.data_out(rnode_178to179_bb5_lnot23_i41_0_reg_179_NO_SHIFT_REG)
);

defparam rnode_178to179_bb5_lnot23_i41_0_reg_179_fifo.DEPTH = 1;
defparam rnode_178to179_bb5_lnot23_i41_0_reg_179_fifo.DATA_WIDTH = 1;
defparam rnode_178to179_bb5_lnot23_i41_0_reg_179_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_178to179_bb5_lnot23_i41_0_reg_179_fifo.IMPL = "shift_reg";

assign rnode_178to179_bb5_lnot23_i41_0_reg_179_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_lnot23_i41_stall_in = 1'b0;
assign rnode_178to179_bb5_lnot23_i41_0_NO_SHIFT_REG = rnode_178to179_bb5_lnot23_i41_0_reg_179_NO_SHIFT_REG;
assign rnode_178to179_bb5_lnot23_i41_0_stall_in_reg_179_NO_SHIFT_REG = 1'b0;
assign rnode_178to179_bb5_lnot23_i41_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_178to179_bb5_cmp27_i43_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_178to179_bb5_cmp27_i43_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_178to179_bb5_cmp27_i43_0_NO_SHIFT_REG;
 logic rnode_178to179_bb5_cmp27_i43_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_178to179_bb5_cmp27_i43_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_178to179_bb5_cmp27_i43_1_NO_SHIFT_REG;
 logic rnode_178to179_bb5_cmp27_i43_0_reg_179_inputs_ready_NO_SHIFT_REG;
 logic rnode_178to179_bb5_cmp27_i43_0_reg_179_NO_SHIFT_REG;
 logic rnode_178to179_bb5_cmp27_i43_0_valid_out_0_reg_179_NO_SHIFT_REG;
 logic rnode_178to179_bb5_cmp27_i43_0_stall_in_0_reg_179_NO_SHIFT_REG;
 logic rnode_178to179_bb5_cmp27_i43_0_stall_out_reg_179_NO_SHIFT_REG;

acl_data_fifo rnode_178to179_bb5_cmp27_i43_0_reg_179_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_178to179_bb5_cmp27_i43_0_reg_179_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_178to179_bb5_cmp27_i43_0_stall_in_0_reg_179_NO_SHIFT_REG),
	.valid_out(rnode_178to179_bb5_cmp27_i43_0_valid_out_0_reg_179_NO_SHIFT_REG),
	.stall_out(rnode_178to179_bb5_cmp27_i43_0_stall_out_reg_179_NO_SHIFT_REG),
	.data_in(local_bb5_cmp27_i43),
	.data_out(rnode_178to179_bb5_cmp27_i43_0_reg_179_NO_SHIFT_REG)
);

defparam rnode_178to179_bb5_cmp27_i43_0_reg_179_fifo.DEPTH = 1;
defparam rnode_178to179_bb5_cmp27_i43_0_reg_179_fifo.DATA_WIDTH = 1;
defparam rnode_178to179_bb5_cmp27_i43_0_reg_179_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_178to179_bb5_cmp27_i43_0_reg_179_fifo.IMPL = "shift_reg";

assign rnode_178to179_bb5_cmp27_i43_0_reg_179_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp27_i43_stall_in = 1'b0;
assign rnode_178to179_bb5_cmp27_i43_0_stall_in_0_reg_179_NO_SHIFT_REG = 1'b0;
assign rnode_178to179_bb5_cmp27_i43_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_178to179_bb5_cmp27_i43_0_NO_SHIFT_REG = rnode_178to179_bb5_cmp27_i43_0_reg_179_NO_SHIFT_REG;
assign rnode_178to179_bb5_cmp27_i43_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_178to179_bb5_cmp27_i43_1_NO_SHIFT_REG = rnode_178to179_bb5_cmp27_i43_0_reg_179_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_178to179_bb5_var__u23_0_valid_out_NO_SHIFT_REG;
 logic rnode_178to179_bb5_var__u23_0_stall_in_NO_SHIFT_REG;
 logic rnode_178to179_bb5_var__u23_0_NO_SHIFT_REG;
 logic rnode_178to179_bb5_var__u23_0_reg_179_inputs_ready_NO_SHIFT_REG;
 logic rnode_178to179_bb5_var__u23_0_reg_179_NO_SHIFT_REG;
 logic rnode_178to179_bb5_var__u23_0_valid_out_reg_179_NO_SHIFT_REG;
 logic rnode_178to179_bb5_var__u23_0_stall_in_reg_179_NO_SHIFT_REG;
 logic rnode_178to179_bb5_var__u23_0_stall_out_reg_179_NO_SHIFT_REG;

acl_data_fifo rnode_178to179_bb5_var__u23_0_reg_179_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_178to179_bb5_var__u23_0_reg_179_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_178to179_bb5_var__u23_0_stall_in_reg_179_NO_SHIFT_REG),
	.valid_out(rnode_178to179_bb5_var__u23_0_valid_out_reg_179_NO_SHIFT_REG),
	.stall_out(rnode_178to179_bb5_var__u23_0_stall_out_reg_179_NO_SHIFT_REG),
	.data_in(local_bb5_var__u23),
	.data_out(rnode_178to179_bb5_var__u23_0_reg_179_NO_SHIFT_REG)
);

defparam rnode_178to179_bb5_var__u23_0_reg_179_fifo.DEPTH = 1;
defparam rnode_178to179_bb5_var__u23_0_reg_179_fifo.DATA_WIDTH = 1;
defparam rnode_178to179_bb5_var__u23_0_reg_179_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_178to179_bb5_var__u23_0_reg_179_fifo.IMPL = "shift_reg";

assign rnode_178to179_bb5_var__u23_0_reg_179_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u23_stall_in = 1'b0;
assign rnode_178to179_bb5_var__u23_0_NO_SHIFT_REG = rnode_178to179_bb5_var__u23_0_reg_179_NO_SHIFT_REG;
assign rnode_178to179_bb5_var__u23_0_stall_in_reg_179_NO_SHIFT_REG = 1'b0;
assign rnode_178to179_bb5_var__u23_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_178to179_bb5_align_0_i68_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_178to179_bb5_align_0_i68_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_178to179_bb5_align_0_i68_0_NO_SHIFT_REG;
 logic rnode_178to179_bb5_align_0_i68_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_178to179_bb5_align_0_i68_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_178to179_bb5_align_0_i68_1_NO_SHIFT_REG;
 logic rnode_178to179_bb5_align_0_i68_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_178to179_bb5_align_0_i68_0_stall_in_2_NO_SHIFT_REG;
 logic [31:0] rnode_178to179_bb5_align_0_i68_2_NO_SHIFT_REG;
 logic rnode_178to179_bb5_align_0_i68_0_valid_out_3_NO_SHIFT_REG;
 logic rnode_178to179_bb5_align_0_i68_0_stall_in_3_NO_SHIFT_REG;
 logic [31:0] rnode_178to179_bb5_align_0_i68_3_NO_SHIFT_REG;
 logic rnode_178to179_bb5_align_0_i68_0_valid_out_4_NO_SHIFT_REG;
 logic rnode_178to179_bb5_align_0_i68_0_stall_in_4_NO_SHIFT_REG;
 logic [31:0] rnode_178to179_bb5_align_0_i68_4_NO_SHIFT_REG;
 logic rnode_178to179_bb5_align_0_i68_0_reg_179_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_178to179_bb5_align_0_i68_0_reg_179_NO_SHIFT_REG;
 logic rnode_178to179_bb5_align_0_i68_0_valid_out_0_reg_179_NO_SHIFT_REG;
 logic rnode_178to179_bb5_align_0_i68_0_stall_in_0_reg_179_NO_SHIFT_REG;
 logic rnode_178to179_bb5_align_0_i68_0_stall_out_reg_179_NO_SHIFT_REG;

acl_data_fifo rnode_178to179_bb5_align_0_i68_0_reg_179_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_178to179_bb5_align_0_i68_0_reg_179_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_178to179_bb5_align_0_i68_0_stall_in_0_reg_179_NO_SHIFT_REG),
	.valid_out(rnode_178to179_bb5_align_0_i68_0_valid_out_0_reg_179_NO_SHIFT_REG),
	.stall_out(rnode_178to179_bb5_align_0_i68_0_stall_out_reg_179_NO_SHIFT_REG),
	.data_in((local_bb5_align_0_i68 & 32'hFF)),
	.data_out(rnode_178to179_bb5_align_0_i68_0_reg_179_NO_SHIFT_REG)
);

defparam rnode_178to179_bb5_align_0_i68_0_reg_179_fifo.DEPTH = 1;
defparam rnode_178to179_bb5_align_0_i68_0_reg_179_fifo.DATA_WIDTH = 32;
defparam rnode_178to179_bb5_align_0_i68_0_reg_179_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_178to179_bb5_align_0_i68_0_reg_179_fifo.IMPL = "shift_reg";

assign rnode_178to179_bb5_align_0_i68_0_reg_179_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_align_0_i68_stall_in = 1'b0;
assign rnode_178to179_bb5_align_0_i68_0_stall_in_0_reg_179_NO_SHIFT_REG = 1'b0;
assign rnode_178to179_bb5_align_0_i68_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_178to179_bb5_align_0_i68_0_NO_SHIFT_REG = rnode_178to179_bb5_align_0_i68_0_reg_179_NO_SHIFT_REG;
assign rnode_178to179_bb5_align_0_i68_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_178to179_bb5_align_0_i68_1_NO_SHIFT_REG = rnode_178to179_bb5_align_0_i68_0_reg_179_NO_SHIFT_REG;
assign rnode_178to179_bb5_align_0_i68_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_178to179_bb5_align_0_i68_2_NO_SHIFT_REG = rnode_178to179_bb5_align_0_i68_0_reg_179_NO_SHIFT_REG;
assign rnode_178to179_bb5_align_0_i68_0_valid_out_3_NO_SHIFT_REG = 1'b1;
assign rnode_178to179_bb5_align_0_i68_3_NO_SHIFT_REG = rnode_178to179_bb5_align_0_i68_0_reg_179_NO_SHIFT_REG;
assign rnode_178to179_bb5_align_0_i68_0_valid_out_4_NO_SHIFT_REG = 1'b1;
assign rnode_178to179_bb5_align_0_i68_4_NO_SHIFT_REG = rnode_178to179_bb5_align_0_i68_0_reg_179_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_and21_i39_stall_local;
wire [31:0] local_bb5_and21_i39;

assign local_bb5_and21_i39 = (rnode_178to179_bb5__9_i32_0_NO_SHIFT_REG & 32'h7FFFFF);

// This section implements an unregistered operation.
// 
wire local_bb5_and20_i38_stall_local;
wire [31:0] local_bb5_and20_i38;

assign local_bb5_and20_i38 = (rnode_178to179_bb5__10_i33_0_NO_SHIFT_REG & 32'h7FFFFF);

// This section implements an unregistered operation.
// 
wire local_bb5_and35_i44_valid_out;
wire local_bb5_and35_i44_stall_in;
wire local_bb5_and35_i44_inputs_ready;
wire local_bb5_and35_i44_stall_local;
wire [31:0] local_bb5_and35_i44;

assign local_bb5_and35_i44_inputs_ready = rnode_178to179_bb5__10_i33_0_valid_out_1_NO_SHIFT_REG;
assign local_bb5_and35_i44 = (rnode_178to179_bb5__10_i33_1_NO_SHIFT_REG & 32'h80000000);
assign local_bb5_and35_i44_valid_out = 1'b1;
assign rnode_178to179_bb5__10_i33_0_stall_in_1_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_xor_i45_stall_local;
wire [31:0] local_bb5_xor_i45;

assign local_bb5_xor_i45 = (rnode_178to179_bb5__10_i33_2_NO_SHIFT_REG ^ rnode_178to179_bb5__9_i32_1_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb5_and17_i35_stall_local;
wire [31:0] local_bb5_and17_i35;

assign local_bb5_and17_i35 = ((rnode_178to179_bb5_shr16_i34_0_NO_SHIFT_REG & 32'h1FF) & 32'hFF);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_179to180_bb5_shr16_i34_0_valid_out_NO_SHIFT_REG;
 logic rnode_179to180_bb5_shr16_i34_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_179to180_bb5_shr16_i34_0_NO_SHIFT_REG;
 logic rnode_179to180_bb5_shr16_i34_0_reg_180_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_179to180_bb5_shr16_i34_0_reg_180_NO_SHIFT_REG;
 logic rnode_179to180_bb5_shr16_i34_0_valid_out_reg_180_NO_SHIFT_REG;
 logic rnode_179to180_bb5_shr16_i34_0_stall_in_reg_180_NO_SHIFT_REG;
 logic rnode_179to180_bb5_shr16_i34_0_stall_out_reg_180_NO_SHIFT_REG;

acl_data_fifo rnode_179to180_bb5_shr16_i34_0_reg_180_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_179to180_bb5_shr16_i34_0_reg_180_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_179to180_bb5_shr16_i34_0_stall_in_reg_180_NO_SHIFT_REG),
	.valid_out(rnode_179to180_bb5_shr16_i34_0_valid_out_reg_180_NO_SHIFT_REG),
	.stall_out(rnode_179to180_bb5_shr16_i34_0_stall_out_reg_180_NO_SHIFT_REG),
	.data_in((rnode_178to179_bb5_shr16_i34_1_NO_SHIFT_REG & 32'h1FF)),
	.data_out(rnode_179to180_bb5_shr16_i34_0_reg_180_NO_SHIFT_REG)
);

defparam rnode_179to180_bb5_shr16_i34_0_reg_180_fifo.DEPTH = 1;
defparam rnode_179to180_bb5_shr16_i34_0_reg_180_fifo.DATA_WIDTH = 32;
defparam rnode_179to180_bb5_shr16_i34_0_reg_180_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_179to180_bb5_shr16_i34_0_reg_180_fifo.IMPL = "shift_reg";

assign rnode_179to180_bb5_shr16_i34_0_reg_180_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_178to179_bb5_shr16_i34_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_179to180_bb5_shr16_i34_0_NO_SHIFT_REG = rnode_179to180_bb5_shr16_i34_0_reg_180_NO_SHIFT_REG;
assign rnode_179to180_bb5_shr16_i34_0_stall_in_reg_180_NO_SHIFT_REG = 1'b0;
assign rnode_179to180_bb5_shr16_i34_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_and93_i76_stall_local;
wire [31:0] local_bb5_and93_i76;

assign local_bb5_and93_i76 = ((rnode_178to179_bb5_align_0_i68_0_NO_SHIFT_REG & 32'hFF) & 32'h1C);

// This section implements an unregistered operation.
// 
wire local_bb5_and95_i78_stall_local;
wire [31:0] local_bb5_and95_i78;

assign local_bb5_and95_i78 = ((rnode_178to179_bb5_align_0_i68_1_NO_SHIFT_REG & 32'hFF) & 32'h10);

// This section implements an unregistered operation.
// 
wire local_bb5_and112_i94_stall_local;
wire [31:0] local_bb5_and112_i94;

assign local_bb5_and112_i94 = ((rnode_178to179_bb5_align_0_i68_2_NO_SHIFT_REG & 32'hFF) & 32'h8);

// This section implements an unregistered operation.
// 
wire local_bb5_and125_i99_stall_local;
wire [31:0] local_bb5_and125_i99;

assign local_bb5_and125_i99 = ((rnode_178to179_bb5_align_0_i68_3_NO_SHIFT_REG & 32'hFF) & 32'h4);

// This section implements an unregistered operation.
// 
wire local_bb5_and143_i104_stall_local;
wire [31:0] local_bb5_and143_i104;

assign local_bb5_and143_i104 = ((rnode_178to179_bb5_align_0_i68_4_NO_SHIFT_REG & 32'hFF) & 32'h3);

// This section implements an unregistered operation.
// 
wire local_bb5_lnot33_not_i52_stall_local;
wire local_bb5_lnot33_not_i52;

assign local_bb5_lnot33_not_i52 = ((local_bb5_and21_i39 & 32'h7FFFFF) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_or64_i62_stall_local;
wire [31:0] local_bb5_or64_i62;

assign local_bb5_or64_i62 = ((local_bb5_and21_i39 & 32'h7FFFFF) << 32'h3);

// This section implements an unregistered operation.
// 
wire local_bb5_lnot30_i48_stall_local;
wire local_bb5_lnot30_i48;

assign local_bb5_lnot30_i48 = ((local_bb5_and20_i38 & 32'h7FFFFF) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i59_stall_local;
wire [31:0] local_bb5_or_i59;

assign local_bb5_or_i59 = ((local_bb5_and20_i38 & 32'h7FFFFF) << 32'h3);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_179to180_bb5_and35_i44_0_valid_out_NO_SHIFT_REG;
 logic rnode_179to180_bb5_and35_i44_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_179to180_bb5_and35_i44_0_NO_SHIFT_REG;
 logic rnode_179to180_bb5_and35_i44_0_reg_180_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_179to180_bb5_and35_i44_0_reg_180_NO_SHIFT_REG;
 logic rnode_179to180_bb5_and35_i44_0_valid_out_reg_180_NO_SHIFT_REG;
 logic rnode_179to180_bb5_and35_i44_0_stall_in_reg_180_NO_SHIFT_REG;
 logic rnode_179to180_bb5_and35_i44_0_stall_out_reg_180_NO_SHIFT_REG;

acl_data_fifo rnode_179to180_bb5_and35_i44_0_reg_180_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_179to180_bb5_and35_i44_0_reg_180_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_179to180_bb5_and35_i44_0_stall_in_reg_180_NO_SHIFT_REG),
	.valid_out(rnode_179to180_bb5_and35_i44_0_valid_out_reg_180_NO_SHIFT_REG),
	.stall_out(rnode_179to180_bb5_and35_i44_0_stall_out_reg_180_NO_SHIFT_REG),
	.data_in((local_bb5_and35_i44 & 32'h80000000)),
	.data_out(rnode_179to180_bb5_and35_i44_0_reg_180_NO_SHIFT_REG)
);

defparam rnode_179to180_bb5_and35_i44_0_reg_180_fifo.DEPTH = 1;
defparam rnode_179to180_bb5_and35_i44_0_reg_180_fifo.DATA_WIDTH = 32;
defparam rnode_179to180_bb5_and35_i44_0_reg_180_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_179to180_bb5_and35_i44_0_reg_180_fifo.IMPL = "shift_reg";

assign rnode_179to180_bb5_and35_i44_0_reg_180_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_and35_i44_stall_in = 1'b0;
assign rnode_179to180_bb5_and35_i44_0_NO_SHIFT_REG = rnode_179to180_bb5_and35_i44_0_reg_180_NO_SHIFT_REG;
assign rnode_179to180_bb5_and35_i44_0_stall_in_reg_180_NO_SHIFT_REG = 1'b0;
assign rnode_179to180_bb5_and35_i44_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cmp37_i46_stall_local;
wire local_bb5_cmp37_i46;

assign local_bb5_cmp37_i46 = ($signed(local_bb5_xor_i45) < $signed(32'h0));

// This section implements an unregistered operation.
// 
wire local_bb5_xor_lobit_i124_stall_local;
wire [31:0] local_bb5_xor_lobit_i124;

assign local_bb5_xor_lobit_i124 = ($signed(local_bb5_xor_i45) >>> 32'h1F);

// This section implements an unregistered operation.
// 
wire local_bb5_add_vec_0_i126_stall_local;
wire [63:0] local_bb5_add_vec_0_i126;

assign local_bb5_add_vec_0_i126[31:0] = local_bb5_xor_i45;
assign local_bb5_add_vec_0_i126[63:32] = 32'bx;

// This section implements an unregistered operation.
// 
wire local_bb5_lnot_i40_stall_local;
wire local_bb5_lnot_i40;

assign local_bb5_lnot_i40 = ((local_bb5_and17_i35 & 32'hFF) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp25_i42_stall_local;
wire local_bb5_cmp25_i42;

assign local_bb5_cmp25_i42 = ((local_bb5_and17_i35 & 32'hFF) == 32'hFF);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_180to181_bb5_shr16_i34_0_valid_out_NO_SHIFT_REG;
 logic rnode_180to181_bb5_shr16_i34_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_180to181_bb5_shr16_i34_0_NO_SHIFT_REG;
 logic rnode_180to181_bb5_shr16_i34_0_reg_181_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_180to181_bb5_shr16_i34_0_reg_181_NO_SHIFT_REG;
 logic rnode_180to181_bb5_shr16_i34_0_valid_out_reg_181_NO_SHIFT_REG;
 logic rnode_180to181_bb5_shr16_i34_0_stall_in_reg_181_NO_SHIFT_REG;
 logic rnode_180to181_bb5_shr16_i34_0_stall_out_reg_181_NO_SHIFT_REG;

acl_data_fifo rnode_180to181_bb5_shr16_i34_0_reg_181_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_180to181_bb5_shr16_i34_0_reg_181_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_180to181_bb5_shr16_i34_0_stall_in_reg_181_NO_SHIFT_REG),
	.valid_out(rnode_180to181_bb5_shr16_i34_0_valid_out_reg_181_NO_SHIFT_REG),
	.stall_out(rnode_180to181_bb5_shr16_i34_0_stall_out_reg_181_NO_SHIFT_REG),
	.data_in((rnode_179to180_bb5_shr16_i34_0_NO_SHIFT_REG & 32'h1FF)),
	.data_out(rnode_180to181_bb5_shr16_i34_0_reg_181_NO_SHIFT_REG)
);

defparam rnode_180to181_bb5_shr16_i34_0_reg_181_fifo.DEPTH = 1;
defparam rnode_180to181_bb5_shr16_i34_0_reg_181_fifo.DATA_WIDTH = 32;
defparam rnode_180to181_bb5_shr16_i34_0_reg_181_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_180to181_bb5_shr16_i34_0_reg_181_fifo.IMPL = "shift_reg";

assign rnode_180to181_bb5_shr16_i34_0_reg_181_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_179to180_bb5_shr16_i34_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_180to181_bb5_shr16_i34_0_NO_SHIFT_REG = rnode_180to181_bb5_shr16_i34_0_reg_181_NO_SHIFT_REG;
assign rnode_180to181_bb5_shr16_i34_0_stall_in_reg_181_NO_SHIFT_REG = 1'b0;
assign rnode_180to181_bb5_shr16_i34_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cmp96_i79_stall_local;
wire local_bb5_cmp96_i79;

assign local_bb5_cmp96_i79 = ((local_bb5_and95_i78 & 32'h10) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp113_i95_stall_local;
wire local_bb5_cmp113_i95;

assign local_bb5_cmp113_i95 = ((local_bb5_and112_i94 & 32'h8) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp126_not_i100_stall_local;
wire local_bb5_cmp126_not_i100;

assign local_bb5_cmp126_not_i100 = ((local_bb5_and125_i99 & 32'h4) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp146_i106_stall_local;
wire local_bb5_cmp146_i106;

assign local_bb5_cmp146_i106 = ((local_bb5_and143_i104 & 32'h3) == 32'h3);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp157_i114_stall_local;
wire local_bb5_cmp157_i114;

assign local_bb5_cmp157_i114 = ((local_bb5_and143_i104 & 32'h3) == 32'h2);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp166_i116_stall_local;
wire local_bb5_cmp166_i116;

assign local_bb5_cmp166_i116 = ((local_bb5_and143_i104 & 32'h3) == 32'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_brmerge_not_i53_stall_local;
wire local_bb5_brmerge_not_i53;

assign local_bb5_brmerge_not_i53 = (rnode_178to179_bb5_cmp27_i43_0_NO_SHIFT_REG & local_bb5_lnot33_not_i52);

// This section implements an unregistered operation.
// 
wire local_bb5_shl65_i63_stall_local;
wire [31:0] local_bb5_shl65_i63;

assign local_bb5_shl65_i63 = ((local_bb5_or64_i62 & 32'h3FFFFF8) | 32'h4000000);

// This section implements an unregistered operation.
// 
wire local_bb5_lnot30_not_i50_stall_local;
wire local_bb5_lnot30_not_i50;

assign local_bb5_lnot30_not_i50 = (local_bb5_lnot30_i48 ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i60_stall_local;
wire [31:0] local_bb5_shl_i60;

assign local_bb5_shl_i60 = ((local_bb5_or_i59 & 32'h3FFFFF8) | 32'h4000000);

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_180to182_bb5_and35_i44_0_valid_out_NO_SHIFT_REG;
 logic rnode_180to182_bb5_and35_i44_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_180to182_bb5_and35_i44_0_NO_SHIFT_REG;
 logic rnode_180to182_bb5_and35_i44_0_reg_182_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_180to182_bb5_and35_i44_0_reg_182_NO_SHIFT_REG;
 logic rnode_180to182_bb5_and35_i44_0_valid_out_reg_182_NO_SHIFT_REG;
 logic rnode_180to182_bb5_and35_i44_0_stall_in_reg_182_NO_SHIFT_REG;
 logic rnode_180to182_bb5_and35_i44_0_stall_out_reg_182_NO_SHIFT_REG;

acl_data_fifo rnode_180to182_bb5_and35_i44_0_reg_182_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_180to182_bb5_and35_i44_0_reg_182_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_180to182_bb5_and35_i44_0_stall_in_reg_182_NO_SHIFT_REG),
	.valid_out(rnode_180to182_bb5_and35_i44_0_valid_out_reg_182_NO_SHIFT_REG),
	.stall_out(rnode_180to182_bb5_and35_i44_0_stall_out_reg_182_NO_SHIFT_REG),
	.data_in((rnode_179to180_bb5_and35_i44_0_NO_SHIFT_REG & 32'h80000000)),
	.data_out(rnode_180to182_bb5_and35_i44_0_reg_182_NO_SHIFT_REG)
);

defparam rnode_180to182_bb5_and35_i44_0_reg_182_fifo.DEPTH = 2;
defparam rnode_180to182_bb5_and35_i44_0_reg_182_fifo.DATA_WIDTH = 32;
defparam rnode_180to182_bb5_and35_i44_0_reg_182_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_180to182_bb5_and35_i44_0_reg_182_fifo.IMPL = "shift_reg";

assign rnode_180to182_bb5_and35_i44_0_reg_182_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_179to180_bb5_and35_i44_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_180to182_bb5_and35_i44_0_NO_SHIFT_REG = rnode_180to182_bb5_and35_i44_0_reg_182_NO_SHIFT_REG;
assign rnode_180to182_bb5_and35_i44_0_stall_in_reg_182_NO_SHIFT_REG = 1'b0;
assign rnode_180to182_bb5_and35_i44_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cmp25_not_i47_stall_local;
wire local_bb5_cmp25_not_i47;

assign local_bb5_cmp25_not_i47 = (local_bb5_cmp25_i42 ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u24_stall_local;
wire local_bb5_var__u24;

assign local_bb5_var__u24 = (local_bb5_cmp25_i42 | rnode_178to179_bb5_cmp27_i43_1_NO_SHIFT_REG);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_181to182_bb5_shr16_i34_0_valid_out_NO_SHIFT_REG;
 logic rnode_181to182_bb5_shr16_i34_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_181to182_bb5_shr16_i34_0_NO_SHIFT_REG;
 logic rnode_181to182_bb5_shr16_i34_0_reg_182_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_181to182_bb5_shr16_i34_0_reg_182_NO_SHIFT_REG;
 logic rnode_181to182_bb5_shr16_i34_0_valid_out_reg_182_NO_SHIFT_REG;
 logic rnode_181to182_bb5_shr16_i34_0_stall_in_reg_182_NO_SHIFT_REG;
 logic rnode_181to182_bb5_shr16_i34_0_stall_out_reg_182_NO_SHIFT_REG;

acl_data_fifo rnode_181to182_bb5_shr16_i34_0_reg_182_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_181to182_bb5_shr16_i34_0_reg_182_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_181to182_bb5_shr16_i34_0_stall_in_reg_182_NO_SHIFT_REG),
	.valid_out(rnode_181to182_bb5_shr16_i34_0_valid_out_reg_182_NO_SHIFT_REG),
	.stall_out(rnode_181to182_bb5_shr16_i34_0_stall_out_reg_182_NO_SHIFT_REG),
	.data_in((rnode_180to181_bb5_shr16_i34_0_NO_SHIFT_REG & 32'h1FF)),
	.data_out(rnode_181to182_bb5_shr16_i34_0_reg_182_NO_SHIFT_REG)
);

defparam rnode_181to182_bb5_shr16_i34_0_reg_182_fifo.DEPTH = 1;
defparam rnode_181to182_bb5_shr16_i34_0_reg_182_fifo.DATA_WIDTH = 32;
defparam rnode_181to182_bb5_shr16_i34_0_reg_182_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_181to182_bb5_shr16_i34_0_reg_182_fifo.IMPL = "shift_reg";

assign rnode_181to182_bb5_shr16_i34_0_reg_182_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_180to181_bb5_shr16_i34_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_181to182_bb5_shr16_i34_0_NO_SHIFT_REG = rnode_181to182_bb5_shr16_i34_0_reg_182_NO_SHIFT_REG;
assign rnode_181to182_bb5_shr16_i34_0_stall_in_reg_182_NO_SHIFT_REG = 1'b0;
assign rnode_181to182_bb5_shr16_i34_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_brmerge_not_not_i54_stall_local;
wire local_bb5_brmerge_not_not_i54;

assign local_bb5_brmerge_not_not_i54 = (local_bb5_brmerge_not_i53 ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb5__15_i64_stall_local;
wire [31:0] local_bb5__15_i64;

assign local_bb5__15_i64 = (rnode_178to179_bb5_lnot23_i41_0_NO_SHIFT_REG ? 32'h0 : ((local_bb5_shl65_i63 & 32'h7FFFFF8) | 32'h4000000));

// This section implements an unregistered operation.
// 
wire local_bb5_or_cond2_not_i51_stall_local;
wire local_bb5_or_cond2_not_i51;

assign local_bb5_or_cond2_not_i51 = (local_bb5_cmp25_i42 & local_bb5_lnot30_not_i50);

// This section implements an unregistered operation.
// 
wire local_bb5__14_i61_stall_local;
wire [31:0] local_bb5__14_i61;

assign local_bb5__14_i61 = (local_bb5_lnot_i40 ? 32'h0 : ((local_bb5_shl_i60 & 32'h7FFFFF8) | 32'h4000000));

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_182to183_bb5_and35_i44_0_valid_out_NO_SHIFT_REG;
 logic rnode_182to183_bb5_and35_i44_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_182to183_bb5_and35_i44_0_NO_SHIFT_REG;
 logic rnode_182to183_bb5_and35_i44_0_reg_183_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_182to183_bb5_and35_i44_0_reg_183_NO_SHIFT_REG;
 logic rnode_182to183_bb5_and35_i44_0_valid_out_reg_183_NO_SHIFT_REG;
 logic rnode_182to183_bb5_and35_i44_0_stall_in_reg_183_NO_SHIFT_REG;
 logic rnode_182to183_bb5_and35_i44_0_stall_out_reg_183_NO_SHIFT_REG;

acl_data_fifo rnode_182to183_bb5_and35_i44_0_reg_183_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_182to183_bb5_and35_i44_0_reg_183_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_182to183_bb5_and35_i44_0_stall_in_reg_183_NO_SHIFT_REG),
	.valid_out(rnode_182to183_bb5_and35_i44_0_valid_out_reg_183_NO_SHIFT_REG),
	.stall_out(rnode_182to183_bb5_and35_i44_0_stall_out_reg_183_NO_SHIFT_REG),
	.data_in((rnode_180to182_bb5_and35_i44_0_NO_SHIFT_REG & 32'h80000000)),
	.data_out(rnode_182to183_bb5_and35_i44_0_reg_183_NO_SHIFT_REG)
);

defparam rnode_182to183_bb5_and35_i44_0_reg_183_fifo.DEPTH = 1;
defparam rnode_182to183_bb5_and35_i44_0_reg_183_fifo.DATA_WIDTH = 32;
defparam rnode_182to183_bb5_and35_i44_0_reg_183_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_182to183_bb5_and35_i44_0_reg_183_fifo.IMPL = "shift_reg";

assign rnode_182to183_bb5_and35_i44_0_reg_183_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_180to182_bb5_and35_i44_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_182to183_bb5_and35_i44_0_NO_SHIFT_REG = rnode_182to183_bb5_and35_i44_0_reg_183_NO_SHIFT_REG;
assign rnode_182to183_bb5_and35_i44_0_stall_in_reg_183_NO_SHIFT_REG = 1'b0;
assign rnode_182to183_bb5_and35_i44_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_cond2_i49_stall_local;
wire local_bb5_or_cond2_i49;

assign local_bb5_or_cond2_i49 = (local_bb5_lnot30_i48 | local_bb5_cmp25_not_i47);

// This section implements an unregistered operation.
// 
wire local_bb5_and72_i69_stall_local;
wire [31:0] local_bb5_and72_i69;

assign local_bb5_and72_i69 = ((local_bb5__15_i64 & 32'h7FFFFF8) >> 32'h3);

// This section implements an unregistered operation.
// 
wire local_bb5_and75_i72_stall_local;
wire [31:0] local_bb5_and75_i72;

assign local_bb5_and75_i72 = ((local_bb5__15_i64 & 32'h7FFFFF8) & 32'hF0);

// This section implements an unregistered operation.
// 
wire local_bb5_and78_i74_stall_local;
wire [31:0] local_bb5_and78_i74;

assign local_bb5_and78_i74 = ((local_bb5__15_i64 & 32'h7FFFFF8) & 32'hF00);

// This section implements an unregistered operation.
// 
wire local_bb5_shr94_i77_stall_local;
wire [31:0] local_bb5_shr94_i77;

assign local_bb5_shr94_i77 = ((local_bb5__15_i64 & 32'h7FFFFF8) >> (local_bb5_and93_i76 & 32'h1C));

// This section implements an unregistered operation.
// 
wire local_bb5_and90_i80_stall_local;
wire [31:0] local_bb5_and90_i80;

assign local_bb5_and90_i80 = ((local_bb5__15_i64 & 32'h7FFFFF8) & 32'h7000000);

// This section implements an unregistered operation.
// 
wire local_bb5_and87_i81_stall_local;
wire [31:0] local_bb5_and87_i81;

assign local_bb5_and87_i81 = ((local_bb5__15_i64 & 32'h7FFFFF8) & 32'hF00000);

// This section implements an unregistered operation.
// 
wire local_bb5_and84_i82_stall_local;
wire [31:0] local_bb5_and84_i82;

assign local_bb5_and84_i82 = ((local_bb5__15_i64 & 32'h7FFFFF8) & 32'hF0000);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u25_stall_local;
wire [31:0] local_bb5_var__u25;

assign local_bb5_var__u25 = ((local_bb5__15_i64 & 32'h7FFFFF8) & 32'hFFF8);

// This section implements an unregistered operation.
// 
wire local_bb5__11_i55_stall_local;
wire local_bb5__11_i55;

assign local_bb5__11_i55 = (local_bb5_or_cond2_not_i51 | local_bb5_brmerge_not_i53);

// This section implements an unregistered operation.
// 
wire local_bb5_add_vec_1_i127_stall_local;
wire [63:0] local_bb5_add_vec_1_i127;

assign local_bb5_add_vec_1_i127[31:0] = local_bb5_add_vec_0_i126[31:0];
assign local_bb5_add_vec_1_i127[63:32] = (local_bb5__14_i61 & 32'h7FFFFF8);

// This section implements an unregistered operation.
// 
wire local_bb5_reduction_1_i56_stall_local;
wire local_bb5_reduction_1_i56;

assign local_bb5_reduction_1_i56 = (local_bb5_or_cond2_i49 & local_bb5_brmerge_not_not_i54);

// This section implements an unregistered operation.
// 
wire local_bb5_and72_tr_i70_stall_local;
wire [7:0] local_bb5_and72_tr_i70;
wire [31:0] local_bb5_and72_tr_i70$ps;

assign local_bb5_and72_tr_i70$ps = (local_bb5_and72_i69 & 32'hFFFFFF);
assign local_bb5_and72_tr_i70 = local_bb5_and72_tr_i70$ps[7:0];

// This section implements an unregistered operation.
// 
wire local_bb5_cmp76_i73_stall_local;
wire local_bb5_cmp76_i73;

assign local_bb5_cmp76_i73 = ((local_bb5_and75_i72 & 32'hF0) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp79_i75_stall_local;
wire local_bb5_cmp79_i75;

assign local_bb5_cmp79_i75 = ((local_bb5_and78_i74 & 32'hF00) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_and136_i103_stall_local;
wire [31:0] local_bb5_and136_i103;

assign local_bb5_and136_i103 = (local_bb5_shr94_i77 >> 32'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_shr144_i105_stall_local;
wire [31:0] local_bb5_shr144_i105;

assign local_bb5_shr144_i105 = (local_bb5_shr94_i77 >> (local_bb5_and143_i104 & 32'h3));

// This section implements an unregistered operation.
// 
wire local_bb5_var__u26_stall_local;
wire [31:0] local_bb5_var__u26;

assign local_bb5_var__u26 = (local_bb5_shr94_i77 & 32'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp91_i83_stall_local;
wire local_bb5_cmp91_i83;

assign local_bb5_cmp91_i83 = ((local_bb5_and90_i80 & 32'h7000000) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp88_i84_stall_local;
wire local_bb5_cmp88_i84;

assign local_bb5_cmp88_i84 = ((local_bb5_and87_i81 & 32'hF00000) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp85_i85_stall_local;
wire local_bb5_cmp85_i85;

assign local_bb5_cmp85_i85 = ((local_bb5_and84_i82 & 32'hF0000) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u27_stall_local;
wire local_bb5_var__u27;

assign local_bb5_var__u27 = ((local_bb5_var__u25 & 32'hFFF8) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_add_bitvec_i128_stall_local;
wire [63:0] local_bb5_add_bitvec_i128;

assign local_bb5_add_bitvec_i128 = local_bb5_add_vec_1_i127;

// This section implements an unregistered operation.
// 
wire local_bb5_reduction_2_i57_stall_local;
wire local_bb5_reduction_2_i57;

assign local_bb5_reduction_2_i57 = (rnode_178to179_bb5_var__u23_0_NO_SHIFT_REG & local_bb5_reduction_1_i56);

// This section implements an unregistered operation.
// 
wire local_bb5_frombool74_i71_stall_local;
wire [7:0] local_bb5_frombool74_i71;

assign local_bb5_frombool74_i71 = (local_bb5_and72_tr_i70 & 8'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u28_stall_local;
wire [31:0] local_bb5_var__u28;

assign local_bb5_var__u28 = ((local_bb5_and136_i103 & 32'h7FFFFFFF) | local_bb5_shr94_i77);

// This section implements an unregistered operation.
// 
wire local_bb5_or170_i117_stall_local;
wire [31:0] local_bb5_or170_i117;

assign local_bb5_or170_i117 = (local_bb5_cmp166_i116 ? (local_bb5_var__u26 & 32'h1) : 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5__18_v_i91_stall_local;
wire local_bb5__18_v_i91;

assign local_bb5__18_v_i91 = (local_bb5_cmp96_i79 ? local_bb5_cmp79_i75 : local_bb5_cmp91_i83);

// This section implements an unregistered operation.
// 
wire local_bb5__17_v_i89_stall_local;
wire local_bb5__17_v_i89;

assign local_bb5__17_v_i89 = (local_bb5_cmp96_i79 ? local_bb5_cmp76_i73 : local_bb5_cmp88_i84);

// This section implements an unregistered operation.
// 
wire local_bb5_frombool106_i87_stall_local;
wire [7:0] local_bb5_frombool106_i87;

assign local_bb5_frombool106_i87[7:1] = 7'h0;
assign local_bb5_frombool106_i87[0] = local_bb5_cmp85_i85;

// This section implements an unregistered operation.
// 
wire local_bb5_conv_i86_stall_local;
wire [31:0] local_bb5_conv_i86;

assign local_bb5_conv_i86[31:1] = 31'h0;
assign local_bb5_conv_i86[0] = local_bb5_var__u27;

// This section implements an unregistered operation.
// 
wire local_bb5_add_shuffle_i129_stall_local;
wire [31:0] local_bb5_add_shuffle_i129;

assign local_bb5_add_shuffle_i129[0] = local_bb5_add_bitvec_i128[31];
assign local_bb5_add_shuffle_i129[1] = 1'b0;
assign local_bb5_add_shuffle_i129[2] = 1'b0;
assign local_bb5_add_shuffle_i129[3] = local_bb5_add_bitvec_i128[35];
assign local_bb5_add_shuffle_i129[4] = local_bb5_add_bitvec_i128[36];
assign local_bb5_add_shuffle_i129[5] = local_bb5_add_bitvec_i128[37];
assign local_bb5_add_shuffle_i129[6] = local_bb5_add_bitvec_i128[38];
assign local_bb5_add_shuffle_i129[7] = local_bb5_add_bitvec_i128[39];
assign local_bb5_add_shuffle_i129[8] = local_bb5_add_bitvec_i128[40];
assign local_bb5_add_shuffle_i129[9] = local_bb5_add_bitvec_i128[41];
assign local_bb5_add_shuffle_i129[10] = local_bb5_add_bitvec_i128[42];
assign local_bb5_add_shuffle_i129[11] = local_bb5_add_bitvec_i128[43];
assign local_bb5_add_shuffle_i129[12] = local_bb5_add_bitvec_i128[44];
assign local_bb5_add_shuffle_i129[13] = local_bb5_add_bitvec_i128[45];
assign local_bb5_add_shuffle_i129[14] = local_bb5_add_bitvec_i128[46];
assign local_bb5_add_shuffle_i129[15] = local_bb5_add_bitvec_i128[47];
assign local_bb5_add_shuffle_i129[16] = local_bb5_add_bitvec_i128[48];
assign local_bb5_add_shuffle_i129[17] = local_bb5_add_bitvec_i128[49];
assign local_bb5_add_shuffle_i129[18] = local_bb5_add_bitvec_i128[50];
assign local_bb5_add_shuffle_i129[19] = local_bb5_add_bitvec_i128[51];
assign local_bb5_add_shuffle_i129[20] = local_bb5_add_bitvec_i128[52];
assign local_bb5_add_shuffle_i129[21] = local_bb5_add_bitvec_i128[53];
assign local_bb5_add_shuffle_i129[22] = local_bb5_add_bitvec_i128[54];
assign local_bb5_add_shuffle_i129[23] = local_bb5_add_bitvec_i128[55];
assign local_bb5_add_shuffle_i129[24] = local_bb5_add_bitvec_i128[56];
assign local_bb5_add_shuffle_i129[25] = local_bb5_add_bitvec_i128[57];
assign local_bb5_add_shuffle_i129[26] = local_bb5_add_bitvec_i128[58];
assign local_bb5_add_shuffle_i129[27] = 1'b0;
assign local_bb5_add_shuffle_i129[28] = 1'b0;
assign local_bb5_add_shuffle_i129[29] = 1'b0;
assign local_bb5_add_shuffle_i129[30] = 1'b0;
assign local_bb5_add_shuffle_i129[31] = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5__13_i58_stall_local;
wire local_bb5__13_i58;

assign local_bb5__13_i58 = (local_bb5_reduction_2_i57 ? local_bb5_cmp37_i46 : local_bb5__11_i55);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u29_stall_local;
wire [31:0] local_bb5_var__u29;

assign local_bb5_var__u29 = (local_bb5_var__u28 & 32'h1);

// This section implements an unregistered operation.
// 
wire local_bb5__vec_0_i107_stall_local;
wire [63:0] local_bb5__vec_0_i107;

assign local_bb5__vec_0_i107[31:0] = local_bb5_var__u28;
assign local_bb5__vec_0_i107[63:32] = 32'bx;

// This section implements an unregistered operation.
// 
wire local_bb5__18_i92_stall_local;
wire [7:0] local_bb5__18_i92;

assign local_bb5__18_i92[7:1] = 7'h0;
assign local_bb5__18_i92[0] = local_bb5__18_v_i91;

// This section implements an unregistered operation.
// 
wire local_bb5__17_i90_stall_local;
wire [7:0] local_bb5__17_i90;

assign local_bb5__17_i90[7:1] = 7'h0;
assign local_bb5__17_i90[0] = local_bb5__17_v_i89;

// This section implements an unregistered operation.
// 
wire local_bb5__16_i88_stall_local;
wire [7:0] local_bb5__16_i88;

assign local_bb5__16_i88 = (local_bb5_cmp96_i79 ? (local_bb5_frombool74_i71 & 8'h1) : (local_bb5_frombool106_i87 & 8'h1));

// This section implements an unregistered operation.
// 
wire local_bb5__19_i93_stall_local;
wire [31:0] local_bb5__19_i93;

assign local_bb5__19_i93 = (local_bb5_cmp96_i79 ? 32'h0 : (local_bb5_conv_i86 & 32'h1));

// This section implements an unregistered operation.
// 
wire local_bb5_add_compressed_i130_stall_local;
wire [31:0] local_bb5_add_compressed_i130;

assign local_bb5_add_compressed_i130 = local_bb5_add_shuffle_i129;

// This section implements an unregistered operation.
// 
wire local_bb5_or163_i115_stall_local;
wire [31:0] local_bb5_or163_i115;

assign local_bb5_or163_i115 = (local_bb5_cmp157_i114 ? (local_bb5_var__u29 & 32'h1) : 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5__vec_1_i108_stall_local;
wire [63:0] local_bb5__vec_1_i108;

assign local_bb5__vec_1_i108[31:0] = local_bb5__vec_0_i107[31:0];
assign local_bb5__vec_1_i108[63:32] = local_bb5_shr94_i77;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u30_stall_local;
wire [7:0] local_bb5_var__u30;

assign local_bb5_var__u30 = ((local_bb5__17_i90 & 8'h1) | (local_bb5__16_i88 & 8'h1));

// This section implements an unregistered operation.
// 
wire local_bb5__20_i97_stall_local;
wire [7:0] local_bb5__20_i97;

assign local_bb5__20_i97 = (local_bb5_cmp113_i95 ? (local_bb5__16_i88 & 8'h1) : (local_bb5__18_i92 & 8'h1));

// This section implements an unregistered operation.
// 
wire local_bb5_reduction_5_i120_stall_local;
wire [31:0] local_bb5_reduction_5_i120;

assign local_bb5_reduction_5_i120 = ((local_bb5_or163_i115 & 32'h1) | (local_bb5_or170_i117 & 32'h1));

// This section implements an unregistered operation.
// 
wire local_bb5__bitvec_i109_stall_local;
wire [63:0] local_bb5__bitvec_i109;

assign local_bb5__bitvec_i109 = local_bb5__vec_1_i108;

// This section implements an unregistered operation.
// 
wire local_bb5_conv118_i96_stall_local;
wire [31:0] local_bb5_conv118_i96;

assign local_bb5_conv118_i96[31:8] = 24'h0;
assign local_bb5_conv118_i96[7:0] = (local_bb5_var__u30 & 8'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u31_stall_local;
wire [7:0] local_bb5_var__u31;

assign local_bb5_var__u31 = ((local_bb5__20_i97 & 8'h1) & 8'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_reduction_7_i122_stall_local;
wire [31:0] local_bb5_reduction_7_i122;

assign local_bb5_reduction_7_i122 = (local_bb5_shr144_i105 | (local_bb5_reduction_5_i120 & 32'h1));

// This section implements an unregistered operation.
// 
wire local_bb5__shuffle_i110_stall_local;
wire [31:0] local_bb5__shuffle_i110;

assign local_bb5__shuffle_i110[0] = local_bb5__bitvec_i109[0];
assign local_bb5__shuffle_i110[1] = 1'b0;
assign local_bb5__shuffle_i110[2] = local_bb5__bitvec_i109[34];
assign local_bb5__shuffle_i110[3] = 1'b0;
assign local_bb5__shuffle_i110[4] = 1'b0;
assign local_bb5__shuffle_i110[5] = 1'b0;
assign local_bb5__shuffle_i110[6] = 1'b0;
assign local_bb5__shuffle_i110[7] = 1'b0;
assign local_bb5__shuffle_i110[8] = 1'b0;
assign local_bb5__shuffle_i110[9] = 1'b0;
assign local_bb5__shuffle_i110[10] = 1'b0;
assign local_bb5__shuffle_i110[11] = 1'b0;
assign local_bb5__shuffle_i110[12] = 1'b0;
assign local_bb5__shuffle_i110[13] = 1'b0;
assign local_bb5__shuffle_i110[14] = 1'b0;
assign local_bb5__shuffle_i110[15] = 1'b0;
assign local_bb5__shuffle_i110[16] = 1'b0;
assign local_bb5__shuffle_i110[17] = 1'b0;
assign local_bb5__shuffle_i110[18] = 1'b0;
assign local_bb5__shuffle_i110[19] = 1'b0;
assign local_bb5__shuffle_i110[20] = 1'b0;
assign local_bb5__shuffle_i110[21] = 1'b0;
assign local_bb5__shuffle_i110[22] = 1'b0;
assign local_bb5__shuffle_i110[23] = 1'b0;
assign local_bb5__shuffle_i110[24] = 1'b0;
assign local_bb5__shuffle_i110[25] = 1'b0;
assign local_bb5__shuffle_i110[26] = 1'b0;
assign local_bb5__shuffle_i110[27] = 1'b0;
assign local_bb5__shuffle_i110[28] = 1'b0;
assign local_bb5__shuffle_i110[29] = 1'b0;
assign local_bb5__shuffle_i110[30] = 1'b0;
assign local_bb5__shuffle_i110[31] = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_or119_i98_stall_local;
wire [31:0] local_bb5_or119_i98;

assign local_bb5_or119_i98 = (local_bb5_cmp113_i95 ? 32'h0 : (local_bb5_conv118_i96 & 32'h1));

// This section implements an unregistered operation.
// 
wire local_bb5_conv129_i101_stall_local;
wire [31:0] local_bb5_conv129_i101;

assign local_bb5_conv129_i101[31:8] = 24'h0;
assign local_bb5_conv129_i101[7:0] = (local_bb5_var__u31 & 8'h1);

// This section implements an unregistered operation.
// 
wire local_bb5__compressed_i111_stall_local;
wire [31:0] local_bb5__compressed_i111;

assign local_bb5__compressed_i111 = local_bb5__shuffle_i110;

// This section implements an unregistered operation.
// 
wire local_bb5_reduction_3_i118_stall_local;
wire [31:0] local_bb5_reduction_3_i118;

assign local_bb5_reduction_3_i118 = ((local_bb5__19_i93 & 32'h1) | (local_bb5_or119_i98 & 32'h1));

// This section implements an unregistered operation.
// 
wire local_bb5_or130_i102_stall_local;
wire [31:0] local_bb5_or130_i102;

assign local_bb5_or130_i102 = (local_bb5_cmp126_not_i100 ? (local_bb5_conv129_i101 & 32'h1) : 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u32_stall_local;
wire local_bb5_var__u32;

assign local_bb5_var__u32 = ((local_bb5__compressed_i111 & 32'h5) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_conv153_i112_stall_local;
wire [31:0] local_bb5_conv153_i112;

assign local_bb5_conv153_i112[31:1] = 31'h0;
assign local_bb5_conv153_i112[0] = local_bb5_var__u32;

// This section implements an unregistered operation.
// 
wire local_bb5_or154_i113_stall_local;
wire [31:0] local_bb5_or154_i113;

assign local_bb5_or154_i113 = (local_bb5_cmp146_i106 ? (local_bb5_conv153_i112 & 32'h1) : 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_reduction_4_i119_stall_local;
wire [31:0] local_bb5_reduction_4_i119;

assign local_bb5_reduction_4_i119 = ((local_bb5_or130_i102 & 32'h1) | (local_bb5_or154_i113 & 32'h1));

// This section implements an unregistered operation.
// 
wire local_bb5_reduction_6_i121_stall_local;
wire [31:0] local_bb5_reduction_6_i121;

assign local_bb5_reduction_6_i121 = ((local_bb5_reduction_3_i118 & 32'h1) | (local_bb5_reduction_4_i119 & 32'h1));

// This section implements an unregistered operation.
// 
wire local_bb5_reduction_8_i123_stall_local;
wire [31:0] local_bb5_reduction_8_i123;

assign local_bb5_reduction_8_i123 = ((local_bb5_reduction_6_i121 & 32'h1) | local_bb5_reduction_7_i122);

// This section implements an unregistered operation.
// 
wire local_bb5_and17_i35_valid_out_2;
wire local_bb5_and17_i35_stall_in_2;
wire local_bb5_var__u24_valid_out;
wire local_bb5_var__u24_stall_in;
wire local_bb5_cmp37_i46_valid_out_1;
wire local_bb5_cmp37_i46_stall_in_1;
wire local_bb5__13_i58_valid_out;
wire local_bb5__13_i58_stall_in;
wire local_bb5_xor175_i125_valid_out;
wire local_bb5_xor175_i125_stall_in;
wire local_bb5_add_compressed_i130_valid_out;
wire local_bb5_add_compressed_i130_stall_in;
wire local_bb5_xor175_i125_inputs_ready;
wire local_bb5_xor175_i125_stall_local;
wire [31:0] local_bb5_xor175_i125;

assign local_bb5_xor175_i125_inputs_ready = (rnode_178to179_bb5__9_i32_0_valid_out_0_NO_SHIFT_REG & rnode_178to179_bb5_cmp27_i43_0_valid_out_0_NO_SHIFT_REG & rnode_178to179_bb5_lnot23_i41_0_valid_out_NO_SHIFT_REG & rnode_178to179_bb5__10_i33_0_valid_out_0_NO_SHIFT_REG & rnode_178to179_bb5_shr16_i34_0_valid_out_0_NO_SHIFT_REG & rnode_178to179_bb5_cmp27_i43_0_valid_out_1_NO_SHIFT_REG & rnode_178to179_bb5__10_i33_0_valid_out_2_NO_SHIFT_REG & rnode_178to179_bb5__9_i32_0_valid_out_1_NO_SHIFT_REG & rnode_178to179_bb5_var__u23_0_valid_out_NO_SHIFT_REG & rnode_178to179_bb5_align_0_i68_0_valid_out_0_NO_SHIFT_REG & rnode_178to179_bb5_align_0_i68_0_valid_out_4_NO_SHIFT_REG & rnode_178to179_bb5_align_0_i68_0_valid_out_1_NO_SHIFT_REG & rnode_178to179_bb5_align_0_i68_0_valid_out_2_NO_SHIFT_REG & rnode_178to179_bb5_align_0_i68_0_valid_out_3_NO_SHIFT_REG);
assign local_bb5_xor175_i125 = (local_bb5_reduction_8_i123 ^ local_bb5_xor_lobit_i124);
assign local_bb5_and17_i35_valid_out_2 = 1'b1;
assign local_bb5_var__u24_valid_out = 1'b1;
assign local_bb5_cmp37_i46_valid_out_1 = 1'b1;
assign local_bb5__13_i58_valid_out = 1'b1;
assign local_bb5_xor175_i125_valid_out = 1'b1;
assign local_bb5_add_compressed_i130_valid_out = 1'b1;
assign rnode_178to179_bb5__9_i32_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_178to179_bb5_cmp27_i43_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_178to179_bb5_lnot23_i41_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_178to179_bb5__10_i33_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_178to179_bb5_shr16_i34_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_178to179_bb5_cmp27_i43_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_178to179_bb5__10_i33_0_stall_in_2_NO_SHIFT_REG = 1'b0;
assign rnode_178to179_bb5__9_i32_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_178to179_bb5_var__u23_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_178to179_bb5_align_0_i68_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_178to179_bb5_align_0_i68_0_stall_in_4_NO_SHIFT_REG = 1'b0;
assign rnode_178to179_bb5_align_0_i68_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_178to179_bb5_align_0_i68_0_stall_in_2_NO_SHIFT_REG = 1'b0;
assign rnode_178to179_bb5_align_0_i68_0_stall_in_3_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_179to180_bb5_and17_i35_0_valid_out_NO_SHIFT_REG;
 logic rnode_179to180_bb5_and17_i35_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_179to180_bb5_and17_i35_0_NO_SHIFT_REG;
 logic rnode_179to180_bb5_and17_i35_0_reg_180_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_179to180_bb5_and17_i35_0_reg_180_NO_SHIFT_REG;
 logic rnode_179to180_bb5_and17_i35_0_valid_out_reg_180_NO_SHIFT_REG;
 logic rnode_179to180_bb5_and17_i35_0_stall_in_reg_180_NO_SHIFT_REG;
 logic rnode_179to180_bb5_and17_i35_0_stall_out_reg_180_NO_SHIFT_REG;

acl_data_fifo rnode_179to180_bb5_and17_i35_0_reg_180_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_179to180_bb5_and17_i35_0_reg_180_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_179to180_bb5_and17_i35_0_stall_in_reg_180_NO_SHIFT_REG),
	.valid_out(rnode_179to180_bb5_and17_i35_0_valid_out_reg_180_NO_SHIFT_REG),
	.stall_out(rnode_179to180_bb5_and17_i35_0_stall_out_reg_180_NO_SHIFT_REG),
	.data_in((local_bb5_and17_i35 & 32'hFF)),
	.data_out(rnode_179to180_bb5_and17_i35_0_reg_180_NO_SHIFT_REG)
);

defparam rnode_179to180_bb5_and17_i35_0_reg_180_fifo.DEPTH = 1;
defparam rnode_179to180_bb5_and17_i35_0_reg_180_fifo.DATA_WIDTH = 32;
defparam rnode_179to180_bb5_and17_i35_0_reg_180_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_179to180_bb5_and17_i35_0_reg_180_fifo.IMPL = "shift_reg";

assign rnode_179to180_bb5_and17_i35_0_reg_180_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_and17_i35_stall_in_2 = 1'b0;
assign rnode_179to180_bb5_and17_i35_0_NO_SHIFT_REG = rnode_179to180_bb5_and17_i35_0_reg_180_NO_SHIFT_REG;
assign rnode_179to180_bb5_and17_i35_0_stall_in_reg_180_NO_SHIFT_REG = 1'b0;
assign rnode_179to180_bb5_and17_i35_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_179to180_bb5_var__u24_0_valid_out_NO_SHIFT_REG;
 logic rnode_179to180_bb5_var__u24_0_stall_in_NO_SHIFT_REG;
 logic rnode_179to180_bb5_var__u24_0_NO_SHIFT_REG;
 logic rnode_179to180_bb5_var__u24_0_reg_180_inputs_ready_NO_SHIFT_REG;
 logic rnode_179to180_bb5_var__u24_0_reg_180_NO_SHIFT_REG;
 logic rnode_179to180_bb5_var__u24_0_valid_out_reg_180_NO_SHIFT_REG;
 logic rnode_179to180_bb5_var__u24_0_stall_in_reg_180_NO_SHIFT_REG;
 logic rnode_179to180_bb5_var__u24_0_stall_out_reg_180_NO_SHIFT_REG;

acl_data_fifo rnode_179to180_bb5_var__u24_0_reg_180_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_179to180_bb5_var__u24_0_reg_180_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_179to180_bb5_var__u24_0_stall_in_reg_180_NO_SHIFT_REG),
	.valid_out(rnode_179to180_bb5_var__u24_0_valid_out_reg_180_NO_SHIFT_REG),
	.stall_out(rnode_179to180_bb5_var__u24_0_stall_out_reg_180_NO_SHIFT_REG),
	.data_in(local_bb5_var__u24),
	.data_out(rnode_179to180_bb5_var__u24_0_reg_180_NO_SHIFT_REG)
);

defparam rnode_179to180_bb5_var__u24_0_reg_180_fifo.DEPTH = 1;
defparam rnode_179to180_bb5_var__u24_0_reg_180_fifo.DATA_WIDTH = 1;
defparam rnode_179to180_bb5_var__u24_0_reg_180_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_179to180_bb5_var__u24_0_reg_180_fifo.IMPL = "shift_reg";

assign rnode_179to180_bb5_var__u24_0_reg_180_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u24_stall_in = 1'b0;
assign rnode_179to180_bb5_var__u24_0_NO_SHIFT_REG = rnode_179to180_bb5_var__u24_0_reg_180_NO_SHIFT_REG;
assign rnode_179to180_bb5_var__u24_0_stall_in_reg_180_NO_SHIFT_REG = 1'b0;
assign rnode_179to180_bb5_var__u24_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_179to180_bb5_cmp37_i46_0_valid_out_NO_SHIFT_REG;
 logic rnode_179to180_bb5_cmp37_i46_0_stall_in_NO_SHIFT_REG;
 logic rnode_179to180_bb5_cmp37_i46_0_NO_SHIFT_REG;
 logic rnode_179to180_bb5_cmp37_i46_0_reg_180_inputs_ready_NO_SHIFT_REG;
 logic rnode_179to180_bb5_cmp37_i46_0_reg_180_NO_SHIFT_REG;
 logic rnode_179to180_bb5_cmp37_i46_0_valid_out_reg_180_NO_SHIFT_REG;
 logic rnode_179to180_bb5_cmp37_i46_0_stall_in_reg_180_NO_SHIFT_REG;
 logic rnode_179to180_bb5_cmp37_i46_0_stall_out_reg_180_NO_SHIFT_REG;

acl_data_fifo rnode_179to180_bb5_cmp37_i46_0_reg_180_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_179to180_bb5_cmp37_i46_0_reg_180_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_179to180_bb5_cmp37_i46_0_stall_in_reg_180_NO_SHIFT_REG),
	.valid_out(rnode_179to180_bb5_cmp37_i46_0_valid_out_reg_180_NO_SHIFT_REG),
	.stall_out(rnode_179to180_bb5_cmp37_i46_0_stall_out_reg_180_NO_SHIFT_REG),
	.data_in(local_bb5_cmp37_i46),
	.data_out(rnode_179to180_bb5_cmp37_i46_0_reg_180_NO_SHIFT_REG)
);

defparam rnode_179to180_bb5_cmp37_i46_0_reg_180_fifo.DEPTH = 1;
defparam rnode_179to180_bb5_cmp37_i46_0_reg_180_fifo.DATA_WIDTH = 1;
defparam rnode_179to180_bb5_cmp37_i46_0_reg_180_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_179to180_bb5_cmp37_i46_0_reg_180_fifo.IMPL = "shift_reg";

assign rnode_179to180_bb5_cmp37_i46_0_reg_180_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp37_i46_stall_in_1 = 1'b0;
assign rnode_179to180_bb5_cmp37_i46_0_NO_SHIFT_REG = rnode_179to180_bb5_cmp37_i46_0_reg_180_NO_SHIFT_REG;
assign rnode_179to180_bb5_cmp37_i46_0_stall_in_reg_180_NO_SHIFT_REG = 1'b0;
assign rnode_179to180_bb5_cmp37_i46_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_179to180_bb5__13_i58_0_valid_out_NO_SHIFT_REG;
 logic rnode_179to180_bb5__13_i58_0_stall_in_NO_SHIFT_REG;
 logic rnode_179to180_bb5__13_i58_0_NO_SHIFT_REG;
 logic rnode_179to180_bb5__13_i58_0_reg_180_inputs_ready_NO_SHIFT_REG;
 logic rnode_179to180_bb5__13_i58_0_reg_180_NO_SHIFT_REG;
 logic rnode_179to180_bb5__13_i58_0_valid_out_reg_180_NO_SHIFT_REG;
 logic rnode_179to180_bb5__13_i58_0_stall_in_reg_180_NO_SHIFT_REG;
 logic rnode_179to180_bb5__13_i58_0_stall_out_reg_180_NO_SHIFT_REG;

acl_data_fifo rnode_179to180_bb5__13_i58_0_reg_180_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_179to180_bb5__13_i58_0_reg_180_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_179to180_bb5__13_i58_0_stall_in_reg_180_NO_SHIFT_REG),
	.valid_out(rnode_179to180_bb5__13_i58_0_valid_out_reg_180_NO_SHIFT_REG),
	.stall_out(rnode_179to180_bb5__13_i58_0_stall_out_reg_180_NO_SHIFT_REG),
	.data_in(local_bb5__13_i58),
	.data_out(rnode_179to180_bb5__13_i58_0_reg_180_NO_SHIFT_REG)
);

defparam rnode_179to180_bb5__13_i58_0_reg_180_fifo.DEPTH = 1;
defparam rnode_179to180_bb5__13_i58_0_reg_180_fifo.DATA_WIDTH = 1;
defparam rnode_179to180_bb5__13_i58_0_reg_180_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_179to180_bb5__13_i58_0_reg_180_fifo.IMPL = "shift_reg";

assign rnode_179to180_bb5__13_i58_0_reg_180_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5__13_i58_stall_in = 1'b0;
assign rnode_179to180_bb5__13_i58_0_NO_SHIFT_REG = rnode_179to180_bb5__13_i58_0_reg_180_NO_SHIFT_REG;
assign rnode_179to180_bb5__13_i58_0_stall_in_reg_180_NO_SHIFT_REG = 1'b0;
assign rnode_179to180_bb5__13_i58_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_179to180_bb5_xor175_i125_0_valid_out_NO_SHIFT_REG;
 logic rnode_179to180_bb5_xor175_i125_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_179to180_bb5_xor175_i125_0_NO_SHIFT_REG;
 logic rnode_179to180_bb5_xor175_i125_0_reg_180_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_179to180_bb5_xor175_i125_0_reg_180_NO_SHIFT_REG;
 logic rnode_179to180_bb5_xor175_i125_0_valid_out_reg_180_NO_SHIFT_REG;
 logic rnode_179to180_bb5_xor175_i125_0_stall_in_reg_180_NO_SHIFT_REG;
 logic rnode_179to180_bb5_xor175_i125_0_stall_out_reg_180_NO_SHIFT_REG;

acl_data_fifo rnode_179to180_bb5_xor175_i125_0_reg_180_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_179to180_bb5_xor175_i125_0_reg_180_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_179to180_bb5_xor175_i125_0_stall_in_reg_180_NO_SHIFT_REG),
	.valid_out(rnode_179to180_bb5_xor175_i125_0_valid_out_reg_180_NO_SHIFT_REG),
	.stall_out(rnode_179to180_bb5_xor175_i125_0_stall_out_reg_180_NO_SHIFT_REG),
	.data_in(local_bb5_xor175_i125),
	.data_out(rnode_179to180_bb5_xor175_i125_0_reg_180_NO_SHIFT_REG)
);

defparam rnode_179to180_bb5_xor175_i125_0_reg_180_fifo.DEPTH = 1;
defparam rnode_179to180_bb5_xor175_i125_0_reg_180_fifo.DATA_WIDTH = 32;
defparam rnode_179to180_bb5_xor175_i125_0_reg_180_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_179to180_bb5_xor175_i125_0_reg_180_fifo.IMPL = "shift_reg";

assign rnode_179to180_bb5_xor175_i125_0_reg_180_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_xor175_i125_stall_in = 1'b0;
assign rnode_179to180_bb5_xor175_i125_0_NO_SHIFT_REG = rnode_179to180_bb5_xor175_i125_0_reg_180_NO_SHIFT_REG;
assign rnode_179to180_bb5_xor175_i125_0_stall_in_reg_180_NO_SHIFT_REG = 1'b0;
assign rnode_179to180_bb5_xor175_i125_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_179to180_bb5_add_compressed_i130_0_valid_out_NO_SHIFT_REG;
 logic rnode_179to180_bb5_add_compressed_i130_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_179to180_bb5_add_compressed_i130_0_NO_SHIFT_REG;
 logic rnode_179to180_bb5_add_compressed_i130_0_reg_180_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_179to180_bb5_add_compressed_i130_0_reg_180_NO_SHIFT_REG;
 logic rnode_179to180_bb5_add_compressed_i130_0_valid_out_reg_180_NO_SHIFT_REG;
 logic rnode_179to180_bb5_add_compressed_i130_0_stall_in_reg_180_NO_SHIFT_REG;
 logic rnode_179to180_bb5_add_compressed_i130_0_stall_out_reg_180_NO_SHIFT_REG;

acl_data_fifo rnode_179to180_bb5_add_compressed_i130_0_reg_180_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_179to180_bb5_add_compressed_i130_0_reg_180_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_179to180_bb5_add_compressed_i130_0_stall_in_reg_180_NO_SHIFT_REG),
	.valid_out(rnode_179to180_bb5_add_compressed_i130_0_valid_out_reg_180_NO_SHIFT_REG),
	.stall_out(rnode_179to180_bb5_add_compressed_i130_0_stall_out_reg_180_NO_SHIFT_REG),
	.data_in((local_bb5_add_compressed_i130 & 32'h7FFFFF9)),
	.data_out(rnode_179to180_bb5_add_compressed_i130_0_reg_180_NO_SHIFT_REG)
);

defparam rnode_179to180_bb5_add_compressed_i130_0_reg_180_fifo.DEPTH = 1;
defparam rnode_179to180_bb5_add_compressed_i130_0_reg_180_fifo.DATA_WIDTH = 32;
defparam rnode_179to180_bb5_add_compressed_i130_0_reg_180_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_179to180_bb5_add_compressed_i130_0_reg_180_fifo.IMPL = "shift_reg";

assign rnode_179to180_bb5_add_compressed_i130_0_reg_180_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_add_compressed_i130_stall_in = 1'b0;
assign rnode_179to180_bb5_add_compressed_i130_0_NO_SHIFT_REG = rnode_179to180_bb5_add_compressed_i130_0_reg_180_NO_SHIFT_REG;
assign rnode_179to180_bb5_add_compressed_i130_0_stall_in_reg_180_NO_SHIFT_REG = 1'b0;
assign rnode_179to180_bb5_add_compressed_i130_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_180to181_bb5_and17_i35_0_valid_out_NO_SHIFT_REG;
 logic rnode_180to181_bb5_and17_i35_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_180to181_bb5_and17_i35_0_NO_SHIFT_REG;
 logic rnode_180to181_bb5_and17_i35_0_reg_181_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_180to181_bb5_and17_i35_0_reg_181_NO_SHIFT_REG;
 logic rnode_180to181_bb5_and17_i35_0_valid_out_reg_181_NO_SHIFT_REG;
 logic rnode_180to181_bb5_and17_i35_0_stall_in_reg_181_NO_SHIFT_REG;
 logic rnode_180to181_bb5_and17_i35_0_stall_out_reg_181_NO_SHIFT_REG;

acl_data_fifo rnode_180to181_bb5_and17_i35_0_reg_181_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_180to181_bb5_and17_i35_0_reg_181_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_180to181_bb5_and17_i35_0_stall_in_reg_181_NO_SHIFT_REG),
	.valid_out(rnode_180to181_bb5_and17_i35_0_valid_out_reg_181_NO_SHIFT_REG),
	.stall_out(rnode_180to181_bb5_and17_i35_0_stall_out_reg_181_NO_SHIFT_REG),
	.data_in((rnode_179to180_bb5_and17_i35_0_NO_SHIFT_REG & 32'hFF)),
	.data_out(rnode_180to181_bb5_and17_i35_0_reg_181_NO_SHIFT_REG)
);

defparam rnode_180to181_bb5_and17_i35_0_reg_181_fifo.DEPTH = 1;
defparam rnode_180to181_bb5_and17_i35_0_reg_181_fifo.DATA_WIDTH = 32;
defparam rnode_180to181_bb5_and17_i35_0_reg_181_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_180to181_bb5_and17_i35_0_reg_181_fifo.IMPL = "shift_reg";

assign rnode_180to181_bb5_and17_i35_0_reg_181_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_179to180_bb5_and17_i35_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_180to181_bb5_and17_i35_0_NO_SHIFT_REG = rnode_180to181_bb5_and17_i35_0_reg_181_NO_SHIFT_REG;
assign rnode_180to181_bb5_and17_i35_0_stall_in_reg_181_NO_SHIFT_REG = 1'b0;
assign rnode_180to181_bb5_and17_i35_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_180to182_bb5_var__u24_0_valid_out_NO_SHIFT_REG;
 logic rnode_180to182_bb5_var__u24_0_stall_in_NO_SHIFT_REG;
 logic rnode_180to182_bb5_var__u24_0_NO_SHIFT_REG;
 logic rnode_180to182_bb5_var__u24_0_reg_182_inputs_ready_NO_SHIFT_REG;
 logic rnode_180to182_bb5_var__u24_0_reg_182_NO_SHIFT_REG;
 logic rnode_180to182_bb5_var__u24_0_valid_out_reg_182_NO_SHIFT_REG;
 logic rnode_180to182_bb5_var__u24_0_stall_in_reg_182_NO_SHIFT_REG;
 logic rnode_180to182_bb5_var__u24_0_stall_out_reg_182_NO_SHIFT_REG;

acl_data_fifo rnode_180to182_bb5_var__u24_0_reg_182_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_180to182_bb5_var__u24_0_reg_182_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_180to182_bb5_var__u24_0_stall_in_reg_182_NO_SHIFT_REG),
	.valid_out(rnode_180to182_bb5_var__u24_0_valid_out_reg_182_NO_SHIFT_REG),
	.stall_out(rnode_180to182_bb5_var__u24_0_stall_out_reg_182_NO_SHIFT_REG),
	.data_in(rnode_179to180_bb5_var__u24_0_NO_SHIFT_REG),
	.data_out(rnode_180to182_bb5_var__u24_0_reg_182_NO_SHIFT_REG)
);

defparam rnode_180to182_bb5_var__u24_0_reg_182_fifo.DEPTH = 2;
defparam rnode_180to182_bb5_var__u24_0_reg_182_fifo.DATA_WIDTH = 1;
defparam rnode_180to182_bb5_var__u24_0_reg_182_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_180to182_bb5_var__u24_0_reg_182_fifo.IMPL = "shift_reg";

assign rnode_180to182_bb5_var__u24_0_reg_182_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_179to180_bb5_var__u24_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_180to182_bb5_var__u24_0_NO_SHIFT_REG = rnode_180to182_bb5_var__u24_0_reg_182_NO_SHIFT_REG;
assign rnode_180to182_bb5_var__u24_0_stall_in_reg_182_NO_SHIFT_REG = 1'b0;
assign rnode_180to182_bb5_var__u24_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_180to181_bb5_cmp37_i46_0_valid_out_NO_SHIFT_REG;
 logic rnode_180to181_bb5_cmp37_i46_0_stall_in_NO_SHIFT_REG;
 logic rnode_180to181_bb5_cmp37_i46_0_NO_SHIFT_REG;
 logic rnode_180to181_bb5_cmp37_i46_0_reg_181_inputs_ready_NO_SHIFT_REG;
 logic rnode_180to181_bb5_cmp37_i46_0_reg_181_NO_SHIFT_REG;
 logic rnode_180to181_bb5_cmp37_i46_0_valid_out_reg_181_NO_SHIFT_REG;
 logic rnode_180to181_bb5_cmp37_i46_0_stall_in_reg_181_NO_SHIFT_REG;
 logic rnode_180to181_bb5_cmp37_i46_0_stall_out_reg_181_NO_SHIFT_REG;

acl_data_fifo rnode_180to181_bb5_cmp37_i46_0_reg_181_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_180to181_bb5_cmp37_i46_0_reg_181_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_180to181_bb5_cmp37_i46_0_stall_in_reg_181_NO_SHIFT_REG),
	.valid_out(rnode_180to181_bb5_cmp37_i46_0_valid_out_reg_181_NO_SHIFT_REG),
	.stall_out(rnode_180to181_bb5_cmp37_i46_0_stall_out_reg_181_NO_SHIFT_REG),
	.data_in(rnode_179to180_bb5_cmp37_i46_0_NO_SHIFT_REG),
	.data_out(rnode_180to181_bb5_cmp37_i46_0_reg_181_NO_SHIFT_REG)
);

defparam rnode_180to181_bb5_cmp37_i46_0_reg_181_fifo.DEPTH = 1;
defparam rnode_180to181_bb5_cmp37_i46_0_reg_181_fifo.DATA_WIDTH = 1;
defparam rnode_180to181_bb5_cmp37_i46_0_reg_181_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_180to181_bb5_cmp37_i46_0_reg_181_fifo.IMPL = "shift_reg";

assign rnode_180to181_bb5_cmp37_i46_0_reg_181_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_179to180_bb5_cmp37_i46_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_180to181_bb5_cmp37_i46_0_NO_SHIFT_REG = rnode_180to181_bb5_cmp37_i46_0_reg_181_NO_SHIFT_REG;
assign rnode_180to181_bb5_cmp37_i46_0_stall_in_reg_181_NO_SHIFT_REG = 1'b0;
assign rnode_180to181_bb5_cmp37_i46_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 3
//  * capacity = 3
 logic rnode_180to183_bb5__13_i58_0_valid_out_NO_SHIFT_REG;
 logic rnode_180to183_bb5__13_i58_0_stall_in_NO_SHIFT_REG;
 logic rnode_180to183_bb5__13_i58_0_NO_SHIFT_REG;
 logic rnode_180to183_bb5__13_i58_0_reg_183_inputs_ready_NO_SHIFT_REG;
 logic rnode_180to183_bb5__13_i58_0_reg_183_NO_SHIFT_REG;
 logic rnode_180to183_bb5__13_i58_0_valid_out_reg_183_NO_SHIFT_REG;
 logic rnode_180to183_bb5__13_i58_0_stall_in_reg_183_NO_SHIFT_REG;
 logic rnode_180to183_bb5__13_i58_0_stall_out_reg_183_NO_SHIFT_REG;

acl_data_fifo rnode_180to183_bb5__13_i58_0_reg_183_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_180to183_bb5__13_i58_0_reg_183_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_180to183_bb5__13_i58_0_stall_in_reg_183_NO_SHIFT_REG),
	.valid_out(rnode_180to183_bb5__13_i58_0_valid_out_reg_183_NO_SHIFT_REG),
	.stall_out(rnode_180to183_bb5__13_i58_0_stall_out_reg_183_NO_SHIFT_REG),
	.data_in(rnode_179to180_bb5__13_i58_0_NO_SHIFT_REG),
	.data_out(rnode_180to183_bb5__13_i58_0_reg_183_NO_SHIFT_REG)
);

defparam rnode_180to183_bb5__13_i58_0_reg_183_fifo.DEPTH = 3;
defparam rnode_180to183_bb5__13_i58_0_reg_183_fifo.DATA_WIDTH = 1;
defparam rnode_180to183_bb5__13_i58_0_reg_183_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_180to183_bb5__13_i58_0_reg_183_fifo.IMPL = "shift_reg";

assign rnode_180to183_bb5__13_i58_0_reg_183_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_179to180_bb5__13_i58_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_180to183_bb5__13_i58_0_NO_SHIFT_REG = rnode_180to183_bb5__13_i58_0_reg_183_NO_SHIFT_REG;
assign rnode_180to183_bb5__13_i58_0_stall_in_reg_183_NO_SHIFT_REG = 1'b0;
assign rnode_180to183_bb5__13_i58_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_add178_i131_valid_out;
wire local_bb5_add178_i131_stall_in;
wire local_bb5_add178_i131_inputs_ready;
wire local_bb5_add178_i131_stall_local;
wire [31:0] local_bb5_add178_i131;

assign local_bb5_add178_i131_inputs_ready = (rnode_179to180_bb5_add_compressed_i130_0_valid_out_NO_SHIFT_REG & rnode_179to180_bb5_xor175_i125_0_valid_out_NO_SHIFT_REG);
assign local_bb5_add178_i131 = ((rnode_179to180_bb5_add_compressed_i130_0_NO_SHIFT_REG & 32'h7FFFFF9) + rnode_179to180_bb5_xor175_i125_0_NO_SHIFT_REG);
assign local_bb5_add178_i131_valid_out = 1'b1;
assign rnode_179to180_bb5_add_compressed_i130_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_179to180_bb5_xor175_i125_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_181to182_bb5_and17_i35_0_valid_out_NO_SHIFT_REG;
 logic rnode_181to182_bb5_and17_i35_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_181to182_bb5_and17_i35_0_NO_SHIFT_REG;
 logic rnode_181to182_bb5_and17_i35_0_reg_182_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_181to182_bb5_and17_i35_0_reg_182_NO_SHIFT_REG;
 logic rnode_181to182_bb5_and17_i35_0_valid_out_reg_182_NO_SHIFT_REG;
 logic rnode_181to182_bb5_and17_i35_0_stall_in_reg_182_NO_SHIFT_REG;
 logic rnode_181to182_bb5_and17_i35_0_stall_out_reg_182_NO_SHIFT_REG;

acl_data_fifo rnode_181to182_bb5_and17_i35_0_reg_182_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_181to182_bb5_and17_i35_0_reg_182_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_181to182_bb5_and17_i35_0_stall_in_reg_182_NO_SHIFT_REG),
	.valid_out(rnode_181to182_bb5_and17_i35_0_valid_out_reg_182_NO_SHIFT_REG),
	.stall_out(rnode_181to182_bb5_and17_i35_0_stall_out_reg_182_NO_SHIFT_REG),
	.data_in((rnode_180to181_bb5_and17_i35_0_NO_SHIFT_REG & 32'hFF)),
	.data_out(rnode_181to182_bb5_and17_i35_0_reg_182_NO_SHIFT_REG)
);

defparam rnode_181to182_bb5_and17_i35_0_reg_182_fifo.DEPTH = 1;
defparam rnode_181to182_bb5_and17_i35_0_reg_182_fifo.DATA_WIDTH = 32;
defparam rnode_181to182_bb5_and17_i35_0_reg_182_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_181to182_bb5_and17_i35_0_reg_182_fifo.IMPL = "shift_reg";

assign rnode_181to182_bb5_and17_i35_0_reg_182_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_180to181_bb5_and17_i35_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_181to182_bb5_and17_i35_0_NO_SHIFT_REG = rnode_181to182_bb5_and17_i35_0_reg_182_NO_SHIFT_REG;
assign rnode_181to182_bb5_and17_i35_0_stall_in_reg_182_NO_SHIFT_REG = 1'b0;
assign rnode_181to182_bb5_and17_i35_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_182to183_bb5_var__u24_0_valid_out_NO_SHIFT_REG;
 logic rnode_182to183_bb5_var__u24_0_stall_in_NO_SHIFT_REG;
 logic rnode_182to183_bb5_var__u24_0_NO_SHIFT_REG;
 logic rnode_182to183_bb5_var__u24_0_reg_183_inputs_ready_NO_SHIFT_REG;
 logic rnode_182to183_bb5_var__u24_0_reg_183_NO_SHIFT_REG;
 logic rnode_182to183_bb5_var__u24_0_valid_out_reg_183_NO_SHIFT_REG;
 logic rnode_182to183_bb5_var__u24_0_stall_in_reg_183_NO_SHIFT_REG;
 logic rnode_182to183_bb5_var__u24_0_stall_out_reg_183_NO_SHIFT_REG;

acl_data_fifo rnode_182to183_bb5_var__u24_0_reg_183_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_182to183_bb5_var__u24_0_reg_183_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_182to183_bb5_var__u24_0_stall_in_reg_183_NO_SHIFT_REG),
	.valid_out(rnode_182to183_bb5_var__u24_0_valid_out_reg_183_NO_SHIFT_REG),
	.stall_out(rnode_182to183_bb5_var__u24_0_stall_out_reg_183_NO_SHIFT_REG),
	.data_in(rnode_180to182_bb5_var__u24_0_NO_SHIFT_REG),
	.data_out(rnode_182to183_bb5_var__u24_0_reg_183_NO_SHIFT_REG)
);

defparam rnode_182to183_bb5_var__u24_0_reg_183_fifo.DEPTH = 1;
defparam rnode_182to183_bb5_var__u24_0_reg_183_fifo.DATA_WIDTH = 1;
defparam rnode_182to183_bb5_var__u24_0_reg_183_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_182to183_bb5_var__u24_0_reg_183_fifo.IMPL = "shift_reg";

assign rnode_182to183_bb5_var__u24_0_reg_183_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_180to182_bb5_var__u24_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_182to183_bb5_var__u24_0_NO_SHIFT_REG = rnode_182to183_bb5_var__u24_0_reg_183_NO_SHIFT_REG;
assign rnode_182to183_bb5_var__u24_0_stall_in_reg_183_NO_SHIFT_REG = 1'b0;
assign rnode_182to183_bb5_var__u24_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_181to182_bb5_cmp37_i46_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_181to182_bb5_cmp37_i46_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_181to182_bb5_cmp37_i46_0_NO_SHIFT_REG;
 logic rnode_181to182_bb5_cmp37_i46_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_181to182_bb5_cmp37_i46_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_181to182_bb5_cmp37_i46_1_NO_SHIFT_REG;
 logic rnode_181to182_bb5_cmp37_i46_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_181to182_bb5_cmp37_i46_0_stall_in_2_NO_SHIFT_REG;
 logic rnode_181to182_bb5_cmp37_i46_2_NO_SHIFT_REG;
 logic rnode_181to182_bb5_cmp37_i46_0_reg_182_inputs_ready_NO_SHIFT_REG;
 logic rnode_181to182_bb5_cmp37_i46_0_reg_182_NO_SHIFT_REG;
 logic rnode_181to182_bb5_cmp37_i46_0_valid_out_0_reg_182_NO_SHIFT_REG;
 logic rnode_181to182_bb5_cmp37_i46_0_stall_in_0_reg_182_NO_SHIFT_REG;
 logic rnode_181to182_bb5_cmp37_i46_0_stall_out_reg_182_NO_SHIFT_REG;

acl_data_fifo rnode_181to182_bb5_cmp37_i46_0_reg_182_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_181to182_bb5_cmp37_i46_0_reg_182_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_181to182_bb5_cmp37_i46_0_stall_in_0_reg_182_NO_SHIFT_REG),
	.valid_out(rnode_181to182_bb5_cmp37_i46_0_valid_out_0_reg_182_NO_SHIFT_REG),
	.stall_out(rnode_181to182_bb5_cmp37_i46_0_stall_out_reg_182_NO_SHIFT_REG),
	.data_in(rnode_180to181_bb5_cmp37_i46_0_NO_SHIFT_REG),
	.data_out(rnode_181to182_bb5_cmp37_i46_0_reg_182_NO_SHIFT_REG)
);

defparam rnode_181to182_bb5_cmp37_i46_0_reg_182_fifo.DEPTH = 1;
defparam rnode_181to182_bb5_cmp37_i46_0_reg_182_fifo.DATA_WIDTH = 1;
defparam rnode_181to182_bb5_cmp37_i46_0_reg_182_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_181to182_bb5_cmp37_i46_0_reg_182_fifo.IMPL = "shift_reg";

assign rnode_181to182_bb5_cmp37_i46_0_reg_182_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_180to181_bb5_cmp37_i46_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_181to182_bb5_cmp37_i46_0_stall_in_0_reg_182_NO_SHIFT_REG = 1'b0;
assign rnode_181to182_bb5_cmp37_i46_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_181to182_bb5_cmp37_i46_0_NO_SHIFT_REG = rnode_181to182_bb5_cmp37_i46_0_reg_182_NO_SHIFT_REG;
assign rnode_181to182_bb5_cmp37_i46_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_181to182_bb5_cmp37_i46_1_NO_SHIFT_REG = rnode_181to182_bb5_cmp37_i46_0_reg_182_NO_SHIFT_REG;
assign rnode_181to182_bb5_cmp37_i46_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_181to182_bb5_cmp37_i46_2_NO_SHIFT_REG = rnode_181to182_bb5_cmp37_i46_0_reg_182_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_183to184_bb5__13_i58_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_183to184_bb5__13_i58_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_183to184_bb5__13_i58_0_NO_SHIFT_REG;
 logic rnode_183to184_bb5__13_i58_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_183to184_bb5__13_i58_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_183to184_bb5__13_i58_1_NO_SHIFT_REG;
 logic rnode_183to184_bb5__13_i58_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_183to184_bb5__13_i58_0_stall_in_2_NO_SHIFT_REG;
 logic rnode_183to184_bb5__13_i58_2_NO_SHIFT_REG;
 logic rnode_183to184_bb5__13_i58_0_reg_184_inputs_ready_NO_SHIFT_REG;
 logic rnode_183to184_bb5__13_i58_0_reg_184_NO_SHIFT_REG;
 logic rnode_183to184_bb5__13_i58_0_valid_out_0_reg_184_NO_SHIFT_REG;
 logic rnode_183to184_bb5__13_i58_0_stall_in_0_reg_184_NO_SHIFT_REG;
 logic rnode_183to184_bb5__13_i58_0_stall_out_reg_184_NO_SHIFT_REG;

acl_data_fifo rnode_183to184_bb5__13_i58_0_reg_184_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_183to184_bb5__13_i58_0_reg_184_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_183to184_bb5__13_i58_0_stall_in_0_reg_184_NO_SHIFT_REG),
	.valid_out(rnode_183to184_bb5__13_i58_0_valid_out_0_reg_184_NO_SHIFT_REG),
	.stall_out(rnode_183to184_bb5__13_i58_0_stall_out_reg_184_NO_SHIFT_REG),
	.data_in(rnode_180to183_bb5__13_i58_0_NO_SHIFT_REG),
	.data_out(rnode_183to184_bb5__13_i58_0_reg_184_NO_SHIFT_REG)
);

defparam rnode_183to184_bb5__13_i58_0_reg_184_fifo.DEPTH = 1;
defparam rnode_183to184_bb5__13_i58_0_reg_184_fifo.DATA_WIDTH = 1;
defparam rnode_183to184_bb5__13_i58_0_reg_184_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_183to184_bb5__13_i58_0_reg_184_fifo.IMPL = "shift_reg";

assign rnode_183to184_bb5__13_i58_0_reg_184_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_180to183_bb5__13_i58_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_183to184_bb5__13_i58_0_stall_in_0_reg_184_NO_SHIFT_REG = 1'b0;
assign rnode_183to184_bb5__13_i58_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_183to184_bb5__13_i58_0_NO_SHIFT_REG = rnode_183to184_bb5__13_i58_0_reg_184_NO_SHIFT_REG;
assign rnode_183to184_bb5__13_i58_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_183to184_bb5__13_i58_1_NO_SHIFT_REG = rnode_183to184_bb5__13_i58_0_reg_184_NO_SHIFT_REG;
assign rnode_183to184_bb5__13_i58_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_183to184_bb5__13_i58_2_NO_SHIFT_REG = rnode_183to184_bb5__13_i58_0_reg_184_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_180to181_bb5_add178_i131_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_180to181_bb5_add178_i131_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_180to181_bb5_add178_i131_0_NO_SHIFT_REG;
 logic rnode_180to181_bb5_add178_i131_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_180to181_bb5_add178_i131_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_180to181_bb5_add178_i131_1_NO_SHIFT_REG;
 logic rnode_180to181_bb5_add178_i131_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_180to181_bb5_add178_i131_0_stall_in_2_NO_SHIFT_REG;
 logic [31:0] rnode_180to181_bb5_add178_i131_2_NO_SHIFT_REG;
 logic rnode_180to181_bb5_add178_i131_0_valid_out_3_NO_SHIFT_REG;
 logic rnode_180to181_bb5_add178_i131_0_stall_in_3_NO_SHIFT_REG;
 logic [31:0] rnode_180to181_bb5_add178_i131_3_NO_SHIFT_REG;
 logic rnode_180to181_bb5_add178_i131_0_reg_181_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_180to181_bb5_add178_i131_0_reg_181_NO_SHIFT_REG;
 logic rnode_180to181_bb5_add178_i131_0_valid_out_0_reg_181_NO_SHIFT_REG;
 logic rnode_180to181_bb5_add178_i131_0_stall_in_0_reg_181_NO_SHIFT_REG;
 logic rnode_180to181_bb5_add178_i131_0_stall_out_reg_181_NO_SHIFT_REG;

acl_data_fifo rnode_180to181_bb5_add178_i131_0_reg_181_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_180to181_bb5_add178_i131_0_reg_181_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_180to181_bb5_add178_i131_0_stall_in_0_reg_181_NO_SHIFT_REG),
	.valid_out(rnode_180to181_bb5_add178_i131_0_valid_out_0_reg_181_NO_SHIFT_REG),
	.stall_out(rnode_180to181_bb5_add178_i131_0_stall_out_reg_181_NO_SHIFT_REG),
	.data_in(local_bb5_add178_i131),
	.data_out(rnode_180to181_bb5_add178_i131_0_reg_181_NO_SHIFT_REG)
);

defparam rnode_180to181_bb5_add178_i131_0_reg_181_fifo.DEPTH = 1;
defparam rnode_180to181_bb5_add178_i131_0_reg_181_fifo.DATA_WIDTH = 32;
defparam rnode_180to181_bb5_add178_i131_0_reg_181_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_180to181_bb5_add178_i131_0_reg_181_fifo.IMPL = "shift_reg";

assign rnode_180to181_bb5_add178_i131_0_reg_181_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_add178_i131_stall_in = 1'b0;
assign rnode_180to181_bb5_add178_i131_0_stall_in_0_reg_181_NO_SHIFT_REG = 1'b0;
assign rnode_180to181_bb5_add178_i131_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_180to181_bb5_add178_i131_0_NO_SHIFT_REG = rnode_180to181_bb5_add178_i131_0_reg_181_NO_SHIFT_REG;
assign rnode_180to181_bb5_add178_i131_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_180to181_bb5_add178_i131_1_NO_SHIFT_REG = rnode_180to181_bb5_add178_i131_0_reg_181_NO_SHIFT_REG;
assign rnode_180to181_bb5_add178_i131_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_180to181_bb5_add178_i131_2_NO_SHIFT_REG = rnode_180to181_bb5_add178_i131_0_reg_181_NO_SHIFT_REG;
assign rnode_180to181_bb5_add178_i131_0_valid_out_3_NO_SHIFT_REG = 1'b1;
assign rnode_180to181_bb5_add178_i131_3_NO_SHIFT_REG = rnode_180to181_bb5_add178_i131_0_reg_181_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_not_cmp37_i157_stall_local;
wire local_bb5_not_cmp37_i157;

assign local_bb5_not_cmp37_i157 = (rnode_181to182_bb5_cmp37_i46_0_NO_SHIFT_REG ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb5_cond260_i191_stall_local;
wire [31:0] local_bb5_cond260_i191;

assign local_bb5_cond260_i191 = (rnode_183to184_bb5__13_i58_1_NO_SHIFT_REG ? 32'h400000 : 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_and179_i132_valid_out;
wire local_bb5_and179_i132_stall_in;
wire local_bb5_and179_i132_inputs_ready;
wire local_bb5_and179_i132_stall_local;
wire [31:0] local_bb5_and179_i132;

assign local_bb5_and179_i132_inputs_ready = rnode_180to181_bb5_add178_i131_0_valid_out_0_NO_SHIFT_REG;
assign local_bb5_and179_i132 = (rnode_180to181_bb5_add178_i131_0_NO_SHIFT_REG & 32'hFFFFFFF);
assign local_bb5_and179_i132_valid_out = 1'b1;
assign rnode_180to181_bb5_add178_i131_0_stall_in_0_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_and181_i133_valid_out;
wire local_bb5_and181_i133_stall_in;
wire local_bb5_and181_i133_inputs_ready;
wire local_bb5_and181_i133_stall_local;
wire [31:0] local_bb5_and181_i133;

assign local_bb5_and181_i133_inputs_ready = rnode_180to181_bb5_add178_i131_0_valid_out_1_NO_SHIFT_REG;
assign local_bb5_and181_i133 = (rnode_180to181_bb5_add178_i131_1_NO_SHIFT_REG >> 32'h1B);
assign local_bb5_and181_i133_valid_out = 1'b1;
assign rnode_180to181_bb5_add178_i131_0_stall_in_1_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_and184_i134_valid_out;
wire local_bb5_and184_i134_stall_in;
wire local_bb5_and184_i134_inputs_ready;
wire local_bb5_and184_i134_stall_local;
wire [31:0] local_bb5_and184_i134;

assign local_bb5_and184_i134_inputs_ready = rnode_180to181_bb5_add178_i131_0_valid_out_2_NO_SHIFT_REG;
assign local_bb5_and184_i134 = (rnode_180to181_bb5_add178_i131_2_NO_SHIFT_REG & 32'h1);
assign local_bb5_and184_i134_valid_out = 1'b1;
assign rnode_180to181_bb5_add178_i131_0_stall_in_2_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_and187_i135_stall_local;
wire [31:0] local_bb5_and187_i135;

assign local_bb5_and187_i135 = (rnode_180to181_bb5_add178_i131_3_NO_SHIFT_REG & 32'h7FFFFFF);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_181to182_bb5_and179_i132_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_181to182_bb5_and179_i132_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_181to182_bb5_and179_i132_0_NO_SHIFT_REG;
 logic rnode_181to182_bb5_and179_i132_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_181to182_bb5_and179_i132_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_181to182_bb5_and179_i132_1_NO_SHIFT_REG;
 logic rnode_181to182_bb5_and179_i132_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_181to182_bb5_and179_i132_0_stall_in_2_NO_SHIFT_REG;
 logic [31:0] rnode_181to182_bb5_and179_i132_2_NO_SHIFT_REG;
 logic rnode_181to182_bb5_and179_i132_0_reg_182_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_181to182_bb5_and179_i132_0_reg_182_NO_SHIFT_REG;
 logic rnode_181to182_bb5_and179_i132_0_valid_out_0_reg_182_NO_SHIFT_REG;
 logic rnode_181to182_bb5_and179_i132_0_stall_in_0_reg_182_NO_SHIFT_REG;
 logic rnode_181to182_bb5_and179_i132_0_stall_out_reg_182_NO_SHIFT_REG;

acl_data_fifo rnode_181to182_bb5_and179_i132_0_reg_182_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_181to182_bb5_and179_i132_0_reg_182_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_181to182_bb5_and179_i132_0_stall_in_0_reg_182_NO_SHIFT_REG),
	.valid_out(rnode_181to182_bb5_and179_i132_0_valid_out_0_reg_182_NO_SHIFT_REG),
	.stall_out(rnode_181to182_bb5_and179_i132_0_stall_out_reg_182_NO_SHIFT_REG),
	.data_in((local_bb5_and179_i132 & 32'hFFFFFFF)),
	.data_out(rnode_181to182_bb5_and179_i132_0_reg_182_NO_SHIFT_REG)
);

defparam rnode_181to182_bb5_and179_i132_0_reg_182_fifo.DEPTH = 1;
defparam rnode_181to182_bb5_and179_i132_0_reg_182_fifo.DATA_WIDTH = 32;
defparam rnode_181to182_bb5_and179_i132_0_reg_182_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_181to182_bb5_and179_i132_0_reg_182_fifo.IMPL = "shift_reg";

assign rnode_181to182_bb5_and179_i132_0_reg_182_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_and179_i132_stall_in = 1'b0;
assign rnode_181to182_bb5_and179_i132_0_stall_in_0_reg_182_NO_SHIFT_REG = 1'b0;
assign rnode_181to182_bb5_and179_i132_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_181to182_bb5_and179_i132_0_NO_SHIFT_REG = rnode_181to182_bb5_and179_i132_0_reg_182_NO_SHIFT_REG;
assign rnode_181to182_bb5_and179_i132_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_181to182_bb5_and179_i132_1_NO_SHIFT_REG = rnode_181to182_bb5_and179_i132_0_reg_182_NO_SHIFT_REG;
assign rnode_181to182_bb5_and179_i132_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_181to182_bb5_and179_i132_2_NO_SHIFT_REG = rnode_181to182_bb5_and179_i132_0_reg_182_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_181to182_bb5_and181_i133_0_valid_out_NO_SHIFT_REG;
 logic rnode_181to182_bb5_and181_i133_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_181to182_bb5_and181_i133_0_NO_SHIFT_REG;
 logic rnode_181to182_bb5_and181_i133_0_reg_182_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_181to182_bb5_and181_i133_0_reg_182_NO_SHIFT_REG;
 logic rnode_181to182_bb5_and181_i133_0_valid_out_reg_182_NO_SHIFT_REG;
 logic rnode_181to182_bb5_and181_i133_0_stall_in_reg_182_NO_SHIFT_REG;
 logic rnode_181to182_bb5_and181_i133_0_stall_out_reg_182_NO_SHIFT_REG;

acl_data_fifo rnode_181to182_bb5_and181_i133_0_reg_182_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_181to182_bb5_and181_i133_0_reg_182_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_181to182_bb5_and181_i133_0_stall_in_reg_182_NO_SHIFT_REG),
	.valid_out(rnode_181to182_bb5_and181_i133_0_valid_out_reg_182_NO_SHIFT_REG),
	.stall_out(rnode_181to182_bb5_and181_i133_0_stall_out_reg_182_NO_SHIFT_REG),
	.data_in((local_bb5_and181_i133 & 32'h1F)),
	.data_out(rnode_181to182_bb5_and181_i133_0_reg_182_NO_SHIFT_REG)
);

defparam rnode_181to182_bb5_and181_i133_0_reg_182_fifo.DEPTH = 1;
defparam rnode_181to182_bb5_and181_i133_0_reg_182_fifo.DATA_WIDTH = 32;
defparam rnode_181to182_bb5_and181_i133_0_reg_182_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_181to182_bb5_and181_i133_0_reg_182_fifo.IMPL = "shift_reg";

assign rnode_181to182_bb5_and181_i133_0_reg_182_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_and181_i133_stall_in = 1'b0;
assign rnode_181to182_bb5_and181_i133_0_NO_SHIFT_REG = rnode_181to182_bb5_and181_i133_0_reg_182_NO_SHIFT_REG;
assign rnode_181to182_bb5_and181_i133_0_stall_in_reg_182_NO_SHIFT_REG = 1'b0;
assign rnode_181to182_bb5_and181_i133_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_181to182_bb5_and184_i134_0_valid_out_NO_SHIFT_REG;
 logic rnode_181to182_bb5_and184_i134_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_181to182_bb5_and184_i134_0_NO_SHIFT_REG;
 logic rnode_181to182_bb5_and184_i134_0_reg_182_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_181to182_bb5_and184_i134_0_reg_182_NO_SHIFT_REG;
 logic rnode_181to182_bb5_and184_i134_0_valid_out_reg_182_NO_SHIFT_REG;
 logic rnode_181to182_bb5_and184_i134_0_stall_in_reg_182_NO_SHIFT_REG;
 logic rnode_181to182_bb5_and184_i134_0_stall_out_reg_182_NO_SHIFT_REG;

acl_data_fifo rnode_181to182_bb5_and184_i134_0_reg_182_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_181to182_bb5_and184_i134_0_reg_182_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_181to182_bb5_and184_i134_0_stall_in_reg_182_NO_SHIFT_REG),
	.valid_out(rnode_181to182_bb5_and184_i134_0_valid_out_reg_182_NO_SHIFT_REG),
	.stall_out(rnode_181to182_bb5_and184_i134_0_stall_out_reg_182_NO_SHIFT_REG),
	.data_in((local_bb5_and184_i134 & 32'h1)),
	.data_out(rnode_181to182_bb5_and184_i134_0_reg_182_NO_SHIFT_REG)
);

defparam rnode_181to182_bb5_and184_i134_0_reg_182_fifo.DEPTH = 1;
defparam rnode_181to182_bb5_and184_i134_0_reg_182_fifo.DATA_WIDTH = 32;
defparam rnode_181to182_bb5_and184_i134_0_reg_182_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_181to182_bb5_and184_i134_0_reg_182_fifo.IMPL = "shift_reg";

assign rnode_181to182_bb5_and184_i134_0_reg_182_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_and184_i134_stall_in = 1'b0;
assign rnode_181to182_bb5_and184_i134_0_NO_SHIFT_REG = rnode_181to182_bb5_and184_i134_0_reg_182_NO_SHIFT_REG;
assign rnode_181to182_bb5_and184_i134_0_stall_in_reg_182_NO_SHIFT_REG = 1'b0;
assign rnode_181to182_bb5_and184_i134_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_shr_i_i136_stall_local;
wire [31:0] local_bb5_shr_i_i136;

assign local_bb5_shr_i_i136 = ((local_bb5_and187_i135 & 32'h7FFFFFF) >> 32'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_shr200_i155_stall_local;
wire [31:0] local_bb5_shr200_i155;

assign local_bb5_shr200_i155 = ((rnode_181to182_bb5_and179_i132_1_NO_SHIFT_REG & 32'hFFFFFFF) >> 32'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u33_stall_local;
wire [31:0] local_bb5_var__u33;

assign local_bb5_var__u33 = ((rnode_181to182_bb5_and181_i133_0_NO_SHIFT_REG & 32'h1F) & 32'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i137_stall_local;
wire [31:0] local_bb5_or_i_i137;

assign local_bb5_or_i_i137 = ((local_bb5_shr_i_i136 & 32'h3FFFFFF) | (local_bb5_and187_i135 & 32'h7FFFFFF));

// This section implements an unregistered operation.
// 
wire local_bb5_or203_i156_stall_local;
wire [31:0] local_bb5_or203_i156;

assign local_bb5_or203_i156 = ((local_bb5_shr200_i155 & 32'h7FFFFFF) | (rnode_181to182_bb5_and184_i134_0_NO_SHIFT_REG & 32'h1));

// This section implements an unregistered operation.
// 
wire local_bb5_tobool198_i154_stall_local;
wire local_bb5_tobool198_i154;

assign local_bb5_tobool198_i154 = ((local_bb5_var__u33 & 32'h1) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_shr1_i_i138_stall_local;
wire [31:0] local_bb5_shr1_i_i138;

assign local_bb5_shr1_i_i138 = ((local_bb5_or_i_i137 & 32'h7FFFFFF) >> 32'h2);

// This section implements an unregistered operation.
// 
wire local_bb5__26_i158_stall_local;
wire local_bb5__26_i158;

assign local_bb5__26_i158 = (local_bb5_tobool198_i154 & local_bb5_not_cmp37_i157);

// This section implements an unregistered operation.
// 
wire local_bb5_or2_i_i139_stall_local;
wire [31:0] local_bb5_or2_i_i139;

assign local_bb5_or2_i_i139 = ((local_bb5_shr1_i_i138 & 32'h1FFFFFF) | (local_bb5_or_i_i137 & 32'h7FFFFFF));

// This section implements an unregistered operation.
// 
wire local_bb5__27_i159_stall_local;
wire [31:0] local_bb5__27_i159;

assign local_bb5__27_i159 = (local_bb5__26_i158 ? 32'h0 : (local_bb5_var__u33 & 32'h1));

// This section implements an unregistered operation.
// 
wire local_bb5__29_i160_stall_local;
wire [31:0] local_bb5__29_i160;

assign local_bb5__29_i160 = (local_bb5__26_i158 ? (rnode_181to182_bb5_and179_i132_2_NO_SHIFT_REG & 32'hFFFFFFF) : (local_bb5_or203_i156 & 32'h7FFFFFF));

// This section implements an unregistered operation.
// 
wire local_bb5_shr3_i_i140_stall_local;
wire [31:0] local_bb5_shr3_i_i140;

assign local_bb5_shr3_i_i140 = ((local_bb5_or2_i_i139 & 32'h7FFFFFF) >> 32'h4);

// This section implements an unregistered operation.
// 
wire local_bb5_or4_i_i141_stall_local;
wire [31:0] local_bb5_or4_i_i141;

assign local_bb5_or4_i_i141 = ((local_bb5_shr3_i_i140 & 32'h7FFFFF) | (local_bb5_or2_i_i139 & 32'h7FFFFFF));

// This section implements an unregistered operation.
// 
wire local_bb5_shr5_i_i142_stall_local;
wire [31:0] local_bb5_shr5_i_i142;

assign local_bb5_shr5_i_i142 = ((local_bb5_or4_i_i141 & 32'h7FFFFFF) >> 32'h8);

// This section implements an unregistered operation.
// 
wire local_bb5_or6_i_i143_stall_local;
wire [31:0] local_bb5_or6_i_i143;

assign local_bb5_or6_i_i143 = ((local_bb5_shr5_i_i142 & 32'h7FFFF) | (local_bb5_or4_i_i141 & 32'h7FFFFFF));

// This section implements an unregistered operation.
// 
wire local_bb5_shr7_i_i144_stall_local;
wire [31:0] local_bb5_shr7_i_i144;

assign local_bb5_shr7_i_i144 = ((local_bb5_or6_i_i143 & 32'h7FFFFFF) >> 32'h10);

// This section implements an unregistered operation.
// 
wire local_bb5_or8_i_i145_stall_local;
wire [31:0] local_bb5_or8_i_i145;

assign local_bb5_or8_i_i145 = ((local_bb5_shr7_i_i144 & 32'h7FF) | (local_bb5_or6_i_i143 & 32'h7FFFFFF));

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i146_stall_local;
wire [31:0] local_bb5_and_i_i146;

assign local_bb5_and_i_i146 = ((local_bb5_or8_i_i145 & 32'h7FFFFFF) ^ 32'h7FFFFFF);

// This section implements an unregistered operation.
// 
wire local_bb5__and_i_i146_valid_out;
wire local_bb5__and_i_i146_stall_in;
wire local_bb5__and_i_i146_inputs_ready;
wire local_bb5__and_i_i146_stall_local;
wire [31:0] local_bb5__and_i_i146;

thirtysix_six_comp local_bb5__and_i_i146_popcnt_instance (
	.data((local_bb5_and_i_i146 & 32'h1FFFFFFF)),
	.sum(local_bb5__and_i_i146)
);


assign local_bb5__and_i_i146_inputs_ready = rnode_180to181_bb5_add178_i131_0_valid_out_3_NO_SHIFT_REG;
assign local_bb5__and_i_i146_valid_out = 1'b1;
assign rnode_180to181_bb5_add178_i131_0_stall_in_3_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_181to182_bb5__and_i_i146_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_181to182_bb5__and_i_i146_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_181to182_bb5__and_i_i146_0_NO_SHIFT_REG;
 logic rnode_181to182_bb5__and_i_i146_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_181to182_bb5__and_i_i146_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_181to182_bb5__and_i_i146_1_NO_SHIFT_REG;
 logic rnode_181to182_bb5__and_i_i146_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_181to182_bb5__and_i_i146_0_stall_in_2_NO_SHIFT_REG;
 logic [31:0] rnode_181to182_bb5__and_i_i146_2_NO_SHIFT_REG;
 logic rnode_181to182_bb5__and_i_i146_0_reg_182_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_181to182_bb5__and_i_i146_0_reg_182_NO_SHIFT_REG;
 logic rnode_181to182_bb5__and_i_i146_0_valid_out_0_reg_182_NO_SHIFT_REG;
 logic rnode_181to182_bb5__and_i_i146_0_stall_in_0_reg_182_NO_SHIFT_REG;
 logic rnode_181to182_bb5__and_i_i146_0_stall_out_reg_182_NO_SHIFT_REG;

acl_data_fifo rnode_181to182_bb5__and_i_i146_0_reg_182_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_181to182_bb5__and_i_i146_0_reg_182_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_181to182_bb5__and_i_i146_0_stall_in_0_reg_182_NO_SHIFT_REG),
	.valid_out(rnode_181to182_bb5__and_i_i146_0_valid_out_0_reg_182_NO_SHIFT_REG),
	.stall_out(rnode_181to182_bb5__and_i_i146_0_stall_out_reg_182_NO_SHIFT_REG),
	.data_in((local_bb5__and_i_i146 & 32'h3F)),
	.data_out(rnode_181to182_bb5__and_i_i146_0_reg_182_NO_SHIFT_REG)
);

defparam rnode_181to182_bb5__and_i_i146_0_reg_182_fifo.DEPTH = 1;
defparam rnode_181to182_bb5__and_i_i146_0_reg_182_fifo.DATA_WIDTH = 32;
defparam rnode_181to182_bb5__and_i_i146_0_reg_182_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_181to182_bb5__and_i_i146_0_reg_182_fifo.IMPL = "shift_reg";

assign rnode_181to182_bb5__and_i_i146_0_reg_182_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5__and_i_i146_stall_in = 1'b0;
assign rnode_181to182_bb5__and_i_i146_0_stall_in_0_reg_182_NO_SHIFT_REG = 1'b0;
assign rnode_181to182_bb5__and_i_i146_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_181to182_bb5__and_i_i146_0_NO_SHIFT_REG = rnode_181to182_bb5__and_i_i146_0_reg_182_NO_SHIFT_REG;
assign rnode_181to182_bb5__and_i_i146_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_181to182_bb5__and_i_i146_1_NO_SHIFT_REG = rnode_181to182_bb5__and_i_i146_0_reg_182_NO_SHIFT_REG;
assign rnode_181to182_bb5__and_i_i146_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_181to182_bb5__and_i_i146_2_NO_SHIFT_REG = rnode_181to182_bb5__and_i_i146_0_reg_182_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_and9_i_i147_stall_local;
wire [31:0] local_bb5_and9_i_i147;

assign local_bb5_and9_i_i147 = ((rnode_181to182_bb5__and_i_i146_0_NO_SHIFT_REG & 32'h3F) & 32'h1F);

// This section implements an unregistered operation.
// 
wire local_bb5_and189_i148_stall_local;
wire [31:0] local_bb5_and189_i148;

assign local_bb5_and189_i148 = ((rnode_181to182_bb5__and_i_i146_1_NO_SHIFT_REG & 32'h3F) & 32'h18);

// This section implements an unregistered operation.
// 
wire local_bb5_and192_i150_stall_local;
wire [31:0] local_bb5_and192_i150;

assign local_bb5_and192_i150 = ((rnode_181to182_bb5__and_i_i146_2_NO_SHIFT_REG & 32'h3F) & 32'h7);

// This section implements an unregistered operation.
// 
wire local_bb5_sub219_i167_stall_local;
wire [31:0] local_bb5_sub219_i167;

assign local_bb5_sub219_i167 = (32'h0 - (local_bb5_and9_i_i147 & 32'h1F));

// This section implements an unregistered operation.
// 
wire local_bb5_shl190_i149_stall_local;
wire [31:0] local_bb5_shl190_i149;

assign local_bb5_shl190_i149 = ((rnode_181to182_bb5_and179_i132_0_NO_SHIFT_REG & 32'hFFFFFFF) << (local_bb5_and189_i148 & 32'h18));

// This section implements an unregistered operation.
// 
wire local_bb5_cond224_i168_stall_local;
wire [31:0] local_bb5_cond224_i168;

assign local_bb5_cond224_i168 = (rnode_181to182_bb5_cmp37_i46_2_NO_SHIFT_REG ? local_bb5_sub219_i167 : (local_bb5__27_i159 & 32'h1));

// This section implements an unregistered operation.
// 
wire local_bb5_and191_i151_stall_local;
wire [31:0] local_bb5_and191_i151;

assign local_bb5_and191_i151 = (local_bb5_shl190_i149 & 32'h7FFFFFF);

// This section implements an unregistered operation.
// 
wire local_bb5_add225_i169_stall_local;
wire [31:0] local_bb5_add225_i169;

assign local_bb5_add225_i169 = (local_bb5_cond224_i168 + (rnode_181to182_bb5_and17_i35_0_NO_SHIFT_REG & 32'hFF));

// This section implements an unregistered operation.
// 
wire local_bb5_fold_i172_stall_local;
wire [31:0] local_bb5_fold_i172;

assign local_bb5_fold_i172 = (local_bb5_cond224_i168 + (rnode_181to182_bb5_shr16_i34_0_NO_SHIFT_REG & 32'h1FF));

// This section implements an unregistered operation.
// 
wire local_bb5_shl193_i152_stall_local;
wire [31:0] local_bb5_shl193_i152;

assign local_bb5_shl193_i152 = ((local_bb5_and191_i151 & 32'h7FFFFFF) << (local_bb5_and192_i150 & 32'h7));

// This section implements an unregistered operation.
// 
wire local_bb5_and194_i153_stall_local;
wire [31:0] local_bb5_and194_i153;

assign local_bb5_and194_i153 = (local_bb5_shl193_i152 & 32'h7FFFFFF);

// This section implements an unregistered operation.
// 
wire local_bb5_fold_i172_valid_out;
wire local_bb5_fold_i172_stall_in;
wire local_bb5_add225_i169_valid_out;
wire local_bb5_add225_i169_stall_in;
wire local_bb5_not_cmp37_i157_valid_out_1;
wire local_bb5_not_cmp37_i157_stall_in_1;
wire local_bb5__30_i161_valid_out;
wire local_bb5__30_i161_stall_in;
wire local_bb5__30_i161_inputs_ready;
wire local_bb5__30_i161_stall_local;
wire [31:0] local_bb5__30_i161;

assign local_bb5__30_i161_inputs_ready = (rnode_181to182_bb5_shr16_i34_0_valid_out_NO_SHIFT_REG & rnode_181to182_bb5_cmp37_i46_0_valid_out_2_NO_SHIFT_REG & rnode_181to182_bb5_and17_i35_0_valid_out_NO_SHIFT_REG & rnode_181to182_bb5_cmp37_i46_0_valid_out_0_NO_SHIFT_REG & rnode_181to182_bb5_and179_i132_0_valid_out_2_NO_SHIFT_REG & rnode_181to182_bb5_cmp37_i46_0_valid_out_1_NO_SHIFT_REG & rnode_181to182_bb5_and181_i133_0_valid_out_NO_SHIFT_REG & rnode_181to182_bb5_and179_i132_0_valid_out_1_NO_SHIFT_REG & rnode_181to182_bb5_and184_i134_0_valid_out_NO_SHIFT_REG & rnode_181to182_bb5_and179_i132_0_valid_out_0_NO_SHIFT_REG & rnode_181to182_bb5__and_i_i146_0_valid_out_1_NO_SHIFT_REG & rnode_181to182_bb5__and_i_i146_0_valid_out_2_NO_SHIFT_REG & rnode_181to182_bb5__and_i_i146_0_valid_out_0_NO_SHIFT_REG);
assign local_bb5__30_i161 = (rnode_181to182_bb5_cmp37_i46_1_NO_SHIFT_REG ? (local_bb5_and194_i153 & 32'h7FFFFFF) : (local_bb5__29_i160 & 32'hFFFFFFF));
assign local_bb5_fold_i172_valid_out = 1'b1;
assign local_bb5_add225_i169_valid_out = 1'b1;
assign local_bb5_not_cmp37_i157_valid_out_1 = 1'b1;
assign local_bb5__30_i161_valid_out = 1'b1;
assign rnode_181to182_bb5_shr16_i34_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_181to182_bb5_cmp37_i46_0_stall_in_2_NO_SHIFT_REG = 1'b0;
assign rnode_181to182_bb5_and17_i35_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_181to182_bb5_cmp37_i46_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_181to182_bb5_and179_i132_0_stall_in_2_NO_SHIFT_REG = 1'b0;
assign rnode_181to182_bb5_cmp37_i46_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_181to182_bb5_and181_i133_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_181to182_bb5_and179_i132_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_181to182_bb5_and184_i134_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_181to182_bb5_and179_i132_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_181to182_bb5__and_i_i146_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_181to182_bb5__and_i_i146_0_stall_in_2_NO_SHIFT_REG = 1'b0;
assign rnode_181to182_bb5__and_i_i146_0_stall_in_0_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_182to183_bb5_fold_i172_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_182to183_bb5_fold_i172_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_182to183_bb5_fold_i172_0_NO_SHIFT_REG;
 logic rnode_182to183_bb5_fold_i172_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_182to183_bb5_fold_i172_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_182to183_bb5_fold_i172_1_NO_SHIFT_REG;
 logic rnode_182to183_bb5_fold_i172_0_reg_183_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_182to183_bb5_fold_i172_0_reg_183_NO_SHIFT_REG;
 logic rnode_182to183_bb5_fold_i172_0_valid_out_0_reg_183_NO_SHIFT_REG;
 logic rnode_182to183_bb5_fold_i172_0_stall_in_0_reg_183_NO_SHIFT_REG;
 logic rnode_182to183_bb5_fold_i172_0_stall_out_reg_183_NO_SHIFT_REG;

acl_data_fifo rnode_182to183_bb5_fold_i172_0_reg_183_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_182to183_bb5_fold_i172_0_reg_183_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_182to183_bb5_fold_i172_0_stall_in_0_reg_183_NO_SHIFT_REG),
	.valid_out(rnode_182to183_bb5_fold_i172_0_valid_out_0_reg_183_NO_SHIFT_REG),
	.stall_out(rnode_182to183_bb5_fold_i172_0_stall_out_reg_183_NO_SHIFT_REG),
	.data_in(local_bb5_fold_i172),
	.data_out(rnode_182to183_bb5_fold_i172_0_reg_183_NO_SHIFT_REG)
);

defparam rnode_182to183_bb5_fold_i172_0_reg_183_fifo.DEPTH = 1;
defparam rnode_182to183_bb5_fold_i172_0_reg_183_fifo.DATA_WIDTH = 32;
defparam rnode_182to183_bb5_fold_i172_0_reg_183_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_182to183_bb5_fold_i172_0_reg_183_fifo.IMPL = "shift_reg";

assign rnode_182to183_bb5_fold_i172_0_reg_183_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_fold_i172_stall_in = 1'b0;
assign rnode_182to183_bb5_fold_i172_0_stall_in_0_reg_183_NO_SHIFT_REG = 1'b0;
assign rnode_182to183_bb5_fold_i172_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_182to183_bb5_fold_i172_0_NO_SHIFT_REG = rnode_182to183_bb5_fold_i172_0_reg_183_NO_SHIFT_REG;
assign rnode_182to183_bb5_fold_i172_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_182to183_bb5_fold_i172_1_NO_SHIFT_REG = rnode_182to183_bb5_fold_i172_0_reg_183_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_182to183_bb5_add225_i169_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_182to183_bb5_add225_i169_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_182to183_bb5_add225_i169_0_NO_SHIFT_REG;
 logic rnode_182to183_bb5_add225_i169_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_182to183_bb5_add225_i169_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_182to183_bb5_add225_i169_1_NO_SHIFT_REG;
 logic rnode_182to183_bb5_add225_i169_0_reg_183_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_182to183_bb5_add225_i169_0_reg_183_NO_SHIFT_REG;
 logic rnode_182to183_bb5_add225_i169_0_valid_out_0_reg_183_NO_SHIFT_REG;
 logic rnode_182to183_bb5_add225_i169_0_stall_in_0_reg_183_NO_SHIFT_REG;
 logic rnode_182to183_bb5_add225_i169_0_stall_out_reg_183_NO_SHIFT_REG;

acl_data_fifo rnode_182to183_bb5_add225_i169_0_reg_183_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_182to183_bb5_add225_i169_0_reg_183_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_182to183_bb5_add225_i169_0_stall_in_0_reg_183_NO_SHIFT_REG),
	.valid_out(rnode_182to183_bb5_add225_i169_0_valid_out_0_reg_183_NO_SHIFT_REG),
	.stall_out(rnode_182to183_bb5_add225_i169_0_stall_out_reg_183_NO_SHIFT_REG),
	.data_in(local_bb5_add225_i169),
	.data_out(rnode_182to183_bb5_add225_i169_0_reg_183_NO_SHIFT_REG)
);

defparam rnode_182to183_bb5_add225_i169_0_reg_183_fifo.DEPTH = 1;
defparam rnode_182to183_bb5_add225_i169_0_reg_183_fifo.DATA_WIDTH = 32;
defparam rnode_182to183_bb5_add225_i169_0_reg_183_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_182to183_bb5_add225_i169_0_reg_183_fifo.IMPL = "shift_reg";

assign rnode_182to183_bb5_add225_i169_0_reg_183_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_add225_i169_stall_in = 1'b0;
assign rnode_182to183_bb5_add225_i169_0_stall_in_0_reg_183_NO_SHIFT_REG = 1'b0;
assign rnode_182to183_bb5_add225_i169_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_182to183_bb5_add225_i169_0_NO_SHIFT_REG = rnode_182to183_bb5_add225_i169_0_reg_183_NO_SHIFT_REG;
assign rnode_182to183_bb5_add225_i169_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_182to183_bb5_add225_i169_1_NO_SHIFT_REG = rnode_182to183_bb5_add225_i169_0_reg_183_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_182to183_bb5_not_cmp37_i157_0_valid_out_NO_SHIFT_REG;
 logic rnode_182to183_bb5_not_cmp37_i157_0_stall_in_NO_SHIFT_REG;
 logic rnode_182to183_bb5_not_cmp37_i157_0_NO_SHIFT_REG;
 logic rnode_182to183_bb5_not_cmp37_i157_0_reg_183_inputs_ready_NO_SHIFT_REG;
 logic rnode_182to183_bb5_not_cmp37_i157_0_reg_183_NO_SHIFT_REG;
 logic rnode_182to183_bb5_not_cmp37_i157_0_valid_out_reg_183_NO_SHIFT_REG;
 logic rnode_182to183_bb5_not_cmp37_i157_0_stall_in_reg_183_NO_SHIFT_REG;
 logic rnode_182to183_bb5_not_cmp37_i157_0_stall_out_reg_183_NO_SHIFT_REG;

acl_data_fifo rnode_182to183_bb5_not_cmp37_i157_0_reg_183_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_182to183_bb5_not_cmp37_i157_0_reg_183_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_182to183_bb5_not_cmp37_i157_0_stall_in_reg_183_NO_SHIFT_REG),
	.valid_out(rnode_182to183_bb5_not_cmp37_i157_0_valid_out_reg_183_NO_SHIFT_REG),
	.stall_out(rnode_182to183_bb5_not_cmp37_i157_0_stall_out_reg_183_NO_SHIFT_REG),
	.data_in(local_bb5_not_cmp37_i157),
	.data_out(rnode_182to183_bb5_not_cmp37_i157_0_reg_183_NO_SHIFT_REG)
);

defparam rnode_182to183_bb5_not_cmp37_i157_0_reg_183_fifo.DEPTH = 1;
defparam rnode_182to183_bb5_not_cmp37_i157_0_reg_183_fifo.DATA_WIDTH = 1;
defparam rnode_182to183_bb5_not_cmp37_i157_0_reg_183_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_182to183_bb5_not_cmp37_i157_0_reg_183_fifo.IMPL = "shift_reg";

assign rnode_182to183_bb5_not_cmp37_i157_0_reg_183_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_not_cmp37_i157_stall_in_1 = 1'b0;
assign rnode_182to183_bb5_not_cmp37_i157_0_NO_SHIFT_REG = rnode_182to183_bb5_not_cmp37_i157_0_reg_183_NO_SHIFT_REG;
assign rnode_182to183_bb5_not_cmp37_i157_0_stall_in_reg_183_NO_SHIFT_REG = 1'b0;
assign rnode_182to183_bb5_not_cmp37_i157_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_182to183_bb5__30_i161_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_182to183_bb5__30_i161_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_182to183_bb5__30_i161_0_NO_SHIFT_REG;
 logic rnode_182to183_bb5__30_i161_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_182to183_bb5__30_i161_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_182to183_bb5__30_i161_1_NO_SHIFT_REG;
 logic rnode_182to183_bb5__30_i161_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_182to183_bb5__30_i161_0_stall_in_2_NO_SHIFT_REG;
 logic [31:0] rnode_182to183_bb5__30_i161_2_NO_SHIFT_REG;
 logic rnode_182to183_bb5__30_i161_0_reg_183_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_182to183_bb5__30_i161_0_reg_183_NO_SHIFT_REG;
 logic rnode_182to183_bb5__30_i161_0_valid_out_0_reg_183_NO_SHIFT_REG;
 logic rnode_182to183_bb5__30_i161_0_stall_in_0_reg_183_NO_SHIFT_REG;
 logic rnode_182to183_bb5__30_i161_0_stall_out_reg_183_NO_SHIFT_REG;

acl_data_fifo rnode_182to183_bb5__30_i161_0_reg_183_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_182to183_bb5__30_i161_0_reg_183_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_182to183_bb5__30_i161_0_stall_in_0_reg_183_NO_SHIFT_REG),
	.valid_out(rnode_182to183_bb5__30_i161_0_valid_out_0_reg_183_NO_SHIFT_REG),
	.stall_out(rnode_182to183_bb5__30_i161_0_stall_out_reg_183_NO_SHIFT_REG),
	.data_in((local_bb5__30_i161 & 32'hFFFFFFF)),
	.data_out(rnode_182to183_bb5__30_i161_0_reg_183_NO_SHIFT_REG)
);

defparam rnode_182to183_bb5__30_i161_0_reg_183_fifo.DEPTH = 1;
defparam rnode_182to183_bb5__30_i161_0_reg_183_fifo.DATA_WIDTH = 32;
defparam rnode_182to183_bb5__30_i161_0_reg_183_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_182to183_bb5__30_i161_0_reg_183_fifo.IMPL = "shift_reg";

assign rnode_182to183_bb5__30_i161_0_reg_183_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5__30_i161_stall_in = 1'b0;
assign rnode_182to183_bb5__30_i161_0_stall_in_0_reg_183_NO_SHIFT_REG = 1'b0;
assign rnode_182to183_bb5__30_i161_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_182to183_bb5__30_i161_0_NO_SHIFT_REG = rnode_182to183_bb5__30_i161_0_reg_183_NO_SHIFT_REG;
assign rnode_182to183_bb5__30_i161_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_182to183_bb5__30_i161_1_NO_SHIFT_REG = rnode_182to183_bb5__30_i161_0_reg_183_NO_SHIFT_REG;
assign rnode_182to183_bb5__30_i161_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_182to183_bb5__30_i161_2_NO_SHIFT_REG = rnode_182to183_bb5__30_i161_0_reg_183_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_and230_i173_stall_local;
wire [31:0] local_bb5_and230_i173;

assign local_bb5_and230_i173 = (rnode_182to183_bb5_fold_i172_0_NO_SHIFT_REG & 32'hFF);

// This section implements an unregistered operation.
// 
wire local_bb5_and227_i170_stall_local;
wire [31:0] local_bb5_and227_i170;

assign local_bb5_and227_i170 = (rnode_182to183_bb5_add225_i169_0_NO_SHIFT_REG & 32'h100);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp236_i177_stall_local;
wire local_bb5_cmp236_i177;

assign local_bb5_cmp236_i177 = ($signed(rnode_182to183_bb5_add225_i169_1_NO_SHIFT_REG) > $signed(32'hFE));

// This section implements an unregistered operation.
// 
wire local_bb5_and209_i162_stall_local;
wire [31:0] local_bb5_and209_i162;

assign local_bb5_and209_i162 = ((rnode_182to183_bb5__30_i161_0_NO_SHIFT_REG & 32'hFFFFFFF) & 32'h7FFFFFF);

// This section implements an unregistered operation.
// 
wire local_bb5_and245_i180_stall_local;
wire [31:0] local_bb5_and245_i180;

assign local_bb5_and245_i180 = ((rnode_182to183_bb5__30_i161_1_NO_SHIFT_REG & 32'hFFFFFFF) & 32'h7);

// This section implements an unregistered operation.
// 
wire local_bb5_or250_vec_0_i181_stall_local;
wire [95:0] local_bb5_or250_vec_0_i181;

assign local_bb5_or250_vec_0_i181[31:0] = (rnode_182to183_bb5__30_i161_2_NO_SHIFT_REG & 32'hFFFFFFF);
assign local_bb5_or250_vec_0_i181[63:32] = 32'bx;
assign local_bb5_or250_vec_0_i181[95:64] = 32'bx;

// This section implements an unregistered operation.
// 
wire local_bb5_cmp231_i174_stall_local;
wire local_bb5_cmp231_i174;

assign local_bb5_cmp231_i174 = ((local_bb5_and230_i173 & 32'hFF) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_tobool228_i171_stall_local;
wire local_bb5_tobool228_i171;

assign local_bb5_tobool228_i171 = ((local_bb5_and227_i170 & 32'h100) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp210_i163_stall_local;
wire local_bb5_cmp210_i163;

assign local_bb5_cmp210_i163 = ((local_bb5_and209_i162 & 32'h7FFFFFF) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp264_i195_stall_local;
wire local_bb5_cmp264_i195;

assign local_bb5_cmp264_i195 = ((local_bb5_and245_i180 & 32'h7) > 32'h4);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp264_i195_valid_out;
wire local_bb5_cmp264_i195_stall_in;
wire local_bb5_cmp266_i196_valid_out;
wire local_bb5_cmp266_i196_stall_in;
wire local_bb5_cmp266_i196_inputs_ready;
wire local_bb5_cmp266_i196_stall_local;
wire local_bb5_cmp266_i196;

assign local_bb5_cmp266_i196_inputs_ready = rnode_182to183_bb5__30_i161_0_valid_out_1_NO_SHIFT_REG;
assign local_bb5_cmp266_i196 = ((local_bb5_and245_i180 & 32'h7) == 32'h4);
assign local_bb5_cmp264_i195_valid_out = 1'b1;
assign local_bb5_cmp266_i196_valid_out = 1'b1;
assign rnode_182to183_bb5__30_i161_0_stall_in_1_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_or250_vec_1_i182_stall_local;
wire [95:0] local_bb5_or250_vec_1_i182;

assign local_bb5_or250_vec_1_i182[31:0] = local_bb5_or250_vec_0_i181[31:0];
assign local_bb5_or250_vec_1_i182[63:32] = rnode_182to183_bb5_fold_i172_1_NO_SHIFT_REG;
assign local_bb5_or250_vec_1_i182[95:64] = local_bb5_or250_vec_0_i181[95:64];

// This section implements an unregistered operation.
// 
wire local_bb5_or_cond_i175_stall_local;
wire local_bb5_or_cond_i175;

assign local_bb5_or_cond_i175 = (local_bb5_tobool228_i171 | local_bb5_cmp231_i174);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp210_not_i164_stall_local;
wire local_bb5_cmp210_not_i164;

assign local_bb5_cmp210_not_i164 = (local_bb5_cmp210_i163 ^ 1'b1);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_183to184_bb5_cmp264_i195_0_valid_out_NO_SHIFT_REG;
 logic rnode_183to184_bb5_cmp264_i195_0_stall_in_NO_SHIFT_REG;
 logic rnode_183to184_bb5_cmp264_i195_0_NO_SHIFT_REG;
 logic rnode_183to184_bb5_cmp264_i195_0_reg_184_inputs_ready_NO_SHIFT_REG;
 logic rnode_183to184_bb5_cmp264_i195_0_reg_184_NO_SHIFT_REG;
 logic rnode_183to184_bb5_cmp264_i195_0_valid_out_reg_184_NO_SHIFT_REG;
 logic rnode_183to184_bb5_cmp264_i195_0_stall_in_reg_184_NO_SHIFT_REG;
 logic rnode_183to184_bb5_cmp264_i195_0_stall_out_reg_184_NO_SHIFT_REG;

acl_data_fifo rnode_183to184_bb5_cmp264_i195_0_reg_184_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_183to184_bb5_cmp264_i195_0_reg_184_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_183to184_bb5_cmp264_i195_0_stall_in_reg_184_NO_SHIFT_REG),
	.valid_out(rnode_183to184_bb5_cmp264_i195_0_valid_out_reg_184_NO_SHIFT_REG),
	.stall_out(rnode_183to184_bb5_cmp264_i195_0_stall_out_reg_184_NO_SHIFT_REG),
	.data_in(local_bb5_cmp264_i195),
	.data_out(rnode_183to184_bb5_cmp264_i195_0_reg_184_NO_SHIFT_REG)
);

defparam rnode_183to184_bb5_cmp264_i195_0_reg_184_fifo.DEPTH = 1;
defparam rnode_183to184_bb5_cmp264_i195_0_reg_184_fifo.DATA_WIDTH = 1;
defparam rnode_183to184_bb5_cmp264_i195_0_reg_184_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_183to184_bb5_cmp264_i195_0_reg_184_fifo.IMPL = "shift_reg";

assign rnode_183to184_bb5_cmp264_i195_0_reg_184_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp264_i195_stall_in = 1'b0;
assign rnode_183to184_bb5_cmp264_i195_0_NO_SHIFT_REG = rnode_183to184_bb5_cmp264_i195_0_reg_184_NO_SHIFT_REG;
assign rnode_183to184_bb5_cmp264_i195_0_stall_in_reg_184_NO_SHIFT_REG = 1'b0;
assign rnode_183to184_bb5_cmp264_i195_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_183to184_bb5_cmp266_i196_0_valid_out_NO_SHIFT_REG;
 logic rnode_183to184_bb5_cmp266_i196_0_stall_in_NO_SHIFT_REG;
 logic rnode_183to184_bb5_cmp266_i196_0_NO_SHIFT_REG;
 logic rnode_183to184_bb5_cmp266_i196_0_reg_184_inputs_ready_NO_SHIFT_REG;
 logic rnode_183to184_bb5_cmp266_i196_0_reg_184_NO_SHIFT_REG;
 logic rnode_183to184_bb5_cmp266_i196_0_valid_out_reg_184_NO_SHIFT_REG;
 logic rnode_183to184_bb5_cmp266_i196_0_stall_in_reg_184_NO_SHIFT_REG;
 logic rnode_183to184_bb5_cmp266_i196_0_stall_out_reg_184_NO_SHIFT_REG;

acl_data_fifo rnode_183to184_bb5_cmp266_i196_0_reg_184_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_183to184_bb5_cmp266_i196_0_reg_184_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_183to184_bb5_cmp266_i196_0_stall_in_reg_184_NO_SHIFT_REG),
	.valid_out(rnode_183to184_bb5_cmp266_i196_0_valid_out_reg_184_NO_SHIFT_REG),
	.stall_out(rnode_183to184_bb5_cmp266_i196_0_stall_out_reg_184_NO_SHIFT_REG),
	.data_in(local_bb5_cmp266_i196),
	.data_out(rnode_183to184_bb5_cmp266_i196_0_reg_184_NO_SHIFT_REG)
);

defparam rnode_183to184_bb5_cmp266_i196_0_reg_184_fifo.DEPTH = 1;
defparam rnode_183to184_bb5_cmp266_i196_0_reg_184_fifo.DATA_WIDTH = 1;
defparam rnode_183to184_bb5_cmp266_i196_0_reg_184_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_183to184_bb5_cmp266_i196_0_reg_184_fifo.IMPL = "shift_reg";

assign rnode_183to184_bb5_cmp266_i196_0_reg_184_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp266_i196_stall_in = 1'b0;
assign rnode_183to184_bb5_cmp266_i196_0_NO_SHIFT_REG = rnode_183to184_bb5_cmp266_i196_0_reg_184_NO_SHIFT_REG;
assign rnode_183to184_bb5_cmp266_i196_0_stall_in_reg_184_NO_SHIFT_REG = 1'b0;
assign rnode_183to184_bb5_cmp266_i196_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5__31_i176_stall_local;
wire local_bb5__31_i176;

assign local_bb5__31_i176 = (local_bb5_or_cond_i175 | local_bb5_cmp210_i163);

// This section implements an unregistered operation.
// 
wire local_bb5_brmerge7_i165_stall_local;
wire local_bb5_brmerge7_i165;

assign local_bb5_brmerge7_i165 = (local_bb5_cmp210_not_i164 | rnode_182to183_bb5_not_cmp37_i157_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb5_lnot239__i178_stall_local;
wire local_bb5_lnot239__i178;

assign local_bb5_lnot239__i178 = (local_bb5_cmp236_i177 & local_bb5_cmp210_not_i164);

// This section implements an unregistered operation.
// 
wire local_bb5_conv267_i197_stall_local;
wire [31:0] local_bb5_conv267_i197;

assign local_bb5_conv267_i197[31:1] = 31'h0;
assign local_bb5_conv267_i197[0] = rnode_183to184_bb5_cmp266_i196_0_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_resultSign_0_i166_stall_local;
wire [31:0] local_bb5_resultSign_0_i166;

assign local_bb5_resultSign_0_i166 = (local_bb5_brmerge7_i165 ? (rnode_182to183_bb5_and35_i44_0_NO_SHIFT_REG & 32'h80000000) : 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_or242_i179_stall_local;
wire local_bb5_or242_i179;

assign local_bb5_or242_i179 = (rnode_182to183_bb5_var__u24_0_NO_SHIFT_REG | local_bb5_lnot239__i178);

// This section implements an unregistered operation.
// 
wire local_bb5_or250_vec_2_i183_stall_local;
wire [95:0] local_bb5_or250_vec_2_i183;

assign local_bb5_or250_vec_2_i183[31:0] = local_bb5_or250_vec_1_i182[31:0];
assign local_bb5_or250_vec_2_i183[63:32] = local_bb5_or250_vec_1_i182[63:32];
assign local_bb5_or250_vec_2_i183[95:64] = (local_bb5_resultSign_0_i166 & 32'h80000000);

// This section implements an unregistered operation.
// 
wire local_bb5_or250_bitvec_i184_stall_local;
wire [95:0] local_bb5_or250_bitvec_i184;

assign local_bb5_or250_bitvec_i184 = local_bb5_or250_vec_2_i183;

// This section implements an unregistered operation.
// 
wire local_bb5_or250_shuffle_i185_valid_out;
wire local_bb5_or250_shuffle_i185_stall_in;
wire local_bb5__31_i176_valid_out;
wire local_bb5__31_i176_stall_in;
wire local_bb5_or242_i179_valid_out;
wire local_bb5_or242_i179_stall_in;
wire local_bb5_or250_shuffle_i185_inputs_ready;
wire local_bb5_or250_shuffle_i185_stall_local;
wire [31:0] local_bb5_or250_shuffle_i185;

assign local_bb5_or250_shuffle_i185_inputs_ready = (rnode_182to183_bb5_and35_i44_0_valid_out_NO_SHIFT_REG & rnode_182to183_bb5_fold_i172_0_valid_out_1_NO_SHIFT_REG & rnode_182to183_bb5_not_cmp37_i157_0_valid_out_NO_SHIFT_REG & rnode_182to183_bb5__30_i161_0_valid_out_2_NO_SHIFT_REG & rnode_182to183_bb5_fold_i172_0_valid_out_0_NO_SHIFT_REG & rnode_182to183_bb5_add225_i169_0_valid_out_0_NO_SHIFT_REG & rnode_182to183_bb5__30_i161_0_valid_out_0_NO_SHIFT_REG & rnode_182to183_bb5_var__u24_0_valid_out_NO_SHIFT_REG & rnode_182to183_bb5_add225_i169_0_valid_out_1_NO_SHIFT_REG);
assign local_bb5_or250_shuffle_i185[0] = local_bb5_or250_bitvec_i184[3];
assign local_bb5_or250_shuffle_i185[1] = local_bb5_or250_bitvec_i184[4];
assign local_bb5_or250_shuffle_i185[2] = local_bb5_or250_bitvec_i184[5];
assign local_bb5_or250_shuffle_i185[3] = local_bb5_or250_bitvec_i184[6];
assign local_bb5_or250_shuffle_i185[4] = local_bb5_or250_bitvec_i184[7];
assign local_bb5_or250_shuffle_i185[5] = local_bb5_or250_bitvec_i184[8];
assign local_bb5_or250_shuffle_i185[6] = local_bb5_or250_bitvec_i184[9];
assign local_bb5_or250_shuffle_i185[7] = local_bb5_or250_bitvec_i184[10];
assign local_bb5_or250_shuffle_i185[8] = local_bb5_or250_bitvec_i184[11];
assign local_bb5_or250_shuffle_i185[9] = local_bb5_or250_bitvec_i184[12];
assign local_bb5_or250_shuffle_i185[10] = local_bb5_or250_bitvec_i184[13];
assign local_bb5_or250_shuffle_i185[11] = local_bb5_or250_bitvec_i184[14];
assign local_bb5_or250_shuffle_i185[12] = local_bb5_or250_bitvec_i184[15];
assign local_bb5_or250_shuffle_i185[13] = local_bb5_or250_bitvec_i184[16];
assign local_bb5_or250_shuffle_i185[14] = local_bb5_or250_bitvec_i184[17];
assign local_bb5_or250_shuffle_i185[15] = local_bb5_or250_bitvec_i184[18];
assign local_bb5_or250_shuffle_i185[16] = local_bb5_or250_bitvec_i184[19];
assign local_bb5_or250_shuffle_i185[17] = local_bb5_or250_bitvec_i184[20];
assign local_bb5_or250_shuffle_i185[18] = local_bb5_or250_bitvec_i184[21];
assign local_bb5_or250_shuffle_i185[19] = local_bb5_or250_bitvec_i184[22];
assign local_bb5_or250_shuffle_i185[20] = local_bb5_or250_bitvec_i184[23];
assign local_bb5_or250_shuffle_i185[21] = local_bb5_or250_bitvec_i184[24];
assign local_bb5_or250_shuffle_i185[22] = local_bb5_or250_bitvec_i184[25];
assign local_bb5_or250_shuffle_i185[23] = local_bb5_or250_bitvec_i184[32];
assign local_bb5_or250_shuffle_i185[24] = local_bb5_or250_bitvec_i184[33];
assign local_bb5_or250_shuffle_i185[25] = local_bb5_or250_bitvec_i184[34];
assign local_bb5_or250_shuffle_i185[26] = local_bb5_or250_bitvec_i184[35];
assign local_bb5_or250_shuffle_i185[27] = local_bb5_or250_bitvec_i184[36];
assign local_bb5_or250_shuffle_i185[28] = local_bb5_or250_bitvec_i184[37];
assign local_bb5_or250_shuffle_i185[29] = local_bb5_or250_bitvec_i184[38];
assign local_bb5_or250_shuffle_i185[30] = local_bb5_or250_bitvec_i184[39];
assign local_bb5_or250_shuffle_i185[31] = local_bb5_or250_bitvec_i184[95];
assign local_bb5_or250_shuffle_i185_valid_out = 1'b1;
assign local_bb5__31_i176_valid_out = 1'b1;
assign local_bb5_or242_i179_valid_out = 1'b1;
assign rnode_182to183_bb5_and35_i44_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_182to183_bb5_fold_i172_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_182to183_bb5_not_cmp37_i157_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_182to183_bb5__30_i161_0_stall_in_2_NO_SHIFT_REG = 1'b0;
assign rnode_182to183_bb5_fold_i172_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_182to183_bb5_add225_i169_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_182to183_bb5__30_i161_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_182to183_bb5_var__u24_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_182to183_bb5_add225_i169_0_stall_in_1_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_183to184_bb5_or250_shuffle_i185_0_valid_out_NO_SHIFT_REG;
 logic rnode_183to184_bb5_or250_shuffle_i185_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_183to184_bb5_or250_shuffle_i185_0_NO_SHIFT_REG;
 logic rnode_183to184_bb5_or250_shuffle_i185_0_reg_184_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_183to184_bb5_or250_shuffle_i185_0_reg_184_NO_SHIFT_REG;
 logic rnode_183to184_bb5_or250_shuffle_i185_0_valid_out_reg_184_NO_SHIFT_REG;
 logic rnode_183to184_bb5_or250_shuffle_i185_0_stall_in_reg_184_NO_SHIFT_REG;
 logic rnode_183to184_bb5_or250_shuffle_i185_0_stall_out_reg_184_NO_SHIFT_REG;

acl_data_fifo rnode_183to184_bb5_or250_shuffle_i185_0_reg_184_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_183to184_bb5_or250_shuffle_i185_0_reg_184_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_183to184_bb5_or250_shuffle_i185_0_stall_in_reg_184_NO_SHIFT_REG),
	.valid_out(rnode_183to184_bb5_or250_shuffle_i185_0_valid_out_reg_184_NO_SHIFT_REG),
	.stall_out(rnode_183to184_bb5_or250_shuffle_i185_0_stall_out_reg_184_NO_SHIFT_REG),
	.data_in(local_bb5_or250_shuffle_i185),
	.data_out(rnode_183to184_bb5_or250_shuffle_i185_0_reg_184_NO_SHIFT_REG)
);

defparam rnode_183to184_bb5_or250_shuffle_i185_0_reg_184_fifo.DEPTH = 1;
defparam rnode_183to184_bb5_or250_shuffle_i185_0_reg_184_fifo.DATA_WIDTH = 32;
defparam rnode_183to184_bb5_or250_shuffle_i185_0_reg_184_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_183to184_bb5_or250_shuffle_i185_0_reg_184_fifo.IMPL = "shift_reg";

assign rnode_183to184_bb5_or250_shuffle_i185_0_reg_184_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or250_shuffle_i185_stall_in = 1'b0;
assign rnode_183to184_bb5_or250_shuffle_i185_0_NO_SHIFT_REG = rnode_183to184_bb5_or250_shuffle_i185_0_reg_184_NO_SHIFT_REG;
assign rnode_183to184_bb5_or250_shuffle_i185_0_stall_in_reg_184_NO_SHIFT_REG = 1'b0;
assign rnode_183to184_bb5_or250_shuffle_i185_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_183to184_bb5__31_i176_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_183to184_bb5__31_i176_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_183to184_bb5__31_i176_0_NO_SHIFT_REG;
 logic rnode_183to184_bb5__31_i176_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_183to184_bb5__31_i176_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_183to184_bb5__31_i176_1_NO_SHIFT_REG;
 logic rnode_183to184_bb5__31_i176_0_reg_184_inputs_ready_NO_SHIFT_REG;
 logic rnode_183to184_bb5__31_i176_0_reg_184_NO_SHIFT_REG;
 logic rnode_183to184_bb5__31_i176_0_valid_out_0_reg_184_NO_SHIFT_REG;
 logic rnode_183to184_bb5__31_i176_0_stall_in_0_reg_184_NO_SHIFT_REG;
 logic rnode_183to184_bb5__31_i176_0_stall_out_reg_184_NO_SHIFT_REG;

acl_data_fifo rnode_183to184_bb5__31_i176_0_reg_184_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_183to184_bb5__31_i176_0_reg_184_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_183to184_bb5__31_i176_0_stall_in_0_reg_184_NO_SHIFT_REG),
	.valid_out(rnode_183to184_bb5__31_i176_0_valid_out_0_reg_184_NO_SHIFT_REG),
	.stall_out(rnode_183to184_bb5__31_i176_0_stall_out_reg_184_NO_SHIFT_REG),
	.data_in(local_bb5__31_i176),
	.data_out(rnode_183to184_bb5__31_i176_0_reg_184_NO_SHIFT_REG)
);

defparam rnode_183to184_bb5__31_i176_0_reg_184_fifo.DEPTH = 1;
defparam rnode_183to184_bb5__31_i176_0_reg_184_fifo.DATA_WIDTH = 1;
defparam rnode_183to184_bb5__31_i176_0_reg_184_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_183to184_bb5__31_i176_0_reg_184_fifo.IMPL = "shift_reg";

assign rnode_183to184_bb5__31_i176_0_reg_184_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5__31_i176_stall_in = 1'b0;
assign rnode_183to184_bb5__31_i176_0_stall_in_0_reg_184_NO_SHIFT_REG = 1'b0;
assign rnode_183to184_bb5__31_i176_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_183to184_bb5__31_i176_0_NO_SHIFT_REG = rnode_183to184_bb5__31_i176_0_reg_184_NO_SHIFT_REG;
assign rnode_183to184_bb5__31_i176_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_183to184_bb5__31_i176_1_NO_SHIFT_REG = rnode_183to184_bb5__31_i176_0_reg_184_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_183to184_bb5_or242_i179_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_183to184_bb5_or242_i179_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_183to184_bb5_or242_i179_0_NO_SHIFT_REG;
 logic rnode_183to184_bb5_or242_i179_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_183to184_bb5_or242_i179_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_183to184_bb5_or242_i179_1_NO_SHIFT_REG;
 logic rnode_183to184_bb5_or242_i179_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_183to184_bb5_or242_i179_0_stall_in_2_NO_SHIFT_REG;
 logic rnode_183to184_bb5_or242_i179_2_NO_SHIFT_REG;
 logic rnode_183to184_bb5_or242_i179_0_reg_184_inputs_ready_NO_SHIFT_REG;
 logic rnode_183to184_bb5_or242_i179_0_reg_184_NO_SHIFT_REG;
 logic rnode_183to184_bb5_or242_i179_0_valid_out_0_reg_184_NO_SHIFT_REG;
 logic rnode_183to184_bb5_or242_i179_0_stall_in_0_reg_184_NO_SHIFT_REG;
 logic rnode_183to184_bb5_or242_i179_0_stall_out_reg_184_NO_SHIFT_REG;

acl_data_fifo rnode_183to184_bb5_or242_i179_0_reg_184_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_183to184_bb5_or242_i179_0_reg_184_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_183to184_bb5_or242_i179_0_stall_in_0_reg_184_NO_SHIFT_REG),
	.valid_out(rnode_183to184_bb5_or242_i179_0_valid_out_0_reg_184_NO_SHIFT_REG),
	.stall_out(rnode_183to184_bb5_or242_i179_0_stall_out_reg_184_NO_SHIFT_REG),
	.data_in(local_bb5_or242_i179),
	.data_out(rnode_183to184_bb5_or242_i179_0_reg_184_NO_SHIFT_REG)
);

defparam rnode_183to184_bb5_or242_i179_0_reg_184_fifo.DEPTH = 1;
defparam rnode_183to184_bb5_or242_i179_0_reg_184_fifo.DATA_WIDTH = 1;
defparam rnode_183to184_bb5_or242_i179_0_reg_184_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_183to184_bb5_or242_i179_0_reg_184_fifo.IMPL = "shift_reg";

assign rnode_183to184_bb5_or242_i179_0_reg_184_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or242_i179_stall_in = 1'b0;
assign rnode_183to184_bb5_or242_i179_0_stall_in_0_reg_184_NO_SHIFT_REG = 1'b0;
assign rnode_183to184_bb5_or242_i179_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_183to184_bb5_or242_i179_0_NO_SHIFT_REG = rnode_183to184_bb5_or242_i179_0_reg_184_NO_SHIFT_REG;
assign rnode_183to184_bb5_or242_i179_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_183to184_bb5_or242_i179_1_NO_SHIFT_REG = rnode_183to184_bb5_or242_i179_0_reg_184_NO_SHIFT_REG;
assign rnode_183to184_bb5_or242_i179_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_183to184_bb5_or242_i179_2_NO_SHIFT_REG = rnode_183to184_bb5_or242_i179_0_reg_184_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_or250_compressed_i186_stall_local;
wire [31:0] local_bb5_or250_compressed_i186;

assign local_bb5_or250_compressed_i186 = rnode_183to184_bb5_or250_shuffle_i185_0_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_lnot279_i201_stall_local;
wire local_bb5_lnot279_i201;

assign local_bb5_lnot279_i201 = (rnode_183to184_bb5__31_i176_1_NO_SHIFT_REG ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb5_or253_i187_stall_local;
wire local_bb5_or253_i187;

assign local_bb5_or253_i187 = (rnode_183to184_bb5__31_i176_0_NO_SHIFT_REG | rnode_183to184_bb5_or242_i179_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb5_or257_i189_stall_local;
wire local_bb5_or257_i189;

assign local_bb5_or257_i189 = (rnode_183to184_bb5_or242_i179_1_NO_SHIFT_REG | rnode_183to184_bb5__13_i58_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb5_reduction_9_demorgan_i202_stall_local;
wire local_bb5_reduction_9_demorgan_i202;

assign local_bb5_reduction_9_demorgan_i202 = (rnode_183to184_bb5__13_i58_2_NO_SHIFT_REG | rnode_183to184_bb5_or242_i179_2_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb5_cond254_i188_stall_local;
wire [31:0] local_bb5_cond254_i188;

assign local_bb5_cond254_i188 = (local_bb5_or253_i187 ? 32'h80000000 : 32'hFFFFFFFF);

// This section implements an unregistered operation.
// 
wire local_bb5_cond258_i190_stall_local;
wire [31:0] local_bb5_cond258_i190;

assign local_bb5_cond258_i190 = (local_bb5_or257_i189 ? 32'h7F800000 : 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_reduction_9_i203_stall_local;
wire local_bb5_reduction_9_i203;

assign local_bb5_reduction_9_i203 = (local_bb5_reduction_9_demorgan_i202 ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb5_and261_i192_stall_local;
wire [31:0] local_bb5_and261_i192;

assign local_bb5_and261_i192 = ((local_bb5_cond254_i188 | 32'h80000000) & local_bb5_or250_compressed_i186);

// This section implements an unregistered operation.
// 
wire local_bb5_or262_i193_stall_local;
wire [31:0] local_bb5_or262_i193;

assign local_bb5_or262_i193 = ((local_bb5_cond258_i190 & 32'h7F800000) | (local_bb5_cond260_i191 & 32'h400000));

// This section implements an unregistered operation.
// 
wire local_bb5_and269_i198_stall_local;
wire [31:0] local_bb5_and269_i198;

assign local_bb5_and269_i198 = ((local_bb5_conv267_i197 & 32'h1) & local_bb5_and261_i192);

// This section implements an unregistered operation.
// 
wire local_bb5_or263_i194_stall_local;
wire [31:0] local_bb5_or263_i194;

assign local_bb5_or263_i194 = ((local_bb5_or262_i193 & 32'h7FC00000) | local_bb5_and261_i192);

// This section implements an unregistered operation.
// 
wire local_bb5_tobool270_i199_stall_local;
wire local_bb5_tobool270_i199;

assign local_bb5_tobool270_i199 = ((local_bb5_and269_i198 & 32'h1) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb5__32_i200_stall_local;
wire local_bb5__32_i200;

assign local_bb5__32_i200 = (rnode_183to184_bb5_cmp264_i195_0_NO_SHIFT_REG | local_bb5_tobool270_i199);

// This section implements an unregistered operation.
// 
wire local_bb5_reduction_10_i204_stall_local;
wire local_bb5_reduction_10_i204;

assign local_bb5_reduction_10_i204 = (local_bb5__32_i200 & local_bb5_lnot279_i201);

// This section implements an unregistered operation.
// 
wire local_bb5_reduction_11_i205_stall_local;
wire local_bb5_reduction_11_i205;

assign local_bb5_reduction_11_i205 = (local_bb5_reduction_10_i204 & local_bb5_reduction_9_i203);

// This section implements an unregistered operation.
// 
wire local_bb5_conv283_i206_stall_local;
wire [31:0] local_bb5_conv283_i206;

assign local_bb5_conv283_i206[31:1] = 31'h0;
assign local_bb5_conv283_i206[0] = local_bb5_reduction_11_i205;

// This section implements an unregistered operation.
// 
wire local_bb5_add284_i207_valid_out;
wire local_bb5_add284_i207_stall_in;
wire local_bb5_add284_i207_inputs_ready;
wire local_bb5_add284_i207_stall_local;
wire [31:0] local_bb5_add284_i207;

assign local_bb5_add284_i207_inputs_ready = (rnode_183to184_bb5_or242_i179_0_valid_out_1_NO_SHIFT_REG & rnode_183to184_bb5__13_i58_0_valid_out_0_NO_SHIFT_REG & rnode_183to184_bb5__13_i58_0_valid_out_1_NO_SHIFT_REG & rnode_183to184_bb5_or242_i179_0_valid_out_2_NO_SHIFT_REG & rnode_183to184_bb5__13_i58_0_valid_out_2_NO_SHIFT_REG & rnode_183to184_bb5__31_i176_0_valid_out_0_NO_SHIFT_REG & rnode_183to184_bb5_or242_i179_0_valid_out_0_NO_SHIFT_REG & rnode_183to184_bb5_or250_shuffle_i185_0_valid_out_NO_SHIFT_REG & rnode_183to184_bb5_cmp266_i196_0_valid_out_NO_SHIFT_REG & rnode_183to184_bb5_cmp264_i195_0_valid_out_NO_SHIFT_REG & rnode_183to184_bb5__31_i176_0_valid_out_1_NO_SHIFT_REG);
assign local_bb5_add284_i207 = ((local_bb5_conv283_i206 & 32'h1) + local_bb5_or263_i194);
assign local_bb5_add284_i207_valid_out = 1'b1;
assign rnode_183to184_bb5_or242_i179_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_183to184_bb5__13_i58_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_183to184_bb5__13_i58_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_183to184_bb5_or242_i179_0_stall_in_2_NO_SHIFT_REG = 1'b0;
assign rnode_183to184_bb5__13_i58_0_stall_in_2_NO_SHIFT_REG = 1'b0;
assign rnode_183to184_bb5__31_i176_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_183to184_bb5_or242_i179_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_183to184_bb5_or250_shuffle_i185_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_183to184_bb5_cmp266_i196_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_183to184_bb5_cmp264_i195_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_183to184_bb5__31_i176_0_stall_in_1_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_184to185_bb5_add284_i207_0_valid_out_NO_SHIFT_REG;
 logic rnode_184to185_bb5_add284_i207_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_184to185_bb5_add284_i207_0_NO_SHIFT_REG;
 logic rnode_184to185_bb5_add284_i207_0_reg_185_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_184to185_bb5_add284_i207_0_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5_add284_i207_0_valid_out_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5_add284_i207_0_stall_in_reg_185_NO_SHIFT_REG;
 logic rnode_184to185_bb5_add284_i207_0_stall_out_reg_185_NO_SHIFT_REG;

acl_data_fifo rnode_184to185_bb5_add284_i207_0_reg_185_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_184to185_bb5_add284_i207_0_reg_185_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_184to185_bb5_add284_i207_0_stall_in_reg_185_NO_SHIFT_REG),
	.valid_out(rnode_184to185_bb5_add284_i207_0_valid_out_reg_185_NO_SHIFT_REG),
	.stall_out(rnode_184to185_bb5_add284_i207_0_stall_out_reg_185_NO_SHIFT_REG),
	.data_in(local_bb5_add284_i207),
	.data_out(rnode_184to185_bb5_add284_i207_0_reg_185_NO_SHIFT_REG)
);

defparam rnode_184to185_bb5_add284_i207_0_reg_185_fifo.DEPTH = 1;
defparam rnode_184to185_bb5_add284_i207_0_reg_185_fifo.DATA_WIDTH = 32;
defparam rnode_184to185_bb5_add284_i207_0_reg_185_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_184to185_bb5_add284_i207_0_reg_185_fifo.IMPL = "shift_reg";

assign rnode_184to185_bb5_add284_i207_0_reg_185_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_add284_i207_stall_in = 1'b0;
assign rnode_184to185_bb5_add284_i207_0_NO_SHIFT_REG = rnode_184to185_bb5_add284_i207_0_reg_185_NO_SHIFT_REG;
assign rnode_184to185_bb5_add284_i207_0_stall_in_reg_185_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_add284_i207_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u34_stall_local;
wire [31:0] local_bb5_var__u34;

assign local_bb5_var__u34 = rnode_184to185_bb5_add284_i207_0_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_select86_stall_local;
wire [31:0] local_bb5_select86;

assign local_bb5_select86 = (rnode_184to185_bb5_c2_ene7_0_NO_SHIFT_REG ? local_bb5_var__u34 : rnode_184to185_bb5_c2_ene10_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb5_result_521_LC_InnerPHI96_stall_local;
wire [31:0] local_bb5_result_521_LC_InnerPHI96;

assign local_bb5_result_521_LC_InnerPHI96 = (rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_2_NO_SHIFT_REG ? local_bb5_var__u34 : local_bb5_select86);

// This section implements an unregistered operation.
// 
wire local_bb5_result_331_LC_OuterPHI_stall_local;
wire [31:0] local_bb5_result_331_LC_OuterPHI;

assign local_bb5_result_331_LC_OuterPHI = (rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_3_NO_SHIFT_REG ? rnode_184to185_bb5_c2_ene10_1_NO_SHIFT_REG : local_bb5_select86);

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exi2_stall_local;
wire [319:0] local_bb5_c2_exi2;

assign local_bb5_c2_exi2[63:0] = local_bb5_c2_exi1[63:0];
assign local_bb5_c2_exi2[95:64] = local_bb5_select86;
assign local_bb5_c2_exi2[319:96] = local_bb5_c2_exi1[319:96];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exi3_stall_local;
wire [319:0] local_bb5_c2_exi3;

assign local_bb5_c2_exi3[95:0] = local_bb5_c2_exi2[95:0];
assign local_bb5_c2_exi3[127:96] = local_bb5_i_426_LC_InnerPHI;
assign local_bb5_c2_exi3[319:128] = local_bb5_c2_exi2[319:128];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exi4_stall_local;
wire [319:0] local_bb5_c2_exi4;

assign local_bb5_c2_exi4[127:0] = local_bb5_c2_exi3[127:0];
assign local_bb5_c2_exi4[159:128] = local_bb5_j_522_LC_InnerPHI95;
assign local_bb5_c2_exi4[319:160] = local_bb5_c2_exi3[319:160];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exi5_stall_local;
wire [319:0] local_bb5_c2_exi5;

assign local_bb5_c2_exi5[159:0] = local_bb5_c2_exi4[159:0];
assign local_bb5_c2_exi5[191:160] = local_bb5_result_521_LC_InnerPHI96;
assign local_bb5_c2_exi5[319:192] = local_bb5_c2_exi4[319:192];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exi6_stall_local;
wire [319:0] local_bb5_c2_exi6;

assign local_bb5_c2_exi6[191:0] = local_bb5_c2_exi5[191:0];
assign local_bb5_c2_exi6[223:192] = rnode_184to185_bb5__LC_OuterPHI_0_NO_SHIFT_REG;
assign local_bb5_c2_exi6[319:224] = local_bb5_c2_exi5[319:224];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exi7_stall_local;
wire [319:0] local_bb5_c2_exi7;

assign local_bb5_c2_exi7[223:0] = local_bb5_c2_exi6[223:0];
assign local_bb5_c2_exi7[255:224] = rnode_184to185_bb5_c_332_LC_OuterPHI_0_NO_SHIFT_REG;
assign local_bb5_c2_exi7[319:256] = local_bb5_c2_exi6[319:256];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exi8_stall_local;
wire [319:0] local_bb5_c2_exi8;

assign local_bb5_c2_exi8[255:0] = local_bb5_c2_exi7[255:0];
assign local_bb5_c2_exi8[287:256] = local_bb5_result_331_LC_OuterPHI;
assign local_bb5_c2_exi8[319:288] = local_bb5_c2_exi7[319:288];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exi9_valid_out;
wire local_bb5_c2_exi9_stall_in;
wire local_bb5_c2_exi9_inputs_ready;
wire local_bb5_c2_exi9_stall_local;
wire [319:0] local_bb5_c2_exi9;

assign local_bb5_c2_exi9_inputs_ready = (rnode_184to185_bb5_c2_ene10_0_valid_out_0_NO_SHIFT_REG & rnode_184to185_bb5_c2_ene7_0_valid_out_NO_SHIFT_REG & rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_valid_out_2_NO_SHIFT_REG & rnode_184to185_bb5_c2_ene10_0_valid_out_1_NO_SHIFT_REG & rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_valid_out_3_NO_SHIFT_REG & rnode_184to185_bb5__demorgan_0_valid_out_NO_SHIFT_REG & rnode_184to185_bb5_i_426_LC_OuterPHI_0_valid_out_NO_SHIFT_REG & rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_valid_out_0_NO_SHIFT_REG & rnode_184to185_bb5_select83_0_valid_out_NO_SHIFT_REG & rnode_184to185_bb5__LC_OuterPHI_0_valid_out_NO_SHIFT_REG & rnode_184to185_bb5_c_332_LC_OuterPHI_0_valid_out_NO_SHIFT_REG & rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_valid_out_1_NO_SHIFT_REG & rnode_184to185_bb5_j_522_LC_InnerPHI_0_valid_out_NO_SHIFT_REG & rnode_184to185_bb5_add284_i207_0_valid_out_NO_SHIFT_REG);
assign local_bb5_c2_exi9[287:0] = local_bb5_c2_exi8[287:0];
assign local_bb5_c2_exi9[288] = rnode_184to185_bb5__demorgan_0_NO_SHIFT_REG;
assign local_bb5_c2_exi9[319:289] = local_bb5_c2_exi8[319:289];
assign local_bb5_c2_exi9_valid_out = 1'b1;
assign rnode_184to185_bb5_c2_ene10_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_c2_ene7_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_in_2_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_c2_ene10_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_in_3_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5__demorgan_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_i_426_LC_OuterPHI_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_select83_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5__LC_OuterPHI_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_c_332_LC_OuterPHI_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_for_inc63_loopexit_loopexit_LC_COND88_GUARD_demorgan_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_j_522_LC_InnerPHI_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_184to185_bb5_add284_i207_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements a registered operation.
// 
wire local_bb5_c2_exit_c2_exi9_inputs_ready;
 reg local_bb5_c2_exit_c2_exi9_valid_out_0_NO_SHIFT_REG;
wire local_bb5_c2_exit_c2_exi9_stall_in_0;
 reg local_bb5_c2_exit_c2_exi9_valid_out_1_NO_SHIFT_REG;
wire local_bb5_c2_exit_c2_exi9_stall_in_1;
 reg local_bb5_c2_exit_c2_exi9_valid_out_2_NO_SHIFT_REG;
wire local_bb5_c2_exit_c2_exi9_stall_in_2;
 reg local_bb5_c2_exit_c2_exi9_valid_out_3_NO_SHIFT_REG;
wire local_bb5_c2_exit_c2_exi9_stall_in_3;
 reg local_bb5_c2_exit_c2_exi9_valid_out_4_NO_SHIFT_REG;
wire local_bb5_c2_exit_c2_exi9_stall_in_4;
 reg local_bb5_c2_exit_c2_exi9_valid_out_5_NO_SHIFT_REG;
wire local_bb5_c2_exit_c2_exi9_stall_in_5;
 reg local_bb5_c2_exit_c2_exi9_valid_out_6_NO_SHIFT_REG;
wire local_bb5_c2_exit_c2_exi9_stall_in_6;
 reg local_bb5_c2_exit_c2_exi9_valid_out_7_NO_SHIFT_REG;
wire local_bb5_c2_exit_c2_exi9_stall_in_7;
 reg [319:0] local_bb5_c2_exit_c2_exi9_NO_SHIFT_REG;
wire [319:0] local_bb5_c2_exit_c2_exi9_in;
wire local_bb5_c2_exit_c2_exi9_valid;
wire local_bb5_c2_exit_c2_exi9_causedstall;

acl_stall_free_sink local_bb5_c2_exit_c2_exi9_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb5_c2_exi9),
	.data_out(local_bb5_c2_exit_c2_exi9_in),
	.input_accepted(local_bb5_c2_enter_c2_eni14_input_accepted),
	.valid_out(local_bb5_c2_exit_c2_exi9_valid),
	.stall_in(~(local_bb5_c2_exit_c2_exi9_output_regs_ready)),
	.stall_entry(local_bb5_c2_exit_c2_exi9_entry_stall),
	.valid_in(local_bb5_c2_exit_c2_exi9_valid_in),
	.IIphases(local_bb5_c2_exit_c2_exi9_phases),
	.inc_pipelined_thread(local_bb5_c2_enter_c2_eni14_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb5_c2_enter_c2_eni14_dec_pipelined_thread)
);

defparam local_bb5_c2_exit_c2_exi9_instance.DATA_WIDTH = 320;
defparam local_bb5_c2_exit_c2_exi9_instance.PIPELINE_DEPTH = 20;
defparam local_bb5_c2_exit_c2_exi9_instance.SHARINGII = 1;
defparam local_bb5_c2_exit_c2_exi9_instance.SCHEDULEII = 1;
defparam local_bb5_c2_exit_c2_exi9_instance.ALWAYS_THROTTLE = 0;

assign local_bb5_c2_exit_c2_exi9_inputs_ready = 1'b1;
assign local_bb5_c2_exit_c2_exi9_output_regs_ready = ((~(local_bb5_c2_exit_c2_exi9_valid_out_0_NO_SHIFT_REG) | ~(local_bb5_c2_exit_c2_exi9_stall_in_0)) & (~(local_bb5_c2_exit_c2_exi9_valid_out_1_NO_SHIFT_REG) | ~(local_bb5_c2_exit_c2_exi9_stall_in_1)) & (~(local_bb5_c2_exit_c2_exi9_valid_out_2_NO_SHIFT_REG) | ~(local_bb5_c2_exit_c2_exi9_stall_in_2)) & (~(local_bb5_c2_exit_c2_exi9_valid_out_3_NO_SHIFT_REG) | ~(local_bb5_c2_exit_c2_exi9_stall_in_3)) & (~(local_bb5_c2_exit_c2_exi9_valid_out_4_NO_SHIFT_REG) | ~(local_bb5_c2_exit_c2_exi9_stall_in_4)) & (~(local_bb5_c2_exit_c2_exi9_valid_out_5_NO_SHIFT_REG) | ~(local_bb5_c2_exit_c2_exi9_stall_in_5)) & (~(local_bb5_c2_exit_c2_exi9_valid_out_6_NO_SHIFT_REG) | ~(local_bb5_c2_exit_c2_exi9_stall_in_6)) & (~(local_bb5_c2_exit_c2_exi9_valid_out_7_NO_SHIFT_REG) | ~(local_bb5_c2_exit_c2_exi9_stall_in_7)));
assign local_bb5_c2_exit_c2_exi9_valid_in = SFC_9_VALID_184_185_0_NO_SHIFT_REG;
assign local_bb5_c2_exi9_stall_in = 1'b0;
assign SFC_9_VALID_184_185_0_stall_in = 1'b0;
assign local_bb5_c2_exit_c2_exi9_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c2_exit_c2_exi9_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_c2_exit_c2_exi9_NO_SHIFT_REG <= 'x;
		local_bb5_c2_exit_c2_exi9_valid_out_0_NO_SHIFT_REG <= 1'b0;
		local_bb5_c2_exit_c2_exi9_valid_out_7_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_c2_exit_c2_exi9_output_regs_ready)
		begin
			local_bb5_c2_exit_c2_exi9_NO_SHIFT_REG <= local_bb5_c2_exit_c2_exi9_in;
			local_bb5_c2_exit_c2_exi9_valid_out_0_NO_SHIFT_REG <= local_bb5_c2_exit_c2_exi9_valid;
			local_bb5_c2_exit_c2_exi9_valid_out_7_NO_SHIFT_REG <= local_bb5_c2_exit_c2_exi9_valid;
		end
		else
		begin
			if (~(local_bb5_c2_exit_c2_exi9_stall_in_0))
			begin
				local_bb5_c2_exit_c2_exi9_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_c2_exit_c2_exi9_stall_in_7))
			begin
				local_bb5_c2_exit_c2_exi9_valid_out_7_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(*)
begin
	local_bb5_c2_exit_c2_exi9_valid_out_1_NO_SHIFT_REG = local_bb5_c2_exit_c2_exi9_valid_out_0_NO_SHIFT_REG;
	local_bb5_c2_exit_c2_exi9_valid_out_2_NO_SHIFT_REG = local_bb5_c2_exit_c2_exi9_valid_out_0_NO_SHIFT_REG;
	local_bb5_c2_exit_c2_exi9_valid_out_3_NO_SHIFT_REG = local_bb5_c2_exit_c2_exi9_valid_out_0_NO_SHIFT_REG;
	local_bb5_c2_exit_c2_exi9_valid_out_4_NO_SHIFT_REG = local_bb5_c2_exit_c2_exi9_valid_out_0_NO_SHIFT_REG;
	local_bb5_c2_exit_c2_exi9_valid_out_5_NO_SHIFT_REG = local_bb5_c2_exit_c2_exi9_valid_out_0_NO_SHIFT_REG;
	local_bb5_c2_exit_c2_exi9_valid_out_6_NO_SHIFT_REG = local_bb5_c2_exit_c2_exi9_valid_out_0_NO_SHIFT_REG;
end


// This section implements an unregistered operation.
// 
wire local_bb5_c2_exe3_stall_local;
wire [31:0] local_bb5_c2_exe3;

assign local_bb5_c2_exe3[31:0] = local_bb5_c2_exit_c2_exi9_NO_SHIFT_REG[127:96];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exe4_stall_local;
wire [31:0] local_bb5_c2_exe4;

assign local_bb5_c2_exe4[31:0] = local_bb5_c2_exit_c2_exi9_NO_SHIFT_REG[159:128];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exe5_stall_local;
wire [31:0] local_bb5_c2_exe5;

assign local_bb5_c2_exe5[31:0] = local_bb5_c2_exit_c2_exi9_NO_SHIFT_REG[191:160];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exe6_stall_local;
wire [31:0] local_bb5_c2_exe6;

assign local_bb5_c2_exe6[31:0] = local_bb5_c2_exit_c2_exi9_NO_SHIFT_REG[223:192];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exe7_stall_local;
wire [31:0] local_bb5_c2_exe7;

assign local_bb5_c2_exe7[31:0] = local_bb5_c2_exit_c2_exi9_NO_SHIFT_REG[255:224];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exe8_stall_local;
wire [31:0] local_bb5_c2_exe8;

assign local_bb5_c2_exe8[31:0] = local_bb5_c2_exit_c2_exi9_NO_SHIFT_REG[287:256];

// This section implements an unregistered operation.
// 
wire local_bb5_c2_exe3_valid_out;
wire local_bb5_c2_exe3_stall_in;
wire local_bb5_c2_exe4_valid_out;
wire local_bb5_c2_exe4_stall_in;
wire local_bb5_c2_exe5_valid_out;
wire local_bb5_c2_exe5_stall_in;
wire local_bb5_c2_exe6_valid_out;
wire local_bb5_c2_exe6_stall_in;
wire local_bb5_c2_exe7_valid_out;
wire local_bb5_c2_exe7_stall_in;
wire local_bb5_c2_exe8_valid_out;
wire local_bb5_c2_exe8_stall_in;
wire local_bb5_c2_exe9_valid_out;
wire local_bb5_c2_exe9_stall_in;
wire local_bb5_c2_exe9_inputs_ready;
wire local_bb5_c2_exe9_stall_local;
wire local_bb5_c2_exe9;

assign local_bb5_c2_exe9_inputs_ready = (local_bb5_c2_exit_c2_exi9_valid_out_0_NO_SHIFT_REG & local_bb5_c2_exit_c2_exi9_valid_out_1_NO_SHIFT_REG & local_bb5_c2_exit_c2_exi9_valid_out_2_NO_SHIFT_REG & local_bb5_c2_exit_c2_exi9_valid_out_3_NO_SHIFT_REG & local_bb5_c2_exit_c2_exi9_valid_out_4_NO_SHIFT_REG & local_bb5_c2_exit_c2_exi9_valid_out_5_NO_SHIFT_REG & local_bb5_c2_exit_c2_exi9_valid_out_6_NO_SHIFT_REG);
assign local_bb5_c2_exe9 = local_bb5_c2_exit_c2_exi9_NO_SHIFT_REG[288];
assign local_bb5_c2_exe9_stall_local = (local_bb5_c2_exe3_stall_in | local_bb5_c2_exe4_stall_in | local_bb5_c2_exe5_stall_in | local_bb5_c2_exe6_stall_in | local_bb5_c2_exe7_stall_in | local_bb5_c2_exe8_stall_in | local_bb5_c2_exe9_stall_in);
assign local_bb5_c2_exe3_valid_out = local_bb5_c2_exe9_inputs_ready;
assign local_bb5_c2_exe4_valid_out = local_bb5_c2_exe9_inputs_ready;
assign local_bb5_c2_exe5_valid_out = local_bb5_c2_exe9_inputs_ready;
assign local_bb5_c2_exe6_valid_out = local_bb5_c2_exe9_inputs_ready;
assign local_bb5_c2_exe7_valid_out = local_bb5_c2_exe9_inputs_ready;
assign local_bb5_c2_exe8_valid_out = local_bb5_c2_exe9_inputs_ready;
assign local_bb5_c2_exe9_valid_out = local_bb5_c2_exe9_inputs_ready;
assign local_bb5_c2_exit_c2_exi9_stall_in_0 = (local_bb5_c2_exe9_stall_local | ~(local_bb5_c2_exe9_inputs_ready));
assign local_bb5_c2_exit_c2_exi9_stall_in_1 = (local_bb5_c2_exe9_stall_local | ~(local_bb5_c2_exe9_inputs_ready));
assign local_bb5_c2_exit_c2_exi9_stall_in_2 = (local_bb5_c2_exe9_stall_local | ~(local_bb5_c2_exe9_inputs_ready));
assign local_bb5_c2_exit_c2_exi9_stall_in_3 = (local_bb5_c2_exe9_stall_local | ~(local_bb5_c2_exe9_inputs_ready));
assign local_bb5_c2_exit_c2_exi9_stall_in_4 = (local_bb5_c2_exe9_stall_local | ~(local_bb5_c2_exe9_inputs_ready));
assign local_bb5_c2_exit_c2_exi9_stall_in_5 = (local_bb5_c2_exe9_stall_local | ~(local_bb5_c2_exe9_inputs_ready));
assign local_bb5_c2_exit_c2_exi9_stall_in_6 = (local_bb5_c2_exe9_stall_local | ~(local_bb5_c2_exe9_inputs_ready));

// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_0_NO_SHIFT_REG;
 reg branch_compare_result_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg lvb_cmp56_0_reg_NO_SHIFT_REG;
 reg lvb_var__0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_3_0_reg_NO_SHIFT_REG;
 reg lvb_cmp1430_0_reg_NO_SHIFT_REG;
 reg lvb_var__u5_0_reg_NO_SHIFT_REG;
 reg lvb__phi_decision_xor118_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_ld__0_reg_NO_SHIFT_REG;
 reg lvb_cmp1824_0_reg_NO_SHIFT_REG;
 reg lvb__phi_decision_xor119_or_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_6148_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_1149_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_3150_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_4_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_channelCounter_058_0_reg_NO_SHIFT_REG;
 reg [63:0] lvb_arrayidx67_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul70_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul46_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_heightCounter_148_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c0_exe1_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul28_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_var__u6_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_widthCounter_239_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul36_0_reg_NO_SHIFT_REG;
 reg [319:0] lvb_bb5_c2_exit_c2_exi9_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb5_c2_exe3_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb5_c2_exe4_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb5_c2_exe5_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb5_c2_exe6_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb5_c2_exe7_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb5_c2_exe8_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb5_c2_exe9_valid_out & local_bb5_c2_exe8_valid_out & local_bb5_c2_exe7_valid_out & local_bb5_c2_exe6_valid_out & local_bb5_c2_exe5_valid_out & local_bb5_c2_exe4_valid_out & local_bb5_c2_exe3_valid_out & local_bb5_c2_exit_c2_exi9_valid_out_7_NO_SHIFT_REG & rcnode_189to190_rc0_cmp56_0_valid_out_NO_SHIFT_REG);
assign branch_var__output_regs_ready = (~(branch_node_valid_out_0_NO_SHIFT_REG) | (((branch_compare_result_NO_SHIFT_REG != 1'b1) & ~(stall_in_1)) | (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & ~(stall_in_0))));
assign local_bb5_c2_exe9_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb5_c2_exe8_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb5_c2_exe7_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb5_c2_exe6_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb5_c2_exe5_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb5_c2_exe4_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb5_c2_exe3_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb5_c2_exit_c2_exi9_stall_in_7 = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_189to190_rc0_cmp56_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_cmp56_0 = lvb_cmp56_0_reg_NO_SHIFT_REG;
assign lvb_cmp56_1 = lvb_cmp56_0_reg_NO_SHIFT_REG;
assign lvb_var__0 = lvb_var__0_reg_NO_SHIFT_REG;
assign lvb_var__1 = lvb_var__0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6_0 = lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6_1 = lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_3_0 = lvb_memcoalesce_param_extrValue_3_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_3_1 = lvb_memcoalesce_param_extrValue_3_0_reg_NO_SHIFT_REG;
assign lvb_cmp1430_0 = lvb_cmp1430_0_reg_NO_SHIFT_REG;
assign lvb_cmp1430_1 = lvb_cmp1430_0_reg_NO_SHIFT_REG;
assign lvb_var__u5_0 = lvb_var__u5_0_reg_NO_SHIFT_REG;
assign lvb_var__u5_1 = lvb_var__u5_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor118_0 = lvb__phi_decision_xor118_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor118_1 = lvb__phi_decision_xor118_0_reg_NO_SHIFT_REG;
assign lvb_ld__0 = lvb_ld__0_reg_NO_SHIFT_REG;
assign lvb_ld__1 = lvb_ld__0_reg_NO_SHIFT_REG;
assign lvb_cmp1824_0 = lvb_cmp1824_0_reg_NO_SHIFT_REG;
assign lvb_cmp1824_1 = lvb_cmp1824_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor119_or_0 = lvb__phi_decision_xor119_or_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor119_or_1 = lvb__phi_decision_xor119_or_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_5_0 = lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_5_1 = lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6148_0 = lvb_memcoalesce_param_extrValue_6148_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6148_1 = lvb_memcoalesce_param_extrValue_6148_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_1149_0 = lvb_memcoalesce_param_extrValue_1149_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_1149_1 = lvb_memcoalesce_param_extrValue_1149_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_3150_0 = lvb_memcoalesce_param_extrValue_3150_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_3150_1 = lvb_memcoalesce_param_extrValue_3150_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_4_0 = lvb_memcoalesce_param_extrValue_4_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_4_1 = lvb_memcoalesce_param_extrValue_4_0_reg_NO_SHIFT_REG;
assign lvb_channelCounter_058_0 = lvb_channelCounter_058_0_reg_NO_SHIFT_REG;
assign lvb_channelCounter_058_1 = lvb_channelCounter_058_0_reg_NO_SHIFT_REG;
assign lvb_arrayidx67_0 = lvb_arrayidx67_0_reg_NO_SHIFT_REG;
assign lvb_arrayidx67_1 = lvb_arrayidx67_0_reg_NO_SHIFT_REG;
assign lvb_mul70_0 = lvb_mul70_0_reg_NO_SHIFT_REG;
assign lvb_mul70_1 = lvb_mul70_0_reg_NO_SHIFT_REG;
assign lvb_mul46_0 = lvb_mul46_0_reg_NO_SHIFT_REG;
assign lvb_mul46_1 = lvb_mul46_0_reg_NO_SHIFT_REG;
assign lvb_heightCounter_148_0 = lvb_heightCounter_148_0_reg_NO_SHIFT_REG;
assign lvb_heightCounter_148_1 = lvb_heightCounter_148_0_reg_NO_SHIFT_REG;
assign lvb_c0_exe1_0 = lvb_c0_exe1_0_reg_NO_SHIFT_REG;
assign lvb_c0_exe1_1 = lvb_c0_exe1_0_reg_NO_SHIFT_REG;
assign lvb_mul28_0 = lvb_mul28_0_reg_NO_SHIFT_REG;
assign lvb_mul28_1 = lvb_mul28_0_reg_NO_SHIFT_REG;
assign lvb_var__u6_0 = lvb_var__u6_0_reg_NO_SHIFT_REG;
assign lvb_var__u6_1 = lvb_var__u6_0_reg_NO_SHIFT_REG;
assign lvb_widthCounter_239_0 = lvb_widthCounter_239_0_reg_NO_SHIFT_REG;
assign lvb_widthCounter_239_1 = lvb_widthCounter_239_0_reg_NO_SHIFT_REG;
assign lvb_mul36_0 = lvb_mul36_0_reg_NO_SHIFT_REG;
assign lvb_mul36_1 = lvb_mul36_0_reg_NO_SHIFT_REG;
assign lvb_bb5_c2_exit_c2_exi9_0 = lvb_bb5_c2_exit_c2_exi9_0_reg_NO_SHIFT_REG;
assign lvb_bb5_c2_exit_c2_exi9_1 = lvb_bb5_c2_exit_c2_exi9_0_reg_NO_SHIFT_REG;
assign lvb_bb5_c2_exe3_0 = lvb_bb5_c2_exe3_0_reg_NO_SHIFT_REG;
assign lvb_bb5_c2_exe3_1 = lvb_bb5_c2_exe3_0_reg_NO_SHIFT_REG;
assign lvb_bb5_c2_exe4_0 = lvb_bb5_c2_exe4_0_reg_NO_SHIFT_REG;
assign lvb_bb5_c2_exe4_1 = lvb_bb5_c2_exe4_0_reg_NO_SHIFT_REG;
assign lvb_bb5_c2_exe5_0 = lvb_bb5_c2_exe5_0_reg_NO_SHIFT_REG;
assign lvb_bb5_c2_exe5_1 = lvb_bb5_c2_exe5_0_reg_NO_SHIFT_REG;
assign lvb_bb5_c2_exe6_0 = lvb_bb5_c2_exe6_0_reg_NO_SHIFT_REG;
assign lvb_bb5_c2_exe6_1 = lvb_bb5_c2_exe6_0_reg_NO_SHIFT_REG;
assign lvb_bb5_c2_exe7_0 = lvb_bb5_c2_exe7_0_reg_NO_SHIFT_REG;
assign lvb_bb5_c2_exe7_1 = lvb_bb5_c2_exe7_0_reg_NO_SHIFT_REG;
assign lvb_bb5_c2_exe8_0 = lvb_bb5_c2_exe8_0_reg_NO_SHIFT_REG;
assign lvb_bb5_c2_exe8_1 = lvb_bb5_c2_exe8_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1_0 = lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1_1 = lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2_0 = lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2_1 = lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_0 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_1 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign valid_out_0 = (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG);
assign valid_out_1 = ((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG);
assign combined_branch_stall_in_signal = ((((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_1) | ((~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_0));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		lvb_cmp56_0_reg_NO_SHIFT_REG <= 'x;
		lvb_var__0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_3_0_reg_NO_SHIFT_REG <= 'x;
		lvb_cmp1430_0_reg_NO_SHIFT_REG <= 'x;
		lvb_var__u5_0_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision_xor118_0_reg_NO_SHIFT_REG <= 'x;
		lvb_ld__0_reg_NO_SHIFT_REG <= 'x;
		lvb_cmp1824_0_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision_xor119_or_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_6148_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_1149_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_3150_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_4_0_reg_NO_SHIFT_REG <= 'x;
		lvb_channelCounter_058_0_reg_NO_SHIFT_REG <= 'x;
		lvb_arrayidx67_0_reg_NO_SHIFT_REG <= 'x;
		lvb_mul70_0_reg_NO_SHIFT_REG <= 'x;
		lvb_mul46_0_reg_NO_SHIFT_REG <= 'x;
		lvb_heightCounter_148_0_reg_NO_SHIFT_REG <= 'x;
		lvb_c0_exe1_0_reg_NO_SHIFT_REG <= 'x;
		lvb_mul28_0_reg_NO_SHIFT_REG <= 'x;
		lvb_var__u6_0_reg_NO_SHIFT_REG <= 'x;
		lvb_widthCounter_239_0_reg_NO_SHIFT_REG <= 'x;
		lvb_mul36_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb5_c2_exit_c2_exi9_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb5_c2_exe3_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb5_c2_exe4_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb5_c2_exe5_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb5_c2_exe6_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb5_c2_exe7_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb5_c2_exe8_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= 'x;
		branch_compare_result_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_0_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_cmp56_0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[0];
			lvb_var__0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[1];
			lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[33:2];
			lvb_memcoalesce_param_extrValue_3_0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[65:34];
			lvb_cmp1430_0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[677];
			lvb_var__u5_0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[678];
			lvb__phi_decision_xor118_0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[66];
			lvb_ld__0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[710:679];
			lvb_cmp1824_0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[612];
			lvb__phi_decision_xor119_or_0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[611];
			lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[98:67];
			lvb_memcoalesce_param_extrValue_6148_0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[130:99];
			lvb_memcoalesce_param_extrValue_1149_0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[162:131];
			lvb_memcoalesce_param_extrValue_3150_0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[194:163];
			lvb_memcoalesce_param_extrValue_4_0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[644:613];
			lvb_channelCounter_058_0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[226:195];
			lvb_arrayidx67_0_reg_NO_SHIFT_REG <= (rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[290:227] & 64'hFFFFFFFFFFFFFFFC);
			lvb_mul70_0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[322:291];
			lvb_mul46_0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[610:579];
			lvb_heightCounter_148_0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[354:323];
			lvb_c0_exe1_0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[386:355];
			lvb_mul28_0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[418:387];
			lvb_var__u6_0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[676:645];
			lvb_widthCounter_239_0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[450:419];
			lvb_mul36_0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[482:451];
			lvb_bb5_c2_exit_c2_exi9_0_reg_NO_SHIFT_REG <= local_bb5_c2_exit_c2_exi9_NO_SHIFT_REG;
			lvb_bb5_c2_exe3_0_reg_NO_SHIFT_REG <= local_bb5_c2_exe3;
			lvb_bb5_c2_exe4_0_reg_NO_SHIFT_REG <= local_bb5_c2_exe4;
			lvb_bb5_c2_exe5_0_reg_NO_SHIFT_REG <= local_bb5_c2_exe5;
			lvb_bb5_c2_exe6_0_reg_NO_SHIFT_REG <= local_bb5_c2_exe6;
			lvb_bb5_c2_exe7_0_reg_NO_SHIFT_REG <= local_bb5_c2_exe7;
			lvb_bb5_c2_exe8_0_reg_NO_SHIFT_REG <= local_bb5_c2_exe8;
			lvb_input_global_id_1_0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[514:483];
			lvb_input_global_id_2_0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[546:515];
			lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= rcnode_189to190_rc0_cmp56_0_NO_SHIFT_REG[578:547];
			branch_compare_result_NO_SHIFT_REG <= local_bb5_c2_exe9;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module convLayer_basic_block_6
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_global_size_2,
		input [63:0] 		input_outputFeatureMap,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_0,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_1,
		input 		valid_in,
		output 		stall_out,
		input 		input_cmp56,
		input 		input_var_,
		input [31:0] 		input_memcoalesce_param_extrValue_6,
		input [31:0] 		input_memcoalesce_param_extrValue_3,
		input 		input_cmp1430,
		input 		input_var__u35,
		input 		input__phi_decision_xor118,
		input [31:0] 		input_ld_,
		input 		input_cmp1824,
		input 		input__phi_decision_xor119_or,
		input [31:0] 		input_memcoalesce_param_extrValue_5,
		input [31:0] 		input_memcoalesce_param_extrValue_6148,
		input [31:0] 		input_memcoalesce_param_extrValue_1149,
		input [31:0] 		input_memcoalesce_param_extrValue_3150,
		input [31:0] 		input_memcoalesce_param_extrValue_4,
		input [31:0] 		input_channelCounter_058,
		input [63:0] 		input_arrayidx67,
		input [31:0] 		input_mul70,
		input [31:0] 		input_mul46,
		input [31:0] 		input_heightCounter_148,
		input [31:0] 		input_c0_exe1,
		input [31:0] 		input_mul28,
		input [31:0] 		input_var__u36,
		input [31:0] 		input_widthCounter_239,
		input [319:0] 		input_c2_exit_c2_exi9,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out_0,
		input 		stall_in_0,
		output 		lvb_cmp56_0,
		output 		lvb_var__0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_3_0,
		output 		lvb_cmp1430_0,
		output 		lvb_var__u35_0,
		output 		lvb__phi_decision_xor118_0,
		output [31:0] 		lvb_ld__0,
		output 		lvb_cmp1824_0,
		output 		lvb__phi_decision_xor119_or_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_5_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6148_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_1149_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_3150_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_4_0,
		output [31:0] 		lvb_channelCounter_058_0,
		output [63:0] 		lvb_arrayidx67_0,
		output [31:0] 		lvb_mul70_0,
		output [31:0] 		lvb_mul46_0,
		output [31:0] 		lvb_heightCounter_148_0,
		output [31:0] 		lvb_c0_exe1_0,
		output [31:0] 		lvb_mul28_0,
		output [31:0] 		lvb_bb6_select74_0,
		output [31:0] 		lvb_bb6_add81_0,
		output [31:0] 		lvb_input_global_id_1_0,
		output [31:0] 		lvb_input_global_id_2_0,
		output [31:0] 		lvb_input_acl_hw_wg_id_0,
		output 		valid_out_1,
		input 		stall_in_1,
		output 		lvb_cmp56_1,
		output 		lvb_var__1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_3_1,
		output 		lvb_cmp1430_1,
		output 		lvb_var__u35_1,
		output 		lvb__phi_decision_xor118_1,
		output [31:0] 		lvb_ld__1,
		output 		lvb_cmp1824_1,
		output 		lvb__phi_decision_xor119_or_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_5_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6148_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_1149_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_3150_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_4_1,
		output [31:0] 		lvb_channelCounter_058_1,
		output [63:0] 		lvb_arrayidx67_1,
		output [31:0] 		lvb_mul70_1,
		output [31:0] 		lvb_mul46_1,
		output [31:0] 		lvb_heightCounter_148_1,
		output [31:0] 		lvb_c0_exe1_1,
		output [31:0] 		lvb_mul28_1,
		output [31:0] 		lvb_bb6_select74_1,
		output [31:0] 		lvb_bb6_add81_1,
		output [31:0] 		lvb_input_global_id_1_1,
		output [31:0] 		lvb_input_global_id_2_1,
		output [31:0] 		lvb_input_acl_hw_wg_id_1,
		input [31:0] 		workgroup_size,
		input 		start,
		output 		avm_local_bb6_ld__enable,
		input [511:0] 		avm_local_bb6_ld__readdata,
		input 		avm_local_bb6_ld__readdatavalid,
		input 		avm_local_bb6_ld__waitrequest,
		output [31:0] 		avm_local_bb6_ld__address,
		output 		avm_local_bb6_ld__read,
		output 		avm_local_bb6_ld__write,
		input 		avm_local_bb6_ld__writeack,
		output [511:0] 		avm_local_bb6_ld__writedata,
		output [63:0] 		avm_local_bb6_ld__byteenable,
		output [4:0] 		avm_local_bb6_ld__burstcount,
		output 		local_bb6_ld__active,
		input 		clock2x,
		output 		avm_local_bb6_st_c0_exe120_enable,
		input [511:0] 		avm_local_bb6_st_c0_exe120_readdata,
		input 		avm_local_bb6_st_c0_exe120_readdatavalid,
		input 		avm_local_bb6_st_c0_exe120_waitrequest,
		output [31:0] 		avm_local_bb6_st_c0_exe120_address,
		output 		avm_local_bb6_st_c0_exe120_read,
		output 		avm_local_bb6_st_c0_exe120_write,
		input 		avm_local_bb6_st_c0_exe120_writeack,
		output [511:0] 		avm_local_bb6_st_c0_exe120_writedata,
		output [63:0] 		avm_local_bb6_st_c0_exe120_byteenable,
		output [4:0] 		avm_local_bb6_st_c0_exe120_burstcount,
		output 		local_bb6_st_c0_exe120_active
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((valid_out_0 & valid_out_1) & ~((stall_in_0 | stall_in_1)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_node_stall_in_4;
 reg merge_node_valid_out_4_NO_SHIFT_REG;
wire merge_node_stall_in_5;
 reg merge_node_valid_out_5_NO_SHIFT_REG;
wire merge_node_stall_in_6;
 reg merge_node_valid_out_6_NO_SHIFT_REG;
wire merge_node_stall_in_7;
 reg merge_node_valid_out_7_NO_SHIFT_REG;
wire merge_node_stall_in_8;
 reg merge_node_valid_out_8_NO_SHIFT_REG;
wire merge_node_stall_in_9;
 reg merge_node_valid_out_9_NO_SHIFT_REG;
wire merge_node_stall_in_10;
 reg merge_node_valid_out_10_NO_SHIFT_REG;
wire merge_node_stall_in_11;
 reg merge_node_valid_out_11_NO_SHIFT_REG;
wire merge_node_stall_in_12;
 reg merge_node_valid_out_12_NO_SHIFT_REG;
wire merge_node_stall_in_13;
 reg merge_node_valid_out_13_NO_SHIFT_REG;
wire merge_node_stall_in_14;
 reg merge_node_valid_out_14_NO_SHIFT_REG;
wire merge_node_stall_in_15;
 reg merge_node_valid_out_15_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg input_cmp56_staging_reg_NO_SHIFT_REG;
 reg input_var__staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_3_staging_reg_NO_SHIFT_REG;
 reg input_cmp1430_staging_reg_NO_SHIFT_REG;
 reg input_var__u35_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor118_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__staging_reg_NO_SHIFT_REG;
 reg input_cmp1824_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor119_or_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_5_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6148_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_1149_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_3150_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_4_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_058_staging_reg_NO_SHIFT_REG;
 reg [63:0] input_arrayidx67_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul70_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul46_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_heightCounter_148_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul28_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__u36_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_widthCounter_239_staging_reg_NO_SHIFT_REG;
 reg [319:0] input_c2_exit_c2_exi9_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg local_lvm_cmp56_NO_SHIFT_REG;
 reg local_lvm_var__NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG;
 reg local_lvm_cmp1430_NO_SHIFT_REG;
 reg local_lvm_var__u35_NO_SHIFT_REG;
 reg local_lvm__phi_decision_xor118_NO_SHIFT_REG;
 reg [31:0] local_lvm_ld__NO_SHIFT_REG;
 reg local_lvm_cmp1824_NO_SHIFT_REG;
 reg local_lvm__phi_decision_xor119_or_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG;
 reg [31:0] local_lvm_channelCounter_058_NO_SHIFT_REG;
 reg [63:0] local_lvm_arrayidx67_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul70_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul46_NO_SHIFT_REG;
 reg [31:0] local_lvm_heightCounter_148_NO_SHIFT_REG;
 reg [31:0] local_lvm_c0_exe1_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul28_NO_SHIFT_REG;
 reg [31:0] local_lvm_var__u36_NO_SHIFT_REG;
 reg [31:0] local_lvm_widthCounter_239_NO_SHIFT_REG;
 reg [319:0] local_lvm_c2_exit_c2_exi9_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG) | (merge_node_stall_in_4 & merge_node_valid_out_4_NO_SHIFT_REG) | (merge_node_stall_in_5 & merge_node_valid_out_5_NO_SHIFT_REG) | (merge_node_stall_in_6 & merge_node_valid_out_6_NO_SHIFT_REG) | (merge_node_stall_in_7 & merge_node_valid_out_7_NO_SHIFT_REG) | (merge_node_stall_in_8 & merge_node_valid_out_8_NO_SHIFT_REG) | (merge_node_stall_in_9 & merge_node_valid_out_9_NO_SHIFT_REG) | (merge_node_stall_in_10 & merge_node_valid_out_10_NO_SHIFT_REG) | (merge_node_stall_in_11 & merge_node_valid_out_11_NO_SHIFT_REG) | (merge_node_stall_in_12 & merge_node_valid_out_12_NO_SHIFT_REG) | (merge_node_stall_in_13 & merge_node_valid_out_13_NO_SHIFT_REG) | (merge_node_stall_in_14 & merge_node_valid_out_14_NO_SHIFT_REG) | (merge_node_stall_in_15 & merge_node_valid_out_15_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_cmp56_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_3_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1430_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u35_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor118_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1824_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor119_or_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_5_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6148_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_1149_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_3150_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_4_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_058_staging_reg_NO_SHIFT_REG <= 'x;
		input_arrayidx67_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul70_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul46_staging_reg_NO_SHIFT_REG <= 'x;
		input_heightCounter_148_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe1_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul28_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u36_staging_reg_NO_SHIFT_REG <= 'x;
		input_widthCounter_239_staging_reg_NO_SHIFT_REG <= 'x;
		input_c2_exit_c2_exi9_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_cmp56_staging_reg_NO_SHIFT_REG <= input_cmp56;
				input_var__staging_reg_NO_SHIFT_REG <= input_var_;
				input_memcoalesce_param_extrValue_6_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6;
				input_memcoalesce_param_extrValue_3_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3;
				input_cmp1430_staging_reg_NO_SHIFT_REG <= input_cmp1430;
				input_var__u35_staging_reg_NO_SHIFT_REG <= input_var__u35;
				input__phi_decision_xor118_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor118;
				input_ld__staging_reg_NO_SHIFT_REG <= input_ld_;
				input_cmp1824_staging_reg_NO_SHIFT_REG <= input_cmp1824;
				input__phi_decision_xor119_or_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor119_or;
				input_memcoalesce_param_extrValue_5_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5;
				input_memcoalesce_param_extrValue_6148_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148;
				input_memcoalesce_param_extrValue_1149_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149;
				input_memcoalesce_param_extrValue_3150_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150;
				input_memcoalesce_param_extrValue_4_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4;
				input_channelCounter_058_staging_reg_NO_SHIFT_REG <= input_channelCounter_058;
				input_arrayidx67_staging_reg_NO_SHIFT_REG <= input_arrayidx67;
				input_mul70_staging_reg_NO_SHIFT_REG <= input_mul70;
				input_mul46_staging_reg_NO_SHIFT_REG <= input_mul46;
				input_heightCounter_148_staging_reg_NO_SHIFT_REG <= input_heightCounter_148;
				input_c0_exe1_staging_reg_NO_SHIFT_REG <= input_c0_exe1;
				input_mul28_staging_reg_NO_SHIFT_REG <= input_mul28;
				input_var__u36_staging_reg_NO_SHIFT_REG <= input_var__u36;
				input_widthCounter_239_staging_reg_NO_SHIFT_REG <= input_widthCounter_239;
				input_c2_exit_c2_exi9_staging_reg_NO_SHIFT_REG <= input_c2_exit_c2_exi9;
				input_global_id_1_staging_reg_NO_SHIFT_REG <= input_global_id_1;
				input_global_id_2_staging_reg_NO_SHIFT_REG <= input_global_id_2;
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_cmp56_NO_SHIFT_REG <= input_cmp56_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1430_NO_SHIFT_REG <= input_cmp1430_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u35_NO_SHIFT_REG <= input_var__u35_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor118_NO_SHIFT_REG <= input__phi_decision_xor118_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1824_NO_SHIFT_REG <= input_cmp1824_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor119_or_NO_SHIFT_REG <= input__phi_decision_xor119_or_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_058_NO_SHIFT_REG <= input_channelCounter_058_staging_reg_NO_SHIFT_REG;
					local_lvm_arrayidx67_NO_SHIFT_REG <= input_arrayidx67_staging_reg_NO_SHIFT_REG;
					local_lvm_mul70_NO_SHIFT_REG <= input_mul70_staging_reg_NO_SHIFT_REG;
					local_lvm_mul46_NO_SHIFT_REG <= input_mul46_staging_reg_NO_SHIFT_REG;
					local_lvm_heightCounter_148_NO_SHIFT_REG <= input_heightCounter_148_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1_staging_reg_NO_SHIFT_REG;
					local_lvm_mul28_NO_SHIFT_REG <= input_mul28_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u36_NO_SHIFT_REG <= input_var__u36_staging_reg_NO_SHIFT_REG;
					local_lvm_widthCounter_239_NO_SHIFT_REG <= input_widthCounter_239_staging_reg_NO_SHIFT_REG;
					local_lvm_c2_exit_c2_exi9_NO_SHIFT_REG <= input_c2_exit_c2_exi9_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_cmp56_NO_SHIFT_REG <= input_cmp56;
					local_lvm_var__NO_SHIFT_REG <= input_var_;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6;
					local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3;
					local_lvm_cmp1430_NO_SHIFT_REG <= input_cmp1430;
					local_lvm_var__u35_NO_SHIFT_REG <= input_var__u35;
					local_lvm__phi_decision_xor118_NO_SHIFT_REG <= input__phi_decision_xor118;
					local_lvm_ld__NO_SHIFT_REG <= input_ld_;
					local_lvm_cmp1824_NO_SHIFT_REG <= input_cmp1824;
					local_lvm__phi_decision_xor119_or_NO_SHIFT_REG <= input__phi_decision_xor119_or;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5;
					local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148;
					local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149;
					local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150;
					local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4;
					local_lvm_channelCounter_058_NO_SHIFT_REG <= input_channelCounter_058;
					local_lvm_arrayidx67_NO_SHIFT_REG <= input_arrayidx67;
					local_lvm_mul70_NO_SHIFT_REG <= input_mul70;
					local_lvm_mul46_NO_SHIFT_REG <= input_mul46;
					local_lvm_heightCounter_148_NO_SHIFT_REG <= input_heightCounter_148;
					local_lvm_c0_exe1_NO_SHIFT_REG <= input_c0_exe1;
					local_lvm_mul28_NO_SHIFT_REG <= input_mul28;
					local_lvm_var__u36_NO_SHIFT_REG <= input_var__u36;
					local_lvm_widthCounter_239_NO_SHIFT_REG <= input_widthCounter_239;
					local_lvm_c2_exit_c2_exi9_NO_SHIFT_REG <= input_c2_exit_c2_exi9;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_5_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_6_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_7_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_8_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_9_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_10_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_11_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_12_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_13_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_14_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_15_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_4_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_5_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_6_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_7_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_8_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_9_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_10_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_11_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_12_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_13_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_14_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_15_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_4))
			begin
				merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_5))
			begin
				merge_node_valid_out_5_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_6))
			begin
				merge_node_valid_out_6_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_7))
			begin
				merge_node_valid_out_7_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_8))
			begin
				merge_node_valid_out_8_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_9))
			begin
				merge_node_valid_out_9_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_10))
			begin
				merge_node_valid_out_10_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_11))
			begin
				merge_node_valid_out_11_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_12))
			begin
				merge_node_valid_out_12_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_13))
			begin
				merge_node_valid_out_13_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_14))
			begin
				merge_node_valid_out_14_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_15))
			begin
				merge_node_valid_out_15_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(*)
begin
	merge_node_valid_out_2_NO_SHIFT_REG = merge_node_valid_out_1_NO_SHIFT_REG;
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb6_c2_exe2_valid_out;
wire local_bb6_c2_exe2_stall_in;
wire local_bb6_c2_exe2_inputs_ready;
wire local_bb6_c2_exe2_stall_local;
wire [31:0] local_bb6_c2_exe2;

assign local_bb6_c2_exe2_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb6_c2_exe2[31:0] = local_lvm_c2_exit_c2_exi9_NO_SHIFT_REG[95:64];
assign local_bb6_c2_exe2_valid_out = local_bb6_c2_exe2_inputs_ready;
assign local_bb6_c2_exe2_stall_local = local_bb6_c2_exe2_stall_in;
assign merge_node_stall_in_0 = (|local_bb6_c2_exe2_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb6_c2_exe1_stall_local;
wire [31:0] local_bb6_c2_exe1;

assign local_bb6_c2_exe1[31:0] = local_lvm_c2_exit_c2_exi9_NO_SHIFT_REG[63:32];

// This section implements a registered operation.
// 
wire local_bb6_ld__inputs_ready;
 reg local_bb6_ld__valid_out_NO_SHIFT_REG;
wire local_bb6_ld__stall_in;
wire local_bb6_ld__output_regs_ready;
wire local_bb6_ld__fu_stall_out;
wire local_bb6_ld__fu_valid_out;
wire [31:0] local_bb6_ld__lsu_dataout;
 reg [31:0] local_bb6_ld__NO_SHIFT_REG;
wire local_bb6_ld__causedstall;

lsu_top lsu_local_bb6_ld_ (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb6_ld__fu_stall_out),
	.i_valid(local_bb6_ld__inputs_ready),
	.i_address((local_lvm_arrayidx67_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFFFC)),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(local_lvm__phi_decision_xor118_NO_SHIFT_REG),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb6_ld__output_regs_ready)),
	.o_valid(local_bb6_ld__fu_valid_out),
	.o_readdata(local_bb6_ld__lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb6_ld__active),
	.avm_address(avm_local_bb6_ld__address),
	.avm_read(avm_local_bb6_ld__read),
	.avm_enable(avm_local_bb6_ld__enable),
	.avm_readdata(avm_local_bb6_ld__readdata),
	.avm_write(avm_local_bb6_ld__write),
	.avm_writeack(avm_local_bb6_ld__writeack),
	.avm_burstcount(avm_local_bb6_ld__burstcount),
	.avm_writedata(avm_local_bb6_ld__writedata),
	.avm_byteenable(avm_local_bb6_ld__byteenable),
	.avm_waitrequest(avm_local_bb6_ld__waitrequest),
	.avm_readdatavalid(avm_local_bb6_ld__readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb6_ld_.AWIDTH = 32;
defparam lsu_local_bb6_ld_.WIDTH_BYTES = 4;
defparam lsu_local_bb6_ld_.MWIDTH_BYTES = 64;
defparam lsu_local_bb6_ld_.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb6_ld_.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb6_ld_.READ = 1;
defparam lsu_local_bb6_ld_.ATOMIC = 0;
defparam lsu_local_bb6_ld_.WIDTH = 32;
defparam lsu_local_bb6_ld_.MWIDTH = 512;
defparam lsu_local_bb6_ld_.ATOMIC_WIDTH = 3;
defparam lsu_local_bb6_ld_.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb6_ld_.KERNEL_SIDE_MEM_LATENCY = 160;
defparam lsu_local_bb6_ld_.MEMORY_SIDE_MEM_LATENCY = 71;
defparam lsu_local_bb6_ld_.USE_WRITE_ACK = 0;
defparam lsu_local_bb6_ld_.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb6_ld_.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb6_ld_.NUMBER_BANKS = 1;
defparam lsu_local_bb6_ld_.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb6_ld_.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb6_ld_.USEINPUTFIFO = 0;
defparam lsu_local_bb6_ld_.USECACHING = 0;
defparam lsu_local_bb6_ld_.USEOUTPUTFIFO = 1;
defparam lsu_local_bb6_ld_.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb6_ld_.ADDRSPACE = 1;
defparam lsu_local_bb6_ld_.STYLE = "BURST-COALESCED";

assign local_bb6_ld__inputs_ready = merge_node_valid_out_3_NO_SHIFT_REG;
assign local_bb6_ld__output_regs_ready = (&(~(local_bb6_ld__valid_out_NO_SHIFT_REG) | ~(local_bb6_ld__stall_in)));
assign merge_node_stall_in_3 = (local_bb6_ld__fu_stall_out | ~(local_bb6_ld__inputs_ready));
assign local_bb6_ld__causedstall = (local_bb6_ld__inputs_ready && (local_bb6_ld__fu_stall_out && !(~(local_bb6_ld__output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_ld__NO_SHIFT_REG <= 'x;
		local_bb6_ld__valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_ld__output_regs_ready)
		begin
			local_bb6_ld__NO_SHIFT_REG <= local_bb6_ld__lsu_dataout;
			local_bb6_ld__valid_out_NO_SHIFT_REG <= local_bb6_ld__fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_ld__stall_in))
			begin
				local_bb6_ld__valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 330
//  * capacity = 330
 logic rnode_1to331_input_global_size_2_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to331_input_global_size_2_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to331_input_global_size_2_0_reg_331_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to331_input_global_size_2_0_valid_out_reg_331_NO_SHIFT_REG;
 logic rnode_1to331_input_global_size_2_0_stall_in_reg_331_NO_SHIFT_REG;
 logic rnode_1to331_input_global_size_2_0_stall_out_reg_331_NO_SHIFT_REG;

acl_data_fifo rnode_1to331_input_global_size_2_0_reg_331_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to331_input_global_size_2_0_reg_331_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to331_input_global_size_2_0_stall_in_reg_331_NO_SHIFT_REG),
	.valid_out(rnode_1to331_input_global_size_2_0_valid_out_reg_331_NO_SHIFT_REG),
	.stall_out(rnode_1to331_input_global_size_2_0_stall_out_reg_331_NO_SHIFT_REG),
	.data_in(),
	.data_out()
);

defparam rnode_1to331_input_global_size_2_0_reg_331_fifo.DEPTH = 331;
defparam rnode_1to331_input_global_size_2_0_reg_331_fifo.DATA_WIDTH = 0;
defparam rnode_1to331_input_global_size_2_0_reg_331_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to331_input_global_size_2_0_reg_331_fifo.IMPL = "ram";

assign rnode_1to331_input_global_size_2_0_reg_331_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_4_NO_SHIFT_REG;
assign merge_node_stall_in_4 = rnode_1to331_input_global_size_2_0_stall_out_reg_331_NO_SHIFT_REG;
assign rnode_1to331_input_global_size_2_0_stall_in_reg_331_NO_SHIFT_REG = rnode_1to331_input_global_size_2_0_stall_in_NO_SHIFT_REG;
assign rnode_1to331_input_global_size_2_0_valid_out_NO_SHIFT_REG = rnode_1to331_input_global_size_2_0_valid_out_reg_331_NO_SHIFT_REG;

// Register node:
//  * latency = 170
//  * capacity = 170
 logic rnode_1to171_c0_exe1_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to171_c0_exe1_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to171_c0_exe1_0_NO_SHIFT_REG;
 logic rnode_1to171_c0_exe1_0_reg_171_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to171_c0_exe1_0_reg_171_NO_SHIFT_REG;
 logic rnode_1to171_c0_exe1_0_valid_out_reg_171_NO_SHIFT_REG;
 logic rnode_1to171_c0_exe1_0_stall_in_reg_171_NO_SHIFT_REG;
 logic rnode_1to171_c0_exe1_0_stall_out_reg_171_NO_SHIFT_REG;

acl_data_fifo rnode_1to171_c0_exe1_0_reg_171_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to171_c0_exe1_0_reg_171_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to171_c0_exe1_0_stall_in_reg_171_NO_SHIFT_REG),
	.valid_out(rnode_1to171_c0_exe1_0_valid_out_reg_171_NO_SHIFT_REG),
	.stall_out(rnode_1to171_c0_exe1_0_stall_out_reg_171_NO_SHIFT_REG),
	.data_in(local_lvm_c0_exe1_NO_SHIFT_REG),
	.data_out(rnode_1to171_c0_exe1_0_reg_171_NO_SHIFT_REG)
);

defparam rnode_1to171_c0_exe1_0_reg_171_fifo.DEPTH = 171;
defparam rnode_1to171_c0_exe1_0_reg_171_fifo.DATA_WIDTH = 32;
defparam rnode_1to171_c0_exe1_0_reg_171_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to171_c0_exe1_0_reg_171_fifo.IMPL = "ram";

assign rnode_1to171_c0_exe1_0_reg_171_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_5_NO_SHIFT_REG;
assign merge_node_stall_in_5 = rnode_1to171_c0_exe1_0_stall_out_reg_171_NO_SHIFT_REG;
assign rnode_1to171_c0_exe1_0_NO_SHIFT_REG = rnode_1to171_c0_exe1_0_reg_171_NO_SHIFT_REG;
assign rnode_1to171_c0_exe1_0_stall_in_reg_171_NO_SHIFT_REG = rnode_1to171_c0_exe1_0_stall_in_NO_SHIFT_REG;
assign rnode_1to171_c0_exe1_0_valid_out_NO_SHIFT_REG = rnode_1to171_c0_exe1_0_valid_out_reg_171_NO_SHIFT_REG;

// Register node:
//  * latency = 170
//  * capacity = 170
 logic rnode_1to171_widthCounter_239_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to171_widthCounter_239_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to171_widthCounter_239_0_NO_SHIFT_REG;
 logic rnode_1to171_widthCounter_239_0_reg_171_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to171_widthCounter_239_0_reg_171_NO_SHIFT_REG;
 logic rnode_1to171_widthCounter_239_0_valid_out_reg_171_NO_SHIFT_REG;
 logic rnode_1to171_widthCounter_239_0_stall_in_reg_171_NO_SHIFT_REG;
 logic rnode_1to171_widthCounter_239_0_stall_out_reg_171_NO_SHIFT_REG;

acl_data_fifo rnode_1to171_widthCounter_239_0_reg_171_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to171_widthCounter_239_0_reg_171_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to171_widthCounter_239_0_stall_in_reg_171_NO_SHIFT_REG),
	.valid_out(rnode_1to171_widthCounter_239_0_valid_out_reg_171_NO_SHIFT_REG),
	.stall_out(rnode_1to171_widthCounter_239_0_stall_out_reg_171_NO_SHIFT_REG),
	.data_in(local_lvm_widthCounter_239_NO_SHIFT_REG),
	.data_out(rnode_1to171_widthCounter_239_0_reg_171_NO_SHIFT_REG)
);

defparam rnode_1to171_widthCounter_239_0_reg_171_fifo.DEPTH = 171;
defparam rnode_1to171_widthCounter_239_0_reg_171_fifo.DATA_WIDTH = 32;
defparam rnode_1to171_widthCounter_239_0_reg_171_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to171_widthCounter_239_0_reg_171_fifo.IMPL = "ram";

assign rnode_1to171_widthCounter_239_0_reg_171_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_6_NO_SHIFT_REG;
assign merge_node_stall_in_6 = rnode_1to171_widthCounter_239_0_stall_out_reg_171_NO_SHIFT_REG;
assign rnode_1to171_widthCounter_239_0_NO_SHIFT_REG = rnode_1to171_widthCounter_239_0_reg_171_NO_SHIFT_REG;
assign rnode_1to171_widthCounter_239_0_stall_in_reg_171_NO_SHIFT_REG = rnode_1to171_widthCounter_239_0_stall_in_NO_SHIFT_REG;
assign rnode_1to171_widthCounter_239_0_valid_out_NO_SHIFT_REG = rnode_1to171_widthCounter_239_0_valid_out_reg_171_NO_SHIFT_REG;

// Register node:
//  * latency = 159
//  * capacity = 159
 logic rnode_1to160_cmp1430_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to160_cmp1430_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to160_cmp1430_0_NO_SHIFT_REG;
 logic rnode_1to160_cmp1430_0_reg_160_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to160_cmp1430_0_reg_160_NO_SHIFT_REG;
 logic rnode_1to160_cmp1430_0_valid_out_reg_160_NO_SHIFT_REG;
 logic rnode_1to160_cmp1430_0_stall_in_reg_160_NO_SHIFT_REG;
 logic rnode_1to160_cmp1430_0_stall_out_reg_160_NO_SHIFT_REG;

acl_data_fifo rnode_1to160_cmp1430_0_reg_160_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to160_cmp1430_0_reg_160_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to160_cmp1430_0_stall_in_reg_160_NO_SHIFT_REG),
	.valid_out(rnode_1to160_cmp1430_0_valid_out_reg_160_NO_SHIFT_REG),
	.stall_out(rnode_1to160_cmp1430_0_stall_out_reg_160_NO_SHIFT_REG),
	.data_in(local_lvm_cmp1430_NO_SHIFT_REG),
	.data_out(rnode_1to160_cmp1430_0_reg_160_NO_SHIFT_REG)
);

defparam rnode_1to160_cmp1430_0_reg_160_fifo.DEPTH = 160;
defparam rnode_1to160_cmp1430_0_reg_160_fifo.DATA_WIDTH = 1;
defparam rnode_1to160_cmp1430_0_reg_160_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to160_cmp1430_0_reg_160_fifo.IMPL = "ram";

assign rnode_1to160_cmp1430_0_reg_160_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_7_NO_SHIFT_REG;
assign merge_node_stall_in_7 = rnode_1to160_cmp1430_0_stall_out_reg_160_NO_SHIFT_REG;
assign rnode_1to160_cmp1430_0_NO_SHIFT_REG = rnode_1to160_cmp1430_0_reg_160_NO_SHIFT_REG;
assign rnode_1to160_cmp1430_0_stall_in_reg_160_NO_SHIFT_REG = rnode_1to160_cmp1430_0_stall_in_NO_SHIFT_REG;
assign rnode_1to160_cmp1430_0_valid_out_NO_SHIFT_REG = rnode_1to160_cmp1430_0_valid_out_reg_160_NO_SHIFT_REG;

// Register node:
//  * latency = 331
//  * capacity = 331
 logic rnode_1to332_memcoalesce_param_extrValue_6_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to332_memcoalesce_param_extrValue_6_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to332_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG;
 logic rnode_1to332_memcoalesce_param_extrValue_6_0_reg_332_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to332_memcoalesce_param_extrValue_6_0_reg_332_NO_SHIFT_REG;
 logic rnode_1to332_memcoalesce_param_extrValue_6_0_valid_out_reg_332_NO_SHIFT_REG;
 logic rnode_1to332_memcoalesce_param_extrValue_6_0_stall_in_reg_332_NO_SHIFT_REG;
 logic rnode_1to332_memcoalesce_param_extrValue_6_0_stall_out_reg_332_NO_SHIFT_REG;

acl_data_fifo rnode_1to332_memcoalesce_param_extrValue_6_0_reg_332_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to332_memcoalesce_param_extrValue_6_0_reg_332_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to332_memcoalesce_param_extrValue_6_0_stall_in_reg_332_NO_SHIFT_REG),
	.valid_out(rnode_1to332_memcoalesce_param_extrValue_6_0_valid_out_reg_332_NO_SHIFT_REG),
	.stall_out(rnode_1to332_memcoalesce_param_extrValue_6_0_stall_out_reg_332_NO_SHIFT_REG),
	.data_in(local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG),
	.data_out(rnode_1to332_memcoalesce_param_extrValue_6_0_reg_332_NO_SHIFT_REG)
);

defparam rnode_1to332_memcoalesce_param_extrValue_6_0_reg_332_fifo.DEPTH = 332;
defparam rnode_1to332_memcoalesce_param_extrValue_6_0_reg_332_fifo.DATA_WIDTH = 32;
defparam rnode_1to332_memcoalesce_param_extrValue_6_0_reg_332_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to332_memcoalesce_param_extrValue_6_0_reg_332_fifo.IMPL = "ram";

assign rnode_1to332_memcoalesce_param_extrValue_6_0_reg_332_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_8_NO_SHIFT_REG;
assign merge_node_stall_in_8 = rnode_1to332_memcoalesce_param_extrValue_6_0_stall_out_reg_332_NO_SHIFT_REG;
assign rnode_1to332_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG = rnode_1to332_memcoalesce_param_extrValue_6_0_reg_332_NO_SHIFT_REG;
assign rnode_1to332_memcoalesce_param_extrValue_6_0_stall_in_reg_332_NO_SHIFT_REG = rnode_1to332_memcoalesce_param_extrValue_6_0_stall_in_NO_SHIFT_REG;
assign rnode_1to332_memcoalesce_param_extrValue_6_0_valid_out_NO_SHIFT_REG = rnode_1to332_memcoalesce_param_extrValue_6_0_valid_out_reg_332_NO_SHIFT_REG;

// Register node:
//  * latency = 172
//  * capacity = 172
 logic rnode_1to173__phi_decision_xor118_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to173__phi_decision_xor118_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to173__phi_decision_xor118_0_NO_SHIFT_REG;
 logic rnode_1to173__phi_decision_xor118_0_reg_173_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to173__phi_decision_xor118_0_reg_173_NO_SHIFT_REG;
 logic rnode_1to173__phi_decision_xor118_0_valid_out_reg_173_NO_SHIFT_REG;
 logic rnode_1to173__phi_decision_xor118_0_stall_in_reg_173_NO_SHIFT_REG;
 logic rnode_1to173__phi_decision_xor118_0_stall_out_reg_173_NO_SHIFT_REG;
wire [34:0] rci_rcnode_1to333_rc10_var__u35_0_reg_1;

acl_data_fifo rnode_1to173__phi_decision_xor118_0_reg_173_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to173__phi_decision_xor118_0_reg_173_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to173__phi_decision_xor118_0_stall_in_reg_173_NO_SHIFT_REG),
	.valid_out(rnode_1to173__phi_decision_xor118_0_valid_out_reg_173_NO_SHIFT_REG),
	.stall_out(rnode_1to173__phi_decision_xor118_0_stall_out_reg_173_NO_SHIFT_REG),
	.data_in(local_lvm__phi_decision_xor118_NO_SHIFT_REG),
	.data_out(rnode_1to173__phi_decision_xor118_0_reg_173_NO_SHIFT_REG)
);

defparam rnode_1to173__phi_decision_xor118_0_reg_173_fifo.DEPTH = 173;
defparam rnode_1to173__phi_decision_xor118_0_reg_173_fifo.DATA_WIDTH = 1;
defparam rnode_1to173__phi_decision_xor118_0_reg_173_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to173__phi_decision_xor118_0_reg_173_fifo.IMPL = "ram";

assign rnode_1to173__phi_decision_xor118_0_reg_173_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_9_NO_SHIFT_REG;
assign merge_node_stall_in_9 = rnode_1to173__phi_decision_xor118_0_stall_out_reg_173_NO_SHIFT_REG;
assign rnode_1to173__phi_decision_xor118_0_NO_SHIFT_REG = rnode_1to173__phi_decision_xor118_0_reg_173_NO_SHIFT_REG;
assign rnode_1to173__phi_decision_xor118_0_stall_in_reg_173_NO_SHIFT_REG = rnode_1to173__phi_decision_xor118_0_stall_in_NO_SHIFT_REG;
assign rnode_1to173__phi_decision_xor118_0_valid_out_NO_SHIFT_REG = rnode_1to173__phi_decision_xor118_0_valid_out_reg_173_NO_SHIFT_REG;
assign rci_rcnode_1to333_rc10_var__u35_0_reg_1[0] = local_lvm_var__u35_NO_SHIFT_REG;
assign rci_rcnode_1to333_rc10_var__u35_0_reg_1[1] = local_lvm_cmp56_NO_SHIFT_REG;
assign rci_rcnode_1to333_rc10_var__u35_0_reg_1[2] = local_lvm_var__NO_SHIFT_REG;
assign rci_rcnode_1to333_rc10_var__u35_0_reg_1[34:3] = local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG;

// Register node:
//  * latency = 332
//  * capacity = 332
 logic rcnode_1to333_rc10_var__u35_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to333_rc10_var__u35_0_stall_in_NO_SHIFT_REG;
 logic [34:0] rcnode_1to333_rc10_var__u35_0_NO_SHIFT_REG;
 logic rcnode_1to333_rc10_var__u35_0_reg_333_inputs_ready_NO_SHIFT_REG;
 logic [34:0] rcnode_1to333_rc10_var__u35_0_reg_333_NO_SHIFT_REG;
 logic rcnode_1to333_rc10_var__u35_0_valid_out_reg_333_NO_SHIFT_REG;
 logic rcnode_1to333_rc10_var__u35_0_stall_in_reg_333_NO_SHIFT_REG;
 logic rcnode_1to333_rc10_var__u35_0_stall_out_reg_333_IP_NO_SHIFT_REG;
 logic rcnode_1to333_rc10_var__u35_0_stall_out_reg_333_NO_SHIFT_REG;
wire [65:0] rci_rcnode_1to333_rc11_ld__0_reg_1;

acl_data_fifo rcnode_1to333_rc10_var__u35_0_reg_333_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to333_rc10_var__u35_0_reg_333_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to333_rc10_var__u35_0_stall_in_reg_333_NO_SHIFT_REG),
	.valid_out(rcnode_1to333_rc10_var__u35_0_valid_out_reg_333_NO_SHIFT_REG),
	.stall_out(rcnode_1to333_rc10_var__u35_0_stall_out_reg_333_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to333_rc10_var__u35_0_reg_1),
	.data_out(rcnode_1to333_rc10_var__u35_0_reg_333_NO_SHIFT_REG)
);

defparam rcnode_1to333_rc10_var__u35_0_reg_333_fifo.DEPTH = 333;
defparam rcnode_1to333_rc10_var__u35_0_reg_333_fifo.DATA_WIDTH = 35;
defparam rcnode_1to333_rc10_var__u35_0_reg_333_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to333_rc10_var__u35_0_reg_333_fifo.IMPL = "ram";

assign rcnode_1to333_rc10_var__u35_0_reg_333_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_10_NO_SHIFT_REG;
assign rcnode_1to333_rc10_var__u35_0_stall_out_reg_333_NO_SHIFT_REG = (~(rcnode_1to333_rc10_var__u35_0_reg_333_inputs_ready_NO_SHIFT_REG) | rcnode_1to333_rc10_var__u35_0_stall_out_reg_333_IP_NO_SHIFT_REG);
assign merge_node_stall_in_10 = rcnode_1to333_rc10_var__u35_0_stall_out_reg_333_NO_SHIFT_REG;
assign rcnode_1to333_rc10_var__u35_0_NO_SHIFT_REG = rcnode_1to333_rc10_var__u35_0_reg_333_NO_SHIFT_REG;
assign rcnode_1to333_rc10_var__u35_0_stall_in_reg_333_NO_SHIFT_REG = rcnode_1to333_rc10_var__u35_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to333_rc10_var__u35_0_valid_out_NO_SHIFT_REG = rcnode_1to333_rc10_var__u35_0_valid_out_reg_333_NO_SHIFT_REG;
assign rci_rcnode_1to333_rc11_ld__0_reg_1[31:0] = local_lvm_ld__NO_SHIFT_REG;
assign rci_rcnode_1to333_rc11_ld__0_reg_1[32] = local_lvm_cmp1824_NO_SHIFT_REG;
assign rci_rcnode_1to333_rc11_ld__0_reg_1[33] = local_lvm__phi_decision_xor119_or_NO_SHIFT_REG;
assign rci_rcnode_1to333_rc11_ld__0_reg_1[65:34] = local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;

// Register node:
//  * latency = 332
//  * capacity = 332
 logic rcnode_1to333_rc11_ld__0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to333_rc11_ld__0_stall_in_NO_SHIFT_REG;
 logic [65:0] rcnode_1to333_rc11_ld__0_NO_SHIFT_REG;
 logic rcnode_1to333_rc11_ld__0_reg_333_inputs_ready_NO_SHIFT_REG;
 logic [65:0] rcnode_1to333_rc11_ld__0_reg_333_NO_SHIFT_REG;
 logic rcnode_1to333_rc11_ld__0_valid_out_reg_333_NO_SHIFT_REG;
 logic rcnode_1to333_rc11_ld__0_stall_in_reg_333_NO_SHIFT_REG;
 logic rcnode_1to333_rc11_ld__0_stall_out_reg_333_IP_NO_SHIFT_REG;
 logic rcnode_1to333_rc11_ld__0_stall_out_reg_333_NO_SHIFT_REG;
wire [127:0] rci_rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_reg_1;

acl_data_fifo rcnode_1to333_rc11_ld__0_reg_333_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to333_rc11_ld__0_reg_333_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to333_rc11_ld__0_stall_in_reg_333_NO_SHIFT_REG),
	.valid_out(rcnode_1to333_rc11_ld__0_valid_out_reg_333_NO_SHIFT_REG),
	.stall_out(rcnode_1to333_rc11_ld__0_stall_out_reg_333_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to333_rc11_ld__0_reg_1),
	.data_out(rcnode_1to333_rc11_ld__0_reg_333_NO_SHIFT_REG)
);

defparam rcnode_1to333_rc11_ld__0_reg_333_fifo.DEPTH = 333;
defparam rcnode_1to333_rc11_ld__0_reg_333_fifo.DATA_WIDTH = 66;
defparam rcnode_1to333_rc11_ld__0_reg_333_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to333_rc11_ld__0_reg_333_fifo.IMPL = "ram";

assign rcnode_1to333_rc11_ld__0_reg_333_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_11_NO_SHIFT_REG;
assign rcnode_1to333_rc11_ld__0_stall_out_reg_333_NO_SHIFT_REG = (~(rcnode_1to333_rc11_ld__0_reg_333_inputs_ready_NO_SHIFT_REG) | rcnode_1to333_rc11_ld__0_stall_out_reg_333_IP_NO_SHIFT_REG);
assign merge_node_stall_in_11 = rcnode_1to333_rc11_ld__0_stall_out_reg_333_NO_SHIFT_REG;
assign rcnode_1to333_rc11_ld__0_NO_SHIFT_REG = rcnode_1to333_rc11_ld__0_reg_333_NO_SHIFT_REG;
assign rcnode_1to333_rc11_ld__0_stall_in_reg_333_NO_SHIFT_REG = rcnode_1to333_rc11_ld__0_stall_in_NO_SHIFT_REG;
assign rcnode_1to333_rc11_ld__0_valid_out_NO_SHIFT_REG = rcnode_1to333_rc11_ld__0_valid_out_reg_333_NO_SHIFT_REG;
assign rci_rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_reg_1[31:0] = local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG;
assign rci_rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_reg_1[63:32] = local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG;
assign rci_rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_reg_1[95:64] = local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG;
assign rci_rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_reg_1[127:96] = local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG;

// Register node:
//  * latency = 332
//  * capacity = 332
 logic rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_stall_in_NO_SHIFT_REG;
 logic [127:0] rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_NO_SHIFT_REG;
 logic rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_reg_333_inputs_ready_NO_SHIFT_REG;
 logic [127:0] rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_reg_333_NO_SHIFT_REG;
 logic rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_valid_out_reg_333_NO_SHIFT_REG;
 logic rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_stall_in_reg_333_NO_SHIFT_REG;
 logic rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_stall_out_reg_333_IP_NO_SHIFT_REG;
 logic rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_stall_out_reg_333_NO_SHIFT_REG;
wire [159:0] rci_rcnode_1to333_rc13_channelCounter_058_0_reg_1;

acl_data_fifo rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_reg_333_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_reg_333_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_stall_in_reg_333_NO_SHIFT_REG),
	.valid_out(rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_valid_out_reg_333_NO_SHIFT_REG),
	.stall_out(rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_stall_out_reg_333_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_reg_1),
	.data_out(rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_reg_333_NO_SHIFT_REG)
);

defparam rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_reg_333_fifo.DEPTH = 333;
defparam rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_reg_333_fifo.DATA_WIDTH = 128;
defparam rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_reg_333_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_reg_333_fifo.IMPL = "ram";

assign rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_reg_333_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_12_NO_SHIFT_REG;
assign rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_stall_out_reg_333_NO_SHIFT_REG = (~(rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_reg_333_inputs_ready_NO_SHIFT_REG) | rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_stall_out_reg_333_IP_NO_SHIFT_REG);
assign merge_node_stall_in_12 = rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_stall_out_reg_333_NO_SHIFT_REG;
assign rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_NO_SHIFT_REG = rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_reg_333_NO_SHIFT_REG;
assign rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_stall_in_reg_333_NO_SHIFT_REG = rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_valid_out_NO_SHIFT_REG = rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_valid_out_reg_333_NO_SHIFT_REG;
assign rci_rcnode_1to333_rc13_channelCounter_058_0_reg_1[31:0] = local_lvm_channelCounter_058_NO_SHIFT_REG;
assign rci_rcnode_1to333_rc13_channelCounter_058_0_reg_1[95:32] = (local_lvm_arrayidx67_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFFFC);
assign rci_rcnode_1to333_rc13_channelCounter_058_0_reg_1[127:96] = local_lvm_mul70_NO_SHIFT_REG;
assign rci_rcnode_1to333_rc13_channelCounter_058_0_reg_1[159:128] = local_lvm_mul46_NO_SHIFT_REG;

// Register node:
//  * latency = 332
//  * capacity = 332
 logic rcnode_1to333_rc13_channelCounter_058_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to333_rc13_channelCounter_058_0_stall_in_NO_SHIFT_REG;
 logic [159:0] rcnode_1to333_rc13_channelCounter_058_0_NO_SHIFT_REG;
 logic rcnode_1to333_rc13_channelCounter_058_0_reg_333_inputs_ready_NO_SHIFT_REG;
 logic [159:0] rcnode_1to333_rc13_channelCounter_058_0_reg_333_NO_SHIFT_REG;
 logic rcnode_1to333_rc13_channelCounter_058_0_valid_out_reg_333_NO_SHIFT_REG;
 logic rcnode_1to333_rc13_channelCounter_058_0_stall_in_reg_333_NO_SHIFT_REG;
 logic rcnode_1to333_rc13_channelCounter_058_0_stall_out_reg_333_IP_NO_SHIFT_REG;
 logic rcnode_1to333_rc13_channelCounter_058_0_stall_out_reg_333_NO_SHIFT_REG;
wire [127:0] rci_rcnode_1to333_rc14_heightCounter_148_0_reg_1;

acl_data_fifo rcnode_1to333_rc13_channelCounter_058_0_reg_333_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to333_rc13_channelCounter_058_0_reg_333_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to333_rc13_channelCounter_058_0_stall_in_reg_333_NO_SHIFT_REG),
	.valid_out(rcnode_1to333_rc13_channelCounter_058_0_valid_out_reg_333_NO_SHIFT_REG),
	.stall_out(rcnode_1to333_rc13_channelCounter_058_0_stall_out_reg_333_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to333_rc13_channelCounter_058_0_reg_1),
	.data_out(rcnode_1to333_rc13_channelCounter_058_0_reg_333_NO_SHIFT_REG)
);

defparam rcnode_1to333_rc13_channelCounter_058_0_reg_333_fifo.DEPTH = 333;
defparam rcnode_1to333_rc13_channelCounter_058_0_reg_333_fifo.DATA_WIDTH = 160;
defparam rcnode_1to333_rc13_channelCounter_058_0_reg_333_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to333_rc13_channelCounter_058_0_reg_333_fifo.IMPL = "ram";

assign rcnode_1to333_rc13_channelCounter_058_0_reg_333_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_13_NO_SHIFT_REG;
assign rcnode_1to333_rc13_channelCounter_058_0_stall_out_reg_333_NO_SHIFT_REG = (~(rcnode_1to333_rc13_channelCounter_058_0_reg_333_inputs_ready_NO_SHIFT_REG) | rcnode_1to333_rc13_channelCounter_058_0_stall_out_reg_333_IP_NO_SHIFT_REG);
assign merge_node_stall_in_13 = rcnode_1to333_rc13_channelCounter_058_0_stall_out_reg_333_NO_SHIFT_REG;
assign rcnode_1to333_rc13_channelCounter_058_0_NO_SHIFT_REG = rcnode_1to333_rc13_channelCounter_058_0_reg_333_NO_SHIFT_REG;
assign rcnode_1to333_rc13_channelCounter_058_0_stall_in_reg_333_NO_SHIFT_REG = rcnode_1to333_rc13_channelCounter_058_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to333_rc13_channelCounter_058_0_valid_out_NO_SHIFT_REG = rcnode_1to333_rc13_channelCounter_058_0_valid_out_reg_333_NO_SHIFT_REG;
assign rci_rcnode_1to333_rc14_heightCounter_148_0_reg_1[31:0] = local_lvm_heightCounter_148_NO_SHIFT_REG;
assign rci_rcnode_1to333_rc14_heightCounter_148_0_reg_1[63:32] = local_lvm_mul28_NO_SHIFT_REG;
assign rci_rcnode_1to333_rc14_heightCounter_148_0_reg_1[95:64] = local_lvm_input_global_id_1_NO_SHIFT_REG;
assign rci_rcnode_1to333_rc14_heightCounter_148_0_reg_1[127:96] = local_lvm_input_global_id_2_NO_SHIFT_REG;

// Register node:
//  * latency = 332
//  * capacity = 332
 logic rcnode_1to333_rc14_heightCounter_148_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to333_rc14_heightCounter_148_0_stall_in_NO_SHIFT_REG;
 logic [127:0] rcnode_1to333_rc14_heightCounter_148_0_NO_SHIFT_REG;
 logic rcnode_1to333_rc14_heightCounter_148_0_reg_333_inputs_ready_NO_SHIFT_REG;
 logic [127:0] rcnode_1to333_rc14_heightCounter_148_0_reg_333_NO_SHIFT_REG;
 logic rcnode_1to333_rc14_heightCounter_148_0_valid_out_reg_333_NO_SHIFT_REG;
 logic rcnode_1to333_rc14_heightCounter_148_0_stall_in_reg_333_NO_SHIFT_REG;
 logic rcnode_1to333_rc14_heightCounter_148_0_stall_out_reg_333_IP_NO_SHIFT_REG;
 logic rcnode_1to333_rc14_heightCounter_148_0_stall_out_reg_333_NO_SHIFT_REG;

acl_data_fifo rcnode_1to333_rc14_heightCounter_148_0_reg_333_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to333_rc14_heightCounter_148_0_reg_333_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to333_rc14_heightCounter_148_0_stall_in_reg_333_NO_SHIFT_REG),
	.valid_out(rcnode_1to333_rc14_heightCounter_148_0_valid_out_reg_333_NO_SHIFT_REG),
	.stall_out(rcnode_1to333_rc14_heightCounter_148_0_stall_out_reg_333_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to333_rc14_heightCounter_148_0_reg_1),
	.data_out(rcnode_1to333_rc14_heightCounter_148_0_reg_333_NO_SHIFT_REG)
);

defparam rcnode_1to333_rc14_heightCounter_148_0_reg_333_fifo.DEPTH = 333;
defparam rcnode_1to333_rc14_heightCounter_148_0_reg_333_fifo.DATA_WIDTH = 128;
defparam rcnode_1to333_rc14_heightCounter_148_0_reg_333_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to333_rc14_heightCounter_148_0_reg_333_fifo.IMPL = "ram";

assign rcnode_1to333_rc14_heightCounter_148_0_reg_333_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_14_NO_SHIFT_REG;
assign rcnode_1to333_rc14_heightCounter_148_0_stall_out_reg_333_NO_SHIFT_REG = (~(rcnode_1to333_rc14_heightCounter_148_0_reg_333_inputs_ready_NO_SHIFT_REG) | rcnode_1to333_rc14_heightCounter_148_0_stall_out_reg_333_IP_NO_SHIFT_REG);
assign merge_node_stall_in_14 = rcnode_1to333_rc14_heightCounter_148_0_stall_out_reg_333_NO_SHIFT_REG;
assign rcnode_1to333_rc14_heightCounter_148_0_NO_SHIFT_REG = rcnode_1to333_rc14_heightCounter_148_0_reg_333_NO_SHIFT_REG;
assign rcnode_1to333_rc14_heightCounter_148_0_stall_in_reg_333_NO_SHIFT_REG = rcnode_1to333_rc14_heightCounter_148_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to333_rc14_heightCounter_148_0_valid_out_NO_SHIFT_REG = rcnode_1to333_rc14_heightCounter_148_0_valid_out_reg_333_NO_SHIFT_REG;

// Register node:
//  * latency = 159
//  * capacity = 159
 logic rnode_1to160_bb6_c2_exe2_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to160_bb6_c2_exe2_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to160_bb6_c2_exe2_0_NO_SHIFT_REG;
 logic rnode_1to160_bb6_c2_exe2_0_reg_160_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to160_bb6_c2_exe2_0_reg_160_NO_SHIFT_REG;
 logic rnode_1to160_bb6_c2_exe2_0_valid_out_reg_160_NO_SHIFT_REG;
 logic rnode_1to160_bb6_c2_exe2_0_stall_in_reg_160_NO_SHIFT_REG;
 logic rnode_1to160_bb6_c2_exe2_0_stall_out_reg_160_NO_SHIFT_REG;

acl_data_fifo rnode_1to160_bb6_c2_exe2_0_reg_160_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to160_bb6_c2_exe2_0_reg_160_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to160_bb6_c2_exe2_0_stall_in_reg_160_NO_SHIFT_REG),
	.valid_out(rnode_1to160_bb6_c2_exe2_0_valid_out_reg_160_NO_SHIFT_REG),
	.stall_out(rnode_1to160_bb6_c2_exe2_0_stall_out_reg_160_NO_SHIFT_REG),
	.data_in(local_bb6_c2_exe2),
	.data_out(rnode_1to160_bb6_c2_exe2_0_reg_160_NO_SHIFT_REG)
);

defparam rnode_1to160_bb6_c2_exe2_0_reg_160_fifo.DEPTH = 160;
defparam rnode_1to160_bb6_c2_exe2_0_reg_160_fifo.DATA_WIDTH = 32;
defparam rnode_1to160_bb6_c2_exe2_0_reg_160_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to160_bb6_c2_exe2_0_reg_160_fifo.IMPL = "ram";

assign rnode_1to160_bb6_c2_exe2_0_reg_160_inputs_ready_NO_SHIFT_REG = local_bb6_c2_exe2_valid_out;
assign local_bb6_c2_exe2_stall_in = rnode_1to160_bb6_c2_exe2_0_stall_out_reg_160_NO_SHIFT_REG;
assign rnode_1to160_bb6_c2_exe2_0_NO_SHIFT_REG = rnode_1to160_bb6_c2_exe2_0_reg_160_NO_SHIFT_REG;
assign rnode_1to160_bb6_c2_exe2_0_stall_in_reg_160_NO_SHIFT_REG = rnode_1to160_bb6_c2_exe2_0_stall_in_NO_SHIFT_REG;
assign rnode_1to160_bb6_c2_exe2_0_valid_out_NO_SHIFT_REG = rnode_1to160_bb6_c2_exe2_0_valid_out_reg_160_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_select74_valid_out;
wire local_bb6_select74_stall_in;
wire local_bb6_select74_inputs_ready;
wire local_bb6_select74_stall_local;
wire [31:0] local_bb6_select74;

assign local_bb6_select74_inputs_ready = (merge_node_valid_out_1_NO_SHIFT_REG & merge_node_valid_out_2_NO_SHIFT_REG);
assign local_bb6_select74 = (local_lvm_cmp1430_NO_SHIFT_REG ? local_bb6_c2_exe1 : local_lvm_var__u36_NO_SHIFT_REG);
assign local_bb6_select74_valid_out = local_bb6_select74_inputs_ready;
assign local_bb6_select74_stall_local = local_bb6_select74_stall_in;
assign merge_node_stall_in_1 = (local_bb6_select74_stall_local | ~(local_bb6_select74_inputs_ready));
assign merge_node_stall_in_2 = (local_bb6_select74_stall_local | ~(local_bb6_select74_inputs_ready));

// This section implements a staging register.
// 
wire rstag_161to161_bb6_ld__valid_out;
wire rstag_161to161_bb6_ld__stall_in;
wire rstag_161to161_bb6_ld__inputs_ready;
wire rstag_161to161_bb6_ld__stall_local;
 reg rstag_161to161_bb6_ld__staging_valid_NO_SHIFT_REG;
wire rstag_161to161_bb6_ld__combined_valid;
 reg [31:0] rstag_161to161_bb6_ld__staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_161to161_bb6_ld_;

assign rstag_161to161_bb6_ld__inputs_ready = local_bb6_ld__valid_out_NO_SHIFT_REG;
assign rstag_161to161_bb6_ld_ = (rstag_161to161_bb6_ld__staging_valid_NO_SHIFT_REG ? rstag_161to161_bb6_ld__staging_reg_NO_SHIFT_REG : local_bb6_ld__NO_SHIFT_REG);
assign rstag_161to161_bb6_ld__combined_valid = (rstag_161to161_bb6_ld__staging_valid_NO_SHIFT_REG | rstag_161to161_bb6_ld__inputs_ready);
assign rstag_161to161_bb6_ld__valid_out = rstag_161to161_bb6_ld__combined_valid;
assign rstag_161to161_bb6_ld__stall_local = rstag_161to161_bb6_ld__stall_in;
assign local_bb6_ld__stall_in = (|rstag_161to161_bb6_ld__staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_161to161_bb6_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_161to161_bb6_ld__staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_161to161_bb6_ld__stall_local)
		begin
			if (~(rstag_161to161_bb6_ld__staging_valid_NO_SHIFT_REG))
			begin
				rstag_161to161_bb6_ld__staging_valid_NO_SHIFT_REG <= rstag_161to161_bb6_ld__inputs_ready;
			end
		end
		else
		begin
			rstag_161to161_bb6_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_161to161_bb6_ld__staging_valid_NO_SHIFT_REG))
		begin
			rstag_161to161_bb6_ld__staging_reg_NO_SHIFT_REG <= local_bb6_ld__NO_SHIFT_REG;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_171to172_c0_exe1_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_171to172_c0_exe1_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_c0_exe1_0_NO_SHIFT_REG;
 logic rnode_171to172_c0_exe1_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_171to172_c0_exe1_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_c0_exe1_1_NO_SHIFT_REG;
 logic rnode_171to172_c0_exe1_0_reg_172_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_c0_exe1_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_c0_exe1_0_valid_out_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_c0_exe1_0_stall_in_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_c0_exe1_0_stall_out_reg_172_NO_SHIFT_REG;
 reg rnode_171to172_c0_exe1_0_consumed_0_NO_SHIFT_REG;
 reg rnode_171to172_c0_exe1_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_171to172_c0_exe1_0_reg_172_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_171to172_c0_exe1_0_reg_172_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_171to172_c0_exe1_0_stall_in_0_reg_172_NO_SHIFT_REG),
	.valid_out(rnode_171to172_c0_exe1_0_valid_out_0_reg_172_NO_SHIFT_REG),
	.stall_out(rnode_171to172_c0_exe1_0_stall_out_reg_172_NO_SHIFT_REG),
	.data_in(rnode_1to171_c0_exe1_0_NO_SHIFT_REG),
	.data_out(rnode_171to172_c0_exe1_0_reg_172_NO_SHIFT_REG)
);

defparam rnode_171to172_c0_exe1_0_reg_172_fifo.DEPTH = 1;
defparam rnode_171to172_c0_exe1_0_reg_172_fifo.DATA_WIDTH = 32;
defparam rnode_171to172_c0_exe1_0_reg_172_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_171to172_c0_exe1_0_reg_172_fifo.IMPL = "ll_reg";

assign rnode_171to172_c0_exe1_0_reg_172_inputs_ready_NO_SHIFT_REG = rnode_1to171_c0_exe1_0_valid_out_NO_SHIFT_REG;
assign rnode_1to171_c0_exe1_0_stall_in_NO_SHIFT_REG = rnode_171to172_c0_exe1_0_stall_out_reg_172_NO_SHIFT_REG;
assign rnode_171to172_c0_exe1_0_stall_in_0_reg_172_NO_SHIFT_REG = ((rnode_171to172_c0_exe1_0_stall_in_0_NO_SHIFT_REG & ~(rnode_171to172_c0_exe1_0_consumed_0_NO_SHIFT_REG)) | (rnode_171to172_c0_exe1_0_stall_in_1_NO_SHIFT_REG & ~(rnode_171to172_c0_exe1_0_consumed_1_NO_SHIFT_REG)));
assign rnode_171to172_c0_exe1_0_valid_out_0_NO_SHIFT_REG = (rnode_171to172_c0_exe1_0_valid_out_0_reg_172_NO_SHIFT_REG & ~(rnode_171to172_c0_exe1_0_consumed_0_NO_SHIFT_REG));
assign rnode_171to172_c0_exe1_0_valid_out_1_NO_SHIFT_REG = (rnode_171to172_c0_exe1_0_valid_out_0_reg_172_NO_SHIFT_REG & ~(rnode_171to172_c0_exe1_0_consumed_1_NO_SHIFT_REG));
assign rnode_171to172_c0_exe1_0_NO_SHIFT_REG = rnode_171to172_c0_exe1_0_reg_172_NO_SHIFT_REG;
assign rnode_171to172_c0_exe1_1_NO_SHIFT_REG = rnode_171to172_c0_exe1_0_reg_172_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_171to172_c0_exe1_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_171to172_c0_exe1_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_171to172_c0_exe1_0_consumed_0_NO_SHIFT_REG <= (rnode_171to172_c0_exe1_0_valid_out_0_reg_172_NO_SHIFT_REG & (rnode_171to172_c0_exe1_0_consumed_0_NO_SHIFT_REG | ~(rnode_171to172_c0_exe1_0_stall_in_0_NO_SHIFT_REG)) & rnode_171to172_c0_exe1_0_stall_in_0_reg_172_NO_SHIFT_REG);
		rnode_171to172_c0_exe1_0_consumed_1_NO_SHIFT_REG <= (rnode_171to172_c0_exe1_0_valid_out_0_reg_172_NO_SHIFT_REG & (rnode_171to172_c0_exe1_0_consumed_1_NO_SHIFT_REG | ~(rnode_171to172_c0_exe1_0_stall_in_1_NO_SHIFT_REG)) & rnode_171to172_c0_exe1_0_stall_in_0_reg_172_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_171to172_widthCounter_239_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_171to172_widthCounter_239_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_widthCounter_239_0_NO_SHIFT_REG;
 logic rnode_171to172_widthCounter_239_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_171to172_widthCounter_239_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_widthCounter_239_1_NO_SHIFT_REG;
 logic rnode_171to172_widthCounter_239_0_reg_172_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_171to172_widthCounter_239_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_widthCounter_239_0_valid_out_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_widthCounter_239_0_stall_in_0_reg_172_NO_SHIFT_REG;
 logic rnode_171to172_widthCounter_239_0_stall_out_reg_172_NO_SHIFT_REG;
 reg rnode_171to172_widthCounter_239_0_consumed_0_NO_SHIFT_REG;
 reg rnode_171to172_widthCounter_239_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_171to172_widthCounter_239_0_reg_172_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_171to172_widthCounter_239_0_reg_172_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_171to172_widthCounter_239_0_stall_in_0_reg_172_NO_SHIFT_REG),
	.valid_out(rnode_171to172_widthCounter_239_0_valid_out_0_reg_172_NO_SHIFT_REG),
	.stall_out(rnode_171to172_widthCounter_239_0_stall_out_reg_172_NO_SHIFT_REG),
	.data_in(rnode_1to171_widthCounter_239_0_NO_SHIFT_REG),
	.data_out(rnode_171to172_widthCounter_239_0_reg_172_NO_SHIFT_REG)
);

defparam rnode_171to172_widthCounter_239_0_reg_172_fifo.DEPTH = 1;
defparam rnode_171to172_widthCounter_239_0_reg_172_fifo.DATA_WIDTH = 32;
defparam rnode_171to172_widthCounter_239_0_reg_172_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_171to172_widthCounter_239_0_reg_172_fifo.IMPL = "ll_reg";

assign rnode_171to172_widthCounter_239_0_reg_172_inputs_ready_NO_SHIFT_REG = rnode_1to171_widthCounter_239_0_valid_out_NO_SHIFT_REG;
assign rnode_1to171_widthCounter_239_0_stall_in_NO_SHIFT_REG = rnode_171to172_widthCounter_239_0_stall_out_reg_172_NO_SHIFT_REG;
assign rnode_171to172_widthCounter_239_0_stall_in_0_reg_172_NO_SHIFT_REG = ((rnode_171to172_widthCounter_239_0_stall_in_0_NO_SHIFT_REG & ~(rnode_171to172_widthCounter_239_0_consumed_0_NO_SHIFT_REG)) | (rnode_171to172_widthCounter_239_0_stall_in_1_NO_SHIFT_REG & ~(rnode_171to172_widthCounter_239_0_consumed_1_NO_SHIFT_REG)));
assign rnode_171to172_widthCounter_239_0_valid_out_0_NO_SHIFT_REG = (rnode_171to172_widthCounter_239_0_valid_out_0_reg_172_NO_SHIFT_REG & ~(rnode_171to172_widthCounter_239_0_consumed_0_NO_SHIFT_REG));
assign rnode_171to172_widthCounter_239_0_valid_out_1_NO_SHIFT_REG = (rnode_171to172_widthCounter_239_0_valid_out_0_reg_172_NO_SHIFT_REG & ~(rnode_171to172_widthCounter_239_0_consumed_1_NO_SHIFT_REG));
assign rnode_171to172_widthCounter_239_0_NO_SHIFT_REG = rnode_171to172_widthCounter_239_0_reg_172_NO_SHIFT_REG;
assign rnode_171to172_widthCounter_239_1_NO_SHIFT_REG = rnode_171to172_widthCounter_239_0_reg_172_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_171to172_widthCounter_239_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_171to172_widthCounter_239_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_171to172_widthCounter_239_0_consumed_0_NO_SHIFT_REG <= (rnode_171to172_widthCounter_239_0_valid_out_0_reg_172_NO_SHIFT_REG & (rnode_171to172_widthCounter_239_0_consumed_0_NO_SHIFT_REG | ~(rnode_171to172_widthCounter_239_0_stall_in_0_NO_SHIFT_REG)) & rnode_171to172_widthCounter_239_0_stall_in_0_reg_172_NO_SHIFT_REG);
		rnode_171to172_widthCounter_239_0_consumed_1_NO_SHIFT_REG <= (rnode_171to172_widthCounter_239_0_valid_out_0_reg_172_NO_SHIFT_REG & (rnode_171to172_widthCounter_239_0_consumed_1_NO_SHIFT_REG | ~(rnode_171to172_widthCounter_239_0_stall_in_1_NO_SHIFT_REG)) & rnode_171to172_widthCounter_239_0_stall_in_0_reg_172_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_160to161_cmp1430_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_160to161_cmp1430_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_160to161_cmp1430_0_NO_SHIFT_REG;
 logic rnode_160to161_cmp1430_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_160to161_cmp1430_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_160to161_cmp1430_1_NO_SHIFT_REG;
 logic rnode_160to161_cmp1430_0_reg_161_inputs_ready_NO_SHIFT_REG;
 logic rnode_160to161_cmp1430_0_reg_161_NO_SHIFT_REG;
 logic rnode_160to161_cmp1430_0_valid_out_0_reg_161_NO_SHIFT_REG;
 logic rnode_160to161_cmp1430_0_stall_in_0_reg_161_NO_SHIFT_REG;
 logic rnode_160to161_cmp1430_0_stall_out_reg_161_NO_SHIFT_REG;
 reg rnode_160to161_cmp1430_0_consumed_0_NO_SHIFT_REG;
 reg rnode_160to161_cmp1430_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_160to161_cmp1430_0_reg_161_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_160to161_cmp1430_0_reg_161_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_160to161_cmp1430_0_stall_in_0_reg_161_NO_SHIFT_REG),
	.valid_out(rnode_160to161_cmp1430_0_valid_out_0_reg_161_NO_SHIFT_REG),
	.stall_out(rnode_160to161_cmp1430_0_stall_out_reg_161_NO_SHIFT_REG),
	.data_in(rnode_1to160_cmp1430_0_NO_SHIFT_REG),
	.data_out(rnode_160to161_cmp1430_0_reg_161_NO_SHIFT_REG)
);

defparam rnode_160to161_cmp1430_0_reg_161_fifo.DEPTH = 1;
defparam rnode_160to161_cmp1430_0_reg_161_fifo.DATA_WIDTH = 1;
defparam rnode_160to161_cmp1430_0_reg_161_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_160to161_cmp1430_0_reg_161_fifo.IMPL = "ll_reg";

assign rnode_160to161_cmp1430_0_reg_161_inputs_ready_NO_SHIFT_REG = rnode_1to160_cmp1430_0_valid_out_NO_SHIFT_REG;
assign rnode_1to160_cmp1430_0_stall_in_NO_SHIFT_REG = rnode_160to161_cmp1430_0_stall_out_reg_161_NO_SHIFT_REG;
assign rnode_160to161_cmp1430_0_stall_in_0_reg_161_NO_SHIFT_REG = ((rnode_160to161_cmp1430_0_stall_in_0_NO_SHIFT_REG & ~(rnode_160to161_cmp1430_0_consumed_0_NO_SHIFT_REG)) | (rnode_160to161_cmp1430_0_stall_in_1_NO_SHIFT_REG & ~(rnode_160to161_cmp1430_0_consumed_1_NO_SHIFT_REG)));
assign rnode_160to161_cmp1430_0_valid_out_0_NO_SHIFT_REG = (rnode_160to161_cmp1430_0_valid_out_0_reg_161_NO_SHIFT_REG & ~(rnode_160to161_cmp1430_0_consumed_0_NO_SHIFT_REG));
assign rnode_160to161_cmp1430_0_valid_out_1_NO_SHIFT_REG = (rnode_160to161_cmp1430_0_valid_out_0_reg_161_NO_SHIFT_REG & ~(rnode_160to161_cmp1430_0_consumed_1_NO_SHIFT_REG));
assign rnode_160to161_cmp1430_0_NO_SHIFT_REG = rnode_160to161_cmp1430_0_reg_161_NO_SHIFT_REG;
assign rnode_160to161_cmp1430_1_NO_SHIFT_REG = rnode_160to161_cmp1430_0_reg_161_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_160to161_cmp1430_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_160to161_cmp1430_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_160to161_cmp1430_0_consumed_0_NO_SHIFT_REG <= (rnode_160to161_cmp1430_0_valid_out_0_reg_161_NO_SHIFT_REG & (rnode_160to161_cmp1430_0_consumed_0_NO_SHIFT_REG | ~(rnode_160to161_cmp1430_0_stall_in_0_NO_SHIFT_REG)) & rnode_160to161_cmp1430_0_stall_in_0_reg_161_NO_SHIFT_REG);
		rnode_160to161_cmp1430_0_consumed_1_NO_SHIFT_REG <= (rnode_160to161_cmp1430_0_valid_out_0_reg_161_NO_SHIFT_REG & (rnode_160to161_cmp1430_0_consumed_1_NO_SHIFT_REG | ~(rnode_160to161_cmp1430_0_stall_in_1_NO_SHIFT_REG)) & rnode_160to161_cmp1430_0_stall_in_0_reg_161_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_332to333_memcoalesce_param_extrValue_6_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_332to333_memcoalesce_param_extrValue_6_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_332to333_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG;
 logic rnode_332to333_memcoalesce_param_extrValue_6_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_332to333_memcoalesce_param_extrValue_6_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_332to333_memcoalesce_param_extrValue_6_1_NO_SHIFT_REG;
 logic rnode_332to333_memcoalesce_param_extrValue_6_0_reg_333_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_332to333_memcoalesce_param_extrValue_6_0_reg_333_NO_SHIFT_REG;
 logic rnode_332to333_memcoalesce_param_extrValue_6_0_valid_out_0_reg_333_NO_SHIFT_REG;
 logic rnode_332to333_memcoalesce_param_extrValue_6_0_stall_in_0_reg_333_NO_SHIFT_REG;
 logic rnode_332to333_memcoalesce_param_extrValue_6_0_stall_out_reg_333_NO_SHIFT_REG;
 reg rnode_332to333_memcoalesce_param_extrValue_6_0_consumed_0_NO_SHIFT_REG;
 reg rnode_332to333_memcoalesce_param_extrValue_6_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_332to333_memcoalesce_param_extrValue_6_0_reg_333_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_332to333_memcoalesce_param_extrValue_6_0_reg_333_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_332to333_memcoalesce_param_extrValue_6_0_stall_in_0_reg_333_NO_SHIFT_REG),
	.valid_out(rnode_332to333_memcoalesce_param_extrValue_6_0_valid_out_0_reg_333_NO_SHIFT_REG),
	.stall_out(rnode_332to333_memcoalesce_param_extrValue_6_0_stall_out_reg_333_NO_SHIFT_REG),
	.data_in(rnode_1to332_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG),
	.data_out(rnode_332to333_memcoalesce_param_extrValue_6_0_reg_333_NO_SHIFT_REG)
);

defparam rnode_332to333_memcoalesce_param_extrValue_6_0_reg_333_fifo.DEPTH = 2;
defparam rnode_332to333_memcoalesce_param_extrValue_6_0_reg_333_fifo.DATA_WIDTH = 32;
defparam rnode_332to333_memcoalesce_param_extrValue_6_0_reg_333_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_332to333_memcoalesce_param_extrValue_6_0_reg_333_fifo.IMPL = "ll_reg";

assign rnode_332to333_memcoalesce_param_extrValue_6_0_reg_333_inputs_ready_NO_SHIFT_REG = rnode_1to332_memcoalesce_param_extrValue_6_0_valid_out_NO_SHIFT_REG;
assign rnode_1to332_memcoalesce_param_extrValue_6_0_stall_in_NO_SHIFT_REG = rnode_332to333_memcoalesce_param_extrValue_6_0_stall_out_reg_333_NO_SHIFT_REG;
assign rnode_332to333_memcoalesce_param_extrValue_6_0_stall_in_0_reg_333_NO_SHIFT_REG = ((rnode_332to333_memcoalesce_param_extrValue_6_0_stall_in_0_NO_SHIFT_REG & ~(rnode_332to333_memcoalesce_param_extrValue_6_0_consumed_0_NO_SHIFT_REG)) | (rnode_332to333_memcoalesce_param_extrValue_6_0_stall_in_1_NO_SHIFT_REG & ~(rnode_332to333_memcoalesce_param_extrValue_6_0_consumed_1_NO_SHIFT_REG)));
assign rnode_332to333_memcoalesce_param_extrValue_6_0_valid_out_0_NO_SHIFT_REG = (rnode_332to333_memcoalesce_param_extrValue_6_0_valid_out_0_reg_333_NO_SHIFT_REG & ~(rnode_332to333_memcoalesce_param_extrValue_6_0_consumed_0_NO_SHIFT_REG));
assign rnode_332to333_memcoalesce_param_extrValue_6_0_valid_out_1_NO_SHIFT_REG = (rnode_332to333_memcoalesce_param_extrValue_6_0_valid_out_0_reg_333_NO_SHIFT_REG & ~(rnode_332to333_memcoalesce_param_extrValue_6_0_consumed_1_NO_SHIFT_REG));
assign rnode_332to333_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG = rnode_332to333_memcoalesce_param_extrValue_6_0_reg_333_NO_SHIFT_REG;
assign rnode_332to333_memcoalesce_param_extrValue_6_1_NO_SHIFT_REG = rnode_332to333_memcoalesce_param_extrValue_6_0_reg_333_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_332to333_memcoalesce_param_extrValue_6_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_332to333_memcoalesce_param_extrValue_6_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_332to333_memcoalesce_param_extrValue_6_0_consumed_0_NO_SHIFT_REG <= (rnode_332to333_memcoalesce_param_extrValue_6_0_valid_out_0_reg_333_NO_SHIFT_REG & (rnode_332to333_memcoalesce_param_extrValue_6_0_consumed_0_NO_SHIFT_REG | ~(rnode_332to333_memcoalesce_param_extrValue_6_0_stall_in_0_NO_SHIFT_REG)) & rnode_332to333_memcoalesce_param_extrValue_6_0_stall_in_0_reg_333_NO_SHIFT_REG);
		rnode_332to333_memcoalesce_param_extrValue_6_0_consumed_1_NO_SHIFT_REG <= (rnode_332to333_memcoalesce_param_extrValue_6_0_valid_out_0_reg_333_NO_SHIFT_REG & (rnode_332to333_memcoalesce_param_extrValue_6_0_consumed_1_NO_SHIFT_REG | ~(rnode_332to333_memcoalesce_param_extrValue_6_0_stall_in_1_NO_SHIFT_REG)) & rnode_332to333_memcoalesce_param_extrValue_6_0_stall_in_0_reg_333_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_173to174__phi_decision_xor118_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_173to174__phi_decision_xor118_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_173to174__phi_decision_xor118_0_NO_SHIFT_REG;
 logic rnode_173to174__phi_decision_xor118_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_173to174__phi_decision_xor118_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_173to174__phi_decision_xor118_1_NO_SHIFT_REG;
 logic rnode_173to174__phi_decision_xor118_0_reg_174_inputs_ready_NO_SHIFT_REG;
 logic rnode_173to174__phi_decision_xor118_0_reg_174_NO_SHIFT_REG;
 logic rnode_173to174__phi_decision_xor118_0_valid_out_0_reg_174_NO_SHIFT_REG;
 logic rnode_173to174__phi_decision_xor118_0_stall_in_0_reg_174_NO_SHIFT_REG;
 logic rnode_173to174__phi_decision_xor118_0_stall_out_reg_174_NO_SHIFT_REG;
 reg rnode_173to174__phi_decision_xor118_0_consumed_0_NO_SHIFT_REG;
 reg rnode_173to174__phi_decision_xor118_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_173to174__phi_decision_xor118_0_reg_174_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_173to174__phi_decision_xor118_0_reg_174_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_173to174__phi_decision_xor118_0_stall_in_0_reg_174_NO_SHIFT_REG),
	.valid_out(rnode_173to174__phi_decision_xor118_0_valid_out_0_reg_174_NO_SHIFT_REG),
	.stall_out(rnode_173to174__phi_decision_xor118_0_stall_out_reg_174_NO_SHIFT_REG),
	.data_in(rnode_1to173__phi_decision_xor118_0_NO_SHIFT_REG),
	.data_out(rnode_173to174__phi_decision_xor118_0_reg_174_NO_SHIFT_REG)
);

defparam rnode_173to174__phi_decision_xor118_0_reg_174_fifo.DEPTH = 2;
defparam rnode_173to174__phi_decision_xor118_0_reg_174_fifo.DATA_WIDTH = 1;
defparam rnode_173to174__phi_decision_xor118_0_reg_174_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_173to174__phi_decision_xor118_0_reg_174_fifo.IMPL = "ll_reg";

assign rnode_173to174__phi_decision_xor118_0_reg_174_inputs_ready_NO_SHIFT_REG = rnode_1to173__phi_decision_xor118_0_valid_out_NO_SHIFT_REG;
assign rnode_1to173__phi_decision_xor118_0_stall_in_NO_SHIFT_REG = rnode_173to174__phi_decision_xor118_0_stall_out_reg_174_NO_SHIFT_REG;
assign rnode_173to174__phi_decision_xor118_0_stall_in_0_reg_174_NO_SHIFT_REG = ((rnode_173to174__phi_decision_xor118_0_stall_in_0_NO_SHIFT_REG & ~(rnode_173to174__phi_decision_xor118_0_consumed_0_NO_SHIFT_REG)) | (rnode_173to174__phi_decision_xor118_0_stall_in_1_NO_SHIFT_REG & ~(rnode_173to174__phi_decision_xor118_0_consumed_1_NO_SHIFT_REG)));
assign rnode_173to174__phi_decision_xor118_0_valid_out_0_NO_SHIFT_REG = (rnode_173to174__phi_decision_xor118_0_valid_out_0_reg_174_NO_SHIFT_REG & ~(rnode_173to174__phi_decision_xor118_0_consumed_0_NO_SHIFT_REG));
assign rnode_173to174__phi_decision_xor118_0_valid_out_1_NO_SHIFT_REG = (rnode_173to174__phi_decision_xor118_0_valid_out_0_reg_174_NO_SHIFT_REG & ~(rnode_173to174__phi_decision_xor118_0_consumed_1_NO_SHIFT_REG));
assign rnode_173to174__phi_decision_xor118_0_NO_SHIFT_REG = rnode_173to174__phi_decision_xor118_0_reg_174_NO_SHIFT_REG;
assign rnode_173to174__phi_decision_xor118_1_NO_SHIFT_REG = rnode_173to174__phi_decision_xor118_0_reg_174_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_173to174__phi_decision_xor118_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_173to174__phi_decision_xor118_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_173to174__phi_decision_xor118_0_consumed_0_NO_SHIFT_REG <= (rnode_173to174__phi_decision_xor118_0_valid_out_0_reg_174_NO_SHIFT_REG & (rnode_173to174__phi_decision_xor118_0_consumed_0_NO_SHIFT_REG | ~(rnode_173to174__phi_decision_xor118_0_stall_in_0_NO_SHIFT_REG)) & rnode_173to174__phi_decision_xor118_0_stall_in_0_reg_174_NO_SHIFT_REG);
		rnode_173to174__phi_decision_xor118_0_consumed_1_NO_SHIFT_REG <= (rnode_173to174__phi_decision_xor118_0_valid_out_0_reg_174_NO_SHIFT_REG & (rnode_173to174__phi_decision_xor118_0_consumed_1_NO_SHIFT_REG | ~(rnode_173to174__phi_decision_xor118_0_stall_in_1_NO_SHIFT_REG)) & rnode_173to174__phi_decision_xor118_0_stall_in_0_reg_174_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_160to161_bb6_c2_exe2_0_valid_out_NO_SHIFT_REG;
 logic rnode_160to161_bb6_c2_exe2_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_160to161_bb6_c2_exe2_0_NO_SHIFT_REG;
 logic rnode_160to161_bb6_c2_exe2_0_reg_161_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_160to161_bb6_c2_exe2_0_reg_161_NO_SHIFT_REG;
 logic rnode_160to161_bb6_c2_exe2_0_valid_out_reg_161_NO_SHIFT_REG;
 logic rnode_160to161_bb6_c2_exe2_0_stall_in_reg_161_NO_SHIFT_REG;
 logic rnode_160to161_bb6_c2_exe2_0_stall_out_reg_161_NO_SHIFT_REG;
wire [63:0] rci_rcnode_1to333_rc15_input_acl_hw_wg_id_0_reg_1;

acl_data_fifo rnode_160to161_bb6_c2_exe2_0_reg_161_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_160to161_bb6_c2_exe2_0_reg_161_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_160to161_bb6_c2_exe2_0_stall_in_reg_161_NO_SHIFT_REG),
	.valid_out(rnode_160to161_bb6_c2_exe2_0_valid_out_reg_161_NO_SHIFT_REG),
	.stall_out(rnode_160to161_bb6_c2_exe2_0_stall_out_reg_161_NO_SHIFT_REG),
	.data_in(rnode_1to160_bb6_c2_exe2_0_NO_SHIFT_REG),
	.data_out(rnode_160to161_bb6_c2_exe2_0_reg_161_NO_SHIFT_REG)
);

defparam rnode_160to161_bb6_c2_exe2_0_reg_161_fifo.DEPTH = 1;
defparam rnode_160to161_bb6_c2_exe2_0_reg_161_fifo.DATA_WIDTH = 32;
defparam rnode_160to161_bb6_c2_exe2_0_reg_161_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_160to161_bb6_c2_exe2_0_reg_161_fifo.IMPL = "ll_reg";

assign rnode_160to161_bb6_c2_exe2_0_reg_161_inputs_ready_NO_SHIFT_REG = rnode_1to160_bb6_c2_exe2_0_valid_out_NO_SHIFT_REG;
assign rnode_1to160_bb6_c2_exe2_0_stall_in_NO_SHIFT_REG = rnode_160to161_bb6_c2_exe2_0_stall_out_reg_161_NO_SHIFT_REG;
assign rnode_160to161_bb6_c2_exe2_0_NO_SHIFT_REG = rnode_160to161_bb6_c2_exe2_0_reg_161_NO_SHIFT_REG;
assign rnode_160to161_bb6_c2_exe2_0_stall_in_reg_161_NO_SHIFT_REG = rnode_160to161_bb6_c2_exe2_0_stall_in_NO_SHIFT_REG;
assign rnode_160to161_bb6_c2_exe2_0_valid_out_NO_SHIFT_REG = rnode_160to161_bb6_c2_exe2_0_valid_out_reg_161_NO_SHIFT_REG;
assign rci_rcnode_1to333_rc15_input_acl_hw_wg_id_0_reg_1[31:0] = local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
assign rci_rcnode_1to333_rc15_input_acl_hw_wg_id_0_reg_1[63:32] = local_bb6_select74;

// Register node:
//  * latency = 332
//  * capacity = 332
 logic rcnode_1to333_rc15_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to333_rc15_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rcnode_1to333_rc15_input_acl_hw_wg_id_0_NO_SHIFT_REG;
 logic rcnode_1to333_rc15_input_acl_hw_wg_id_0_reg_333_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rcnode_1to333_rc15_input_acl_hw_wg_id_0_reg_333_NO_SHIFT_REG;
 logic rcnode_1to333_rc15_input_acl_hw_wg_id_0_valid_out_reg_333_NO_SHIFT_REG;
 logic rcnode_1to333_rc15_input_acl_hw_wg_id_0_stall_in_reg_333_NO_SHIFT_REG;
 logic rcnode_1to333_rc15_input_acl_hw_wg_id_0_stall_out_0_reg_333_IP_NO_SHIFT_REG;
 logic rcnode_1to333_rc15_input_acl_hw_wg_id_0_stall_out_0_reg_333_NO_SHIFT_REG;

acl_data_fifo rcnode_1to333_rc15_input_acl_hw_wg_id_0_reg_333_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to333_rc15_input_acl_hw_wg_id_0_reg_333_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to333_rc15_input_acl_hw_wg_id_0_stall_in_reg_333_NO_SHIFT_REG),
	.valid_out(rcnode_1to333_rc15_input_acl_hw_wg_id_0_valid_out_reg_333_NO_SHIFT_REG),
	.stall_out(rcnode_1to333_rc15_input_acl_hw_wg_id_0_stall_out_0_reg_333_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to333_rc15_input_acl_hw_wg_id_0_reg_1),
	.data_out(rcnode_1to333_rc15_input_acl_hw_wg_id_0_reg_333_NO_SHIFT_REG)
);

defparam rcnode_1to333_rc15_input_acl_hw_wg_id_0_reg_333_fifo.DEPTH = 333;
defparam rcnode_1to333_rc15_input_acl_hw_wg_id_0_reg_333_fifo.DATA_WIDTH = 64;
defparam rcnode_1to333_rc15_input_acl_hw_wg_id_0_reg_333_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to333_rc15_input_acl_hw_wg_id_0_reg_333_fifo.IMPL = "ram";

assign rcnode_1to333_rc15_input_acl_hw_wg_id_0_reg_333_inputs_ready_NO_SHIFT_REG = (merge_node_valid_out_15_NO_SHIFT_REG & local_bb6_select74_valid_out);
assign rcnode_1to333_rc15_input_acl_hw_wg_id_0_stall_out_0_reg_333_NO_SHIFT_REG = (~(rcnode_1to333_rc15_input_acl_hw_wg_id_0_reg_333_inputs_ready_NO_SHIFT_REG) | rcnode_1to333_rc15_input_acl_hw_wg_id_0_stall_out_0_reg_333_IP_NO_SHIFT_REG);
assign merge_node_stall_in_15 = rcnode_1to333_rc15_input_acl_hw_wg_id_0_stall_out_0_reg_333_NO_SHIFT_REG;
assign local_bb6_select74_stall_in = rcnode_1to333_rc15_input_acl_hw_wg_id_0_stall_out_0_reg_333_NO_SHIFT_REG;
assign rcnode_1to333_rc15_input_acl_hw_wg_id_0_NO_SHIFT_REG = rcnode_1to333_rc15_input_acl_hw_wg_id_0_reg_333_NO_SHIFT_REG;
assign rcnode_1to333_rc15_input_acl_hw_wg_id_0_stall_in_reg_333_NO_SHIFT_REG = rcnode_1to333_rc15_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to333_rc15_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG = rcnode_1to333_rc15_input_acl_hw_wg_id_0_valid_out_reg_333_NO_SHIFT_REG;

// Register node:
//  * latency = 161
//  * capacity = 161
 logic rnode_172to333_c0_exe1_0_valid_out_NO_SHIFT_REG;
 logic rnode_172to333_c0_exe1_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_172to333_c0_exe1_0_NO_SHIFT_REG;
 logic rnode_172to333_c0_exe1_0_reg_333_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_172to333_c0_exe1_0_reg_333_NO_SHIFT_REG;
 logic rnode_172to333_c0_exe1_0_valid_out_reg_333_NO_SHIFT_REG;
 logic rnode_172to333_c0_exe1_0_stall_in_reg_333_NO_SHIFT_REG;
 logic rnode_172to333_c0_exe1_0_stall_out_reg_333_NO_SHIFT_REG;

acl_data_fifo rnode_172to333_c0_exe1_0_reg_333_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_172to333_c0_exe1_0_reg_333_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_172to333_c0_exe1_0_stall_in_reg_333_NO_SHIFT_REG),
	.valid_out(rnode_172to333_c0_exe1_0_valid_out_reg_333_NO_SHIFT_REG),
	.stall_out(rnode_172to333_c0_exe1_0_stall_out_reg_333_NO_SHIFT_REG),
	.data_in(rnode_171to172_c0_exe1_1_NO_SHIFT_REG),
	.data_out(rnode_172to333_c0_exe1_0_reg_333_NO_SHIFT_REG)
);

defparam rnode_172to333_c0_exe1_0_reg_333_fifo.DEPTH = 162;
defparam rnode_172to333_c0_exe1_0_reg_333_fifo.DATA_WIDTH = 32;
defparam rnode_172to333_c0_exe1_0_reg_333_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_172to333_c0_exe1_0_reg_333_fifo.IMPL = "ram";

assign rnode_172to333_c0_exe1_0_reg_333_inputs_ready_NO_SHIFT_REG = rnode_171to172_c0_exe1_0_valid_out_1_NO_SHIFT_REG;
assign rnode_171to172_c0_exe1_0_stall_in_1_NO_SHIFT_REG = rnode_172to333_c0_exe1_0_stall_out_reg_333_NO_SHIFT_REG;
assign rnode_172to333_c0_exe1_0_NO_SHIFT_REG = rnode_172to333_c0_exe1_0_reg_333_NO_SHIFT_REG;
assign rnode_172to333_c0_exe1_0_stall_in_reg_333_NO_SHIFT_REG = rnode_172to333_c0_exe1_0_stall_in_NO_SHIFT_REG;
assign rnode_172to333_c0_exe1_0_valid_out_NO_SHIFT_REG = rnode_172to333_c0_exe1_0_valid_out_reg_333_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_add76_valid_out;
wire local_bb6_add76_stall_in;
wire local_bb6_add76_inputs_ready;
wire local_bb6_add76_stall_local;
wire [31:0] local_bb6_add76;

assign local_bb6_add76_inputs_ready = (rnode_171to172_c0_exe1_0_valid_out_0_NO_SHIFT_REG & rnode_171to172_widthCounter_239_0_valid_out_0_NO_SHIFT_REG);
assign local_bb6_add76 = (rnode_171to172_c0_exe1_0_NO_SHIFT_REG + rnode_171to172_widthCounter_239_0_NO_SHIFT_REG);
assign local_bb6_add76_valid_out = local_bb6_add76_inputs_ready;
assign local_bb6_add76_stall_local = local_bb6_add76_stall_in;
assign rnode_171to172_c0_exe1_0_stall_in_0_NO_SHIFT_REG = (local_bb6_add76_stall_local | ~(local_bb6_add76_inputs_ready));
assign rnode_171to172_widthCounter_239_0_stall_in_0_NO_SHIFT_REG = (local_bb6_add76_stall_local | ~(local_bb6_add76_inputs_ready));

// Register node:
//  * latency = 159
//  * capacity = 159
 logic rnode_172to331_widthCounter_239_0_valid_out_NO_SHIFT_REG;
 logic rnode_172to331_widthCounter_239_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_172to331_widthCounter_239_0_NO_SHIFT_REG;
 logic rnode_172to331_widthCounter_239_0_reg_331_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_172to331_widthCounter_239_0_reg_331_NO_SHIFT_REG;
 logic rnode_172to331_widthCounter_239_0_valid_out_reg_331_NO_SHIFT_REG;
 logic rnode_172to331_widthCounter_239_0_stall_in_reg_331_NO_SHIFT_REG;
 logic rnode_172to331_widthCounter_239_0_stall_out_reg_331_NO_SHIFT_REG;

acl_data_fifo rnode_172to331_widthCounter_239_0_reg_331_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_172to331_widthCounter_239_0_reg_331_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_172to331_widthCounter_239_0_stall_in_reg_331_NO_SHIFT_REG),
	.valid_out(rnode_172to331_widthCounter_239_0_valid_out_reg_331_NO_SHIFT_REG),
	.stall_out(rnode_172to331_widthCounter_239_0_stall_out_reg_331_NO_SHIFT_REG),
	.data_in(rnode_171to172_widthCounter_239_1_NO_SHIFT_REG),
	.data_out(rnode_172to331_widthCounter_239_0_reg_331_NO_SHIFT_REG)
);

defparam rnode_172to331_widthCounter_239_0_reg_331_fifo.DEPTH = 160;
defparam rnode_172to331_widthCounter_239_0_reg_331_fifo.DATA_WIDTH = 32;
defparam rnode_172to331_widthCounter_239_0_reg_331_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_172to331_widthCounter_239_0_reg_331_fifo.IMPL = "ram";

assign rnode_172to331_widthCounter_239_0_reg_331_inputs_ready_NO_SHIFT_REG = rnode_171to172_widthCounter_239_0_valid_out_1_NO_SHIFT_REG;
assign rnode_171to172_widthCounter_239_0_stall_in_1_NO_SHIFT_REG = rnode_172to331_widthCounter_239_0_stall_out_reg_331_NO_SHIFT_REG;
assign rnode_172to331_widthCounter_239_0_NO_SHIFT_REG = rnode_172to331_widthCounter_239_0_reg_331_NO_SHIFT_REG;
assign rnode_172to331_widthCounter_239_0_stall_in_reg_331_NO_SHIFT_REG = rnode_172to331_widthCounter_239_0_stall_in_NO_SHIFT_REG;
assign rnode_172to331_widthCounter_239_0_valid_out_NO_SHIFT_REG = rnode_172to331_widthCounter_239_0_valid_out_reg_331_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_c0_eni111_stall_local;
wire [95:0] local_bb6_c0_eni111;

assign local_bb6_c0_eni111[7:0] = 8'bx;
assign local_bb6_c0_eni111[8] = rnode_160to161_cmp1430_0_NO_SHIFT_REG;
assign local_bb6_c0_eni111[95:9] = 87'bx;

// Register node:
//  * latency = 172
//  * capacity = 172
 logic rnode_161to333_cmp1430_0_valid_out_NO_SHIFT_REG;
 logic rnode_161to333_cmp1430_0_stall_in_NO_SHIFT_REG;
 logic rnode_161to333_cmp1430_0_NO_SHIFT_REG;
 logic rnode_161to333_cmp1430_0_reg_333_inputs_ready_NO_SHIFT_REG;
 logic rnode_161to333_cmp1430_0_reg_333_NO_SHIFT_REG;
 logic rnode_161to333_cmp1430_0_valid_out_reg_333_NO_SHIFT_REG;
 logic rnode_161to333_cmp1430_0_stall_in_reg_333_NO_SHIFT_REG;
 logic rnode_161to333_cmp1430_0_stall_out_reg_333_NO_SHIFT_REG;

acl_data_fifo rnode_161to333_cmp1430_0_reg_333_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_161to333_cmp1430_0_reg_333_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_161to333_cmp1430_0_stall_in_reg_333_NO_SHIFT_REG),
	.valid_out(rnode_161to333_cmp1430_0_valid_out_reg_333_NO_SHIFT_REG),
	.stall_out(rnode_161to333_cmp1430_0_stall_out_reg_333_NO_SHIFT_REG),
	.data_in(rnode_160to161_cmp1430_1_NO_SHIFT_REG),
	.data_out(rnode_161to333_cmp1430_0_reg_333_NO_SHIFT_REG)
);

defparam rnode_161to333_cmp1430_0_reg_333_fifo.DEPTH = 173;
defparam rnode_161to333_cmp1430_0_reg_333_fifo.DATA_WIDTH = 1;
defparam rnode_161to333_cmp1430_0_reg_333_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_161to333_cmp1430_0_reg_333_fifo.IMPL = "ram";

assign rnode_161to333_cmp1430_0_reg_333_inputs_ready_NO_SHIFT_REG = rnode_160to161_cmp1430_0_valid_out_1_NO_SHIFT_REG;
assign rnode_160to161_cmp1430_0_stall_in_1_NO_SHIFT_REG = rnode_161to333_cmp1430_0_stall_out_reg_333_NO_SHIFT_REG;
assign rnode_161to333_cmp1430_0_NO_SHIFT_REG = rnode_161to333_cmp1430_0_reg_333_NO_SHIFT_REG;
assign rnode_161to333_cmp1430_0_stall_in_reg_333_NO_SHIFT_REG = rnode_161to333_cmp1430_0_stall_in_NO_SHIFT_REG;
assign rnode_161to333_cmp1430_0_valid_out_NO_SHIFT_REG = rnode_161to333_cmp1430_0_valid_out_reg_333_NO_SHIFT_REG;

// Register node:
//  * latency = 159
//  * capacity = 159
 logic rnode_174to333__phi_decision_xor118_0_valid_out_NO_SHIFT_REG;
 logic rnode_174to333__phi_decision_xor118_0_stall_in_NO_SHIFT_REG;
 logic rnode_174to333__phi_decision_xor118_0_NO_SHIFT_REG;
 logic rnode_174to333__phi_decision_xor118_0_reg_333_inputs_ready_NO_SHIFT_REG;
 logic rnode_174to333__phi_decision_xor118_0_reg_333_NO_SHIFT_REG;
 logic rnode_174to333__phi_decision_xor118_0_valid_out_reg_333_NO_SHIFT_REG;
 logic rnode_174to333__phi_decision_xor118_0_stall_in_reg_333_NO_SHIFT_REG;
 logic rnode_174to333__phi_decision_xor118_0_stall_out_reg_333_NO_SHIFT_REG;

acl_data_fifo rnode_174to333__phi_decision_xor118_0_reg_333_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_174to333__phi_decision_xor118_0_reg_333_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_174to333__phi_decision_xor118_0_stall_in_reg_333_NO_SHIFT_REG),
	.valid_out(rnode_174to333__phi_decision_xor118_0_valid_out_reg_333_NO_SHIFT_REG),
	.stall_out(rnode_174to333__phi_decision_xor118_0_stall_out_reg_333_NO_SHIFT_REG),
	.data_in(rnode_173to174__phi_decision_xor118_1_NO_SHIFT_REG),
	.data_out(rnode_174to333__phi_decision_xor118_0_reg_333_NO_SHIFT_REG)
);

defparam rnode_174to333__phi_decision_xor118_0_reg_333_fifo.DEPTH = 160;
defparam rnode_174to333__phi_decision_xor118_0_reg_333_fifo.DATA_WIDTH = 1;
defparam rnode_174to333__phi_decision_xor118_0_reg_333_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_174to333__phi_decision_xor118_0_reg_333_fifo.IMPL = "ram";

assign rnode_174to333__phi_decision_xor118_0_reg_333_inputs_ready_NO_SHIFT_REG = rnode_173to174__phi_decision_xor118_0_valid_out_1_NO_SHIFT_REG;
assign rnode_173to174__phi_decision_xor118_0_stall_in_1_NO_SHIFT_REG = rnode_174to333__phi_decision_xor118_0_stall_out_reg_333_NO_SHIFT_REG;
assign rnode_174to333__phi_decision_xor118_0_NO_SHIFT_REG = rnode_174to333__phi_decision_xor118_0_reg_333_NO_SHIFT_REG;
assign rnode_174to333__phi_decision_xor118_0_stall_in_reg_333_NO_SHIFT_REG = rnode_174to333__phi_decision_xor118_0_stall_in_NO_SHIFT_REG;
assign rnode_174to333__phi_decision_xor118_0_valid_out_NO_SHIFT_REG = rnode_174to333__phi_decision_xor118_0_valid_out_reg_333_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_172to173_bb6_add76_0_valid_out_NO_SHIFT_REG;
 logic rnode_172to173_bb6_add76_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_172to173_bb6_add76_0_NO_SHIFT_REG;
 logic rnode_172to173_bb6_add76_0_reg_173_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_172to173_bb6_add76_0_reg_173_NO_SHIFT_REG;
 logic rnode_172to173_bb6_add76_0_valid_out_reg_173_NO_SHIFT_REG;
 logic rnode_172to173_bb6_add76_0_stall_in_reg_173_NO_SHIFT_REG;
 logic rnode_172to173_bb6_add76_0_stall_out_reg_173_NO_SHIFT_REG;
wire [63:0] rci_rcnode_331to332_rc0_input_global_size_2_0_reg_331;

acl_data_fifo rnode_172to173_bb6_add76_0_reg_173_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_172to173_bb6_add76_0_reg_173_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_172to173_bb6_add76_0_stall_in_reg_173_NO_SHIFT_REG),
	.valid_out(rnode_172to173_bb6_add76_0_valid_out_reg_173_NO_SHIFT_REG),
	.stall_out(rnode_172to173_bb6_add76_0_stall_out_reg_173_NO_SHIFT_REG),
	.data_in(local_bb6_add76),
	.data_out(rnode_172to173_bb6_add76_0_reg_173_NO_SHIFT_REG)
);

defparam rnode_172to173_bb6_add76_0_reg_173_fifo.DEPTH = 1;
defparam rnode_172to173_bb6_add76_0_reg_173_fifo.DATA_WIDTH = 32;
defparam rnode_172to173_bb6_add76_0_reg_173_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_172to173_bb6_add76_0_reg_173_fifo.IMPL = "ll_reg";

assign rnode_172to173_bb6_add76_0_reg_173_inputs_ready_NO_SHIFT_REG = local_bb6_add76_valid_out;
assign local_bb6_add76_stall_in = rnode_172to173_bb6_add76_0_stall_out_reg_173_NO_SHIFT_REG;
assign rnode_172to173_bb6_add76_0_NO_SHIFT_REG = rnode_172to173_bb6_add76_0_reg_173_NO_SHIFT_REG;
assign rnode_172to173_bb6_add76_0_stall_in_reg_173_NO_SHIFT_REG = rnode_172to173_bb6_add76_0_stall_in_NO_SHIFT_REG;
assign rnode_172to173_bb6_add76_0_valid_out_NO_SHIFT_REG = rnode_172to173_bb6_add76_0_valid_out_reg_173_NO_SHIFT_REG;
assign rci_rcnode_331to332_rc0_input_global_size_2_0_reg_331[31:0] = input_global_size_2;
assign rci_rcnode_331to332_rc0_input_global_size_2_0_reg_331[63:32] = rnode_172to331_widthCounter_239_0_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_331to332_rc0_input_global_size_2_0_valid_out_NO_SHIFT_REG;
 logic rcnode_331to332_rc0_input_global_size_2_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rcnode_331to332_rc0_input_global_size_2_0_NO_SHIFT_REG;
 logic rcnode_331to332_rc0_input_global_size_2_0_reg_332_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rcnode_331to332_rc0_input_global_size_2_0_reg_332_NO_SHIFT_REG;
 logic rcnode_331to332_rc0_input_global_size_2_0_valid_out_reg_332_NO_SHIFT_REG;
 logic rcnode_331to332_rc0_input_global_size_2_0_stall_in_reg_332_NO_SHIFT_REG;
 logic rcnode_331to332_rc0_input_global_size_2_0_stall_out_0_reg_332_IP_NO_SHIFT_REG;
 logic rcnode_331to332_rc0_input_global_size_2_0_stall_out_0_reg_332_NO_SHIFT_REG;

acl_data_fifo rcnode_331to332_rc0_input_global_size_2_0_reg_332_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_331to332_rc0_input_global_size_2_0_reg_332_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_331to332_rc0_input_global_size_2_0_stall_in_reg_332_NO_SHIFT_REG),
	.valid_out(rcnode_331to332_rc0_input_global_size_2_0_valid_out_reg_332_NO_SHIFT_REG),
	.stall_out(rcnode_331to332_rc0_input_global_size_2_0_stall_out_0_reg_332_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_331to332_rc0_input_global_size_2_0_reg_331),
	.data_out(rcnode_331to332_rc0_input_global_size_2_0_reg_332_NO_SHIFT_REG)
);

defparam rcnode_331to332_rc0_input_global_size_2_0_reg_332_fifo.DEPTH = 1;
defparam rcnode_331to332_rc0_input_global_size_2_0_reg_332_fifo.DATA_WIDTH = 64;
defparam rcnode_331to332_rc0_input_global_size_2_0_reg_332_fifo.ALLOW_FULL_WRITE = 1;
defparam rcnode_331to332_rc0_input_global_size_2_0_reg_332_fifo.IMPL = "ll_reg";

assign rcnode_331to332_rc0_input_global_size_2_0_reg_332_inputs_ready_NO_SHIFT_REG = (rnode_1to331_input_global_size_2_0_valid_out_NO_SHIFT_REG & rnode_172to331_widthCounter_239_0_valid_out_NO_SHIFT_REG);
assign rcnode_331to332_rc0_input_global_size_2_0_stall_out_0_reg_332_NO_SHIFT_REG = (~(rcnode_331to332_rc0_input_global_size_2_0_reg_332_inputs_ready_NO_SHIFT_REG) | rcnode_331to332_rc0_input_global_size_2_0_stall_out_0_reg_332_IP_NO_SHIFT_REG);
assign rnode_1to331_input_global_size_2_0_stall_in_NO_SHIFT_REG = rcnode_331to332_rc0_input_global_size_2_0_stall_out_0_reg_332_NO_SHIFT_REG;
assign rnode_172to331_widthCounter_239_0_stall_in_NO_SHIFT_REG = rcnode_331to332_rc0_input_global_size_2_0_stall_out_0_reg_332_NO_SHIFT_REG;
assign rcnode_331to332_rc0_input_global_size_2_0_NO_SHIFT_REG = rcnode_331to332_rc0_input_global_size_2_0_reg_332_NO_SHIFT_REG;
assign rcnode_331to332_rc0_input_global_size_2_0_stall_in_reg_332_NO_SHIFT_REG = rcnode_331to332_rc0_input_global_size_2_0_stall_in_NO_SHIFT_REG;
assign rcnode_331to332_rc0_input_global_size_2_0_valid_out_NO_SHIFT_REG = rcnode_331to332_rc0_input_global_size_2_0_valid_out_reg_332_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_c0_eni212_stall_local;
wire [95:0] local_bb6_c0_eni212;

assign local_bb6_c0_eni212[31:0] = local_bb6_c0_eni111[31:0];
assign local_bb6_c0_eni212[63:32] = rnode_160to161_bb6_c2_exe2_0_NO_SHIFT_REG;
assign local_bb6_c0_eni212[95:64] = local_bb6_c0_eni111[95:64];

// This section implements an unregistered operation.
// 
wire local_bb6_idxprom77_stall_local;
wire [63:0] local_bb6_idxprom77;

assign local_bb6_idxprom77[32] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[33] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[34] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[35] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[36] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[37] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[38] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[39] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[40] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[41] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[42] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[43] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[44] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[45] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[46] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[47] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[48] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[49] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[50] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[51] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[52] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[53] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[54] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[55] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[56] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[57] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[58] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[59] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[60] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[61] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[62] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[63] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG[31];
assign local_bb6_idxprom77[31:0] = rnode_172to173_bb6_add76_0_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_add81_valid_out;
wire local_bb6_add81_stall_in;
wire local_bb6_add81_inputs_ready;
wire local_bb6_add81_stall_local;
wire [31:0] local_bb6_add81;

assign local_bb6_add81_inputs_ready = rcnode_331to332_rc0_input_global_size_2_0_valid_out_NO_SHIFT_REG;
assign local_bb6_add81 = (rcnode_331to332_rc0_input_global_size_2_0_NO_SHIFT_REG[63:32] + input_global_size_2);
assign local_bb6_add81_valid_out = local_bb6_add81_inputs_ready;
assign local_bb6_add81_stall_local = local_bb6_add81_stall_in;
assign rcnode_331to332_rc0_input_global_size_2_0_stall_in_NO_SHIFT_REG = (|local_bb6_add81_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb6_c0_eni313_valid_out;
wire local_bb6_c0_eni313_stall_in;
wire local_bb6_c0_eni313_inputs_ready;
wire local_bb6_c0_eni313_stall_local;
wire [95:0] local_bb6_c0_eni313;

assign local_bb6_c0_eni313_inputs_ready = (rstag_161to161_bb6_ld__valid_out & rnode_160to161_cmp1430_0_valid_out_0_NO_SHIFT_REG & rnode_160to161_bb6_c2_exe2_0_valid_out_NO_SHIFT_REG);
assign local_bb6_c0_eni313[63:0] = local_bb6_c0_eni212[63:0];
assign local_bb6_c0_eni313[95:64] = rstag_161to161_bb6_ld_;
assign local_bb6_c0_eni313_valid_out = local_bb6_c0_eni313_inputs_ready;
assign local_bb6_c0_eni313_stall_local = local_bb6_c0_eni313_stall_in;
assign rstag_161to161_bb6_ld__stall_in = (local_bb6_c0_eni313_stall_local | ~(local_bb6_c0_eni313_inputs_ready));
assign rnode_160to161_cmp1430_0_stall_in_0_NO_SHIFT_REG = (local_bb6_c0_eni313_stall_local | ~(local_bb6_c0_eni313_inputs_ready));
assign rnode_160to161_bb6_c2_exe2_0_stall_in_NO_SHIFT_REG = (local_bb6_c0_eni313_stall_local | ~(local_bb6_c0_eni313_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb6_arrayidx78_valid_out;
wire local_bb6_arrayidx78_stall_in;
wire local_bb6_arrayidx78_inputs_ready;
wire local_bb6_arrayidx78_stall_local;
wire [63:0] local_bb6_arrayidx78;

assign local_bb6_arrayidx78_inputs_ready = rnode_172to173_bb6_add76_0_valid_out_NO_SHIFT_REG;
assign local_bb6_arrayidx78 = ((input_outputFeatureMap & 64'hFFFFFFFFFFFFFC00) + (local_bb6_idxprom77 << 6'h2));
assign local_bb6_arrayidx78_valid_out = local_bb6_arrayidx78_inputs_ready;
assign local_bb6_arrayidx78_stall_local = local_bb6_arrayidx78_stall_in;
assign rnode_172to173_bb6_add76_0_stall_in_NO_SHIFT_REG = (|local_bb6_arrayidx78_stall_local);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_332to333_bb6_add81_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_332to333_bb6_add81_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_332to333_bb6_add81_0_NO_SHIFT_REG;
 logic rnode_332to333_bb6_add81_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_332to333_bb6_add81_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_332to333_bb6_add81_1_NO_SHIFT_REG;
 logic rnode_332to333_bb6_add81_0_reg_333_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_332to333_bb6_add81_0_reg_333_NO_SHIFT_REG;
 logic rnode_332to333_bb6_add81_0_valid_out_0_reg_333_NO_SHIFT_REG;
 logic rnode_332to333_bb6_add81_0_stall_in_0_reg_333_NO_SHIFT_REG;
 logic rnode_332to333_bb6_add81_0_stall_out_reg_333_NO_SHIFT_REG;
 reg rnode_332to333_bb6_add81_0_consumed_0_NO_SHIFT_REG;
 reg rnode_332to333_bb6_add81_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_332to333_bb6_add81_0_reg_333_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_332to333_bb6_add81_0_reg_333_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_332to333_bb6_add81_0_stall_in_0_reg_333_NO_SHIFT_REG),
	.valid_out(rnode_332to333_bb6_add81_0_valid_out_0_reg_333_NO_SHIFT_REG),
	.stall_out(rnode_332to333_bb6_add81_0_stall_out_reg_333_NO_SHIFT_REG),
	.data_in(local_bb6_add81),
	.data_out(rnode_332to333_bb6_add81_0_reg_333_NO_SHIFT_REG)
);

defparam rnode_332to333_bb6_add81_0_reg_333_fifo.DEPTH = 2;
defparam rnode_332to333_bb6_add81_0_reg_333_fifo.DATA_WIDTH = 32;
defparam rnode_332to333_bb6_add81_0_reg_333_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_332to333_bb6_add81_0_reg_333_fifo.IMPL = "ll_reg";

assign rnode_332to333_bb6_add81_0_reg_333_inputs_ready_NO_SHIFT_REG = local_bb6_add81_valid_out;
assign local_bb6_add81_stall_in = rnode_332to333_bb6_add81_0_stall_out_reg_333_NO_SHIFT_REG;
assign rnode_332to333_bb6_add81_0_stall_in_0_reg_333_NO_SHIFT_REG = ((rnode_332to333_bb6_add81_0_stall_in_0_NO_SHIFT_REG & ~(rnode_332to333_bb6_add81_0_consumed_0_NO_SHIFT_REG)) | (rnode_332to333_bb6_add81_0_stall_in_1_NO_SHIFT_REG & ~(rnode_332to333_bb6_add81_0_consumed_1_NO_SHIFT_REG)));
assign rnode_332to333_bb6_add81_0_valid_out_0_NO_SHIFT_REG = (rnode_332to333_bb6_add81_0_valid_out_0_reg_333_NO_SHIFT_REG & ~(rnode_332to333_bb6_add81_0_consumed_0_NO_SHIFT_REG));
assign rnode_332to333_bb6_add81_0_valid_out_1_NO_SHIFT_REG = (rnode_332to333_bb6_add81_0_valid_out_0_reg_333_NO_SHIFT_REG & ~(rnode_332to333_bb6_add81_0_consumed_1_NO_SHIFT_REG));
assign rnode_332to333_bb6_add81_0_NO_SHIFT_REG = rnode_332to333_bb6_add81_0_reg_333_NO_SHIFT_REG;
assign rnode_332to333_bb6_add81_1_NO_SHIFT_REG = rnode_332to333_bb6_add81_0_reg_333_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_332to333_bb6_add81_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_332to333_bb6_add81_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_332to333_bb6_add81_0_consumed_0_NO_SHIFT_REG <= (rnode_332to333_bb6_add81_0_valid_out_0_reg_333_NO_SHIFT_REG & (rnode_332to333_bb6_add81_0_consumed_0_NO_SHIFT_REG | ~(rnode_332to333_bb6_add81_0_stall_in_0_NO_SHIFT_REG)) & rnode_332to333_bb6_add81_0_stall_in_0_reg_333_NO_SHIFT_REG);
		rnode_332to333_bb6_add81_0_consumed_1_NO_SHIFT_REG <= (rnode_332to333_bb6_add81_0_valid_out_0_reg_333_NO_SHIFT_REG & (rnode_332to333_bb6_add81_0_consumed_1_NO_SHIFT_REG | ~(rnode_332to333_bb6_add81_0_stall_in_1_NO_SHIFT_REG)) & rnode_332to333_bb6_add81_0_stall_in_0_reg_333_NO_SHIFT_REG);
	end
end


// This section implements a registered operation.
// 
wire local_bb6_c0_enter14_c0_eni313_inputs_ready;
 reg local_bb6_c0_enter14_c0_eni313_valid_out_0_NO_SHIFT_REG;
wire local_bb6_c0_enter14_c0_eni313_stall_in_0;
 reg local_bb6_c0_enter14_c0_eni313_valid_out_1_NO_SHIFT_REG;
wire local_bb6_c0_enter14_c0_eni313_stall_in_1;
 reg local_bb6_c0_enter14_c0_eni313_valid_out_2_NO_SHIFT_REG;
wire local_bb6_c0_enter14_c0_eni313_stall_in_2;
 reg local_bb6_c0_enter14_c0_eni313_valid_out_3_NO_SHIFT_REG;
wire local_bb6_c0_enter14_c0_eni313_stall_in_3;
wire local_bb6_c0_enter14_c0_eni313_output_regs_ready;
 reg [95:0] local_bb6_c0_enter14_c0_eni313_NO_SHIFT_REG;
wire local_bb6_c0_enter14_c0_eni313_input_accepted;
 reg local_bb6_c0_enter14_c0_eni313_valid_bit_NO_SHIFT_REG;
wire local_bb6_c0_exit19_c0_exi118_entry_stall;
wire local_bb6_c0_exit19_c0_exi118_output_regs_ready;
wire local_bb6_c0_exit19_c0_exi118_valid_in;
wire local_bb6_c0_exit19_c0_exi118_phases;
wire local_bb6_c0_enter14_c0_eni313_inc_pipelined_thread;
wire local_bb6_c0_enter14_c0_eni313_dec_pipelined_thread;
wire local_bb6_c0_enter14_c0_eni313_causedstall;

assign local_bb6_c0_enter14_c0_eni313_inputs_ready = local_bb6_c0_eni313_valid_out;
assign local_bb6_c0_enter14_c0_eni313_output_regs_ready = 1'b1;
assign local_bb6_c0_enter14_c0_eni313_input_accepted = (local_bb6_c0_enter14_c0_eni313_inputs_ready && !(local_bb6_c0_exit19_c0_exi118_entry_stall));
assign local_bb6_c0_enter14_c0_eni313_inc_pipelined_thread = 1'b1;
assign local_bb6_c0_enter14_c0_eni313_dec_pipelined_thread = ~(1'b0);
assign local_bb6_c0_eni313_stall_in = ((~(local_bb6_c0_enter14_c0_eni313_inputs_ready) | local_bb6_c0_exit19_c0_exi118_entry_stall) | ~(1'b1));
assign local_bb6_c0_enter14_c0_eni313_causedstall = (1'b1 && ((~(local_bb6_c0_enter14_c0_eni313_inputs_ready) | local_bb6_c0_exit19_c0_exi118_entry_stall) && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_c0_enter14_c0_eni313_valid_bit_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb6_c0_enter14_c0_eni313_valid_bit_NO_SHIFT_REG <= local_bb6_c0_enter14_c0_eni313_input_accepted;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_c0_enter14_c0_eni313_NO_SHIFT_REG <= 'x;
		local_bb6_c0_enter14_c0_eni313_valid_out_0_NO_SHIFT_REG <= 1'b0;
		local_bb6_c0_enter14_c0_eni313_valid_out_3_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_c0_enter14_c0_eni313_output_regs_ready)
		begin
			local_bb6_c0_enter14_c0_eni313_NO_SHIFT_REG <= local_bb6_c0_eni313;
			local_bb6_c0_enter14_c0_eni313_valid_out_0_NO_SHIFT_REG <= 1'b1;
			local_bb6_c0_enter14_c0_eni313_valid_out_3_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb6_c0_enter14_c0_eni313_stall_in_0))
			begin
				local_bb6_c0_enter14_c0_eni313_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb6_c0_enter14_c0_eni313_stall_in_3))
			begin
				local_bb6_c0_enter14_c0_eni313_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(*)
begin
	local_bb6_c0_enter14_c0_eni313_valid_out_1_NO_SHIFT_REG = local_bb6_c0_enter14_c0_eni313_valid_out_0_NO_SHIFT_REG;
	local_bb6_c0_enter14_c0_eni313_valid_out_2_NO_SHIFT_REG = local_bb6_c0_enter14_c0_eni313_valid_out_0_NO_SHIFT_REG;
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_173to174_bb6_arrayidx78_0_valid_out_NO_SHIFT_REG;
 logic rnode_173to174_bb6_arrayidx78_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_173to174_bb6_arrayidx78_0_NO_SHIFT_REG;
 logic rnode_173to174_bb6_arrayidx78_0_reg_174_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_173to174_bb6_arrayidx78_0_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb6_arrayidx78_0_valid_out_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb6_arrayidx78_0_stall_in_reg_174_NO_SHIFT_REG;
 logic rnode_173to174_bb6_arrayidx78_0_stall_out_reg_174_NO_SHIFT_REG;

acl_data_fifo rnode_173to174_bb6_arrayidx78_0_reg_174_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_173to174_bb6_arrayidx78_0_reg_174_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_173to174_bb6_arrayidx78_0_stall_in_reg_174_NO_SHIFT_REG),
	.valid_out(rnode_173to174_bb6_arrayidx78_0_valid_out_reg_174_NO_SHIFT_REG),
	.stall_out(rnode_173to174_bb6_arrayidx78_0_stall_out_reg_174_NO_SHIFT_REG),
	.data_in((local_bb6_arrayidx78 & 64'hFFFFFFFFFFFFFFFC)),
	.data_out(rnode_173to174_bb6_arrayidx78_0_reg_174_NO_SHIFT_REG)
);

defparam rnode_173to174_bb6_arrayidx78_0_reg_174_fifo.DEPTH = 2;
defparam rnode_173to174_bb6_arrayidx78_0_reg_174_fifo.DATA_WIDTH = 64;
defparam rnode_173to174_bb6_arrayidx78_0_reg_174_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_173to174_bb6_arrayidx78_0_reg_174_fifo.IMPL = "ll_reg";

assign rnode_173to174_bb6_arrayidx78_0_reg_174_inputs_ready_NO_SHIFT_REG = local_bb6_arrayidx78_valid_out;
assign local_bb6_arrayidx78_stall_in = rnode_173to174_bb6_arrayidx78_0_stall_out_reg_174_NO_SHIFT_REG;
assign rnode_173to174_bb6_arrayidx78_0_NO_SHIFT_REG = rnode_173to174_bb6_arrayidx78_0_reg_174_NO_SHIFT_REG;
assign rnode_173to174_bb6_arrayidx78_0_stall_in_reg_174_NO_SHIFT_REG = rnode_173to174_bb6_arrayidx78_0_stall_in_NO_SHIFT_REG;
assign rnode_173to174_bb6_arrayidx78_0_valid_out_NO_SHIFT_REG = rnode_173to174_bb6_arrayidx78_0_valid_out_reg_174_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_cmp11_valid_out;
wire local_bb6_cmp11_stall_in;
wire local_bb6_cmp11_inputs_ready;
wire local_bb6_cmp11_stall_local;
wire local_bb6_cmp11;
wire [678:0] rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333;

assign local_bb6_cmp11_inputs_ready = (rnode_332to333_bb6_add81_0_valid_out_0_NO_SHIFT_REG & rnode_332to333_memcoalesce_param_extrValue_6_0_valid_out_0_NO_SHIFT_REG);
assign local_bb6_cmp11 = ($signed(rnode_332to333_bb6_add81_0_NO_SHIFT_REG) < $signed(rnode_332to333_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG));
assign local_bb6_cmp11_valid_out = local_bb6_cmp11_inputs_ready;
assign local_bb6_cmp11_stall_local = local_bb6_cmp11_stall_in;
assign rnode_332to333_bb6_add81_0_stall_in_0_NO_SHIFT_REG = (local_bb6_cmp11_stall_local | ~(local_bb6_cmp11_inputs_ready));
assign rnode_332to333_memcoalesce_param_extrValue_6_0_stall_in_0_NO_SHIFT_REG = (local_bb6_cmp11_stall_local | ~(local_bb6_cmp11_inputs_ready));
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[31:0] = rnode_332to333_memcoalesce_param_extrValue_6_1_NO_SHIFT_REG;
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[63:32] = rnode_332to333_bb6_add81_1_NO_SHIFT_REG;
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[64] = rcnode_1to333_rc10_var__u35_0_NO_SHIFT_REG[0];
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[65] = rcnode_1to333_rc10_var__u35_0_NO_SHIFT_REG[1];
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[66] = rcnode_1to333_rc10_var__u35_0_NO_SHIFT_REG[2];
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[98:67] = rcnode_1to333_rc10_var__u35_0_NO_SHIFT_REG[34:3];
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[130:99] = rcnode_1to333_rc11_ld__0_NO_SHIFT_REG[31:0];
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[131] = rcnode_1to333_rc11_ld__0_NO_SHIFT_REG[32];
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[132] = rcnode_1to333_rc11_ld__0_NO_SHIFT_REG[33];
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[164:133] = rcnode_1to333_rc11_ld__0_NO_SHIFT_REG[65:34];
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[196:165] = rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[228:197] = rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_NO_SHIFT_REG[63:32];
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[260:229] = rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_NO_SHIFT_REG[95:64];
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[292:261] = rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_NO_SHIFT_REG[127:96];
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[324:293] = rcnode_1to333_rc13_channelCounter_058_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[388:325] = (rcnode_1to333_rc13_channelCounter_058_0_NO_SHIFT_REG[95:32] & 64'hFFFFFFFFFFFFFFFC);
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[420:389] = rcnode_1to333_rc13_channelCounter_058_0_NO_SHIFT_REG[127:96];
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[452:421] = rcnode_1to333_rc13_channelCounter_058_0_NO_SHIFT_REG[159:128];
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[484:453] = rcnode_1to333_rc14_heightCounter_148_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[516:485] = rcnode_1to333_rc14_heightCounter_148_0_NO_SHIFT_REG[63:32];
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[548:517] = rcnode_1to333_rc14_heightCounter_148_0_NO_SHIFT_REG[95:64];
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[580:549] = rcnode_1to333_rc14_heightCounter_148_0_NO_SHIFT_REG[127:96];
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[612:581] = rcnode_1to333_rc15_input_acl_hw_wg_id_0_NO_SHIFT_REG[31:0];
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[644:613] = rcnode_1to333_rc15_input_acl_hw_wg_id_0_NO_SHIFT_REG[63:32];
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[676:645] = rnode_172to333_c0_exe1_0_NO_SHIFT_REG;
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[677] = rnode_161to333_cmp1430_0_NO_SHIFT_REG;
assign rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333[678] = rnode_174to333__phi_decision_xor118_0_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_valid_out_0_NO_SHIFT_REG;
 logic rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_stall_in_0_NO_SHIFT_REG;
 logic [678:0] rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG;
 logic rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_valid_out_1_NO_SHIFT_REG;
 logic rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_stall_in_1_NO_SHIFT_REG;
 logic [678:0] rcnode_333to334_rc1_memcoalesce_param_extrValue_6_1_NO_SHIFT_REG;
 logic rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_334_inputs_ready_NO_SHIFT_REG;
 logic [678:0] rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_334_NO_SHIFT_REG;
 logic rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_valid_out_0_reg_334_NO_SHIFT_REG;
 logic rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_stall_in_0_reg_334_NO_SHIFT_REG;
 logic rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_stall_out_0_reg_334_IP_NO_SHIFT_REG;
 logic rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_stall_out_0_reg_334_NO_SHIFT_REG;

acl_data_fifo rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_334_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_334_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_stall_in_0_reg_334_NO_SHIFT_REG),
	.valid_out(rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_valid_out_0_reg_334_NO_SHIFT_REG),
	.stall_out(rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_stall_out_0_reg_334_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_333),
	.data_out(rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_334_NO_SHIFT_REG)
);

defparam rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_334_fifo.DEPTH = 1;
defparam rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_334_fifo.DATA_WIDTH = 679;
defparam rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_334_fifo.ALLOW_FULL_WRITE = 1;
defparam rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_334_fifo.IMPL = "ll_reg";

assign rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_334_inputs_ready_NO_SHIFT_REG = (rnode_332to333_memcoalesce_param_extrValue_6_0_valid_out_1_NO_SHIFT_REG & rnode_332to333_bb6_add81_0_valid_out_1_NO_SHIFT_REG & rnode_172to333_c0_exe1_0_valid_out_NO_SHIFT_REG & rnode_161to333_cmp1430_0_valid_out_NO_SHIFT_REG & rnode_174to333__phi_decision_xor118_0_valid_out_NO_SHIFT_REG & rcnode_1to333_rc10_var__u35_0_valid_out_NO_SHIFT_REG & rcnode_1to333_rc11_ld__0_valid_out_NO_SHIFT_REG & rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_valid_out_NO_SHIFT_REG & rcnode_1to333_rc13_channelCounter_058_0_valid_out_NO_SHIFT_REG & rcnode_1to333_rc14_heightCounter_148_0_valid_out_NO_SHIFT_REG & rcnode_1to333_rc15_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG);
assign rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_stall_out_0_reg_334_NO_SHIFT_REG = (~(rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_334_inputs_ready_NO_SHIFT_REG) | rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_stall_out_0_reg_334_IP_NO_SHIFT_REG);
assign rnode_332to333_memcoalesce_param_extrValue_6_0_stall_in_1_NO_SHIFT_REG = rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_stall_out_0_reg_334_NO_SHIFT_REG;
assign rnode_332to333_bb6_add81_0_stall_in_1_NO_SHIFT_REG = rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_stall_out_0_reg_334_NO_SHIFT_REG;
assign rnode_172to333_c0_exe1_0_stall_in_NO_SHIFT_REG = rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_stall_out_0_reg_334_NO_SHIFT_REG;
assign rnode_161to333_cmp1430_0_stall_in_NO_SHIFT_REG = rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_stall_out_0_reg_334_NO_SHIFT_REG;
assign rnode_174to333__phi_decision_xor118_0_stall_in_NO_SHIFT_REG = rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_stall_out_0_reg_334_NO_SHIFT_REG;
assign rcnode_1to333_rc10_var__u35_0_stall_in_NO_SHIFT_REG = rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_stall_out_0_reg_334_NO_SHIFT_REG;
assign rcnode_1to333_rc11_ld__0_stall_in_NO_SHIFT_REG = rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_stall_out_0_reg_334_NO_SHIFT_REG;
assign rcnode_1to333_rc12_memcoalesce_param_extrValue_6148_0_stall_in_NO_SHIFT_REG = rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_stall_out_0_reg_334_NO_SHIFT_REG;
assign rcnode_1to333_rc13_channelCounter_058_0_stall_in_NO_SHIFT_REG = rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_stall_out_0_reg_334_NO_SHIFT_REG;
assign rcnode_1to333_rc14_heightCounter_148_0_stall_in_NO_SHIFT_REG = rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_stall_out_0_reg_334_NO_SHIFT_REG;
assign rcnode_1to333_rc15_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG = rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_stall_out_0_reg_334_NO_SHIFT_REG;
assign rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_stall_in_0_reg_334_NO_SHIFT_REG = (rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_stall_in_0_NO_SHIFT_REG | rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_stall_in_1_NO_SHIFT_REG);
assign rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_valid_out_0_NO_SHIFT_REG = rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_valid_out_0_reg_334_NO_SHIFT_REG;
assign rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_valid_out_1_NO_SHIFT_REG = rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_valid_out_0_reg_334_NO_SHIFT_REG;
assign rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG = rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_334_NO_SHIFT_REG;
assign rcnode_333to334_rc1_memcoalesce_param_extrValue_6_1_NO_SHIFT_REG = rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_reg_334_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_c0_ene115_stall_local;
wire local_bb6_c0_ene115;

assign local_bb6_c0_ene115 = local_bb6_c0_enter14_c0_eni313_NO_SHIFT_REG[8];

// This section implements an unregistered operation.
// 
wire local_bb6_c0_ene216_stall_local;
wire [31:0] local_bb6_c0_ene216;

assign local_bb6_c0_ene216[31:0] = local_bb6_c0_enter14_c0_eni313_NO_SHIFT_REG[63:32];

// This section implements an unregistered operation.
// 
wire local_bb6_c0_ene317_stall_local;
wire [31:0] local_bb6_c0_ene317;

assign local_bb6_c0_ene317[31:0] = local_bb6_c0_enter14_c0_eni313_NO_SHIFT_REG[95:64];

// This section implements an unregistered operation.
// 
wire SFC_10_VALID_162_162_0_valid_out;
wire SFC_10_VALID_162_162_0_stall_in;
wire SFC_10_VALID_162_162_0_inputs_ready;
wire SFC_10_VALID_162_162_0_stall_local;
wire SFC_10_VALID_162_162_0;

assign SFC_10_VALID_162_162_0_inputs_ready = local_bb6_c0_enter14_c0_eni313_valid_out_3_NO_SHIFT_REG;
assign SFC_10_VALID_162_162_0 = local_bb6_c0_enter14_c0_eni313_valid_bit_NO_SHIFT_REG;
assign SFC_10_VALID_162_162_0_valid_out = 1'b1;
assign local_bb6_c0_enter14_c0_eni313_stall_in_3 = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_333to334_bb6_cmp11_0_valid_out_NO_SHIFT_REG;
 logic rnode_333to334_bb6_cmp11_0_stall_in_NO_SHIFT_REG;
 logic rnode_333to334_bb6_cmp11_0_NO_SHIFT_REG;
 logic rnode_333to334_bb6_cmp11_0_reg_334_inputs_ready_NO_SHIFT_REG;
 logic rnode_333to334_bb6_cmp11_0_reg_334_NO_SHIFT_REG;
 logic rnode_333to334_bb6_cmp11_0_valid_out_reg_334_NO_SHIFT_REG;
 logic rnode_333to334_bb6_cmp11_0_stall_in_reg_334_NO_SHIFT_REG;
 logic rnode_333to334_bb6_cmp11_0_stall_out_reg_334_NO_SHIFT_REG;

acl_data_fifo rnode_333to334_bb6_cmp11_0_reg_334_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_333to334_bb6_cmp11_0_reg_334_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_333to334_bb6_cmp11_0_stall_in_reg_334_NO_SHIFT_REG),
	.valid_out(rnode_333to334_bb6_cmp11_0_valid_out_reg_334_NO_SHIFT_REG),
	.stall_out(rnode_333to334_bb6_cmp11_0_stall_out_reg_334_NO_SHIFT_REG),
	.data_in(local_bb6_cmp11),
	.data_out(rnode_333to334_bb6_cmp11_0_reg_334_NO_SHIFT_REG)
);

defparam rnode_333to334_bb6_cmp11_0_reg_334_fifo.DEPTH = 1;
defparam rnode_333to334_bb6_cmp11_0_reg_334_fifo.DATA_WIDTH = 1;
defparam rnode_333to334_bb6_cmp11_0_reg_334_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_333to334_bb6_cmp11_0_reg_334_fifo.IMPL = "ll_reg";

assign rnode_333to334_bb6_cmp11_0_reg_334_inputs_ready_NO_SHIFT_REG = local_bb6_cmp11_valid_out;
assign local_bb6_cmp11_stall_in = rnode_333to334_bb6_cmp11_0_stall_out_reg_334_NO_SHIFT_REG;
assign rnode_333to334_bb6_cmp11_0_NO_SHIFT_REG = rnode_333to334_bb6_cmp11_0_reg_334_NO_SHIFT_REG;
assign rnode_333to334_bb6_cmp11_0_stall_in_reg_334_NO_SHIFT_REG = rnode_333to334_bb6_cmp11_0_stall_in_NO_SHIFT_REG;
assign rnode_333to334_bb6_cmp11_0_valid_out_NO_SHIFT_REG = rnode_333to334_bb6_cmp11_0_valid_out_reg_334_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_var__stall_local;
wire [31:0] local_bb6_var_;

assign local_bb6_var_ = local_bb6_c0_ene216;

// This section implements an unregistered operation.
// 
wire local_bb6_var__u37_stall_local;
wire [31:0] local_bb6_var__u37;

assign local_bb6_var__u37 = local_bb6_c0_ene317;

// This section implements a registered operation.
// 
wire SFC_10_VALID_162_163_0_inputs_ready;
 reg SFC_10_VALID_162_163_0_valid_out_NO_SHIFT_REG;
wire SFC_10_VALID_162_163_0_stall_in;
wire SFC_10_VALID_162_163_0_output_regs_ready;
 reg SFC_10_VALID_162_163_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_10_VALID_162_163_0_causedstall;

assign SFC_10_VALID_162_163_0_inputs_ready = 1'b1;
assign SFC_10_VALID_162_163_0_output_regs_ready = 1'b1;
assign SFC_10_VALID_162_162_0_stall_in = 1'b0;
assign SFC_10_VALID_162_163_0_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_10_VALID_162_163_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_10_VALID_162_163_0_output_regs_ready)
		begin
			SFC_10_VALID_162_163_0_NO_SHIFT_REG <= SFC_10_VALID_162_162_0;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb6_var__u38_valid_out;
wire local_bb6_var__u38_stall_in;
wire local_bb6_var__u38_inputs_ready;
wire local_bb6_var__u38_stall_local;
wire local_bb6_var__u38;

assign local_bb6_var__u38_inputs_ready = (rnode_333to334_bb6_cmp11_0_valid_out_NO_SHIFT_REG & rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_valid_out_1_NO_SHIFT_REG);
assign local_bb6_var__u38 = (rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[64] & rnode_333to334_bb6_cmp11_0_NO_SHIFT_REG);
assign local_bb6_var__u38_valid_out = local_bb6_var__u38_inputs_ready;
assign local_bb6_var__u38_stall_local = local_bb6_var__u38_stall_in;
assign rnode_333to334_bb6_cmp11_0_stall_in_NO_SHIFT_REG = (local_bb6_var__u38_stall_local | ~(local_bb6_var__u38_inputs_ready));
assign rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_stall_in_1_NO_SHIFT_REG = (local_bb6_var__u38_stall_local | ~(local_bb6_var__u38_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb6_var__u39_stall_local;
wire [31:0] local_bb6_var__u39;

assign local_bb6_var__u39 = (local_bb6_c0_ene115 ? local_bb6_var_ : 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6_and_i1_stall_local;
wire [31:0] local_bb6_and_i1;

assign local_bb6_and_i1 = (local_bb6_var__u37 >> 32'h10);

// This section implements an unregistered operation.
// 
wire local_bb6_and10_i_stall_local;
wire [31:0] local_bb6_and10_i;

assign local_bb6_and10_i = (local_bb6_var__u37 & 32'hFFFF);

// This section implements a registered operation.
// 
wire SFC_10_VALID_163_164_0_inputs_ready;
 reg SFC_10_VALID_163_164_0_valid_out_NO_SHIFT_REG;
wire SFC_10_VALID_163_164_0_stall_in;
wire SFC_10_VALID_163_164_0_output_regs_ready;
 reg SFC_10_VALID_163_164_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_10_VALID_163_164_0_causedstall;

assign SFC_10_VALID_163_164_0_inputs_ready = 1'b1;
assign SFC_10_VALID_163_164_0_output_regs_ready = 1'b1;
assign SFC_10_VALID_162_163_0_stall_in = 1'b0;
assign SFC_10_VALID_163_164_0_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_10_VALID_163_164_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_10_VALID_163_164_0_output_regs_ready)
		begin
			SFC_10_VALID_163_164_0_NO_SHIFT_REG <= SFC_10_VALID_162_163_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb6_and2_i_stall_local;
wire [31:0] local_bb6_and2_i;

assign local_bb6_and2_i = (local_bb6_var__u39 >> 32'h10);

// This section implements an unregistered operation.
// 
wire local_bb6_and12_i_stall_local;
wire [31:0] local_bb6_and12_i;

assign local_bb6_and12_i = (local_bb6_var__u39 & 32'hFFFF);

// This section implements an unregistered operation.
// 
wire local_bb6_shr_i2_stall_local;
wire [31:0] local_bb6_shr_i2;

assign local_bb6_shr_i2 = ((local_bb6_and_i1 & 32'hFFFF) & 32'h7FFF);

// This section implements a registered operation.
// 
wire SFC_10_VALID_164_165_0_inputs_ready;
 reg SFC_10_VALID_164_165_0_valid_out_NO_SHIFT_REG;
wire SFC_10_VALID_164_165_0_stall_in;
wire SFC_10_VALID_164_165_0_output_regs_ready;
 reg SFC_10_VALID_164_165_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_10_VALID_164_165_0_causedstall;

assign SFC_10_VALID_164_165_0_inputs_ready = 1'b1;
assign SFC_10_VALID_164_165_0_output_regs_ready = 1'b1;
assign SFC_10_VALID_163_164_0_stall_in = 1'b0;
assign SFC_10_VALID_164_165_0_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_10_VALID_164_165_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_10_VALID_164_165_0_output_regs_ready)
		begin
			SFC_10_VALID_164_165_0_NO_SHIFT_REG <= SFC_10_VALID_163_164_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb6_shr3_i_stall_local;
wire [31:0] local_bb6_shr3_i;

assign local_bb6_shr3_i = ((local_bb6_and2_i & 32'hFFFF) & 32'h7FFF);

// This section implements an unregistered operation.
// 
wire local_bb6_cmp13_i_stall_local;
wire local_bb6_cmp13_i;

assign local_bb6_cmp13_i = ((local_bb6_and10_i & 32'hFFFF) > (local_bb6_and12_i & 32'hFFFF));

// This section implements a registered operation.
// 
wire SFC_10_VALID_165_166_0_inputs_ready;
 reg SFC_10_VALID_165_166_0_valid_out_NO_SHIFT_REG;
wire SFC_10_VALID_165_166_0_stall_in;
wire SFC_10_VALID_165_166_0_output_regs_ready;
 reg SFC_10_VALID_165_166_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_10_VALID_165_166_0_causedstall;

assign SFC_10_VALID_165_166_0_inputs_ready = 1'b1;
assign SFC_10_VALID_165_166_0_output_regs_ready = 1'b1;
assign SFC_10_VALID_164_165_0_stall_in = 1'b0;
assign SFC_10_VALID_165_166_0_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_10_VALID_165_166_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_10_VALID_165_166_0_output_regs_ready)
		begin
			SFC_10_VALID_165_166_0_NO_SHIFT_REG <= SFC_10_VALID_164_165_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb6_cmp_i3_stall_local;
wire local_bb6_cmp_i3;

assign local_bb6_cmp_i3 = ((local_bb6_shr_i2 & 32'h7FFF) > (local_bb6_shr3_i & 32'h7FFF));

// This section implements an unregistered operation.
// 
wire local_bb6_cmp8_i_stall_local;
wire local_bb6_cmp8_i;

assign local_bb6_cmp8_i = ((local_bb6_shr_i2 & 32'h7FFF) == (local_bb6_shr3_i & 32'h7FFF));

// This section implements a registered operation.
// 
wire SFC_10_VALID_166_167_0_inputs_ready;
 reg SFC_10_VALID_166_167_0_valid_out_NO_SHIFT_REG;
wire SFC_10_VALID_166_167_0_stall_in;
wire SFC_10_VALID_166_167_0_output_regs_ready;
 reg SFC_10_VALID_166_167_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_10_VALID_166_167_0_causedstall;

assign SFC_10_VALID_166_167_0_inputs_ready = 1'b1;
assign SFC_10_VALID_166_167_0_output_regs_ready = 1'b1;
assign SFC_10_VALID_165_166_0_stall_in = 1'b0;
assign SFC_10_VALID_166_167_0_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_10_VALID_166_167_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_10_VALID_166_167_0_output_regs_ready)
		begin
			SFC_10_VALID_166_167_0_NO_SHIFT_REG <= SFC_10_VALID_165_166_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb6_var__u39_valid_out_2;
wire local_bb6_var__u39_stall_in_2;
wire local_bb6_var__u37_valid_out_2;
wire local_bb6_var__u37_stall_in_2;
wire local_bb6_cmp_i3_valid_out;
wire local_bb6_cmp_i3_stall_in;
wire local_bb6___i_valid_out;
wire local_bb6___i_stall_in;
wire local_bb6___i_inputs_ready;
wire local_bb6___i_stall_local;
wire local_bb6___i;

assign local_bb6___i_inputs_ready = (local_bb6_c0_enter14_c0_eni313_valid_out_0_NO_SHIFT_REG & local_bb6_c0_enter14_c0_eni313_valid_out_1_NO_SHIFT_REG & local_bb6_c0_enter14_c0_eni313_valid_out_2_NO_SHIFT_REG);
assign local_bb6___i = (local_bb6_cmp8_i & local_bb6_cmp13_i);
assign local_bb6_var__u39_valid_out_2 = 1'b1;
assign local_bb6_var__u37_valid_out_2 = 1'b1;
assign local_bb6_cmp_i3_valid_out = 1'b1;
assign local_bb6___i_valid_out = 1'b1;
assign local_bb6_c0_enter14_c0_eni313_stall_in_0 = 1'b0;
assign local_bb6_c0_enter14_c0_eni313_stall_in_1 = 1'b0;
assign local_bb6_c0_enter14_c0_eni313_stall_in_2 = 1'b0;

// This section implements a registered operation.
// 
wire SFC_10_VALID_167_168_0_inputs_ready;
 reg SFC_10_VALID_167_168_0_valid_out_NO_SHIFT_REG;
wire SFC_10_VALID_167_168_0_stall_in;
wire SFC_10_VALID_167_168_0_output_regs_ready;
 reg SFC_10_VALID_167_168_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_10_VALID_167_168_0_causedstall;

assign SFC_10_VALID_167_168_0_inputs_ready = 1'b1;
assign SFC_10_VALID_167_168_0_output_regs_ready = 1'b1;
assign SFC_10_VALID_166_167_0_stall_in = 1'b0;
assign SFC_10_VALID_167_168_0_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_10_VALID_167_168_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_10_VALID_167_168_0_output_regs_ready)
		begin
			SFC_10_VALID_167_168_0_NO_SHIFT_REG <= SFC_10_VALID_166_167_0_NO_SHIFT_REG;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_162to163_bb6_var__u39_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_162to163_bb6_var__u39_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_162to163_bb6_var__u39_0_NO_SHIFT_REG;
 logic rnode_162to163_bb6_var__u39_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_162to163_bb6_var__u39_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_162to163_bb6_var__u39_1_NO_SHIFT_REG;
 logic rnode_162to163_bb6_var__u39_0_reg_163_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_162to163_bb6_var__u39_0_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_bb6_var__u39_0_valid_out_0_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_bb6_var__u39_0_stall_in_0_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_bb6_var__u39_0_stall_out_reg_163_NO_SHIFT_REG;

acl_data_fifo rnode_162to163_bb6_var__u39_0_reg_163_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_162to163_bb6_var__u39_0_reg_163_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_162to163_bb6_var__u39_0_stall_in_0_reg_163_NO_SHIFT_REG),
	.valid_out(rnode_162to163_bb6_var__u39_0_valid_out_0_reg_163_NO_SHIFT_REG),
	.stall_out(rnode_162to163_bb6_var__u39_0_stall_out_reg_163_NO_SHIFT_REG),
	.data_in(local_bb6_var__u39),
	.data_out(rnode_162to163_bb6_var__u39_0_reg_163_NO_SHIFT_REG)
);

defparam rnode_162to163_bb6_var__u39_0_reg_163_fifo.DEPTH = 1;
defparam rnode_162to163_bb6_var__u39_0_reg_163_fifo.DATA_WIDTH = 32;
defparam rnode_162to163_bb6_var__u39_0_reg_163_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_162to163_bb6_var__u39_0_reg_163_fifo.IMPL = "shift_reg";

assign rnode_162to163_bb6_var__u39_0_reg_163_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_var__u39_stall_in_2 = 1'b0;
assign rnode_162to163_bb6_var__u39_0_stall_in_0_reg_163_NO_SHIFT_REG = 1'b0;
assign rnode_162to163_bb6_var__u39_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_162to163_bb6_var__u39_0_NO_SHIFT_REG = rnode_162to163_bb6_var__u39_0_reg_163_NO_SHIFT_REG;
assign rnode_162to163_bb6_var__u39_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_162to163_bb6_var__u39_1_NO_SHIFT_REG = rnode_162to163_bb6_var__u39_0_reg_163_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_162to163_bb6_var__u37_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_162to163_bb6_var__u37_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_162to163_bb6_var__u37_0_NO_SHIFT_REG;
 logic rnode_162to163_bb6_var__u37_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_162to163_bb6_var__u37_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_162to163_bb6_var__u37_1_NO_SHIFT_REG;
 logic rnode_162to163_bb6_var__u37_0_reg_163_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_162to163_bb6_var__u37_0_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_bb6_var__u37_0_valid_out_0_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_bb6_var__u37_0_stall_in_0_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_bb6_var__u37_0_stall_out_reg_163_NO_SHIFT_REG;

acl_data_fifo rnode_162to163_bb6_var__u37_0_reg_163_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_162to163_bb6_var__u37_0_reg_163_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_162to163_bb6_var__u37_0_stall_in_0_reg_163_NO_SHIFT_REG),
	.valid_out(rnode_162to163_bb6_var__u37_0_valid_out_0_reg_163_NO_SHIFT_REG),
	.stall_out(rnode_162to163_bb6_var__u37_0_stall_out_reg_163_NO_SHIFT_REG),
	.data_in(local_bb6_var__u37),
	.data_out(rnode_162to163_bb6_var__u37_0_reg_163_NO_SHIFT_REG)
);

defparam rnode_162to163_bb6_var__u37_0_reg_163_fifo.DEPTH = 1;
defparam rnode_162to163_bb6_var__u37_0_reg_163_fifo.DATA_WIDTH = 32;
defparam rnode_162to163_bb6_var__u37_0_reg_163_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_162to163_bb6_var__u37_0_reg_163_fifo.IMPL = "shift_reg";

assign rnode_162to163_bb6_var__u37_0_reg_163_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_var__u37_stall_in_2 = 1'b0;
assign rnode_162to163_bb6_var__u37_0_stall_in_0_reg_163_NO_SHIFT_REG = 1'b0;
assign rnode_162to163_bb6_var__u37_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_162to163_bb6_var__u37_0_NO_SHIFT_REG = rnode_162to163_bb6_var__u37_0_reg_163_NO_SHIFT_REG;
assign rnode_162to163_bb6_var__u37_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_162to163_bb6_var__u37_1_NO_SHIFT_REG = rnode_162to163_bb6_var__u37_0_reg_163_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_162to163_bb6_cmp_i3_0_valid_out_NO_SHIFT_REG;
 logic rnode_162to163_bb6_cmp_i3_0_stall_in_NO_SHIFT_REG;
 logic rnode_162to163_bb6_cmp_i3_0_NO_SHIFT_REG;
 logic rnode_162to163_bb6_cmp_i3_0_reg_163_inputs_ready_NO_SHIFT_REG;
 logic rnode_162to163_bb6_cmp_i3_0_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_bb6_cmp_i3_0_valid_out_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_bb6_cmp_i3_0_stall_in_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_bb6_cmp_i3_0_stall_out_reg_163_NO_SHIFT_REG;

acl_data_fifo rnode_162to163_bb6_cmp_i3_0_reg_163_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_162to163_bb6_cmp_i3_0_reg_163_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_162to163_bb6_cmp_i3_0_stall_in_reg_163_NO_SHIFT_REG),
	.valid_out(rnode_162to163_bb6_cmp_i3_0_valid_out_reg_163_NO_SHIFT_REG),
	.stall_out(rnode_162to163_bb6_cmp_i3_0_stall_out_reg_163_NO_SHIFT_REG),
	.data_in(local_bb6_cmp_i3),
	.data_out(rnode_162to163_bb6_cmp_i3_0_reg_163_NO_SHIFT_REG)
);

defparam rnode_162to163_bb6_cmp_i3_0_reg_163_fifo.DEPTH = 1;
defparam rnode_162to163_bb6_cmp_i3_0_reg_163_fifo.DATA_WIDTH = 1;
defparam rnode_162to163_bb6_cmp_i3_0_reg_163_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_162to163_bb6_cmp_i3_0_reg_163_fifo.IMPL = "shift_reg";

assign rnode_162to163_bb6_cmp_i3_0_reg_163_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_cmp_i3_stall_in = 1'b0;
assign rnode_162to163_bb6_cmp_i3_0_NO_SHIFT_REG = rnode_162to163_bb6_cmp_i3_0_reg_163_NO_SHIFT_REG;
assign rnode_162to163_bb6_cmp_i3_0_stall_in_reg_163_NO_SHIFT_REG = 1'b0;
assign rnode_162to163_bb6_cmp_i3_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_162to163_bb6___i_0_valid_out_NO_SHIFT_REG;
 logic rnode_162to163_bb6___i_0_stall_in_NO_SHIFT_REG;
 logic rnode_162to163_bb6___i_0_NO_SHIFT_REG;
 logic rnode_162to163_bb6___i_0_reg_163_inputs_ready_NO_SHIFT_REG;
 logic rnode_162to163_bb6___i_0_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_bb6___i_0_valid_out_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_bb6___i_0_stall_in_reg_163_NO_SHIFT_REG;
 logic rnode_162to163_bb6___i_0_stall_out_reg_163_NO_SHIFT_REG;

acl_data_fifo rnode_162to163_bb6___i_0_reg_163_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_162to163_bb6___i_0_reg_163_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_162to163_bb6___i_0_stall_in_reg_163_NO_SHIFT_REG),
	.valid_out(rnode_162to163_bb6___i_0_valid_out_reg_163_NO_SHIFT_REG),
	.stall_out(rnode_162to163_bb6___i_0_stall_out_reg_163_NO_SHIFT_REG),
	.data_in(local_bb6___i),
	.data_out(rnode_162to163_bb6___i_0_reg_163_NO_SHIFT_REG)
);

defparam rnode_162to163_bb6___i_0_reg_163_fifo.DEPTH = 1;
defparam rnode_162to163_bb6___i_0_reg_163_fifo.DATA_WIDTH = 1;
defparam rnode_162to163_bb6___i_0_reg_163_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_162to163_bb6___i_0_reg_163_fifo.IMPL = "shift_reg";

assign rnode_162to163_bb6___i_0_reg_163_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6___i_stall_in = 1'b0;
assign rnode_162to163_bb6___i_0_NO_SHIFT_REG = rnode_162to163_bb6___i_0_reg_163_NO_SHIFT_REG;
assign rnode_162to163_bb6___i_0_stall_in_reg_163_NO_SHIFT_REG = 1'b0;
assign rnode_162to163_bb6___i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_10_VALID_168_169_0_inputs_ready;
 reg SFC_10_VALID_168_169_0_valid_out_NO_SHIFT_REG;
wire SFC_10_VALID_168_169_0_stall_in;
wire SFC_10_VALID_168_169_0_output_regs_ready;
 reg SFC_10_VALID_168_169_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_10_VALID_168_169_0_causedstall;

assign SFC_10_VALID_168_169_0_inputs_ready = 1'b1;
assign SFC_10_VALID_168_169_0_output_regs_ready = 1'b1;
assign SFC_10_VALID_167_168_0_stall_in = 1'b0;
assign SFC_10_VALID_168_169_0_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_10_VALID_168_169_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_10_VALID_168_169_0_output_regs_ready)
		begin
			SFC_10_VALID_168_169_0_NO_SHIFT_REG <= SFC_10_VALID_167_168_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb6__8_i_stall_local;
wire local_bb6__8_i;

assign local_bb6__8_i = (rnode_162to163_bb6_cmp_i3_0_NO_SHIFT_REG | rnode_162to163_bb6___i_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb6__9_i_stall_local;
wire [31:0] local_bb6__9_i;

assign local_bb6__9_i = (local_bb6__8_i ? rnode_162to163_bb6_var__u39_0_NO_SHIFT_REG : rnode_162to163_bb6_var__u37_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb6__10_i_stall_local;
wire [31:0] local_bb6__10_i;

assign local_bb6__10_i = (local_bb6__8_i ? rnode_162to163_bb6_var__u37_1_NO_SHIFT_REG : rnode_162to163_bb6_var__u39_1_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb6_shr18_i_stall_local;
wire [31:0] local_bb6_shr18_i;

assign local_bb6_shr18_i = (local_bb6__9_i >> 32'h17);

// This section implements an unregistered operation.
// 
wire local_bb6_shr16_i_stall_local;
wire [31:0] local_bb6_shr16_i;

assign local_bb6_shr16_i = (local_bb6__10_i >> 32'h17);

// This section implements an unregistered operation.
// 
wire local_bb6_and19_i_stall_local;
wire [31:0] local_bb6_and19_i;

assign local_bb6_and19_i = ((local_bb6_shr18_i & 32'h1FF) & 32'hFF);

// This section implements an unregistered operation.
// 
wire local_bb6_var__u40_stall_local;
wire [31:0] local_bb6_var__u40;

assign local_bb6_var__u40 = ((local_bb6_shr18_i & 32'h1FF) & (local_bb6_shr16_i & 32'h1FF));

// This section implements an unregistered operation.
// 
wire local_bb6_sub_i9_stall_local;
wire [31:0] local_bb6_sub_i9;

assign local_bb6_sub_i9 = ((local_bb6_shr16_i & 32'h1FF) - (local_bb6_shr18_i & 32'h1FF));

// This section implements an unregistered operation.
// 
wire local_bb6_lnot23_i_stall_local;
wire local_bb6_lnot23_i;

assign local_bb6_lnot23_i = ((local_bb6_and19_i & 32'hFF) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6_cmp27_i_stall_local;
wire local_bb6_cmp27_i;

assign local_bb6_cmp27_i = ((local_bb6_and19_i & 32'hFF) == 32'hFF);

// This section implements an unregistered operation.
// 
wire local_bb6_var__u41_stall_local;
wire [31:0] local_bb6_var__u41;

assign local_bb6_var__u41 = ((local_bb6_var__u40 & 32'h1FF) & 32'hFF);

// This section implements an unregistered operation.
// 
wire local_bb6_and68_i_stall_local;
wire [31:0] local_bb6_and68_i;

assign local_bb6_and68_i = (local_bb6_sub_i9 & 32'hFF);

// This section implements an unregistered operation.
// 
wire local_bb6_var__u42_stall_local;
wire local_bb6_var__u42;

assign local_bb6_var__u42 = ((local_bb6_var__u41 & 32'hFF) == 32'hFF);

// This section implements an unregistered operation.
// 
wire local_bb6_cmp69_i_stall_local;
wire local_bb6_cmp69_i;

assign local_bb6_cmp69_i = ((local_bb6_and68_i & 32'hFF) > 32'h1F);

// This section implements an unregistered operation.
// 
wire local_bb6__9_i_valid_out_1;
wire local_bb6__9_i_stall_in_1;
wire local_bb6__10_i_valid_out_1;
wire local_bb6__10_i_stall_in_1;
wire local_bb6_shr16_i_valid_out_2;
wire local_bb6_shr16_i_stall_in_2;
wire local_bb6_lnot23_i_valid_out;
wire local_bb6_lnot23_i_stall_in;
wire local_bb6_cmp27_i_valid_out;
wire local_bb6_cmp27_i_stall_in;
wire local_bb6_var__u42_valid_out;
wire local_bb6_var__u42_stall_in;
wire local_bb6_align_0_i_valid_out;
wire local_bb6_align_0_i_stall_in;
wire local_bb6_align_0_i_inputs_ready;
wire local_bb6_align_0_i_stall_local;
wire [31:0] local_bb6_align_0_i;

assign local_bb6_align_0_i_inputs_ready = (rnode_162to163_bb6_var__u39_0_valid_out_0_NO_SHIFT_REG & rnode_162to163_bb6_var__u37_0_valid_out_0_NO_SHIFT_REG & rnode_162to163_bb6_var__u37_0_valid_out_1_NO_SHIFT_REG & rnode_162to163_bb6_var__u39_0_valid_out_1_NO_SHIFT_REG & rnode_162to163_bb6_cmp_i3_0_valid_out_NO_SHIFT_REG & rnode_162to163_bb6___i_0_valid_out_NO_SHIFT_REG);
assign local_bb6_align_0_i = (local_bb6_cmp69_i ? 32'h1F : (local_bb6_and68_i & 32'hFF));
assign local_bb6__9_i_valid_out_1 = 1'b1;
assign local_bb6__10_i_valid_out_1 = 1'b1;
assign local_bb6_shr16_i_valid_out_2 = 1'b1;
assign local_bb6_lnot23_i_valid_out = 1'b1;
assign local_bb6_cmp27_i_valid_out = 1'b1;
assign local_bb6_var__u42_valid_out = 1'b1;
assign local_bb6_align_0_i_valid_out = 1'b1;
assign rnode_162to163_bb6_var__u39_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_162to163_bb6_var__u37_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_162to163_bb6_var__u37_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_162to163_bb6_var__u39_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_162to163_bb6_cmp_i3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_162to163_bb6___i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_163to164_bb6__9_i_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_163to164_bb6__9_i_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_163to164_bb6__9_i_0_NO_SHIFT_REG;
 logic rnode_163to164_bb6__9_i_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_163to164_bb6__9_i_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_163to164_bb6__9_i_1_NO_SHIFT_REG;
 logic rnode_163to164_bb6__9_i_0_reg_164_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_163to164_bb6__9_i_0_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb6__9_i_0_valid_out_0_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb6__9_i_0_stall_in_0_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb6__9_i_0_stall_out_reg_164_NO_SHIFT_REG;

acl_data_fifo rnode_163to164_bb6__9_i_0_reg_164_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_163to164_bb6__9_i_0_reg_164_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_163to164_bb6__9_i_0_stall_in_0_reg_164_NO_SHIFT_REG),
	.valid_out(rnode_163to164_bb6__9_i_0_valid_out_0_reg_164_NO_SHIFT_REG),
	.stall_out(rnode_163to164_bb6__9_i_0_stall_out_reg_164_NO_SHIFT_REG),
	.data_in(local_bb6__9_i),
	.data_out(rnode_163to164_bb6__9_i_0_reg_164_NO_SHIFT_REG)
);

defparam rnode_163to164_bb6__9_i_0_reg_164_fifo.DEPTH = 1;
defparam rnode_163to164_bb6__9_i_0_reg_164_fifo.DATA_WIDTH = 32;
defparam rnode_163to164_bb6__9_i_0_reg_164_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_163to164_bb6__9_i_0_reg_164_fifo.IMPL = "shift_reg";

assign rnode_163to164_bb6__9_i_0_reg_164_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6__9_i_stall_in_1 = 1'b0;
assign rnode_163to164_bb6__9_i_0_stall_in_0_reg_164_NO_SHIFT_REG = 1'b0;
assign rnode_163to164_bb6__9_i_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_163to164_bb6__9_i_0_NO_SHIFT_REG = rnode_163to164_bb6__9_i_0_reg_164_NO_SHIFT_REG;
assign rnode_163to164_bb6__9_i_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_163to164_bb6__9_i_1_NO_SHIFT_REG = rnode_163to164_bb6__9_i_0_reg_164_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_163to164_bb6__10_i_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_163to164_bb6__10_i_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_163to164_bb6__10_i_0_NO_SHIFT_REG;
 logic rnode_163to164_bb6__10_i_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_163to164_bb6__10_i_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_163to164_bb6__10_i_1_NO_SHIFT_REG;
 logic rnode_163to164_bb6__10_i_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_163to164_bb6__10_i_0_stall_in_2_NO_SHIFT_REG;
 logic [31:0] rnode_163to164_bb6__10_i_2_NO_SHIFT_REG;
 logic rnode_163to164_bb6__10_i_0_reg_164_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_163to164_bb6__10_i_0_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb6__10_i_0_valid_out_0_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb6__10_i_0_stall_in_0_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb6__10_i_0_stall_out_reg_164_NO_SHIFT_REG;

acl_data_fifo rnode_163to164_bb6__10_i_0_reg_164_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_163to164_bb6__10_i_0_reg_164_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_163to164_bb6__10_i_0_stall_in_0_reg_164_NO_SHIFT_REG),
	.valid_out(rnode_163to164_bb6__10_i_0_valid_out_0_reg_164_NO_SHIFT_REG),
	.stall_out(rnode_163to164_bb6__10_i_0_stall_out_reg_164_NO_SHIFT_REG),
	.data_in(local_bb6__10_i),
	.data_out(rnode_163to164_bb6__10_i_0_reg_164_NO_SHIFT_REG)
);

defparam rnode_163to164_bb6__10_i_0_reg_164_fifo.DEPTH = 1;
defparam rnode_163to164_bb6__10_i_0_reg_164_fifo.DATA_WIDTH = 32;
defparam rnode_163to164_bb6__10_i_0_reg_164_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_163to164_bb6__10_i_0_reg_164_fifo.IMPL = "shift_reg";

assign rnode_163to164_bb6__10_i_0_reg_164_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6__10_i_stall_in_1 = 1'b0;
assign rnode_163to164_bb6__10_i_0_stall_in_0_reg_164_NO_SHIFT_REG = 1'b0;
assign rnode_163to164_bb6__10_i_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_163to164_bb6__10_i_0_NO_SHIFT_REG = rnode_163to164_bb6__10_i_0_reg_164_NO_SHIFT_REG;
assign rnode_163to164_bb6__10_i_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_163to164_bb6__10_i_1_NO_SHIFT_REG = rnode_163to164_bb6__10_i_0_reg_164_NO_SHIFT_REG;
assign rnode_163to164_bb6__10_i_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_163to164_bb6__10_i_2_NO_SHIFT_REG = rnode_163to164_bb6__10_i_0_reg_164_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_163to164_bb6_shr16_i_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_163to164_bb6_shr16_i_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_163to164_bb6_shr16_i_0_NO_SHIFT_REG;
 logic rnode_163to164_bb6_shr16_i_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_163to164_bb6_shr16_i_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_163to164_bb6_shr16_i_1_NO_SHIFT_REG;
 logic rnode_163to164_bb6_shr16_i_0_reg_164_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_163to164_bb6_shr16_i_0_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb6_shr16_i_0_valid_out_0_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb6_shr16_i_0_stall_in_0_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb6_shr16_i_0_stall_out_reg_164_NO_SHIFT_REG;

acl_data_fifo rnode_163to164_bb6_shr16_i_0_reg_164_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_163to164_bb6_shr16_i_0_reg_164_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_163to164_bb6_shr16_i_0_stall_in_0_reg_164_NO_SHIFT_REG),
	.valid_out(rnode_163to164_bb6_shr16_i_0_valid_out_0_reg_164_NO_SHIFT_REG),
	.stall_out(rnode_163to164_bb6_shr16_i_0_stall_out_reg_164_NO_SHIFT_REG),
	.data_in((local_bb6_shr16_i & 32'h1FF)),
	.data_out(rnode_163to164_bb6_shr16_i_0_reg_164_NO_SHIFT_REG)
);

defparam rnode_163to164_bb6_shr16_i_0_reg_164_fifo.DEPTH = 1;
defparam rnode_163to164_bb6_shr16_i_0_reg_164_fifo.DATA_WIDTH = 32;
defparam rnode_163to164_bb6_shr16_i_0_reg_164_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_163to164_bb6_shr16_i_0_reg_164_fifo.IMPL = "shift_reg";

assign rnode_163to164_bb6_shr16_i_0_reg_164_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_shr16_i_stall_in_2 = 1'b0;
assign rnode_163to164_bb6_shr16_i_0_stall_in_0_reg_164_NO_SHIFT_REG = 1'b0;
assign rnode_163to164_bb6_shr16_i_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_163to164_bb6_shr16_i_0_NO_SHIFT_REG = rnode_163to164_bb6_shr16_i_0_reg_164_NO_SHIFT_REG;
assign rnode_163to164_bb6_shr16_i_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_163to164_bb6_shr16_i_1_NO_SHIFT_REG = rnode_163to164_bb6_shr16_i_0_reg_164_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_163to164_bb6_lnot23_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_163to164_bb6_lnot23_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_163to164_bb6_lnot23_i_0_NO_SHIFT_REG;
 logic rnode_163to164_bb6_lnot23_i_0_reg_164_inputs_ready_NO_SHIFT_REG;
 logic rnode_163to164_bb6_lnot23_i_0_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb6_lnot23_i_0_valid_out_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb6_lnot23_i_0_stall_in_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb6_lnot23_i_0_stall_out_reg_164_NO_SHIFT_REG;

acl_data_fifo rnode_163to164_bb6_lnot23_i_0_reg_164_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_163to164_bb6_lnot23_i_0_reg_164_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_163to164_bb6_lnot23_i_0_stall_in_reg_164_NO_SHIFT_REG),
	.valid_out(rnode_163to164_bb6_lnot23_i_0_valid_out_reg_164_NO_SHIFT_REG),
	.stall_out(rnode_163to164_bb6_lnot23_i_0_stall_out_reg_164_NO_SHIFT_REG),
	.data_in(local_bb6_lnot23_i),
	.data_out(rnode_163to164_bb6_lnot23_i_0_reg_164_NO_SHIFT_REG)
);

defparam rnode_163to164_bb6_lnot23_i_0_reg_164_fifo.DEPTH = 1;
defparam rnode_163to164_bb6_lnot23_i_0_reg_164_fifo.DATA_WIDTH = 1;
defparam rnode_163to164_bb6_lnot23_i_0_reg_164_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_163to164_bb6_lnot23_i_0_reg_164_fifo.IMPL = "shift_reg";

assign rnode_163to164_bb6_lnot23_i_0_reg_164_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_lnot23_i_stall_in = 1'b0;
assign rnode_163to164_bb6_lnot23_i_0_NO_SHIFT_REG = rnode_163to164_bb6_lnot23_i_0_reg_164_NO_SHIFT_REG;
assign rnode_163to164_bb6_lnot23_i_0_stall_in_reg_164_NO_SHIFT_REG = 1'b0;
assign rnode_163to164_bb6_lnot23_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_163to164_bb6_cmp27_i_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_163to164_bb6_cmp27_i_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_163to164_bb6_cmp27_i_0_NO_SHIFT_REG;
 logic rnode_163to164_bb6_cmp27_i_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_163to164_bb6_cmp27_i_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_163to164_bb6_cmp27_i_1_NO_SHIFT_REG;
 logic rnode_163to164_bb6_cmp27_i_0_reg_164_inputs_ready_NO_SHIFT_REG;
 logic rnode_163to164_bb6_cmp27_i_0_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb6_cmp27_i_0_valid_out_0_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb6_cmp27_i_0_stall_in_0_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb6_cmp27_i_0_stall_out_reg_164_NO_SHIFT_REG;

acl_data_fifo rnode_163to164_bb6_cmp27_i_0_reg_164_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_163to164_bb6_cmp27_i_0_reg_164_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_163to164_bb6_cmp27_i_0_stall_in_0_reg_164_NO_SHIFT_REG),
	.valid_out(rnode_163to164_bb6_cmp27_i_0_valid_out_0_reg_164_NO_SHIFT_REG),
	.stall_out(rnode_163to164_bb6_cmp27_i_0_stall_out_reg_164_NO_SHIFT_REG),
	.data_in(local_bb6_cmp27_i),
	.data_out(rnode_163to164_bb6_cmp27_i_0_reg_164_NO_SHIFT_REG)
);

defparam rnode_163to164_bb6_cmp27_i_0_reg_164_fifo.DEPTH = 1;
defparam rnode_163to164_bb6_cmp27_i_0_reg_164_fifo.DATA_WIDTH = 1;
defparam rnode_163to164_bb6_cmp27_i_0_reg_164_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_163to164_bb6_cmp27_i_0_reg_164_fifo.IMPL = "shift_reg";

assign rnode_163to164_bb6_cmp27_i_0_reg_164_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_cmp27_i_stall_in = 1'b0;
assign rnode_163to164_bb6_cmp27_i_0_stall_in_0_reg_164_NO_SHIFT_REG = 1'b0;
assign rnode_163to164_bb6_cmp27_i_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_163to164_bb6_cmp27_i_0_NO_SHIFT_REG = rnode_163to164_bb6_cmp27_i_0_reg_164_NO_SHIFT_REG;
assign rnode_163to164_bb6_cmp27_i_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_163to164_bb6_cmp27_i_1_NO_SHIFT_REG = rnode_163to164_bb6_cmp27_i_0_reg_164_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_163to164_bb6_var__u42_0_valid_out_NO_SHIFT_REG;
 logic rnode_163to164_bb6_var__u42_0_stall_in_NO_SHIFT_REG;
 logic rnode_163to164_bb6_var__u42_0_NO_SHIFT_REG;
 logic rnode_163to164_bb6_var__u42_0_reg_164_inputs_ready_NO_SHIFT_REG;
 logic rnode_163to164_bb6_var__u42_0_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb6_var__u42_0_valid_out_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb6_var__u42_0_stall_in_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb6_var__u42_0_stall_out_reg_164_NO_SHIFT_REG;

acl_data_fifo rnode_163to164_bb6_var__u42_0_reg_164_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_163to164_bb6_var__u42_0_reg_164_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_163to164_bb6_var__u42_0_stall_in_reg_164_NO_SHIFT_REG),
	.valid_out(rnode_163to164_bb6_var__u42_0_valid_out_reg_164_NO_SHIFT_REG),
	.stall_out(rnode_163to164_bb6_var__u42_0_stall_out_reg_164_NO_SHIFT_REG),
	.data_in(local_bb6_var__u42),
	.data_out(rnode_163to164_bb6_var__u42_0_reg_164_NO_SHIFT_REG)
);

defparam rnode_163to164_bb6_var__u42_0_reg_164_fifo.DEPTH = 1;
defparam rnode_163to164_bb6_var__u42_0_reg_164_fifo.DATA_WIDTH = 1;
defparam rnode_163to164_bb6_var__u42_0_reg_164_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_163to164_bb6_var__u42_0_reg_164_fifo.IMPL = "shift_reg";

assign rnode_163to164_bb6_var__u42_0_reg_164_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_var__u42_stall_in = 1'b0;
assign rnode_163to164_bb6_var__u42_0_NO_SHIFT_REG = rnode_163to164_bb6_var__u42_0_reg_164_NO_SHIFT_REG;
assign rnode_163to164_bb6_var__u42_0_stall_in_reg_164_NO_SHIFT_REG = 1'b0;
assign rnode_163to164_bb6_var__u42_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_163to164_bb6_align_0_i_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_163to164_bb6_align_0_i_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_163to164_bb6_align_0_i_0_NO_SHIFT_REG;
 logic rnode_163to164_bb6_align_0_i_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_163to164_bb6_align_0_i_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_163to164_bb6_align_0_i_1_NO_SHIFT_REG;
 logic rnode_163to164_bb6_align_0_i_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_163to164_bb6_align_0_i_0_stall_in_2_NO_SHIFT_REG;
 logic [31:0] rnode_163to164_bb6_align_0_i_2_NO_SHIFT_REG;
 logic rnode_163to164_bb6_align_0_i_0_valid_out_3_NO_SHIFT_REG;
 logic rnode_163to164_bb6_align_0_i_0_stall_in_3_NO_SHIFT_REG;
 logic [31:0] rnode_163to164_bb6_align_0_i_3_NO_SHIFT_REG;
 logic rnode_163to164_bb6_align_0_i_0_valid_out_4_NO_SHIFT_REG;
 logic rnode_163to164_bb6_align_0_i_0_stall_in_4_NO_SHIFT_REG;
 logic [31:0] rnode_163to164_bb6_align_0_i_4_NO_SHIFT_REG;
 logic rnode_163to164_bb6_align_0_i_0_reg_164_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_163to164_bb6_align_0_i_0_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb6_align_0_i_0_valid_out_0_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb6_align_0_i_0_stall_in_0_reg_164_NO_SHIFT_REG;
 logic rnode_163to164_bb6_align_0_i_0_stall_out_reg_164_NO_SHIFT_REG;

acl_data_fifo rnode_163to164_bb6_align_0_i_0_reg_164_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_163to164_bb6_align_0_i_0_reg_164_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_163to164_bb6_align_0_i_0_stall_in_0_reg_164_NO_SHIFT_REG),
	.valid_out(rnode_163to164_bb6_align_0_i_0_valid_out_0_reg_164_NO_SHIFT_REG),
	.stall_out(rnode_163to164_bb6_align_0_i_0_stall_out_reg_164_NO_SHIFT_REG),
	.data_in((local_bb6_align_0_i & 32'hFF)),
	.data_out(rnode_163to164_bb6_align_0_i_0_reg_164_NO_SHIFT_REG)
);

defparam rnode_163to164_bb6_align_0_i_0_reg_164_fifo.DEPTH = 1;
defparam rnode_163to164_bb6_align_0_i_0_reg_164_fifo.DATA_WIDTH = 32;
defparam rnode_163to164_bb6_align_0_i_0_reg_164_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_163to164_bb6_align_0_i_0_reg_164_fifo.IMPL = "shift_reg";

assign rnode_163to164_bb6_align_0_i_0_reg_164_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_align_0_i_stall_in = 1'b0;
assign rnode_163to164_bb6_align_0_i_0_stall_in_0_reg_164_NO_SHIFT_REG = 1'b0;
assign rnode_163to164_bb6_align_0_i_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_163to164_bb6_align_0_i_0_NO_SHIFT_REG = rnode_163to164_bb6_align_0_i_0_reg_164_NO_SHIFT_REG;
assign rnode_163to164_bb6_align_0_i_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_163to164_bb6_align_0_i_1_NO_SHIFT_REG = rnode_163to164_bb6_align_0_i_0_reg_164_NO_SHIFT_REG;
assign rnode_163to164_bb6_align_0_i_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_163to164_bb6_align_0_i_2_NO_SHIFT_REG = rnode_163to164_bb6_align_0_i_0_reg_164_NO_SHIFT_REG;
assign rnode_163to164_bb6_align_0_i_0_valid_out_3_NO_SHIFT_REG = 1'b1;
assign rnode_163to164_bb6_align_0_i_3_NO_SHIFT_REG = rnode_163to164_bb6_align_0_i_0_reg_164_NO_SHIFT_REG;
assign rnode_163to164_bb6_align_0_i_0_valid_out_4_NO_SHIFT_REG = 1'b1;
assign rnode_163to164_bb6_align_0_i_4_NO_SHIFT_REG = rnode_163to164_bb6_align_0_i_0_reg_164_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_and21_i_stall_local;
wire [31:0] local_bb6_and21_i;

assign local_bb6_and21_i = (rnode_163to164_bb6__9_i_0_NO_SHIFT_REG & 32'h7FFFFF);

// This section implements an unregistered operation.
// 
wire local_bb6_and20_i_stall_local;
wire [31:0] local_bb6_and20_i;

assign local_bb6_and20_i = (rnode_163to164_bb6__10_i_0_NO_SHIFT_REG & 32'h7FFFFF);

// This section implements an unregistered operation.
// 
wire local_bb6_and35_i_valid_out;
wire local_bb6_and35_i_stall_in;
wire local_bb6_and35_i_inputs_ready;
wire local_bb6_and35_i_stall_local;
wire [31:0] local_bb6_and35_i;

assign local_bb6_and35_i_inputs_ready = rnode_163to164_bb6__10_i_0_valid_out_1_NO_SHIFT_REG;
assign local_bb6_and35_i = (rnode_163to164_bb6__10_i_1_NO_SHIFT_REG & 32'h80000000);
assign local_bb6_and35_i_valid_out = 1'b1;
assign rnode_163to164_bb6__10_i_0_stall_in_1_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb6_xor_i5_stall_local;
wire [31:0] local_bb6_xor_i5;

assign local_bb6_xor_i5 = (rnode_163to164_bb6__10_i_2_NO_SHIFT_REG ^ rnode_163to164_bb6__9_i_1_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb6_and17_i_stall_local;
wire [31:0] local_bb6_and17_i;

assign local_bb6_and17_i = ((rnode_163to164_bb6_shr16_i_0_NO_SHIFT_REG & 32'h1FF) & 32'hFF);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_164to165_bb6_shr16_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_164to165_bb6_shr16_i_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_164to165_bb6_shr16_i_0_NO_SHIFT_REG;
 logic rnode_164to165_bb6_shr16_i_0_reg_165_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_164to165_bb6_shr16_i_0_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb6_shr16_i_0_valid_out_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb6_shr16_i_0_stall_in_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb6_shr16_i_0_stall_out_reg_165_NO_SHIFT_REG;

acl_data_fifo rnode_164to165_bb6_shr16_i_0_reg_165_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_164to165_bb6_shr16_i_0_reg_165_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_164to165_bb6_shr16_i_0_stall_in_reg_165_NO_SHIFT_REG),
	.valid_out(rnode_164to165_bb6_shr16_i_0_valid_out_reg_165_NO_SHIFT_REG),
	.stall_out(rnode_164to165_bb6_shr16_i_0_stall_out_reg_165_NO_SHIFT_REG),
	.data_in((rnode_163to164_bb6_shr16_i_1_NO_SHIFT_REG & 32'h1FF)),
	.data_out(rnode_164to165_bb6_shr16_i_0_reg_165_NO_SHIFT_REG)
);

defparam rnode_164to165_bb6_shr16_i_0_reg_165_fifo.DEPTH = 1;
defparam rnode_164to165_bb6_shr16_i_0_reg_165_fifo.DATA_WIDTH = 32;
defparam rnode_164to165_bb6_shr16_i_0_reg_165_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_164to165_bb6_shr16_i_0_reg_165_fifo.IMPL = "shift_reg";

assign rnode_164to165_bb6_shr16_i_0_reg_165_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_163to164_bb6_shr16_i_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_164to165_bb6_shr16_i_0_NO_SHIFT_REG = rnode_164to165_bb6_shr16_i_0_reg_165_NO_SHIFT_REG;
assign rnode_164to165_bb6_shr16_i_0_stall_in_reg_165_NO_SHIFT_REG = 1'b0;
assign rnode_164to165_bb6_shr16_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb6_and93_i10_stall_local;
wire [31:0] local_bb6_and93_i10;

assign local_bb6_and93_i10 = ((rnode_163to164_bb6_align_0_i_0_NO_SHIFT_REG & 32'hFF) & 32'h1C);

// This section implements an unregistered operation.
// 
wire local_bb6_and95_i_stall_local;
wire [31:0] local_bb6_and95_i;

assign local_bb6_and95_i = ((rnode_163to164_bb6_align_0_i_1_NO_SHIFT_REG & 32'hFF) & 32'h10);

// This section implements an unregistered operation.
// 
wire local_bb6_and112_i_stall_local;
wire [31:0] local_bb6_and112_i;

assign local_bb6_and112_i = ((rnode_163to164_bb6_align_0_i_2_NO_SHIFT_REG & 32'hFF) & 32'h8);

// This section implements an unregistered operation.
// 
wire local_bb6_and125_i_stall_local;
wire [31:0] local_bb6_and125_i;

assign local_bb6_and125_i = ((rnode_163to164_bb6_align_0_i_3_NO_SHIFT_REG & 32'hFF) & 32'h4);

// This section implements an unregistered operation.
// 
wire local_bb6_and143_i_stall_local;
wire [31:0] local_bb6_and143_i;

assign local_bb6_and143_i = ((rnode_163to164_bb6_align_0_i_4_NO_SHIFT_REG & 32'hFF) & 32'h3);

// This section implements an unregistered operation.
// 
wire local_bb6_lnot33_not_i_stall_local;
wire local_bb6_lnot33_not_i;

assign local_bb6_lnot33_not_i = ((local_bb6_and21_i & 32'h7FFFFF) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6_or64_i_stall_local;
wire [31:0] local_bb6_or64_i;

assign local_bb6_or64_i = ((local_bb6_and21_i & 32'h7FFFFF) << 32'h3);

// This section implements an unregistered operation.
// 
wire local_bb6_lnot30_i_stall_local;
wire local_bb6_lnot30_i;

assign local_bb6_lnot30_i = ((local_bb6_and20_i & 32'h7FFFFF) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6_or_i8_stall_local;
wire [31:0] local_bb6_or_i8;

assign local_bb6_or_i8 = ((local_bb6_and20_i & 32'h7FFFFF) << 32'h3);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_164to165_bb6_and35_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_164to165_bb6_and35_i_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_164to165_bb6_and35_i_0_NO_SHIFT_REG;
 logic rnode_164to165_bb6_and35_i_0_reg_165_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_164to165_bb6_and35_i_0_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb6_and35_i_0_valid_out_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb6_and35_i_0_stall_in_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb6_and35_i_0_stall_out_reg_165_NO_SHIFT_REG;

acl_data_fifo rnode_164to165_bb6_and35_i_0_reg_165_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_164to165_bb6_and35_i_0_reg_165_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_164to165_bb6_and35_i_0_stall_in_reg_165_NO_SHIFT_REG),
	.valid_out(rnode_164to165_bb6_and35_i_0_valid_out_reg_165_NO_SHIFT_REG),
	.stall_out(rnode_164to165_bb6_and35_i_0_stall_out_reg_165_NO_SHIFT_REG),
	.data_in((local_bb6_and35_i & 32'h80000000)),
	.data_out(rnode_164to165_bb6_and35_i_0_reg_165_NO_SHIFT_REG)
);

defparam rnode_164to165_bb6_and35_i_0_reg_165_fifo.DEPTH = 1;
defparam rnode_164to165_bb6_and35_i_0_reg_165_fifo.DATA_WIDTH = 32;
defparam rnode_164to165_bb6_and35_i_0_reg_165_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_164to165_bb6_and35_i_0_reg_165_fifo.IMPL = "shift_reg";

assign rnode_164to165_bb6_and35_i_0_reg_165_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_and35_i_stall_in = 1'b0;
assign rnode_164to165_bb6_and35_i_0_NO_SHIFT_REG = rnode_164to165_bb6_and35_i_0_reg_165_NO_SHIFT_REG;
assign rnode_164to165_bb6_and35_i_0_stall_in_reg_165_NO_SHIFT_REG = 1'b0;
assign rnode_164to165_bb6_and35_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb6_cmp37_i_stall_local;
wire local_bb6_cmp37_i;

assign local_bb6_cmp37_i = ($signed(local_bb6_xor_i5) < $signed(32'h0));

// This section implements an unregistered operation.
// 
wire local_bb6_xor_lobit_i_stall_local;
wire [31:0] local_bb6_xor_lobit_i;

assign local_bb6_xor_lobit_i = ($signed(local_bb6_xor_i5) >>> 32'h1F);

// This section implements an unregistered operation.
// 
wire local_bb6_add_vec_0_i_stall_local;
wire [63:0] local_bb6_add_vec_0_i;

assign local_bb6_add_vec_0_i[31:0] = local_bb6_xor_i5;
assign local_bb6_add_vec_0_i[63:32] = 32'bx;

// This section implements an unregistered operation.
// 
wire local_bb6_lnot_i4_stall_local;
wire local_bb6_lnot_i4;

assign local_bb6_lnot_i4 = ((local_bb6_and17_i & 32'hFF) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6_cmp25_i_stall_local;
wire local_bb6_cmp25_i;

assign local_bb6_cmp25_i = ((local_bb6_and17_i & 32'hFF) == 32'hFF);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_165to166_bb6_shr16_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_165to166_bb6_shr16_i_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_bb6_shr16_i_0_NO_SHIFT_REG;
 logic rnode_165to166_bb6_shr16_i_0_reg_166_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_bb6_shr16_i_0_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_bb6_shr16_i_0_valid_out_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_bb6_shr16_i_0_stall_in_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_bb6_shr16_i_0_stall_out_reg_166_NO_SHIFT_REG;

acl_data_fifo rnode_165to166_bb6_shr16_i_0_reg_166_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_165to166_bb6_shr16_i_0_reg_166_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_165to166_bb6_shr16_i_0_stall_in_reg_166_NO_SHIFT_REG),
	.valid_out(rnode_165to166_bb6_shr16_i_0_valid_out_reg_166_NO_SHIFT_REG),
	.stall_out(rnode_165to166_bb6_shr16_i_0_stall_out_reg_166_NO_SHIFT_REG),
	.data_in((rnode_164to165_bb6_shr16_i_0_NO_SHIFT_REG & 32'h1FF)),
	.data_out(rnode_165to166_bb6_shr16_i_0_reg_166_NO_SHIFT_REG)
);

defparam rnode_165to166_bb6_shr16_i_0_reg_166_fifo.DEPTH = 1;
defparam rnode_165to166_bb6_shr16_i_0_reg_166_fifo.DATA_WIDTH = 32;
defparam rnode_165to166_bb6_shr16_i_0_reg_166_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_165to166_bb6_shr16_i_0_reg_166_fifo.IMPL = "shift_reg";

assign rnode_165to166_bb6_shr16_i_0_reg_166_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_164to165_bb6_shr16_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_165to166_bb6_shr16_i_0_NO_SHIFT_REG = rnode_165to166_bb6_shr16_i_0_reg_166_NO_SHIFT_REG;
assign rnode_165to166_bb6_shr16_i_0_stall_in_reg_166_NO_SHIFT_REG = 1'b0;
assign rnode_165to166_bb6_shr16_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb6_cmp96_i_stall_local;
wire local_bb6_cmp96_i;

assign local_bb6_cmp96_i = ((local_bb6_and95_i & 32'h10) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6_cmp113_i_stall_local;
wire local_bb6_cmp113_i;

assign local_bb6_cmp113_i = ((local_bb6_and112_i & 32'h8) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6_cmp126_not_i_stall_local;
wire local_bb6_cmp126_not_i;

assign local_bb6_cmp126_not_i = ((local_bb6_and125_i & 32'h4) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6_cmp146_i_stall_local;
wire local_bb6_cmp146_i;

assign local_bb6_cmp146_i = ((local_bb6_and143_i & 32'h3) == 32'h3);

// This section implements an unregistered operation.
// 
wire local_bb6_cmp157_i_stall_local;
wire local_bb6_cmp157_i;

assign local_bb6_cmp157_i = ((local_bb6_and143_i & 32'h3) == 32'h2);

// This section implements an unregistered operation.
// 
wire local_bb6_cmp166_i_stall_local;
wire local_bb6_cmp166_i;

assign local_bb6_cmp166_i = ((local_bb6_and143_i & 32'h3) == 32'h1);

// This section implements an unregistered operation.
// 
wire local_bb6_brmerge_not_i_stall_local;
wire local_bb6_brmerge_not_i;

assign local_bb6_brmerge_not_i = (rnode_163to164_bb6_cmp27_i_0_NO_SHIFT_REG & local_bb6_lnot33_not_i);

// This section implements an unregistered operation.
// 
wire local_bb6_shl65_i_stall_local;
wire [31:0] local_bb6_shl65_i;

assign local_bb6_shl65_i = ((local_bb6_or64_i & 32'h3FFFFF8) | 32'h4000000);

// This section implements an unregistered operation.
// 
wire local_bb6_lnot30_not_i_stall_local;
wire local_bb6_lnot30_not_i;

assign local_bb6_lnot30_not_i = (local_bb6_lnot30_i ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb6_shl_i_stall_local;
wire [31:0] local_bb6_shl_i;

assign local_bb6_shl_i = ((local_bb6_or_i8 & 32'h3FFFFF8) | 32'h4000000);

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_165to167_bb6_and35_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_165to167_bb6_and35_i_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_165to167_bb6_and35_i_0_NO_SHIFT_REG;
 logic rnode_165to167_bb6_and35_i_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_165to167_bb6_and35_i_0_reg_167_NO_SHIFT_REG;
 logic rnode_165to167_bb6_and35_i_0_valid_out_reg_167_NO_SHIFT_REG;
 logic rnode_165to167_bb6_and35_i_0_stall_in_reg_167_NO_SHIFT_REG;
 logic rnode_165to167_bb6_and35_i_0_stall_out_reg_167_NO_SHIFT_REG;

acl_data_fifo rnode_165to167_bb6_and35_i_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_165to167_bb6_and35_i_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_165to167_bb6_and35_i_0_stall_in_reg_167_NO_SHIFT_REG),
	.valid_out(rnode_165to167_bb6_and35_i_0_valid_out_reg_167_NO_SHIFT_REG),
	.stall_out(rnode_165to167_bb6_and35_i_0_stall_out_reg_167_NO_SHIFT_REG),
	.data_in((rnode_164to165_bb6_and35_i_0_NO_SHIFT_REG & 32'h80000000)),
	.data_out(rnode_165to167_bb6_and35_i_0_reg_167_NO_SHIFT_REG)
);

defparam rnode_165to167_bb6_and35_i_0_reg_167_fifo.DEPTH = 2;
defparam rnode_165to167_bb6_and35_i_0_reg_167_fifo.DATA_WIDTH = 32;
defparam rnode_165to167_bb6_and35_i_0_reg_167_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_165to167_bb6_and35_i_0_reg_167_fifo.IMPL = "shift_reg";

assign rnode_165to167_bb6_and35_i_0_reg_167_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_164to165_bb6_and35_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_165to167_bb6_and35_i_0_NO_SHIFT_REG = rnode_165to167_bb6_and35_i_0_reg_167_NO_SHIFT_REG;
assign rnode_165to167_bb6_and35_i_0_stall_in_reg_167_NO_SHIFT_REG = 1'b0;
assign rnode_165to167_bb6_and35_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb6_cmp25_not_i_stall_local;
wire local_bb6_cmp25_not_i;

assign local_bb6_cmp25_not_i = (local_bb6_cmp25_i ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb6_var__u43_stall_local;
wire local_bb6_var__u43;

assign local_bb6_var__u43 = (local_bb6_cmp25_i | rnode_163to164_bb6_cmp27_i_1_NO_SHIFT_REG);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_166to167_bb6_shr16_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_166to167_bb6_shr16_i_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_bb6_shr16_i_0_NO_SHIFT_REG;
 logic rnode_166to167_bb6_shr16_i_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_bb6_shr16_i_0_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb6_shr16_i_0_valid_out_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb6_shr16_i_0_stall_in_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb6_shr16_i_0_stall_out_reg_167_NO_SHIFT_REG;

acl_data_fifo rnode_166to167_bb6_shr16_i_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_166to167_bb6_shr16_i_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_166to167_bb6_shr16_i_0_stall_in_reg_167_NO_SHIFT_REG),
	.valid_out(rnode_166to167_bb6_shr16_i_0_valid_out_reg_167_NO_SHIFT_REG),
	.stall_out(rnode_166to167_bb6_shr16_i_0_stall_out_reg_167_NO_SHIFT_REG),
	.data_in((rnode_165to166_bb6_shr16_i_0_NO_SHIFT_REG & 32'h1FF)),
	.data_out(rnode_166to167_bb6_shr16_i_0_reg_167_NO_SHIFT_REG)
);

defparam rnode_166to167_bb6_shr16_i_0_reg_167_fifo.DEPTH = 1;
defparam rnode_166to167_bb6_shr16_i_0_reg_167_fifo.DATA_WIDTH = 32;
defparam rnode_166to167_bb6_shr16_i_0_reg_167_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_166to167_bb6_shr16_i_0_reg_167_fifo.IMPL = "shift_reg";

assign rnode_166to167_bb6_shr16_i_0_reg_167_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_165to166_bb6_shr16_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_166to167_bb6_shr16_i_0_NO_SHIFT_REG = rnode_166to167_bb6_shr16_i_0_reg_167_NO_SHIFT_REG;
assign rnode_166to167_bb6_shr16_i_0_stall_in_reg_167_NO_SHIFT_REG = 1'b0;
assign rnode_166to167_bb6_shr16_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb6_brmerge_not_not_i_stall_local;
wire local_bb6_brmerge_not_not_i;

assign local_bb6_brmerge_not_not_i = (local_bb6_brmerge_not_i ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb6__15_i_stall_local;
wire [31:0] local_bb6__15_i;

assign local_bb6__15_i = (rnode_163to164_bb6_lnot23_i_0_NO_SHIFT_REG ? 32'h0 : ((local_bb6_shl65_i & 32'h7FFFFF8) | 32'h4000000));

// This section implements an unregistered operation.
// 
wire local_bb6_or_cond2_not_i_stall_local;
wire local_bb6_or_cond2_not_i;

assign local_bb6_or_cond2_not_i = (local_bb6_cmp25_i & local_bb6_lnot30_not_i);

// This section implements an unregistered operation.
// 
wire local_bb6__14_i_stall_local;
wire [31:0] local_bb6__14_i;

assign local_bb6__14_i = (local_bb6_lnot_i4 ? 32'h0 : ((local_bb6_shl_i & 32'h7FFFFF8) | 32'h4000000));

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_167to168_bb6_and35_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_167to168_bb6_and35_i_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_167to168_bb6_and35_i_0_NO_SHIFT_REG;
 logic rnode_167to168_bb6_and35_i_0_reg_168_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_167to168_bb6_and35_i_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb6_and35_i_0_valid_out_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb6_and35_i_0_stall_in_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb6_and35_i_0_stall_out_reg_168_NO_SHIFT_REG;

acl_data_fifo rnode_167to168_bb6_and35_i_0_reg_168_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_167to168_bb6_and35_i_0_reg_168_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_167to168_bb6_and35_i_0_stall_in_reg_168_NO_SHIFT_REG),
	.valid_out(rnode_167to168_bb6_and35_i_0_valid_out_reg_168_NO_SHIFT_REG),
	.stall_out(rnode_167to168_bb6_and35_i_0_stall_out_reg_168_NO_SHIFT_REG),
	.data_in((rnode_165to167_bb6_and35_i_0_NO_SHIFT_REG & 32'h80000000)),
	.data_out(rnode_167to168_bb6_and35_i_0_reg_168_NO_SHIFT_REG)
);

defparam rnode_167to168_bb6_and35_i_0_reg_168_fifo.DEPTH = 1;
defparam rnode_167to168_bb6_and35_i_0_reg_168_fifo.DATA_WIDTH = 32;
defparam rnode_167to168_bb6_and35_i_0_reg_168_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_167to168_bb6_and35_i_0_reg_168_fifo.IMPL = "shift_reg";

assign rnode_167to168_bb6_and35_i_0_reg_168_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_165to167_bb6_and35_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_167to168_bb6_and35_i_0_NO_SHIFT_REG = rnode_167to168_bb6_and35_i_0_reg_168_NO_SHIFT_REG;
assign rnode_167to168_bb6_and35_i_0_stall_in_reg_168_NO_SHIFT_REG = 1'b0;
assign rnode_167to168_bb6_and35_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb6_or_cond2_i_stall_local;
wire local_bb6_or_cond2_i;

assign local_bb6_or_cond2_i = (local_bb6_lnot30_i | local_bb6_cmp25_not_i);

// This section implements an unregistered operation.
// 
wire local_bb6_and72_i_stall_local;
wire [31:0] local_bb6_and72_i;

assign local_bb6_and72_i = ((local_bb6__15_i & 32'h7FFFFF8) >> 32'h3);

// This section implements an unregistered operation.
// 
wire local_bb6_and75_i_stall_local;
wire [31:0] local_bb6_and75_i;

assign local_bb6_and75_i = ((local_bb6__15_i & 32'h7FFFFF8) & 32'hF0);

// This section implements an unregistered operation.
// 
wire local_bb6_and78_i_stall_local;
wire [31:0] local_bb6_and78_i;

assign local_bb6_and78_i = ((local_bb6__15_i & 32'h7FFFFF8) & 32'hF00);

// This section implements an unregistered operation.
// 
wire local_bb6_shr94_i_stall_local;
wire [31:0] local_bb6_shr94_i;

assign local_bb6_shr94_i = ((local_bb6__15_i & 32'h7FFFFF8) >> (local_bb6_and93_i10 & 32'h1C));

// This section implements an unregistered operation.
// 
wire local_bb6_and90_i_stall_local;
wire [31:0] local_bb6_and90_i;

assign local_bb6_and90_i = ((local_bb6__15_i & 32'h7FFFFF8) & 32'h7000000);

// This section implements an unregistered operation.
// 
wire local_bb6_and87_i_stall_local;
wire [31:0] local_bb6_and87_i;

assign local_bb6_and87_i = ((local_bb6__15_i & 32'h7FFFFF8) & 32'hF00000);

// This section implements an unregistered operation.
// 
wire local_bb6_and84_i_stall_local;
wire [31:0] local_bb6_and84_i;

assign local_bb6_and84_i = ((local_bb6__15_i & 32'h7FFFFF8) & 32'hF0000);

// This section implements an unregistered operation.
// 
wire local_bb6_var__u44_stall_local;
wire [31:0] local_bb6_var__u44;

assign local_bb6_var__u44 = ((local_bb6__15_i & 32'h7FFFFF8) & 32'hFFF8);

// This section implements an unregistered operation.
// 
wire local_bb6__11_i_stall_local;
wire local_bb6__11_i;

assign local_bb6__11_i = (local_bb6_or_cond2_not_i | local_bb6_brmerge_not_i);

// This section implements an unregistered operation.
// 
wire local_bb6_add_vec_1_i_stall_local;
wire [63:0] local_bb6_add_vec_1_i;

assign local_bb6_add_vec_1_i[31:0] = local_bb6_add_vec_0_i[31:0];
assign local_bb6_add_vec_1_i[63:32] = (local_bb6__14_i & 32'h7FFFFF8);

// This section implements an unregistered operation.
// 
wire local_bb6_reduction_1_i6_stall_local;
wire local_bb6_reduction_1_i6;

assign local_bb6_reduction_1_i6 = (local_bb6_or_cond2_i & local_bb6_brmerge_not_not_i);

// This section implements an unregistered operation.
// 
wire local_bb6_and72_tr_i_stall_local;
wire [7:0] local_bb6_and72_tr_i;
wire [31:0] local_bb6_and72_tr_i$ps;

assign local_bb6_and72_tr_i$ps = (local_bb6_and72_i & 32'hFFFFFF);
assign local_bb6_and72_tr_i = local_bb6_and72_tr_i$ps[7:0];

// This section implements an unregistered operation.
// 
wire local_bb6_cmp76_i_stall_local;
wire local_bb6_cmp76_i;

assign local_bb6_cmp76_i = ((local_bb6_and75_i & 32'hF0) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6_cmp79_i_stall_local;
wire local_bb6_cmp79_i;

assign local_bb6_cmp79_i = ((local_bb6_and78_i & 32'hF00) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6_and136_i_stall_local;
wire [31:0] local_bb6_and136_i;

assign local_bb6_and136_i = (local_bb6_shr94_i >> 32'h1);

// This section implements an unregistered operation.
// 
wire local_bb6_shr144_i_stall_local;
wire [31:0] local_bb6_shr144_i;

assign local_bb6_shr144_i = (local_bb6_shr94_i >> (local_bb6_and143_i & 32'h3));

// This section implements an unregistered operation.
// 
wire local_bb6_var__u45_stall_local;
wire [31:0] local_bb6_var__u45;

assign local_bb6_var__u45 = (local_bb6_shr94_i & 32'h1);

// This section implements an unregistered operation.
// 
wire local_bb6_cmp91_i_stall_local;
wire local_bb6_cmp91_i;

assign local_bb6_cmp91_i = ((local_bb6_and90_i & 32'h7000000) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6_cmp88_i_stall_local;
wire local_bb6_cmp88_i;

assign local_bb6_cmp88_i = ((local_bb6_and87_i & 32'hF00000) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6_cmp85_i_stall_local;
wire local_bb6_cmp85_i;

assign local_bb6_cmp85_i = ((local_bb6_and84_i & 32'hF0000) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6_var__u46_stall_local;
wire local_bb6_var__u46;

assign local_bb6_var__u46 = ((local_bb6_var__u44 & 32'hFFF8) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6_add_bitvec_i_stall_local;
wire [63:0] local_bb6_add_bitvec_i;

assign local_bb6_add_bitvec_i = local_bb6_add_vec_1_i;

// This section implements an unregistered operation.
// 
wire local_bb6_reduction_2_i7_stall_local;
wire local_bb6_reduction_2_i7;

assign local_bb6_reduction_2_i7 = (rnode_163to164_bb6_var__u42_0_NO_SHIFT_REG & local_bb6_reduction_1_i6);

// This section implements an unregistered operation.
// 
wire local_bb6_frombool74_i_stall_local;
wire [7:0] local_bb6_frombool74_i;

assign local_bb6_frombool74_i = (local_bb6_and72_tr_i & 8'h1);

// This section implements an unregistered operation.
// 
wire local_bb6_var__u47_stall_local;
wire [31:0] local_bb6_var__u47;

assign local_bb6_var__u47 = ((local_bb6_and136_i & 32'h7FFFFFFF) | local_bb6_shr94_i);

// This section implements an unregistered operation.
// 
wire local_bb6_or170_i_stall_local;
wire [31:0] local_bb6_or170_i;

assign local_bb6_or170_i = (local_bb6_cmp166_i ? (local_bb6_var__u45 & 32'h1) : 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6__18_v_i_stall_local;
wire local_bb6__18_v_i;

assign local_bb6__18_v_i = (local_bb6_cmp96_i ? local_bb6_cmp79_i : local_bb6_cmp91_i);

// This section implements an unregistered operation.
// 
wire local_bb6__17_v_i_stall_local;
wire local_bb6__17_v_i;

assign local_bb6__17_v_i = (local_bb6_cmp96_i ? local_bb6_cmp76_i : local_bb6_cmp88_i);

// This section implements an unregistered operation.
// 
wire local_bb6_frombool106_i_stall_local;
wire [7:0] local_bb6_frombool106_i;

assign local_bb6_frombool106_i[7:1] = 7'h0;
assign local_bb6_frombool106_i[0] = local_bb6_cmp85_i;

// This section implements an unregistered operation.
// 
wire local_bb6_conv_i_stall_local;
wire [31:0] local_bb6_conv_i;

assign local_bb6_conv_i[31:1] = 31'h0;
assign local_bb6_conv_i[0] = local_bb6_var__u46;

// This section implements an unregistered operation.
// 
wire local_bb6_add_shuffle_i_stall_local;
wire [31:0] local_bb6_add_shuffle_i;

assign local_bb6_add_shuffle_i[0] = local_bb6_add_bitvec_i[31];
assign local_bb6_add_shuffle_i[1] = 1'b0;
assign local_bb6_add_shuffle_i[2] = 1'b0;
assign local_bb6_add_shuffle_i[3] = local_bb6_add_bitvec_i[35];
assign local_bb6_add_shuffle_i[4] = local_bb6_add_bitvec_i[36];
assign local_bb6_add_shuffle_i[5] = local_bb6_add_bitvec_i[37];
assign local_bb6_add_shuffle_i[6] = local_bb6_add_bitvec_i[38];
assign local_bb6_add_shuffle_i[7] = local_bb6_add_bitvec_i[39];
assign local_bb6_add_shuffle_i[8] = local_bb6_add_bitvec_i[40];
assign local_bb6_add_shuffle_i[9] = local_bb6_add_bitvec_i[41];
assign local_bb6_add_shuffle_i[10] = local_bb6_add_bitvec_i[42];
assign local_bb6_add_shuffle_i[11] = local_bb6_add_bitvec_i[43];
assign local_bb6_add_shuffle_i[12] = local_bb6_add_bitvec_i[44];
assign local_bb6_add_shuffle_i[13] = local_bb6_add_bitvec_i[45];
assign local_bb6_add_shuffle_i[14] = local_bb6_add_bitvec_i[46];
assign local_bb6_add_shuffle_i[15] = local_bb6_add_bitvec_i[47];
assign local_bb6_add_shuffle_i[16] = local_bb6_add_bitvec_i[48];
assign local_bb6_add_shuffle_i[17] = local_bb6_add_bitvec_i[49];
assign local_bb6_add_shuffle_i[18] = local_bb6_add_bitvec_i[50];
assign local_bb6_add_shuffle_i[19] = local_bb6_add_bitvec_i[51];
assign local_bb6_add_shuffle_i[20] = local_bb6_add_bitvec_i[52];
assign local_bb6_add_shuffle_i[21] = local_bb6_add_bitvec_i[53];
assign local_bb6_add_shuffle_i[22] = local_bb6_add_bitvec_i[54];
assign local_bb6_add_shuffle_i[23] = local_bb6_add_bitvec_i[55];
assign local_bb6_add_shuffle_i[24] = local_bb6_add_bitvec_i[56];
assign local_bb6_add_shuffle_i[25] = local_bb6_add_bitvec_i[57];
assign local_bb6_add_shuffle_i[26] = local_bb6_add_bitvec_i[58];
assign local_bb6_add_shuffle_i[27] = 1'b0;
assign local_bb6_add_shuffle_i[28] = 1'b0;
assign local_bb6_add_shuffle_i[29] = 1'b0;
assign local_bb6_add_shuffle_i[30] = 1'b0;
assign local_bb6_add_shuffle_i[31] = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb6__13_i_stall_local;
wire local_bb6__13_i;

assign local_bb6__13_i = (local_bb6_reduction_2_i7 ? local_bb6_cmp37_i : local_bb6__11_i);

// This section implements an unregistered operation.
// 
wire local_bb6_var__u48_stall_local;
wire [31:0] local_bb6_var__u48;

assign local_bb6_var__u48 = (local_bb6_var__u47 & 32'h1);

// This section implements an unregistered operation.
// 
wire local_bb6__vec_0_i_stall_local;
wire [63:0] local_bb6__vec_0_i;

assign local_bb6__vec_0_i[31:0] = local_bb6_var__u47;
assign local_bb6__vec_0_i[63:32] = 32'bx;

// This section implements an unregistered operation.
// 
wire local_bb6__18_i11_stall_local;
wire [7:0] local_bb6__18_i11;

assign local_bb6__18_i11[7:1] = 7'h0;
assign local_bb6__18_i11[0] = local_bb6__18_v_i;

// This section implements an unregistered operation.
// 
wire local_bb6__17_i_stall_local;
wire [7:0] local_bb6__17_i;

assign local_bb6__17_i[7:1] = 7'h0;
assign local_bb6__17_i[0] = local_bb6__17_v_i;

// This section implements an unregistered operation.
// 
wire local_bb6__16_i_stall_local;
wire [7:0] local_bb6__16_i;

assign local_bb6__16_i = (local_bb6_cmp96_i ? (local_bb6_frombool74_i & 8'h1) : (local_bb6_frombool106_i & 8'h1));

// This section implements an unregistered operation.
// 
wire local_bb6__19_i12_stall_local;
wire [31:0] local_bb6__19_i12;

assign local_bb6__19_i12 = (local_bb6_cmp96_i ? 32'h0 : (local_bb6_conv_i & 32'h1));

// This section implements an unregistered operation.
// 
wire local_bb6_add_compressed_i_stall_local;
wire [31:0] local_bb6_add_compressed_i;

assign local_bb6_add_compressed_i = local_bb6_add_shuffle_i;

// This section implements an unregistered operation.
// 
wire local_bb6_or163_i_stall_local;
wire [31:0] local_bb6_or163_i;

assign local_bb6_or163_i = (local_bb6_cmp157_i ? (local_bb6_var__u48 & 32'h1) : 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6__vec_1_i_stall_local;
wire [63:0] local_bb6__vec_1_i;

assign local_bb6__vec_1_i[31:0] = local_bb6__vec_0_i[31:0];
assign local_bb6__vec_1_i[63:32] = local_bb6_shr94_i;

// This section implements an unregistered operation.
// 
wire local_bb6_var__u49_stall_local;
wire [7:0] local_bb6_var__u49;

assign local_bb6_var__u49 = ((local_bb6__17_i & 8'h1) | (local_bb6__16_i & 8'h1));

// This section implements an unregistered operation.
// 
wire local_bb6__20_i_stall_local;
wire [7:0] local_bb6__20_i;

assign local_bb6__20_i = (local_bb6_cmp113_i ? (local_bb6__16_i & 8'h1) : (local_bb6__18_i11 & 8'h1));

// This section implements an unregistered operation.
// 
wire local_bb6_reduction_5_i14_stall_local;
wire [31:0] local_bb6_reduction_5_i14;

assign local_bb6_reduction_5_i14 = ((local_bb6_or163_i & 32'h1) | (local_bb6_or170_i & 32'h1));

// This section implements an unregistered operation.
// 
wire local_bb6__bitvec_i_stall_local;
wire [63:0] local_bb6__bitvec_i;

assign local_bb6__bitvec_i = local_bb6__vec_1_i;

// This section implements an unregistered operation.
// 
wire local_bb6_conv118_i_stall_local;
wire [31:0] local_bb6_conv118_i;

assign local_bb6_conv118_i[31:8] = 24'h0;
assign local_bb6_conv118_i[7:0] = (local_bb6_var__u49 & 8'h1);

// This section implements an unregistered operation.
// 
wire local_bb6_var__u50_stall_local;
wire [7:0] local_bb6_var__u50;

assign local_bb6_var__u50 = ((local_bb6__20_i & 8'h1) & 8'h1);

// This section implements an unregistered operation.
// 
wire local_bb6_reduction_7_i_stall_local;
wire [31:0] local_bb6_reduction_7_i;

assign local_bb6_reduction_7_i = (local_bb6_shr144_i | (local_bb6_reduction_5_i14 & 32'h1));

// This section implements an unregistered operation.
// 
wire local_bb6__shuffle_i_stall_local;
wire [31:0] local_bb6__shuffle_i;

assign local_bb6__shuffle_i[0] = local_bb6__bitvec_i[0];
assign local_bb6__shuffle_i[1] = 1'b0;
assign local_bb6__shuffle_i[2] = local_bb6__bitvec_i[34];
assign local_bb6__shuffle_i[3] = 1'b0;
assign local_bb6__shuffle_i[4] = 1'b0;
assign local_bb6__shuffle_i[5] = 1'b0;
assign local_bb6__shuffle_i[6] = 1'b0;
assign local_bb6__shuffle_i[7] = 1'b0;
assign local_bb6__shuffle_i[8] = 1'b0;
assign local_bb6__shuffle_i[9] = 1'b0;
assign local_bb6__shuffle_i[10] = 1'b0;
assign local_bb6__shuffle_i[11] = 1'b0;
assign local_bb6__shuffle_i[12] = 1'b0;
assign local_bb6__shuffle_i[13] = 1'b0;
assign local_bb6__shuffle_i[14] = 1'b0;
assign local_bb6__shuffle_i[15] = 1'b0;
assign local_bb6__shuffle_i[16] = 1'b0;
assign local_bb6__shuffle_i[17] = 1'b0;
assign local_bb6__shuffle_i[18] = 1'b0;
assign local_bb6__shuffle_i[19] = 1'b0;
assign local_bb6__shuffle_i[20] = 1'b0;
assign local_bb6__shuffle_i[21] = 1'b0;
assign local_bb6__shuffle_i[22] = 1'b0;
assign local_bb6__shuffle_i[23] = 1'b0;
assign local_bb6__shuffle_i[24] = 1'b0;
assign local_bb6__shuffle_i[25] = 1'b0;
assign local_bb6__shuffle_i[26] = 1'b0;
assign local_bb6__shuffle_i[27] = 1'b0;
assign local_bb6__shuffle_i[28] = 1'b0;
assign local_bb6__shuffle_i[29] = 1'b0;
assign local_bb6__shuffle_i[30] = 1'b0;
assign local_bb6__shuffle_i[31] = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb6_or119_i_stall_local;
wire [31:0] local_bb6_or119_i;

assign local_bb6_or119_i = (local_bb6_cmp113_i ? 32'h0 : (local_bb6_conv118_i & 32'h1));

// This section implements an unregistered operation.
// 
wire local_bb6_conv129_i_stall_local;
wire [31:0] local_bb6_conv129_i;

assign local_bb6_conv129_i[31:8] = 24'h0;
assign local_bb6_conv129_i[7:0] = (local_bb6_var__u50 & 8'h1);

// This section implements an unregistered operation.
// 
wire local_bb6__compressed_i_stall_local;
wire [31:0] local_bb6__compressed_i;

assign local_bb6__compressed_i = local_bb6__shuffle_i;

// This section implements an unregistered operation.
// 
wire local_bb6_reduction_3_i13_stall_local;
wire [31:0] local_bb6_reduction_3_i13;

assign local_bb6_reduction_3_i13 = ((local_bb6__19_i12 & 32'h1) | (local_bb6_or119_i & 32'h1));

// This section implements an unregistered operation.
// 
wire local_bb6_or130_i_stall_local;
wire [31:0] local_bb6_or130_i;

assign local_bb6_or130_i = (local_bb6_cmp126_not_i ? (local_bb6_conv129_i & 32'h1) : 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6_var__u51_stall_local;
wire local_bb6_var__u51;

assign local_bb6_var__u51 = ((local_bb6__compressed_i & 32'h5) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6_conv153_i_stall_local;
wire [31:0] local_bb6_conv153_i;

assign local_bb6_conv153_i[31:1] = 31'h0;
assign local_bb6_conv153_i[0] = local_bb6_var__u51;

// This section implements an unregistered operation.
// 
wire local_bb6_or154_i_stall_local;
wire [31:0] local_bb6_or154_i;

assign local_bb6_or154_i = (local_bb6_cmp146_i ? (local_bb6_conv153_i & 32'h1) : 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6_reduction_4_i_stall_local;
wire [31:0] local_bb6_reduction_4_i;

assign local_bb6_reduction_4_i = ((local_bb6_or130_i & 32'h1) | (local_bb6_or154_i & 32'h1));

// This section implements an unregistered operation.
// 
wire local_bb6_reduction_6_i15_stall_local;
wire [31:0] local_bb6_reduction_6_i15;

assign local_bb6_reduction_6_i15 = ((local_bb6_reduction_3_i13 & 32'h1) | (local_bb6_reduction_4_i & 32'h1));

// This section implements an unregistered operation.
// 
wire local_bb6_reduction_8_i_stall_local;
wire [31:0] local_bb6_reduction_8_i;

assign local_bb6_reduction_8_i = ((local_bb6_reduction_6_i15 & 32'h1) | local_bb6_reduction_7_i);

// This section implements an unregistered operation.
// 
wire local_bb6_and17_i_valid_out_2;
wire local_bb6_and17_i_stall_in_2;
wire local_bb6_var__u43_valid_out;
wire local_bb6_var__u43_stall_in;
wire local_bb6_cmp37_i_valid_out_1;
wire local_bb6_cmp37_i_stall_in_1;
wire local_bb6__13_i_valid_out;
wire local_bb6__13_i_stall_in;
wire local_bb6_xor175_i_valid_out;
wire local_bb6_xor175_i_stall_in;
wire local_bb6_add_compressed_i_valid_out;
wire local_bb6_add_compressed_i_stall_in;
wire local_bb6_xor175_i_inputs_ready;
wire local_bb6_xor175_i_stall_local;
wire [31:0] local_bb6_xor175_i;

assign local_bb6_xor175_i_inputs_ready = (rnode_163to164_bb6__9_i_0_valid_out_0_NO_SHIFT_REG & rnode_163to164_bb6_cmp27_i_0_valid_out_0_NO_SHIFT_REG & rnode_163to164_bb6_lnot23_i_0_valid_out_NO_SHIFT_REG & rnode_163to164_bb6__10_i_0_valid_out_0_NO_SHIFT_REG & rnode_163to164_bb6_shr16_i_0_valid_out_0_NO_SHIFT_REG & rnode_163to164_bb6_cmp27_i_0_valid_out_1_NO_SHIFT_REG & rnode_163to164_bb6__10_i_0_valid_out_2_NO_SHIFT_REG & rnode_163to164_bb6__9_i_0_valid_out_1_NO_SHIFT_REG & rnode_163to164_bb6_var__u42_0_valid_out_NO_SHIFT_REG & rnode_163to164_bb6_align_0_i_0_valid_out_0_NO_SHIFT_REG & rnode_163to164_bb6_align_0_i_0_valid_out_4_NO_SHIFT_REG & rnode_163to164_bb6_align_0_i_0_valid_out_1_NO_SHIFT_REG & rnode_163to164_bb6_align_0_i_0_valid_out_2_NO_SHIFT_REG & rnode_163to164_bb6_align_0_i_0_valid_out_3_NO_SHIFT_REG);
assign local_bb6_xor175_i = (local_bb6_reduction_8_i ^ local_bb6_xor_lobit_i);
assign local_bb6_and17_i_valid_out_2 = 1'b1;
assign local_bb6_var__u43_valid_out = 1'b1;
assign local_bb6_cmp37_i_valid_out_1 = 1'b1;
assign local_bb6__13_i_valid_out = 1'b1;
assign local_bb6_xor175_i_valid_out = 1'b1;
assign local_bb6_add_compressed_i_valid_out = 1'b1;
assign rnode_163to164_bb6__9_i_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_163to164_bb6_cmp27_i_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_163to164_bb6_lnot23_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_163to164_bb6__10_i_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_163to164_bb6_shr16_i_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_163to164_bb6_cmp27_i_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_163to164_bb6__10_i_0_stall_in_2_NO_SHIFT_REG = 1'b0;
assign rnode_163to164_bb6__9_i_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_163to164_bb6_var__u42_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_163to164_bb6_align_0_i_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_163to164_bb6_align_0_i_0_stall_in_4_NO_SHIFT_REG = 1'b0;
assign rnode_163to164_bb6_align_0_i_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_163to164_bb6_align_0_i_0_stall_in_2_NO_SHIFT_REG = 1'b0;
assign rnode_163to164_bb6_align_0_i_0_stall_in_3_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_164to165_bb6_and17_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_164to165_bb6_and17_i_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_164to165_bb6_and17_i_0_NO_SHIFT_REG;
 logic rnode_164to165_bb6_and17_i_0_reg_165_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_164to165_bb6_and17_i_0_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb6_and17_i_0_valid_out_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb6_and17_i_0_stall_in_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb6_and17_i_0_stall_out_reg_165_NO_SHIFT_REG;

acl_data_fifo rnode_164to165_bb6_and17_i_0_reg_165_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_164to165_bb6_and17_i_0_reg_165_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_164to165_bb6_and17_i_0_stall_in_reg_165_NO_SHIFT_REG),
	.valid_out(rnode_164to165_bb6_and17_i_0_valid_out_reg_165_NO_SHIFT_REG),
	.stall_out(rnode_164to165_bb6_and17_i_0_stall_out_reg_165_NO_SHIFT_REG),
	.data_in((local_bb6_and17_i & 32'hFF)),
	.data_out(rnode_164to165_bb6_and17_i_0_reg_165_NO_SHIFT_REG)
);

defparam rnode_164to165_bb6_and17_i_0_reg_165_fifo.DEPTH = 1;
defparam rnode_164to165_bb6_and17_i_0_reg_165_fifo.DATA_WIDTH = 32;
defparam rnode_164to165_bb6_and17_i_0_reg_165_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_164to165_bb6_and17_i_0_reg_165_fifo.IMPL = "shift_reg";

assign rnode_164to165_bb6_and17_i_0_reg_165_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_and17_i_stall_in_2 = 1'b0;
assign rnode_164to165_bb6_and17_i_0_NO_SHIFT_REG = rnode_164to165_bb6_and17_i_0_reg_165_NO_SHIFT_REG;
assign rnode_164to165_bb6_and17_i_0_stall_in_reg_165_NO_SHIFT_REG = 1'b0;
assign rnode_164to165_bb6_and17_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_164to165_bb6_var__u43_0_valid_out_NO_SHIFT_REG;
 logic rnode_164to165_bb6_var__u43_0_stall_in_NO_SHIFT_REG;
 logic rnode_164to165_bb6_var__u43_0_NO_SHIFT_REG;
 logic rnode_164to165_bb6_var__u43_0_reg_165_inputs_ready_NO_SHIFT_REG;
 logic rnode_164to165_bb6_var__u43_0_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb6_var__u43_0_valid_out_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb6_var__u43_0_stall_in_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb6_var__u43_0_stall_out_reg_165_NO_SHIFT_REG;

acl_data_fifo rnode_164to165_bb6_var__u43_0_reg_165_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_164to165_bb6_var__u43_0_reg_165_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_164to165_bb6_var__u43_0_stall_in_reg_165_NO_SHIFT_REG),
	.valid_out(rnode_164to165_bb6_var__u43_0_valid_out_reg_165_NO_SHIFT_REG),
	.stall_out(rnode_164to165_bb6_var__u43_0_stall_out_reg_165_NO_SHIFT_REG),
	.data_in(local_bb6_var__u43),
	.data_out(rnode_164to165_bb6_var__u43_0_reg_165_NO_SHIFT_REG)
);

defparam rnode_164to165_bb6_var__u43_0_reg_165_fifo.DEPTH = 1;
defparam rnode_164to165_bb6_var__u43_0_reg_165_fifo.DATA_WIDTH = 1;
defparam rnode_164to165_bb6_var__u43_0_reg_165_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_164to165_bb6_var__u43_0_reg_165_fifo.IMPL = "shift_reg";

assign rnode_164to165_bb6_var__u43_0_reg_165_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_var__u43_stall_in = 1'b0;
assign rnode_164to165_bb6_var__u43_0_NO_SHIFT_REG = rnode_164to165_bb6_var__u43_0_reg_165_NO_SHIFT_REG;
assign rnode_164to165_bb6_var__u43_0_stall_in_reg_165_NO_SHIFT_REG = 1'b0;
assign rnode_164to165_bb6_var__u43_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_164to165_bb6_cmp37_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_164to165_bb6_cmp37_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_164to165_bb6_cmp37_i_0_NO_SHIFT_REG;
 logic rnode_164to165_bb6_cmp37_i_0_reg_165_inputs_ready_NO_SHIFT_REG;
 logic rnode_164to165_bb6_cmp37_i_0_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb6_cmp37_i_0_valid_out_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb6_cmp37_i_0_stall_in_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb6_cmp37_i_0_stall_out_reg_165_NO_SHIFT_REG;

acl_data_fifo rnode_164to165_bb6_cmp37_i_0_reg_165_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_164to165_bb6_cmp37_i_0_reg_165_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_164to165_bb6_cmp37_i_0_stall_in_reg_165_NO_SHIFT_REG),
	.valid_out(rnode_164to165_bb6_cmp37_i_0_valid_out_reg_165_NO_SHIFT_REG),
	.stall_out(rnode_164to165_bb6_cmp37_i_0_stall_out_reg_165_NO_SHIFT_REG),
	.data_in(local_bb6_cmp37_i),
	.data_out(rnode_164to165_bb6_cmp37_i_0_reg_165_NO_SHIFT_REG)
);

defparam rnode_164to165_bb6_cmp37_i_0_reg_165_fifo.DEPTH = 1;
defparam rnode_164to165_bb6_cmp37_i_0_reg_165_fifo.DATA_WIDTH = 1;
defparam rnode_164to165_bb6_cmp37_i_0_reg_165_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_164to165_bb6_cmp37_i_0_reg_165_fifo.IMPL = "shift_reg";

assign rnode_164to165_bb6_cmp37_i_0_reg_165_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_cmp37_i_stall_in_1 = 1'b0;
assign rnode_164to165_bb6_cmp37_i_0_NO_SHIFT_REG = rnode_164to165_bb6_cmp37_i_0_reg_165_NO_SHIFT_REG;
assign rnode_164to165_bb6_cmp37_i_0_stall_in_reg_165_NO_SHIFT_REG = 1'b0;
assign rnode_164to165_bb6_cmp37_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_164to165_bb6__13_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_164to165_bb6__13_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_164to165_bb6__13_i_0_NO_SHIFT_REG;
 logic rnode_164to165_bb6__13_i_0_reg_165_inputs_ready_NO_SHIFT_REG;
 logic rnode_164to165_bb6__13_i_0_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb6__13_i_0_valid_out_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb6__13_i_0_stall_in_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb6__13_i_0_stall_out_reg_165_NO_SHIFT_REG;

acl_data_fifo rnode_164to165_bb6__13_i_0_reg_165_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_164to165_bb6__13_i_0_reg_165_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_164to165_bb6__13_i_0_stall_in_reg_165_NO_SHIFT_REG),
	.valid_out(rnode_164to165_bb6__13_i_0_valid_out_reg_165_NO_SHIFT_REG),
	.stall_out(rnode_164to165_bb6__13_i_0_stall_out_reg_165_NO_SHIFT_REG),
	.data_in(local_bb6__13_i),
	.data_out(rnode_164to165_bb6__13_i_0_reg_165_NO_SHIFT_REG)
);

defparam rnode_164to165_bb6__13_i_0_reg_165_fifo.DEPTH = 1;
defparam rnode_164to165_bb6__13_i_0_reg_165_fifo.DATA_WIDTH = 1;
defparam rnode_164to165_bb6__13_i_0_reg_165_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_164to165_bb6__13_i_0_reg_165_fifo.IMPL = "shift_reg";

assign rnode_164to165_bb6__13_i_0_reg_165_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6__13_i_stall_in = 1'b0;
assign rnode_164to165_bb6__13_i_0_NO_SHIFT_REG = rnode_164to165_bb6__13_i_0_reg_165_NO_SHIFT_REG;
assign rnode_164to165_bb6__13_i_0_stall_in_reg_165_NO_SHIFT_REG = 1'b0;
assign rnode_164to165_bb6__13_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_164to165_bb6_xor175_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_164to165_bb6_xor175_i_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_164to165_bb6_xor175_i_0_NO_SHIFT_REG;
 logic rnode_164to165_bb6_xor175_i_0_reg_165_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_164to165_bb6_xor175_i_0_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb6_xor175_i_0_valid_out_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb6_xor175_i_0_stall_in_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb6_xor175_i_0_stall_out_reg_165_NO_SHIFT_REG;

acl_data_fifo rnode_164to165_bb6_xor175_i_0_reg_165_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_164to165_bb6_xor175_i_0_reg_165_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_164to165_bb6_xor175_i_0_stall_in_reg_165_NO_SHIFT_REG),
	.valid_out(rnode_164to165_bb6_xor175_i_0_valid_out_reg_165_NO_SHIFT_REG),
	.stall_out(rnode_164to165_bb6_xor175_i_0_stall_out_reg_165_NO_SHIFT_REG),
	.data_in(local_bb6_xor175_i),
	.data_out(rnode_164to165_bb6_xor175_i_0_reg_165_NO_SHIFT_REG)
);

defparam rnode_164to165_bb6_xor175_i_0_reg_165_fifo.DEPTH = 1;
defparam rnode_164to165_bb6_xor175_i_0_reg_165_fifo.DATA_WIDTH = 32;
defparam rnode_164to165_bb6_xor175_i_0_reg_165_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_164to165_bb6_xor175_i_0_reg_165_fifo.IMPL = "shift_reg";

assign rnode_164to165_bb6_xor175_i_0_reg_165_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_xor175_i_stall_in = 1'b0;
assign rnode_164to165_bb6_xor175_i_0_NO_SHIFT_REG = rnode_164to165_bb6_xor175_i_0_reg_165_NO_SHIFT_REG;
assign rnode_164to165_bb6_xor175_i_0_stall_in_reg_165_NO_SHIFT_REG = 1'b0;
assign rnode_164to165_bb6_xor175_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_164to165_bb6_add_compressed_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_164to165_bb6_add_compressed_i_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_164to165_bb6_add_compressed_i_0_NO_SHIFT_REG;
 logic rnode_164to165_bb6_add_compressed_i_0_reg_165_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_164to165_bb6_add_compressed_i_0_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb6_add_compressed_i_0_valid_out_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb6_add_compressed_i_0_stall_in_reg_165_NO_SHIFT_REG;
 logic rnode_164to165_bb6_add_compressed_i_0_stall_out_reg_165_NO_SHIFT_REG;

acl_data_fifo rnode_164to165_bb6_add_compressed_i_0_reg_165_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_164to165_bb6_add_compressed_i_0_reg_165_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_164to165_bb6_add_compressed_i_0_stall_in_reg_165_NO_SHIFT_REG),
	.valid_out(rnode_164to165_bb6_add_compressed_i_0_valid_out_reg_165_NO_SHIFT_REG),
	.stall_out(rnode_164to165_bb6_add_compressed_i_0_stall_out_reg_165_NO_SHIFT_REG),
	.data_in((local_bb6_add_compressed_i & 32'h7FFFFF9)),
	.data_out(rnode_164to165_bb6_add_compressed_i_0_reg_165_NO_SHIFT_REG)
);

defparam rnode_164to165_bb6_add_compressed_i_0_reg_165_fifo.DEPTH = 1;
defparam rnode_164to165_bb6_add_compressed_i_0_reg_165_fifo.DATA_WIDTH = 32;
defparam rnode_164to165_bb6_add_compressed_i_0_reg_165_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_164to165_bb6_add_compressed_i_0_reg_165_fifo.IMPL = "shift_reg";

assign rnode_164to165_bb6_add_compressed_i_0_reg_165_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_add_compressed_i_stall_in = 1'b0;
assign rnode_164to165_bb6_add_compressed_i_0_NO_SHIFT_REG = rnode_164to165_bb6_add_compressed_i_0_reg_165_NO_SHIFT_REG;
assign rnode_164to165_bb6_add_compressed_i_0_stall_in_reg_165_NO_SHIFT_REG = 1'b0;
assign rnode_164to165_bb6_add_compressed_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_165to166_bb6_and17_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_165to166_bb6_and17_i_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_bb6_and17_i_0_NO_SHIFT_REG;
 logic rnode_165to166_bb6_and17_i_0_reg_166_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_bb6_and17_i_0_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_bb6_and17_i_0_valid_out_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_bb6_and17_i_0_stall_in_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_bb6_and17_i_0_stall_out_reg_166_NO_SHIFT_REG;

acl_data_fifo rnode_165to166_bb6_and17_i_0_reg_166_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_165to166_bb6_and17_i_0_reg_166_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_165to166_bb6_and17_i_0_stall_in_reg_166_NO_SHIFT_REG),
	.valid_out(rnode_165to166_bb6_and17_i_0_valid_out_reg_166_NO_SHIFT_REG),
	.stall_out(rnode_165to166_bb6_and17_i_0_stall_out_reg_166_NO_SHIFT_REG),
	.data_in((rnode_164to165_bb6_and17_i_0_NO_SHIFT_REG & 32'hFF)),
	.data_out(rnode_165to166_bb6_and17_i_0_reg_166_NO_SHIFT_REG)
);

defparam rnode_165to166_bb6_and17_i_0_reg_166_fifo.DEPTH = 1;
defparam rnode_165to166_bb6_and17_i_0_reg_166_fifo.DATA_WIDTH = 32;
defparam rnode_165to166_bb6_and17_i_0_reg_166_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_165to166_bb6_and17_i_0_reg_166_fifo.IMPL = "shift_reg";

assign rnode_165to166_bb6_and17_i_0_reg_166_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_164to165_bb6_and17_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_165to166_bb6_and17_i_0_NO_SHIFT_REG = rnode_165to166_bb6_and17_i_0_reg_166_NO_SHIFT_REG;
assign rnode_165to166_bb6_and17_i_0_stall_in_reg_166_NO_SHIFT_REG = 1'b0;
assign rnode_165to166_bb6_and17_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_165to167_bb6_var__u43_0_valid_out_NO_SHIFT_REG;
 logic rnode_165to167_bb6_var__u43_0_stall_in_NO_SHIFT_REG;
 logic rnode_165to167_bb6_var__u43_0_NO_SHIFT_REG;
 logic rnode_165to167_bb6_var__u43_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic rnode_165to167_bb6_var__u43_0_reg_167_NO_SHIFT_REG;
 logic rnode_165to167_bb6_var__u43_0_valid_out_reg_167_NO_SHIFT_REG;
 logic rnode_165to167_bb6_var__u43_0_stall_in_reg_167_NO_SHIFT_REG;
 logic rnode_165to167_bb6_var__u43_0_stall_out_reg_167_NO_SHIFT_REG;

acl_data_fifo rnode_165to167_bb6_var__u43_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_165to167_bb6_var__u43_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_165to167_bb6_var__u43_0_stall_in_reg_167_NO_SHIFT_REG),
	.valid_out(rnode_165to167_bb6_var__u43_0_valid_out_reg_167_NO_SHIFT_REG),
	.stall_out(rnode_165to167_bb6_var__u43_0_stall_out_reg_167_NO_SHIFT_REG),
	.data_in(rnode_164to165_bb6_var__u43_0_NO_SHIFT_REG),
	.data_out(rnode_165to167_bb6_var__u43_0_reg_167_NO_SHIFT_REG)
);

defparam rnode_165to167_bb6_var__u43_0_reg_167_fifo.DEPTH = 2;
defparam rnode_165to167_bb6_var__u43_0_reg_167_fifo.DATA_WIDTH = 1;
defparam rnode_165to167_bb6_var__u43_0_reg_167_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_165to167_bb6_var__u43_0_reg_167_fifo.IMPL = "shift_reg";

assign rnode_165to167_bb6_var__u43_0_reg_167_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_164to165_bb6_var__u43_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_165to167_bb6_var__u43_0_NO_SHIFT_REG = rnode_165to167_bb6_var__u43_0_reg_167_NO_SHIFT_REG;
assign rnode_165to167_bb6_var__u43_0_stall_in_reg_167_NO_SHIFT_REG = 1'b0;
assign rnode_165to167_bb6_var__u43_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_165to166_bb6_cmp37_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_165to166_bb6_cmp37_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_165to166_bb6_cmp37_i_0_NO_SHIFT_REG;
 logic rnode_165to166_bb6_cmp37_i_0_reg_166_inputs_ready_NO_SHIFT_REG;
 logic rnode_165to166_bb6_cmp37_i_0_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_bb6_cmp37_i_0_valid_out_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_bb6_cmp37_i_0_stall_in_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_bb6_cmp37_i_0_stall_out_reg_166_NO_SHIFT_REG;

acl_data_fifo rnode_165to166_bb6_cmp37_i_0_reg_166_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_165to166_bb6_cmp37_i_0_reg_166_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_165to166_bb6_cmp37_i_0_stall_in_reg_166_NO_SHIFT_REG),
	.valid_out(rnode_165to166_bb6_cmp37_i_0_valid_out_reg_166_NO_SHIFT_REG),
	.stall_out(rnode_165to166_bb6_cmp37_i_0_stall_out_reg_166_NO_SHIFT_REG),
	.data_in(rnode_164to165_bb6_cmp37_i_0_NO_SHIFT_REG),
	.data_out(rnode_165to166_bb6_cmp37_i_0_reg_166_NO_SHIFT_REG)
);

defparam rnode_165to166_bb6_cmp37_i_0_reg_166_fifo.DEPTH = 1;
defparam rnode_165to166_bb6_cmp37_i_0_reg_166_fifo.DATA_WIDTH = 1;
defparam rnode_165to166_bb6_cmp37_i_0_reg_166_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_165to166_bb6_cmp37_i_0_reg_166_fifo.IMPL = "shift_reg";

assign rnode_165to166_bb6_cmp37_i_0_reg_166_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_164to165_bb6_cmp37_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_165to166_bb6_cmp37_i_0_NO_SHIFT_REG = rnode_165to166_bb6_cmp37_i_0_reg_166_NO_SHIFT_REG;
assign rnode_165to166_bb6_cmp37_i_0_stall_in_reg_166_NO_SHIFT_REG = 1'b0;
assign rnode_165to166_bb6_cmp37_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 3
//  * capacity = 3
 logic rnode_165to168_bb6__13_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_165to168_bb6__13_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_165to168_bb6__13_i_0_NO_SHIFT_REG;
 logic rnode_165to168_bb6__13_i_0_reg_168_inputs_ready_NO_SHIFT_REG;
 logic rnode_165to168_bb6__13_i_0_reg_168_NO_SHIFT_REG;
 logic rnode_165to168_bb6__13_i_0_valid_out_reg_168_NO_SHIFT_REG;
 logic rnode_165to168_bb6__13_i_0_stall_in_reg_168_NO_SHIFT_REG;
 logic rnode_165to168_bb6__13_i_0_stall_out_reg_168_NO_SHIFT_REG;

acl_data_fifo rnode_165to168_bb6__13_i_0_reg_168_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_165to168_bb6__13_i_0_reg_168_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_165to168_bb6__13_i_0_stall_in_reg_168_NO_SHIFT_REG),
	.valid_out(rnode_165to168_bb6__13_i_0_valid_out_reg_168_NO_SHIFT_REG),
	.stall_out(rnode_165to168_bb6__13_i_0_stall_out_reg_168_NO_SHIFT_REG),
	.data_in(rnode_164to165_bb6__13_i_0_NO_SHIFT_REG),
	.data_out(rnode_165to168_bb6__13_i_0_reg_168_NO_SHIFT_REG)
);

defparam rnode_165to168_bb6__13_i_0_reg_168_fifo.DEPTH = 3;
defparam rnode_165to168_bb6__13_i_0_reg_168_fifo.DATA_WIDTH = 1;
defparam rnode_165to168_bb6__13_i_0_reg_168_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_165to168_bb6__13_i_0_reg_168_fifo.IMPL = "shift_reg";

assign rnode_165to168_bb6__13_i_0_reg_168_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_164to165_bb6__13_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_165to168_bb6__13_i_0_NO_SHIFT_REG = rnode_165to168_bb6__13_i_0_reg_168_NO_SHIFT_REG;
assign rnode_165to168_bb6__13_i_0_stall_in_reg_168_NO_SHIFT_REG = 1'b0;
assign rnode_165to168_bb6__13_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb6_add178_i_valid_out;
wire local_bb6_add178_i_stall_in;
wire local_bb6_add178_i_inputs_ready;
wire local_bb6_add178_i_stall_local;
wire [31:0] local_bb6_add178_i;

assign local_bb6_add178_i_inputs_ready = (rnode_164to165_bb6_add_compressed_i_0_valid_out_NO_SHIFT_REG & rnode_164to165_bb6_xor175_i_0_valid_out_NO_SHIFT_REG);
assign local_bb6_add178_i = ((rnode_164to165_bb6_add_compressed_i_0_NO_SHIFT_REG & 32'h7FFFFF9) + rnode_164to165_bb6_xor175_i_0_NO_SHIFT_REG);
assign local_bb6_add178_i_valid_out = 1'b1;
assign rnode_164to165_bb6_add_compressed_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_164to165_bb6_xor175_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_166to167_bb6_and17_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_166to167_bb6_and17_i_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_bb6_and17_i_0_NO_SHIFT_REG;
 logic rnode_166to167_bb6_and17_i_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_bb6_and17_i_0_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb6_and17_i_0_valid_out_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb6_and17_i_0_stall_in_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb6_and17_i_0_stall_out_reg_167_NO_SHIFT_REG;

acl_data_fifo rnode_166to167_bb6_and17_i_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_166to167_bb6_and17_i_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_166to167_bb6_and17_i_0_stall_in_reg_167_NO_SHIFT_REG),
	.valid_out(rnode_166to167_bb6_and17_i_0_valid_out_reg_167_NO_SHIFT_REG),
	.stall_out(rnode_166to167_bb6_and17_i_0_stall_out_reg_167_NO_SHIFT_REG),
	.data_in((rnode_165to166_bb6_and17_i_0_NO_SHIFT_REG & 32'hFF)),
	.data_out(rnode_166to167_bb6_and17_i_0_reg_167_NO_SHIFT_REG)
);

defparam rnode_166to167_bb6_and17_i_0_reg_167_fifo.DEPTH = 1;
defparam rnode_166to167_bb6_and17_i_0_reg_167_fifo.DATA_WIDTH = 32;
defparam rnode_166to167_bb6_and17_i_0_reg_167_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_166to167_bb6_and17_i_0_reg_167_fifo.IMPL = "shift_reg";

assign rnode_166to167_bb6_and17_i_0_reg_167_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_165to166_bb6_and17_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_166to167_bb6_and17_i_0_NO_SHIFT_REG = rnode_166to167_bb6_and17_i_0_reg_167_NO_SHIFT_REG;
assign rnode_166to167_bb6_and17_i_0_stall_in_reg_167_NO_SHIFT_REG = 1'b0;
assign rnode_166to167_bb6_and17_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_167to168_bb6_var__u43_0_valid_out_NO_SHIFT_REG;
 logic rnode_167to168_bb6_var__u43_0_stall_in_NO_SHIFT_REG;
 logic rnode_167to168_bb6_var__u43_0_NO_SHIFT_REG;
 logic rnode_167to168_bb6_var__u43_0_reg_168_inputs_ready_NO_SHIFT_REG;
 logic rnode_167to168_bb6_var__u43_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb6_var__u43_0_valid_out_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb6_var__u43_0_stall_in_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb6_var__u43_0_stall_out_reg_168_NO_SHIFT_REG;

acl_data_fifo rnode_167to168_bb6_var__u43_0_reg_168_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_167to168_bb6_var__u43_0_reg_168_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_167to168_bb6_var__u43_0_stall_in_reg_168_NO_SHIFT_REG),
	.valid_out(rnode_167to168_bb6_var__u43_0_valid_out_reg_168_NO_SHIFT_REG),
	.stall_out(rnode_167to168_bb6_var__u43_0_stall_out_reg_168_NO_SHIFT_REG),
	.data_in(rnode_165to167_bb6_var__u43_0_NO_SHIFT_REG),
	.data_out(rnode_167to168_bb6_var__u43_0_reg_168_NO_SHIFT_REG)
);

defparam rnode_167to168_bb6_var__u43_0_reg_168_fifo.DEPTH = 1;
defparam rnode_167to168_bb6_var__u43_0_reg_168_fifo.DATA_WIDTH = 1;
defparam rnode_167to168_bb6_var__u43_0_reg_168_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_167to168_bb6_var__u43_0_reg_168_fifo.IMPL = "shift_reg";

assign rnode_167to168_bb6_var__u43_0_reg_168_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_165to167_bb6_var__u43_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_167to168_bb6_var__u43_0_NO_SHIFT_REG = rnode_167to168_bb6_var__u43_0_reg_168_NO_SHIFT_REG;
assign rnode_167to168_bb6_var__u43_0_stall_in_reg_168_NO_SHIFT_REG = 1'b0;
assign rnode_167to168_bb6_var__u43_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_166to167_bb6_cmp37_i_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_166to167_bb6_cmp37_i_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_166to167_bb6_cmp37_i_0_NO_SHIFT_REG;
 logic rnode_166to167_bb6_cmp37_i_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_166to167_bb6_cmp37_i_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_166to167_bb6_cmp37_i_1_NO_SHIFT_REG;
 logic rnode_166to167_bb6_cmp37_i_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_166to167_bb6_cmp37_i_0_stall_in_2_NO_SHIFT_REG;
 logic rnode_166to167_bb6_cmp37_i_2_NO_SHIFT_REG;
 logic rnode_166to167_bb6_cmp37_i_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic rnode_166to167_bb6_cmp37_i_0_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb6_cmp37_i_0_valid_out_0_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb6_cmp37_i_0_stall_in_0_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb6_cmp37_i_0_stall_out_reg_167_NO_SHIFT_REG;

acl_data_fifo rnode_166to167_bb6_cmp37_i_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_166to167_bb6_cmp37_i_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_166to167_bb6_cmp37_i_0_stall_in_0_reg_167_NO_SHIFT_REG),
	.valid_out(rnode_166to167_bb6_cmp37_i_0_valid_out_0_reg_167_NO_SHIFT_REG),
	.stall_out(rnode_166to167_bb6_cmp37_i_0_stall_out_reg_167_NO_SHIFT_REG),
	.data_in(rnode_165to166_bb6_cmp37_i_0_NO_SHIFT_REG),
	.data_out(rnode_166to167_bb6_cmp37_i_0_reg_167_NO_SHIFT_REG)
);

defparam rnode_166to167_bb6_cmp37_i_0_reg_167_fifo.DEPTH = 1;
defparam rnode_166to167_bb6_cmp37_i_0_reg_167_fifo.DATA_WIDTH = 1;
defparam rnode_166to167_bb6_cmp37_i_0_reg_167_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_166to167_bb6_cmp37_i_0_reg_167_fifo.IMPL = "shift_reg";

assign rnode_166to167_bb6_cmp37_i_0_reg_167_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_165to166_bb6_cmp37_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_166to167_bb6_cmp37_i_0_stall_in_0_reg_167_NO_SHIFT_REG = 1'b0;
assign rnode_166to167_bb6_cmp37_i_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_166to167_bb6_cmp37_i_0_NO_SHIFT_REG = rnode_166to167_bb6_cmp37_i_0_reg_167_NO_SHIFT_REG;
assign rnode_166to167_bb6_cmp37_i_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_166to167_bb6_cmp37_i_1_NO_SHIFT_REG = rnode_166to167_bb6_cmp37_i_0_reg_167_NO_SHIFT_REG;
assign rnode_166to167_bb6_cmp37_i_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_166to167_bb6_cmp37_i_2_NO_SHIFT_REG = rnode_166to167_bb6_cmp37_i_0_reg_167_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_168to169_bb6__13_i_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_168to169_bb6__13_i_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_168to169_bb6__13_i_0_NO_SHIFT_REG;
 logic rnode_168to169_bb6__13_i_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_168to169_bb6__13_i_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_168to169_bb6__13_i_1_NO_SHIFT_REG;
 logic rnode_168to169_bb6__13_i_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_168to169_bb6__13_i_0_stall_in_2_NO_SHIFT_REG;
 logic rnode_168to169_bb6__13_i_2_NO_SHIFT_REG;
 logic rnode_168to169_bb6__13_i_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic rnode_168to169_bb6__13_i_0_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb6__13_i_0_valid_out_0_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb6__13_i_0_stall_in_0_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb6__13_i_0_stall_out_reg_169_NO_SHIFT_REG;

acl_data_fifo rnode_168to169_bb6__13_i_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_168to169_bb6__13_i_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_168to169_bb6__13_i_0_stall_in_0_reg_169_NO_SHIFT_REG),
	.valid_out(rnode_168to169_bb6__13_i_0_valid_out_0_reg_169_NO_SHIFT_REG),
	.stall_out(rnode_168to169_bb6__13_i_0_stall_out_reg_169_NO_SHIFT_REG),
	.data_in(rnode_165to168_bb6__13_i_0_NO_SHIFT_REG),
	.data_out(rnode_168to169_bb6__13_i_0_reg_169_NO_SHIFT_REG)
);

defparam rnode_168to169_bb6__13_i_0_reg_169_fifo.DEPTH = 1;
defparam rnode_168to169_bb6__13_i_0_reg_169_fifo.DATA_WIDTH = 1;
defparam rnode_168to169_bb6__13_i_0_reg_169_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_168to169_bb6__13_i_0_reg_169_fifo.IMPL = "shift_reg";

assign rnode_168to169_bb6__13_i_0_reg_169_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_165to168_bb6__13_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_168to169_bb6__13_i_0_stall_in_0_reg_169_NO_SHIFT_REG = 1'b0;
assign rnode_168to169_bb6__13_i_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_168to169_bb6__13_i_0_NO_SHIFT_REG = rnode_168to169_bb6__13_i_0_reg_169_NO_SHIFT_REG;
assign rnode_168to169_bb6__13_i_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_168to169_bb6__13_i_1_NO_SHIFT_REG = rnode_168to169_bb6__13_i_0_reg_169_NO_SHIFT_REG;
assign rnode_168to169_bb6__13_i_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_168to169_bb6__13_i_2_NO_SHIFT_REG = rnode_168to169_bb6__13_i_0_reg_169_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_165to166_bb6_add178_i_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_165to166_bb6_add178_i_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_bb6_add178_i_0_NO_SHIFT_REG;
 logic rnode_165to166_bb6_add178_i_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_165to166_bb6_add178_i_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_bb6_add178_i_1_NO_SHIFT_REG;
 logic rnode_165to166_bb6_add178_i_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_165to166_bb6_add178_i_0_stall_in_2_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_bb6_add178_i_2_NO_SHIFT_REG;
 logic rnode_165to166_bb6_add178_i_0_valid_out_3_NO_SHIFT_REG;
 logic rnode_165to166_bb6_add178_i_0_stall_in_3_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_bb6_add178_i_3_NO_SHIFT_REG;
 logic rnode_165to166_bb6_add178_i_0_reg_166_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_165to166_bb6_add178_i_0_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_bb6_add178_i_0_valid_out_0_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_bb6_add178_i_0_stall_in_0_reg_166_NO_SHIFT_REG;
 logic rnode_165to166_bb6_add178_i_0_stall_out_reg_166_NO_SHIFT_REG;

acl_data_fifo rnode_165to166_bb6_add178_i_0_reg_166_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_165to166_bb6_add178_i_0_reg_166_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_165to166_bb6_add178_i_0_stall_in_0_reg_166_NO_SHIFT_REG),
	.valid_out(rnode_165to166_bb6_add178_i_0_valid_out_0_reg_166_NO_SHIFT_REG),
	.stall_out(rnode_165to166_bb6_add178_i_0_stall_out_reg_166_NO_SHIFT_REG),
	.data_in(local_bb6_add178_i),
	.data_out(rnode_165to166_bb6_add178_i_0_reg_166_NO_SHIFT_REG)
);

defparam rnode_165to166_bb6_add178_i_0_reg_166_fifo.DEPTH = 1;
defparam rnode_165to166_bb6_add178_i_0_reg_166_fifo.DATA_WIDTH = 32;
defparam rnode_165to166_bb6_add178_i_0_reg_166_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_165to166_bb6_add178_i_0_reg_166_fifo.IMPL = "shift_reg";

assign rnode_165to166_bb6_add178_i_0_reg_166_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_add178_i_stall_in = 1'b0;
assign rnode_165to166_bb6_add178_i_0_stall_in_0_reg_166_NO_SHIFT_REG = 1'b0;
assign rnode_165to166_bb6_add178_i_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_165to166_bb6_add178_i_0_NO_SHIFT_REG = rnode_165to166_bb6_add178_i_0_reg_166_NO_SHIFT_REG;
assign rnode_165to166_bb6_add178_i_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_165to166_bb6_add178_i_1_NO_SHIFT_REG = rnode_165to166_bb6_add178_i_0_reg_166_NO_SHIFT_REG;
assign rnode_165to166_bb6_add178_i_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_165to166_bb6_add178_i_2_NO_SHIFT_REG = rnode_165to166_bb6_add178_i_0_reg_166_NO_SHIFT_REG;
assign rnode_165to166_bb6_add178_i_0_valid_out_3_NO_SHIFT_REG = 1'b1;
assign rnode_165to166_bb6_add178_i_3_NO_SHIFT_REG = rnode_165to166_bb6_add178_i_0_reg_166_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_not_cmp37_i_stall_local;
wire local_bb6_not_cmp37_i;

assign local_bb6_not_cmp37_i = (rnode_166to167_bb6_cmp37_i_0_NO_SHIFT_REG ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb6_cond260_i_stall_local;
wire [31:0] local_bb6_cond260_i;

assign local_bb6_cond260_i = (rnode_168to169_bb6__13_i_1_NO_SHIFT_REG ? 32'h400000 : 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6_and179_i_valid_out;
wire local_bb6_and179_i_stall_in;
wire local_bb6_and179_i_inputs_ready;
wire local_bb6_and179_i_stall_local;
wire [31:0] local_bb6_and179_i;

assign local_bb6_and179_i_inputs_ready = rnode_165to166_bb6_add178_i_0_valid_out_0_NO_SHIFT_REG;
assign local_bb6_and179_i = (rnode_165to166_bb6_add178_i_0_NO_SHIFT_REG & 32'hFFFFFFF);
assign local_bb6_and179_i_valid_out = 1'b1;
assign rnode_165to166_bb6_add178_i_0_stall_in_0_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb6_and181_i_valid_out;
wire local_bb6_and181_i_stall_in;
wire local_bb6_and181_i_inputs_ready;
wire local_bb6_and181_i_stall_local;
wire [31:0] local_bb6_and181_i;

assign local_bb6_and181_i_inputs_ready = rnode_165to166_bb6_add178_i_0_valid_out_1_NO_SHIFT_REG;
assign local_bb6_and181_i = (rnode_165to166_bb6_add178_i_1_NO_SHIFT_REG >> 32'h1B);
assign local_bb6_and181_i_valid_out = 1'b1;
assign rnode_165to166_bb6_add178_i_0_stall_in_1_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb6_and184_i_valid_out;
wire local_bb6_and184_i_stall_in;
wire local_bb6_and184_i_inputs_ready;
wire local_bb6_and184_i_stall_local;
wire [31:0] local_bb6_and184_i;

assign local_bb6_and184_i_inputs_ready = rnode_165to166_bb6_add178_i_0_valid_out_2_NO_SHIFT_REG;
assign local_bb6_and184_i = (rnode_165to166_bb6_add178_i_2_NO_SHIFT_REG & 32'h1);
assign local_bb6_and184_i_valid_out = 1'b1;
assign rnode_165to166_bb6_add178_i_0_stall_in_2_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb6_and187_i_stall_local;
wire [31:0] local_bb6_and187_i;

assign local_bb6_and187_i = (rnode_165to166_bb6_add178_i_3_NO_SHIFT_REG & 32'h7FFFFFF);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_166to167_bb6_and179_i_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_166to167_bb6_and179_i_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_bb6_and179_i_0_NO_SHIFT_REG;
 logic rnode_166to167_bb6_and179_i_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_166to167_bb6_and179_i_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_bb6_and179_i_1_NO_SHIFT_REG;
 logic rnode_166to167_bb6_and179_i_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_166to167_bb6_and179_i_0_stall_in_2_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_bb6_and179_i_2_NO_SHIFT_REG;
 logic rnode_166to167_bb6_and179_i_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_bb6_and179_i_0_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb6_and179_i_0_valid_out_0_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb6_and179_i_0_stall_in_0_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb6_and179_i_0_stall_out_reg_167_NO_SHIFT_REG;

acl_data_fifo rnode_166to167_bb6_and179_i_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_166to167_bb6_and179_i_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_166to167_bb6_and179_i_0_stall_in_0_reg_167_NO_SHIFT_REG),
	.valid_out(rnode_166to167_bb6_and179_i_0_valid_out_0_reg_167_NO_SHIFT_REG),
	.stall_out(rnode_166to167_bb6_and179_i_0_stall_out_reg_167_NO_SHIFT_REG),
	.data_in((local_bb6_and179_i & 32'hFFFFFFF)),
	.data_out(rnode_166to167_bb6_and179_i_0_reg_167_NO_SHIFT_REG)
);

defparam rnode_166to167_bb6_and179_i_0_reg_167_fifo.DEPTH = 1;
defparam rnode_166to167_bb6_and179_i_0_reg_167_fifo.DATA_WIDTH = 32;
defparam rnode_166to167_bb6_and179_i_0_reg_167_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_166to167_bb6_and179_i_0_reg_167_fifo.IMPL = "shift_reg";

assign rnode_166to167_bb6_and179_i_0_reg_167_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_and179_i_stall_in = 1'b0;
assign rnode_166to167_bb6_and179_i_0_stall_in_0_reg_167_NO_SHIFT_REG = 1'b0;
assign rnode_166to167_bb6_and179_i_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_166to167_bb6_and179_i_0_NO_SHIFT_REG = rnode_166to167_bb6_and179_i_0_reg_167_NO_SHIFT_REG;
assign rnode_166to167_bb6_and179_i_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_166to167_bb6_and179_i_1_NO_SHIFT_REG = rnode_166to167_bb6_and179_i_0_reg_167_NO_SHIFT_REG;
assign rnode_166to167_bb6_and179_i_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_166to167_bb6_and179_i_2_NO_SHIFT_REG = rnode_166to167_bb6_and179_i_0_reg_167_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_166to167_bb6_and181_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_166to167_bb6_and181_i_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_bb6_and181_i_0_NO_SHIFT_REG;
 logic rnode_166to167_bb6_and181_i_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_bb6_and181_i_0_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb6_and181_i_0_valid_out_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb6_and181_i_0_stall_in_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb6_and181_i_0_stall_out_reg_167_NO_SHIFT_REG;

acl_data_fifo rnode_166to167_bb6_and181_i_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_166to167_bb6_and181_i_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_166to167_bb6_and181_i_0_stall_in_reg_167_NO_SHIFT_REG),
	.valid_out(rnode_166to167_bb6_and181_i_0_valid_out_reg_167_NO_SHIFT_REG),
	.stall_out(rnode_166to167_bb6_and181_i_0_stall_out_reg_167_NO_SHIFT_REG),
	.data_in((local_bb6_and181_i & 32'h1F)),
	.data_out(rnode_166to167_bb6_and181_i_0_reg_167_NO_SHIFT_REG)
);

defparam rnode_166to167_bb6_and181_i_0_reg_167_fifo.DEPTH = 1;
defparam rnode_166to167_bb6_and181_i_0_reg_167_fifo.DATA_WIDTH = 32;
defparam rnode_166to167_bb6_and181_i_0_reg_167_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_166to167_bb6_and181_i_0_reg_167_fifo.IMPL = "shift_reg";

assign rnode_166to167_bb6_and181_i_0_reg_167_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_and181_i_stall_in = 1'b0;
assign rnode_166to167_bb6_and181_i_0_NO_SHIFT_REG = rnode_166to167_bb6_and181_i_0_reg_167_NO_SHIFT_REG;
assign rnode_166to167_bb6_and181_i_0_stall_in_reg_167_NO_SHIFT_REG = 1'b0;
assign rnode_166to167_bb6_and181_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_166to167_bb6_and184_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_166to167_bb6_and184_i_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_bb6_and184_i_0_NO_SHIFT_REG;
 logic rnode_166to167_bb6_and184_i_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_bb6_and184_i_0_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb6_and184_i_0_valid_out_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb6_and184_i_0_stall_in_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb6_and184_i_0_stall_out_reg_167_NO_SHIFT_REG;

acl_data_fifo rnode_166to167_bb6_and184_i_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_166to167_bb6_and184_i_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_166to167_bb6_and184_i_0_stall_in_reg_167_NO_SHIFT_REG),
	.valid_out(rnode_166to167_bb6_and184_i_0_valid_out_reg_167_NO_SHIFT_REG),
	.stall_out(rnode_166to167_bb6_and184_i_0_stall_out_reg_167_NO_SHIFT_REG),
	.data_in((local_bb6_and184_i & 32'h1)),
	.data_out(rnode_166to167_bb6_and184_i_0_reg_167_NO_SHIFT_REG)
);

defparam rnode_166to167_bb6_and184_i_0_reg_167_fifo.DEPTH = 1;
defparam rnode_166to167_bb6_and184_i_0_reg_167_fifo.DATA_WIDTH = 32;
defparam rnode_166to167_bb6_and184_i_0_reg_167_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_166to167_bb6_and184_i_0_reg_167_fifo.IMPL = "shift_reg";

assign rnode_166to167_bb6_and184_i_0_reg_167_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_and184_i_stall_in = 1'b0;
assign rnode_166to167_bb6_and184_i_0_NO_SHIFT_REG = rnode_166to167_bb6_and184_i_0_reg_167_NO_SHIFT_REG;
assign rnode_166to167_bb6_and184_i_0_stall_in_reg_167_NO_SHIFT_REG = 1'b0;
assign rnode_166to167_bb6_and184_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb6_shr_i_i_stall_local;
wire [31:0] local_bb6_shr_i_i;

assign local_bb6_shr_i_i = ((local_bb6_and187_i & 32'h7FFFFFF) >> 32'h1);

// This section implements an unregistered operation.
// 
wire local_bb6_shr200_i_stall_local;
wire [31:0] local_bb6_shr200_i;

assign local_bb6_shr200_i = ((rnode_166to167_bb6_and179_i_1_NO_SHIFT_REG & 32'hFFFFFFF) >> 32'h1);

// This section implements an unregistered operation.
// 
wire local_bb6_var__u52_stall_local;
wire [31:0] local_bb6_var__u52;

assign local_bb6_var__u52 = ((rnode_166to167_bb6_and181_i_0_NO_SHIFT_REG & 32'h1F) & 32'h1);

// This section implements an unregistered operation.
// 
wire local_bb6_or_i_i_stall_local;
wire [31:0] local_bb6_or_i_i;

assign local_bb6_or_i_i = ((local_bb6_shr_i_i & 32'h3FFFFFF) | (local_bb6_and187_i & 32'h7FFFFFF));

// This section implements an unregistered operation.
// 
wire local_bb6_or203_i_stall_local;
wire [31:0] local_bb6_or203_i;

assign local_bb6_or203_i = ((local_bb6_shr200_i & 32'h7FFFFFF) | (rnode_166to167_bb6_and184_i_0_NO_SHIFT_REG & 32'h1));

// This section implements an unregistered operation.
// 
wire local_bb6_tobool198_i_stall_local;
wire local_bb6_tobool198_i;

assign local_bb6_tobool198_i = ((local_bb6_var__u52 & 32'h1) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6_shr1_i_i_stall_local;
wire [31:0] local_bb6_shr1_i_i;

assign local_bb6_shr1_i_i = ((local_bb6_or_i_i & 32'h7FFFFFF) >> 32'h2);

// This section implements an unregistered operation.
// 
wire local_bb6__26_i16_stall_local;
wire local_bb6__26_i16;

assign local_bb6__26_i16 = (local_bb6_tobool198_i & local_bb6_not_cmp37_i);

// This section implements an unregistered operation.
// 
wire local_bb6_or2_i_i_stall_local;
wire [31:0] local_bb6_or2_i_i;

assign local_bb6_or2_i_i = ((local_bb6_shr1_i_i & 32'h1FFFFFF) | (local_bb6_or_i_i & 32'h7FFFFFF));

// This section implements an unregistered operation.
// 
wire local_bb6__27_i17_stall_local;
wire [31:0] local_bb6__27_i17;

assign local_bb6__27_i17 = (local_bb6__26_i16 ? 32'h0 : (local_bb6_var__u52 & 32'h1));

// This section implements an unregistered operation.
// 
wire local_bb6__29_i18_stall_local;
wire [31:0] local_bb6__29_i18;

assign local_bb6__29_i18 = (local_bb6__26_i16 ? (rnode_166to167_bb6_and179_i_2_NO_SHIFT_REG & 32'hFFFFFFF) : (local_bb6_or203_i & 32'h7FFFFFF));

// This section implements an unregistered operation.
// 
wire local_bb6_shr3_i_i_stall_local;
wire [31:0] local_bb6_shr3_i_i;

assign local_bb6_shr3_i_i = ((local_bb6_or2_i_i & 32'h7FFFFFF) >> 32'h4);

// This section implements an unregistered operation.
// 
wire local_bb6_or4_i_i_stall_local;
wire [31:0] local_bb6_or4_i_i;

assign local_bb6_or4_i_i = ((local_bb6_shr3_i_i & 32'h7FFFFF) | (local_bb6_or2_i_i & 32'h7FFFFFF));

// This section implements an unregistered operation.
// 
wire local_bb6_shr5_i_i_stall_local;
wire [31:0] local_bb6_shr5_i_i;

assign local_bb6_shr5_i_i = ((local_bb6_or4_i_i & 32'h7FFFFFF) >> 32'h8);

// This section implements an unregistered operation.
// 
wire local_bb6_or6_i_i_stall_local;
wire [31:0] local_bb6_or6_i_i;

assign local_bb6_or6_i_i = ((local_bb6_shr5_i_i & 32'h7FFFF) | (local_bb6_or4_i_i & 32'h7FFFFFF));

// This section implements an unregistered operation.
// 
wire local_bb6_shr7_i_i_stall_local;
wire [31:0] local_bb6_shr7_i_i;

assign local_bb6_shr7_i_i = ((local_bb6_or6_i_i & 32'h7FFFFFF) >> 32'h10);

// This section implements an unregistered operation.
// 
wire local_bb6_or8_i_i_stall_local;
wire [31:0] local_bb6_or8_i_i;

assign local_bb6_or8_i_i = ((local_bb6_shr7_i_i & 32'h7FF) | (local_bb6_or6_i_i & 32'h7FFFFFF));

// This section implements an unregistered operation.
// 
wire local_bb6_and_i_i_stall_local;
wire [31:0] local_bb6_and_i_i;

assign local_bb6_and_i_i = ((local_bb6_or8_i_i & 32'h7FFFFFF) ^ 32'h7FFFFFF);

// This section implements an unregistered operation.
// 
wire local_bb6__and_i_i_valid_out;
wire local_bb6__and_i_i_stall_in;
wire local_bb6__and_i_i_inputs_ready;
wire local_bb6__and_i_i_stall_local;
wire [31:0] local_bb6__and_i_i;

thirtysix_six_comp local_bb6__and_i_i_popcnt_instance (
	.data((local_bb6_and_i_i & 32'h1FFFFFFF)),
	.sum(local_bb6__and_i_i)
);


assign local_bb6__and_i_i_inputs_ready = rnode_165to166_bb6_add178_i_0_valid_out_3_NO_SHIFT_REG;
assign local_bb6__and_i_i_valid_out = 1'b1;
assign rnode_165to166_bb6_add178_i_0_stall_in_3_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_166to167_bb6__and_i_i_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_166to167_bb6__and_i_i_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_bb6__and_i_i_0_NO_SHIFT_REG;
 logic rnode_166to167_bb6__and_i_i_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_166to167_bb6__and_i_i_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_bb6__and_i_i_1_NO_SHIFT_REG;
 logic rnode_166to167_bb6__and_i_i_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_166to167_bb6__and_i_i_0_stall_in_2_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_bb6__and_i_i_2_NO_SHIFT_REG;
 logic rnode_166to167_bb6__and_i_i_0_reg_167_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_166to167_bb6__and_i_i_0_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb6__and_i_i_0_valid_out_0_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb6__and_i_i_0_stall_in_0_reg_167_NO_SHIFT_REG;
 logic rnode_166to167_bb6__and_i_i_0_stall_out_reg_167_NO_SHIFT_REG;

acl_data_fifo rnode_166to167_bb6__and_i_i_0_reg_167_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_166to167_bb6__and_i_i_0_reg_167_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_166to167_bb6__and_i_i_0_stall_in_0_reg_167_NO_SHIFT_REG),
	.valid_out(rnode_166to167_bb6__and_i_i_0_valid_out_0_reg_167_NO_SHIFT_REG),
	.stall_out(rnode_166to167_bb6__and_i_i_0_stall_out_reg_167_NO_SHIFT_REG),
	.data_in((local_bb6__and_i_i & 32'h3F)),
	.data_out(rnode_166to167_bb6__and_i_i_0_reg_167_NO_SHIFT_REG)
);

defparam rnode_166to167_bb6__and_i_i_0_reg_167_fifo.DEPTH = 1;
defparam rnode_166to167_bb6__and_i_i_0_reg_167_fifo.DATA_WIDTH = 32;
defparam rnode_166to167_bb6__and_i_i_0_reg_167_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_166to167_bb6__and_i_i_0_reg_167_fifo.IMPL = "shift_reg";

assign rnode_166to167_bb6__and_i_i_0_reg_167_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6__and_i_i_stall_in = 1'b0;
assign rnode_166to167_bb6__and_i_i_0_stall_in_0_reg_167_NO_SHIFT_REG = 1'b0;
assign rnode_166to167_bb6__and_i_i_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_166to167_bb6__and_i_i_0_NO_SHIFT_REG = rnode_166to167_bb6__and_i_i_0_reg_167_NO_SHIFT_REG;
assign rnode_166to167_bb6__and_i_i_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_166to167_bb6__and_i_i_1_NO_SHIFT_REG = rnode_166to167_bb6__and_i_i_0_reg_167_NO_SHIFT_REG;
assign rnode_166to167_bb6__and_i_i_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_166to167_bb6__and_i_i_2_NO_SHIFT_REG = rnode_166to167_bb6__and_i_i_0_reg_167_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_and9_i_i_stall_local;
wire [31:0] local_bb6_and9_i_i;

assign local_bb6_and9_i_i = ((rnode_166to167_bb6__and_i_i_0_NO_SHIFT_REG & 32'h3F) & 32'h1F);

// This section implements an unregistered operation.
// 
wire local_bb6_and189_i_stall_local;
wire [31:0] local_bb6_and189_i;

assign local_bb6_and189_i = ((rnode_166to167_bb6__and_i_i_1_NO_SHIFT_REG & 32'h3F) & 32'h18);

// This section implements an unregistered operation.
// 
wire local_bb6_and192_i_stall_local;
wire [31:0] local_bb6_and192_i;

assign local_bb6_and192_i = ((rnode_166to167_bb6__and_i_i_2_NO_SHIFT_REG & 32'h3F) & 32'h7);

// This section implements an unregistered operation.
// 
wire local_bb6_sub219_i_stall_local;
wire [31:0] local_bb6_sub219_i;

assign local_bb6_sub219_i = (32'h0 - (local_bb6_and9_i_i & 32'h1F));

// This section implements an unregistered operation.
// 
wire local_bb6_shl190_i_stall_local;
wire [31:0] local_bb6_shl190_i;

assign local_bb6_shl190_i = ((rnode_166to167_bb6_and179_i_0_NO_SHIFT_REG & 32'hFFFFFFF) << (local_bb6_and189_i & 32'h18));

// This section implements an unregistered operation.
// 
wire local_bb6_cond224_i_stall_local;
wire [31:0] local_bb6_cond224_i;

assign local_bb6_cond224_i = (rnode_166to167_bb6_cmp37_i_2_NO_SHIFT_REG ? local_bb6_sub219_i : (local_bb6__27_i17 & 32'h1));

// This section implements an unregistered operation.
// 
wire local_bb6_and191_i_stall_local;
wire [31:0] local_bb6_and191_i;

assign local_bb6_and191_i = (local_bb6_shl190_i & 32'h7FFFFFF);

// This section implements an unregistered operation.
// 
wire local_bb6_add225_i_stall_local;
wire [31:0] local_bb6_add225_i;

assign local_bb6_add225_i = (local_bb6_cond224_i + (rnode_166to167_bb6_and17_i_0_NO_SHIFT_REG & 32'hFF));

// This section implements an unregistered operation.
// 
wire local_bb6_fold_i_stall_local;
wire [31:0] local_bb6_fold_i;

assign local_bb6_fold_i = (local_bb6_cond224_i + (rnode_166to167_bb6_shr16_i_0_NO_SHIFT_REG & 32'h1FF));

// This section implements an unregistered operation.
// 
wire local_bb6_shl193_i_stall_local;
wire [31:0] local_bb6_shl193_i;

assign local_bb6_shl193_i = ((local_bb6_and191_i & 32'h7FFFFFF) << (local_bb6_and192_i & 32'h7));

// This section implements an unregistered operation.
// 
wire local_bb6_and194_i_stall_local;
wire [31:0] local_bb6_and194_i;

assign local_bb6_and194_i = (local_bb6_shl193_i & 32'h7FFFFFF);

// This section implements an unregistered operation.
// 
wire local_bb6_fold_i_valid_out;
wire local_bb6_fold_i_stall_in;
wire local_bb6_add225_i_valid_out;
wire local_bb6_add225_i_stall_in;
wire local_bb6_not_cmp37_i_valid_out_1;
wire local_bb6_not_cmp37_i_stall_in_1;
wire local_bb6__30_i19_valid_out;
wire local_bb6__30_i19_stall_in;
wire local_bb6__30_i19_inputs_ready;
wire local_bb6__30_i19_stall_local;
wire [31:0] local_bb6__30_i19;

assign local_bb6__30_i19_inputs_ready = (rnode_166to167_bb6_shr16_i_0_valid_out_NO_SHIFT_REG & rnode_166to167_bb6_cmp37_i_0_valid_out_2_NO_SHIFT_REG & rnode_166to167_bb6_and17_i_0_valid_out_NO_SHIFT_REG & rnode_166to167_bb6_cmp37_i_0_valid_out_0_NO_SHIFT_REG & rnode_166to167_bb6_and179_i_0_valid_out_2_NO_SHIFT_REG & rnode_166to167_bb6_cmp37_i_0_valid_out_1_NO_SHIFT_REG & rnode_166to167_bb6_and181_i_0_valid_out_NO_SHIFT_REG & rnode_166to167_bb6_and179_i_0_valid_out_1_NO_SHIFT_REG & rnode_166to167_bb6_and184_i_0_valid_out_NO_SHIFT_REG & rnode_166to167_bb6_and179_i_0_valid_out_0_NO_SHIFT_REG & rnode_166to167_bb6__and_i_i_0_valid_out_1_NO_SHIFT_REG & rnode_166to167_bb6__and_i_i_0_valid_out_2_NO_SHIFT_REG & rnode_166to167_bb6__and_i_i_0_valid_out_0_NO_SHIFT_REG);
assign local_bb6__30_i19 = (rnode_166to167_bb6_cmp37_i_1_NO_SHIFT_REG ? (local_bb6_and194_i & 32'h7FFFFFF) : (local_bb6__29_i18 & 32'hFFFFFFF));
assign local_bb6_fold_i_valid_out = 1'b1;
assign local_bb6_add225_i_valid_out = 1'b1;
assign local_bb6_not_cmp37_i_valid_out_1 = 1'b1;
assign local_bb6__30_i19_valid_out = 1'b1;
assign rnode_166to167_bb6_shr16_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_166to167_bb6_cmp37_i_0_stall_in_2_NO_SHIFT_REG = 1'b0;
assign rnode_166to167_bb6_and17_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_166to167_bb6_cmp37_i_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_166to167_bb6_and179_i_0_stall_in_2_NO_SHIFT_REG = 1'b0;
assign rnode_166to167_bb6_cmp37_i_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_166to167_bb6_and181_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_166to167_bb6_and179_i_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_166to167_bb6_and184_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_166to167_bb6_and179_i_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_166to167_bb6__and_i_i_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_166to167_bb6__and_i_i_0_stall_in_2_NO_SHIFT_REG = 1'b0;
assign rnode_166to167_bb6__and_i_i_0_stall_in_0_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_167to168_bb6_fold_i_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_167to168_bb6_fold_i_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_167to168_bb6_fold_i_0_NO_SHIFT_REG;
 logic rnode_167to168_bb6_fold_i_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_167to168_bb6_fold_i_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_167to168_bb6_fold_i_1_NO_SHIFT_REG;
 logic rnode_167to168_bb6_fold_i_0_reg_168_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_167to168_bb6_fold_i_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb6_fold_i_0_valid_out_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb6_fold_i_0_stall_in_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb6_fold_i_0_stall_out_reg_168_NO_SHIFT_REG;

acl_data_fifo rnode_167to168_bb6_fold_i_0_reg_168_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_167to168_bb6_fold_i_0_reg_168_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_167to168_bb6_fold_i_0_stall_in_0_reg_168_NO_SHIFT_REG),
	.valid_out(rnode_167to168_bb6_fold_i_0_valid_out_0_reg_168_NO_SHIFT_REG),
	.stall_out(rnode_167to168_bb6_fold_i_0_stall_out_reg_168_NO_SHIFT_REG),
	.data_in(local_bb6_fold_i),
	.data_out(rnode_167to168_bb6_fold_i_0_reg_168_NO_SHIFT_REG)
);

defparam rnode_167to168_bb6_fold_i_0_reg_168_fifo.DEPTH = 1;
defparam rnode_167to168_bb6_fold_i_0_reg_168_fifo.DATA_WIDTH = 32;
defparam rnode_167to168_bb6_fold_i_0_reg_168_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_167to168_bb6_fold_i_0_reg_168_fifo.IMPL = "shift_reg";

assign rnode_167to168_bb6_fold_i_0_reg_168_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_fold_i_stall_in = 1'b0;
assign rnode_167to168_bb6_fold_i_0_stall_in_0_reg_168_NO_SHIFT_REG = 1'b0;
assign rnode_167to168_bb6_fold_i_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_167to168_bb6_fold_i_0_NO_SHIFT_REG = rnode_167to168_bb6_fold_i_0_reg_168_NO_SHIFT_REG;
assign rnode_167to168_bb6_fold_i_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_167to168_bb6_fold_i_1_NO_SHIFT_REG = rnode_167to168_bb6_fold_i_0_reg_168_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_167to168_bb6_add225_i_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_167to168_bb6_add225_i_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_167to168_bb6_add225_i_0_NO_SHIFT_REG;
 logic rnode_167to168_bb6_add225_i_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_167to168_bb6_add225_i_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_167to168_bb6_add225_i_1_NO_SHIFT_REG;
 logic rnode_167to168_bb6_add225_i_0_reg_168_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_167to168_bb6_add225_i_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb6_add225_i_0_valid_out_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb6_add225_i_0_stall_in_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb6_add225_i_0_stall_out_reg_168_NO_SHIFT_REG;

acl_data_fifo rnode_167to168_bb6_add225_i_0_reg_168_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_167to168_bb6_add225_i_0_reg_168_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_167to168_bb6_add225_i_0_stall_in_0_reg_168_NO_SHIFT_REG),
	.valid_out(rnode_167to168_bb6_add225_i_0_valid_out_0_reg_168_NO_SHIFT_REG),
	.stall_out(rnode_167to168_bb6_add225_i_0_stall_out_reg_168_NO_SHIFT_REG),
	.data_in(local_bb6_add225_i),
	.data_out(rnode_167to168_bb6_add225_i_0_reg_168_NO_SHIFT_REG)
);

defparam rnode_167to168_bb6_add225_i_0_reg_168_fifo.DEPTH = 1;
defparam rnode_167to168_bb6_add225_i_0_reg_168_fifo.DATA_WIDTH = 32;
defparam rnode_167to168_bb6_add225_i_0_reg_168_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_167to168_bb6_add225_i_0_reg_168_fifo.IMPL = "shift_reg";

assign rnode_167to168_bb6_add225_i_0_reg_168_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_add225_i_stall_in = 1'b0;
assign rnode_167to168_bb6_add225_i_0_stall_in_0_reg_168_NO_SHIFT_REG = 1'b0;
assign rnode_167to168_bb6_add225_i_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_167to168_bb6_add225_i_0_NO_SHIFT_REG = rnode_167to168_bb6_add225_i_0_reg_168_NO_SHIFT_REG;
assign rnode_167to168_bb6_add225_i_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_167to168_bb6_add225_i_1_NO_SHIFT_REG = rnode_167to168_bb6_add225_i_0_reg_168_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_167to168_bb6_not_cmp37_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_167to168_bb6_not_cmp37_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_167to168_bb6_not_cmp37_i_0_NO_SHIFT_REG;
 logic rnode_167to168_bb6_not_cmp37_i_0_reg_168_inputs_ready_NO_SHIFT_REG;
 logic rnode_167to168_bb6_not_cmp37_i_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb6_not_cmp37_i_0_valid_out_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb6_not_cmp37_i_0_stall_in_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb6_not_cmp37_i_0_stall_out_reg_168_NO_SHIFT_REG;

acl_data_fifo rnode_167to168_bb6_not_cmp37_i_0_reg_168_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_167to168_bb6_not_cmp37_i_0_reg_168_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_167to168_bb6_not_cmp37_i_0_stall_in_reg_168_NO_SHIFT_REG),
	.valid_out(rnode_167to168_bb6_not_cmp37_i_0_valid_out_reg_168_NO_SHIFT_REG),
	.stall_out(rnode_167to168_bb6_not_cmp37_i_0_stall_out_reg_168_NO_SHIFT_REG),
	.data_in(local_bb6_not_cmp37_i),
	.data_out(rnode_167to168_bb6_not_cmp37_i_0_reg_168_NO_SHIFT_REG)
);

defparam rnode_167to168_bb6_not_cmp37_i_0_reg_168_fifo.DEPTH = 1;
defparam rnode_167to168_bb6_not_cmp37_i_0_reg_168_fifo.DATA_WIDTH = 1;
defparam rnode_167to168_bb6_not_cmp37_i_0_reg_168_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_167to168_bb6_not_cmp37_i_0_reg_168_fifo.IMPL = "shift_reg";

assign rnode_167to168_bb6_not_cmp37_i_0_reg_168_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_not_cmp37_i_stall_in_1 = 1'b0;
assign rnode_167to168_bb6_not_cmp37_i_0_NO_SHIFT_REG = rnode_167to168_bb6_not_cmp37_i_0_reg_168_NO_SHIFT_REG;
assign rnode_167to168_bb6_not_cmp37_i_0_stall_in_reg_168_NO_SHIFT_REG = 1'b0;
assign rnode_167to168_bb6_not_cmp37_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_167to168_bb6__30_i19_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_167to168_bb6__30_i19_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_167to168_bb6__30_i19_0_NO_SHIFT_REG;
 logic rnode_167to168_bb6__30_i19_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_167to168_bb6__30_i19_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_167to168_bb6__30_i19_1_NO_SHIFT_REG;
 logic rnode_167to168_bb6__30_i19_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_167to168_bb6__30_i19_0_stall_in_2_NO_SHIFT_REG;
 logic [31:0] rnode_167to168_bb6__30_i19_2_NO_SHIFT_REG;
 logic rnode_167to168_bb6__30_i19_0_reg_168_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_167to168_bb6__30_i19_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb6__30_i19_0_valid_out_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb6__30_i19_0_stall_in_0_reg_168_NO_SHIFT_REG;
 logic rnode_167to168_bb6__30_i19_0_stall_out_reg_168_NO_SHIFT_REG;

acl_data_fifo rnode_167to168_bb6__30_i19_0_reg_168_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_167to168_bb6__30_i19_0_reg_168_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_167to168_bb6__30_i19_0_stall_in_0_reg_168_NO_SHIFT_REG),
	.valid_out(rnode_167to168_bb6__30_i19_0_valid_out_0_reg_168_NO_SHIFT_REG),
	.stall_out(rnode_167to168_bb6__30_i19_0_stall_out_reg_168_NO_SHIFT_REG),
	.data_in((local_bb6__30_i19 & 32'hFFFFFFF)),
	.data_out(rnode_167to168_bb6__30_i19_0_reg_168_NO_SHIFT_REG)
);

defparam rnode_167to168_bb6__30_i19_0_reg_168_fifo.DEPTH = 1;
defparam rnode_167to168_bb6__30_i19_0_reg_168_fifo.DATA_WIDTH = 32;
defparam rnode_167to168_bb6__30_i19_0_reg_168_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_167to168_bb6__30_i19_0_reg_168_fifo.IMPL = "shift_reg";

assign rnode_167to168_bb6__30_i19_0_reg_168_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6__30_i19_stall_in = 1'b0;
assign rnode_167to168_bb6__30_i19_0_stall_in_0_reg_168_NO_SHIFT_REG = 1'b0;
assign rnode_167to168_bb6__30_i19_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_167to168_bb6__30_i19_0_NO_SHIFT_REG = rnode_167to168_bb6__30_i19_0_reg_168_NO_SHIFT_REG;
assign rnode_167to168_bb6__30_i19_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_167to168_bb6__30_i19_1_NO_SHIFT_REG = rnode_167to168_bb6__30_i19_0_reg_168_NO_SHIFT_REG;
assign rnode_167to168_bb6__30_i19_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_167to168_bb6__30_i19_2_NO_SHIFT_REG = rnode_167to168_bb6__30_i19_0_reg_168_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_and230_i_stall_local;
wire [31:0] local_bb6_and230_i;

assign local_bb6_and230_i = (rnode_167to168_bb6_fold_i_0_NO_SHIFT_REG & 32'hFF);

// This section implements an unregistered operation.
// 
wire local_bb6_and227_i_stall_local;
wire [31:0] local_bb6_and227_i;

assign local_bb6_and227_i = (rnode_167to168_bb6_add225_i_0_NO_SHIFT_REG & 32'h100);

// This section implements an unregistered operation.
// 
wire local_bb6_cmp236_i_stall_local;
wire local_bb6_cmp236_i;

assign local_bb6_cmp236_i = ($signed(rnode_167to168_bb6_add225_i_1_NO_SHIFT_REG) > $signed(32'hFE));

// This section implements an unregistered operation.
// 
wire local_bb6_and209_i_stall_local;
wire [31:0] local_bb6_and209_i;

assign local_bb6_and209_i = ((rnode_167to168_bb6__30_i19_0_NO_SHIFT_REG & 32'hFFFFFFF) & 32'h7FFFFFF);

// This section implements an unregistered operation.
// 
wire local_bb6_and245_i_stall_local;
wire [31:0] local_bb6_and245_i;

assign local_bb6_and245_i = ((rnode_167to168_bb6__30_i19_1_NO_SHIFT_REG & 32'hFFFFFFF) & 32'h7);

// This section implements an unregistered operation.
// 
wire local_bb6_or250_vec_0_i_stall_local;
wire [95:0] local_bb6_or250_vec_0_i;

assign local_bb6_or250_vec_0_i[31:0] = (rnode_167to168_bb6__30_i19_2_NO_SHIFT_REG & 32'hFFFFFFF);
assign local_bb6_or250_vec_0_i[63:32] = 32'bx;
assign local_bb6_or250_vec_0_i[95:64] = 32'bx;

// This section implements an unregistered operation.
// 
wire local_bb6_cmp231_i_stall_local;
wire local_bb6_cmp231_i;

assign local_bb6_cmp231_i = ((local_bb6_and230_i & 32'hFF) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6_tobool228_i_stall_local;
wire local_bb6_tobool228_i;

assign local_bb6_tobool228_i = ((local_bb6_and227_i & 32'h100) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6_cmp210_i_stall_local;
wire local_bb6_cmp210_i;

assign local_bb6_cmp210_i = ((local_bb6_and209_i & 32'h7FFFFFF) == 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6_cmp264_i_stall_local;
wire local_bb6_cmp264_i;

assign local_bb6_cmp264_i = ((local_bb6_and245_i & 32'h7) > 32'h4);

// This section implements an unregistered operation.
// 
wire local_bb6_cmp264_i_valid_out;
wire local_bb6_cmp264_i_stall_in;
wire local_bb6_cmp266_i_valid_out;
wire local_bb6_cmp266_i_stall_in;
wire local_bb6_cmp266_i_inputs_ready;
wire local_bb6_cmp266_i_stall_local;
wire local_bb6_cmp266_i;

assign local_bb6_cmp266_i_inputs_ready = rnode_167to168_bb6__30_i19_0_valid_out_1_NO_SHIFT_REG;
assign local_bb6_cmp266_i = ((local_bb6_and245_i & 32'h7) == 32'h4);
assign local_bb6_cmp264_i_valid_out = 1'b1;
assign local_bb6_cmp266_i_valid_out = 1'b1;
assign rnode_167to168_bb6__30_i19_0_stall_in_1_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb6_or250_vec_1_i_stall_local;
wire [95:0] local_bb6_or250_vec_1_i;

assign local_bb6_or250_vec_1_i[31:0] = local_bb6_or250_vec_0_i[31:0];
assign local_bb6_or250_vec_1_i[63:32] = rnode_167to168_bb6_fold_i_1_NO_SHIFT_REG;
assign local_bb6_or250_vec_1_i[95:64] = local_bb6_or250_vec_0_i[95:64];

// This section implements an unregistered operation.
// 
wire local_bb6_or_cond_i_stall_local;
wire local_bb6_or_cond_i;

assign local_bb6_or_cond_i = (local_bb6_tobool228_i | local_bb6_cmp231_i);

// This section implements an unregistered operation.
// 
wire local_bb6_cmp210_not_i_stall_local;
wire local_bb6_cmp210_not_i;

assign local_bb6_cmp210_not_i = (local_bb6_cmp210_i ^ 1'b1);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_168to169_bb6_cmp264_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_168to169_bb6_cmp264_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_168to169_bb6_cmp264_i_0_NO_SHIFT_REG;
 logic rnode_168to169_bb6_cmp264_i_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic rnode_168to169_bb6_cmp264_i_0_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb6_cmp264_i_0_valid_out_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb6_cmp264_i_0_stall_in_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb6_cmp264_i_0_stall_out_reg_169_NO_SHIFT_REG;

acl_data_fifo rnode_168to169_bb6_cmp264_i_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_168to169_bb6_cmp264_i_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_168to169_bb6_cmp264_i_0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rnode_168to169_bb6_cmp264_i_0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rnode_168to169_bb6_cmp264_i_0_stall_out_reg_169_NO_SHIFT_REG),
	.data_in(local_bb6_cmp264_i),
	.data_out(rnode_168to169_bb6_cmp264_i_0_reg_169_NO_SHIFT_REG)
);

defparam rnode_168to169_bb6_cmp264_i_0_reg_169_fifo.DEPTH = 1;
defparam rnode_168to169_bb6_cmp264_i_0_reg_169_fifo.DATA_WIDTH = 1;
defparam rnode_168to169_bb6_cmp264_i_0_reg_169_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_168to169_bb6_cmp264_i_0_reg_169_fifo.IMPL = "shift_reg";

assign rnode_168to169_bb6_cmp264_i_0_reg_169_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_cmp264_i_stall_in = 1'b0;
assign rnode_168to169_bb6_cmp264_i_0_NO_SHIFT_REG = rnode_168to169_bb6_cmp264_i_0_reg_169_NO_SHIFT_REG;
assign rnode_168to169_bb6_cmp264_i_0_stall_in_reg_169_NO_SHIFT_REG = 1'b0;
assign rnode_168to169_bb6_cmp264_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_168to169_bb6_cmp266_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_168to169_bb6_cmp266_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_168to169_bb6_cmp266_i_0_NO_SHIFT_REG;
 logic rnode_168to169_bb6_cmp266_i_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic rnode_168to169_bb6_cmp266_i_0_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb6_cmp266_i_0_valid_out_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb6_cmp266_i_0_stall_in_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb6_cmp266_i_0_stall_out_reg_169_NO_SHIFT_REG;

acl_data_fifo rnode_168to169_bb6_cmp266_i_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_168to169_bb6_cmp266_i_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_168to169_bb6_cmp266_i_0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rnode_168to169_bb6_cmp266_i_0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rnode_168to169_bb6_cmp266_i_0_stall_out_reg_169_NO_SHIFT_REG),
	.data_in(local_bb6_cmp266_i),
	.data_out(rnode_168to169_bb6_cmp266_i_0_reg_169_NO_SHIFT_REG)
);

defparam rnode_168to169_bb6_cmp266_i_0_reg_169_fifo.DEPTH = 1;
defparam rnode_168to169_bb6_cmp266_i_0_reg_169_fifo.DATA_WIDTH = 1;
defparam rnode_168to169_bb6_cmp266_i_0_reg_169_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_168to169_bb6_cmp266_i_0_reg_169_fifo.IMPL = "shift_reg";

assign rnode_168to169_bb6_cmp266_i_0_reg_169_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_cmp266_i_stall_in = 1'b0;
assign rnode_168to169_bb6_cmp266_i_0_NO_SHIFT_REG = rnode_168to169_bb6_cmp266_i_0_reg_169_NO_SHIFT_REG;
assign rnode_168to169_bb6_cmp266_i_0_stall_in_reg_169_NO_SHIFT_REG = 1'b0;
assign rnode_168to169_bb6_cmp266_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb6__31_i20_stall_local;
wire local_bb6__31_i20;

assign local_bb6__31_i20 = (local_bb6_or_cond_i | local_bb6_cmp210_i);

// This section implements an unregistered operation.
// 
wire local_bb6_brmerge7_i_stall_local;
wire local_bb6_brmerge7_i;

assign local_bb6_brmerge7_i = (local_bb6_cmp210_not_i | rnode_167to168_bb6_not_cmp37_i_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb6_lnot239__i_stall_local;
wire local_bb6_lnot239__i;

assign local_bb6_lnot239__i = (local_bb6_cmp236_i & local_bb6_cmp210_not_i);

// This section implements an unregistered operation.
// 
wire local_bb6_conv267_i_stall_local;
wire [31:0] local_bb6_conv267_i;

assign local_bb6_conv267_i[31:1] = 31'h0;
assign local_bb6_conv267_i[0] = rnode_168to169_bb6_cmp266_i_0_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_resultSign_0_i_stall_local;
wire [31:0] local_bb6_resultSign_0_i;

assign local_bb6_resultSign_0_i = (local_bb6_brmerge7_i ? (rnode_167to168_bb6_and35_i_0_NO_SHIFT_REG & 32'h80000000) : 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6_or242_i_stall_local;
wire local_bb6_or242_i;

assign local_bb6_or242_i = (rnode_167to168_bb6_var__u43_0_NO_SHIFT_REG | local_bb6_lnot239__i);

// This section implements an unregistered operation.
// 
wire local_bb6_or250_vec_2_i_stall_local;
wire [95:0] local_bb6_or250_vec_2_i;

assign local_bb6_or250_vec_2_i[31:0] = local_bb6_or250_vec_1_i[31:0];
assign local_bb6_or250_vec_2_i[63:32] = local_bb6_or250_vec_1_i[63:32];
assign local_bb6_or250_vec_2_i[95:64] = (local_bb6_resultSign_0_i & 32'h80000000);

// This section implements an unregistered operation.
// 
wire local_bb6_or250_bitvec_i_stall_local;
wire [95:0] local_bb6_or250_bitvec_i;

assign local_bb6_or250_bitvec_i = local_bb6_or250_vec_2_i;

// This section implements an unregistered operation.
// 
wire local_bb6_or250_shuffle_i_valid_out;
wire local_bb6_or250_shuffle_i_stall_in;
wire local_bb6__31_i20_valid_out;
wire local_bb6__31_i20_stall_in;
wire local_bb6_or242_i_valid_out;
wire local_bb6_or242_i_stall_in;
wire local_bb6_or250_shuffle_i_inputs_ready;
wire local_bb6_or250_shuffle_i_stall_local;
wire [31:0] local_bb6_or250_shuffle_i;

assign local_bb6_or250_shuffle_i_inputs_ready = (rnode_167to168_bb6_and35_i_0_valid_out_NO_SHIFT_REG & rnode_167to168_bb6_fold_i_0_valid_out_1_NO_SHIFT_REG & rnode_167to168_bb6_not_cmp37_i_0_valid_out_NO_SHIFT_REG & rnode_167to168_bb6__30_i19_0_valid_out_2_NO_SHIFT_REG & rnode_167to168_bb6_fold_i_0_valid_out_0_NO_SHIFT_REG & rnode_167to168_bb6_add225_i_0_valid_out_0_NO_SHIFT_REG & rnode_167to168_bb6__30_i19_0_valid_out_0_NO_SHIFT_REG & rnode_167to168_bb6_var__u43_0_valid_out_NO_SHIFT_REG & rnode_167to168_bb6_add225_i_0_valid_out_1_NO_SHIFT_REG);
assign local_bb6_or250_shuffle_i[0] = local_bb6_or250_bitvec_i[3];
assign local_bb6_or250_shuffle_i[1] = local_bb6_or250_bitvec_i[4];
assign local_bb6_or250_shuffle_i[2] = local_bb6_or250_bitvec_i[5];
assign local_bb6_or250_shuffle_i[3] = local_bb6_or250_bitvec_i[6];
assign local_bb6_or250_shuffle_i[4] = local_bb6_or250_bitvec_i[7];
assign local_bb6_or250_shuffle_i[5] = local_bb6_or250_bitvec_i[8];
assign local_bb6_or250_shuffle_i[6] = local_bb6_or250_bitvec_i[9];
assign local_bb6_or250_shuffle_i[7] = local_bb6_or250_bitvec_i[10];
assign local_bb6_or250_shuffle_i[8] = local_bb6_or250_bitvec_i[11];
assign local_bb6_or250_shuffle_i[9] = local_bb6_or250_bitvec_i[12];
assign local_bb6_or250_shuffle_i[10] = local_bb6_or250_bitvec_i[13];
assign local_bb6_or250_shuffle_i[11] = local_bb6_or250_bitvec_i[14];
assign local_bb6_or250_shuffle_i[12] = local_bb6_or250_bitvec_i[15];
assign local_bb6_or250_shuffle_i[13] = local_bb6_or250_bitvec_i[16];
assign local_bb6_or250_shuffle_i[14] = local_bb6_or250_bitvec_i[17];
assign local_bb6_or250_shuffle_i[15] = local_bb6_or250_bitvec_i[18];
assign local_bb6_or250_shuffle_i[16] = local_bb6_or250_bitvec_i[19];
assign local_bb6_or250_shuffle_i[17] = local_bb6_or250_bitvec_i[20];
assign local_bb6_or250_shuffle_i[18] = local_bb6_or250_bitvec_i[21];
assign local_bb6_or250_shuffle_i[19] = local_bb6_or250_bitvec_i[22];
assign local_bb6_or250_shuffle_i[20] = local_bb6_or250_bitvec_i[23];
assign local_bb6_or250_shuffle_i[21] = local_bb6_or250_bitvec_i[24];
assign local_bb6_or250_shuffle_i[22] = local_bb6_or250_bitvec_i[25];
assign local_bb6_or250_shuffle_i[23] = local_bb6_or250_bitvec_i[32];
assign local_bb6_or250_shuffle_i[24] = local_bb6_or250_bitvec_i[33];
assign local_bb6_or250_shuffle_i[25] = local_bb6_or250_bitvec_i[34];
assign local_bb6_or250_shuffle_i[26] = local_bb6_or250_bitvec_i[35];
assign local_bb6_or250_shuffle_i[27] = local_bb6_or250_bitvec_i[36];
assign local_bb6_or250_shuffle_i[28] = local_bb6_or250_bitvec_i[37];
assign local_bb6_or250_shuffle_i[29] = local_bb6_or250_bitvec_i[38];
assign local_bb6_or250_shuffle_i[30] = local_bb6_or250_bitvec_i[39];
assign local_bb6_or250_shuffle_i[31] = local_bb6_or250_bitvec_i[95];
assign local_bb6_or250_shuffle_i_valid_out = 1'b1;
assign local_bb6__31_i20_valid_out = 1'b1;
assign local_bb6_or242_i_valid_out = 1'b1;
assign rnode_167to168_bb6_and35_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_167to168_bb6_fold_i_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_167to168_bb6_not_cmp37_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_167to168_bb6__30_i19_0_stall_in_2_NO_SHIFT_REG = 1'b0;
assign rnode_167to168_bb6_fold_i_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_167to168_bb6_add225_i_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_167to168_bb6__30_i19_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_167to168_bb6_var__u43_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_167to168_bb6_add225_i_0_stall_in_1_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_168to169_bb6_or250_shuffle_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_168to169_bb6_or250_shuffle_i_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_168to169_bb6_or250_shuffle_i_0_NO_SHIFT_REG;
 logic rnode_168to169_bb6_or250_shuffle_i_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_168to169_bb6_or250_shuffle_i_0_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb6_or250_shuffle_i_0_valid_out_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb6_or250_shuffle_i_0_stall_in_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb6_or250_shuffle_i_0_stall_out_reg_169_NO_SHIFT_REG;

acl_data_fifo rnode_168to169_bb6_or250_shuffle_i_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_168to169_bb6_or250_shuffle_i_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_168to169_bb6_or250_shuffle_i_0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rnode_168to169_bb6_or250_shuffle_i_0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rnode_168to169_bb6_or250_shuffle_i_0_stall_out_reg_169_NO_SHIFT_REG),
	.data_in(local_bb6_or250_shuffle_i),
	.data_out(rnode_168to169_bb6_or250_shuffle_i_0_reg_169_NO_SHIFT_REG)
);

defparam rnode_168to169_bb6_or250_shuffle_i_0_reg_169_fifo.DEPTH = 1;
defparam rnode_168to169_bb6_or250_shuffle_i_0_reg_169_fifo.DATA_WIDTH = 32;
defparam rnode_168to169_bb6_or250_shuffle_i_0_reg_169_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_168to169_bb6_or250_shuffle_i_0_reg_169_fifo.IMPL = "shift_reg";

assign rnode_168to169_bb6_or250_shuffle_i_0_reg_169_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_or250_shuffle_i_stall_in = 1'b0;
assign rnode_168to169_bb6_or250_shuffle_i_0_NO_SHIFT_REG = rnode_168to169_bb6_or250_shuffle_i_0_reg_169_NO_SHIFT_REG;
assign rnode_168to169_bb6_or250_shuffle_i_0_stall_in_reg_169_NO_SHIFT_REG = 1'b0;
assign rnode_168to169_bb6_or250_shuffle_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_168to169_bb6__31_i20_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_168to169_bb6__31_i20_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_168to169_bb6__31_i20_0_NO_SHIFT_REG;
 logic rnode_168to169_bb6__31_i20_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_168to169_bb6__31_i20_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_168to169_bb6__31_i20_1_NO_SHIFT_REG;
 logic rnode_168to169_bb6__31_i20_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic rnode_168to169_bb6__31_i20_0_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb6__31_i20_0_valid_out_0_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb6__31_i20_0_stall_in_0_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb6__31_i20_0_stall_out_reg_169_NO_SHIFT_REG;

acl_data_fifo rnode_168to169_bb6__31_i20_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_168to169_bb6__31_i20_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_168to169_bb6__31_i20_0_stall_in_0_reg_169_NO_SHIFT_REG),
	.valid_out(rnode_168to169_bb6__31_i20_0_valid_out_0_reg_169_NO_SHIFT_REG),
	.stall_out(rnode_168to169_bb6__31_i20_0_stall_out_reg_169_NO_SHIFT_REG),
	.data_in(local_bb6__31_i20),
	.data_out(rnode_168to169_bb6__31_i20_0_reg_169_NO_SHIFT_REG)
);

defparam rnode_168to169_bb6__31_i20_0_reg_169_fifo.DEPTH = 1;
defparam rnode_168to169_bb6__31_i20_0_reg_169_fifo.DATA_WIDTH = 1;
defparam rnode_168to169_bb6__31_i20_0_reg_169_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_168to169_bb6__31_i20_0_reg_169_fifo.IMPL = "shift_reg";

assign rnode_168to169_bb6__31_i20_0_reg_169_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6__31_i20_stall_in = 1'b0;
assign rnode_168to169_bb6__31_i20_0_stall_in_0_reg_169_NO_SHIFT_REG = 1'b0;
assign rnode_168to169_bb6__31_i20_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_168to169_bb6__31_i20_0_NO_SHIFT_REG = rnode_168to169_bb6__31_i20_0_reg_169_NO_SHIFT_REG;
assign rnode_168to169_bb6__31_i20_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_168to169_bb6__31_i20_1_NO_SHIFT_REG = rnode_168to169_bb6__31_i20_0_reg_169_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_168to169_bb6_or242_i_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_168to169_bb6_or242_i_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_168to169_bb6_or242_i_0_NO_SHIFT_REG;
 logic rnode_168to169_bb6_or242_i_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_168to169_bb6_or242_i_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_168to169_bb6_or242_i_1_NO_SHIFT_REG;
 logic rnode_168to169_bb6_or242_i_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_168to169_bb6_or242_i_0_stall_in_2_NO_SHIFT_REG;
 logic rnode_168to169_bb6_or242_i_2_NO_SHIFT_REG;
 logic rnode_168to169_bb6_or242_i_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic rnode_168to169_bb6_or242_i_0_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb6_or242_i_0_valid_out_0_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb6_or242_i_0_stall_in_0_reg_169_NO_SHIFT_REG;
 logic rnode_168to169_bb6_or242_i_0_stall_out_reg_169_NO_SHIFT_REG;

acl_data_fifo rnode_168to169_bb6_or242_i_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_168to169_bb6_or242_i_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_168to169_bb6_or242_i_0_stall_in_0_reg_169_NO_SHIFT_REG),
	.valid_out(rnode_168to169_bb6_or242_i_0_valid_out_0_reg_169_NO_SHIFT_REG),
	.stall_out(rnode_168to169_bb6_or242_i_0_stall_out_reg_169_NO_SHIFT_REG),
	.data_in(local_bb6_or242_i),
	.data_out(rnode_168to169_bb6_or242_i_0_reg_169_NO_SHIFT_REG)
);

defparam rnode_168to169_bb6_or242_i_0_reg_169_fifo.DEPTH = 1;
defparam rnode_168to169_bb6_or242_i_0_reg_169_fifo.DATA_WIDTH = 1;
defparam rnode_168to169_bb6_or242_i_0_reg_169_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_168to169_bb6_or242_i_0_reg_169_fifo.IMPL = "shift_reg";

assign rnode_168to169_bb6_or242_i_0_reg_169_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb6_or242_i_stall_in = 1'b0;
assign rnode_168to169_bb6_or242_i_0_stall_in_0_reg_169_NO_SHIFT_REG = 1'b0;
assign rnode_168to169_bb6_or242_i_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_168to169_bb6_or242_i_0_NO_SHIFT_REG = rnode_168to169_bb6_or242_i_0_reg_169_NO_SHIFT_REG;
assign rnode_168to169_bb6_or242_i_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_168to169_bb6_or242_i_1_NO_SHIFT_REG = rnode_168to169_bb6_or242_i_0_reg_169_NO_SHIFT_REG;
assign rnode_168to169_bb6_or242_i_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_168to169_bb6_or242_i_2_NO_SHIFT_REG = rnode_168to169_bb6_or242_i_0_reg_169_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_or250_compressed_i_stall_local;
wire [31:0] local_bb6_or250_compressed_i;

assign local_bb6_or250_compressed_i = rnode_168to169_bb6_or250_shuffle_i_0_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_lnot279_i_stall_local;
wire local_bb6_lnot279_i;

assign local_bb6_lnot279_i = (rnode_168to169_bb6__31_i20_1_NO_SHIFT_REG ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb6_or253_i_stall_local;
wire local_bb6_or253_i;

assign local_bb6_or253_i = (rnode_168to169_bb6__31_i20_0_NO_SHIFT_REG | rnode_168to169_bb6_or242_i_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb6_or257_i_stall_local;
wire local_bb6_or257_i;

assign local_bb6_or257_i = (rnode_168to169_bb6_or242_i_1_NO_SHIFT_REG | rnode_168to169_bb6__13_i_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb6_reduction_9_demorgan_i_stall_local;
wire local_bb6_reduction_9_demorgan_i;

assign local_bb6_reduction_9_demorgan_i = (rnode_168to169_bb6__13_i_2_NO_SHIFT_REG | rnode_168to169_bb6_or242_i_2_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb6_cond254_i_stall_local;
wire [31:0] local_bb6_cond254_i;

assign local_bb6_cond254_i = (local_bb6_or253_i ? 32'h80000000 : 32'hFFFFFFFF);

// This section implements an unregistered operation.
// 
wire local_bb6_cond258_i_stall_local;
wire [31:0] local_bb6_cond258_i;

assign local_bb6_cond258_i = (local_bb6_or257_i ? 32'h7F800000 : 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6_reduction_9_i_stall_local;
wire local_bb6_reduction_9_i;

assign local_bb6_reduction_9_i = (local_bb6_reduction_9_demorgan_i ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb6_and261_i_stall_local;
wire [31:0] local_bb6_and261_i;

assign local_bb6_and261_i = ((local_bb6_cond254_i | 32'h80000000) & local_bb6_or250_compressed_i);

// This section implements an unregistered operation.
// 
wire local_bb6_or262_i_stall_local;
wire [31:0] local_bb6_or262_i;

assign local_bb6_or262_i = ((local_bb6_cond258_i & 32'h7F800000) | (local_bb6_cond260_i & 32'h400000));

// This section implements an unregistered operation.
// 
wire local_bb6_and269_i_stall_local;
wire [31:0] local_bb6_and269_i;

assign local_bb6_and269_i = ((local_bb6_conv267_i & 32'h1) & local_bb6_and261_i);

// This section implements an unregistered operation.
// 
wire local_bb6_or263_i_stall_local;
wire [31:0] local_bb6_or263_i;

assign local_bb6_or263_i = ((local_bb6_or262_i & 32'h7FC00000) | local_bb6_and261_i);

// This section implements an unregistered operation.
// 
wire local_bb6_tobool270_i_stall_local;
wire local_bb6_tobool270_i;

assign local_bb6_tobool270_i = ((local_bb6_and269_i & 32'h1) != 32'h0);

// This section implements an unregistered operation.
// 
wire local_bb6__32_i_stall_local;
wire local_bb6__32_i;

assign local_bb6__32_i = (rnode_168to169_bb6_cmp264_i_0_NO_SHIFT_REG | local_bb6_tobool270_i);

// This section implements an unregistered operation.
// 
wire local_bb6_reduction_10_i_stall_local;
wire local_bb6_reduction_10_i;

assign local_bb6_reduction_10_i = (local_bb6__32_i & local_bb6_lnot279_i);

// This section implements an unregistered operation.
// 
wire local_bb6_reduction_11_i_stall_local;
wire local_bb6_reduction_11_i;

assign local_bb6_reduction_11_i = (local_bb6_reduction_10_i & local_bb6_reduction_9_i);

// This section implements an unregistered operation.
// 
wire local_bb6_conv283_i_stall_local;
wire [31:0] local_bb6_conv283_i;

assign local_bb6_conv283_i[31:1] = 31'h0;
assign local_bb6_conv283_i[0] = local_bb6_reduction_11_i;

// This section implements an unregistered operation.
// 
wire local_bb6_add284_i_stall_local;
wire [31:0] local_bb6_add284_i;

assign local_bb6_add284_i = ((local_bb6_conv283_i & 32'h1) + local_bb6_or263_i);

// This section implements an unregistered operation.
// 
wire local_bb6_var__u53_stall_local;
wire [31:0] local_bb6_var__u53;

assign local_bb6_var__u53 = local_bb6_add284_i;

// This section implements an unregistered operation.
// 
wire local_bb6_c0_exi118_valid_out;
wire local_bb6_c0_exi118_stall_in;
wire local_bb6_c0_exi118_inputs_ready;
wire local_bb6_c0_exi118_stall_local;
wire [63:0] local_bb6_c0_exi118;

assign local_bb6_c0_exi118_inputs_ready = (rnode_168to169_bb6_or242_i_0_valid_out_1_NO_SHIFT_REG & rnode_168to169_bb6__13_i_0_valid_out_0_NO_SHIFT_REG & rnode_168to169_bb6__13_i_0_valid_out_1_NO_SHIFT_REG & rnode_168to169_bb6_or242_i_0_valid_out_2_NO_SHIFT_REG & rnode_168to169_bb6__13_i_0_valid_out_2_NO_SHIFT_REG & rnode_168to169_bb6__31_i20_0_valid_out_0_NO_SHIFT_REG & rnode_168to169_bb6_or242_i_0_valid_out_0_NO_SHIFT_REG & rnode_168to169_bb6_or250_shuffle_i_0_valid_out_NO_SHIFT_REG & rnode_168to169_bb6_cmp266_i_0_valid_out_NO_SHIFT_REG & rnode_168to169_bb6_cmp264_i_0_valid_out_NO_SHIFT_REG & rnode_168to169_bb6__31_i20_0_valid_out_1_NO_SHIFT_REG);
assign local_bb6_c0_exi118[31:0] = 32'bx;
assign local_bb6_c0_exi118[63:32] = local_bb6_var__u53;
assign local_bb6_c0_exi118_valid_out = 1'b1;
assign rnode_168to169_bb6_or242_i_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_168to169_bb6__13_i_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_168to169_bb6__13_i_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_168to169_bb6_or242_i_0_stall_in_2_NO_SHIFT_REG = 1'b0;
assign rnode_168to169_bb6__13_i_0_stall_in_2_NO_SHIFT_REG = 1'b0;
assign rnode_168to169_bb6__31_i20_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_168to169_bb6_or242_i_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_168to169_bb6_or250_shuffle_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_168to169_bb6_cmp266_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_168to169_bb6_cmp264_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_168to169_bb6__31_i20_0_stall_in_1_NO_SHIFT_REG = 1'b0;

// This section implements a registered operation.
// 
wire local_bb6_c0_exit19_c0_exi118_inputs_ready;
 reg local_bb6_c0_exit19_c0_exi118_valid_out_NO_SHIFT_REG;
wire local_bb6_c0_exit19_c0_exi118_stall_in;
 reg [63:0] local_bb6_c0_exit19_c0_exi118_NO_SHIFT_REG;
wire [63:0] local_bb6_c0_exit19_c0_exi118_in;
wire local_bb6_c0_exit19_c0_exi118_valid;
wire local_bb6_c0_exit19_c0_exi118_causedstall;

acl_stall_free_sink local_bb6_c0_exit19_c0_exi118_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb6_c0_exi118),
	.data_out(local_bb6_c0_exit19_c0_exi118_in),
	.input_accepted(local_bb6_c0_enter14_c0_eni313_input_accepted),
	.valid_out(local_bb6_c0_exit19_c0_exi118_valid),
	.stall_in(~(local_bb6_c0_exit19_c0_exi118_output_regs_ready)),
	.stall_entry(local_bb6_c0_exit19_c0_exi118_entry_stall),
	.valid_in(local_bb6_c0_exit19_c0_exi118_valid_in),
	.IIphases(local_bb6_c0_exit19_c0_exi118_phases),
	.inc_pipelined_thread(local_bb6_c0_enter14_c0_eni313_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb6_c0_enter14_c0_eni313_dec_pipelined_thread)
);

defparam local_bb6_c0_exit19_c0_exi118_instance.DATA_WIDTH = 64;
defparam local_bb6_c0_exit19_c0_exi118_instance.PIPELINE_DEPTH = 13;
defparam local_bb6_c0_exit19_c0_exi118_instance.SHARINGII = 1;
defparam local_bb6_c0_exit19_c0_exi118_instance.SCHEDULEII = 1;
defparam local_bb6_c0_exit19_c0_exi118_instance.ALWAYS_THROTTLE = 0;

assign local_bb6_c0_exit19_c0_exi118_inputs_ready = 1'b1;
assign local_bb6_c0_exit19_c0_exi118_output_regs_ready = (&(~(local_bb6_c0_exit19_c0_exi118_valid_out_NO_SHIFT_REG) | ~(local_bb6_c0_exit19_c0_exi118_stall_in)));
assign local_bb6_c0_exit19_c0_exi118_valid_in = SFC_10_VALID_168_169_0_NO_SHIFT_REG;
assign local_bb6_c0_exi118_stall_in = 1'b0;
assign SFC_10_VALID_168_169_0_stall_in = 1'b0;
assign local_bb6_c0_exit19_c0_exi118_causedstall = (1'b1 && (1'b0 && !(~(local_bb6_c0_exit19_c0_exi118_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_c0_exit19_c0_exi118_NO_SHIFT_REG <= 'x;
		local_bb6_c0_exit19_c0_exi118_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_c0_exit19_c0_exi118_output_regs_ready)
		begin
			local_bb6_c0_exit19_c0_exi118_NO_SHIFT_REG <= local_bb6_c0_exit19_c0_exi118_in;
			local_bb6_c0_exit19_c0_exi118_valid_out_NO_SHIFT_REG <= local_bb6_c0_exit19_c0_exi118_valid;
		end
		else
		begin
			if (~(local_bb6_c0_exit19_c0_exi118_stall_in))
			begin
				local_bb6_c0_exit19_c0_exi118_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb6_c0_exe120_valid_out;
wire local_bb6_c0_exe120_stall_in;
wire local_bb6_c0_exe120_inputs_ready;
wire local_bb6_c0_exe120_stall_local;
wire [31:0] local_bb6_c0_exe120;

assign local_bb6_c0_exe120_inputs_ready = local_bb6_c0_exit19_c0_exi118_valid_out_NO_SHIFT_REG;
assign local_bb6_c0_exe120[31:0] = local_bb6_c0_exit19_c0_exi118_NO_SHIFT_REG[63:32];
assign local_bb6_c0_exe120_valid_out = local_bb6_c0_exe120_inputs_ready;
assign local_bb6_c0_exe120_stall_local = local_bb6_c0_exe120_stall_in;
assign local_bb6_c0_exit19_c0_exi118_stall_in = (|local_bb6_c0_exe120_stall_local);

// This section implements a registered operation.
// 
wire local_bb6_st_c0_exe120_inputs_ready;
 reg local_bb6_st_c0_exe120_valid_out_NO_SHIFT_REG;
wire local_bb6_st_c0_exe120_stall_in;
wire local_bb6_st_c0_exe120_output_regs_ready;
wire local_bb6_st_c0_exe120_fu_stall_out;
wire local_bb6_st_c0_exe120_fu_valid_out;
wire local_bb6_st_c0_exe120_causedstall;

lsu_top lsu_local_bb6_st_c0_exe120 (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb6_st_c0_exe120_fu_stall_out),
	.i_valid(local_bb6_st_c0_exe120_inputs_ready),
	.i_address((rnode_173to174_bb6_arrayidx78_0_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFFFC)),
	.i_writedata(local_bb6_c0_exe120),
	.i_cmpdata(),
	.i_predicate(rnode_173to174__phi_decision_xor118_0_NO_SHIFT_REG),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb6_st_c0_exe120_output_regs_ready)),
	.o_valid(local_bb6_st_c0_exe120_fu_valid_out),
	.o_readdata(),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb6_st_c0_exe120_active),
	.avm_address(avm_local_bb6_st_c0_exe120_address),
	.avm_read(avm_local_bb6_st_c0_exe120_read),
	.avm_enable(avm_local_bb6_st_c0_exe120_enable),
	.avm_readdata(avm_local_bb6_st_c0_exe120_readdata),
	.avm_write(avm_local_bb6_st_c0_exe120_write),
	.avm_writeack(avm_local_bb6_st_c0_exe120_writeack),
	.avm_burstcount(avm_local_bb6_st_c0_exe120_burstcount),
	.avm_writedata(avm_local_bb6_st_c0_exe120_writedata),
	.avm_byteenable(avm_local_bb6_st_c0_exe120_byteenable),
	.avm_waitrequest(avm_local_bb6_st_c0_exe120_waitrequest),
	.avm_readdatavalid(avm_local_bb6_st_c0_exe120_readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb6_st_c0_exe120.AWIDTH = 32;
defparam lsu_local_bb6_st_c0_exe120.WIDTH_BYTES = 4;
defparam lsu_local_bb6_st_c0_exe120.MWIDTH_BYTES = 64;
defparam lsu_local_bb6_st_c0_exe120.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb6_st_c0_exe120.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb6_st_c0_exe120.READ = 0;
defparam lsu_local_bb6_st_c0_exe120.ATOMIC = 0;
defparam lsu_local_bb6_st_c0_exe120.WIDTH = 32;
defparam lsu_local_bb6_st_c0_exe120.MWIDTH = 512;
defparam lsu_local_bb6_st_c0_exe120.ATOMIC_WIDTH = 3;
defparam lsu_local_bb6_st_c0_exe120.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb6_st_c0_exe120.KERNEL_SIDE_MEM_LATENCY = 160;
defparam lsu_local_bb6_st_c0_exe120.MEMORY_SIDE_MEM_LATENCY = 18;
defparam lsu_local_bb6_st_c0_exe120.USE_WRITE_ACK = 1;
defparam lsu_local_bb6_st_c0_exe120.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb6_st_c0_exe120.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb6_st_c0_exe120.NUMBER_BANKS = 1;
defparam lsu_local_bb6_st_c0_exe120.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb6_st_c0_exe120.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb6_st_c0_exe120.USEINPUTFIFO = 0;
defparam lsu_local_bb6_st_c0_exe120.USECACHING = 0;
defparam lsu_local_bb6_st_c0_exe120.USEOUTPUTFIFO = 1;
defparam lsu_local_bb6_st_c0_exe120.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb6_st_c0_exe120.ADDRSPACE = 1;
defparam lsu_local_bb6_st_c0_exe120.STYLE = "BURST-COALESCED";
defparam lsu_local_bb6_st_c0_exe120.USE_BYTE_EN = 0;

assign local_bb6_st_c0_exe120_inputs_ready = (local_bb6_c0_exe120_valid_out & rnode_173to174_bb6_arrayidx78_0_valid_out_NO_SHIFT_REG & rnode_173to174__phi_decision_xor118_0_valid_out_0_NO_SHIFT_REG);
assign local_bb6_st_c0_exe120_output_regs_ready = (&(~(local_bb6_st_c0_exe120_valid_out_NO_SHIFT_REG) | ~(local_bb6_st_c0_exe120_stall_in)));
assign local_bb6_c0_exe120_stall_in = (local_bb6_st_c0_exe120_fu_stall_out | ~(local_bb6_st_c0_exe120_inputs_ready));
assign rnode_173to174_bb6_arrayidx78_0_stall_in_NO_SHIFT_REG = (local_bb6_st_c0_exe120_fu_stall_out | ~(local_bb6_st_c0_exe120_inputs_ready));
assign rnode_173to174__phi_decision_xor118_0_stall_in_0_NO_SHIFT_REG = (local_bb6_st_c0_exe120_fu_stall_out | ~(local_bb6_st_c0_exe120_inputs_ready));
assign local_bb6_st_c0_exe120_causedstall = (local_bb6_st_c0_exe120_inputs_ready && (local_bb6_st_c0_exe120_fu_stall_out && !(~(local_bb6_st_c0_exe120_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_st_c0_exe120_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_st_c0_exe120_output_regs_ready)
		begin
			local_bb6_st_c0_exe120_valid_out_NO_SHIFT_REG <= local_bb6_st_c0_exe120_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_st_c0_exe120_stall_in))
			begin
				local_bb6_st_c0_exe120_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_334to334_bb6_st_c0_exe120_valid_out;
wire rstag_334to334_bb6_st_c0_exe120_stall_in;
wire rstag_334to334_bb6_st_c0_exe120_inputs_ready;
wire rstag_334to334_bb6_st_c0_exe120_stall_local;
 reg rstag_334to334_bb6_st_c0_exe120_staging_valid_NO_SHIFT_REG;
wire rstag_334to334_bb6_st_c0_exe120_combined_valid;

assign rstag_334to334_bb6_st_c0_exe120_inputs_ready = local_bb6_st_c0_exe120_valid_out_NO_SHIFT_REG;
assign rstag_334to334_bb6_st_c0_exe120_combined_valid = (rstag_334to334_bb6_st_c0_exe120_staging_valid_NO_SHIFT_REG | rstag_334to334_bb6_st_c0_exe120_inputs_ready);
assign rstag_334to334_bb6_st_c0_exe120_valid_out = rstag_334to334_bb6_st_c0_exe120_combined_valid;
assign rstag_334to334_bb6_st_c0_exe120_stall_local = rstag_334to334_bb6_st_c0_exe120_stall_in;
assign local_bb6_st_c0_exe120_stall_in = (|rstag_334to334_bb6_st_c0_exe120_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_334to334_bb6_st_c0_exe120_staging_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (rstag_334to334_bb6_st_c0_exe120_stall_local)
		begin
			if (~(rstag_334to334_bb6_st_c0_exe120_staging_valid_NO_SHIFT_REG))
			begin
				rstag_334to334_bb6_st_c0_exe120_staging_valid_NO_SHIFT_REG <= rstag_334to334_bb6_st_c0_exe120_inputs_ready;
			end
		end
		else
		begin
			rstag_334to334_bb6_st_c0_exe120_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_0_NO_SHIFT_REG;
 reg branch_compare_result_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg lvb_cmp56_0_reg_NO_SHIFT_REG;
 reg lvb_var__0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_3_0_reg_NO_SHIFT_REG;
 reg lvb_cmp1430_0_reg_NO_SHIFT_REG;
 reg lvb_var__u35_0_reg_NO_SHIFT_REG;
 reg lvb__phi_decision_xor118_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_ld__0_reg_NO_SHIFT_REG;
 reg lvb_cmp1824_0_reg_NO_SHIFT_REG;
 reg lvb__phi_decision_xor119_or_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_6148_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_1149_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_3150_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_4_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_channelCounter_058_0_reg_NO_SHIFT_REG;
 reg [63:0] lvb_arrayidx67_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul70_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul46_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_heightCounter_148_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c0_exe1_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul28_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb6_select74_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb6_add81_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb6_var__u38_valid_out & rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_valid_out_0_NO_SHIFT_REG & rstag_334to334_bb6_st_c0_exe120_valid_out);
assign branch_var__output_regs_ready = (~(branch_node_valid_out_0_NO_SHIFT_REG) | (((branch_compare_result_NO_SHIFT_REG != 1'b1) & ~(stall_in_1)) | (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & ~(stall_in_0))));
assign local_bb6_var__u38_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_stall_in_0_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rstag_334to334_bb6_st_c0_exe120_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_cmp56_0 = lvb_cmp56_0_reg_NO_SHIFT_REG;
assign lvb_cmp56_1 = lvb_cmp56_0_reg_NO_SHIFT_REG;
assign lvb_var__0 = lvb_var__0_reg_NO_SHIFT_REG;
assign lvb_var__1 = lvb_var__0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6_0 = lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6_1 = lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_3_0 = lvb_memcoalesce_param_extrValue_3_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_3_1 = lvb_memcoalesce_param_extrValue_3_0_reg_NO_SHIFT_REG;
assign lvb_cmp1430_0 = lvb_cmp1430_0_reg_NO_SHIFT_REG;
assign lvb_cmp1430_1 = lvb_cmp1430_0_reg_NO_SHIFT_REG;
assign lvb_var__u35_0 = lvb_var__u35_0_reg_NO_SHIFT_REG;
assign lvb_var__u35_1 = lvb_var__u35_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor118_0 = lvb__phi_decision_xor118_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor118_1 = lvb__phi_decision_xor118_0_reg_NO_SHIFT_REG;
assign lvb_ld__0 = lvb_ld__0_reg_NO_SHIFT_REG;
assign lvb_ld__1 = lvb_ld__0_reg_NO_SHIFT_REG;
assign lvb_cmp1824_0 = lvb_cmp1824_0_reg_NO_SHIFT_REG;
assign lvb_cmp1824_1 = lvb_cmp1824_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor119_or_0 = lvb__phi_decision_xor119_or_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor119_or_1 = lvb__phi_decision_xor119_or_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_5_0 = lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_5_1 = lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6148_0 = lvb_memcoalesce_param_extrValue_6148_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6148_1 = lvb_memcoalesce_param_extrValue_6148_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_1149_0 = lvb_memcoalesce_param_extrValue_1149_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_1149_1 = lvb_memcoalesce_param_extrValue_1149_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_3150_0 = lvb_memcoalesce_param_extrValue_3150_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_3150_1 = lvb_memcoalesce_param_extrValue_3150_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_4_0 = lvb_memcoalesce_param_extrValue_4_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_4_1 = lvb_memcoalesce_param_extrValue_4_0_reg_NO_SHIFT_REG;
assign lvb_channelCounter_058_0 = lvb_channelCounter_058_0_reg_NO_SHIFT_REG;
assign lvb_channelCounter_058_1 = lvb_channelCounter_058_0_reg_NO_SHIFT_REG;
assign lvb_arrayidx67_0 = lvb_arrayidx67_0_reg_NO_SHIFT_REG;
assign lvb_arrayidx67_1 = lvb_arrayidx67_0_reg_NO_SHIFT_REG;
assign lvb_mul70_0 = lvb_mul70_0_reg_NO_SHIFT_REG;
assign lvb_mul70_1 = lvb_mul70_0_reg_NO_SHIFT_REG;
assign lvb_mul46_0 = lvb_mul46_0_reg_NO_SHIFT_REG;
assign lvb_mul46_1 = lvb_mul46_0_reg_NO_SHIFT_REG;
assign lvb_heightCounter_148_0 = lvb_heightCounter_148_0_reg_NO_SHIFT_REG;
assign lvb_heightCounter_148_1 = lvb_heightCounter_148_0_reg_NO_SHIFT_REG;
assign lvb_c0_exe1_0 = lvb_c0_exe1_0_reg_NO_SHIFT_REG;
assign lvb_c0_exe1_1 = lvb_c0_exe1_0_reg_NO_SHIFT_REG;
assign lvb_mul28_0 = lvb_mul28_0_reg_NO_SHIFT_REG;
assign lvb_mul28_1 = lvb_mul28_0_reg_NO_SHIFT_REG;
assign lvb_bb6_select74_0 = lvb_bb6_select74_0_reg_NO_SHIFT_REG;
assign lvb_bb6_select74_1 = lvb_bb6_select74_0_reg_NO_SHIFT_REG;
assign lvb_bb6_add81_0 = lvb_bb6_add81_0_reg_NO_SHIFT_REG;
assign lvb_bb6_add81_1 = lvb_bb6_add81_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1_0 = lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1_1 = lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2_0 = lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2_1 = lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_0 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_1 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign valid_out_0 = (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG);
assign valid_out_1 = ((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG);
assign combined_branch_stall_in_signal = ((((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_1) | ((~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_0));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		lvb_cmp56_0_reg_NO_SHIFT_REG <= 'x;
		lvb_var__0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_3_0_reg_NO_SHIFT_REG <= 'x;
		lvb_cmp1430_0_reg_NO_SHIFT_REG <= 'x;
		lvb_var__u35_0_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision_xor118_0_reg_NO_SHIFT_REG <= 'x;
		lvb_ld__0_reg_NO_SHIFT_REG <= 'x;
		lvb_cmp1824_0_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision_xor119_or_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_6148_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_1149_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_3150_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_4_0_reg_NO_SHIFT_REG <= 'x;
		lvb_channelCounter_058_0_reg_NO_SHIFT_REG <= 'x;
		lvb_arrayidx67_0_reg_NO_SHIFT_REG <= 'x;
		lvb_mul70_0_reg_NO_SHIFT_REG <= 'x;
		lvb_mul46_0_reg_NO_SHIFT_REG <= 'x;
		lvb_heightCounter_148_0_reg_NO_SHIFT_REG <= 'x;
		lvb_c0_exe1_0_reg_NO_SHIFT_REG <= 'x;
		lvb_mul28_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb6_select74_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb6_add81_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= 'x;
		branch_compare_result_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_0_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_cmp56_0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[65];
			lvb_var__0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[66];
			lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[31:0];
			lvb_memcoalesce_param_extrValue_3_0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[98:67];
			lvb_cmp1430_0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[677];
			lvb_var__u35_0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[64];
			lvb__phi_decision_xor118_0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[678];
			lvb_ld__0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[130:99];
			lvb_cmp1824_0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[131];
			lvb__phi_decision_xor119_or_0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[132];
			lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[164:133];
			lvb_memcoalesce_param_extrValue_6148_0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[196:165];
			lvb_memcoalesce_param_extrValue_1149_0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[228:197];
			lvb_memcoalesce_param_extrValue_3150_0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[260:229];
			lvb_memcoalesce_param_extrValue_4_0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[292:261];
			lvb_channelCounter_058_0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[324:293];
			lvb_arrayidx67_0_reg_NO_SHIFT_REG <= (rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[388:325] & 64'hFFFFFFFFFFFFFFFC);
			lvb_mul70_0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[420:389];
			lvb_mul46_0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[452:421];
			lvb_heightCounter_148_0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[484:453];
			lvb_c0_exe1_0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[676:645];
			lvb_mul28_0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[516:485];
			lvb_bb6_select74_0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[644:613];
			lvb_bb6_add81_0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[63:32];
			lvb_input_global_id_1_0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[548:517];
			lvb_input_global_id_2_0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[580:549];
			lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= rcnode_333to334_rc1_memcoalesce_param_extrValue_6_0_NO_SHIFT_REG[612:581];
			branch_compare_result_NO_SHIFT_REG <= local_bb6_var__u38;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module convLayer_basic_block_7
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_global_size_1,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_0,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_1,
		input 		valid_in,
		output 		stall_out,
		input 		input_cmp56,
		input 		input_var_,
		input [31:0] 		input_memcoalesce_param_extrValue_6,
		input [31:0] 		input_memcoalesce_param_extrValue_3,
		input 		input_cmp1430,
		input 		input_var__u54,
		input 		input__phi_decision_xor118,
		input [31:0] 		input_ld_,
		input 		input_cmp1824,
		input 		input__phi_decision_xor119_or,
		input [31:0] 		input_memcoalesce_param_extrValue_5,
		input [31:0] 		input_memcoalesce_param_extrValue_6148,
		input [31:0] 		input_memcoalesce_param_extrValue_1149,
		input [31:0] 		input_memcoalesce_param_extrValue_3150,
		input [31:0] 		input_memcoalesce_param_extrValue_4,
		input [31:0] 		input_channelCounter_058,
		input [63:0] 		input_arrayidx67,
		input [31:0] 		input_mul70,
		input [31:0] 		input_mul46,
		input [31:0] 		input_heightCounter_148,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out_0,
		input 		stall_in_0,
		output 		lvb_cmp56_0,
		output 		lvb_var__0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_3_0,
		output 		lvb_cmp1430_0,
		output 		lvb_var__u54_0,
		output 		lvb__phi_decision_xor118_0,
		output [31:0] 		lvb_ld__0,
		output 		lvb_cmp1824_0,
		output 		lvb__phi_decision_xor119_or_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_5_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6148_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_1149_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_3150_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_4_0,
		output [31:0] 		lvb_channelCounter_058_0,
		output [63:0] 		lvb_arrayidx67_0,
		output [31:0] 		lvb_mul70_0,
		output [31:0] 		lvb_mul46_0,
		output [31:0] 		lvb_bb7_add85_0,
		output [31:0] 		lvb_input_global_id_1_0,
		output [31:0] 		lvb_input_global_id_2_0,
		output [31:0] 		lvb_input_acl_hw_wg_id_0,
		output 		valid_out_1,
		input 		stall_in_1,
		output 		lvb_cmp56_1,
		output 		lvb_var__1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_3_1,
		output 		lvb_cmp1430_1,
		output 		lvb_var__u54_1,
		output 		lvb__phi_decision_xor118_1,
		output [31:0] 		lvb_ld__1,
		output 		lvb_cmp1824_1,
		output 		lvb__phi_decision_xor119_or_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_5_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6148_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_1149_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_3150_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_4_1,
		output [31:0] 		lvb_channelCounter_058_1,
		output [63:0] 		lvb_arrayidx67_1,
		output [31:0] 		lvb_mul70_1,
		output [31:0] 		lvb_mul46_1,
		output [31:0] 		lvb_bb7_add85_1,
		output [31:0] 		lvb_input_global_id_1_1,
		output [31:0] 		lvb_input_global_id_2_1,
		output [31:0] 		lvb_input_acl_hw_wg_id_1,
		input [31:0] 		workgroup_size,
		input 		start
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((valid_out_0 & valid_out_1) & ~((stall_in_0 | stall_in_1)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg input_cmp56_staging_reg_NO_SHIFT_REG;
 reg input_var__staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_3_staging_reg_NO_SHIFT_REG;
 reg input_cmp1430_staging_reg_NO_SHIFT_REG;
 reg input_var__u54_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor118_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__staging_reg_NO_SHIFT_REG;
 reg input_cmp1824_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor119_or_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_5_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6148_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_1149_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_3150_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_4_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_058_staging_reg_NO_SHIFT_REG;
 reg [63:0] input_arrayidx67_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul70_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul46_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_heightCounter_148_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg local_lvm_cmp56_NO_SHIFT_REG;
 reg local_lvm_var__NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG;
 reg local_lvm_cmp1430_NO_SHIFT_REG;
 reg local_lvm_var__u54_NO_SHIFT_REG;
 reg local_lvm__phi_decision_xor118_NO_SHIFT_REG;
 reg [31:0] local_lvm_ld__NO_SHIFT_REG;
 reg local_lvm_cmp1824_NO_SHIFT_REG;
 reg local_lvm__phi_decision_xor119_or_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG;
 reg [31:0] local_lvm_channelCounter_058_NO_SHIFT_REG;
 reg [63:0] local_lvm_arrayidx67_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul70_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul46_NO_SHIFT_REG;
 reg [31:0] local_lvm_heightCounter_148_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_cmp56_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_3_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1430_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u54_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor118_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1824_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor119_or_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_5_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6148_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_1149_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_3150_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_4_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_058_staging_reg_NO_SHIFT_REG <= 'x;
		input_arrayidx67_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul70_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul46_staging_reg_NO_SHIFT_REG <= 'x;
		input_heightCounter_148_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_cmp56_staging_reg_NO_SHIFT_REG <= input_cmp56;
				input_var__staging_reg_NO_SHIFT_REG <= input_var_;
				input_memcoalesce_param_extrValue_6_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6;
				input_memcoalesce_param_extrValue_3_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3;
				input_cmp1430_staging_reg_NO_SHIFT_REG <= input_cmp1430;
				input_var__u54_staging_reg_NO_SHIFT_REG <= input_var__u54;
				input__phi_decision_xor118_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor118;
				input_ld__staging_reg_NO_SHIFT_REG <= input_ld_;
				input_cmp1824_staging_reg_NO_SHIFT_REG <= input_cmp1824;
				input__phi_decision_xor119_or_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor119_or;
				input_memcoalesce_param_extrValue_5_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5;
				input_memcoalesce_param_extrValue_6148_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148;
				input_memcoalesce_param_extrValue_1149_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149;
				input_memcoalesce_param_extrValue_3150_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150;
				input_memcoalesce_param_extrValue_4_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4;
				input_channelCounter_058_staging_reg_NO_SHIFT_REG <= input_channelCounter_058;
				input_arrayidx67_staging_reg_NO_SHIFT_REG <= input_arrayidx67;
				input_mul70_staging_reg_NO_SHIFT_REG <= input_mul70;
				input_mul46_staging_reg_NO_SHIFT_REG <= input_mul46;
				input_heightCounter_148_staging_reg_NO_SHIFT_REG <= input_heightCounter_148;
				input_global_id_1_staging_reg_NO_SHIFT_REG <= input_global_id_1;
				input_global_id_2_staging_reg_NO_SHIFT_REG <= input_global_id_2;
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_cmp56_NO_SHIFT_REG <= input_cmp56_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1430_NO_SHIFT_REG <= input_cmp1430_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u54_NO_SHIFT_REG <= input_var__u54_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor118_NO_SHIFT_REG <= input__phi_decision_xor118_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1824_NO_SHIFT_REG <= input_cmp1824_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor119_or_NO_SHIFT_REG <= input__phi_decision_xor119_or_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_058_NO_SHIFT_REG <= input_channelCounter_058_staging_reg_NO_SHIFT_REG;
					local_lvm_arrayidx67_NO_SHIFT_REG <= input_arrayidx67_staging_reg_NO_SHIFT_REG;
					local_lvm_mul70_NO_SHIFT_REG <= input_mul70_staging_reg_NO_SHIFT_REG;
					local_lvm_mul46_NO_SHIFT_REG <= input_mul46_staging_reg_NO_SHIFT_REG;
					local_lvm_heightCounter_148_NO_SHIFT_REG <= input_heightCounter_148_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_cmp56_NO_SHIFT_REG <= input_cmp56;
					local_lvm_var__NO_SHIFT_REG <= input_var_;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6;
					local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3;
					local_lvm_cmp1430_NO_SHIFT_REG <= input_cmp1430;
					local_lvm_var__u54_NO_SHIFT_REG <= input_var__u54;
					local_lvm__phi_decision_xor118_NO_SHIFT_REG <= input__phi_decision_xor118;
					local_lvm_ld__NO_SHIFT_REG <= input_ld_;
					local_lvm_cmp1824_NO_SHIFT_REG <= input_cmp1824;
					local_lvm__phi_decision_xor119_or_NO_SHIFT_REG <= input__phi_decision_xor119_or;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5;
					local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148;
					local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149;
					local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150;
					local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4;
					local_lvm_channelCounter_058_NO_SHIFT_REG <= input_channelCounter_058;
					local_lvm_arrayidx67_NO_SHIFT_REG <= input_arrayidx67;
					local_lvm_mul70_NO_SHIFT_REG <= input_mul70;
					local_lvm_mul46_NO_SHIFT_REG <= input_mul46;
					local_lvm_heightCounter_148_NO_SHIFT_REG <= input_heightCounter_148;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb7_add85_valid_out;
wire local_bb7_add85_stall_in;
wire local_bb7_add85_inputs_ready;
wire local_bb7_add85_stall_local;
wire [31:0] local_bb7_add85;
wire [518:0] rci_rcnode_1to3_rc1_cmp56_0_reg_1;

assign local_bb7_add85_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb7_add85 = (local_lvm_heightCounter_148_NO_SHIFT_REG + input_global_size_1);
assign local_bb7_add85_valid_out = local_bb7_add85_inputs_ready;
assign local_bb7_add85_stall_local = local_bb7_add85_stall_in;
assign merge_node_stall_in_0 = (|local_bb7_add85_stall_local);
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[0] = local_lvm_cmp56_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[1] = local_lvm_var__NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[33:2] = local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[65:34] = local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[66] = local_lvm_cmp1430_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[67] = local_lvm_var__u54_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[68] = local_lvm__phi_decision_xor118_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[100:69] = local_lvm_ld__NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[101] = local_lvm_cmp1824_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[102] = local_lvm__phi_decision_xor119_or_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[134:103] = local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[166:135] = local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[198:167] = local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[230:199] = local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[262:231] = local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[294:263] = local_lvm_channelCounter_058_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[358:295] = (local_lvm_arrayidx67_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFFFC);
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[390:359] = local_lvm_mul70_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[422:391] = local_lvm_mul46_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[454:423] = local_lvm_input_global_id_1_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[486:455] = local_lvm_input_global_id_2_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[518:487] = local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rcnode_1to3_rc1_cmp56_0_valid_out_0_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp56_0_stall_in_0_NO_SHIFT_REG;
 logic [518:0] rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp56_0_valid_out_1_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp56_0_stall_in_1_NO_SHIFT_REG;
 logic [518:0] rcnode_1to3_rc1_cmp56_1_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp56_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [518:0] rcnode_1to3_rc1_cmp56_0_reg_3_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp56_0_valid_out_0_reg_3_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp56_0_stall_in_0_reg_3_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp56_0_stall_out_reg_3_IP_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp56_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rcnode_1to3_rc1_cmp56_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to3_rc1_cmp56_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to3_rc1_cmp56_0_stall_in_0_reg_3_NO_SHIFT_REG),
	.valid_out(rcnode_1to3_rc1_cmp56_0_valid_out_0_reg_3_NO_SHIFT_REG),
	.stall_out(rcnode_1to3_rc1_cmp56_0_stall_out_reg_3_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to3_rc1_cmp56_0_reg_1),
	.data_out(rcnode_1to3_rc1_cmp56_0_reg_3_NO_SHIFT_REG)
);

defparam rcnode_1to3_rc1_cmp56_0_reg_3_fifo.DEPTH = 3;
defparam rcnode_1to3_rc1_cmp56_0_reg_3_fifo.DATA_WIDTH = 519;
defparam rcnode_1to3_rc1_cmp56_0_reg_3_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to3_rc1_cmp56_0_reg_3_fifo.IMPL = "ll_reg";

assign rcnode_1to3_rc1_cmp56_0_reg_3_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_1_NO_SHIFT_REG;
assign rcnode_1to3_rc1_cmp56_0_stall_out_reg_3_NO_SHIFT_REG = (~(rcnode_1to3_rc1_cmp56_0_reg_3_inputs_ready_NO_SHIFT_REG) | rcnode_1to3_rc1_cmp56_0_stall_out_reg_3_IP_NO_SHIFT_REG);
assign merge_node_stall_in_1 = rcnode_1to3_rc1_cmp56_0_stall_out_reg_3_NO_SHIFT_REG;
assign rcnode_1to3_rc1_cmp56_0_stall_in_0_reg_3_NO_SHIFT_REG = (rcnode_1to3_rc1_cmp56_0_stall_in_0_NO_SHIFT_REG | rcnode_1to3_rc1_cmp56_0_stall_in_1_NO_SHIFT_REG);
assign rcnode_1to3_rc1_cmp56_0_valid_out_0_NO_SHIFT_REG = rcnode_1to3_rc1_cmp56_0_valid_out_0_reg_3_NO_SHIFT_REG;
assign rcnode_1to3_rc1_cmp56_0_valid_out_1_NO_SHIFT_REG = rcnode_1to3_rc1_cmp56_0_valid_out_0_reg_3_NO_SHIFT_REG;
assign rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG = rcnode_1to3_rc1_cmp56_0_reg_3_NO_SHIFT_REG;
assign rcnode_1to3_rc1_cmp56_1_NO_SHIFT_REG = rcnode_1to3_rc1_cmp56_0_reg_3_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb7_add85_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_bb7_add85_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb7_add85_0_NO_SHIFT_REG;
 logic rnode_1to2_bb7_add85_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_bb7_add85_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb7_add85_1_NO_SHIFT_REG;
 logic rnode_1to2_bb7_add85_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb7_add85_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb7_add85_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb7_add85_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb7_add85_0_stall_out_reg_2_NO_SHIFT_REG;
 reg rnode_1to2_bb7_add85_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to2_bb7_add85_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb7_add85_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb7_add85_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb7_add85_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb7_add85_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb7_add85_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb7_add85),
	.data_out(rnode_1to2_bb7_add85_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb7_add85_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb7_add85_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb7_add85_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb7_add85_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_bb7_add85_0_reg_2_inputs_ready_NO_SHIFT_REG = local_bb7_add85_valid_out;
assign local_bb7_add85_stall_in = rnode_1to2_bb7_add85_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb7_add85_0_stall_in_0_reg_2_NO_SHIFT_REG = ((rnode_1to2_bb7_add85_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to2_bb7_add85_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to2_bb7_add85_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to2_bb7_add85_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to2_bb7_add85_0_valid_out_0_NO_SHIFT_REG = (rnode_1to2_bb7_add85_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_bb7_add85_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_bb7_add85_0_valid_out_1_NO_SHIFT_REG = (rnode_1to2_bb7_add85_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_bb7_add85_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to2_bb7_add85_0_NO_SHIFT_REG = rnode_1to2_bb7_add85_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb7_add85_1_NO_SHIFT_REG = rnode_1to2_bb7_add85_0_reg_2_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to2_bb7_add85_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_bb7_add85_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to2_bb7_add85_0_consumed_0_NO_SHIFT_REG <= (rnode_1to2_bb7_add85_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_bb7_add85_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to2_bb7_add85_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to2_bb7_add85_0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_bb7_add85_0_consumed_1_NO_SHIFT_REG <= (rnode_1to2_bb7_add85_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_bb7_add85_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to2_bb7_add85_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to2_bb7_add85_0_stall_in_0_reg_2_NO_SHIFT_REG);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb7_cmp5_valid_out;
wire local_bb7_cmp5_stall_in;
wire local_bb7_cmp5_inputs_ready;
wire local_bb7_cmp5_stall_local;
wire local_bb7_cmp5;

assign local_bb7_cmp5_inputs_ready = rnode_1to2_bb7_add85_0_valid_out_0_NO_SHIFT_REG;
assign local_bb7_cmp5 = ($signed(rnode_1to2_bb7_add85_0_NO_SHIFT_REG) < $signed(input_wii_memcoalesce_param_extrValue_1));
assign local_bb7_cmp5_valid_out = local_bb7_cmp5_inputs_ready;
assign local_bb7_cmp5_stall_local = local_bb7_cmp5_stall_in;
assign rnode_1to2_bb7_add85_0_stall_in_0_NO_SHIFT_REG = (|local_bb7_cmp5_stall_local);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb7_add85_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb7_add85_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb7_add85_0_NO_SHIFT_REG;
 logic rnode_2to3_bb7_add85_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb7_add85_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb7_add85_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb7_add85_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb7_add85_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb7_add85_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb7_add85_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb7_add85_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb7_add85_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb7_add85_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb7_add85_1_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb7_add85_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb7_add85_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb7_add85_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb7_add85_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb7_add85_0_reg_3_fifo.IMPL = "ll_reg";

assign rnode_2to3_bb7_add85_0_reg_3_inputs_ready_NO_SHIFT_REG = rnode_1to2_bb7_add85_0_valid_out_1_NO_SHIFT_REG;
assign rnode_1to2_bb7_add85_0_stall_in_1_NO_SHIFT_REG = rnode_2to3_bb7_add85_0_stall_out_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb7_add85_0_NO_SHIFT_REG = rnode_2to3_bb7_add85_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb7_add85_0_stall_in_reg_3_NO_SHIFT_REG = rnode_2to3_bb7_add85_0_stall_in_NO_SHIFT_REG;
assign rnode_2to3_bb7_add85_0_valid_out_NO_SHIFT_REG = rnode_2to3_bb7_add85_0_valid_out_reg_3_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb7_cmp5_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb7_cmp5_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to3_bb7_cmp5_0_NO_SHIFT_REG;
 logic rnode_2to3_bb7_cmp5_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to3_bb7_cmp5_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb7_cmp5_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb7_cmp5_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb7_cmp5_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb7_cmp5_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb7_cmp5_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb7_cmp5_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb7_cmp5_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb7_cmp5_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb7_cmp5),
	.data_out(rnode_2to3_bb7_cmp5_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb7_cmp5_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb7_cmp5_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_2to3_bb7_cmp5_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb7_cmp5_0_reg_3_fifo.IMPL = "ll_reg";

assign rnode_2to3_bb7_cmp5_0_reg_3_inputs_ready_NO_SHIFT_REG = local_bb7_cmp5_valid_out;
assign local_bb7_cmp5_stall_in = rnode_2to3_bb7_cmp5_0_stall_out_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb7_cmp5_0_NO_SHIFT_REG = rnode_2to3_bb7_cmp5_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb7_cmp5_0_stall_in_reg_3_NO_SHIFT_REG = rnode_2to3_bb7_cmp5_0_stall_in_NO_SHIFT_REG;
assign rnode_2to3_bb7_cmp5_0_valid_out_NO_SHIFT_REG = rnode_2to3_bb7_cmp5_0_valid_out_reg_3_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb7_var__valid_out;
wire local_bb7_var__stall_in;
wire local_bb7_var__inputs_ready;
wire local_bb7_var__stall_local;
wire local_bb7_var_;

assign local_bb7_var__inputs_ready = (rnode_2to3_bb7_cmp5_0_valid_out_NO_SHIFT_REG & rcnode_1to3_rc1_cmp56_0_valid_out_1_NO_SHIFT_REG);
assign local_bb7_var_ = (rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[1] & rnode_2to3_bb7_cmp5_0_NO_SHIFT_REG);
assign local_bb7_var__valid_out = local_bb7_var__inputs_ready;
assign local_bb7_var__stall_local = local_bb7_var__stall_in;
assign rnode_2to3_bb7_cmp5_0_stall_in_NO_SHIFT_REG = (local_bb7_var__stall_local | ~(local_bb7_var__inputs_ready));
assign rcnode_1to3_rc1_cmp56_0_stall_in_1_NO_SHIFT_REG = (local_bb7_var__stall_local | ~(local_bb7_var__inputs_ready));

// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_0_NO_SHIFT_REG;
 reg branch_compare_result_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg lvb_cmp56_0_reg_NO_SHIFT_REG;
 reg lvb_var__0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_3_0_reg_NO_SHIFT_REG;
 reg lvb_cmp1430_0_reg_NO_SHIFT_REG;
 reg lvb_var__u54_0_reg_NO_SHIFT_REG;
 reg lvb__phi_decision_xor118_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_ld__0_reg_NO_SHIFT_REG;
 reg lvb_cmp1824_0_reg_NO_SHIFT_REG;
 reg lvb__phi_decision_xor119_or_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_6148_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_1149_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_3150_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_4_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_channelCounter_058_0_reg_NO_SHIFT_REG;
 reg [63:0] lvb_arrayidx67_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul70_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_mul46_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb7_add85_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb7_var__valid_out & rnode_2to3_bb7_add85_0_valid_out_NO_SHIFT_REG & rcnode_1to3_rc1_cmp56_0_valid_out_0_NO_SHIFT_REG);
assign branch_var__output_regs_ready = (~(branch_node_valid_out_0_NO_SHIFT_REG) | (((branch_compare_result_NO_SHIFT_REG != 1'b1) & ~(stall_in_1)) | (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & ~(stall_in_0))));
assign local_bb7_var__stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_2to3_bb7_add85_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_1to3_rc1_cmp56_0_stall_in_0_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_cmp56_0 = lvb_cmp56_0_reg_NO_SHIFT_REG;
assign lvb_cmp56_1 = lvb_cmp56_0_reg_NO_SHIFT_REG;
assign lvb_var__0 = lvb_var__0_reg_NO_SHIFT_REG;
assign lvb_var__1 = lvb_var__0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6_0 = lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6_1 = lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_3_0 = lvb_memcoalesce_param_extrValue_3_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_3_1 = lvb_memcoalesce_param_extrValue_3_0_reg_NO_SHIFT_REG;
assign lvb_cmp1430_0 = lvb_cmp1430_0_reg_NO_SHIFT_REG;
assign lvb_cmp1430_1 = lvb_cmp1430_0_reg_NO_SHIFT_REG;
assign lvb_var__u54_0 = lvb_var__u54_0_reg_NO_SHIFT_REG;
assign lvb_var__u54_1 = lvb_var__u54_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor118_0 = lvb__phi_decision_xor118_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor118_1 = lvb__phi_decision_xor118_0_reg_NO_SHIFT_REG;
assign lvb_ld__0 = lvb_ld__0_reg_NO_SHIFT_REG;
assign lvb_ld__1 = lvb_ld__0_reg_NO_SHIFT_REG;
assign lvb_cmp1824_0 = lvb_cmp1824_0_reg_NO_SHIFT_REG;
assign lvb_cmp1824_1 = lvb_cmp1824_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor119_or_0 = lvb__phi_decision_xor119_or_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor119_or_1 = lvb__phi_decision_xor119_or_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_5_0 = lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_5_1 = lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6148_0 = lvb_memcoalesce_param_extrValue_6148_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6148_1 = lvb_memcoalesce_param_extrValue_6148_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_1149_0 = lvb_memcoalesce_param_extrValue_1149_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_1149_1 = lvb_memcoalesce_param_extrValue_1149_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_3150_0 = lvb_memcoalesce_param_extrValue_3150_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_3150_1 = lvb_memcoalesce_param_extrValue_3150_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_4_0 = lvb_memcoalesce_param_extrValue_4_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_4_1 = lvb_memcoalesce_param_extrValue_4_0_reg_NO_SHIFT_REG;
assign lvb_channelCounter_058_0 = lvb_channelCounter_058_0_reg_NO_SHIFT_REG;
assign lvb_channelCounter_058_1 = lvb_channelCounter_058_0_reg_NO_SHIFT_REG;
assign lvb_arrayidx67_0 = lvb_arrayidx67_0_reg_NO_SHIFT_REG;
assign lvb_arrayidx67_1 = lvb_arrayidx67_0_reg_NO_SHIFT_REG;
assign lvb_mul70_0 = lvb_mul70_0_reg_NO_SHIFT_REG;
assign lvb_mul70_1 = lvb_mul70_0_reg_NO_SHIFT_REG;
assign lvb_mul46_0 = lvb_mul46_0_reg_NO_SHIFT_REG;
assign lvb_mul46_1 = lvb_mul46_0_reg_NO_SHIFT_REG;
assign lvb_bb7_add85_0 = lvb_bb7_add85_0_reg_NO_SHIFT_REG;
assign lvb_bb7_add85_1 = lvb_bb7_add85_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1_0 = lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1_1 = lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2_0 = lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2_1 = lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_0 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_1 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign valid_out_0 = (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG);
assign valid_out_1 = ((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG);
assign combined_branch_stall_in_signal = ((((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_1) | ((~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_0));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		lvb_cmp56_0_reg_NO_SHIFT_REG <= 'x;
		lvb_var__0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_3_0_reg_NO_SHIFT_REG <= 'x;
		lvb_cmp1430_0_reg_NO_SHIFT_REG <= 'x;
		lvb_var__u54_0_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision_xor118_0_reg_NO_SHIFT_REG <= 'x;
		lvb_ld__0_reg_NO_SHIFT_REG <= 'x;
		lvb_cmp1824_0_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision_xor119_or_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_6148_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_1149_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_3150_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_4_0_reg_NO_SHIFT_REG <= 'x;
		lvb_channelCounter_058_0_reg_NO_SHIFT_REG <= 'x;
		lvb_arrayidx67_0_reg_NO_SHIFT_REG <= 'x;
		lvb_mul70_0_reg_NO_SHIFT_REG <= 'x;
		lvb_mul46_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb7_add85_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= 'x;
		branch_compare_result_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_0_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_cmp56_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[0];
			lvb_var__0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[1];
			lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[33:2];
			lvb_memcoalesce_param_extrValue_3_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[65:34];
			lvb_cmp1430_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[66];
			lvb_var__u54_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[67];
			lvb__phi_decision_xor118_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[68];
			lvb_ld__0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[100:69];
			lvb_cmp1824_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[101];
			lvb__phi_decision_xor119_or_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[102];
			lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[134:103];
			lvb_memcoalesce_param_extrValue_6148_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[166:135];
			lvb_memcoalesce_param_extrValue_1149_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[198:167];
			lvb_memcoalesce_param_extrValue_3150_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[230:199];
			lvb_memcoalesce_param_extrValue_4_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[262:231];
			lvb_channelCounter_058_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[294:263];
			lvb_arrayidx67_0_reg_NO_SHIFT_REG <= (rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[358:295] & 64'hFFFFFFFFFFFFFFFC);
			lvb_mul70_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[390:359];
			lvb_mul46_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[422:391];
			lvb_bb7_add85_0_reg_NO_SHIFT_REG <= rnode_2to3_bb7_add85_0_NO_SHIFT_REG;
			lvb_input_global_id_1_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[454:423];
			lvb_input_global_id_2_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[486:455];
			lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[518:487];
			branch_compare_result_NO_SHIFT_REG <= local_bb7_var_;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module convLayer_basic_block_8
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_global_size_0,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_0,
		input [31:0] 		input_wii_memcoalesce_param_extrValue_1,
		input 		valid_in,
		output 		stall_out,
		input 		input_cmp56,
		input 		input_var_,
		input [31:0] 		input_memcoalesce_param_extrValue_6,
		input [31:0] 		input_memcoalesce_param_extrValue_3,
		input 		input_cmp1430,
		input 		input_var__u55,
		input 		input__phi_decision_xor118,
		input [31:0] 		input_ld_,
		input 		input_cmp1824,
		input 		input__phi_decision_xor119_or,
		input [31:0] 		input_memcoalesce_param_extrValue_5,
		input [31:0] 		input_memcoalesce_param_extrValue_6148,
		input [31:0] 		input_memcoalesce_param_extrValue_1149,
		input [31:0] 		input_memcoalesce_param_extrValue_3150,
		input [31:0] 		input_memcoalesce_param_extrValue_4,
		input [31:0] 		input_channelCounter_058,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out_0,
		input 		stall_in_0,
		output 		lvb_cmp56_0,
		output 		lvb_var__0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_3_0,
		output 		lvb_cmp1430_0,
		output 		lvb_var__u55_0,
		output 		lvb__phi_decision_xor118_0,
		output [31:0] 		lvb_ld__0,
		output 		lvb_cmp1824_0,
		output 		lvb__phi_decision_xor119_or_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_5_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6148_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_1149_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_3150_0,
		output [31:0] 		lvb_memcoalesce_param_extrValue_4_0,
		output [31:0] 		lvb_bb8_add90_0,
		output [31:0] 		lvb_input_global_id_1_0,
		output [31:0] 		lvb_input_global_id_2_0,
		output [31:0] 		lvb_input_acl_hw_wg_id_0,
		output 		valid_out_1,
		input 		stall_in_1,
		output 		lvb_cmp56_1,
		output 		lvb_var__1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_3_1,
		output 		lvb_cmp1430_1,
		output 		lvb_var__u55_1,
		output 		lvb__phi_decision_xor118_1,
		output [31:0] 		lvb_ld__1,
		output 		lvb_cmp1824_1,
		output 		lvb__phi_decision_xor119_or_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_5_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_6148_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_1149_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_3150_1,
		output [31:0] 		lvb_memcoalesce_param_extrValue_4_1,
		output [31:0] 		lvb_bb8_add90_1,
		output [31:0] 		lvb_input_global_id_1_1,
		output [31:0] 		lvb_input_global_id_2_1,
		output [31:0] 		lvb_input_acl_hw_wg_id_1,
		input [31:0] 		workgroup_size,
		input 		start
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((valid_out_0 & valid_out_1) & ~((stall_in_0 | stall_in_1)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg input_cmp56_staging_reg_NO_SHIFT_REG;
 reg input_var__staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_3_staging_reg_NO_SHIFT_REG;
 reg input_cmp1430_staging_reg_NO_SHIFT_REG;
 reg input_var__u55_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor118_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_ld__staging_reg_NO_SHIFT_REG;
 reg input_cmp1824_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision_xor119_or_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_5_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_6148_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_1149_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_3150_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_memcoalesce_param_extrValue_4_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_channelCounter_058_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg local_lvm_cmp56_NO_SHIFT_REG;
 reg local_lvm_var__NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG;
 reg local_lvm_cmp1430_NO_SHIFT_REG;
 reg local_lvm_var__u55_NO_SHIFT_REG;
 reg local_lvm__phi_decision_xor118_NO_SHIFT_REG;
 reg [31:0] local_lvm_ld__NO_SHIFT_REG;
 reg local_lvm_cmp1824_NO_SHIFT_REG;
 reg local_lvm__phi_decision_xor119_or_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG;
 reg [31:0] local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG;
 reg [31:0] local_lvm_channelCounter_058_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_cmp56_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_3_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1430_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u55_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor118_staging_reg_NO_SHIFT_REG <= 'x;
		input_ld__staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp1824_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision_xor119_or_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_5_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_6148_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_1149_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_3150_staging_reg_NO_SHIFT_REG <= 'x;
		input_memcoalesce_param_extrValue_4_staging_reg_NO_SHIFT_REG <= 'x;
		input_channelCounter_058_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_cmp56_staging_reg_NO_SHIFT_REG <= input_cmp56;
				input_var__staging_reg_NO_SHIFT_REG <= input_var_;
				input_memcoalesce_param_extrValue_6_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6;
				input_memcoalesce_param_extrValue_3_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3;
				input_cmp1430_staging_reg_NO_SHIFT_REG <= input_cmp1430;
				input_var__u55_staging_reg_NO_SHIFT_REG <= input_var__u55;
				input__phi_decision_xor118_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor118;
				input_ld__staging_reg_NO_SHIFT_REG <= input_ld_;
				input_cmp1824_staging_reg_NO_SHIFT_REG <= input_cmp1824;
				input__phi_decision_xor119_or_staging_reg_NO_SHIFT_REG <= input__phi_decision_xor119_or;
				input_memcoalesce_param_extrValue_5_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5;
				input_memcoalesce_param_extrValue_6148_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148;
				input_memcoalesce_param_extrValue_1149_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149;
				input_memcoalesce_param_extrValue_3150_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150;
				input_memcoalesce_param_extrValue_4_staging_reg_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4;
				input_channelCounter_058_staging_reg_NO_SHIFT_REG <= input_channelCounter_058;
				input_global_id_1_staging_reg_NO_SHIFT_REG <= input_global_id_1;
				input_global_id_2_staging_reg_NO_SHIFT_REG <= input_global_id_2;
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_cmp56_NO_SHIFT_REG <= input_cmp56_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1430_NO_SHIFT_REG <= input_cmp1430_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u55_NO_SHIFT_REG <= input_var__u55_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor118_NO_SHIFT_REG <= input__phi_decision_xor118_staging_reg_NO_SHIFT_REG;
					local_lvm_ld__NO_SHIFT_REG <= input_ld__staging_reg_NO_SHIFT_REG;
					local_lvm_cmp1824_NO_SHIFT_REG <= input_cmp1824_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision_xor119_or_NO_SHIFT_REG <= input__phi_decision_xor119_or_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150_staging_reg_NO_SHIFT_REG;
					local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4_staging_reg_NO_SHIFT_REG;
					local_lvm_channelCounter_058_NO_SHIFT_REG <= input_channelCounter_058_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_cmp56_NO_SHIFT_REG <= input_cmp56;
					local_lvm_var__NO_SHIFT_REG <= input_var_;
					local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6;
					local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3;
					local_lvm_cmp1430_NO_SHIFT_REG <= input_cmp1430;
					local_lvm_var__u55_NO_SHIFT_REG <= input_var__u55;
					local_lvm__phi_decision_xor118_NO_SHIFT_REG <= input__phi_decision_xor118;
					local_lvm_ld__NO_SHIFT_REG <= input_ld_;
					local_lvm_cmp1824_NO_SHIFT_REG <= input_cmp1824;
					local_lvm__phi_decision_xor119_or_NO_SHIFT_REG <= input__phi_decision_xor119_or;
					local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_5;
					local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_6148;
					local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_1149;
					local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_3150;
					local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG <= input_memcoalesce_param_extrValue_4;
					local_lvm_channelCounter_058_NO_SHIFT_REG <= input_channelCounter_058;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb8_add90_valid_out;
wire local_bb8_add90_stall_in;
wire local_bb8_add90_inputs_ready;
wire local_bb8_add90_stall_local;
wire [31:0] local_bb8_add90;
wire [358:0] rci_rcnode_1to3_rc1_cmp56_0_reg_1;

assign local_bb8_add90_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb8_add90 = (local_lvm_channelCounter_058_NO_SHIFT_REG + input_global_size_0);
assign local_bb8_add90_valid_out = local_bb8_add90_inputs_ready;
assign local_bb8_add90_stall_local = local_bb8_add90_stall_in;
assign merge_node_stall_in_0 = (|local_bb8_add90_stall_local);
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[0] = local_lvm_cmp56_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[1] = local_lvm_var__NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[33:2] = local_lvm_memcoalesce_param_extrValue_6_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[65:34] = local_lvm_memcoalesce_param_extrValue_3_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[66] = local_lvm_cmp1430_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[67] = local_lvm_var__u55_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[68] = local_lvm__phi_decision_xor118_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[100:69] = local_lvm_ld__NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[101] = local_lvm_cmp1824_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[102] = local_lvm__phi_decision_xor119_or_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[134:103] = local_lvm_memcoalesce_param_extrValue_5_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[166:135] = local_lvm_memcoalesce_param_extrValue_6148_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[198:167] = local_lvm_memcoalesce_param_extrValue_1149_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[230:199] = local_lvm_memcoalesce_param_extrValue_3150_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[262:231] = local_lvm_memcoalesce_param_extrValue_4_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[294:263] = local_lvm_input_global_id_1_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[326:295] = local_lvm_input_global_id_2_NO_SHIFT_REG;
assign rci_rcnode_1to3_rc1_cmp56_0_reg_1[358:327] = local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rcnode_1to3_rc1_cmp56_0_valid_out_0_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp56_0_stall_in_0_NO_SHIFT_REG;
 logic [358:0] rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp56_0_valid_out_1_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp56_0_stall_in_1_NO_SHIFT_REG;
 logic [358:0] rcnode_1to3_rc1_cmp56_1_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp56_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [358:0] rcnode_1to3_rc1_cmp56_0_reg_3_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp56_0_valid_out_0_reg_3_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp56_0_stall_in_0_reg_3_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp56_0_stall_out_reg_3_IP_NO_SHIFT_REG;
 logic rcnode_1to3_rc1_cmp56_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rcnode_1to3_rc1_cmp56_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to3_rc1_cmp56_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to3_rc1_cmp56_0_stall_in_0_reg_3_NO_SHIFT_REG),
	.valid_out(rcnode_1to3_rc1_cmp56_0_valid_out_0_reg_3_NO_SHIFT_REG),
	.stall_out(rcnode_1to3_rc1_cmp56_0_stall_out_reg_3_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to3_rc1_cmp56_0_reg_1),
	.data_out(rcnode_1to3_rc1_cmp56_0_reg_3_NO_SHIFT_REG)
);

defparam rcnode_1to3_rc1_cmp56_0_reg_3_fifo.DEPTH = 3;
defparam rcnode_1to3_rc1_cmp56_0_reg_3_fifo.DATA_WIDTH = 359;
defparam rcnode_1to3_rc1_cmp56_0_reg_3_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to3_rc1_cmp56_0_reg_3_fifo.IMPL = "ll_reg";

assign rcnode_1to3_rc1_cmp56_0_reg_3_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_1_NO_SHIFT_REG;
assign rcnode_1to3_rc1_cmp56_0_stall_out_reg_3_NO_SHIFT_REG = (~(rcnode_1to3_rc1_cmp56_0_reg_3_inputs_ready_NO_SHIFT_REG) | rcnode_1to3_rc1_cmp56_0_stall_out_reg_3_IP_NO_SHIFT_REG);
assign merge_node_stall_in_1 = rcnode_1to3_rc1_cmp56_0_stall_out_reg_3_NO_SHIFT_REG;
assign rcnode_1to3_rc1_cmp56_0_stall_in_0_reg_3_NO_SHIFT_REG = (rcnode_1to3_rc1_cmp56_0_stall_in_0_NO_SHIFT_REG | rcnode_1to3_rc1_cmp56_0_stall_in_1_NO_SHIFT_REG);
assign rcnode_1to3_rc1_cmp56_0_valid_out_0_NO_SHIFT_REG = rcnode_1to3_rc1_cmp56_0_valid_out_0_reg_3_NO_SHIFT_REG;
assign rcnode_1to3_rc1_cmp56_0_valid_out_1_NO_SHIFT_REG = rcnode_1to3_rc1_cmp56_0_valid_out_0_reg_3_NO_SHIFT_REG;
assign rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG = rcnode_1to3_rc1_cmp56_0_reg_3_NO_SHIFT_REG;
assign rcnode_1to3_rc1_cmp56_1_NO_SHIFT_REG = rcnode_1to3_rc1_cmp56_0_reg_3_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb8_add90_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_bb8_add90_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb8_add90_0_NO_SHIFT_REG;
 logic rnode_1to2_bb8_add90_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_bb8_add90_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb8_add90_1_NO_SHIFT_REG;
 logic rnode_1to2_bb8_add90_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb8_add90_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb8_add90_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb8_add90_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb8_add90_0_stall_out_reg_2_NO_SHIFT_REG;
 reg rnode_1to2_bb8_add90_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to2_bb8_add90_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb8_add90_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb8_add90_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb8_add90_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb8_add90_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb8_add90_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb8_add90),
	.data_out(rnode_1to2_bb8_add90_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb8_add90_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb8_add90_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb8_add90_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb8_add90_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_bb8_add90_0_reg_2_inputs_ready_NO_SHIFT_REG = local_bb8_add90_valid_out;
assign local_bb8_add90_stall_in = rnode_1to2_bb8_add90_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb8_add90_0_stall_in_0_reg_2_NO_SHIFT_REG = ((rnode_1to2_bb8_add90_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to2_bb8_add90_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to2_bb8_add90_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to2_bb8_add90_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to2_bb8_add90_0_valid_out_0_NO_SHIFT_REG = (rnode_1to2_bb8_add90_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_bb8_add90_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_bb8_add90_0_valid_out_1_NO_SHIFT_REG = (rnode_1to2_bb8_add90_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_bb8_add90_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to2_bb8_add90_0_NO_SHIFT_REG = rnode_1to2_bb8_add90_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb8_add90_1_NO_SHIFT_REG = rnode_1to2_bb8_add90_0_reg_2_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to2_bb8_add90_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_bb8_add90_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to2_bb8_add90_0_consumed_0_NO_SHIFT_REG <= (rnode_1to2_bb8_add90_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_bb8_add90_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to2_bb8_add90_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to2_bb8_add90_0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_bb8_add90_0_consumed_1_NO_SHIFT_REG <= (rnode_1to2_bb8_add90_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_bb8_add90_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to2_bb8_add90_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to2_bb8_add90_0_stall_in_0_reg_2_NO_SHIFT_REG);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb8_cmp_valid_out;
wire local_bb8_cmp_stall_in;
wire local_bb8_cmp_inputs_ready;
wire local_bb8_cmp_stall_local;
wire local_bb8_cmp;

assign local_bb8_cmp_inputs_ready = rnode_1to2_bb8_add90_0_valid_out_0_NO_SHIFT_REG;
assign local_bb8_cmp = ($signed(rnode_1to2_bb8_add90_0_NO_SHIFT_REG) < $signed(input_wii_memcoalesce_param_extrValue_0));
assign local_bb8_cmp_valid_out = local_bb8_cmp_inputs_ready;
assign local_bb8_cmp_stall_local = local_bb8_cmp_stall_in;
assign rnode_1to2_bb8_add90_0_stall_in_0_NO_SHIFT_REG = (|local_bb8_cmp_stall_local);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb8_add90_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb8_add90_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb8_add90_0_NO_SHIFT_REG;
 logic rnode_2to3_bb8_add90_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb8_add90_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb8_add90_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb8_add90_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb8_add90_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb8_add90_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb8_add90_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb8_add90_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb8_add90_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb8_add90_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb8_add90_1_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb8_add90_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb8_add90_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb8_add90_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb8_add90_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb8_add90_0_reg_3_fifo.IMPL = "ll_reg";

assign rnode_2to3_bb8_add90_0_reg_3_inputs_ready_NO_SHIFT_REG = rnode_1to2_bb8_add90_0_valid_out_1_NO_SHIFT_REG;
assign rnode_1to2_bb8_add90_0_stall_in_1_NO_SHIFT_REG = rnode_2to3_bb8_add90_0_stall_out_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb8_add90_0_NO_SHIFT_REG = rnode_2to3_bb8_add90_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb8_add90_0_stall_in_reg_3_NO_SHIFT_REG = rnode_2to3_bb8_add90_0_stall_in_NO_SHIFT_REG;
assign rnode_2to3_bb8_add90_0_valid_out_NO_SHIFT_REG = rnode_2to3_bb8_add90_0_valid_out_reg_3_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb8_cmp_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb8_cmp_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to3_bb8_cmp_0_NO_SHIFT_REG;
 logic rnode_2to3_bb8_cmp_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to3_bb8_cmp_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb8_cmp_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb8_cmp_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb8_cmp_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb8_cmp_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb8_cmp_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb8_cmp_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb8_cmp_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb8_cmp_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb8_cmp),
	.data_out(rnode_2to3_bb8_cmp_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb8_cmp_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb8_cmp_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_2to3_bb8_cmp_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb8_cmp_0_reg_3_fifo.IMPL = "ll_reg";

assign rnode_2to3_bb8_cmp_0_reg_3_inputs_ready_NO_SHIFT_REG = local_bb8_cmp_valid_out;
assign local_bb8_cmp_stall_in = rnode_2to3_bb8_cmp_0_stall_out_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb8_cmp_0_NO_SHIFT_REG = rnode_2to3_bb8_cmp_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb8_cmp_0_stall_in_reg_3_NO_SHIFT_REG = rnode_2to3_bb8_cmp_0_stall_in_NO_SHIFT_REG;
assign rnode_2to3_bb8_cmp_0_valid_out_NO_SHIFT_REG = rnode_2to3_bb8_cmp_0_valid_out_reg_3_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb8_var__valid_out;
wire local_bb8_var__stall_in;
wire local_bb8_var__inputs_ready;
wire local_bb8_var__stall_local;
wire local_bb8_var_;

assign local_bb8_var__inputs_ready = (rnode_2to3_bb8_cmp_0_valid_out_NO_SHIFT_REG & rcnode_1to3_rc1_cmp56_0_valid_out_0_NO_SHIFT_REG);
assign local_bb8_var_ = (rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[0] & rnode_2to3_bb8_cmp_0_NO_SHIFT_REG);
assign local_bb8_var__valid_out = local_bb8_var__inputs_ready;
assign local_bb8_var__stall_local = local_bb8_var__stall_in;
assign rnode_2to3_bb8_cmp_0_stall_in_NO_SHIFT_REG = (local_bb8_var__stall_local | ~(local_bb8_var__inputs_ready));
assign rcnode_1to3_rc1_cmp56_0_stall_in_0_NO_SHIFT_REG = (local_bb8_var__stall_local | ~(local_bb8_var__inputs_ready));

// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_0_NO_SHIFT_REG;
 reg branch_compare_result_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg lvb_cmp56_0_reg_NO_SHIFT_REG;
 reg lvb_var__0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_3_0_reg_NO_SHIFT_REG;
 reg lvb_cmp1430_0_reg_NO_SHIFT_REG;
 reg lvb_var__u55_0_reg_NO_SHIFT_REG;
 reg lvb__phi_decision_xor118_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_ld__0_reg_NO_SHIFT_REG;
 reg lvb_cmp1824_0_reg_NO_SHIFT_REG;
 reg lvb__phi_decision_xor119_or_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_6148_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_1149_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_3150_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_memcoalesce_param_extrValue_4_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb8_add90_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb8_var__valid_out & rnode_2to3_bb8_add90_0_valid_out_NO_SHIFT_REG & rcnode_1to3_rc1_cmp56_0_valid_out_1_NO_SHIFT_REG);
assign branch_var__output_regs_ready = (~(branch_node_valid_out_0_NO_SHIFT_REG) | (((branch_compare_result_NO_SHIFT_REG != 1'b1) & ~(stall_in_1)) | (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & ~(stall_in_0))));
assign local_bb8_var__stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_2to3_bb8_add90_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_1to3_rc1_cmp56_0_stall_in_1_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_cmp56_0 = lvb_cmp56_0_reg_NO_SHIFT_REG;
assign lvb_cmp56_1 = lvb_cmp56_0_reg_NO_SHIFT_REG;
assign lvb_var__0 = lvb_var__0_reg_NO_SHIFT_REG;
assign lvb_var__1 = lvb_var__0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6_0 = lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6_1 = lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_3_0 = lvb_memcoalesce_param_extrValue_3_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_3_1 = lvb_memcoalesce_param_extrValue_3_0_reg_NO_SHIFT_REG;
assign lvb_cmp1430_0 = lvb_cmp1430_0_reg_NO_SHIFT_REG;
assign lvb_cmp1430_1 = lvb_cmp1430_0_reg_NO_SHIFT_REG;
assign lvb_var__u55_0 = lvb_var__u55_0_reg_NO_SHIFT_REG;
assign lvb_var__u55_1 = lvb_var__u55_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor118_0 = lvb__phi_decision_xor118_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor118_1 = lvb__phi_decision_xor118_0_reg_NO_SHIFT_REG;
assign lvb_ld__0 = lvb_ld__0_reg_NO_SHIFT_REG;
assign lvb_ld__1 = lvb_ld__0_reg_NO_SHIFT_REG;
assign lvb_cmp1824_0 = lvb_cmp1824_0_reg_NO_SHIFT_REG;
assign lvb_cmp1824_1 = lvb_cmp1824_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor119_or_0 = lvb__phi_decision_xor119_or_0_reg_NO_SHIFT_REG;
assign lvb__phi_decision_xor119_or_1 = lvb__phi_decision_xor119_or_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_5_0 = lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_5_1 = lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6148_0 = lvb_memcoalesce_param_extrValue_6148_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_6148_1 = lvb_memcoalesce_param_extrValue_6148_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_1149_0 = lvb_memcoalesce_param_extrValue_1149_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_1149_1 = lvb_memcoalesce_param_extrValue_1149_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_3150_0 = lvb_memcoalesce_param_extrValue_3150_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_3150_1 = lvb_memcoalesce_param_extrValue_3150_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_4_0 = lvb_memcoalesce_param_extrValue_4_0_reg_NO_SHIFT_REG;
assign lvb_memcoalesce_param_extrValue_4_1 = lvb_memcoalesce_param_extrValue_4_0_reg_NO_SHIFT_REG;
assign lvb_bb8_add90_0 = lvb_bb8_add90_0_reg_NO_SHIFT_REG;
assign lvb_bb8_add90_1 = lvb_bb8_add90_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1_0 = lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1_1 = lvb_input_global_id_1_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2_0 = lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2_1 = lvb_input_global_id_2_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_0 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_1 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign valid_out_0 = (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG);
assign valid_out_1 = ((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG);
assign combined_branch_stall_in_signal = ((((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_1) | ((~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_0));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		lvb_cmp56_0_reg_NO_SHIFT_REG <= 'x;
		lvb_var__0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_3_0_reg_NO_SHIFT_REG <= 'x;
		lvb_cmp1430_0_reg_NO_SHIFT_REG <= 'x;
		lvb_var__u55_0_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision_xor118_0_reg_NO_SHIFT_REG <= 'x;
		lvb_ld__0_reg_NO_SHIFT_REG <= 'x;
		lvb_cmp1824_0_reg_NO_SHIFT_REG <= 'x;
		lvb__phi_decision_xor119_or_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_6148_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_1149_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_3150_0_reg_NO_SHIFT_REG <= 'x;
		lvb_memcoalesce_param_extrValue_4_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb8_add90_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= 'x;
		branch_compare_result_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_0_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_cmp56_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[0];
			lvb_var__0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[1];
			lvb_memcoalesce_param_extrValue_6_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[33:2];
			lvb_memcoalesce_param_extrValue_3_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[65:34];
			lvb_cmp1430_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[66];
			lvb_var__u55_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[67];
			lvb__phi_decision_xor118_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[68];
			lvb_ld__0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[100:69];
			lvb_cmp1824_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[101];
			lvb__phi_decision_xor119_or_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[102];
			lvb_memcoalesce_param_extrValue_5_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[134:103];
			lvb_memcoalesce_param_extrValue_6148_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[166:135];
			lvb_memcoalesce_param_extrValue_1149_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[198:167];
			lvb_memcoalesce_param_extrValue_3150_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[230:199];
			lvb_memcoalesce_param_extrValue_4_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[262:231];
			lvb_bb8_add90_0_reg_NO_SHIFT_REG <= rnode_2to3_bb8_add90_0_NO_SHIFT_REG;
			lvb_input_global_id_1_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[294:263];
			lvb_input_global_id_2_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[326:295];
			lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= rcnode_1to3_rc1_cmp56_0_NO_SHIFT_REG[358:327];
			branch_compare_result_NO_SHIFT_REG <= local_bb8_var_;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module convLayer_basic_block_9
	(
		input 		clock,
		input 		resetn,
		input 		valid_in,
		output 		stall_out,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out,
		input 		stall_in,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		input 		start
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in;
 reg merge_node_valid_out_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = (|(merge_node_stall_in & merge_node_valid_out_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in))
			begin
				merge_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
wire branch_var__output_regs_ready;

assign branch_var__inputs_ready = merge_node_valid_out_NO_SHIFT_REG;
assign branch_var__output_regs_ready = ~(stall_in);
assign merge_node_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign valid_out = branch_var__inputs_ready;
assign lvb_input_acl_hw_wg_id = local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;

endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module convLayer_function
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_global_id_0,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		stall_out,
		input 		valid_in,
		output [31:0] 		output_0,
		output 		valid_out,
		input 		stall_in,
		input [31:0] 		workgroup_size,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_enable,
		input [511:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_readdata,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_readdatavalid,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_waitrequest,
		output [31:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_address,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_read,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_write,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_writeack,
		output [511:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_writedata,
		output [63:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_byteenable,
		output [4:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_burstcount,
		output 		avm_local_bb1_ld_memcoalesce_param_load_0143_enable,
		input [511:0] 		avm_local_bb1_ld_memcoalesce_param_load_0143_readdata,
		input 		avm_local_bb1_ld_memcoalesce_param_load_0143_readdatavalid,
		input 		avm_local_bb1_ld_memcoalesce_param_load_0143_waitrequest,
		output [31:0] 		avm_local_bb1_ld_memcoalesce_param_load_0143_address,
		output 		avm_local_bb1_ld_memcoalesce_param_load_0143_read,
		output 		avm_local_bb1_ld_memcoalesce_param_load_0143_write,
		input 		avm_local_bb1_ld_memcoalesce_param_load_0143_writeack,
		output [511:0] 		avm_local_bb1_ld_memcoalesce_param_load_0143_writedata,
		output [63:0] 		avm_local_bb1_ld_memcoalesce_param_load_0143_byteenable,
		output [4:0] 		avm_local_bb1_ld_memcoalesce_param_load_0143_burstcount,
		output 		avm_local_bb1_ld__enable,
		input [511:0] 		avm_local_bb1_ld__readdata,
		input 		avm_local_bb1_ld__readdatavalid,
		input 		avm_local_bb1_ld__waitrequest,
		output [31:0] 		avm_local_bb1_ld__address,
		output 		avm_local_bb1_ld__read,
		output 		avm_local_bb1_ld__write,
		input 		avm_local_bb1_ld__writeack,
		output [511:0] 		avm_local_bb1_ld__writedata,
		output [63:0] 		avm_local_bb1_ld__byteenable,
		output [4:0] 		avm_local_bb1_ld__burstcount,
		output 		avm_local_bb1_ld_memcoalesce_param_load_0147_enable,
		input [511:0] 		avm_local_bb1_ld_memcoalesce_param_load_0147_readdata,
		input 		avm_local_bb1_ld_memcoalesce_param_load_0147_readdatavalid,
		input 		avm_local_bb1_ld_memcoalesce_param_load_0147_waitrequest,
		output [31:0] 		avm_local_bb1_ld_memcoalesce_param_load_0147_address,
		output 		avm_local_bb1_ld_memcoalesce_param_load_0147_read,
		output 		avm_local_bb1_ld_memcoalesce_param_load_0147_write,
		input 		avm_local_bb1_ld_memcoalesce_param_load_0147_writeack,
		output [511:0] 		avm_local_bb1_ld_memcoalesce_param_load_0147_writedata,
		output [63:0] 		avm_local_bb1_ld_memcoalesce_param_load_0147_byteenable,
		output [4:0] 		avm_local_bb1_ld_memcoalesce_param_load_0147_burstcount,
		output 		avm_local_bb5_ld__enable,
		input [511:0] 		avm_local_bb5_ld__readdata,
		input 		avm_local_bb5_ld__readdatavalid,
		input 		avm_local_bb5_ld__waitrequest,
		output [31:0] 		avm_local_bb5_ld__address,
		output 		avm_local_bb5_ld__read,
		output 		avm_local_bb5_ld__write,
		input 		avm_local_bb5_ld__writeack,
		output [511:0] 		avm_local_bb5_ld__writedata,
		output [63:0] 		avm_local_bb5_ld__byteenable,
		output [4:0] 		avm_local_bb5_ld__burstcount,
		output 		avm_local_bb5_ld__u8_enable,
		input [511:0] 		avm_local_bb5_ld__u8_readdata,
		input 		avm_local_bb5_ld__u8_readdatavalid,
		input 		avm_local_bb5_ld__u8_waitrequest,
		output [31:0] 		avm_local_bb5_ld__u8_address,
		output 		avm_local_bb5_ld__u8_read,
		output 		avm_local_bb5_ld__u8_write,
		input 		avm_local_bb5_ld__u8_writeack,
		output [511:0] 		avm_local_bb5_ld__u8_writedata,
		output [63:0] 		avm_local_bb5_ld__u8_byteenable,
		output [4:0] 		avm_local_bb5_ld__u8_burstcount,
		output 		avm_local_bb6_ld__enable,
		input [511:0] 		avm_local_bb6_ld__readdata,
		input 		avm_local_bb6_ld__readdatavalid,
		input 		avm_local_bb6_ld__waitrequest,
		output [31:0] 		avm_local_bb6_ld__address,
		output 		avm_local_bb6_ld__read,
		output 		avm_local_bb6_ld__write,
		input 		avm_local_bb6_ld__writeack,
		output [511:0] 		avm_local_bb6_ld__writedata,
		output [63:0] 		avm_local_bb6_ld__byteenable,
		output [4:0] 		avm_local_bb6_ld__burstcount,
		output 		avm_local_bb6_st_c0_exe120_enable,
		input [511:0] 		avm_local_bb6_st_c0_exe120_readdata,
		input 		avm_local_bb6_st_c0_exe120_readdatavalid,
		input 		avm_local_bb6_st_c0_exe120_waitrequest,
		output [31:0] 		avm_local_bb6_st_c0_exe120_address,
		output 		avm_local_bb6_st_c0_exe120_read,
		output 		avm_local_bb6_st_c0_exe120_write,
		input 		avm_local_bb6_st_c0_exe120_writeack,
		output [511:0] 		avm_local_bb6_st_c0_exe120_writedata,
		output [63:0] 		avm_local_bb6_st_c0_exe120_byteenable,
		output [4:0] 		avm_local_bb6_st_c0_exe120_burstcount,
		input 		clock2x,
		input 		start,
		input [63:0] 		input_param,
		input [63:0] 		input_bias,
		input [63:0] 		input_inputFeatureMap,
		input [63:0] 		input_weight,
		input [31:0] 		input_global_size_2,
		input [63:0] 		input_outputFeatureMap,
		input [31:0] 		input_global_size_1,
		input [31:0] 		input_global_size_0,
		output reg 		has_a_write_pending,
		output reg 		has_a_lsu_active
	);


wire [31:0] cur_cycle;
wire bb_0_stall_out;
wire bb_0_valid_out;
wire [31:0] bb_0_lvb_bb0_memcoalesce_param_extrValue_0;
wire [31:0] bb_0_lvb_bb0_memcoalesce_param_extrValue_1;
wire [63:0] bb_0_lvb_bb0_kernelSize17;
wire [63:0] bb_0_lvb_bb0_memcoalesce_param_bitcast_0142;
wire [63:0] bb_0_lvb_bb0_memcoalesce_param_bitcast_0146;
wire [31:0] bb_0_lvb_input_global_id_0;
wire [31:0] bb_0_lvb_input_global_id_1;
wire [31:0] bb_0_lvb_input_global_id_2;
wire [31:0] bb_0_lvb_input_acl_hw_wg_id;
wire bb_0_local_bb0_ld_memcoalesce_param_load_0_active;
wire bb_1_stall_out;
wire bb_1_valid_out;
wire bb_1_lvb_bb1_cmp56;
wire bb_1_lvb_bb1_var_;
wire [31:0] bb_1_lvb_bb1_memcoalesce_param_extrValue_6;
wire [31:0] bb_1_lvb_bb1_memcoalesce_param_extrValue_3;
wire bb_1_lvb_bb1_cmp1430;
wire bb_1_lvb_bb1_var__u0;
wire bb_1_lvb_bb1__phi_decision_xor118;
wire [31:0] bb_1_lvb_bb1_ld_;
wire bb_1_lvb_bb1_cmp1824;
wire bb_1_lvb_bb1__phi_decision_xor119_or;
wire [31:0] bb_1_lvb_bb1_memcoalesce_param_extrValue_5;
wire [31:0] bb_1_lvb_bb1_memcoalesce_param_extrValue_6148;
wire [31:0] bb_1_lvb_bb1_memcoalesce_param_extrValue_1149;
wire [31:0] bb_1_lvb_bb1_memcoalesce_param_extrValue_3150;
wire [31:0] bb_1_lvb_bb1_memcoalesce_param_extrValue_4;
wire [31:0] bb_1_lvb_input_global_id_0;
wire [31:0] bb_1_lvb_input_global_id_1;
wire [31:0] bb_1_lvb_input_global_id_2;
wire [31:0] bb_1_lvb_input_acl_hw_wg_id;
wire bb_1_local_bb1_ld_memcoalesce_param_load_0143_active;
wire bb_1_local_bb1_ld__active;
wire bb_1_local_bb1_ld_memcoalesce_param_load_0147_active;
wire bb_2_stall_out_0;
wire bb_2_stall_out_1;
wire bb_2_valid_out;
wire bb_2_lvb_cmp56;
wire bb_2_lvb_var_;
wire [31:0] bb_2_lvb_memcoalesce_param_extrValue_6;
wire [31:0] bb_2_lvb_memcoalesce_param_extrValue_3;
wire bb_2_lvb_cmp1430;
wire bb_2_lvb_var__u1;
wire bb_2_lvb__phi_decision_xor118;
wire [31:0] bb_2_lvb_ld_;
wire bb_2_lvb_cmp1824;
wire bb_2_lvb__phi_decision_xor119_or;
wire [31:0] bb_2_lvb_memcoalesce_param_extrValue_5;
wire [31:0] bb_2_lvb_memcoalesce_param_extrValue_6148;
wire [31:0] bb_2_lvb_memcoalesce_param_extrValue_1149;
wire [31:0] bb_2_lvb_memcoalesce_param_extrValue_3150;
wire [31:0] bb_2_lvb_memcoalesce_param_extrValue_4;
wire [31:0] bb_2_lvb_channelCounter_058;
wire [63:0] bb_2_lvb_bb2_arrayidx67;
wire [31:0] bb_2_lvb_bb2_mul70;
wire [31:0] bb_2_lvb_bb2_mul46;
wire [31:0] bb_2_lvb_input_global_id_1;
wire [31:0] bb_2_lvb_input_global_id_2;
wire [31:0] bb_2_lvb_input_acl_hw_wg_id;
wire bb_3_stall_out_0;
wire bb_3_stall_out_1;
wire bb_3_valid_out;
wire bb_3_lvb_cmp56;
wire bb_3_lvb_var_;
wire [31:0] bb_3_lvb_memcoalesce_param_extrValue_6;
wire [31:0] bb_3_lvb_memcoalesce_param_extrValue_3;
wire bb_3_lvb_cmp1430;
wire bb_3_lvb_var__u2;
wire bb_3_lvb__phi_decision_xor118;
wire [31:0] bb_3_lvb_ld_;
wire bb_3_lvb_cmp1824;
wire bb_3_lvb__phi_decision_xor119_or;
wire [31:0] bb_3_lvb_memcoalesce_param_extrValue_5;
wire [31:0] bb_3_lvb_memcoalesce_param_extrValue_6148;
wire [31:0] bb_3_lvb_memcoalesce_param_extrValue_1149;
wire [31:0] bb_3_lvb_memcoalesce_param_extrValue_3150;
wire [31:0] bb_3_lvb_memcoalesce_param_extrValue_4;
wire [31:0] bb_3_lvb_channelCounter_058;
wire [63:0] bb_3_lvb_arrayidx67;
wire [31:0] bb_3_lvb_mul70;
wire [31:0] bb_3_lvb_mul46;
wire [31:0] bb_3_lvb_heightCounter_148;
wire [31:0] bb_3_lvb_bb3_c0_exe1;
wire [31:0] bb_3_lvb_bb3_mul28;
wire [31:0] bb_3_lvb_input_global_id_1;
wire [31:0] bb_3_lvb_input_global_id_2;
wire [31:0] bb_3_lvb_input_acl_hw_wg_id;
wire bb_4_stall_out_0;
wire bb_4_stall_out_1;
wire bb_4_valid_out;
wire bb_4_lvb_cmp56;
wire bb_4_lvb_var_;
wire [31:0] bb_4_lvb_memcoalesce_param_extrValue_6;
wire [31:0] bb_4_lvb_memcoalesce_param_extrValue_3;
wire bb_4_lvb_cmp1430;
wire bb_4_lvb_var__u3;
wire bb_4_lvb__phi_decision_xor118;
wire [31:0] bb_4_lvb_ld_;
wire bb_4_lvb_cmp1824;
wire bb_4_lvb__phi_decision_xor119_or;
wire [31:0] bb_4_lvb_memcoalesce_param_extrValue_5;
wire [31:0] bb_4_lvb_memcoalesce_param_extrValue_6148;
wire [31:0] bb_4_lvb_memcoalesce_param_extrValue_1149;
wire [31:0] bb_4_lvb_memcoalesce_param_extrValue_3150;
wire [31:0] bb_4_lvb_memcoalesce_param_extrValue_4;
wire [31:0] bb_4_lvb_channelCounter_058;
wire [63:0] bb_4_lvb_arrayidx67;
wire [31:0] bb_4_lvb_mul70;
wire [31:0] bb_4_lvb_mul46;
wire [31:0] bb_4_lvb_heightCounter_148;
wire [31:0] bb_4_lvb_c0_exe1;
wire [31:0] bb_4_lvb_mul28;
wire [31:0] bb_4_lvb_var__u4;
wire [31:0] bb_4_lvb_widthCounter_239;
wire [31:0] bb_4_lvb_bb4_mul36;
wire [31:0] bb_4_lvb_input_global_id_1;
wire [31:0] bb_4_lvb_input_global_id_2;
wire [31:0] bb_4_lvb_input_acl_hw_wg_id;
wire bb_5_stall_out_0;
wire bb_5_stall_out_1;
wire bb_5_valid_out_0;
wire bb_5_lvb_cmp56_0;
wire bb_5_lvb_var__0;
wire [31:0] bb_5_lvb_memcoalesce_param_extrValue_6_0;
wire [31:0] bb_5_lvb_memcoalesce_param_extrValue_3_0;
wire bb_5_lvb_cmp1430_0;
wire bb_5_lvb_var__u5_0;
wire bb_5_lvb__phi_decision_xor118_0;
wire [31:0] bb_5_lvb_ld__0;
wire bb_5_lvb_cmp1824_0;
wire bb_5_lvb__phi_decision_xor119_or_0;
wire [31:0] bb_5_lvb_memcoalesce_param_extrValue_5_0;
wire [31:0] bb_5_lvb_memcoalesce_param_extrValue_6148_0;
wire [31:0] bb_5_lvb_memcoalesce_param_extrValue_1149_0;
wire [31:0] bb_5_lvb_memcoalesce_param_extrValue_3150_0;
wire [31:0] bb_5_lvb_memcoalesce_param_extrValue_4_0;
wire [31:0] bb_5_lvb_channelCounter_058_0;
wire [63:0] bb_5_lvb_arrayidx67_0;
wire [31:0] bb_5_lvb_mul70_0;
wire [31:0] bb_5_lvb_mul46_0;
wire [31:0] bb_5_lvb_heightCounter_148_0;
wire [31:0] bb_5_lvb_c0_exe1_0;
wire [31:0] bb_5_lvb_mul28_0;
wire [31:0] bb_5_lvb_var__u6_0;
wire [31:0] bb_5_lvb_widthCounter_239_0;
wire [31:0] bb_5_lvb_mul36_0;
wire [319:0] bb_5_lvb_bb5_c2_exit_c2_exi9_0;
wire [31:0] bb_5_lvb_bb5_c2_exe3_0;
wire [31:0] bb_5_lvb_bb5_c2_exe4_0;
wire [31:0] bb_5_lvb_bb5_c2_exe5_0;
wire [31:0] bb_5_lvb_bb5_c2_exe6_0;
wire [31:0] bb_5_lvb_bb5_c2_exe7_0;
wire [31:0] bb_5_lvb_bb5_c2_exe8_0;
wire [31:0] bb_5_lvb_input_global_id_1_0;
wire [31:0] bb_5_lvb_input_global_id_2_0;
wire [31:0] bb_5_lvb_input_acl_hw_wg_id_0;
wire bb_5_valid_out_1;
wire bb_5_lvb_cmp56_1;
wire bb_5_lvb_var__1;
wire [31:0] bb_5_lvb_memcoalesce_param_extrValue_6_1;
wire [31:0] bb_5_lvb_memcoalesce_param_extrValue_3_1;
wire bb_5_lvb_cmp1430_1;
wire bb_5_lvb_var__u5_1;
wire bb_5_lvb__phi_decision_xor118_1;
wire [31:0] bb_5_lvb_ld__1;
wire bb_5_lvb_cmp1824_1;
wire bb_5_lvb__phi_decision_xor119_or_1;
wire [31:0] bb_5_lvb_memcoalesce_param_extrValue_5_1;
wire [31:0] bb_5_lvb_memcoalesce_param_extrValue_6148_1;
wire [31:0] bb_5_lvb_memcoalesce_param_extrValue_1149_1;
wire [31:0] bb_5_lvb_memcoalesce_param_extrValue_3150_1;
wire [31:0] bb_5_lvb_memcoalesce_param_extrValue_4_1;
wire [31:0] bb_5_lvb_channelCounter_058_1;
wire [63:0] bb_5_lvb_arrayidx67_1;
wire [31:0] bb_5_lvb_mul70_1;
wire [31:0] bb_5_lvb_mul46_1;
wire [31:0] bb_5_lvb_heightCounter_148_1;
wire [31:0] bb_5_lvb_c0_exe1_1;
wire [31:0] bb_5_lvb_mul28_1;
wire [31:0] bb_5_lvb_var__u6_1;
wire [31:0] bb_5_lvb_widthCounter_239_1;
wire [31:0] bb_5_lvb_mul36_1;
wire [319:0] bb_5_lvb_bb5_c2_exit_c2_exi9_1;
wire [31:0] bb_5_lvb_bb5_c2_exe3_1;
wire [31:0] bb_5_lvb_bb5_c2_exe4_1;
wire [31:0] bb_5_lvb_bb5_c2_exe5_1;
wire [31:0] bb_5_lvb_bb5_c2_exe6_1;
wire [31:0] bb_5_lvb_bb5_c2_exe7_1;
wire [31:0] bb_5_lvb_bb5_c2_exe8_1;
wire [31:0] bb_5_lvb_input_global_id_1_1;
wire [31:0] bb_5_lvb_input_global_id_2_1;
wire [31:0] bb_5_lvb_input_acl_hw_wg_id_1;
wire bb_5_local_bb5_ld__active;
wire bb_5_local_bb5_ld__u8_active;
wire bb_6_stall_out;
wire bb_6_valid_out_0;
wire bb_6_lvb_cmp56_0;
wire bb_6_lvb_var__0;
wire [31:0] bb_6_lvb_memcoalesce_param_extrValue_6_0;
wire [31:0] bb_6_lvb_memcoalesce_param_extrValue_3_0;
wire bb_6_lvb_cmp1430_0;
wire bb_6_lvb_var__u35_0;
wire bb_6_lvb__phi_decision_xor118_0;
wire [31:0] bb_6_lvb_ld__0;
wire bb_6_lvb_cmp1824_0;
wire bb_6_lvb__phi_decision_xor119_or_0;
wire [31:0] bb_6_lvb_memcoalesce_param_extrValue_5_0;
wire [31:0] bb_6_lvb_memcoalesce_param_extrValue_6148_0;
wire [31:0] bb_6_lvb_memcoalesce_param_extrValue_1149_0;
wire [31:0] bb_6_lvb_memcoalesce_param_extrValue_3150_0;
wire [31:0] bb_6_lvb_memcoalesce_param_extrValue_4_0;
wire [31:0] bb_6_lvb_channelCounter_058_0;
wire [63:0] bb_6_lvb_arrayidx67_0;
wire [31:0] bb_6_lvb_mul70_0;
wire [31:0] bb_6_lvb_mul46_0;
wire [31:0] bb_6_lvb_heightCounter_148_0;
wire [31:0] bb_6_lvb_c0_exe1_0;
wire [31:0] bb_6_lvb_mul28_0;
wire [31:0] bb_6_lvb_bb6_select74_0;
wire [31:0] bb_6_lvb_bb6_add81_0;
wire [31:0] bb_6_lvb_input_global_id_1_0;
wire [31:0] bb_6_lvb_input_global_id_2_0;
wire [31:0] bb_6_lvb_input_acl_hw_wg_id_0;
wire bb_6_valid_out_1;
wire bb_6_lvb_cmp56_1;
wire bb_6_lvb_var__1;
wire [31:0] bb_6_lvb_memcoalesce_param_extrValue_6_1;
wire [31:0] bb_6_lvb_memcoalesce_param_extrValue_3_1;
wire bb_6_lvb_cmp1430_1;
wire bb_6_lvb_var__u35_1;
wire bb_6_lvb__phi_decision_xor118_1;
wire [31:0] bb_6_lvb_ld__1;
wire bb_6_lvb_cmp1824_1;
wire bb_6_lvb__phi_decision_xor119_or_1;
wire [31:0] bb_6_lvb_memcoalesce_param_extrValue_5_1;
wire [31:0] bb_6_lvb_memcoalesce_param_extrValue_6148_1;
wire [31:0] bb_6_lvb_memcoalesce_param_extrValue_1149_1;
wire [31:0] bb_6_lvb_memcoalesce_param_extrValue_3150_1;
wire [31:0] bb_6_lvb_memcoalesce_param_extrValue_4_1;
wire [31:0] bb_6_lvb_channelCounter_058_1;
wire [63:0] bb_6_lvb_arrayidx67_1;
wire [31:0] bb_6_lvb_mul70_1;
wire [31:0] bb_6_lvb_mul46_1;
wire [31:0] bb_6_lvb_heightCounter_148_1;
wire [31:0] bb_6_lvb_c0_exe1_1;
wire [31:0] bb_6_lvb_mul28_1;
wire [31:0] bb_6_lvb_bb6_select74_1;
wire [31:0] bb_6_lvb_bb6_add81_1;
wire [31:0] bb_6_lvb_input_global_id_1_1;
wire [31:0] bb_6_lvb_input_global_id_2_1;
wire [31:0] bb_6_lvb_input_acl_hw_wg_id_1;
wire bb_6_local_bb6_ld__active;
wire bb_6_local_bb6_st_c0_exe120_active;
wire bb_7_stall_out;
wire bb_7_valid_out_0;
wire bb_7_lvb_cmp56_0;
wire bb_7_lvb_var__0;
wire [31:0] bb_7_lvb_memcoalesce_param_extrValue_6_0;
wire [31:0] bb_7_lvb_memcoalesce_param_extrValue_3_0;
wire bb_7_lvb_cmp1430_0;
wire bb_7_lvb_var__u54_0;
wire bb_7_lvb__phi_decision_xor118_0;
wire [31:0] bb_7_lvb_ld__0;
wire bb_7_lvb_cmp1824_0;
wire bb_7_lvb__phi_decision_xor119_or_0;
wire [31:0] bb_7_lvb_memcoalesce_param_extrValue_5_0;
wire [31:0] bb_7_lvb_memcoalesce_param_extrValue_6148_0;
wire [31:0] bb_7_lvb_memcoalesce_param_extrValue_1149_0;
wire [31:0] bb_7_lvb_memcoalesce_param_extrValue_3150_0;
wire [31:0] bb_7_lvb_memcoalesce_param_extrValue_4_0;
wire [31:0] bb_7_lvb_channelCounter_058_0;
wire [63:0] bb_7_lvb_arrayidx67_0;
wire [31:0] bb_7_lvb_mul70_0;
wire [31:0] bb_7_lvb_mul46_0;
wire [31:0] bb_7_lvb_bb7_add85_0;
wire [31:0] bb_7_lvb_input_global_id_1_0;
wire [31:0] bb_7_lvb_input_global_id_2_0;
wire [31:0] bb_7_lvb_input_acl_hw_wg_id_0;
wire bb_7_valid_out_1;
wire bb_7_lvb_cmp56_1;
wire bb_7_lvb_var__1;
wire [31:0] bb_7_lvb_memcoalesce_param_extrValue_6_1;
wire [31:0] bb_7_lvb_memcoalesce_param_extrValue_3_1;
wire bb_7_lvb_cmp1430_1;
wire bb_7_lvb_var__u54_1;
wire bb_7_lvb__phi_decision_xor118_1;
wire [31:0] bb_7_lvb_ld__1;
wire bb_7_lvb_cmp1824_1;
wire bb_7_lvb__phi_decision_xor119_or_1;
wire [31:0] bb_7_lvb_memcoalesce_param_extrValue_5_1;
wire [31:0] bb_7_lvb_memcoalesce_param_extrValue_6148_1;
wire [31:0] bb_7_lvb_memcoalesce_param_extrValue_1149_1;
wire [31:0] bb_7_lvb_memcoalesce_param_extrValue_3150_1;
wire [31:0] bb_7_lvb_memcoalesce_param_extrValue_4_1;
wire [31:0] bb_7_lvb_channelCounter_058_1;
wire [63:0] bb_7_lvb_arrayidx67_1;
wire [31:0] bb_7_lvb_mul70_1;
wire [31:0] bb_7_lvb_mul46_1;
wire [31:0] bb_7_lvb_bb7_add85_1;
wire [31:0] bb_7_lvb_input_global_id_1_1;
wire [31:0] bb_7_lvb_input_global_id_2_1;
wire [31:0] bb_7_lvb_input_acl_hw_wg_id_1;
wire bb_8_stall_out;
wire bb_8_valid_out_0;
wire bb_8_lvb_cmp56_0;
wire bb_8_lvb_var__0;
wire [31:0] bb_8_lvb_memcoalesce_param_extrValue_6_0;
wire [31:0] bb_8_lvb_memcoalesce_param_extrValue_3_0;
wire bb_8_lvb_cmp1430_0;
wire bb_8_lvb_var__u55_0;
wire bb_8_lvb__phi_decision_xor118_0;
wire [31:0] bb_8_lvb_ld__0;
wire bb_8_lvb_cmp1824_0;
wire bb_8_lvb__phi_decision_xor119_or_0;
wire [31:0] bb_8_lvb_memcoalesce_param_extrValue_5_0;
wire [31:0] bb_8_lvb_memcoalesce_param_extrValue_6148_0;
wire [31:0] bb_8_lvb_memcoalesce_param_extrValue_1149_0;
wire [31:0] bb_8_lvb_memcoalesce_param_extrValue_3150_0;
wire [31:0] bb_8_lvb_memcoalesce_param_extrValue_4_0;
wire [31:0] bb_8_lvb_bb8_add90_0;
wire [31:0] bb_8_lvb_input_global_id_1_0;
wire [31:0] bb_8_lvb_input_global_id_2_0;
wire [31:0] bb_8_lvb_input_acl_hw_wg_id_0;
wire bb_8_valid_out_1;
wire bb_8_lvb_cmp56_1;
wire bb_8_lvb_var__1;
wire [31:0] bb_8_lvb_memcoalesce_param_extrValue_6_1;
wire [31:0] bb_8_lvb_memcoalesce_param_extrValue_3_1;
wire bb_8_lvb_cmp1430_1;
wire bb_8_lvb_var__u55_1;
wire bb_8_lvb__phi_decision_xor118_1;
wire [31:0] bb_8_lvb_ld__1;
wire bb_8_lvb_cmp1824_1;
wire bb_8_lvb__phi_decision_xor119_or_1;
wire [31:0] bb_8_lvb_memcoalesce_param_extrValue_5_1;
wire [31:0] bb_8_lvb_memcoalesce_param_extrValue_6148_1;
wire [31:0] bb_8_lvb_memcoalesce_param_extrValue_1149_1;
wire [31:0] bb_8_lvb_memcoalesce_param_extrValue_3150_1;
wire [31:0] bb_8_lvb_memcoalesce_param_extrValue_4_1;
wire [31:0] bb_8_lvb_bb8_add90_1;
wire [31:0] bb_8_lvb_input_global_id_1_1;
wire [31:0] bb_8_lvb_input_global_id_2_1;
wire [31:0] bb_8_lvb_input_acl_hw_wg_id_1;
wire bb_9_stall_out;
wire bb_9_valid_out;
wire [31:0] bb_9_lvb_input_acl_hw_wg_id;
wire loop_limiter_0_stall_out;
wire loop_limiter_0_valid_out;
wire loop_limiter_1_stall_out;
wire loop_limiter_1_valid_out;
wire loop_limiter_2_stall_out;
wire loop_limiter_2_valid_out;
wire loop_limiter_3_stall_out;
wire loop_limiter_3_valid_out;
wire writes_pending;
wire [7:0] lsus_active;

convLayer_basic_block_0 convLayer_basic_block_0 (
	.clock(clock),
	.resetn(resetn),
	.start(start),
	.input_param(input_param),
	.valid_in(valid_in),
	.stall_out(bb_0_stall_out),
	.input_global_id_0(input_global_id_0),
	.input_global_id_1(input_global_id_1),
	.input_global_id_2(input_global_id_2),
	.input_acl_hw_wg_id(input_acl_hw_wg_id),
	.valid_out(bb_0_valid_out),
	.stall_in(bb_1_stall_out),
	.lvb_bb0_memcoalesce_param_extrValue_0(bb_0_lvb_bb0_memcoalesce_param_extrValue_0),
	.lvb_bb0_memcoalesce_param_extrValue_1(bb_0_lvb_bb0_memcoalesce_param_extrValue_1),
	.lvb_bb0_kernelSize17(bb_0_lvb_bb0_kernelSize17),
	.lvb_bb0_memcoalesce_param_bitcast_0142(bb_0_lvb_bb0_memcoalesce_param_bitcast_0142),
	.lvb_bb0_memcoalesce_param_bitcast_0146(bb_0_lvb_bb0_memcoalesce_param_bitcast_0146),
	.lvb_input_global_id_0(bb_0_lvb_input_global_id_0),
	.lvb_input_global_id_1(bb_0_lvb_input_global_id_1),
	.lvb_input_global_id_2(bb_0_lvb_input_global_id_2),
	.lvb_input_acl_hw_wg_id(bb_0_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.avm_local_bb0_ld_memcoalesce_param_load_0_enable(avm_local_bb0_ld_memcoalesce_param_load_0_enable),
	.avm_local_bb0_ld_memcoalesce_param_load_0_readdata(avm_local_bb0_ld_memcoalesce_param_load_0_readdata),
	.avm_local_bb0_ld_memcoalesce_param_load_0_readdatavalid(avm_local_bb0_ld_memcoalesce_param_load_0_readdatavalid),
	.avm_local_bb0_ld_memcoalesce_param_load_0_waitrequest(avm_local_bb0_ld_memcoalesce_param_load_0_waitrequest),
	.avm_local_bb0_ld_memcoalesce_param_load_0_address(avm_local_bb0_ld_memcoalesce_param_load_0_address),
	.avm_local_bb0_ld_memcoalesce_param_load_0_read(avm_local_bb0_ld_memcoalesce_param_load_0_read),
	.avm_local_bb0_ld_memcoalesce_param_load_0_write(avm_local_bb0_ld_memcoalesce_param_load_0_write),
	.avm_local_bb0_ld_memcoalesce_param_load_0_writeack(avm_local_bb0_ld_memcoalesce_param_load_0_writeack),
	.avm_local_bb0_ld_memcoalesce_param_load_0_writedata(avm_local_bb0_ld_memcoalesce_param_load_0_writedata),
	.avm_local_bb0_ld_memcoalesce_param_load_0_byteenable(avm_local_bb0_ld_memcoalesce_param_load_0_byteenable),
	.avm_local_bb0_ld_memcoalesce_param_load_0_burstcount(avm_local_bb0_ld_memcoalesce_param_load_0_burstcount),
	.local_bb0_ld_memcoalesce_param_load_0_active(bb_0_local_bb0_ld_memcoalesce_param_load_0_active),
	.clock2x(clock2x)
);


convLayer_basic_block_1 convLayer_basic_block_1 (
	.clock(clock),
	.resetn(resetn),
	.input_wii_memcoalesce_param_extrValue_0(bb_0_lvb_bb0_memcoalesce_param_extrValue_0),
	.input_wii_memcoalesce_param_extrValue_1(bb_0_lvb_bb0_memcoalesce_param_extrValue_1),
	.input_wii_kernelSize17(bb_0_lvb_bb0_kernelSize17),
	.input_wii_memcoalesce_param_bitcast_0142(bb_0_lvb_bb0_memcoalesce_param_bitcast_0142),
	.input_wii_memcoalesce_param_bitcast_0146(bb_0_lvb_bb0_memcoalesce_param_bitcast_0146),
	.valid_in(bb_0_valid_out),
	.stall_out(bb_1_stall_out),
	.input_global_id_0(bb_0_lvb_input_global_id_0),
	.input_global_id_1(bb_0_lvb_input_global_id_1),
	.input_global_id_2(bb_0_lvb_input_global_id_2),
	.input_acl_hw_wg_id(bb_0_lvb_input_acl_hw_wg_id),
	.valid_out(bb_1_valid_out),
	.stall_in(loop_limiter_0_stall_out),
	.lvb_bb1_cmp56(bb_1_lvb_bb1_cmp56),
	.lvb_bb1_var_(bb_1_lvb_bb1_var_),
	.lvb_bb1_memcoalesce_param_extrValue_6(bb_1_lvb_bb1_memcoalesce_param_extrValue_6),
	.lvb_bb1_memcoalesce_param_extrValue_3(bb_1_lvb_bb1_memcoalesce_param_extrValue_3),
	.lvb_bb1_cmp1430(bb_1_lvb_bb1_cmp1430),
	.lvb_bb1_var__u0(bb_1_lvb_bb1_var__u0),
	.lvb_bb1__phi_decision_xor118(bb_1_lvb_bb1__phi_decision_xor118),
	.lvb_bb1_ld_(bb_1_lvb_bb1_ld_),
	.lvb_bb1_cmp1824(bb_1_lvb_bb1_cmp1824),
	.lvb_bb1__phi_decision_xor119_or(bb_1_lvb_bb1__phi_decision_xor119_or),
	.lvb_bb1_memcoalesce_param_extrValue_5(bb_1_lvb_bb1_memcoalesce_param_extrValue_5),
	.lvb_bb1_memcoalesce_param_extrValue_6148(bb_1_lvb_bb1_memcoalesce_param_extrValue_6148),
	.lvb_bb1_memcoalesce_param_extrValue_1149(bb_1_lvb_bb1_memcoalesce_param_extrValue_1149),
	.lvb_bb1_memcoalesce_param_extrValue_3150(bb_1_lvb_bb1_memcoalesce_param_extrValue_3150),
	.lvb_bb1_memcoalesce_param_extrValue_4(bb_1_lvb_bb1_memcoalesce_param_extrValue_4),
	.lvb_input_global_id_0(bb_1_lvb_input_global_id_0),
	.lvb_input_global_id_1(bb_1_lvb_input_global_id_1),
	.lvb_input_global_id_2(bb_1_lvb_input_global_id_2),
	.lvb_input_acl_hw_wg_id(bb_1_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.start(start),
	.avm_local_bb1_ld_memcoalesce_param_load_0143_enable(avm_local_bb1_ld_memcoalesce_param_load_0143_enable),
	.avm_local_bb1_ld_memcoalesce_param_load_0143_readdata(avm_local_bb1_ld_memcoalesce_param_load_0143_readdata),
	.avm_local_bb1_ld_memcoalesce_param_load_0143_readdatavalid(avm_local_bb1_ld_memcoalesce_param_load_0143_readdatavalid),
	.avm_local_bb1_ld_memcoalesce_param_load_0143_waitrequest(avm_local_bb1_ld_memcoalesce_param_load_0143_waitrequest),
	.avm_local_bb1_ld_memcoalesce_param_load_0143_address(avm_local_bb1_ld_memcoalesce_param_load_0143_address),
	.avm_local_bb1_ld_memcoalesce_param_load_0143_read(avm_local_bb1_ld_memcoalesce_param_load_0143_read),
	.avm_local_bb1_ld_memcoalesce_param_load_0143_write(avm_local_bb1_ld_memcoalesce_param_load_0143_write),
	.avm_local_bb1_ld_memcoalesce_param_load_0143_writeack(avm_local_bb1_ld_memcoalesce_param_load_0143_writeack),
	.avm_local_bb1_ld_memcoalesce_param_load_0143_writedata(avm_local_bb1_ld_memcoalesce_param_load_0143_writedata),
	.avm_local_bb1_ld_memcoalesce_param_load_0143_byteenable(avm_local_bb1_ld_memcoalesce_param_load_0143_byteenable),
	.avm_local_bb1_ld_memcoalesce_param_load_0143_burstcount(avm_local_bb1_ld_memcoalesce_param_load_0143_burstcount),
	.local_bb1_ld_memcoalesce_param_load_0143_active(bb_1_local_bb1_ld_memcoalesce_param_load_0143_active),
	.clock2x(clock2x),
	.avm_local_bb1_ld__enable(avm_local_bb1_ld__enable),
	.avm_local_bb1_ld__readdata(avm_local_bb1_ld__readdata),
	.avm_local_bb1_ld__readdatavalid(avm_local_bb1_ld__readdatavalid),
	.avm_local_bb1_ld__waitrequest(avm_local_bb1_ld__waitrequest),
	.avm_local_bb1_ld__address(avm_local_bb1_ld__address),
	.avm_local_bb1_ld__read(avm_local_bb1_ld__read),
	.avm_local_bb1_ld__write(avm_local_bb1_ld__write),
	.avm_local_bb1_ld__writeack(avm_local_bb1_ld__writeack),
	.avm_local_bb1_ld__writedata(avm_local_bb1_ld__writedata),
	.avm_local_bb1_ld__byteenable(avm_local_bb1_ld__byteenable),
	.avm_local_bb1_ld__burstcount(avm_local_bb1_ld__burstcount),
	.local_bb1_ld__active(bb_1_local_bb1_ld__active),
	.avm_local_bb1_ld_memcoalesce_param_load_0147_enable(avm_local_bb1_ld_memcoalesce_param_load_0147_enable),
	.avm_local_bb1_ld_memcoalesce_param_load_0147_readdata(avm_local_bb1_ld_memcoalesce_param_load_0147_readdata),
	.avm_local_bb1_ld_memcoalesce_param_load_0147_readdatavalid(avm_local_bb1_ld_memcoalesce_param_load_0147_readdatavalid),
	.avm_local_bb1_ld_memcoalesce_param_load_0147_waitrequest(avm_local_bb1_ld_memcoalesce_param_load_0147_waitrequest),
	.avm_local_bb1_ld_memcoalesce_param_load_0147_address(avm_local_bb1_ld_memcoalesce_param_load_0147_address),
	.avm_local_bb1_ld_memcoalesce_param_load_0147_read(avm_local_bb1_ld_memcoalesce_param_load_0147_read),
	.avm_local_bb1_ld_memcoalesce_param_load_0147_write(avm_local_bb1_ld_memcoalesce_param_load_0147_write),
	.avm_local_bb1_ld_memcoalesce_param_load_0147_writeack(avm_local_bb1_ld_memcoalesce_param_load_0147_writeack),
	.avm_local_bb1_ld_memcoalesce_param_load_0147_writedata(avm_local_bb1_ld_memcoalesce_param_load_0147_writedata),
	.avm_local_bb1_ld_memcoalesce_param_load_0147_byteenable(avm_local_bb1_ld_memcoalesce_param_load_0147_byteenable),
	.avm_local_bb1_ld_memcoalesce_param_load_0147_burstcount(avm_local_bb1_ld_memcoalesce_param_load_0147_burstcount),
	.local_bb1_ld_memcoalesce_param_load_0147_active(bb_1_local_bb1_ld_memcoalesce_param_load_0147_active)
);


convLayer_basic_block_2 convLayer_basic_block_2 (
	.clock(clock),
	.resetn(resetn),
	.input_bias(input_bias),
	.input_wii_memcoalesce_param_extrValue_0(bb_0_lvb_bb0_memcoalesce_param_extrValue_0),
	.input_wii_memcoalesce_param_extrValue_1(bb_0_lvb_bb0_memcoalesce_param_extrValue_1),
	.valid_in_0(bb_8_valid_out_0),
	.stall_out_0(bb_2_stall_out_0),
	.input_cmp56_0(bb_8_lvb_cmp56_0),
	.input_var__0(bb_8_lvb_var__0),
	.input_memcoalesce_param_extrValue_6_0(bb_8_lvb_memcoalesce_param_extrValue_6_0),
	.input_memcoalesce_param_extrValue_3_0(bb_8_lvb_memcoalesce_param_extrValue_3_0),
	.input_cmp1430_0(bb_8_lvb_cmp1430_0),
	.input_var__u1_0(bb_8_lvb_var__u55_0),
	.input__phi_decision_xor118_0(bb_8_lvb__phi_decision_xor118_0),
	.input_ld__0(bb_8_lvb_ld__0),
	.input_cmp1824_0(bb_8_lvb_cmp1824_0),
	.input__phi_decision_xor119_or_0(bb_8_lvb__phi_decision_xor119_or_0),
	.input_memcoalesce_param_extrValue_5_0(bb_8_lvb_memcoalesce_param_extrValue_5_0),
	.input_memcoalesce_param_extrValue_6148_0(bb_8_lvb_memcoalesce_param_extrValue_6148_0),
	.input_memcoalesce_param_extrValue_1149_0(bb_8_lvb_memcoalesce_param_extrValue_1149_0),
	.input_memcoalesce_param_extrValue_3150_0(bb_8_lvb_memcoalesce_param_extrValue_3150_0),
	.input_memcoalesce_param_extrValue_4_0(bb_8_lvb_memcoalesce_param_extrValue_4_0),
	.input_channelCounter_058_0(bb_8_lvb_bb8_add90_0),
	.input_global_id_1_0(bb_8_lvb_input_global_id_1_0),
	.input_global_id_2_0(bb_8_lvb_input_global_id_2_0),
	.input_acl_hw_wg_id_0(bb_8_lvb_input_acl_hw_wg_id_0),
	.valid_in_1(loop_limiter_0_valid_out),
	.stall_out_1(bb_2_stall_out_1),
	.input_cmp56_1(bb_1_lvb_bb1_cmp56),
	.input_var__1(bb_1_lvb_bb1_var_),
	.input_memcoalesce_param_extrValue_6_1(bb_1_lvb_bb1_memcoalesce_param_extrValue_6),
	.input_memcoalesce_param_extrValue_3_1(bb_1_lvb_bb1_memcoalesce_param_extrValue_3),
	.input_cmp1430_1(bb_1_lvb_bb1_cmp1430),
	.input_var__u1_1(bb_1_lvb_bb1_var__u0),
	.input__phi_decision_xor118_1(bb_1_lvb_bb1__phi_decision_xor118),
	.input_ld__1(bb_1_lvb_bb1_ld_),
	.input_cmp1824_1(bb_1_lvb_bb1_cmp1824),
	.input__phi_decision_xor119_or_1(bb_1_lvb_bb1__phi_decision_xor119_or),
	.input_memcoalesce_param_extrValue_5_1(bb_1_lvb_bb1_memcoalesce_param_extrValue_5),
	.input_memcoalesce_param_extrValue_6148_1(bb_1_lvb_bb1_memcoalesce_param_extrValue_6148),
	.input_memcoalesce_param_extrValue_1149_1(bb_1_lvb_bb1_memcoalesce_param_extrValue_1149),
	.input_memcoalesce_param_extrValue_3150_1(bb_1_lvb_bb1_memcoalesce_param_extrValue_3150),
	.input_memcoalesce_param_extrValue_4_1(bb_1_lvb_bb1_memcoalesce_param_extrValue_4),
	.input_channelCounter_058_1(bb_1_lvb_input_global_id_0),
	.input_global_id_1_1(bb_1_lvb_input_global_id_1),
	.input_global_id_2_1(bb_1_lvb_input_global_id_2),
	.input_acl_hw_wg_id_1(bb_1_lvb_input_acl_hw_wg_id),
	.valid_out(bb_2_valid_out),
	.stall_in(loop_limiter_1_stall_out),
	.lvb_cmp56(bb_2_lvb_cmp56),
	.lvb_var_(bb_2_lvb_var_),
	.lvb_memcoalesce_param_extrValue_6(bb_2_lvb_memcoalesce_param_extrValue_6),
	.lvb_memcoalesce_param_extrValue_3(bb_2_lvb_memcoalesce_param_extrValue_3),
	.lvb_cmp1430(bb_2_lvb_cmp1430),
	.lvb_var__u1(bb_2_lvb_var__u1),
	.lvb__phi_decision_xor118(bb_2_lvb__phi_decision_xor118),
	.lvb_ld_(bb_2_lvb_ld_),
	.lvb_cmp1824(bb_2_lvb_cmp1824),
	.lvb__phi_decision_xor119_or(bb_2_lvb__phi_decision_xor119_or),
	.lvb_memcoalesce_param_extrValue_5(bb_2_lvb_memcoalesce_param_extrValue_5),
	.lvb_memcoalesce_param_extrValue_6148(bb_2_lvb_memcoalesce_param_extrValue_6148),
	.lvb_memcoalesce_param_extrValue_1149(bb_2_lvb_memcoalesce_param_extrValue_1149),
	.lvb_memcoalesce_param_extrValue_3150(bb_2_lvb_memcoalesce_param_extrValue_3150),
	.lvb_memcoalesce_param_extrValue_4(bb_2_lvb_memcoalesce_param_extrValue_4),
	.lvb_channelCounter_058(bb_2_lvb_channelCounter_058),
	.lvb_bb2_arrayidx67(bb_2_lvb_bb2_arrayidx67),
	.lvb_bb2_mul70(bb_2_lvb_bb2_mul70),
	.lvb_bb2_mul46(bb_2_lvb_bb2_mul46),
	.lvb_input_global_id_1(bb_2_lvb_input_global_id_1),
	.lvb_input_global_id_2(bb_2_lvb_input_global_id_2),
	.lvb_input_acl_hw_wg_id(bb_2_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.start(start)
);


convLayer_basic_block_3 convLayer_basic_block_3 (
	.clock(clock),
	.resetn(resetn),
	.input_wii_memcoalesce_param_extrValue_0(bb_0_lvb_bb0_memcoalesce_param_extrValue_0),
	.input_wii_memcoalesce_param_extrValue_1(bb_0_lvb_bb0_memcoalesce_param_extrValue_1),
	.valid_in_0(bb_7_valid_out_0),
	.stall_out_0(bb_3_stall_out_0),
	.input_cmp56_0(bb_7_lvb_cmp56_0),
	.input_var__0(bb_7_lvb_var__0),
	.input_memcoalesce_param_extrValue_6_0(bb_7_lvb_memcoalesce_param_extrValue_6_0),
	.input_memcoalesce_param_extrValue_3_0(bb_7_lvb_memcoalesce_param_extrValue_3_0),
	.input_cmp1430_0(bb_7_lvb_cmp1430_0),
	.input_var__u2_0(bb_7_lvb_var__u54_0),
	.input__phi_decision_xor118_0(bb_7_lvb__phi_decision_xor118_0),
	.input_ld__0(bb_7_lvb_ld__0),
	.input_cmp1824_0(bb_7_lvb_cmp1824_0),
	.input__phi_decision_xor119_or_0(bb_7_lvb__phi_decision_xor119_or_0),
	.input_memcoalesce_param_extrValue_5_0(bb_7_lvb_memcoalesce_param_extrValue_5_0),
	.input_memcoalesce_param_extrValue_6148_0(bb_7_lvb_memcoalesce_param_extrValue_6148_0),
	.input_memcoalesce_param_extrValue_1149_0(bb_7_lvb_memcoalesce_param_extrValue_1149_0),
	.input_memcoalesce_param_extrValue_3150_0(bb_7_lvb_memcoalesce_param_extrValue_3150_0),
	.input_memcoalesce_param_extrValue_4_0(bb_7_lvb_memcoalesce_param_extrValue_4_0),
	.input_channelCounter_058_0(bb_7_lvb_channelCounter_058_0),
	.input_arrayidx67_0(bb_7_lvb_arrayidx67_0),
	.input_mul70_0(bb_7_lvb_mul70_0),
	.input_mul46_0(bb_7_lvb_mul46_0),
	.input_heightCounter_148_0(bb_7_lvb_bb7_add85_0),
	.input_global_id_1_0(bb_7_lvb_input_global_id_1_0),
	.input_global_id_2_0(bb_7_lvb_input_global_id_2_0),
	.input_acl_hw_wg_id_0(bb_7_lvb_input_acl_hw_wg_id_0),
	.valid_in_1(loop_limiter_1_valid_out),
	.stall_out_1(bb_3_stall_out_1),
	.input_cmp56_1(bb_2_lvb_cmp56),
	.input_var__1(bb_2_lvb_var_),
	.input_memcoalesce_param_extrValue_6_1(bb_2_lvb_memcoalesce_param_extrValue_6),
	.input_memcoalesce_param_extrValue_3_1(bb_2_lvb_memcoalesce_param_extrValue_3),
	.input_cmp1430_1(bb_2_lvb_cmp1430),
	.input_var__u2_1(bb_2_lvb_var__u1),
	.input__phi_decision_xor118_1(bb_2_lvb__phi_decision_xor118),
	.input_ld__1(bb_2_lvb_ld_),
	.input_cmp1824_1(bb_2_lvb_cmp1824),
	.input__phi_decision_xor119_or_1(bb_2_lvb__phi_decision_xor119_or),
	.input_memcoalesce_param_extrValue_5_1(bb_2_lvb_memcoalesce_param_extrValue_5),
	.input_memcoalesce_param_extrValue_6148_1(bb_2_lvb_memcoalesce_param_extrValue_6148),
	.input_memcoalesce_param_extrValue_1149_1(bb_2_lvb_memcoalesce_param_extrValue_1149),
	.input_memcoalesce_param_extrValue_3150_1(bb_2_lvb_memcoalesce_param_extrValue_3150),
	.input_memcoalesce_param_extrValue_4_1(bb_2_lvb_memcoalesce_param_extrValue_4),
	.input_channelCounter_058_1(bb_2_lvb_channelCounter_058),
	.input_arrayidx67_1(bb_2_lvb_bb2_arrayidx67),
	.input_mul70_1(bb_2_lvb_bb2_mul70),
	.input_mul46_1(bb_2_lvb_bb2_mul46),
	.input_heightCounter_148_1(bb_2_lvb_input_global_id_1),
	.input_global_id_1_1(bb_2_lvb_input_global_id_1),
	.input_global_id_2_1(bb_2_lvb_input_global_id_2),
	.input_acl_hw_wg_id_1(bb_2_lvb_input_acl_hw_wg_id),
	.valid_out(bb_3_valid_out),
	.stall_in(loop_limiter_2_stall_out),
	.lvb_cmp56(bb_3_lvb_cmp56),
	.lvb_var_(bb_3_lvb_var_),
	.lvb_memcoalesce_param_extrValue_6(bb_3_lvb_memcoalesce_param_extrValue_6),
	.lvb_memcoalesce_param_extrValue_3(bb_3_lvb_memcoalesce_param_extrValue_3),
	.lvb_cmp1430(bb_3_lvb_cmp1430),
	.lvb_var__u2(bb_3_lvb_var__u2),
	.lvb__phi_decision_xor118(bb_3_lvb__phi_decision_xor118),
	.lvb_ld_(bb_3_lvb_ld_),
	.lvb_cmp1824(bb_3_lvb_cmp1824),
	.lvb__phi_decision_xor119_or(bb_3_lvb__phi_decision_xor119_or),
	.lvb_memcoalesce_param_extrValue_5(bb_3_lvb_memcoalesce_param_extrValue_5),
	.lvb_memcoalesce_param_extrValue_6148(bb_3_lvb_memcoalesce_param_extrValue_6148),
	.lvb_memcoalesce_param_extrValue_1149(bb_3_lvb_memcoalesce_param_extrValue_1149),
	.lvb_memcoalesce_param_extrValue_3150(bb_3_lvb_memcoalesce_param_extrValue_3150),
	.lvb_memcoalesce_param_extrValue_4(bb_3_lvb_memcoalesce_param_extrValue_4),
	.lvb_channelCounter_058(bb_3_lvb_channelCounter_058),
	.lvb_arrayidx67(bb_3_lvb_arrayidx67),
	.lvb_mul70(bb_3_lvb_mul70),
	.lvb_mul46(bb_3_lvb_mul46),
	.lvb_heightCounter_148(bb_3_lvb_heightCounter_148),
	.lvb_bb3_c0_exe1(bb_3_lvb_bb3_c0_exe1),
	.lvb_bb3_mul28(bb_3_lvb_bb3_mul28),
	.lvb_input_global_id_1(bb_3_lvb_input_global_id_1),
	.lvb_input_global_id_2(bb_3_lvb_input_global_id_2),
	.lvb_input_acl_hw_wg_id(bb_3_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.start(start)
);


convLayer_basic_block_4 convLayer_basic_block_4 (
	.clock(clock),
	.resetn(resetn),
	.input_wii_memcoalesce_param_extrValue_0(bb_0_lvb_bb0_memcoalesce_param_extrValue_0),
	.input_wii_memcoalesce_param_extrValue_1(bb_0_lvb_bb0_memcoalesce_param_extrValue_1),
	.valid_in_0(bb_6_valid_out_0),
	.stall_out_0(bb_4_stall_out_0),
	.input_cmp56_0(bb_6_lvb_cmp56_0),
	.input_var__0(bb_6_lvb_var__0),
	.input_memcoalesce_param_extrValue_6_0(bb_6_lvb_memcoalesce_param_extrValue_6_0),
	.input_memcoalesce_param_extrValue_3_0(bb_6_lvb_memcoalesce_param_extrValue_3_0),
	.input_cmp1430_0(bb_6_lvb_cmp1430_0),
	.input_var__u3_0(bb_6_lvb_var__u35_0),
	.input__phi_decision_xor118_0(bb_6_lvb__phi_decision_xor118_0),
	.input_ld__0(bb_6_lvb_ld__0),
	.input_cmp1824_0(bb_6_lvb_cmp1824_0),
	.input__phi_decision_xor119_or_0(bb_6_lvb__phi_decision_xor119_or_0),
	.input_memcoalesce_param_extrValue_5_0(bb_6_lvb_memcoalesce_param_extrValue_5_0),
	.input_memcoalesce_param_extrValue_6148_0(bb_6_lvb_memcoalesce_param_extrValue_6148_0),
	.input_memcoalesce_param_extrValue_1149_0(bb_6_lvb_memcoalesce_param_extrValue_1149_0),
	.input_memcoalesce_param_extrValue_3150_0(bb_6_lvb_memcoalesce_param_extrValue_3150_0),
	.input_memcoalesce_param_extrValue_4_0(bb_6_lvb_memcoalesce_param_extrValue_4_0),
	.input_channelCounter_058_0(bb_6_lvb_channelCounter_058_0),
	.input_arrayidx67_0(bb_6_lvb_arrayidx67_0),
	.input_mul70_0(bb_6_lvb_mul70_0),
	.input_mul46_0(bb_6_lvb_mul46_0),
	.input_heightCounter_148_0(bb_6_lvb_heightCounter_148_0),
	.input_c0_exe1_0(bb_6_lvb_c0_exe1_0),
	.input_mul28_0(bb_6_lvb_mul28_0),
	.input_var__u4_0(bb_6_lvb_bb6_select74_0),
	.input_widthCounter_239_0(bb_6_lvb_bb6_add81_0),
	.input_global_id_1_0(bb_6_lvb_input_global_id_1_0),
	.input_global_id_2_0(bb_6_lvb_input_global_id_2_0),
	.input_acl_hw_wg_id_0(bb_6_lvb_input_acl_hw_wg_id_0),
	.valid_in_1(loop_limiter_2_valid_out),
	.stall_out_1(bb_4_stall_out_1),
	.input_cmp56_1(bb_3_lvb_cmp56),
	.input_var__1(bb_3_lvb_var_),
	.input_memcoalesce_param_extrValue_6_1(bb_3_lvb_memcoalesce_param_extrValue_6),
	.input_memcoalesce_param_extrValue_3_1(bb_3_lvb_memcoalesce_param_extrValue_3),
	.input_cmp1430_1(bb_3_lvb_cmp1430),
	.input_var__u3_1(bb_3_lvb_var__u2),
	.input__phi_decision_xor118_1(bb_3_lvb__phi_decision_xor118),
	.input_ld__1(bb_3_lvb_ld_),
	.input_cmp1824_1(bb_3_lvb_cmp1824),
	.input__phi_decision_xor119_or_1(bb_3_lvb__phi_decision_xor119_or),
	.input_memcoalesce_param_extrValue_5_1(bb_3_lvb_memcoalesce_param_extrValue_5),
	.input_memcoalesce_param_extrValue_6148_1(bb_3_lvb_memcoalesce_param_extrValue_6148),
	.input_memcoalesce_param_extrValue_1149_1(bb_3_lvb_memcoalesce_param_extrValue_1149),
	.input_memcoalesce_param_extrValue_3150_1(bb_3_lvb_memcoalesce_param_extrValue_3150),
	.input_memcoalesce_param_extrValue_4_1(bb_3_lvb_memcoalesce_param_extrValue_4),
	.input_channelCounter_058_1(bb_3_lvb_channelCounter_058),
	.input_arrayidx67_1(bb_3_lvb_arrayidx67),
	.input_mul70_1(bb_3_lvb_mul70),
	.input_mul46_1(bb_3_lvb_mul46),
	.input_heightCounter_148_1(bb_3_lvb_heightCounter_148),
	.input_c0_exe1_1(bb_3_lvb_bb3_c0_exe1),
	.input_mul28_1(bb_3_lvb_bb3_mul28),
	.input_var__u4_1(bb_3_lvb_memcoalesce_param_extrValue_3),
	.input_widthCounter_239_1(bb_3_lvb_input_global_id_2),
	.input_global_id_1_1(bb_3_lvb_input_global_id_1),
	.input_global_id_2_1(bb_3_lvb_input_global_id_2),
	.input_acl_hw_wg_id_1(bb_3_lvb_input_acl_hw_wg_id),
	.valid_out(bb_4_valid_out),
	.stall_in(loop_limiter_3_stall_out),
	.lvb_cmp56(bb_4_lvb_cmp56),
	.lvb_var_(bb_4_lvb_var_),
	.lvb_memcoalesce_param_extrValue_6(bb_4_lvb_memcoalesce_param_extrValue_6),
	.lvb_memcoalesce_param_extrValue_3(bb_4_lvb_memcoalesce_param_extrValue_3),
	.lvb_cmp1430(bb_4_lvb_cmp1430),
	.lvb_var__u3(bb_4_lvb_var__u3),
	.lvb__phi_decision_xor118(bb_4_lvb__phi_decision_xor118),
	.lvb_ld_(bb_4_lvb_ld_),
	.lvb_cmp1824(bb_4_lvb_cmp1824),
	.lvb__phi_decision_xor119_or(bb_4_lvb__phi_decision_xor119_or),
	.lvb_memcoalesce_param_extrValue_5(bb_4_lvb_memcoalesce_param_extrValue_5),
	.lvb_memcoalesce_param_extrValue_6148(bb_4_lvb_memcoalesce_param_extrValue_6148),
	.lvb_memcoalesce_param_extrValue_1149(bb_4_lvb_memcoalesce_param_extrValue_1149),
	.lvb_memcoalesce_param_extrValue_3150(bb_4_lvb_memcoalesce_param_extrValue_3150),
	.lvb_memcoalesce_param_extrValue_4(bb_4_lvb_memcoalesce_param_extrValue_4),
	.lvb_channelCounter_058(bb_4_lvb_channelCounter_058),
	.lvb_arrayidx67(bb_4_lvb_arrayidx67),
	.lvb_mul70(bb_4_lvb_mul70),
	.lvb_mul46(bb_4_lvb_mul46),
	.lvb_heightCounter_148(bb_4_lvb_heightCounter_148),
	.lvb_c0_exe1(bb_4_lvb_c0_exe1),
	.lvb_mul28(bb_4_lvb_mul28),
	.lvb_var__u4(bb_4_lvb_var__u4),
	.lvb_widthCounter_239(bb_4_lvb_widthCounter_239),
	.lvb_bb4_mul36(bb_4_lvb_bb4_mul36),
	.lvb_input_global_id_1(bb_4_lvb_input_global_id_1),
	.lvb_input_global_id_2(bb_4_lvb_input_global_id_2),
	.lvb_input_acl_hw_wg_id(bb_4_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.start(start)
);


convLayer_basic_block_5 convLayer_basic_block_5 (
	.clock(clock),
	.resetn(resetn),
	.input_inputFeatureMap(input_inputFeatureMap),
	.input_weight(input_weight),
	.input_wii_memcoalesce_param_extrValue_0(bb_0_lvb_bb0_memcoalesce_param_extrValue_0),
	.input_wii_memcoalesce_param_extrValue_1(bb_0_lvb_bb0_memcoalesce_param_extrValue_1),
	.valid_in_0(bb_5_valid_out_0),
	.stall_out_0(bb_5_stall_out_0),
	.input_cmp56_0(bb_5_lvb_cmp56_0),
	.input_var__0(bb_5_lvb_var__0),
	.input_memcoalesce_param_extrValue_6_0(bb_5_lvb_memcoalesce_param_extrValue_6_0),
	.input_memcoalesce_param_extrValue_3_0(bb_5_lvb_memcoalesce_param_extrValue_3_0),
	.input_cmp1430_0(bb_5_lvb_cmp1430_0),
	.input_var__u5_0(bb_5_lvb_var__u5_0),
	.input__phi_decision_xor118_0(bb_5_lvb__phi_decision_xor118_0),
	.input_ld__0(bb_5_lvb_ld__0),
	.input_cmp1824_0(bb_5_lvb_cmp1824_0),
	.input__phi_decision_xor119_or_0(bb_5_lvb__phi_decision_xor119_or_0),
	.input_memcoalesce_param_extrValue_5_0(bb_5_lvb_memcoalesce_param_extrValue_5_0),
	.input_memcoalesce_param_extrValue_6148_0(bb_5_lvb_memcoalesce_param_extrValue_6148_0),
	.input_memcoalesce_param_extrValue_1149_0(bb_5_lvb_memcoalesce_param_extrValue_1149_0),
	.input_memcoalesce_param_extrValue_3150_0(bb_5_lvb_memcoalesce_param_extrValue_3150_0),
	.input_memcoalesce_param_extrValue_4_0(bb_5_lvb_memcoalesce_param_extrValue_4_0),
	.input_channelCounter_058_0(bb_5_lvb_channelCounter_058_0),
	.input_arrayidx67_0(bb_5_lvb_arrayidx67_0),
	.input_mul70_0(bb_5_lvb_mul70_0),
	.input_mul46_0(bb_5_lvb_mul46_0),
	.input_heightCounter_148_0(bb_5_lvb_heightCounter_148_0),
	.input_c0_exe1_0(bb_5_lvb_c0_exe1_0),
	.input_mul28_0(bb_5_lvb_mul28_0),
	.input_var__u6_0(bb_5_lvb_var__u6_0),
	.input_widthCounter_239_0(bb_5_lvb_widthCounter_239_0),
	.input_mul36_0(bb_5_lvb_mul36_0),
	.input_var__u7_0(bb_5_lvb_bb5_c2_exe6_0),
	.input_c_332_0(bb_5_lvb_bb5_c2_exe7_0),
	.input_result_331_0(bb_5_lvb_bb5_c2_exe8_0),
	.input_i_426_0(bb_5_lvb_bb5_c2_exe3_0),
	.input_j_522_0(bb_5_lvb_bb5_c2_exe4_0),
	.input_result_521_0(bb_5_lvb_bb5_c2_exe5_0),
	.input_global_id_1_0(bb_5_lvb_input_global_id_1_0),
	.input_global_id_2_0(bb_5_lvb_input_global_id_2_0),
	.input_acl_hw_wg_id_0(bb_5_lvb_input_acl_hw_wg_id_0),
	.valid_in_1(loop_limiter_3_valid_out),
	.stall_out_1(bb_5_stall_out_1),
	.input_cmp56_1(bb_4_lvb_cmp56),
	.input_var__1(bb_4_lvb_var_),
	.input_memcoalesce_param_extrValue_6_1(bb_4_lvb_memcoalesce_param_extrValue_6),
	.input_memcoalesce_param_extrValue_3_1(bb_4_lvb_memcoalesce_param_extrValue_3),
	.input_cmp1430_1(bb_4_lvb_cmp1430),
	.input_var__u5_1(bb_4_lvb_var__u3),
	.input__phi_decision_xor118_1(bb_4_lvb__phi_decision_xor118),
	.input_ld__1(bb_4_lvb_ld_),
	.input_cmp1824_1(bb_4_lvb_cmp1824),
	.input__phi_decision_xor119_or_1(bb_4_lvb__phi_decision_xor119_or),
	.input_memcoalesce_param_extrValue_5_1(bb_4_lvb_memcoalesce_param_extrValue_5),
	.input_memcoalesce_param_extrValue_6148_1(bb_4_lvb_memcoalesce_param_extrValue_6148),
	.input_memcoalesce_param_extrValue_1149_1(bb_4_lvb_memcoalesce_param_extrValue_1149),
	.input_memcoalesce_param_extrValue_3150_1(bb_4_lvb_memcoalesce_param_extrValue_3150),
	.input_memcoalesce_param_extrValue_4_1(bb_4_lvb_memcoalesce_param_extrValue_4),
	.input_channelCounter_058_1(bb_4_lvb_channelCounter_058),
	.input_arrayidx67_1(bb_4_lvb_arrayidx67),
	.input_mul70_1(bb_4_lvb_mul70),
	.input_mul46_1(bb_4_lvb_mul46),
	.input_heightCounter_148_1(bb_4_lvb_heightCounter_148),
	.input_c0_exe1_1(bb_4_lvb_c0_exe1),
	.input_mul28_1(bb_4_lvb_mul28),
	.input_var__u6_1(bb_4_lvb_var__u4),
	.input_widthCounter_239_1(bb_4_lvb_widthCounter_239),
	.input_mul36_1(bb_4_lvb_bb4_mul36),
	.input_var__u7_1(bb_4_lvb_var__u4),
	.input_c_332_1(32'h0),
	.input_result_331_1(32'h0),
	.input_i_426_1(32'h0),
	.input_j_522_1(32'h0),
	.input_result_521_1(32'h0),
	.input_global_id_1_1(bb_4_lvb_input_global_id_1),
	.input_global_id_2_1(bb_4_lvb_input_global_id_2),
	.input_acl_hw_wg_id_1(bb_4_lvb_input_acl_hw_wg_id),
	.valid_out_0(bb_5_valid_out_0),
	.stall_in_0(bb_5_stall_out_0),
	.lvb_cmp56_0(bb_5_lvb_cmp56_0),
	.lvb_var__0(bb_5_lvb_var__0),
	.lvb_memcoalesce_param_extrValue_6_0(bb_5_lvb_memcoalesce_param_extrValue_6_0),
	.lvb_memcoalesce_param_extrValue_3_0(bb_5_lvb_memcoalesce_param_extrValue_3_0),
	.lvb_cmp1430_0(bb_5_lvb_cmp1430_0),
	.lvb_var__u5_0(bb_5_lvb_var__u5_0),
	.lvb__phi_decision_xor118_0(bb_5_lvb__phi_decision_xor118_0),
	.lvb_ld__0(bb_5_lvb_ld__0),
	.lvb_cmp1824_0(bb_5_lvb_cmp1824_0),
	.lvb__phi_decision_xor119_or_0(bb_5_lvb__phi_decision_xor119_or_0),
	.lvb_memcoalesce_param_extrValue_5_0(bb_5_lvb_memcoalesce_param_extrValue_5_0),
	.lvb_memcoalesce_param_extrValue_6148_0(bb_5_lvb_memcoalesce_param_extrValue_6148_0),
	.lvb_memcoalesce_param_extrValue_1149_0(bb_5_lvb_memcoalesce_param_extrValue_1149_0),
	.lvb_memcoalesce_param_extrValue_3150_0(bb_5_lvb_memcoalesce_param_extrValue_3150_0),
	.lvb_memcoalesce_param_extrValue_4_0(bb_5_lvb_memcoalesce_param_extrValue_4_0),
	.lvb_channelCounter_058_0(bb_5_lvb_channelCounter_058_0),
	.lvb_arrayidx67_0(bb_5_lvb_arrayidx67_0),
	.lvb_mul70_0(bb_5_lvb_mul70_0),
	.lvb_mul46_0(bb_5_lvb_mul46_0),
	.lvb_heightCounter_148_0(bb_5_lvb_heightCounter_148_0),
	.lvb_c0_exe1_0(bb_5_lvb_c0_exe1_0),
	.lvb_mul28_0(bb_5_lvb_mul28_0),
	.lvb_var__u6_0(bb_5_lvb_var__u6_0),
	.lvb_widthCounter_239_0(bb_5_lvb_widthCounter_239_0),
	.lvb_mul36_0(bb_5_lvb_mul36_0),
	.lvb_bb5_c2_exit_c2_exi9_0(bb_5_lvb_bb5_c2_exit_c2_exi9_0),
	.lvb_bb5_c2_exe3_0(bb_5_lvb_bb5_c2_exe3_0),
	.lvb_bb5_c2_exe4_0(bb_5_lvb_bb5_c2_exe4_0),
	.lvb_bb5_c2_exe5_0(bb_5_lvb_bb5_c2_exe5_0),
	.lvb_bb5_c2_exe6_0(bb_5_lvb_bb5_c2_exe6_0),
	.lvb_bb5_c2_exe7_0(bb_5_lvb_bb5_c2_exe7_0),
	.lvb_bb5_c2_exe8_0(bb_5_lvb_bb5_c2_exe8_0),
	.lvb_input_global_id_1_0(bb_5_lvb_input_global_id_1_0),
	.lvb_input_global_id_2_0(bb_5_lvb_input_global_id_2_0),
	.lvb_input_acl_hw_wg_id_0(bb_5_lvb_input_acl_hw_wg_id_0),
	.valid_out_1(bb_5_valid_out_1),
	.stall_in_1(bb_6_stall_out),
	.lvb_cmp56_1(bb_5_lvb_cmp56_1),
	.lvb_var__1(bb_5_lvb_var__1),
	.lvb_memcoalesce_param_extrValue_6_1(bb_5_lvb_memcoalesce_param_extrValue_6_1),
	.lvb_memcoalesce_param_extrValue_3_1(bb_5_lvb_memcoalesce_param_extrValue_3_1),
	.lvb_cmp1430_1(bb_5_lvb_cmp1430_1),
	.lvb_var__u5_1(bb_5_lvb_var__u5_1),
	.lvb__phi_decision_xor118_1(bb_5_lvb__phi_decision_xor118_1),
	.lvb_ld__1(bb_5_lvb_ld__1),
	.lvb_cmp1824_1(bb_5_lvb_cmp1824_1),
	.lvb__phi_decision_xor119_or_1(bb_5_lvb__phi_decision_xor119_or_1),
	.lvb_memcoalesce_param_extrValue_5_1(bb_5_lvb_memcoalesce_param_extrValue_5_1),
	.lvb_memcoalesce_param_extrValue_6148_1(bb_5_lvb_memcoalesce_param_extrValue_6148_1),
	.lvb_memcoalesce_param_extrValue_1149_1(bb_5_lvb_memcoalesce_param_extrValue_1149_1),
	.lvb_memcoalesce_param_extrValue_3150_1(bb_5_lvb_memcoalesce_param_extrValue_3150_1),
	.lvb_memcoalesce_param_extrValue_4_1(bb_5_lvb_memcoalesce_param_extrValue_4_1),
	.lvb_channelCounter_058_1(bb_5_lvb_channelCounter_058_1),
	.lvb_arrayidx67_1(bb_5_lvb_arrayidx67_1),
	.lvb_mul70_1(bb_5_lvb_mul70_1),
	.lvb_mul46_1(bb_5_lvb_mul46_1),
	.lvb_heightCounter_148_1(bb_5_lvb_heightCounter_148_1),
	.lvb_c0_exe1_1(bb_5_lvb_c0_exe1_1),
	.lvb_mul28_1(bb_5_lvb_mul28_1),
	.lvb_var__u6_1(bb_5_lvb_var__u6_1),
	.lvb_widthCounter_239_1(bb_5_lvb_widthCounter_239_1),
	.lvb_mul36_1(bb_5_lvb_mul36_1),
	.lvb_bb5_c2_exit_c2_exi9_1(bb_5_lvb_bb5_c2_exit_c2_exi9_1),
	.lvb_bb5_c2_exe3_1(bb_5_lvb_bb5_c2_exe3_1),
	.lvb_bb5_c2_exe4_1(bb_5_lvb_bb5_c2_exe4_1),
	.lvb_bb5_c2_exe5_1(bb_5_lvb_bb5_c2_exe5_1),
	.lvb_bb5_c2_exe6_1(bb_5_lvb_bb5_c2_exe6_1),
	.lvb_bb5_c2_exe7_1(bb_5_lvb_bb5_c2_exe7_1),
	.lvb_bb5_c2_exe8_1(bb_5_lvb_bb5_c2_exe8_1),
	.lvb_input_global_id_1_1(bb_5_lvb_input_global_id_1_1),
	.lvb_input_global_id_2_1(bb_5_lvb_input_global_id_2_1),
	.lvb_input_acl_hw_wg_id_1(bb_5_lvb_input_acl_hw_wg_id_1),
	.workgroup_size(workgroup_size),
	.start(start),
	.avm_local_bb5_ld__enable(avm_local_bb5_ld__enable),
	.avm_local_bb5_ld__readdata(avm_local_bb5_ld__readdata),
	.avm_local_bb5_ld__readdatavalid(avm_local_bb5_ld__readdatavalid),
	.avm_local_bb5_ld__waitrequest(avm_local_bb5_ld__waitrequest),
	.avm_local_bb5_ld__address(avm_local_bb5_ld__address),
	.avm_local_bb5_ld__read(avm_local_bb5_ld__read),
	.avm_local_bb5_ld__write(avm_local_bb5_ld__write),
	.avm_local_bb5_ld__writeack(avm_local_bb5_ld__writeack),
	.avm_local_bb5_ld__writedata(avm_local_bb5_ld__writedata),
	.avm_local_bb5_ld__byteenable(avm_local_bb5_ld__byteenable),
	.avm_local_bb5_ld__burstcount(avm_local_bb5_ld__burstcount),
	.local_bb5_ld__active(bb_5_local_bb5_ld__active),
	.clock2x(clock2x),
	.avm_local_bb5_ld__u8_enable(avm_local_bb5_ld__u8_enable),
	.avm_local_bb5_ld__u8_readdata(avm_local_bb5_ld__u8_readdata),
	.avm_local_bb5_ld__u8_readdatavalid(avm_local_bb5_ld__u8_readdatavalid),
	.avm_local_bb5_ld__u8_waitrequest(avm_local_bb5_ld__u8_waitrequest),
	.avm_local_bb5_ld__u8_address(avm_local_bb5_ld__u8_address),
	.avm_local_bb5_ld__u8_read(avm_local_bb5_ld__u8_read),
	.avm_local_bb5_ld__u8_write(avm_local_bb5_ld__u8_write),
	.avm_local_bb5_ld__u8_writeack(avm_local_bb5_ld__u8_writeack),
	.avm_local_bb5_ld__u8_writedata(avm_local_bb5_ld__u8_writedata),
	.avm_local_bb5_ld__u8_byteenable(avm_local_bb5_ld__u8_byteenable),
	.avm_local_bb5_ld__u8_burstcount(avm_local_bb5_ld__u8_burstcount),
	.local_bb5_ld__u8_active(bb_5_local_bb5_ld__u8_active)
);


convLayer_basic_block_6 convLayer_basic_block_6 (
	.clock(clock),
	.resetn(resetn),
	.input_global_size_2(input_global_size_2),
	.input_outputFeatureMap(input_outputFeatureMap),
	.input_wii_memcoalesce_param_extrValue_0(bb_0_lvb_bb0_memcoalesce_param_extrValue_0),
	.input_wii_memcoalesce_param_extrValue_1(bb_0_lvb_bb0_memcoalesce_param_extrValue_1),
	.valid_in(bb_5_valid_out_1),
	.stall_out(bb_6_stall_out),
	.input_cmp56(bb_5_lvb_cmp56_1),
	.input_var_(bb_5_lvb_var__1),
	.input_memcoalesce_param_extrValue_6(bb_5_lvb_memcoalesce_param_extrValue_6_1),
	.input_memcoalesce_param_extrValue_3(bb_5_lvb_memcoalesce_param_extrValue_3_1),
	.input_cmp1430(bb_5_lvb_cmp1430_1),
	.input_var__u35(bb_5_lvb_var__u5_1),
	.input__phi_decision_xor118(bb_5_lvb__phi_decision_xor118_1),
	.input_ld_(bb_5_lvb_ld__1),
	.input_cmp1824(bb_5_lvb_cmp1824_1),
	.input__phi_decision_xor119_or(bb_5_lvb__phi_decision_xor119_or_1),
	.input_memcoalesce_param_extrValue_5(bb_5_lvb_memcoalesce_param_extrValue_5_1),
	.input_memcoalesce_param_extrValue_6148(bb_5_lvb_memcoalesce_param_extrValue_6148_1),
	.input_memcoalesce_param_extrValue_1149(bb_5_lvb_memcoalesce_param_extrValue_1149_1),
	.input_memcoalesce_param_extrValue_3150(bb_5_lvb_memcoalesce_param_extrValue_3150_1),
	.input_memcoalesce_param_extrValue_4(bb_5_lvb_memcoalesce_param_extrValue_4_1),
	.input_channelCounter_058(bb_5_lvb_channelCounter_058_1),
	.input_arrayidx67(bb_5_lvb_arrayidx67_1),
	.input_mul70(bb_5_lvb_mul70_1),
	.input_mul46(bb_5_lvb_mul46_1),
	.input_heightCounter_148(bb_5_lvb_heightCounter_148_1),
	.input_c0_exe1(bb_5_lvb_c0_exe1_1),
	.input_mul28(bb_5_lvb_mul28_1),
	.input_var__u36(bb_5_lvb_var__u6_1),
	.input_widthCounter_239(bb_5_lvb_widthCounter_239_1),
	.input_c2_exit_c2_exi9(bb_5_lvb_bb5_c2_exit_c2_exi9_1),
	.input_global_id_1(bb_5_lvb_input_global_id_1_1),
	.input_global_id_2(bb_5_lvb_input_global_id_2_1),
	.input_acl_hw_wg_id(bb_5_lvb_input_acl_hw_wg_id_1),
	.valid_out_0(bb_6_valid_out_0),
	.stall_in_0(bb_4_stall_out_0),
	.lvb_cmp56_0(bb_6_lvb_cmp56_0),
	.lvb_var__0(bb_6_lvb_var__0),
	.lvb_memcoalesce_param_extrValue_6_0(bb_6_lvb_memcoalesce_param_extrValue_6_0),
	.lvb_memcoalesce_param_extrValue_3_0(bb_6_lvb_memcoalesce_param_extrValue_3_0),
	.lvb_cmp1430_0(bb_6_lvb_cmp1430_0),
	.lvb_var__u35_0(bb_6_lvb_var__u35_0),
	.lvb__phi_decision_xor118_0(bb_6_lvb__phi_decision_xor118_0),
	.lvb_ld__0(bb_6_lvb_ld__0),
	.lvb_cmp1824_0(bb_6_lvb_cmp1824_0),
	.lvb__phi_decision_xor119_or_0(bb_6_lvb__phi_decision_xor119_or_0),
	.lvb_memcoalesce_param_extrValue_5_0(bb_6_lvb_memcoalesce_param_extrValue_5_0),
	.lvb_memcoalesce_param_extrValue_6148_0(bb_6_lvb_memcoalesce_param_extrValue_6148_0),
	.lvb_memcoalesce_param_extrValue_1149_0(bb_6_lvb_memcoalesce_param_extrValue_1149_0),
	.lvb_memcoalesce_param_extrValue_3150_0(bb_6_lvb_memcoalesce_param_extrValue_3150_0),
	.lvb_memcoalesce_param_extrValue_4_0(bb_6_lvb_memcoalesce_param_extrValue_4_0),
	.lvb_channelCounter_058_0(bb_6_lvb_channelCounter_058_0),
	.lvb_arrayidx67_0(bb_6_lvb_arrayidx67_0),
	.lvb_mul70_0(bb_6_lvb_mul70_0),
	.lvb_mul46_0(bb_6_lvb_mul46_0),
	.lvb_heightCounter_148_0(bb_6_lvb_heightCounter_148_0),
	.lvb_c0_exe1_0(bb_6_lvb_c0_exe1_0),
	.lvb_mul28_0(bb_6_lvb_mul28_0),
	.lvb_bb6_select74_0(bb_6_lvb_bb6_select74_0),
	.lvb_bb6_add81_0(bb_6_lvb_bb6_add81_0),
	.lvb_input_global_id_1_0(bb_6_lvb_input_global_id_1_0),
	.lvb_input_global_id_2_0(bb_6_lvb_input_global_id_2_0),
	.lvb_input_acl_hw_wg_id_0(bb_6_lvb_input_acl_hw_wg_id_0),
	.valid_out_1(bb_6_valid_out_1),
	.stall_in_1(bb_7_stall_out),
	.lvb_cmp56_1(bb_6_lvb_cmp56_1),
	.lvb_var__1(bb_6_lvb_var__1),
	.lvb_memcoalesce_param_extrValue_6_1(bb_6_lvb_memcoalesce_param_extrValue_6_1),
	.lvb_memcoalesce_param_extrValue_3_1(bb_6_lvb_memcoalesce_param_extrValue_3_1),
	.lvb_cmp1430_1(bb_6_lvb_cmp1430_1),
	.lvb_var__u35_1(bb_6_lvb_var__u35_1),
	.lvb__phi_decision_xor118_1(bb_6_lvb__phi_decision_xor118_1),
	.lvb_ld__1(bb_6_lvb_ld__1),
	.lvb_cmp1824_1(bb_6_lvb_cmp1824_1),
	.lvb__phi_decision_xor119_or_1(bb_6_lvb__phi_decision_xor119_or_1),
	.lvb_memcoalesce_param_extrValue_5_1(bb_6_lvb_memcoalesce_param_extrValue_5_1),
	.lvb_memcoalesce_param_extrValue_6148_1(bb_6_lvb_memcoalesce_param_extrValue_6148_1),
	.lvb_memcoalesce_param_extrValue_1149_1(bb_6_lvb_memcoalesce_param_extrValue_1149_1),
	.lvb_memcoalesce_param_extrValue_3150_1(bb_6_lvb_memcoalesce_param_extrValue_3150_1),
	.lvb_memcoalesce_param_extrValue_4_1(bb_6_lvb_memcoalesce_param_extrValue_4_1),
	.lvb_channelCounter_058_1(bb_6_lvb_channelCounter_058_1),
	.lvb_arrayidx67_1(bb_6_lvb_arrayidx67_1),
	.lvb_mul70_1(bb_6_lvb_mul70_1),
	.lvb_mul46_1(bb_6_lvb_mul46_1),
	.lvb_heightCounter_148_1(bb_6_lvb_heightCounter_148_1),
	.lvb_c0_exe1_1(bb_6_lvb_c0_exe1_1),
	.lvb_mul28_1(bb_6_lvb_mul28_1),
	.lvb_bb6_select74_1(bb_6_lvb_bb6_select74_1),
	.lvb_bb6_add81_1(bb_6_lvb_bb6_add81_1),
	.lvb_input_global_id_1_1(bb_6_lvb_input_global_id_1_1),
	.lvb_input_global_id_2_1(bb_6_lvb_input_global_id_2_1),
	.lvb_input_acl_hw_wg_id_1(bb_6_lvb_input_acl_hw_wg_id_1),
	.workgroup_size(workgroup_size),
	.start(start),
	.avm_local_bb6_ld__enable(avm_local_bb6_ld__enable),
	.avm_local_bb6_ld__readdata(avm_local_bb6_ld__readdata),
	.avm_local_bb6_ld__readdatavalid(avm_local_bb6_ld__readdatavalid),
	.avm_local_bb6_ld__waitrequest(avm_local_bb6_ld__waitrequest),
	.avm_local_bb6_ld__address(avm_local_bb6_ld__address),
	.avm_local_bb6_ld__read(avm_local_bb6_ld__read),
	.avm_local_bb6_ld__write(avm_local_bb6_ld__write),
	.avm_local_bb6_ld__writeack(avm_local_bb6_ld__writeack),
	.avm_local_bb6_ld__writedata(avm_local_bb6_ld__writedata),
	.avm_local_bb6_ld__byteenable(avm_local_bb6_ld__byteenable),
	.avm_local_bb6_ld__burstcount(avm_local_bb6_ld__burstcount),
	.local_bb6_ld__active(bb_6_local_bb6_ld__active),
	.clock2x(clock2x),
	.avm_local_bb6_st_c0_exe120_enable(avm_local_bb6_st_c0_exe120_enable),
	.avm_local_bb6_st_c0_exe120_readdata(avm_local_bb6_st_c0_exe120_readdata),
	.avm_local_bb6_st_c0_exe120_readdatavalid(avm_local_bb6_st_c0_exe120_readdatavalid),
	.avm_local_bb6_st_c0_exe120_waitrequest(avm_local_bb6_st_c0_exe120_waitrequest),
	.avm_local_bb6_st_c0_exe120_address(avm_local_bb6_st_c0_exe120_address),
	.avm_local_bb6_st_c0_exe120_read(avm_local_bb6_st_c0_exe120_read),
	.avm_local_bb6_st_c0_exe120_write(avm_local_bb6_st_c0_exe120_write),
	.avm_local_bb6_st_c0_exe120_writeack(avm_local_bb6_st_c0_exe120_writeack),
	.avm_local_bb6_st_c0_exe120_writedata(avm_local_bb6_st_c0_exe120_writedata),
	.avm_local_bb6_st_c0_exe120_byteenable(avm_local_bb6_st_c0_exe120_byteenable),
	.avm_local_bb6_st_c0_exe120_burstcount(avm_local_bb6_st_c0_exe120_burstcount),
	.local_bb6_st_c0_exe120_active(bb_6_local_bb6_st_c0_exe120_active)
);


convLayer_basic_block_7 convLayer_basic_block_7 (
	.clock(clock),
	.resetn(resetn),
	.input_global_size_1(input_global_size_1),
	.input_wii_memcoalesce_param_extrValue_0(bb_0_lvb_bb0_memcoalesce_param_extrValue_0),
	.input_wii_memcoalesce_param_extrValue_1(bb_0_lvb_bb0_memcoalesce_param_extrValue_1),
	.valid_in(bb_6_valid_out_1),
	.stall_out(bb_7_stall_out),
	.input_cmp56(bb_6_lvb_cmp56_1),
	.input_var_(bb_6_lvb_var__1),
	.input_memcoalesce_param_extrValue_6(bb_6_lvb_memcoalesce_param_extrValue_6_1),
	.input_memcoalesce_param_extrValue_3(bb_6_lvb_memcoalesce_param_extrValue_3_1),
	.input_cmp1430(bb_6_lvb_cmp1430_1),
	.input_var__u54(bb_6_lvb_var__u35_1),
	.input__phi_decision_xor118(bb_6_lvb__phi_decision_xor118_1),
	.input_ld_(bb_6_lvb_ld__1),
	.input_cmp1824(bb_6_lvb_cmp1824_1),
	.input__phi_decision_xor119_or(bb_6_lvb__phi_decision_xor119_or_1),
	.input_memcoalesce_param_extrValue_5(bb_6_lvb_memcoalesce_param_extrValue_5_1),
	.input_memcoalesce_param_extrValue_6148(bb_6_lvb_memcoalesce_param_extrValue_6148_1),
	.input_memcoalesce_param_extrValue_1149(bb_6_lvb_memcoalesce_param_extrValue_1149_1),
	.input_memcoalesce_param_extrValue_3150(bb_6_lvb_memcoalesce_param_extrValue_3150_1),
	.input_memcoalesce_param_extrValue_4(bb_6_lvb_memcoalesce_param_extrValue_4_1),
	.input_channelCounter_058(bb_6_lvb_channelCounter_058_1),
	.input_arrayidx67(bb_6_lvb_arrayidx67_1),
	.input_mul70(bb_6_lvb_mul70_1),
	.input_mul46(bb_6_lvb_mul46_1),
	.input_heightCounter_148(bb_6_lvb_heightCounter_148_1),
	.input_global_id_1(bb_6_lvb_input_global_id_1_1),
	.input_global_id_2(bb_6_lvb_input_global_id_2_1),
	.input_acl_hw_wg_id(bb_6_lvb_input_acl_hw_wg_id_1),
	.valid_out_0(bb_7_valid_out_0),
	.stall_in_0(bb_3_stall_out_0),
	.lvb_cmp56_0(bb_7_lvb_cmp56_0),
	.lvb_var__0(bb_7_lvb_var__0),
	.lvb_memcoalesce_param_extrValue_6_0(bb_7_lvb_memcoalesce_param_extrValue_6_0),
	.lvb_memcoalesce_param_extrValue_3_0(bb_7_lvb_memcoalesce_param_extrValue_3_0),
	.lvb_cmp1430_0(bb_7_lvb_cmp1430_0),
	.lvb_var__u54_0(bb_7_lvb_var__u54_0),
	.lvb__phi_decision_xor118_0(bb_7_lvb__phi_decision_xor118_0),
	.lvb_ld__0(bb_7_lvb_ld__0),
	.lvb_cmp1824_0(bb_7_lvb_cmp1824_0),
	.lvb__phi_decision_xor119_or_0(bb_7_lvb__phi_decision_xor119_or_0),
	.lvb_memcoalesce_param_extrValue_5_0(bb_7_lvb_memcoalesce_param_extrValue_5_0),
	.lvb_memcoalesce_param_extrValue_6148_0(bb_7_lvb_memcoalesce_param_extrValue_6148_0),
	.lvb_memcoalesce_param_extrValue_1149_0(bb_7_lvb_memcoalesce_param_extrValue_1149_0),
	.lvb_memcoalesce_param_extrValue_3150_0(bb_7_lvb_memcoalesce_param_extrValue_3150_0),
	.lvb_memcoalesce_param_extrValue_4_0(bb_7_lvb_memcoalesce_param_extrValue_4_0),
	.lvb_channelCounter_058_0(bb_7_lvb_channelCounter_058_0),
	.lvb_arrayidx67_0(bb_7_lvb_arrayidx67_0),
	.lvb_mul70_0(bb_7_lvb_mul70_0),
	.lvb_mul46_0(bb_7_lvb_mul46_0),
	.lvb_bb7_add85_0(bb_7_lvb_bb7_add85_0),
	.lvb_input_global_id_1_0(bb_7_lvb_input_global_id_1_0),
	.lvb_input_global_id_2_0(bb_7_lvb_input_global_id_2_0),
	.lvb_input_acl_hw_wg_id_0(bb_7_lvb_input_acl_hw_wg_id_0),
	.valid_out_1(bb_7_valid_out_1),
	.stall_in_1(bb_8_stall_out),
	.lvb_cmp56_1(bb_7_lvb_cmp56_1),
	.lvb_var__1(bb_7_lvb_var__1),
	.lvb_memcoalesce_param_extrValue_6_1(bb_7_lvb_memcoalesce_param_extrValue_6_1),
	.lvb_memcoalesce_param_extrValue_3_1(bb_7_lvb_memcoalesce_param_extrValue_3_1),
	.lvb_cmp1430_1(bb_7_lvb_cmp1430_1),
	.lvb_var__u54_1(bb_7_lvb_var__u54_1),
	.lvb__phi_decision_xor118_1(bb_7_lvb__phi_decision_xor118_1),
	.lvb_ld__1(bb_7_lvb_ld__1),
	.lvb_cmp1824_1(bb_7_lvb_cmp1824_1),
	.lvb__phi_decision_xor119_or_1(bb_7_lvb__phi_decision_xor119_or_1),
	.lvb_memcoalesce_param_extrValue_5_1(bb_7_lvb_memcoalesce_param_extrValue_5_1),
	.lvb_memcoalesce_param_extrValue_6148_1(bb_7_lvb_memcoalesce_param_extrValue_6148_1),
	.lvb_memcoalesce_param_extrValue_1149_1(bb_7_lvb_memcoalesce_param_extrValue_1149_1),
	.lvb_memcoalesce_param_extrValue_3150_1(bb_7_lvb_memcoalesce_param_extrValue_3150_1),
	.lvb_memcoalesce_param_extrValue_4_1(bb_7_lvb_memcoalesce_param_extrValue_4_1),
	.lvb_channelCounter_058_1(bb_7_lvb_channelCounter_058_1),
	.lvb_arrayidx67_1(bb_7_lvb_arrayidx67_1),
	.lvb_mul70_1(bb_7_lvb_mul70_1),
	.lvb_mul46_1(bb_7_lvb_mul46_1),
	.lvb_bb7_add85_1(bb_7_lvb_bb7_add85_1),
	.lvb_input_global_id_1_1(bb_7_lvb_input_global_id_1_1),
	.lvb_input_global_id_2_1(bb_7_lvb_input_global_id_2_1),
	.lvb_input_acl_hw_wg_id_1(bb_7_lvb_input_acl_hw_wg_id_1),
	.workgroup_size(workgroup_size),
	.start(start)
);


convLayer_basic_block_8 convLayer_basic_block_8 (
	.clock(clock),
	.resetn(resetn),
	.input_global_size_0(input_global_size_0),
	.input_wii_memcoalesce_param_extrValue_0(bb_0_lvb_bb0_memcoalesce_param_extrValue_0),
	.input_wii_memcoalesce_param_extrValue_1(bb_0_lvb_bb0_memcoalesce_param_extrValue_1),
	.valid_in(bb_7_valid_out_1),
	.stall_out(bb_8_stall_out),
	.input_cmp56(bb_7_lvb_cmp56_1),
	.input_var_(bb_7_lvb_var__1),
	.input_memcoalesce_param_extrValue_6(bb_7_lvb_memcoalesce_param_extrValue_6_1),
	.input_memcoalesce_param_extrValue_3(bb_7_lvb_memcoalesce_param_extrValue_3_1),
	.input_cmp1430(bb_7_lvb_cmp1430_1),
	.input_var__u55(bb_7_lvb_var__u54_1),
	.input__phi_decision_xor118(bb_7_lvb__phi_decision_xor118_1),
	.input_ld_(bb_7_lvb_ld__1),
	.input_cmp1824(bb_7_lvb_cmp1824_1),
	.input__phi_decision_xor119_or(bb_7_lvb__phi_decision_xor119_or_1),
	.input_memcoalesce_param_extrValue_5(bb_7_lvb_memcoalesce_param_extrValue_5_1),
	.input_memcoalesce_param_extrValue_6148(bb_7_lvb_memcoalesce_param_extrValue_6148_1),
	.input_memcoalesce_param_extrValue_1149(bb_7_lvb_memcoalesce_param_extrValue_1149_1),
	.input_memcoalesce_param_extrValue_3150(bb_7_lvb_memcoalesce_param_extrValue_3150_1),
	.input_memcoalesce_param_extrValue_4(bb_7_lvb_memcoalesce_param_extrValue_4_1),
	.input_channelCounter_058(bb_7_lvb_channelCounter_058_1),
	.input_global_id_1(bb_7_lvb_input_global_id_1_1),
	.input_global_id_2(bb_7_lvb_input_global_id_2_1),
	.input_acl_hw_wg_id(bb_7_lvb_input_acl_hw_wg_id_1),
	.valid_out_0(bb_8_valid_out_0),
	.stall_in_0(bb_2_stall_out_0),
	.lvb_cmp56_0(bb_8_lvb_cmp56_0),
	.lvb_var__0(bb_8_lvb_var__0),
	.lvb_memcoalesce_param_extrValue_6_0(bb_8_lvb_memcoalesce_param_extrValue_6_0),
	.lvb_memcoalesce_param_extrValue_3_0(bb_8_lvb_memcoalesce_param_extrValue_3_0),
	.lvb_cmp1430_0(bb_8_lvb_cmp1430_0),
	.lvb_var__u55_0(bb_8_lvb_var__u55_0),
	.lvb__phi_decision_xor118_0(bb_8_lvb__phi_decision_xor118_0),
	.lvb_ld__0(bb_8_lvb_ld__0),
	.lvb_cmp1824_0(bb_8_lvb_cmp1824_0),
	.lvb__phi_decision_xor119_or_0(bb_8_lvb__phi_decision_xor119_or_0),
	.lvb_memcoalesce_param_extrValue_5_0(bb_8_lvb_memcoalesce_param_extrValue_5_0),
	.lvb_memcoalesce_param_extrValue_6148_0(bb_8_lvb_memcoalesce_param_extrValue_6148_0),
	.lvb_memcoalesce_param_extrValue_1149_0(bb_8_lvb_memcoalesce_param_extrValue_1149_0),
	.lvb_memcoalesce_param_extrValue_3150_0(bb_8_lvb_memcoalesce_param_extrValue_3150_0),
	.lvb_memcoalesce_param_extrValue_4_0(bb_8_lvb_memcoalesce_param_extrValue_4_0),
	.lvb_bb8_add90_0(bb_8_lvb_bb8_add90_0),
	.lvb_input_global_id_1_0(bb_8_lvb_input_global_id_1_0),
	.lvb_input_global_id_2_0(bb_8_lvb_input_global_id_2_0),
	.lvb_input_acl_hw_wg_id_0(bb_8_lvb_input_acl_hw_wg_id_0),
	.valid_out_1(bb_8_valid_out_1),
	.stall_in_1(bb_9_stall_out),
	.lvb_cmp56_1(bb_8_lvb_cmp56_1),
	.lvb_var__1(bb_8_lvb_var__1),
	.lvb_memcoalesce_param_extrValue_6_1(bb_8_lvb_memcoalesce_param_extrValue_6_1),
	.lvb_memcoalesce_param_extrValue_3_1(bb_8_lvb_memcoalesce_param_extrValue_3_1),
	.lvb_cmp1430_1(bb_8_lvb_cmp1430_1),
	.lvb_var__u55_1(bb_8_lvb_var__u55_1),
	.lvb__phi_decision_xor118_1(bb_8_lvb__phi_decision_xor118_1),
	.lvb_ld__1(bb_8_lvb_ld__1),
	.lvb_cmp1824_1(bb_8_lvb_cmp1824_1),
	.lvb__phi_decision_xor119_or_1(bb_8_lvb__phi_decision_xor119_or_1),
	.lvb_memcoalesce_param_extrValue_5_1(bb_8_lvb_memcoalesce_param_extrValue_5_1),
	.lvb_memcoalesce_param_extrValue_6148_1(bb_8_lvb_memcoalesce_param_extrValue_6148_1),
	.lvb_memcoalesce_param_extrValue_1149_1(bb_8_lvb_memcoalesce_param_extrValue_1149_1),
	.lvb_memcoalesce_param_extrValue_3150_1(bb_8_lvb_memcoalesce_param_extrValue_3150_1),
	.lvb_memcoalesce_param_extrValue_4_1(bb_8_lvb_memcoalesce_param_extrValue_4_1),
	.lvb_bb8_add90_1(bb_8_lvb_bb8_add90_1),
	.lvb_input_global_id_1_1(bb_8_lvb_input_global_id_1_1),
	.lvb_input_global_id_2_1(bb_8_lvb_input_global_id_2_1),
	.lvb_input_acl_hw_wg_id_1(bb_8_lvb_input_acl_hw_wg_id_1),
	.workgroup_size(workgroup_size),
	.start(start)
);


convLayer_basic_block_9 convLayer_basic_block_9 (
	.clock(clock),
	.resetn(resetn),
	.valid_in(bb_8_valid_out_1),
	.stall_out(bb_9_stall_out),
	.input_acl_hw_wg_id(bb_8_lvb_input_acl_hw_wg_id_1),
	.valid_out(bb_9_valid_out),
	.stall_in(stall_in),
	.lvb_input_acl_hw_wg_id(bb_9_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.start(start)
);


acl_loop_limiter loop_limiter_0 (
	.clock(clock),
	.resetn(resetn),
	.i_valid(bb_1_valid_out),
	.i_stall(bb_2_stall_out_1),
	.i_valid_exit(bb_8_valid_out_1),
	.i_stall_exit(bb_9_stall_out),
	.o_valid(loop_limiter_0_valid_out),
	.o_stall(loop_limiter_0_stall_out)
);

defparam loop_limiter_0.ENTRY_WIDTH = 1;
defparam loop_limiter_0.EXIT_WIDTH = 1;
defparam loop_limiter_0.THRESHOLD = 549;

acl_loop_limiter loop_limiter_1 (
	.clock(clock),
	.resetn(resetn),
	.i_valid(bb_2_valid_out),
	.i_stall(bb_3_stall_out_1),
	.i_valid_exit(bb_7_valid_out_1),
	.i_stall_exit(bb_8_stall_out),
	.o_valid(loop_limiter_1_valid_out),
	.o_stall(loop_limiter_1_stall_out)
);

defparam loop_limiter_1.ENTRY_WIDTH = 1;
defparam loop_limiter_1.EXIT_WIDTH = 1;
defparam loop_limiter_1.THRESHOLD = 540;

acl_loop_limiter loop_limiter_2 (
	.clock(clock),
	.resetn(resetn),
	.i_valid(bb_3_valid_out),
	.i_stall(bb_4_stall_out_1),
	.i_valid_exit(bb_6_valid_out_1),
	.i_stall_exit(bb_7_stall_out),
	.o_valid(loop_limiter_2_valid_out),
	.o_stall(loop_limiter_2_stall_out)
);

defparam loop_limiter_2.ENTRY_WIDTH = 1;
defparam loop_limiter_2.EXIT_WIDTH = 1;
defparam loop_limiter_2.THRESHOLD = 531;

acl_loop_limiter loop_limiter_3 (
	.clock(clock),
	.resetn(resetn),
	.i_valid(bb_4_valid_out),
	.i_stall(bb_5_stall_out_1),
	.i_valid_exit(bb_5_valid_out_1),
	.i_stall_exit(bb_6_stall_out),
	.o_valid(loop_limiter_3_valid_out),
	.o_stall(loop_limiter_3_stall_out)
);

defparam loop_limiter_3.ENTRY_WIDTH = 1;
defparam loop_limiter_3.EXIT_WIDTH = 1;
defparam loop_limiter_3.THRESHOLD = 191;

convLayer_sys_cycle_time system_cycle_time_module (
	.clock(clock),
	.resetn(resetn),
	.cur_cycle(cur_cycle)
);


assign valid_out = bb_9_valid_out;
assign output_0 = bb_9_lvb_input_acl_hw_wg_id;
assign stall_out = bb_0_stall_out;
assign writes_pending = bb_6_local_bb6_st_c0_exe120_active;
assign lsus_active[0] = bb_0_local_bb0_ld_memcoalesce_param_load_0_active;
assign lsus_active[1] = bb_1_local_bb1_ld_memcoalesce_param_load_0143_active;
assign lsus_active[2] = bb_1_local_bb1_ld__active;
assign lsus_active[3] = bb_1_local_bb1_ld_memcoalesce_param_load_0147_active;
assign lsus_active[4] = bb_5_local_bb5_ld__active;
assign lsus_active[5] = bb_5_local_bb5_ld__u8_active;
assign lsus_active[6] = bb_6_local_bb6_ld__active;
assign lsus_active[7] = bb_6_local_bb6_st_c0_exe120_active;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		has_a_write_pending <= 1'b0;
		has_a_lsu_active <= 1'b0;
	end
	else
	begin
		has_a_write_pending <= (|writes_pending);
		has_a_lsu_active <= (|lsus_active);
	end
end

endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module convLayer_function_cra_slave
	(
		input 		clock,
		input 		resetn,
		output reg [383:0] 		kernel_arguments,
		output reg 		start,
		input 		finish,
		output reg [31:0] 		global_size_0,
		output reg [31:0] 		global_size_1,
		output reg [31:0] 		global_size_2,
		output reg [31:0] 		num_groups_0,
		output reg [31:0] 		num_groups_1,
		output reg [31:0] 		num_groups_2,
		output reg [31:0] 		local_size_0,
		output reg [31:0] 		local_size_1,
		output reg [31:0] 		local_size_2,
		output reg [31:0] 		global_offset_0,
		output reg [31:0] 		global_offset_1,
		output reg [31:0] 		global_offset_2,
		output reg [31:0] 		work_dim,
		output reg [31:0] 		workgroup_size,
		input 		has_a_lsu_active,
		input 		has_a_write_pending,
		input 		valid_in,
		input 		avs_cra_enable,
		input 		avs_cra_read,
		input 		avs_cra_write,
		input [4:0] 		avs_cra_address,
		input [63:0] 		avs_cra_writedata,
		input [7:0] 		avs_cra_byteenable,
		output reg [63:0] 		avs_cra_readdata,
		output reg 		avs_cra_readdatavalid,
		output 		cra_irq
	);


// This section of the wrapper implements an Avalon Slave Interface used to configure a kernel invocation.
// The few words words contain the status and the workgroup size registers.
// The remaining addressable space is reserved for kernel arguments.
 reg started_NO_SHIFT_REG;
 reg [31:0] status_NO_SHIFT_REG;
 reg [63:0] profile_data_NO_SHIFT_REG;
 reg [31:0] profile_ctrl_NO_SHIFT_REG;
 reg [63:0] profile_start_cycle_NO_SHIFT_REG;
 reg [63:0] profile_stop_cycle_NO_SHIFT_REG;
 reg [63:0] cra_readdata_st1_NO_SHIFT_REG;
 reg [4:0] cra_addr_st1_NO_SHIFT_REG;
 reg cra_read_st1_NO_SHIFT_REG;
wire [63:0] bitenable;

assign bitenable[7:0] = (avs_cra_byteenable[0] ? 8'hFF : 8'h0);
assign bitenable[15:8] = (avs_cra_byteenable[1] ? 8'hFF : 8'h0);
assign bitenable[23:16] = (avs_cra_byteenable[2] ? 8'hFF : 8'h0);
assign bitenable[31:24] = (avs_cra_byteenable[3] ? 8'hFF : 8'h0);
assign bitenable[39:32] = (avs_cra_byteenable[4] ? 8'hFF : 8'h0);
assign bitenable[47:40] = (avs_cra_byteenable[5] ? 8'hFF : 8'h0);
assign bitenable[55:48] = (avs_cra_byteenable[6] ? 8'hFF : 8'h0);
assign bitenable[63:56] = (avs_cra_byteenable[7] ? 8'hFF : 8'h0);
assign cra_irq = (status_NO_SHIFT_REG[1] | status_NO_SHIFT_REG[3]);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		start <= 1'b0;
		started_NO_SHIFT_REG <= 1'b0;
		kernel_arguments <= 384'h0;
		status_NO_SHIFT_REG <= 32'h30000;
		profile_ctrl_NO_SHIFT_REG <= 32'h4;
		profile_start_cycle_NO_SHIFT_REG <= 64'h0;
		profile_stop_cycle_NO_SHIFT_REG <= 64'hFFFFFFFFFFFFFFFF;
		work_dim <= 32'h0;
		workgroup_size <= 32'h0;
		global_size_0 <= 32'h0;
		global_size_1 <= 32'h0;
		global_size_2 <= 32'h0;
		num_groups_0 <= 32'h0;
		num_groups_1 <= 32'h0;
		num_groups_2 <= 32'h0;
		local_size_0 <= 32'h0;
		local_size_1 <= 32'h0;
		local_size_2 <= 32'h0;
		global_offset_0 <= 32'h0;
		global_offset_1 <= 32'h0;
		global_offset_2 <= 32'h0;
	end
	else
	begin
		if (avs_cra_write)
		begin
			case (avs_cra_address)
				5'h0:
				begin
					status_NO_SHIFT_REG[31:16] <= 16'h3;
					status_NO_SHIFT_REG[15:0] <= ((status_NO_SHIFT_REG[15:0] & ~(bitenable[15:0])) | (avs_cra_writedata[15:0] & bitenable[15:0]));
				end

				5'h1:
				begin
					profile_ctrl_NO_SHIFT_REG <= ((profile_ctrl_NO_SHIFT_REG & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h3:
				begin
					profile_start_cycle_NO_SHIFT_REG[31:0] <= ((profile_start_cycle_NO_SHIFT_REG[31:0] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					profile_start_cycle_NO_SHIFT_REG[63:32] <= ((profile_start_cycle_NO_SHIFT_REG[63:32] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h4:
				begin
					profile_stop_cycle_NO_SHIFT_REG[31:0] <= ((profile_stop_cycle_NO_SHIFT_REG[31:0] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					profile_stop_cycle_NO_SHIFT_REG[63:32] <= ((profile_stop_cycle_NO_SHIFT_REG[63:32] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h5:
				begin
					work_dim <= ((work_dim & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					workgroup_size <= ((workgroup_size & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h6:
				begin
					global_size_0 <= ((global_size_0 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					global_size_1 <= ((global_size_1 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h7:
				begin
					global_size_2 <= ((global_size_2 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					num_groups_0 <= ((num_groups_0 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h8:
				begin
					num_groups_1 <= ((num_groups_1 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					num_groups_2 <= ((num_groups_2 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h9:
				begin
					local_size_0 <= ((local_size_0 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					local_size_1 <= ((local_size_1 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hA:
				begin
					local_size_2 <= ((local_size_2 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					global_offset_0 <= ((global_offset_0 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hB:
				begin
					global_offset_1 <= ((global_offset_1 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					global_offset_2 <= ((global_offset_2 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hC:
				begin
					kernel_arguments[31:0] <= ((kernel_arguments[31:0] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[63:32] <= ((kernel_arguments[63:32] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hD:
				begin
					kernel_arguments[95:64] <= ((kernel_arguments[95:64] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[127:96] <= ((kernel_arguments[127:96] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hE:
				begin
					kernel_arguments[159:128] <= ((kernel_arguments[159:128] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[191:160] <= ((kernel_arguments[191:160] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hF:
				begin
					kernel_arguments[223:192] <= ((kernel_arguments[223:192] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[255:224] <= ((kernel_arguments[255:224] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h10:
				begin
					kernel_arguments[287:256] <= ((kernel_arguments[287:256] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[319:288] <= ((kernel_arguments[319:288] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h11:
				begin
					kernel_arguments[351:320] <= ((kernel_arguments[351:320] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[383:352] <= ((kernel_arguments[383:352] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				default:
				begin
				end

			endcase
		end
		else
		begin
			if (status_NO_SHIFT_REG[0])
			begin
				start <= 1'b1;
			end
			if (start)
			begin
				status_NO_SHIFT_REG[0] <= 1'b0;
				started_NO_SHIFT_REG <= 1'b1;
			end
			if (started_NO_SHIFT_REG)
			begin
				start <= 1'b0;
			end
			if (finish)
			begin
				status_NO_SHIFT_REG[1] <= 1'b1;
				started_NO_SHIFT_REG <= 1'b0;
			end
		end
		status_NO_SHIFT_REG[11] <= 1'b0;
		status_NO_SHIFT_REG[12] <= (|has_a_lsu_active);
		status_NO_SHIFT_REG[13] <= (|has_a_write_pending);
		status_NO_SHIFT_REG[14] <= (|valid_in);
		status_NO_SHIFT_REG[15] <= started_NO_SHIFT_REG;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		cra_read_st1_NO_SHIFT_REG <= 1'b0;
		cra_addr_st1_NO_SHIFT_REG <= 5'h0;
		cra_readdata_st1_NO_SHIFT_REG <= 64'h0;
	end
	else
	begin
		cra_read_st1_NO_SHIFT_REG <= avs_cra_read;
		cra_addr_st1_NO_SHIFT_REG <= avs_cra_address;
		case (avs_cra_address)
			5'h0:
			begin
				cra_readdata_st1_NO_SHIFT_REG[31:0] <= status_NO_SHIFT_REG;
				cra_readdata_st1_NO_SHIFT_REG[63:32] <= 32'h0;
			end

			5'h1:
			begin
				cra_readdata_st1_NO_SHIFT_REG[31:0] <= 'x;
				cra_readdata_st1_NO_SHIFT_REG[63:32] <= 32'h0;
			end

			5'h2:
			begin
				cra_readdata_st1_NO_SHIFT_REG[63:0] <= 64'h0;
			end

			5'h3:
			begin
				cra_readdata_st1_NO_SHIFT_REG[63:0] <= 64'h0;
			end

			5'h4:
			begin
				cra_readdata_st1_NO_SHIFT_REG[63:0] <= 64'h0;
			end

			default:
			begin
				cra_readdata_st1_NO_SHIFT_REG <= status_NO_SHIFT_REG;
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		avs_cra_readdatavalid <= 1'b0;
		avs_cra_readdata <= 64'h0;
	end
	else
	begin
		avs_cra_readdatavalid <= cra_read_st1_NO_SHIFT_REG;
		case (cra_addr_st1_NO_SHIFT_REG)
			5'h2:
			begin
				avs_cra_readdata[63:0] <= profile_data_NO_SHIFT_REG;
			end

			default:
			begin
				avs_cra_readdata <= cra_readdata_st1_NO_SHIFT_REG;
			end

		endcase
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module convLayer_function_wrapper
	(
		input 		clock,
		input 		resetn,
		input 		clock2x,
		input 		local_router_hang,
		output 		has_a_write_pending,
		output 		has_a_lsu_active,
		input [383:0] 		kernel_arguments,
		input 		start,
		input [31:0] 		global_offset_0,
		input [31:0] 		global_offset_1,
		input [31:0] 		global_offset_2,
		input [31:0] 		work_dim,
		output 		kernel_valid_out,
		input [31:0] 		workgroup_size,
		input [31:0] 		global_size_0,
		input [31:0] 		global_size_1,
		input [31:0] 		global_size_2,
		input [31:0] 		num_groups_0,
		input [31:0] 		num_groups_1,
		input [31:0] 		num_groups_2,
		input [31:0] 		local_size_0,
		input [31:0] 		local_size_1,
		input [31:0] 		local_size_2,
		input [31:0] 		local_id_0,
		input [31:0] 		local_id_1,
		input [31:0] 		local_id_2,
		input [31:0] 		global_id_0,
		input [31:0] 		global_id_1,
		input [31:0] 		global_id_2,
		input [31:0] 		group_id_0,
		input [31:0] 		group_id_1,
		input [31:0] 		group_id_2,
		output 		kernel_stall_out,
		input 		kernel_valid_in,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_enable,
		input [511:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_readdata,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_readdatavalid,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_waitrequest,
		output [31:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_address,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_read,
		output 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_write,
		input 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_writeack,
		output [511:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_writedata,
		output [63:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_byteenable,
		output [4:0] 		avm_local_bb0_ld_memcoalesce_param_load_0_inst0_burstcount,
		output 		avm_local_bb1_ld_memcoalesce_param_load_0143_inst0_enable,
		input [511:0] 		avm_local_bb1_ld_memcoalesce_param_load_0143_inst0_readdata,
		input 		avm_local_bb1_ld_memcoalesce_param_load_0143_inst0_readdatavalid,
		input 		avm_local_bb1_ld_memcoalesce_param_load_0143_inst0_waitrequest,
		output [31:0] 		avm_local_bb1_ld_memcoalesce_param_load_0143_inst0_address,
		output 		avm_local_bb1_ld_memcoalesce_param_load_0143_inst0_read,
		output 		avm_local_bb1_ld_memcoalesce_param_load_0143_inst0_write,
		input 		avm_local_bb1_ld_memcoalesce_param_load_0143_inst0_writeack,
		output [511:0] 		avm_local_bb1_ld_memcoalesce_param_load_0143_inst0_writedata,
		output [63:0] 		avm_local_bb1_ld_memcoalesce_param_load_0143_inst0_byteenable,
		output [4:0] 		avm_local_bb1_ld_memcoalesce_param_load_0143_inst0_burstcount,
		output 		avm_local_bb1_ld__inst0_enable,
		input [511:0] 		avm_local_bb1_ld__inst0_readdata,
		input 		avm_local_bb1_ld__inst0_readdatavalid,
		input 		avm_local_bb1_ld__inst0_waitrequest,
		output [31:0] 		avm_local_bb1_ld__inst0_address,
		output 		avm_local_bb1_ld__inst0_read,
		output 		avm_local_bb1_ld__inst0_write,
		input 		avm_local_bb1_ld__inst0_writeack,
		output [511:0] 		avm_local_bb1_ld__inst0_writedata,
		output [63:0] 		avm_local_bb1_ld__inst0_byteenable,
		output [4:0] 		avm_local_bb1_ld__inst0_burstcount,
		output 		avm_local_bb1_ld_memcoalesce_param_load_0147_inst0_enable,
		input [511:0] 		avm_local_bb1_ld_memcoalesce_param_load_0147_inst0_readdata,
		input 		avm_local_bb1_ld_memcoalesce_param_load_0147_inst0_readdatavalid,
		input 		avm_local_bb1_ld_memcoalesce_param_load_0147_inst0_waitrequest,
		output [31:0] 		avm_local_bb1_ld_memcoalesce_param_load_0147_inst0_address,
		output 		avm_local_bb1_ld_memcoalesce_param_load_0147_inst0_read,
		output 		avm_local_bb1_ld_memcoalesce_param_load_0147_inst0_write,
		input 		avm_local_bb1_ld_memcoalesce_param_load_0147_inst0_writeack,
		output [511:0] 		avm_local_bb1_ld_memcoalesce_param_load_0147_inst0_writedata,
		output [63:0] 		avm_local_bb1_ld_memcoalesce_param_load_0147_inst0_byteenable,
		output [4:0] 		avm_local_bb1_ld_memcoalesce_param_load_0147_inst0_burstcount,
		output 		avm_local_bb5_ld__inst0_enable,
		input [511:0] 		avm_local_bb5_ld__inst0_readdata,
		input 		avm_local_bb5_ld__inst0_readdatavalid,
		input 		avm_local_bb5_ld__inst0_waitrequest,
		output [31:0] 		avm_local_bb5_ld__inst0_address,
		output 		avm_local_bb5_ld__inst0_read,
		output 		avm_local_bb5_ld__inst0_write,
		input 		avm_local_bb5_ld__inst0_writeack,
		output [511:0] 		avm_local_bb5_ld__inst0_writedata,
		output [63:0] 		avm_local_bb5_ld__inst0_byteenable,
		output [4:0] 		avm_local_bb5_ld__inst0_burstcount,
		output 		avm_local_bb5_ld__u8_inst0_enable,
		input [511:0] 		avm_local_bb5_ld__u8_inst0_readdata,
		input 		avm_local_bb5_ld__u8_inst0_readdatavalid,
		input 		avm_local_bb5_ld__u8_inst0_waitrequest,
		output [31:0] 		avm_local_bb5_ld__u8_inst0_address,
		output 		avm_local_bb5_ld__u8_inst0_read,
		output 		avm_local_bb5_ld__u8_inst0_write,
		input 		avm_local_bb5_ld__u8_inst0_writeack,
		output [511:0] 		avm_local_bb5_ld__u8_inst0_writedata,
		output [63:0] 		avm_local_bb5_ld__u8_inst0_byteenable,
		output [4:0] 		avm_local_bb5_ld__u8_inst0_burstcount,
		output 		avm_local_bb6_ld__inst0_enable,
		input [511:0] 		avm_local_bb6_ld__inst0_readdata,
		input 		avm_local_bb6_ld__inst0_readdatavalid,
		input 		avm_local_bb6_ld__inst0_waitrequest,
		output [31:0] 		avm_local_bb6_ld__inst0_address,
		output 		avm_local_bb6_ld__inst0_read,
		output 		avm_local_bb6_ld__inst0_write,
		input 		avm_local_bb6_ld__inst0_writeack,
		output [511:0] 		avm_local_bb6_ld__inst0_writedata,
		output [63:0] 		avm_local_bb6_ld__inst0_byteenable,
		output [4:0] 		avm_local_bb6_ld__inst0_burstcount,
		output 		avm_local_bb6_st_c0_exe120_inst0_enable,
		input [511:0] 		avm_local_bb6_st_c0_exe120_inst0_readdata,
		input 		avm_local_bb6_st_c0_exe120_inst0_readdatavalid,
		input 		avm_local_bb6_st_c0_exe120_inst0_waitrequest,
		output [31:0] 		avm_local_bb6_st_c0_exe120_inst0_address,
		output 		avm_local_bb6_st_c0_exe120_inst0_read,
		output 		avm_local_bb6_st_c0_exe120_inst0_write,
		input 		avm_local_bb6_st_c0_exe120_inst0_writeack,
		output [511:0] 		avm_local_bb6_st_c0_exe120_inst0_writedata,
		output [63:0] 		avm_local_bb6_st_c0_exe120_inst0_byteenable,
		output [4:0] 		avm_local_bb6_st_c0_exe120_inst0_burstcount
	);

// Responsible for interfacing a kernel with the outside world.

// twoXclock_consumer uses clock2x, even if nobody inside the kernel does. Keeps interface to acl_iface consistent for all kernels.
 reg twoXclock_consumer_NO_SHIFT_REG /* synthesis  preserve  noprune  */;
wire stall_in;
wire stall_out;
wire valid_in;
wire valid_out;

assign kernel_valid_out = valid_out;
assign valid_in = kernel_valid_in;
assign kernel_stall_out = stall_out;
assign stall_in = 1'b0;

always @(posedge clock2x or negedge resetn)
begin
	if (~(resetn))
	begin
		twoXclock_consumer_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		twoXclock_consumer_NO_SHIFT_REG <= 1'b1;
	end
end



// This section instantiates a kernel function block
convLayer_function convLayer_function_inst0 (
	.clock(clock),
	.resetn(resetn),
	.input_global_id_0(global_id_0),
	.input_global_id_1(global_id_1),
	.input_global_id_2(global_id_2),
	.input_acl_hw_wg_id(),
	.stall_out(stall_out),
	.valid_in(valid_in),
	.output_0(),
	.valid_out(valid_out),
	.stall_in(stall_in),
	.workgroup_size(workgroup_size),
	.avm_local_bb0_ld_memcoalesce_param_load_0_enable(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_enable),
	.avm_local_bb0_ld_memcoalesce_param_load_0_readdata(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_readdata),
	.avm_local_bb0_ld_memcoalesce_param_load_0_readdatavalid(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_readdatavalid),
	.avm_local_bb0_ld_memcoalesce_param_load_0_waitrequest(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_waitrequest),
	.avm_local_bb0_ld_memcoalesce_param_load_0_address(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_address),
	.avm_local_bb0_ld_memcoalesce_param_load_0_read(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_read),
	.avm_local_bb0_ld_memcoalesce_param_load_0_write(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_write),
	.avm_local_bb0_ld_memcoalesce_param_load_0_writeack(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_writeack),
	.avm_local_bb0_ld_memcoalesce_param_load_0_writedata(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_writedata),
	.avm_local_bb0_ld_memcoalesce_param_load_0_byteenable(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_byteenable),
	.avm_local_bb0_ld_memcoalesce_param_load_0_burstcount(avm_local_bb0_ld_memcoalesce_param_load_0_inst0_burstcount),
	.avm_local_bb1_ld_memcoalesce_param_load_0143_enable(avm_local_bb1_ld_memcoalesce_param_load_0143_inst0_enable),
	.avm_local_bb1_ld_memcoalesce_param_load_0143_readdata(avm_local_bb1_ld_memcoalesce_param_load_0143_inst0_readdata),
	.avm_local_bb1_ld_memcoalesce_param_load_0143_readdatavalid(avm_local_bb1_ld_memcoalesce_param_load_0143_inst0_readdatavalid),
	.avm_local_bb1_ld_memcoalesce_param_load_0143_waitrequest(avm_local_bb1_ld_memcoalesce_param_load_0143_inst0_waitrequest),
	.avm_local_bb1_ld_memcoalesce_param_load_0143_address(avm_local_bb1_ld_memcoalesce_param_load_0143_inst0_address),
	.avm_local_bb1_ld_memcoalesce_param_load_0143_read(avm_local_bb1_ld_memcoalesce_param_load_0143_inst0_read),
	.avm_local_bb1_ld_memcoalesce_param_load_0143_write(avm_local_bb1_ld_memcoalesce_param_load_0143_inst0_write),
	.avm_local_bb1_ld_memcoalesce_param_load_0143_writeack(avm_local_bb1_ld_memcoalesce_param_load_0143_inst0_writeack),
	.avm_local_bb1_ld_memcoalesce_param_load_0143_writedata(avm_local_bb1_ld_memcoalesce_param_load_0143_inst0_writedata),
	.avm_local_bb1_ld_memcoalesce_param_load_0143_byteenable(avm_local_bb1_ld_memcoalesce_param_load_0143_inst0_byteenable),
	.avm_local_bb1_ld_memcoalesce_param_load_0143_burstcount(avm_local_bb1_ld_memcoalesce_param_load_0143_inst0_burstcount),
	.avm_local_bb1_ld__enable(avm_local_bb1_ld__inst0_enable),
	.avm_local_bb1_ld__readdata(avm_local_bb1_ld__inst0_readdata),
	.avm_local_bb1_ld__readdatavalid(avm_local_bb1_ld__inst0_readdatavalid),
	.avm_local_bb1_ld__waitrequest(avm_local_bb1_ld__inst0_waitrequest),
	.avm_local_bb1_ld__address(avm_local_bb1_ld__inst0_address),
	.avm_local_bb1_ld__read(avm_local_bb1_ld__inst0_read),
	.avm_local_bb1_ld__write(avm_local_bb1_ld__inst0_write),
	.avm_local_bb1_ld__writeack(avm_local_bb1_ld__inst0_writeack),
	.avm_local_bb1_ld__writedata(avm_local_bb1_ld__inst0_writedata),
	.avm_local_bb1_ld__byteenable(avm_local_bb1_ld__inst0_byteenable),
	.avm_local_bb1_ld__burstcount(avm_local_bb1_ld__inst0_burstcount),
	.avm_local_bb1_ld_memcoalesce_param_load_0147_enable(avm_local_bb1_ld_memcoalesce_param_load_0147_inst0_enable),
	.avm_local_bb1_ld_memcoalesce_param_load_0147_readdata(avm_local_bb1_ld_memcoalesce_param_load_0147_inst0_readdata),
	.avm_local_bb1_ld_memcoalesce_param_load_0147_readdatavalid(avm_local_bb1_ld_memcoalesce_param_load_0147_inst0_readdatavalid),
	.avm_local_bb1_ld_memcoalesce_param_load_0147_waitrequest(avm_local_bb1_ld_memcoalesce_param_load_0147_inst0_waitrequest),
	.avm_local_bb1_ld_memcoalesce_param_load_0147_address(avm_local_bb1_ld_memcoalesce_param_load_0147_inst0_address),
	.avm_local_bb1_ld_memcoalesce_param_load_0147_read(avm_local_bb1_ld_memcoalesce_param_load_0147_inst0_read),
	.avm_local_bb1_ld_memcoalesce_param_load_0147_write(avm_local_bb1_ld_memcoalesce_param_load_0147_inst0_write),
	.avm_local_bb1_ld_memcoalesce_param_load_0147_writeack(avm_local_bb1_ld_memcoalesce_param_load_0147_inst0_writeack),
	.avm_local_bb1_ld_memcoalesce_param_load_0147_writedata(avm_local_bb1_ld_memcoalesce_param_load_0147_inst0_writedata),
	.avm_local_bb1_ld_memcoalesce_param_load_0147_byteenable(avm_local_bb1_ld_memcoalesce_param_load_0147_inst0_byteenable),
	.avm_local_bb1_ld_memcoalesce_param_load_0147_burstcount(avm_local_bb1_ld_memcoalesce_param_load_0147_inst0_burstcount),
	.avm_local_bb5_ld__enable(avm_local_bb5_ld__inst0_enable),
	.avm_local_bb5_ld__readdata(avm_local_bb5_ld__inst0_readdata),
	.avm_local_bb5_ld__readdatavalid(avm_local_bb5_ld__inst0_readdatavalid),
	.avm_local_bb5_ld__waitrequest(avm_local_bb5_ld__inst0_waitrequest),
	.avm_local_bb5_ld__address(avm_local_bb5_ld__inst0_address),
	.avm_local_bb5_ld__read(avm_local_bb5_ld__inst0_read),
	.avm_local_bb5_ld__write(avm_local_bb5_ld__inst0_write),
	.avm_local_bb5_ld__writeack(avm_local_bb5_ld__inst0_writeack),
	.avm_local_bb5_ld__writedata(avm_local_bb5_ld__inst0_writedata),
	.avm_local_bb5_ld__byteenable(avm_local_bb5_ld__inst0_byteenable),
	.avm_local_bb5_ld__burstcount(avm_local_bb5_ld__inst0_burstcount),
	.avm_local_bb5_ld__u8_enable(avm_local_bb5_ld__u8_inst0_enable),
	.avm_local_bb5_ld__u8_readdata(avm_local_bb5_ld__u8_inst0_readdata),
	.avm_local_bb5_ld__u8_readdatavalid(avm_local_bb5_ld__u8_inst0_readdatavalid),
	.avm_local_bb5_ld__u8_waitrequest(avm_local_bb5_ld__u8_inst0_waitrequest),
	.avm_local_bb5_ld__u8_address(avm_local_bb5_ld__u8_inst0_address),
	.avm_local_bb5_ld__u8_read(avm_local_bb5_ld__u8_inst0_read),
	.avm_local_bb5_ld__u8_write(avm_local_bb5_ld__u8_inst0_write),
	.avm_local_bb5_ld__u8_writeack(avm_local_bb5_ld__u8_inst0_writeack),
	.avm_local_bb5_ld__u8_writedata(avm_local_bb5_ld__u8_inst0_writedata),
	.avm_local_bb5_ld__u8_byteenable(avm_local_bb5_ld__u8_inst0_byteenable),
	.avm_local_bb5_ld__u8_burstcount(avm_local_bb5_ld__u8_inst0_burstcount),
	.avm_local_bb6_ld__enable(avm_local_bb6_ld__inst0_enable),
	.avm_local_bb6_ld__readdata(avm_local_bb6_ld__inst0_readdata),
	.avm_local_bb6_ld__readdatavalid(avm_local_bb6_ld__inst0_readdatavalid),
	.avm_local_bb6_ld__waitrequest(avm_local_bb6_ld__inst0_waitrequest),
	.avm_local_bb6_ld__address(avm_local_bb6_ld__inst0_address),
	.avm_local_bb6_ld__read(avm_local_bb6_ld__inst0_read),
	.avm_local_bb6_ld__write(avm_local_bb6_ld__inst0_write),
	.avm_local_bb6_ld__writeack(avm_local_bb6_ld__inst0_writeack),
	.avm_local_bb6_ld__writedata(avm_local_bb6_ld__inst0_writedata),
	.avm_local_bb6_ld__byteenable(avm_local_bb6_ld__inst0_byteenable),
	.avm_local_bb6_ld__burstcount(avm_local_bb6_ld__inst0_burstcount),
	.avm_local_bb6_st_c0_exe120_enable(avm_local_bb6_st_c0_exe120_inst0_enable),
	.avm_local_bb6_st_c0_exe120_readdata(avm_local_bb6_st_c0_exe120_inst0_readdata),
	.avm_local_bb6_st_c0_exe120_readdatavalid(avm_local_bb6_st_c0_exe120_inst0_readdatavalid),
	.avm_local_bb6_st_c0_exe120_waitrequest(avm_local_bb6_st_c0_exe120_inst0_waitrequest),
	.avm_local_bb6_st_c0_exe120_address(avm_local_bb6_st_c0_exe120_inst0_address),
	.avm_local_bb6_st_c0_exe120_read(avm_local_bb6_st_c0_exe120_inst0_read),
	.avm_local_bb6_st_c0_exe120_write(avm_local_bb6_st_c0_exe120_inst0_write),
	.avm_local_bb6_st_c0_exe120_writeack(avm_local_bb6_st_c0_exe120_inst0_writeack),
	.avm_local_bb6_st_c0_exe120_writedata(avm_local_bb6_st_c0_exe120_inst0_writedata),
	.avm_local_bb6_st_c0_exe120_byteenable(avm_local_bb6_st_c0_exe120_inst0_byteenable),
	.avm_local_bb6_st_c0_exe120_burstcount(avm_local_bb6_st_c0_exe120_inst0_burstcount),
	.clock2x(clock2x),
	.start(start),
	.input_param(kernel_arguments[319:256]),
	.input_bias(kernel_arguments[255:192]),
	.input_inputFeatureMap(kernel_arguments[63:0]),
	.input_weight(kernel_arguments[191:128]),
	.input_global_size_2(global_size_2),
	.input_outputFeatureMap(kernel_arguments[127:64]),
	.input_global_size_1(global_size_1),
	.input_global_size_0(global_size_0),
	.has_a_write_pending(has_a_write_pending),
	.has_a_lsu_active(has_a_lsu_active)
);



endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module convLayer_sys_cycle_time
	(
		input 		clock,
		input 		resetn,
		output [31:0] 		cur_cycle
	);


 reg [31:0] cur_count_NO_SHIFT_REG;

assign cur_cycle = cur_count_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		cur_count_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		cur_count_NO_SHIFT_REG <= (cur_count_NO_SHIFT_REG + 32'h1);
	end
end

endmodule

// (C) 1992-2016 Intel Corporation.                            
// Intel, the Intel logo, Intel, MegaCore, NIOS II, Quartus and TalkBack words    
// and logos are trademarks of Intel Corporation or its subsidiaries in the U.S.  
// and/or other countries. Other marks and brands may be claimed as the property  
// of others. See Trademarks on intel.com for full list of Intel trademarks or    
// the Trademarks & Brands Names Database (if Intel) or See www.Intel.com/legal (if Altera) 
// Your use of Intel Corporation's design tools, logic functions and other        
// software and tools, and its AMPP partner logic functions, and any output       
// files any of the foregoing (including device programming or simulation         
// files), and any associated documentation or information are expressly subject  
// to the terms and conditions of the Altera Program License Subscription         
// Agreement, Intel MegaCore Function License Agreement, or other applicable      
// license agreement, including, without limitation, that your use is for the     
// sole purpose of programming logic devices manufactured by Intel and sold by    
// Intel or its authorized distributors.  Please refer to the applicable          
// agreement for further details.                                                 
    

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module outputLayer_basic_block_0
	(
		input 		clock,
		input 		resetn,
		input 		start,
		input [63:0] 		input_param,
		input [31:0] 		input_global_size_2,
		input [31:0] 		input_global_size_1,
		input [31:0] 		input_global_size_0,
		input 		valid_in,
		output 		stall_out,
		input [31:0] 		input_global_id_0,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out,
		input 		stall_in,
		output [31:0] 		lvb_bb0_ld_,
		output [31:0] 		lvb_bb0_mul16,
		output [31:0] 		lvb_input_global_id_0,
		output [31:0] 		lvb_input_global_id_1,
		output [31:0] 		lvb_input_global_id_2,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		output 		avm_local_bb0_ld__enable,
		input [511:0] 		avm_local_bb0_ld__readdata,
		input 		avm_local_bb0_ld__readdatavalid,
		input 		avm_local_bb0_ld__waitrequest,
		output [31:0] 		avm_local_bb0_ld__address,
		output 		avm_local_bb0_ld__read,
		output 		avm_local_bb0_ld__write,
		input 		avm_local_bb0_ld__writeack,
		output [511:0] 		avm_local_bb0_ld__writedata,
		output [63:0] 		avm_local_bb0_ld__byteenable,
		output [4:0] 		avm_local_bb0_ld__burstcount,
		output 		local_bb0_ld__active,
		input 		clock2x
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_0_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_global_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_global_id_0_staging_reg_NO_SHIFT_REG <= input_global_id_0;
				input_global_id_1_staging_reg_NO_SHIFT_REG <= input_global_id_1;
				input_global_id_2_staging_reg_NO_SHIFT_REG <= input_global_id_2;
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements a registered operation.
// 
wire local_bb0_inputTotalDataNum_inputs_ready;
 reg local_bb0_inputTotalDataNum_wii_reg_NO_SHIFT_REG;
 reg local_bb0_inputTotalDataNum_valid_out_NO_SHIFT_REG;
wire local_bb0_inputTotalDataNum_stall_in;
wire local_bb0_inputTotalDataNum_output_regs_ready;
 reg [63:0] local_bb0_inputTotalDataNum_NO_SHIFT_REG;
wire [63:0] local_bb0_inputTotalDataNum_op_wire;
wire local_bb0_inputTotalDataNum_causedstall;

assign local_bb0_inputTotalDataNum_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb0_inputTotalDataNum_output_regs_ready = (~(local_bb0_inputTotalDataNum_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_inputTotalDataNum_valid_out_NO_SHIFT_REG) | ~(local_bb0_inputTotalDataNum_stall_in))));
assign local_bb0_inputTotalDataNum_op_wire = ((input_param & 64'hFFFFFFFFFFFFFC00) + 64'h2C);
assign merge_node_stall_in_0 = (~(local_bb0_inputTotalDataNum_wii_reg_NO_SHIFT_REG) & (~(local_bb0_inputTotalDataNum_output_regs_ready) | ~(local_bb0_inputTotalDataNum_inputs_ready)));
assign local_bb0_inputTotalDataNum_causedstall = (local_bb0_inputTotalDataNum_inputs_ready && (~(local_bb0_inputTotalDataNum_output_regs_ready) && !(~(local_bb0_inputTotalDataNum_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_inputTotalDataNum_NO_SHIFT_REG <= 'x;
		local_bb0_inputTotalDataNum_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_inputTotalDataNum_NO_SHIFT_REG <= 'x;
			local_bb0_inputTotalDataNum_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_inputTotalDataNum_output_regs_ready)
			begin
				local_bb0_inputTotalDataNum_NO_SHIFT_REG <= local_bb0_inputTotalDataNum_op_wire;
				local_bb0_inputTotalDataNum_valid_out_NO_SHIFT_REG <= local_bb0_inputTotalDataNum_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_inputTotalDataNum_stall_in))
				begin
					local_bb0_inputTotalDataNum_valid_out_NO_SHIFT_REG <= local_bb0_inputTotalDataNum_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_inputTotalDataNum_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_inputTotalDataNum_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_inputTotalDataNum_inputs_ready)
			begin
				local_bb0_inputTotalDataNum_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_mul14_inputs_ready;
 reg local_bb0_mul14_wii_reg_NO_SHIFT_REG;
 reg local_bb0_mul14_valid_out_NO_SHIFT_REG;
wire local_bb0_mul14_stall_in;
wire local_bb0_mul14_output_regs_ready;
wire [31:0] local_bb0_mul14;
 reg local_bb0_mul14_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb0_mul14_valid_pipe_1_NO_SHIFT_REG;
wire local_bb0_mul14_causedstall;

acl_int_mult int_module_local_bb0_mul14 (
	.clock(clock),
	.dataa(input_global_size_2),
	.datab(input_global_size_1),
	.enable(local_bb0_mul14_output_regs_ready),
	.result(local_bb0_mul14)
);

defparam int_module_local_bb0_mul14.INPUT1_WIDTH = 32;
defparam int_module_local_bb0_mul14.INPUT2_WIDTH = 32;
defparam int_module_local_bb0_mul14.OUTPUT_WIDTH = 32;
defparam int_module_local_bb0_mul14.LATENCY = 3;
defparam int_module_local_bb0_mul14.SIGNED = 0;

assign local_bb0_mul14_inputs_ready = merge_node_valid_out_1_NO_SHIFT_REG;
assign local_bb0_mul14_output_regs_ready = (~(local_bb0_mul14_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_mul14_valid_out_NO_SHIFT_REG) | ~(local_bb0_mul14_stall_in))));
assign merge_node_stall_in_1 = (~(local_bb0_mul14_wii_reg_NO_SHIFT_REG) & (~(local_bb0_mul14_output_regs_ready) | ~(local_bb0_mul14_inputs_ready)));
assign local_bb0_mul14_causedstall = (local_bb0_mul14_inputs_ready && (~(local_bb0_mul14_output_regs_ready) && !(~(local_bb0_mul14_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_mul14_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb0_mul14_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_mul14_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
			local_bb0_mul14_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_mul14_output_regs_ready)
			begin
				local_bb0_mul14_valid_pipe_0_NO_SHIFT_REG <= local_bb0_mul14_inputs_ready;
				local_bb0_mul14_valid_pipe_1_NO_SHIFT_REG <= local_bb0_mul14_valid_pipe_0_NO_SHIFT_REG;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_mul14_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_mul14_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_mul14_output_regs_ready)
			begin
				local_bb0_mul14_valid_out_NO_SHIFT_REG <= local_bb0_mul14_valid_pipe_1_NO_SHIFT_REG;
			end
			else
			begin
				if (~(local_bb0_mul14_stall_in))
				begin
					local_bb0_mul14_valid_out_NO_SHIFT_REG <= local_bb0_mul14_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_mul14_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_mul14_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_mul14_valid_pipe_1_NO_SHIFT_REG)
			begin
				local_bb0_mul14_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_6to6_bb0_inputTotalDataNum_valid_out;
wire rstag_6to6_bb0_inputTotalDataNum_stall_in;
wire rstag_6to6_bb0_inputTotalDataNum_inputs_ready;
wire rstag_6to6_bb0_inputTotalDataNum_stall_local;
 reg rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG;
wire rstag_6to6_bb0_inputTotalDataNum_combined_valid;
 reg [63:0] rstag_6to6_bb0_inputTotalDataNum_staging_reg_NO_SHIFT_REG;
wire [63:0] rstag_6to6_bb0_inputTotalDataNum;

assign rstag_6to6_bb0_inputTotalDataNum_inputs_ready = local_bb0_inputTotalDataNum_valid_out_NO_SHIFT_REG;
assign rstag_6to6_bb0_inputTotalDataNum = (rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG ? rstag_6to6_bb0_inputTotalDataNum_staging_reg_NO_SHIFT_REG : ((local_bb0_inputTotalDataNum_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFC2C) | 64'h2C));
assign rstag_6to6_bb0_inputTotalDataNum_combined_valid = (rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG | rstag_6to6_bb0_inputTotalDataNum_inputs_ready);
assign rstag_6to6_bb0_inputTotalDataNum_valid_out = rstag_6to6_bb0_inputTotalDataNum_combined_valid;
assign rstag_6to6_bb0_inputTotalDataNum_stall_local = rstag_6to6_bb0_inputTotalDataNum_stall_in;
assign local_bb0_inputTotalDataNum_stall_in = (|rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_6to6_bb0_inputTotalDataNum_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (start)
		begin
			rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (rstag_6to6_bb0_inputTotalDataNum_stall_local)
			begin
				if (~(rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG))
				begin
					rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG <= rstag_6to6_bb0_inputTotalDataNum_inputs_ready;
				end
			end
			else
			begin
				rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG <= 1'b0;
			end
		end
		if (~(rstag_6to6_bb0_inputTotalDataNum_staging_valid_NO_SHIFT_REG))
		begin
			rstag_6to6_bb0_inputTotalDataNum_staging_reg_NO_SHIFT_REG <= ((local_bb0_inputTotalDataNum_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFC2C) | 64'h2C);
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_mul16_inputs_ready;
 reg local_bb0_mul16_wii_reg_NO_SHIFT_REG;
 reg local_bb0_mul16_valid_out_NO_SHIFT_REG;
wire local_bb0_mul16_stall_in;
wire local_bb0_mul16_output_regs_ready;
wire [31:0] local_bb0_mul16;
 reg local_bb0_mul16_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb0_mul16_valid_pipe_1_NO_SHIFT_REG;
wire local_bb0_mul16_causedstall;

acl_int_mult int_module_local_bb0_mul16 (
	.clock(clock),
	.dataa(local_bb0_mul14),
	.datab(input_global_size_0),
	.enable(local_bb0_mul16_output_regs_ready),
	.result(local_bb0_mul16)
);

defparam int_module_local_bb0_mul16.INPUT1_WIDTH = 32;
defparam int_module_local_bb0_mul16.INPUT2_WIDTH = 32;
defparam int_module_local_bb0_mul16.OUTPUT_WIDTH = 32;
defparam int_module_local_bb0_mul16.LATENCY = 3;
defparam int_module_local_bb0_mul16.SIGNED = 0;

assign local_bb0_mul16_inputs_ready = (local_bb0_mul14_valid_out_NO_SHIFT_REG & merge_node_valid_out_2_NO_SHIFT_REG);
assign local_bb0_mul16_output_regs_ready = (~(local_bb0_mul16_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_mul16_valid_out_NO_SHIFT_REG) | ~(local_bb0_mul16_stall_in))));
assign local_bb0_mul14_stall_in = (~(local_bb0_mul16_wii_reg_NO_SHIFT_REG) & (~(local_bb0_mul16_output_regs_ready) | ~(local_bb0_mul16_inputs_ready)));
assign merge_node_stall_in_2 = (~(local_bb0_mul16_wii_reg_NO_SHIFT_REG) & (~(local_bb0_mul16_output_regs_ready) | ~(local_bb0_mul16_inputs_ready)));
assign local_bb0_mul16_causedstall = (local_bb0_mul16_inputs_ready && (~(local_bb0_mul16_output_regs_ready) && !(~(local_bb0_mul16_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_mul16_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb0_mul16_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_mul16_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
			local_bb0_mul16_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_mul16_output_regs_ready)
			begin
				local_bb0_mul16_valid_pipe_0_NO_SHIFT_REG <= local_bb0_mul16_inputs_ready;
				local_bb0_mul16_valid_pipe_1_NO_SHIFT_REG <= local_bb0_mul16_valid_pipe_0_NO_SHIFT_REG;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_mul16_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_mul16_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_mul16_output_regs_ready)
			begin
				local_bb0_mul16_valid_out_NO_SHIFT_REG <= local_bb0_mul16_valid_pipe_1_NO_SHIFT_REG;
			end
			else
			begin
				if (~(local_bb0_mul16_stall_in))
				begin
					local_bb0_mul16_valid_out_NO_SHIFT_REG <= local_bb0_mul16_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_mul16_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_mul16_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_mul16_valid_pipe_1_NO_SHIFT_REG)
			begin
				local_bb0_mul16_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_ld__inputs_ready;
 reg local_bb0_ld__wii_reg_NO_SHIFT_REG;
 reg local_bb0_ld__valid_out_NO_SHIFT_REG;
wire local_bb0_ld__stall_in;
wire local_bb0_ld__output_regs_ready;
wire local_bb0_ld__fu_stall_out;
wire local_bb0_ld__fu_valid_out;
wire [31:0] local_bb0_ld__lsu_dataout;
 reg [31:0] local_bb0_ld__NO_SHIFT_REG;
wire local_bb0_ld__causedstall;

lsu_top lsu_local_bb0_ld_ (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb0_ld__fu_stall_out),
	.i_valid((~(local_bb0_ld__wii_reg_NO_SHIFT_REG) & local_bb0_ld__inputs_ready)),
	.i_address(((rstag_6to6_bb0_inputTotalDataNum & 64'hFFFFFFFFFFFFFC2C) | 64'h2C)),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(1'b0),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb0_ld__output_regs_ready)),
	.o_valid(local_bb0_ld__fu_valid_out),
	.o_readdata(local_bb0_ld__lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb0_ld__active),
	.avm_address(avm_local_bb0_ld__address),
	.avm_read(avm_local_bb0_ld__read),
	.avm_enable(avm_local_bb0_ld__enable),
	.avm_readdata(avm_local_bb0_ld__readdata),
	.avm_write(avm_local_bb0_ld__write),
	.avm_writeack(avm_local_bb0_ld__writeack),
	.avm_burstcount(avm_local_bb0_ld__burstcount),
	.avm_writedata(avm_local_bb0_ld__writedata),
	.avm_byteenable(avm_local_bb0_ld__byteenable),
	.avm_waitrequest(avm_local_bb0_ld__waitrequest),
	.avm_readdatavalid(avm_local_bb0_ld__readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb0_ld_.AWIDTH = 32;
defparam lsu_local_bb0_ld_.WIDTH_BYTES = 4;
defparam lsu_local_bb0_ld_.MWIDTH_BYTES = 64;
defparam lsu_local_bb0_ld_.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb0_ld_.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb0_ld_.READ = 1;
defparam lsu_local_bb0_ld_.ATOMIC = 0;
defparam lsu_local_bb0_ld_.WIDTH = 32;
defparam lsu_local_bb0_ld_.MWIDTH = 512;
defparam lsu_local_bb0_ld_.ATOMIC_WIDTH = 3;
defparam lsu_local_bb0_ld_.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb0_ld_.KERNEL_SIDE_MEM_LATENCY = 1;
defparam lsu_local_bb0_ld_.MEMORY_SIDE_MEM_LATENCY = 0;
defparam lsu_local_bb0_ld_.USE_WRITE_ACK = 0;
defparam lsu_local_bb0_ld_.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb0_ld_.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb0_ld_.NUMBER_BANKS = 1;
defparam lsu_local_bb0_ld_.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb0_ld_.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb0_ld_.USEINPUTFIFO = 0;
defparam lsu_local_bb0_ld_.USECACHING = 0;
defparam lsu_local_bb0_ld_.USEOUTPUTFIFO = 1;
defparam lsu_local_bb0_ld_.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb0_ld_.ADDRSPACE = 1;
defparam lsu_local_bb0_ld_.STYLE = "SIMPLE";

assign local_bb0_ld__inputs_ready = rstag_6to6_bb0_inputTotalDataNum_valid_out;
assign local_bb0_ld__output_regs_ready = (~(local_bb0_ld__wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_ld__valid_out_NO_SHIFT_REG) | ~(local_bb0_ld__stall_in))));
assign rstag_6to6_bb0_inputTotalDataNum_stall_in = (~(local_bb0_ld__wii_reg_NO_SHIFT_REG) & (local_bb0_ld__fu_stall_out | ~((~(local_bb0_ld__wii_reg_NO_SHIFT_REG) & local_bb0_ld__inputs_ready))));
assign local_bb0_ld__causedstall = ((~(local_bb0_ld__wii_reg_NO_SHIFT_REG) & local_bb0_ld__inputs_ready) && (local_bb0_ld__fu_stall_out && !(~(local_bb0_ld__output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_ld__NO_SHIFT_REG <= 'x;
		local_bb0_ld__valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_ld__NO_SHIFT_REG <= 'x;
			local_bb0_ld__valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_ld__output_regs_ready)
			begin
				local_bb0_ld__NO_SHIFT_REG <= local_bb0_ld__lsu_dataout;
				local_bb0_ld__valid_out_NO_SHIFT_REG <= local_bb0_ld__fu_valid_out;
			end
			else
			begin
				if (~(local_bb0_ld__stall_in))
				begin
					local_bb0_ld__valid_out_NO_SHIFT_REG <= local_bb0_ld__wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_ld__wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_ld__wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_ld__fu_valid_out)
			begin
				local_bb0_ld__wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_7to7_bb0_ld__valid_out;
wire rstag_7to7_bb0_ld__stall_in;
wire rstag_7to7_bb0_ld__inputs_ready;
wire rstag_7to7_bb0_ld__stall_local;
 reg rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG;
wire rstag_7to7_bb0_ld__combined_valid;
 reg [31:0] rstag_7to7_bb0_ld__staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_7to7_bb0_ld_;

assign rstag_7to7_bb0_ld__inputs_ready = local_bb0_ld__valid_out_NO_SHIFT_REG;
assign rstag_7to7_bb0_ld_ = (rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG ? rstag_7to7_bb0_ld__staging_reg_NO_SHIFT_REG : local_bb0_ld__NO_SHIFT_REG);
assign rstag_7to7_bb0_ld__combined_valid = (rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG | rstag_7to7_bb0_ld__inputs_ready);
assign rstag_7to7_bb0_ld__valid_out = rstag_7to7_bb0_ld__combined_valid;
assign rstag_7to7_bb0_ld__stall_local = rstag_7to7_bb0_ld__stall_in;
assign local_bb0_ld__stall_in = (|rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_7to7_bb0_ld__staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (start)
		begin
			rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (rstag_7to7_bb0_ld__stall_local)
			begin
				if (~(rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG))
				begin
					rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG <= rstag_7to7_bb0_ld__inputs_ready;
				end
			end
			else
			begin
				rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
			end
		end
		if (~(rstag_7to7_bb0_ld__staging_valid_NO_SHIFT_REG))
		begin
			rstag_7to7_bb0_ld__staging_reg_NO_SHIFT_REG <= local_bb0_ld__NO_SHIFT_REG;
		end
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg [31:0] lvb_bb0_ld__reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb0_mul16_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_1_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_global_id_2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (merge_node_valid_out_3_NO_SHIFT_REG & local_bb0_mul16_valid_out_NO_SHIFT_REG & rstag_7to7_bb0_ld__valid_out);
assign branch_var__output_regs_ready = (~(stall_in) | ~(branch_node_valid_out_NO_SHIFT_REG));
assign merge_node_stall_in_3 = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb0_mul16_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rstag_7to7_bb0_ld__stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_bb0_ld_ = lvb_bb0_ld__reg_NO_SHIFT_REG;
assign lvb_bb0_mul16 = lvb_bb0_mul16_reg_NO_SHIFT_REG;
assign lvb_input_global_id_0 = lvb_input_global_id_0_reg_NO_SHIFT_REG;
assign lvb_input_global_id_1 = lvb_input_global_id_1_reg_NO_SHIFT_REG;
assign lvb_input_global_id_2 = lvb_input_global_id_2_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id = lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;
assign combined_branch_stall_in_signal = stall_in;
assign valid_out = branch_node_valid_out_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
		lvb_bb0_ld__reg_NO_SHIFT_REG <= 'x;
		lvb_bb0_mul16_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_1_reg_NO_SHIFT_REG <= 'x;
		lvb_input_global_id_2_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_bb0_ld__reg_NO_SHIFT_REG <= rstag_7to7_bb0_ld_;
			lvb_bb0_mul16_reg_NO_SHIFT_REG <= local_bb0_mul16;
			lvb_input_global_id_0_reg_NO_SHIFT_REG <= local_lvm_input_global_id_0_NO_SHIFT_REG;
			lvb_input_global_id_1_reg_NO_SHIFT_REG <= local_lvm_input_global_id_1_NO_SHIFT_REG;
			lvb_input_global_id_2_reg_NO_SHIFT_REG <= local_lvm_input_global_id_2_NO_SHIFT_REG;
			lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module outputLayer_basic_block_1
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_global_size_1,
		input [31:0] 		input_global_size_2,
		input [31:0] 		input_wii_ld_,
		input [31:0] 		input_wii_mul16,
		input 		valid_in,
		output 		stall_out,
		input [31:0] 		input_global_id_0,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out,
		input 		stall_in,
		output [31:0] 		lvb_bb1_c4_exe1,
		output 		lvb_bb1_c4_exe2,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		input 		start
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_global_id_2_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_0_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_1_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_global_id_2_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_global_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_global_id_2_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_global_id_0_staging_reg_NO_SHIFT_REG <= input_global_id_0;
				input_global_id_1_staging_reg_NO_SHIFT_REG <= input_global_id_1;
				input_global_id_2_staging_reg_NO_SHIFT_REG <= input_global_id_2;
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_input_global_id_0_NO_SHIFT_REG <= input_global_id_0;
					local_lvm_input_global_id_1_NO_SHIFT_REG <= input_global_id_1;
					local_lvm_input_global_id_2_NO_SHIFT_REG <= input_global_id_2;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(*)
begin
	merge_node_valid_out_1_NO_SHIFT_REG = merge_node_valid_out_0_NO_SHIFT_REG;
	merge_node_valid_out_2_NO_SHIFT_REG = merge_node_valid_out_0_NO_SHIFT_REG;
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1_c1_eni1_stall_local;
wire [127:0] local_bb1_c1_eni1;

assign local_bb1_c1_eni1[31:0] = 32'bx;
assign local_bb1_c1_eni1[63:32] = local_lvm_input_global_id_0_NO_SHIFT_REG;
assign local_bb1_c1_eni1[127:64] = 64'bx;

// Register node:
//  * latency = 8
//  * capacity = 8
 logic rnode_1to9_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to9_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to9_input_acl_hw_wg_id_0_NO_SHIFT_REG;
 logic rnode_1to9_input_acl_hw_wg_id_0_reg_9_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to9_input_acl_hw_wg_id_0_reg_9_NO_SHIFT_REG;
 logic rnode_1to9_input_acl_hw_wg_id_0_valid_out_reg_9_NO_SHIFT_REG;
 logic rnode_1to9_input_acl_hw_wg_id_0_stall_in_reg_9_NO_SHIFT_REG;
 logic rnode_1to9_input_acl_hw_wg_id_0_stall_out_reg_9_NO_SHIFT_REG;

acl_data_fifo rnode_1to9_input_acl_hw_wg_id_0_reg_9_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to9_input_acl_hw_wg_id_0_reg_9_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to9_input_acl_hw_wg_id_0_stall_in_reg_9_NO_SHIFT_REG),
	.valid_out(rnode_1to9_input_acl_hw_wg_id_0_valid_out_reg_9_NO_SHIFT_REG),
	.stall_out(rnode_1to9_input_acl_hw_wg_id_0_stall_out_reg_9_NO_SHIFT_REG),
	.data_in(local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG),
	.data_out(rnode_1to9_input_acl_hw_wg_id_0_reg_9_NO_SHIFT_REG)
);

defparam rnode_1to9_input_acl_hw_wg_id_0_reg_9_fifo.DEPTH = 9;
defparam rnode_1to9_input_acl_hw_wg_id_0_reg_9_fifo.DATA_WIDTH = 32;
defparam rnode_1to9_input_acl_hw_wg_id_0_reg_9_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to9_input_acl_hw_wg_id_0_reg_9_fifo.IMPL = "ram_plus_reg";

assign rnode_1to9_input_acl_hw_wg_id_0_reg_9_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_3_NO_SHIFT_REG;
assign merge_node_stall_in_3 = rnode_1to9_input_acl_hw_wg_id_0_stall_out_reg_9_NO_SHIFT_REG;
assign rnode_1to9_input_acl_hw_wg_id_0_NO_SHIFT_REG = rnode_1to9_input_acl_hw_wg_id_0_reg_9_NO_SHIFT_REG;
assign rnode_1to9_input_acl_hw_wg_id_0_stall_in_reg_9_NO_SHIFT_REG = rnode_1to9_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG;
assign rnode_1to9_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG = rnode_1to9_input_acl_hw_wg_id_0_valid_out_reg_9_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb1_c1_eni2_stall_local;
wire [127:0] local_bb1_c1_eni2;

assign local_bb1_c1_eni2[63:0] = local_bb1_c1_eni1[63:0];
assign local_bb1_c1_eni2[95:64] = local_lvm_input_global_id_1_NO_SHIFT_REG;
assign local_bb1_c1_eni2[127:96] = local_bb1_c1_eni1[127:96];

// This section implements an unregistered operation.
// 
wire local_bb1_c1_eni3_valid_out;
wire local_bb1_c1_eni3_stall_in;
wire local_bb1_c1_eni3_inputs_ready;
wire local_bb1_c1_eni3_stall_local;
wire [127:0] local_bb1_c1_eni3;

assign local_bb1_c1_eni3_inputs_ready = (merge_node_valid_out_0_NO_SHIFT_REG & merge_node_valid_out_1_NO_SHIFT_REG & merge_node_valid_out_2_NO_SHIFT_REG);
assign local_bb1_c1_eni3[95:0] = local_bb1_c1_eni2[95:0];
assign local_bb1_c1_eni3[127:96] = local_lvm_input_global_id_2_NO_SHIFT_REG;
assign local_bb1_c1_eni3_valid_out = local_bb1_c1_eni3_inputs_ready;
assign local_bb1_c1_eni3_stall_local = local_bb1_c1_eni3_stall_in;
assign merge_node_stall_in_0 = (local_bb1_c1_eni3_stall_local | ~(local_bb1_c1_eni3_inputs_ready));
assign merge_node_stall_in_1 = (local_bb1_c1_eni3_stall_local | ~(local_bb1_c1_eni3_inputs_ready));
assign merge_node_stall_in_2 = (local_bb1_c1_eni3_stall_local | ~(local_bb1_c1_eni3_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb1_c1_enter_c1_eni3_valid_out_0;
wire local_bb1_c1_enter_c1_eni3_stall_in_0;
wire local_bb1_c1_enter_c1_eni3_valid_out_1;
wire local_bb1_c1_enter_c1_eni3_stall_in_1;
wire local_bb1_c1_enter_c1_eni3_valid_out_2;
wire local_bb1_c1_enter_c1_eni3_stall_in_2;
wire local_bb1_c1_enter_c1_eni3_valid_out_3;
wire local_bb1_c1_enter_c1_eni3_stall_in_3;
wire local_bb1_c1_enter_c1_eni3_inputs_ready;
wire local_bb1_c1_enter_c1_eni3_stall_local;
wire local_bb1_c1_enter_c1_eni3_input_accepted;
wire [127:0] local_bb1_c1_enter_c1_eni3;
wire local_bb1_c1_exit_c1_exi3_enable;
wire local_bb1_c1_exit_c1_exi3_entry_stall;
wire local_bb1_c1_enter_c1_eni3_valid_bit;
wire local_bb1_c1_exit_c1_exi3_output_regs_ready;
wire local_bb1_c1_exit_c1_exi3_valid_in;
wire local_bb1_c1_exit_c1_exi3_phases;
wire local_bb1_c1_enter_c1_eni3_inc_pipelined_thread;
wire local_bb1_c1_enter_c1_eni3_dec_pipelined_thread;
wire local_bb1_c1_enter_c1_eni3_fu_stall_out;

assign local_bb1_c1_enter_c1_eni3_inputs_ready = local_bb1_c1_eni3_valid_out;
assign local_bb1_c1_enter_c1_eni3 = local_bb1_c1_eni3;
assign local_bb1_c1_enter_c1_eni3_input_accepted = (local_bb1_c1_enter_c1_eni3_inputs_ready && !(local_bb1_c1_exit_c1_exi3_entry_stall));
assign local_bb1_c1_enter_c1_eni3_valid_bit = local_bb1_c1_enter_c1_eni3_input_accepted;
assign local_bb1_c1_enter_c1_eni3_inc_pipelined_thread = 1'b1;
assign local_bb1_c1_enter_c1_eni3_dec_pipelined_thread = ~(1'b0);
assign local_bb1_c1_enter_c1_eni3_fu_stall_out = (~(local_bb1_c1_enter_c1_eni3_inputs_ready) | local_bb1_c1_exit_c1_exi3_entry_stall);
assign local_bb1_c1_enter_c1_eni3_stall_local = (local_bb1_c1_enter_c1_eni3_stall_in_0 | local_bb1_c1_enter_c1_eni3_stall_in_1 | local_bb1_c1_enter_c1_eni3_stall_in_2 | local_bb1_c1_enter_c1_eni3_stall_in_3);
assign local_bb1_c1_enter_c1_eni3_valid_out_0 = local_bb1_c1_enter_c1_eni3_inputs_ready;
assign local_bb1_c1_enter_c1_eni3_valid_out_1 = local_bb1_c1_enter_c1_eni3_inputs_ready;
assign local_bb1_c1_enter_c1_eni3_valid_out_2 = local_bb1_c1_enter_c1_eni3_inputs_ready;
assign local_bb1_c1_enter_c1_eni3_valid_out_3 = local_bb1_c1_enter_c1_eni3_inputs_ready;
assign local_bb1_c1_eni3_stall_in = (|local_bb1_c1_enter_c1_eni3_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb1_c1_ene1_valid_out;
wire local_bb1_c1_ene1_stall_in;
wire local_bb1_c1_ene1_inputs_ready;
wire local_bb1_c1_ene1_stall_local;
wire [31:0] local_bb1_c1_ene1;

assign local_bb1_c1_ene1_inputs_ready = local_bb1_c1_enter_c1_eni3_valid_out_0;
assign local_bb1_c1_ene1[31:0] = local_bb1_c1_enter_c1_eni3[63:32];
assign local_bb1_c1_ene1_valid_out = 1'b1;
assign local_bb1_c1_enter_c1_eni3_stall_in_0 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c1_ene2_valid_out;
wire local_bb1_c1_ene2_stall_in;
wire local_bb1_c1_ene2_inputs_ready;
wire local_bb1_c1_ene2_stall_local;
wire [31:0] local_bb1_c1_ene2;

assign local_bb1_c1_ene2_inputs_ready = local_bb1_c1_enter_c1_eni3_valid_out_1;
assign local_bb1_c1_ene2[31:0] = local_bb1_c1_enter_c1_eni3[95:64];
assign local_bb1_c1_ene2_valid_out = 1'b1;
assign local_bb1_c1_enter_c1_eni3_stall_in_1 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c1_ene3_valid_out;
wire local_bb1_c1_ene3_stall_in;
wire local_bb1_c1_ene3_inputs_ready;
wire local_bb1_c1_ene3_stall_local;
wire [31:0] local_bb1_c1_ene3;

assign local_bb1_c1_ene3_inputs_ready = local_bb1_c1_enter_c1_eni3_valid_out_2;
assign local_bb1_c1_ene3[31:0] = local_bb1_c1_enter_c1_eni3[127:96];
assign local_bb1_c1_ene3_valid_out = 1'b1;
assign local_bb1_c1_enter_c1_eni3_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire SFC_1_VALID_1_1_0_valid_out;
wire SFC_1_VALID_1_1_0_stall_in;
wire SFC_1_VALID_1_1_0_inputs_ready;
wire SFC_1_VALID_1_1_0_stall_local;
wire SFC_1_VALID_1_1_0;

assign SFC_1_VALID_1_1_0_inputs_ready = local_bb1_c1_enter_c1_eni3_valid_out_3;
assign SFC_1_VALID_1_1_0 = local_bb1_c1_enter_c1_eni3_valid_bit;
assign SFC_1_VALID_1_1_0_valid_out = 1'b1;
assign local_bb1_c1_enter_c1_eni3_stall_in_3 = 1'b0;

// This section implements a registered operation.
// 
wire local_bb1_var__inputs_ready;
 reg local_bb1_var__valid_out_NO_SHIFT_REG;
wire local_bb1_var__stall_in;
wire local_bb1_var__output_regs_ready;
wire [31:0] local_bb1_var_;
 reg local_bb1_var__valid_pipe_0_NO_SHIFT_REG;
 reg local_bb1_var__valid_pipe_1_NO_SHIFT_REG;
wire local_bb1_var__causedstall;

acl_int_mult int_module_local_bb1_var_ (
	.clock(clock),
	.dataa(local_bb1_c1_ene1),
	.datab(input_global_size_1),
	.enable(local_bb1_var__output_regs_ready),
	.result(local_bb1_var_)
);

defparam int_module_local_bb1_var_.INPUT1_WIDTH = 32;
defparam int_module_local_bb1_var_.INPUT2_WIDTH = 32;
defparam int_module_local_bb1_var_.OUTPUT_WIDTH = 32;
defparam int_module_local_bb1_var_.LATENCY = 3;
defparam int_module_local_bb1_var_.SIGNED = 0;

assign local_bb1_var__inputs_ready = 1'b1;
assign local_bb1_var__output_regs_ready = local_bb1_c1_exit_c1_exi3_enable;
assign local_bb1_c1_ene1_stall_in = 1'b0;
assign local_bb1_var__causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c1_exit_c1_exi3_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb1_var__valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb1_var__valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb1_var__output_regs_ready)
		begin
			local_bb1_var__valid_pipe_0_NO_SHIFT_REG <= 1'b1;
			local_bb1_var__valid_pipe_1_NO_SHIFT_REG <= local_bb1_var__valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb1_var__valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb1_var__output_regs_ready)
		begin
			local_bb1_var__valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb1_var__stall_in))
			begin
				local_bb1_var__valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb1_c1_ene2_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene2_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb1_c1_ene2_0_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene2_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb1_c1_ene2_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene2_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene2_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene2_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb1_c1_ene2_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb1_c1_ene2_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb1_c1_ene2_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb1_c1_ene2_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb1_c1_ene2_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb1_c1_ene2),
	.data_out(rnode_1to2_bb1_c1_ene2_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb1_c1_ene2_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb1_c1_ene2_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb1_c1_ene2_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb1_c1_ene2_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb1_c1_ene2_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb1_c1_ene2_stall_in = 1'b0;
assign rnode_1to2_bb1_c1_ene2_0_NO_SHIFT_REG = rnode_1to2_bb1_c1_ene2_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb1_c1_ene2_0_stall_in_reg_2_NO_SHIFT_REG = ~(local_bb1_c1_exit_c1_exi3_enable);
assign rnode_1to2_bb1_c1_ene2_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb1_c1_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb1_c1_ene3_0_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene3_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb1_c1_ene3_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene3_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene3_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb1_c1_ene3_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb1_c1_ene3_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb1_c1_ene3_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb1_c1_ene3_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb1_c1_ene3_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb1_c1_ene3_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb1_c1_ene3),
	.data_out(rnode_1to2_bb1_c1_ene3_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb1_c1_ene3_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb1_c1_ene3_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb1_c1_ene3_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb1_c1_ene3_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb1_c1_ene3_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb1_c1_ene3_stall_in = 1'b0;
assign rnode_1to2_bb1_c1_ene3_0_NO_SHIFT_REG = rnode_1to2_bb1_c1_ene3_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb1_c1_ene3_0_stall_in_reg_2_NO_SHIFT_REG = ~(local_bb1_c1_exit_c1_exi3_enable);
assign rnode_1to2_bb1_c1_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_1_VALID_1_2_0_inputs_ready;
 reg SFC_1_VALID_1_2_0_valid_out_NO_SHIFT_REG;
wire SFC_1_VALID_1_2_0_stall_in;
wire SFC_1_VALID_1_2_0_output_regs_ready;
 reg SFC_1_VALID_1_2_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_1_VALID_1_2_0_causedstall;

assign SFC_1_VALID_1_2_0_inputs_ready = 1'b1;
assign SFC_1_VALID_1_2_0_output_regs_ready = local_bb1_c1_exit_c1_exi3_enable;
assign SFC_1_VALID_1_1_0_stall_in = 1'b0;
assign SFC_1_VALID_1_2_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c1_exit_c1_exi3_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_1_VALID_1_2_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_1_VALID_1_2_0_output_regs_ready)
		begin
			SFC_1_VALID_1_2_0_NO_SHIFT_REG <= SFC_1_VALID_1_1_0;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1_c1_exi1_stall_local;
wire [127:0] local_bb1_c1_exi1;

assign local_bb1_c1_exi1[31:0] = 32'bx;
assign local_bb1_c1_exi1[63:32] = local_bb1_var_;
assign local_bb1_c1_exi1[127:64] = 64'bx;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb1_c1_ene2_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene2_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb1_c1_ene2_0_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene2_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb1_c1_ene2_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene2_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene2_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene2_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb1_c1_ene2_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb1_c1_ene2_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb1_c1_ene2_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb1_c1_ene2_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb1_c1_ene2_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb1_c1_ene2_0_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb1_c1_ene2_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb1_c1_ene2_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb1_c1_ene2_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb1_c1_ene2_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb1_c1_ene2_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb1_c1_ene2_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb1_c1_ene2_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb1_c1_ene2_0_NO_SHIFT_REG = rnode_2to3_bb1_c1_ene2_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb1_c1_ene2_0_stall_in_reg_3_NO_SHIFT_REG = ~(local_bb1_c1_exit_c1_exi3_enable);
assign rnode_2to3_bb1_c1_ene2_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb1_c1_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb1_c1_ene3_0_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene3_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb1_c1_ene3_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene3_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene3_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb1_c1_ene3_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb1_c1_ene3_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb1_c1_ene3_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb1_c1_ene3_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb1_c1_ene3_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb1_c1_ene3_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb1_c1_ene3_0_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb1_c1_ene3_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb1_c1_ene3_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb1_c1_ene3_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb1_c1_ene3_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb1_c1_ene3_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb1_c1_ene3_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb1_c1_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb1_c1_ene3_0_NO_SHIFT_REG = rnode_2to3_bb1_c1_ene3_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb1_c1_ene3_0_stall_in_reg_3_NO_SHIFT_REG = ~(local_bb1_c1_exit_c1_exi3_enable);
assign rnode_2to3_bb1_c1_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_1_VALID_2_3_0_inputs_ready;
 reg SFC_1_VALID_2_3_0_valid_out_NO_SHIFT_REG;
wire SFC_1_VALID_2_3_0_stall_in;
wire SFC_1_VALID_2_3_0_output_regs_ready;
 reg SFC_1_VALID_2_3_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_1_VALID_2_3_0_causedstall;

assign SFC_1_VALID_2_3_0_inputs_ready = 1'b1;
assign SFC_1_VALID_2_3_0_output_regs_ready = local_bb1_c1_exit_c1_exi3_enable;
assign SFC_1_VALID_1_2_0_stall_in = 1'b0;
assign SFC_1_VALID_2_3_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c1_exit_c1_exi3_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_1_VALID_2_3_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_1_VALID_2_3_0_output_regs_ready)
		begin
			SFC_1_VALID_2_3_0_NO_SHIFT_REG <= SFC_1_VALID_1_2_0_NO_SHIFT_REG;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb1_c1_ene2_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene2_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb1_c1_ene2_0_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene2_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb1_c1_ene2_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene2_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene2_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene2_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb1_c1_ene2_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb1_c1_ene2_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb1_c1_ene2_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb1_c1_ene2_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb1_c1_ene2_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb1_c1_ene2_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb1_c1_ene2_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb1_c1_ene2_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb1_c1_ene2_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb1_c1_ene2_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb1_c1_ene2_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb1_c1_ene2_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb1_c1_ene2_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb1_c1_ene2_0_NO_SHIFT_REG = rnode_3to4_bb1_c1_ene2_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb1_c1_ene2_0_stall_in_reg_4_NO_SHIFT_REG = ~(local_bb1_c1_exit_c1_exi3_enable);
assign rnode_3to4_bb1_c1_ene2_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb1_c1_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb1_c1_ene3_0_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene3_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb1_c1_ene3_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene3_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene3_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb1_c1_ene3_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb1_c1_ene3_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb1_c1_ene3_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb1_c1_ene3_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb1_c1_ene3_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb1_c1_ene3_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb1_c1_ene3_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb1_c1_ene3_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb1_c1_ene3_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb1_c1_ene3_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb1_c1_ene3_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb1_c1_ene3_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb1_c1_ene3_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb1_c1_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb1_c1_ene3_0_NO_SHIFT_REG = rnode_3to4_bb1_c1_ene3_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb1_c1_ene3_0_stall_in_reg_4_NO_SHIFT_REG = ~(local_bb1_c1_exit_c1_exi3_enable);
assign rnode_3to4_bb1_c1_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_1_VALID_3_4_0_inputs_ready;
 reg SFC_1_VALID_3_4_0_valid_out_NO_SHIFT_REG;
wire SFC_1_VALID_3_4_0_stall_in;
wire SFC_1_VALID_3_4_0_output_regs_ready;
 reg SFC_1_VALID_3_4_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_1_VALID_3_4_0_causedstall;

assign SFC_1_VALID_3_4_0_inputs_ready = 1'b1;
assign SFC_1_VALID_3_4_0_output_regs_ready = local_bb1_c1_exit_c1_exi3_enable;
assign SFC_1_VALID_2_3_0_stall_in = 1'b0;
assign SFC_1_VALID_3_4_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c1_exit_c1_exi3_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_1_VALID_3_4_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_1_VALID_3_4_0_output_regs_ready)
		begin
			SFC_1_VALID_3_4_0_NO_SHIFT_REG <= SFC_1_VALID_2_3_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1_c1_exi2_stall_local;
wire [127:0] local_bb1_c1_exi2;

assign local_bb1_c1_exi2[63:0] = local_bb1_c1_exi1[63:0];
assign local_bb1_c1_exi2[95:64] = rnode_3to4_bb1_c1_ene2_0_NO_SHIFT_REG;
assign local_bb1_c1_exi2[127:96] = local_bb1_c1_exi1[127:96];

// This section implements an unregistered operation.
// 
wire local_bb1_c1_exi3_valid_out;
wire local_bb1_c1_exi3_stall_in;
wire local_bb1_c1_exi3_inputs_ready;
wire local_bb1_c1_exi3_stall_local;
wire [127:0] local_bb1_c1_exi3;

assign local_bb1_c1_exi3_inputs_ready = (local_bb1_var__valid_out_NO_SHIFT_REG & rnode_3to4_bb1_c1_ene2_0_valid_out_NO_SHIFT_REG & rnode_3to4_bb1_c1_ene3_0_valid_out_NO_SHIFT_REG);
assign local_bb1_c1_exi3[95:0] = local_bb1_c1_exi2[95:0];
assign local_bb1_c1_exi3[127:96] = rnode_3to4_bb1_c1_ene3_0_NO_SHIFT_REG;
assign local_bb1_c1_exi3_valid_out = 1'b1;
assign local_bb1_var__stall_in = 1'b0;
assign rnode_3to4_bb1_c1_ene2_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb1_c1_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c1_exit_c1_exi3_valid_out;
wire local_bb1_c1_exit_c1_exi3_stall_in;
wire local_bb1_c1_exit_c1_exi3_inputs_ready;
wire local_bb1_c1_exit_c1_exi3_stall_local;
wire [127:0] local_bb1_c1_exit_c1_exi3;
wire local_bb1_c1_exit_c1_exi3_valid;
wire local_bb1_c1_exit_c1_exi3_fu_stall_out;

acl_enable_sink local_bb1_c1_exit_c1_exi3_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb1_c1_exi3),
	.data_out(local_bb1_c1_exit_c1_exi3),
	.input_accepted(local_bb1_c1_enter_c1_eni3_input_accepted),
	.valid_out(local_bb1_c1_exit_c1_exi3_valid),
	.stall_in(local_bb1_c1_exit_c1_exi3_stall_local),
	.enable(local_bb1_c1_exit_c1_exi3_enable),
	.valid_in(local_bb1_c1_exit_c1_exi3_valid_in),
	.stall_entry(local_bb1_c1_exit_c1_exi3_entry_stall),
	.inc_pipelined_thread(local_bb1_c1_enter_c1_eni3_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb1_c1_enter_c1_eni3_dec_pipelined_thread)
);

defparam local_bb1_c1_exit_c1_exi3_instance.DATA_WIDTH = 128;
defparam local_bb1_c1_exit_c1_exi3_instance.PIPELINE_DEPTH = 3;
defparam local_bb1_c1_exit_c1_exi3_instance.SCHEDULEII = 1;
defparam local_bb1_c1_exit_c1_exi3_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb1_c1_exit_c1_exi3_inputs_ready = (local_bb1_c1_exi3_valid_out & SFC_1_VALID_3_4_0_valid_out_NO_SHIFT_REG);
assign local_bb1_c1_exit_c1_exi3_valid_in = SFC_1_VALID_3_4_0_NO_SHIFT_REG;
assign local_bb1_c1_exit_c1_exi3_fu_stall_out = ~(local_bb1_c1_exit_c1_exi3_enable);
assign local_bb1_c1_exit_c1_exi3_valid_out = local_bb1_c1_exit_c1_exi3_valid;
assign local_bb1_c1_exit_c1_exi3_stall_local = local_bb1_c1_exit_c1_exi3_stall_in;
assign local_bb1_c1_exi3_stall_in = 1'b0;
assign SFC_1_VALID_3_4_0_stall_in = 1'b0;

// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_0_NO_SHIFT_REG;
 logic [127:0] rnode_4to4_bb1_c1_exit_c1_exi3_0_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_1_NO_SHIFT_REG;
 logic [127:0] rnode_4to4_bb1_c1_exit_c1_exi3_1_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_2_NO_SHIFT_REG;
 logic [127:0] rnode_4to4_bb1_c1_exit_c1_exi3_2_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [127:0] rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_0_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_0_reg_4_NO_SHIFT_REG;
 logic rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_0_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_0_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb1_c1_exit_c1_exi3),
	.data_out(rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_fifo.DEPTH = 3;
defparam rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_fifo.DATA_WIDTH = 128;
defparam rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_fifo.IMPL = "zl_reg";

assign rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_inputs_ready_NO_SHIFT_REG = local_bb1_c1_exit_c1_exi3_valid_out;
assign local_bb1_c1_exit_c1_exi3_stall_in = rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_out_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_0_reg_4_NO_SHIFT_REG = (rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_0_NO_SHIFT_REG | rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_1_NO_SHIFT_REG | rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_2_NO_SHIFT_REG);
assign rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_0_NO_SHIFT_REG = rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_1_NO_SHIFT_REG = rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_2_NO_SHIFT_REG = rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb1_c1_exit_c1_exi3_0_NO_SHIFT_REG = rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb1_c1_exit_c1_exi3_1_NO_SHIFT_REG = rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_NO_SHIFT_REG;
assign rnode_4to4_bb1_c1_exit_c1_exi3_2_NO_SHIFT_REG = rnode_4to4_bb1_c1_exit_c1_exi3_0_reg_4_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb1_c1_exe3_stall_local;
wire [31:0] local_bb1_c1_exe3;

assign local_bb1_c1_exe3[31:0] = rnode_4to4_bb1_c1_exit_c1_exi3_0_NO_SHIFT_REG[127:96];

// This section implements an unregistered operation.
// 
wire local_bb1_c1_exe2_stall_local;
wire [31:0] local_bb1_c1_exe2;

assign local_bb1_c1_exe2[31:0] = rnode_4to4_bb1_c1_exit_c1_exi3_1_NO_SHIFT_REG[95:64];

// This section implements an unregistered operation.
// 
wire local_bb1_c1_exe1_stall_local;
wire [31:0] local_bb1_c1_exe1;

assign local_bb1_c1_exe1[31:0] = rnode_4to4_bb1_c1_exit_c1_exi3_2_NO_SHIFT_REG[63:32];

// This section implements an unregistered operation.
// 
wire local_bb1_c2_eni1_stall_local;
wire [127:0] local_bb1_c2_eni1;

assign local_bb1_c2_eni1[31:0] = 32'bx;
assign local_bb1_c2_eni1[63:32] = local_bb1_c1_exe1;
assign local_bb1_c2_eni1[127:64] = 64'bx;

// This section implements an unregistered operation.
// 
wire local_bb1_c2_eni2_stall_local;
wire [127:0] local_bb1_c2_eni2;

assign local_bb1_c2_eni2[63:0] = local_bb1_c2_eni1[63:0];
assign local_bb1_c2_eni2[95:64] = local_bb1_c1_exe2;
assign local_bb1_c2_eni2[127:96] = local_bb1_c2_eni1[127:96];

// This section implements an unregistered operation.
// 
wire local_bb1_c2_eni3_valid_out;
wire local_bb1_c2_eni3_stall_in;
wire local_bb1_c2_eni3_inputs_ready;
wire local_bb1_c2_eni3_stall_local;
wire [127:0] local_bb1_c2_eni3;

assign local_bb1_c2_eni3_inputs_ready = (rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_0_NO_SHIFT_REG & rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_1_NO_SHIFT_REG & rnode_4to4_bb1_c1_exit_c1_exi3_0_valid_out_2_NO_SHIFT_REG);
assign local_bb1_c2_eni3[95:0] = local_bb1_c2_eni2[95:0];
assign local_bb1_c2_eni3[127:96] = local_bb1_c1_exe3;
assign local_bb1_c2_eni3_valid_out = local_bb1_c2_eni3_inputs_ready;
assign local_bb1_c2_eni3_stall_local = local_bb1_c2_eni3_stall_in;
assign rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_0_NO_SHIFT_REG = (local_bb1_c2_eni3_stall_local | ~(local_bb1_c2_eni3_inputs_ready));
assign rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_1_NO_SHIFT_REG = (local_bb1_c2_eni3_stall_local | ~(local_bb1_c2_eni3_inputs_ready));
assign rnode_4to4_bb1_c1_exit_c1_exi3_0_stall_in_2_NO_SHIFT_REG = (local_bb1_c2_eni3_stall_local | ~(local_bb1_c2_eni3_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb1_c2_enter_c2_eni3_valid_out_0;
wire local_bb1_c2_enter_c2_eni3_stall_in_0;
wire local_bb1_c2_enter_c2_eni3_valid_out_1;
wire local_bb1_c2_enter_c2_eni3_stall_in_1;
wire local_bb1_c2_enter_c2_eni3_valid_out_2;
wire local_bb1_c2_enter_c2_eni3_stall_in_2;
wire local_bb1_c2_enter_c2_eni3_valid_out_3;
wire local_bb1_c2_enter_c2_eni3_stall_in_3;
wire local_bb1_c2_enter_c2_eni3_inputs_ready;
wire local_bb1_c2_enter_c2_eni3_stall_local;
wire local_bb1_c2_enter_c2_eni3_input_accepted;
wire [127:0] local_bb1_c2_enter_c2_eni3;
wire local_bb1_c2_exit_c2_exi2_enable;
wire local_bb1_c2_exit_c2_exi2_entry_stall;
wire local_bb1_c2_enter_c2_eni3_valid_bit;
wire local_bb1_c2_exit_c2_exi2_output_regs_ready;
wire local_bb1_c2_exit_c2_exi2_valid_in;
wire local_bb1_c2_exit_c2_exi2_phases;
wire local_bb1_c2_enter_c2_eni3_inc_pipelined_thread;
wire local_bb1_c2_enter_c2_eni3_dec_pipelined_thread;
wire local_bb1_c2_enter_c2_eni3_fu_stall_out;

assign local_bb1_c2_enter_c2_eni3_inputs_ready = local_bb1_c2_eni3_valid_out;
assign local_bb1_c2_enter_c2_eni3 = local_bb1_c2_eni3;
assign local_bb1_c2_enter_c2_eni3_input_accepted = (local_bb1_c2_enter_c2_eni3_inputs_ready && !(local_bb1_c2_exit_c2_exi2_entry_stall));
assign local_bb1_c2_enter_c2_eni3_valid_bit = local_bb1_c2_enter_c2_eni3_input_accepted;
assign local_bb1_c2_enter_c2_eni3_inc_pipelined_thread = 1'b1;
assign local_bb1_c2_enter_c2_eni3_dec_pipelined_thread = ~(1'b0);
assign local_bb1_c2_enter_c2_eni3_fu_stall_out = (~(local_bb1_c2_enter_c2_eni3_inputs_ready) | local_bb1_c2_exit_c2_exi2_entry_stall);
assign local_bb1_c2_enter_c2_eni3_stall_local = (local_bb1_c2_enter_c2_eni3_stall_in_0 | local_bb1_c2_enter_c2_eni3_stall_in_1 | local_bb1_c2_enter_c2_eni3_stall_in_2 | local_bb1_c2_enter_c2_eni3_stall_in_3);
assign local_bb1_c2_enter_c2_eni3_valid_out_0 = local_bb1_c2_enter_c2_eni3_inputs_ready;
assign local_bb1_c2_enter_c2_eni3_valid_out_1 = local_bb1_c2_enter_c2_eni3_inputs_ready;
assign local_bb1_c2_enter_c2_eni3_valid_out_2 = local_bb1_c2_enter_c2_eni3_inputs_ready;
assign local_bb1_c2_enter_c2_eni3_valid_out_3 = local_bb1_c2_enter_c2_eni3_inputs_ready;
assign local_bb1_c2_eni3_stall_in = (|local_bb1_c2_enter_c2_eni3_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb1_c2_ene1_stall_local;
wire [31:0] local_bb1_c2_ene1;

assign local_bb1_c2_ene1[31:0] = local_bb1_c2_enter_c2_eni3[63:32];

// This section implements an unregistered operation.
// 
wire local_bb1_c2_ene2_stall_local;
wire [31:0] local_bb1_c2_ene2;

assign local_bb1_c2_ene2[31:0] = local_bb1_c2_enter_c2_eni3[95:64];

// This section implements an unregistered operation.
// 
wire local_bb1_c2_ene3_valid_out;
wire local_bb1_c2_ene3_stall_in;
wire local_bb1_c2_ene3_inputs_ready;
wire local_bb1_c2_ene3_stall_local;
wire [31:0] local_bb1_c2_ene3;

assign local_bb1_c2_ene3_inputs_ready = local_bb1_c2_enter_c2_eni3_valid_out_2;
assign local_bb1_c2_ene3[31:0] = local_bb1_c2_enter_c2_eni3[127:96];
assign local_bb1_c2_ene3_valid_out = 1'b1;
assign local_bb1_c2_enter_c2_eni3_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire SFC_2_VALID_4_4_0_valid_out;
wire SFC_2_VALID_4_4_0_stall_in;
wire SFC_2_VALID_4_4_0_inputs_ready;
wire SFC_2_VALID_4_4_0_stall_local;
wire SFC_2_VALID_4_4_0;

assign SFC_2_VALID_4_4_0_inputs_ready = local_bb1_c2_enter_c2_eni3_valid_out_3;
assign SFC_2_VALID_4_4_0 = local_bb1_c2_enter_c2_eni3_valid_bit;
assign SFC_2_VALID_4_4_0_valid_out = 1'b1;
assign local_bb1_c2_enter_c2_eni3_stall_in_3 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_var__u0_valid_out;
wire local_bb1_var__u0_stall_in;
wire local_bb1_var__u0_inputs_ready;
wire local_bb1_var__u0_stall_local;
wire [31:0] local_bb1_var__u0;

assign local_bb1_var__u0_inputs_ready = (local_bb1_c2_enter_c2_eni3_valid_out_0 & local_bb1_c2_enter_c2_eni3_valid_out_1);
assign local_bb1_var__u0 = (local_bb1_c2_ene1 + local_bb1_c2_ene2);
assign local_bb1_var__u0_valid_out = 1'b1;
assign local_bb1_c2_enter_c2_eni3_stall_in_0 = 1'b0;
assign local_bb1_c2_enter_c2_eni3_stall_in_1 = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb1_c2_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb1_c2_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb1_c2_ene3_0_NO_SHIFT_REG;
 logic rnode_4to5_bb1_c2_ene3_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb1_c2_ene3_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb1_c2_ene3_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb1_c2_ene3_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb1_c2_ene3_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb1_c2_ene3_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb1_c2_ene3_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb1_c2_ene3_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb1_c2_ene3_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb1_c2_ene3_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb1_c2_ene3),
	.data_out(rnode_4to5_bb1_c2_ene3_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb1_c2_ene3_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb1_c2_ene3_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_4to5_bb1_c2_ene3_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb1_c2_ene3_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb1_c2_ene3_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb1_c2_ene3_stall_in = 1'b0;
assign rnode_4to5_bb1_c2_ene3_0_NO_SHIFT_REG = rnode_4to5_bb1_c2_ene3_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb1_c2_ene3_0_stall_in_reg_5_NO_SHIFT_REG = ~(local_bb1_c2_exit_c2_exi2_enable);
assign rnode_4to5_bb1_c2_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_2_VALID_4_5_0_inputs_ready;
 reg SFC_2_VALID_4_5_0_valid_out_NO_SHIFT_REG;
wire SFC_2_VALID_4_5_0_stall_in;
wire SFC_2_VALID_4_5_0_output_regs_ready;
 reg SFC_2_VALID_4_5_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_2_VALID_4_5_0_causedstall;

assign SFC_2_VALID_4_5_0_inputs_ready = 1'b1;
assign SFC_2_VALID_4_5_0_output_regs_ready = local_bb1_c2_exit_c2_exi2_enable;
assign SFC_2_VALID_4_4_0_stall_in = 1'b0;
assign SFC_2_VALID_4_5_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c2_exit_c2_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_2_VALID_4_5_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_2_VALID_4_5_0_output_regs_ready)
		begin
			SFC_2_VALID_4_5_0_NO_SHIFT_REG <= SFC_2_VALID_4_4_0;
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb1_var__u1_inputs_ready;
 reg local_bb1_var__u1_valid_out_NO_SHIFT_REG;
wire local_bb1_var__u1_stall_in;
wire local_bb1_var__u1_output_regs_ready;
wire [31:0] local_bb1_var__u1;
 reg local_bb1_var__u1_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb1_var__u1_valid_pipe_1_NO_SHIFT_REG;
wire local_bb1_var__u1_causedstall;

acl_int_mult int_module_local_bb1_var__u1 (
	.clock(clock),
	.dataa(local_bb1_var__u0),
	.datab(input_global_size_2),
	.enable(local_bb1_var__u1_output_regs_ready),
	.result(local_bb1_var__u1)
);

defparam int_module_local_bb1_var__u1.INPUT1_WIDTH = 32;
defparam int_module_local_bb1_var__u1.INPUT2_WIDTH = 32;
defparam int_module_local_bb1_var__u1.OUTPUT_WIDTH = 32;
defparam int_module_local_bb1_var__u1.LATENCY = 3;
defparam int_module_local_bb1_var__u1.SIGNED = 0;

assign local_bb1_var__u1_inputs_ready = 1'b1;
assign local_bb1_var__u1_output_regs_ready = local_bb1_c2_exit_c2_exi2_enable;
assign local_bb1_var__u0_stall_in = 1'b0;
assign local_bb1_var__u1_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c2_exit_c2_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb1_var__u1_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb1_var__u1_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb1_var__u1_output_regs_ready)
		begin
			local_bb1_var__u1_valid_pipe_0_NO_SHIFT_REG <= 1'b1;
			local_bb1_var__u1_valid_pipe_1_NO_SHIFT_REG <= local_bb1_var__u1_valid_pipe_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb1_var__u1_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb1_var__u1_output_regs_ready)
		begin
			local_bb1_var__u1_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb1_var__u1_stall_in))
			begin
				local_bb1_var__u1_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_5to6_bb1_c2_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_5to6_bb1_c2_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_5to6_bb1_c2_ene3_0_NO_SHIFT_REG;
 logic rnode_5to6_bb1_c2_ene3_0_reg_6_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_5to6_bb1_c2_ene3_0_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb1_c2_ene3_0_valid_out_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb1_c2_ene3_0_stall_in_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb1_c2_ene3_0_stall_out_reg_6_NO_SHIFT_REG;

acl_data_fifo rnode_5to6_bb1_c2_ene3_0_reg_6_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_5to6_bb1_c2_ene3_0_reg_6_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_5to6_bb1_c2_ene3_0_stall_in_reg_6_NO_SHIFT_REG),
	.valid_out(rnode_5to6_bb1_c2_ene3_0_valid_out_reg_6_NO_SHIFT_REG),
	.stall_out(rnode_5to6_bb1_c2_ene3_0_stall_out_reg_6_NO_SHIFT_REG),
	.data_in(rnode_4to5_bb1_c2_ene3_0_NO_SHIFT_REG),
	.data_out(rnode_5to6_bb1_c2_ene3_0_reg_6_NO_SHIFT_REG)
);

defparam rnode_5to6_bb1_c2_ene3_0_reg_6_fifo.DEPTH = 1;
defparam rnode_5to6_bb1_c2_ene3_0_reg_6_fifo.DATA_WIDTH = 32;
defparam rnode_5to6_bb1_c2_ene3_0_reg_6_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_5to6_bb1_c2_ene3_0_reg_6_fifo.IMPL = "shift_reg";

assign rnode_5to6_bb1_c2_ene3_0_reg_6_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to5_bb1_c2_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_5to6_bb1_c2_ene3_0_NO_SHIFT_REG = rnode_5to6_bb1_c2_ene3_0_reg_6_NO_SHIFT_REG;
assign rnode_5to6_bb1_c2_ene3_0_stall_in_reg_6_NO_SHIFT_REG = ~(local_bb1_c2_exit_c2_exi2_enable);
assign rnode_5to6_bb1_c2_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_2_VALID_5_6_0_inputs_ready;
 reg SFC_2_VALID_5_6_0_valid_out_NO_SHIFT_REG;
wire SFC_2_VALID_5_6_0_stall_in;
wire SFC_2_VALID_5_6_0_output_regs_ready;
 reg SFC_2_VALID_5_6_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_2_VALID_5_6_0_causedstall;

assign SFC_2_VALID_5_6_0_inputs_ready = 1'b1;
assign SFC_2_VALID_5_6_0_output_regs_ready = local_bb1_c2_exit_c2_exi2_enable;
assign SFC_2_VALID_4_5_0_stall_in = 1'b0;
assign SFC_2_VALID_5_6_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c2_exit_c2_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_2_VALID_5_6_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_2_VALID_5_6_0_output_regs_ready)
		begin
			SFC_2_VALID_5_6_0_NO_SHIFT_REG <= SFC_2_VALID_4_5_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1_c2_exi1_stall_local;
wire [95:0] local_bb1_c2_exi1;

assign local_bb1_c2_exi1[31:0] = 32'bx;
assign local_bb1_c2_exi1[63:32] = local_bb1_var__u1;
assign local_bb1_c2_exi1[95:64] = 32'bx;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_6to7_bb1_c2_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_6to7_bb1_c2_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_6to7_bb1_c2_ene3_0_NO_SHIFT_REG;
 logic rnode_6to7_bb1_c2_ene3_0_reg_7_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_6to7_bb1_c2_ene3_0_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb1_c2_ene3_0_valid_out_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb1_c2_ene3_0_stall_in_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb1_c2_ene3_0_stall_out_reg_7_NO_SHIFT_REG;

acl_data_fifo rnode_6to7_bb1_c2_ene3_0_reg_7_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_6to7_bb1_c2_ene3_0_reg_7_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_6to7_bb1_c2_ene3_0_stall_in_reg_7_NO_SHIFT_REG),
	.valid_out(rnode_6to7_bb1_c2_ene3_0_valid_out_reg_7_NO_SHIFT_REG),
	.stall_out(rnode_6to7_bb1_c2_ene3_0_stall_out_reg_7_NO_SHIFT_REG),
	.data_in(rnode_5to6_bb1_c2_ene3_0_NO_SHIFT_REG),
	.data_out(rnode_6to7_bb1_c2_ene3_0_reg_7_NO_SHIFT_REG)
);

defparam rnode_6to7_bb1_c2_ene3_0_reg_7_fifo.DEPTH = 1;
defparam rnode_6to7_bb1_c2_ene3_0_reg_7_fifo.DATA_WIDTH = 32;
defparam rnode_6to7_bb1_c2_ene3_0_reg_7_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_6to7_bb1_c2_ene3_0_reg_7_fifo.IMPL = "shift_reg";

assign rnode_6to7_bb1_c2_ene3_0_reg_7_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_5to6_bb1_c2_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_6to7_bb1_c2_ene3_0_NO_SHIFT_REG = rnode_6to7_bb1_c2_ene3_0_reg_7_NO_SHIFT_REG;
assign rnode_6to7_bb1_c2_ene3_0_stall_in_reg_7_NO_SHIFT_REG = ~(local_bb1_c2_exit_c2_exi2_enable);
assign rnode_6to7_bb1_c2_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire SFC_2_VALID_6_7_0_inputs_ready;
 reg SFC_2_VALID_6_7_0_valid_out_NO_SHIFT_REG;
wire SFC_2_VALID_6_7_0_stall_in;
wire SFC_2_VALID_6_7_0_output_regs_ready;
 reg SFC_2_VALID_6_7_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_2_VALID_6_7_0_causedstall;

assign SFC_2_VALID_6_7_0_inputs_ready = 1'b1;
assign SFC_2_VALID_6_7_0_output_regs_ready = local_bb1_c2_exit_c2_exi2_enable;
assign SFC_2_VALID_5_6_0_stall_in = 1'b0;
assign SFC_2_VALID_6_7_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c2_exit_c2_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_2_VALID_6_7_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_2_VALID_6_7_0_output_regs_ready)
		begin
			SFC_2_VALID_6_7_0_NO_SHIFT_REG <= SFC_2_VALID_5_6_0_NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb1_c2_exi2_valid_out;
wire local_bb1_c2_exi2_stall_in;
wire local_bb1_c2_exi2_inputs_ready;
wire local_bb1_c2_exi2_stall_local;
wire [95:0] local_bb1_c2_exi2;

assign local_bb1_c2_exi2_inputs_ready = (local_bb1_var__u1_valid_out_NO_SHIFT_REG & rnode_6to7_bb1_c2_ene3_0_valid_out_NO_SHIFT_REG);
assign local_bb1_c2_exi2[63:0] = local_bb1_c2_exi1[63:0];
assign local_bb1_c2_exi2[95:64] = rnode_6to7_bb1_c2_ene3_0_NO_SHIFT_REG;
assign local_bb1_c2_exi2_valid_out = 1'b1;
assign local_bb1_var__u1_stall_in = 1'b0;
assign rnode_6to7_bb1_c2_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c2_exit_c2_exi2_valid_out;
wire local_bb1_c2_exit_c2_exi2_stall_in;
wire local_bb1_c2_exit_c2_exi2_inputs_ready;
wire local_bb1_c2_exit_c2_exi2_stall_local;
wire [95:0] local_bb1_c2_exit_c2_exi2;
wire local_bb1_c2_exit_c2_exi2_valid;
wire local_bb1_c2_exit_c2_exi2_fu_stall_out;

acl_enable_sink local_bb1_c2_exit_c2_exi2_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb1_c2_exi2),
	.data_out(local_bb1_c2_exit_c2_exi2),
	.input_accepted(local_bb1_c2_enter_c2_eni3_input_accepted),
	.valid_out(local_bb1_c2_exit_c2_exi2_valid),
	.stall_in(local_bb1_c2_exit_c2_exi2_stall_local),
	.enable(local_bb1_c2_exit_c2_exi2_enable),
	.valid_in(local_bb1_c2_exit_c2_exi2_valid_in),
	.stall_entry(local_bb1_c2_exit_c2_exi2_entry_stall),
	.inc_pipelined_thread(local_bb1_c2_enter_c2_eni3_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb1_c2_enter_c2_eni3_dec_pipelined_thread)
);

defparam local_bb1_c2_exit_c2_exi2_instance.DATA_WIDTH = 96;
defparam local_bb1_c2_exit_c2_exi2_instance.PIPELINE_DEPTH = 3;
defparam local_bb1_c2_exit_c2_exi2_instance.SCHEDULEII = 1;
defparam local_bb1_c2_exit_c2_exi2_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb1_c2_exit_c2_exi2_inputs_ready = (local_bb1_c2_exi2_valid_out & SFC_2_VALID_6_7_0_valid_out_NO_SHIFT_REG);
assign local_bb1_c2_exit_c2_exi2_valid_in = SFC_2_VALID_6_7_0_NO_SHIFT_REG;
assign local_bb1_c2_exit_c2_exi2_fu_stall_out = ~(local_bb1_c2_exit_c2_exi2_enable);
assign local_bb1_c2_exit_c2_exi2_valid_out = local_bb1_c2_exit_c2_exi2_valid;
assign local_bb1_c2_exit_c2_exi2_stall_local = local_bb1_c2_exit_c2_exi2_stall_in;
assign local_bb1_c2_exi2_stall_in = 1'b0;
assign SFC_2_VALID_6_7_0_stall_in = 1'b0;

// Register node:
//  * latency = 0
//  * capacity = 2
 logic rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_0_NO_SHIFT_REG;
 logic [95:0] rnode_7to7_bb1_c2_exit_c2_exi2_0_NO_SHIFT_REG;
 logic rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_1_NO_SHIFT_REG;
 logic [95:0] rnode_7to7_bb1_c2_exit_c2_exi2_1_NO_SHIFT_REG;
 logic rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_inputs_ready_NO_SHIFT_REG;
 logic [95:0] rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_NO_SHIFT_REG;
 logic rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_0_reg_7_NO_SHIFT_REG;
 logic rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_0_reg_7_NO_SHIFT_REG;
 logic rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_out_reg_7_NO_SHIFT_REG;

acl_data_fifo rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_0_reg_7_NO_SHIFT_REG),
	.valid_out(rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_0_reg_7_NO_SHIFT_REG),
	.stall_out(rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_out_reg_7_NO_SHIFT_REG),
	.data_in(local_bb1_c2_exit_c2_exi2),
	.data_out(rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_NO_SHIFT_REG)
);

defparam rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_fifo.DEPTH = 3;
defparam rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_fifo.DATA_WIDTH = 96;
defparam rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_fifo.IMPL = "zl_reg";

assign rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_inputs_ready_NO_SHIFT_REG = local_bb1_c2_exit_c2_exi2_valid_out;
assign local_bb1_c2_exit_c2_exi2_stall_in = rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_out_reg_7_NO_SHIFT_REG;
assign rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_0_reg_7_NO_SHIFT_REG = (rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_0_NO_SHIFT_REG | rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_1_NO_SHIFT_REG);
assign rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_0_NO_SHIFT_REG = rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_0_reg_7_NO_SHIFT_REG;
assign rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_1_NO_SHIFT_REG = rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_0_reg_7_NO_SHIFT_REG;
assign rnode_7to7_bb1_c2_exit_c2_exi2_0_NO_SHIFT_REG = rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_NO_SHIFT_REG;
assign rnode_7to7_bb1_c2_exit_c2_exi2_1_NO_SHIFT_REG = rnode_7to7_bb1_c2_exit_c2_exi2_0_reg_7_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb1_c2_exe2_stall_local;
wire [31:0] local_bb1_c2_exe2;

assign local_bb1_c2_exe2[31:0] = rnode_7to7_bb1_c2_exit_c2_exi2_0_NO_SHIFT_REG[95:64];

// This section implements an unregistered operation.
// 
wire local_bb1_c2_exe1_stall_local;
wire [31:0] local_bb1_c2_exe1;

assign local_bb1_c2_exe1[31:0] = rnode_7to7_bb1_c2_exit_c2_exi2_1_NO_SHIFT_REG[63:32];

// This section implements an unregistered operation.
// 
wire local_bb1_c3_eni1_stall_local;
wire [95:0] local_bb1_c3_eni1;

assign local_bb1_c3_eni1[31:0] = 32'bx;
assign local_bb1_c3_eni1[63:32] = local_bb1_c2_exe1;
assign local_bb1_c3_eni1[95:64] = 32'bx;

// This section implements an unregistered operation.
// 
wire local_bb1_c3_eni2_valid_out;
wire local_bb1_c3_eni2_stall_in;
wire local_bb1_c3_eni2_inputs_ready;
wire local_bb1_c3_eni2_stall_local;
wire [95:0] local_bb1_c3_eni2;

assign local_bb1_c3_eni2_inputs_ready = (rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_0_NO_SHIFT_REG & rnode_7to7_bb1_c2_exit_c2_exi2_0_valid_out_1_NO_SHIFT_REG);
assign local_bb1_c3_eni2[63:0] = local_bb1_c3_eni1[63:0];
assign local_bb1_c3_eni2[95:64] = local_bb1_c2_exe2;
assign local_bb1_c3_eni2_valid_out = local_bb1_c3_eni2_inputs_ready;
assign local_bb1_c3_eni2_stall_local = local_bb1_c3_eni2_stall_in;
assign rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_0_NO_SHIFT_REG = (local_bb1_c3_eni2_stall_local | ~(local_bb1_c3_eni2_inputs_ready));
assign rnode_7to7_bb1_c2_exit_c2_exi2_0_stall_in_1_NO_SHIFT_REG = (local_bb1_c3_eni2_stall_local | ~(local_bb1_c3_eni2_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb1_c3_enter_c3_eni2_valid_out_0;
wire local_bb1_c3_enter_c3_eni2_stall_in_0;
wire local_bb1_c3_enter_c3_eni2_valid_out_1;
wire local_bb1_c3_enter_c3_eni2_stall_in_1;
wire local_bb1_c3_enter_c3_eni2_valid_out_2;
wire local_bb1_c3_enter_c3_eni2_stall_in_2;
wire local_bb1_c3_enter_c3_eni2_inputs_ready;
wire local_bb1_c3_enter_c3_eni2_stall_local;
wire local_bb1_c3_enter_c3_eni2_input_accepted;
wire [95:0] local_bb1_c3_enter_c3_eni2;
wire local_bb1_c3_exit_c3_exi1_enable;
wire local_bb1_c3_exit_c3_exi1_entry_stall;
wire local_bb1_c3_enter_c3_eni2_valid_bit;
wire local_bb1_c3_exit_c3_exi1_output_regs_ready;
wire local_bb1_c3_exit_c3_exi1_valid_in;
wire local_bb1_c3_exit_c3_exi1_phases;
wire local_bb1_c3_enter_c3_eni2_inc_pipelined_thread;
wire local_bb1_c3_enter_c3_eni2_dec_pipelined_thread;
wire local_bb1_c3_enter_c3_eni2_fu_stall_out;

assign local_bb1_c3_enter_c3_eni2_inputs_ready = local_bb1_c3_eni2_valid_out;
assign local_bb1_c3_enter_c3_eni2 = local_bb1_c3_eni2;
assign local_bb1_c3_enter_c3_eni2_input_accepted = (local_bb1_c3_enter_c3_eni2_inputs_ready && !(local_bb1_c3_exit_c3_exi1_entry_stall));
assign local_bb1_c3_enter_c3_eni2_valid_bit = local_bb1_c3_enter_c3_eni2_input_accepted;
assign local_bb1_c3_enter_c3_eni2_inc_pipelined_thread = 1'b1;
assign local_bb1_c3_enter_c3_eni2_dec_pipelined_thread = ~(1'b0);
assign local_bb1_c3_enter_c3_eni2_fu_stall_out = (~(local_bb1_c3_enter_c3_eni2_inputs_ready) | local_bb1_c3_exit_c3_exi1_entry_stall);
assign local_bb1_c3_enter_c3_eni2_stall_local = (local_bb1_c3_enter_c3_eni2_stall_in_0 | local_bb1_c3_enter_c3_eni2_stall_in_1 | local_bb1_c3_enter_c3_eni2_stall_in_2);
assign local_bb1_c3_enter_c3_eni2_valid_out_0 = local_bb1_c3_enter_c3_eni2_inputs_ready;
assign local_bb1_c3_enter_c3_eni2_valid_out_1 = local_bb1_c3_enter_c3_eni2_inputs_ready;
assign local_bb1_c3_enter_c3_eni2_valid_out_2 = local_bb1_c3_enter_c3_eni2_inputs_ready;
assign local_bb1_c3_eni2_stall_in = (|local_bb1_c3_enter_c3_eni2_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb1_c3_ene1_stall_local;
wire [31:0] local_bb1_c3_ene1;

assign local_bb1_c3_ene1[31:0] = local_bb1_c3_enter_c3_eni2[63:32];

// This section implements an unregistered operation.
// 
wire local_bb1_c3_ene2_stall_local;
wire [31:0] local_bb1_c3_ene2;

assign local_bb1_c3_ene2[31:0] = local_bb1_c3_enter_c3_eni2[95:64];

// This section implements an unregistered operation.
// 
wire SFC_3_VALID_7_7_0_valid_out;
wire SFC_3_VALID_7_7_0_stall_in;
wire SFC_3_VALID_7_7_0_inputs_ready;
wire SFC_3_VALID_7_7_0_stall_local;
wire SFC_3_VALID_7_7_0;

assign SFC_3_VALID_7_7_0_inputs_ready = local_bb1_c3_enter_c3_eni2_valid_out_2;
assign SFC_3_VALID_7_7_0 = local_bb1_c3_enter_c3_eni2_valid_bit;
assign SFC_3_VALID_7_7_0_valid_out = 1'b1;
assign local_bb1_c3_enter_c3_eni2_stall_in_2 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_var__u2_valid_out;
wire local_bb1_var__u2_stall_in;
wire local_bb1_var__u2_inputs_ready;
wire local_bb1_var__u2_stall_local;
wire [31:0] local_bb1_var__u2;

assign local_bb1_var__u2_inputs_ready = (local_bb1_c3_enter_c3_eni2_valid_out_0 & local_bb1_c3_enter_c3_eni2_valid_out_1);
assign local_bb1_var__u2 = (local_bb1_c3_ene1 + local_bb1_c3_ene2);
assign local_bb1_var__u2_valid_out = 1'b1;
assign local_bb1_c3_enter_c3_eni2_stall_in_0 = 1'b0;
assign local_bb1_c3_enter_c3_eni2_stall_in_1 = 1'b0;

// This section implements a registered operation.
// 
wire SFC_3_VALID_7_8_0_inputs_ready;
 reg SFC_3_VALID_7_8_0_valid_out_NO_SHIFT_REG;
wire SFC_3_VALID_7_8_0_stall_in;
wire SFC_3_VALID_7_8_0_output_regs_ready;
 reg SFC_3_VALID_7_8_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_3_VALID_7_8_0_causedstall;

assign SFC_3_VALID_7_8_0_inputs_ready = 1'b1;
assign SFC_3_VALID_7_8_0_output_regs_ready = local_bb1_c3_exit_c3_exi1_enable;
assign SFC_3_VALID_7_7_0_stall_in = 1'b0;
assign SFC_3_VALID_7_8_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c3_exit_c3_exi1_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_3_VALID_7_8_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_3_VALID_7_8_0_output_regs_ready)
		begin
			SFC_3_VALID_7_8_0_NO_SHIFT_REG <= SFC_3_VALID_7_7_0;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_7to8_bb1_var__u2_0_valid_out_NO_SHIFT_REG;
 logic rnode_7to8_bb1_var__u2_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_7to8_bb1_var__u2_0_NO_SHIFT_REG;
 logic rnode_7to8_bb1_var__u2_0_reg_8_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_7to8_bb1_var__u2_0_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb1_var__u2_0_valid_out_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb1_var__u2_0_stall_in_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb1_var__u2_0_stall_out_reg_8_NO_SHIFT_REG;

acl_data_fifo rnode_7to8_bb1_var__u2_0_reg_8_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_7to8_bb1_var__u2_0_reg_8_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_7to8_bb1_var__u2_0_stall_in_reg_8_NO_SHIFT_REG),
	.valid_out(rnode_7to8_bb1_var__u2_0_valid_out_reg_8_NO_SHIFT_REG),
	.stall_out(rnode_7to8_bb1_var__u2_0_stall_out_reg_8_NO_SHIFT_REG),
	.data_in(local_bb1_var__u2),
	.data_out(rnode_7to8_bb1_var__u2_0_reg_8_NO_SHIFT_REG)
);

defparam rnode_7to8_bb1_var__u2_0_reg_8_fifo.DEPTH = 1;
defparam rnode_7to8_bb1_var__u2_0_reg_8_fifo.DATA_WIDTH = 32;
defparam rnode_7to8_bb1_var__u2_0_reg_8_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_7to8_bb1_var__u2_0_reg_8_fifo.IMPL = "shift_reg";

assign rnode_7to8_bb1_var__u2_0_reg_8_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb1_var__u2_stall_in = 1'b0;
assign rnode_7to8_bb1_var__u2_0_NO_SHIFT_REG = rnode_7to8_bb1_var__u2_0_reg_8_NO_SHIFT_REG;
assign rnode_7to8_bb1_var__u2_0_stall_in_reg_8_NO_SHIFT_REG = ~(local_bb1_c3_exit_c3_exi1_enable);
assign rnode_7to8_bb1_var__u2_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb1_c3_exi1_valid_out;
wire local_bb1_c3_exi1_stall_in;
wire local_bb1_c3_exi1_inputs_ready;
wire local_bb1_c3_exi1_stall_local;
wire [63:0] local_bb1_c3_exi1;

assign local_bb1_c3_exi1_inputs_ready = rnode_7to8_bb1_var__u2_0_valid_out_NO_SHIFT_REG;
assign local_bb1_c3_exi1[31:0] = 32'bx;
assign local_bb1_c3_exi1[63:32] = rnode_7to8_bb1_var__u2_0_NO_SHIFT_REG;
assign local_bb1_c3_exi1_valid_out = 1'b1;
assign rnode_7to8_bb1_var__u2_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c3_exit_c3_exi1_valid_out;
wire local_bb1_c3_exit_c3_exi1_stall_in;
wire local_bb1_c3_exit_c3_exi1_inputs_ready;
wire local_bb1_c3_exit_c3_exi1_stall_local;
wire [63:0] local_bb1_c3_exit_c3_exi1;
wire local_bb1_c3_exit_c3_exi1_valid;
wire local_bb1_c3_exit_c3_exi1_fu_stall_out;

acl_enable_sink local_bb1_c3_exit_c3_exi1_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb1_c3_exi1),
	.data_out(local_bb1_c3_exit_c3_exi1),
	.input_accepted(local_bb1_c3_enter_c3_eni2_input_accepted),
	.valid_out(local_bb1_c3_exit_c3_exi1_valid),
	.stall_in(local_bb1_c3_exit_c3_exi1_stall_local),
	.enable(local_bb1_c3_exit_c3_exi1_enable),
	.valid_in(local_bb1_c3_exit_c3_exi1_valid_in),
	.stall_entry(local_bb1_c3_exit_c3_exi1_entry_stall),
	.inc_pipelined_thread(local_bb1_c3_enter_c3_eni2_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb1_c3_enter_c3_eni2_dec_pipelined_thread)
);

defparam local_bb1_c3_exit_c3_exi1_instance.DATA_WIDTH = 64;
defparam local_bb1_c3_exit_c3_exi1_instance.PIPELINE_DEPTH = 1;
defparam local_bb1_c3_exit_c3_exi1_instance.SCHEDULEII = 1;
defparam local_bb1_c3_exit_c3_exi1_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb1_c3_exit_c3_exi1_inputs_ready = (local_bb1_c3_exi1_valid_out & SFC_3_VALID_7_8_0_valid_out_NO_SHIFT_REG);
assign local_bb1_c3_exit_c3_exi1_valid_in = SFC_3_VALID_7_8_0_NO_SHIFT_REG;
assign local_bb1_c3_exit_c3_exi1_fu_stall_out = ~(local_bb1_c3_exit_c3_exi1_enable);
assign local_bb1_c3_exit_c3_exi1_valid_out = local_bb1_c3_exit_c3_exi1_valid;
assign local_bb1_c3_exit_c3_exi1_stall_local = local_bb1_c3_exit_c3_exi1_stall_in;
assign local_bb1_c3_exi1_stall_in = 1'b0;
assign SFC_3_VALID_7_8_0_stall_in = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c3_exe1_stall_local;
wire [31:0] local_bb1_c3_exe1;

assign local_bb1_c3_exe1[31:0] = local_bb1_c3_exit_c3_exi1[63:32];

// This section implements an unregistered operation.
// 
wire local_bb1_c4_eni1_valid_out;
wire local_bb1_c4_eni1_stall_in;
wire local_bb1_c4_eni1_inputs_ready;
wire local_bb1_c4_eni1_stall_local;
wire [63:0] local_bb1_c4_eni1;

assign local_bb1_c4_eni1_inputs_ready = local_bb1_c3_exit_c3_exi1_valid_out;
assign local_bb1_c4_eni1[31:0] = 32'bx;
assign local_bb1_c4_eni1[63:32] = local_bb1_c3_exe1;
assign local_bb1_c4_eni1_valid_out = local_bb1_c4_eni1_inputs_ready;
assign local_bb1_c4_eni1_stall_local = local_bb1_c4_eni1_stall_in;
assign local_bb1_c3_exit_c3_exi1_stall_in = (|local_bb1_c4_eni1_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb1_c4_enter_c4_eni1_valid_out_0;
wire local_bb1_c4_enter_c4_eni1_stall_in_0;
wire local_bb1_c4_enter_c4_eni1_valid_out_1;
wire local_bb1_c4_enter_c4_eni1_stall_in_1;
wire local_bb1_c4_enter_c4_eni1_inputs_ready;
wire local_bb1_c4_enter_c4_eni1_stall_local;
wire local_bb1_c4_enter_c4_eni1_input_accepted;
wire [63:0] local_bb1_c4_enter_c4_eni1;
wire local_bb1_c4_exit_c4_exi2_enable;
wire local_bb1_c4_exit_c4_exi2_entry_stall;
wire local_bb1_c4_enter_c4_eni1_valid_bit;
wire local_bb1_c4_exit_c4_exi2_output_regs_ready;
wire local_bb1_c4_exit_c4_exi2_valid_in;
wire local_bb1_c4_exit_c4_exi2_phases;
wire local_bb1_c4_enter_c4_eni1_inc_pipelined_thread;
wire local_bb1_c4_enter_c4_eni1_dec_pipelined_thread;
wire local_bb1_c4_enter_c4_eni1_fu_stall_out;

assign local_bb1_c4_enter_c4_eni1_inputs_ready = local_bb1_c4_eni1_valid_out;
assign local_bb1_c4_enter_c4_eni1 = local_bb1_c4_eni1;
assign local_bb1_c4_enter_c4_eni1_input_accepted = (local_bb1_c4_enter_c4_eni1_inputs_ready && !(local_bb1_c4_exit_c4_exi2_entry_stall));
assign local_bb1_c4_enter_c4_eni1_valid_bit = local_bb1_c4_enter_c4_eni1_input_accepted;
assign local_bb1_c4_enter_c4_eni1_inc_pipelined_thread = 1'b1;
assign local_bb1_c4_enter_c4_eni1_dec_pipelined_thread = ~(1'b0);
assign local_bb1_c4_enter_c4_eni1_fu_stall_out = (~(local_bb1_c4_enter_c4_eni1_inputs_ready) | local_bb1_c4_exit_c4_exi2_entry_stall);
assign local_bb1_c4_enter_c4_eni1_stall_local = (local_bb1_c4_enter_c4_eni1_stall_in_0 | local_bb1_c4_enter_c4_eni1_stall_in_1);
assign local_bb1_c4_enter_c4_eni1_valid_out_0 = local_bb1_c4_enter_c4_eni1_inputs_ready;
assign local_bb1_c4_enter_c4_eni1_valid_out_1 = local_bb1_c4_enter_c4_eni1_inputs_ready;
assign local_bb1_c4_eni1_stall_in = (|local_bb1_c4_enter_c4_eni1_fu_stall_out);

// This section implements an unregistered operation.
// 
wire local_bb1_c4_ene1_stall_local;
wire [31:0] local_bb1_c4_ene1;

assign local_bb1_c4_ene1[31:0] = local_bb1_c4_enter_c4_eni1[63:32];

// This section implements an unregistered operation.
// 
wire SFC_4_VALID_8_8_0_valid_out;
wire SFC_4_VALID_8_8_0_stall_in;
wire SFC_4_VALID_8_8_0_inputs_ready;
wire SFC_4_VALID_8_8_0_stall_local;
wire SFC_4_VALID_8_8_0;

assign SFC_4_VALID_8_8_0_inputs_ready = local_bb1_c4_enter_c4_eni1_valid_out_1;
assign SFC_4_VALID_8_8_0 = local_bb1_c4_enter_c4_eni1_valid_bit;
assign SFC_4_VALID_8_8_0_valid_out = 1'b1;
assign local_bb1_c4_enter_c4_eni1_stall_in_1 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c4_ene1_valid_out_1;
wire local_bb1_c4_ene1_stall_in_1;
wire local_bb1_cmp18_NEG_valid_out;
wire local_bb1_cmp18_NEG_stall_in;
wire local_bb1_cmp18_NEG_inputs_ready;
wire local_bb1_cmp18_NEG_stall_local;
wire local_bb1_cmp18_NEG;

assign local_bb1_cmp18_NEG_inputs_ready = local_bb1_c4_enter_c4_eni1_valid_out_0;
assign local_bb1_cmp18_NEG = ($signed(local_bb1_c4_ene1) >= $signed(input_wii_ld_));
assign local_bb1_c4_ene1_valid_out_1 = 1'b1;
assign local_bb1_cmp18_NEG_valid_out = 1'b1;
assign local_bb1_c4_enter_c4_eni1_stall_in_0 = 1'b0;

// This section implements a registered operation.
// 
wire SFC_4_VALID_8_9_0_inputs_ready;
 reg SFC_4_VALID_8_9_0_valid_out_NO_SHIFT_REG;
wire SFC_4_VALID_8_9_0_stall_in;
wire SFC_4_VALID_8_9_0_output_regs_ready;
 reg SFC_4_VALID_8_9_0_NO_SHIFT_REG /* synthesis  preserve  */;
wire SFC_4_VALID_8_9_0_causedstall;

assign SFC_4_VALID_8_9_0_inputs_ready = 1'b1;
assign SFC_4_VALID_8_9_0_output_regs_ready = local_bb1_c4_exit_c4_exi2_enable;
assign SFC_4_VALID_8_8_0_stall_in = 1'b0;
assign SFC_4_VALID_8_9_0_causedstall = (1'b1 && (1'b0 && !(~(local_bb1_c4_exit_c4_exi2_enable))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		SFC_4_VALID_8_9_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (SFC_4_VALID_8_9_0_output_regs_ready)
		begin
			SFC_4_VALID_8_9_0_NO_SHIFT_REG <= SFC_4_VALID_8_8_0;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_8to9_bb1_c4_ene1_0_valid_out_NO_SHIFT_REG;
 logic rnode_8to9_bb1_c4_ene1_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_8to9_bb1_c4_ene1_0_NO_SHIFT_REG;
 logic rnode_8to9_bb1_c4_ene1_0_reg_9_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_8to9_bb1_c4_ene1_0_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb1_c4_ene1_0_valid_out_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb1_c4_ene1_0_stall_in_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb1_c4_ene1_0_stall_out_reg_9_NO_SHIFT_REG;

acl_data_fifo rnode_8to9_bb1_c4_ene1_0_reg_9_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_8to9_bb1_c4_ene1_0_reg_9_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_8to9_bb1_c4_ene1_0_stall_in_reg_9_NO_SHIFT_REG),
	.valid_out(rnode_8to9_bb1_c4_ene1_0_valid_out_reg_9_NO_SHIFT_REG),
	.stall_out(rnode_8to9_bb1_c4_ene1_0_stall_out_reg_9_NO_SHIFT_REG),
	.data_in(local_bb1_c4_ene1),
	.data_out(rnode_8to9_bb1_c4_ene1_0_reg_9_NO_SHIFT_REG)
);

defparam rnode_8to9_bb1_c4_ene1_0_reg_9_fifo.DEPTH = 1;
defparam rnode_8to9_bb1_c4_ene1_0_reg_9_fifo.DATA_WIDTH = 32;
defparam rnode_8to9_bb1_c4_ene1_0_reg_9_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_8to9_bb1_c4_ene1_0_reg_9_fifo.IMPL = "shift_reg";

assign rnode_8to9_bb1_c4_ene1_0_reg_9_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb1_c4_ene1_stall_in_1 = 1'b0;
assign rnode_8to9_bb1_c4_ene1_0_NO_SHIFT_REG = rnode_8to9_bb1_c4_ene1_0_reg_9_NO_SHIFT_REG;
assign rnode_8to9_bb1_c4_ene1_0_stall_in_reg_9_NO_SHIFT_REG = ~(local_bb1_c4_exit_c4_exi2_enable);
assign rnode_8to9_bb1_c4_ene1_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_8to9_bb1_cmp18_NEG_0_valid_out_NO_SHIFT_REG;
 logic rnode_8to9_bb1_cmp18_NEG_0_stall_in_NO_SHIFT_REG;
 logic rnode_8to9_bb1_cmp18_NEG_0_NO_SHIFT_REG;
 logic rnode_8to9_bb1_cmp18_NEG_0_reg_9_inputs_ready_NO_SHIFT_REG;
 logic rnode_8to9_bb1_cmp18_NEG_0_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb1_cmp18_NEG_0_valid_out_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb1_cmp18_NEG_0_stall_in_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb1_cmp18_NEG_0_stall_out_reg_9_NO_SHIFT_REG;

acl_data_fifo rnode_8to9_bb1_cmp18_NEG_0_reg_9_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_8to9_bb1_cmp18_NEG_0_reg_9_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_8to9_bb1_cmp18_NEG_0_stall_in_reg_9_NO_SHIFT_REG),
	.valid_out(rnode_8to9_bb1_cmp18_NEG_0_valid_out_reg_9_NO_SHIFT_REG),
	.stall_out(rnode_8to9_bb1_cmp18_NEG_0_stall_out_reg_9_NO_SHIFT_REG),
	.data_in(local_bb1_cmp18_NEG),
	.data_out(rnode_8to9_bb1_cmp18_NEG_0_reg_9_NO_SHIFT_REG)
);

defparam rnode_8to9_bb1_cmp18_NEG_0_reg_9_fifo.DEPTH = 1;
defparam rnode_8to9_bb1_cmp18_NEG_0_reg_9_fifo.DATA_WIDTH = 1;
defparam rnode_8to9_bb1_cmp18_NEG_0_reg_9_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_8to9_bb1_cmp18_NEG_0_reg_9_fifo.IMPL = "shift_reg";

assign rnode_8to9_bb1_cmp18_NEG_0_reg_9_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb1_cmp18_NEG_stall_in = 1'b0;
assign rnode_8to9_bb1_cmp18_NEG_0_NO_SHIFT_REG = rnode_8to9_bb1_cmp18_NEG_0_reg_9_NO_SHIFT_REG;
assign rnode_8to9_bb1_cmp18_NEG_0_stall_in_reg_9_NO_SHIFT_REG = ~(local_bb1_c4_exit_c4_exi2_enable);
assign rnode_8to9_bb1_cmp18_NEG_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb1_c4_exi1_stall_local;
wire [95:0] local_bb1_c4_exi1;

assign local_bb1_c4_exi1[31:0] = 32'bx;
assign local_bb1_c4_exi1[63:32] = rnode_8to9_bb1_c4_ene1_0_NO_SHIFT_REG;
assign local_bb1_c4_exi1[95:64] = 32'bx;

// This section implements an unregistered operation.
// 
wire local_bb1_c4_exi2_valid_out;
wire local_bb1_c4_exi2_stall_in;
wire local_bb1_c4_exi2_inputs_ready;
wire local_bb1_c4_exi2_stall_local;
wire [95:0] local_bb1_c4_exi2;

assign local_bb1_c4_exi2_inputs_ready = (rnode_8to9_bb1_c4_ene1_0_valid_out_NO_SHIFT_REG & rnode_8to9_bb1_cmp18_NEG_0_valid_out_NO_SHIFT_REG);
assign local_bb1_c4_exi2[63:0] = local_bb1_c4_exi1[63:0];
assign local_bb1_c4_exi2[64] = rnode_8to9_bb1_cmp18_NEG_0_NO_SHIFT_REG;
assign local_bb1_c4_exi2[95:65] = local_bb1_c4_exi1[95:65];
assign local_bb1_c4_exi2_valid_out = 1'b1;
assign rnode_8to9_bb1_c4_ene1_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_8to9_bb1_cmp18_NEG_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c4_exit_c4_exi2_valid_out_0;
wire local_bb1_c4_exit_c4_exi2_stall_in_0;
wire local_bb1_c4_exit_c4_exi2_valid_out_1;
wire local_bb1_c4_exit_c4_exi2_stall_in_1;
wire local_bb1_c4_exit_c4_exi2_inputs_ready;
wire local_bb1_c4_exit_c4_exi2_stall_local;
wire [95:0] local_bb1_c4_exit_c4_exi2;
wire local_bb1_c4_exit_c4_exi2_valid;
wire local_bb1_c4_exit_c4_exi2_fu_stall_out;

acl_enable_sink local_bb1_c4_exit_c4_exi2_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb1_c4_exi2),
	.data_out(local_bb1_c4_exit_c4_exi2),
	.input_accepted(local_bb1_c4_enter_c4_eni1_input_accepted),
	.valid_out(local_bb1_c4_exit_c4_exi2_valid),
	.stall_in(local_bb1_c4_exit_c4_exi2_stall_local),
	.enable(local_bb1_c4_exit_c4_exi2_enable),
	.valid_in(local_bb1_c4_exit_c4_exi2_valid_in),
	.stall_entry(local_bb1_c4_exit_c4_exi2_entry_stall),
	.inc_pipelined_thread(local_bb1_c4_enter_c4_eni1_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb1_c4_enter_c4_eni1_dec_pipelined_thread)
);

defparam local_bb1_c4_exit_c4_exi2_instance.DATA_WIDTH = 96;
defparam local_bb1_c4_exit_c4_exi2_instance.PIPELINE_DEPTH = 1;
defparam local_bb1_c4_exit_c4_exi2_instance.SCHEDULEII = 1;
defparam local_bb1_c4_exit_c4_exi2_instance.IP_PIPELINE_LATENCY_PLUS1 = 1;

assign local_bb1_c4_exit_c4_exi2_inputs_ready = (local_bb1_c4_exi2_valid_out & SFC_4_VALID_8_9_0_valid_out_NO_SHIFT_REG);
assign local_bb1_c4_exit_c4_exi2_valid_in = SFC_4_VALID_8_9_0_NO_SHIFT_REG;
assign local_bb1_c4_exit_c4_exi2_fu_stall_out = ~(local_bb1_c4_exit_c4_exi2_enable);
assign local_bb1_c4_exit_c4_exi2_stall_local = (local_bb1_c4_exit_c4_exi2_stall_in_0 | local_bb1_c4_exit_c4_exi2_stall_in_1);
assign local_bb1_c4_exit_c4_exi2_valid_out_0 = local_bb1_c4_exit_c4_exi2_valid;
assign local_bb1_c4_exit_c4_exi2_valid_out_1 = local_bb1_c4_exit_c4_exi2_valid;
assign local_bb1_c4_exi2_stall_in = 1'b0;
assign SFC_4_VALID_8_9_0_stall_in = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb1_c4_exe1_stall_local;
wire [31:0] local_bb1_c4_exe1;

assign local_bb1_c4_exe1[31:0] = local_bb1_c4_exit_c4_exi2[63:32];

// This section implements an unregistered operation.
// 
wire local_bb1_c4_exe1_valid_out;
wire local_bb1_c4_exe1_stall_in;
wire local_bb1_c4_exe2_valid_out;
wire local_bb1_c4_exe2_stall_in;
wire local_bb1_c4_exe2_inputs_ready;
wire local_bb1_c4_exe2_stall_local;
wire local_bb1_c4_exe2;

assign local_bb1_c4_exe2_inputs_ready = (local_bb1_c4_exit_c4_exi2_valid_out_0 & local_bb1_c4_exit_c4_exi2_valid_out_1);
assign local_bb1_c4_exe2 = local_bb1_c4_exit_c4_exi2[64];
assign local_bb1_c4_exe2_stall_local = (local_bb1_c4_exe1_stall_in | local_bb1_c4_exe2_stall_in);
assign local_bb1_c4_exe1_valid_out = local_bb1_c4_exe2_inputs_ready;
assign local_bb1_c4_exe2_valid_out = local_bb1_c4_exe2_inputs_ready;
assign local_bb1_c4_exit_c4_exi2_stall_in_0 = (local_bb1_c4_exe2_stall_local | ~(local_bb1_c4_exe2_inputs_ready));
assign local_bb1_c4_exit_c4_exi2_stall_in_1 = (local_bb1_c4_exe2_stall_local | ~(local_bb1_c4_exe2_inputs_ready));

// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg [31:0] lvb_bb1_c4_exe1_reg_NO_SHIFT_REG;
 reg lvb_bb1_c4_exe2_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb1_c4_exe2_valid_out & local_bb1_c4_exe1_valid_out & rnode_1to9_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG);
assign branch_var__output_regs_ready = (~(stall_in) | ~(branch_node_valid_out_NO_SHIFT_REG));
assign local_bb1_c4_exe2_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb1_c4_exe1_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_1to9_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_bb1_c4_exe1 = lvb_bb1_c4_exe1_reg_NO_SHIFT_REG;
assign lvb_bb1_c4_exe2 = lvb_bb1_c4_exe2_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id = lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG;
assign combined_branch_stall_in_signal = stall_in;
assign valid_out = branch_node_valid_out_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
		lvb_bb1_c4_exe1_reg_NO_SHIFT_REG <= 'x;
		lvb_bb1_c4_exe2_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_bb1_c4_exe1_reg_NO_SHIFT_REG <= local_bb1_c4_exe1;
			lvb_bb1_c4_exe2_reg_NO_SHIFT_REG <= local_bb1_c4_exe2;
			lvb_input_acl_hw_wg_id_reg_NO_SHIFT_REG <= rnode_1to9_input_acl_hw_wg_id_0_NO_SHIFT_REG;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module outputLayer_basic_block_2
	(
		input 		clock,
		input 		resetn,
		input [63:0] 		input_inputFeatureMap,
		input [63:0] 		input_outputFeatureMap,
		input [31:0] 		input_wii_ld_,
		input [31:0] 		input_wii_mul16,
		input 		valid_in_0,
		output 		stall_out_0,
		input 		input_c4_exe2_0,
		input [31:0] 		input_loadDataCounter_019_0,
		input [31:0] 		input_acl_hw_wg_id_0,
		input 		valid_in_1,
		output 		stall_out_1,
		input 		input_c4_exe2_1,
		input [31:0] 		input_loadDataCounter_019_1,
		input [31:0] 		input_acl_hw_wg_id_1,
		output 		valid_out_0,
		input 		stall_in_0,
		output 		lvb_c4_exe2_0,
		output [31:0] 		lvb_bb2_add18_0,
		output [31:0] 		lvb_input_acl_hw_wg_id_0,
		output 		valid_out_1,
		input 		stall_in_1,
		output 		lvb_c4_exe2_1,
		output [31:0] 		lvb_bb2_add18_1,
		output [31:0] 		lvb_input_acl_hw_wg_id_1,
		input [31:0] 		workgroup_size,
		input 		start,
		output 		avm_local_bb2_ld__enable,
		input [511:0] 		avm_local_bb2_ld__readdata,
		input 		avm_local_bb2_ld__readdatavalid,
		input 		avm_local_bb2_ld__waitrequest,
		output [31:0] 		avm_local_bb2_ld__address,
		output 		avm_local_bb2_ld__read,
		output 		avm_local_bb2_ld__write,
		input 		avm_local_bb2_ld__writeack,
		output [511:0] 		avm_local_bb2_ld__writedata,
		output [63:0] 		avm_local_bb2_ld__byteenable,
		output [4:0] 		avm_local_bb2_ld__burstcount,
		output 		local_bb2_ld__active,
		input 		clock2x,
		output 		avm_local_bb2_st__enable,
		input [511:0] 		avm_local_bb2_st__readdata,
		input 		avm_local_bb2_st__readdatavalid,
		input 		avm_local_bb2_st__waitrequest,
		output [31:0] 		avm_local_bb2_st__address,
		output 		avm_local_bb2_st__read,
		output 		avm_local_bb2_st__write,
		input 		avm_local_bb2_st__writeack,
		output [511:0] 		avm_local_bb2_st__writedata,
		output [63:0] 		avm_local_bb2_st__byteenable,
		output [4:0] 		avm_local_bb2_st__burstcount,
		output 		local_bb2_st__active
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((valid_in_0 & valid_in_1) & ~((stall_out_0 | stall_out_1)));
assign _exit = ((valid_out_0 & valid_out_1) & ~((stall_in_0 | stall_in_1)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
 reg input_c4_exe2_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_loadDataCounter_019_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
 reg local_lvm_c4_exe2_NO_SHIFT_REG;
 reg [31:0] local_lvm_loadDataCounter_019_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;
 reg input_c4_exe2_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_loadDataCounter_019_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG));
assign stall_out_0 = merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
assign stall_out_1 = merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_0_staging_reg_NO_SHIFT_REG | valid_in_0))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		if ((merge_node_valid_in_1_staging_reg_NO_SHIFT_REG | valid_in_1))
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b1;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
		end
		else
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b0;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_c4_exe2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_loadDataCounter_019_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		input_c4_exe2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_loadDataCounter_019_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_0_staging_reg_NO_SHIFT_REG))
			begin
				input_c4_exe2_0_staging_reg_NO_SHIFT_REG <= input_c4_exe2_0;
				input_loadDataCounter_019_0_staging_reg_NO_SHIFT_REG <= input_loadDataCounter_019_0;
				input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= valid_in_0;
			end
		end
		else
		begin
			merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
		if (((merge_block_selector_NO_SHIFT_REG != 1'b1) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_1_staging_reg_NO_SHIFT_REG))
			begin
				input_c4_exe2_1_staging_reg_NO_SHIFT_REG <= input_c4_exe2_1;
				input_loadDataCounter_019_1_staging_reg_NO_SHIFT_REG <= input_loadDataCounter_019_1;
				input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= valid_in_1;
			end
		end
		else
		begin
			merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_0_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_c4_exe2_NO_SHIFT_REG <= input_c4_exe2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_loadDataCounter_019_NO_SHIFT_REG <= input_loadDataCounter_019_0_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_c4_exe2_NO_SHIFT_REG <= input_c4_exe2_0;
					local_lvm_loadDataCounter_019_NO_SHIFT_REG <= input_loadDataCounter_019_0;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_0;
				end
			end

			1'b1:
			begin
				if (merge_node_valid_in_1_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_c4_exe2_NO_SHIFT_REG <= input_c4_exe2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_loadDataCounter_019_NO_SHIFT_REG <= input_loadDataCounter_019_1_staging_reg_NO_SHIFT_REG;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_c4_exe2_NO_SHIFT_REG <= input_c4_exe2_1;
					local_lvm_loadDataCounter_019_NO_SHIFT_REG <= input_loadDataCounter_019_1;
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_1;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb2_idxprom_stall_local;
wire [63:0] local_bb2_idxprom;

assign local_bb2_idxprom[32] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[33] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[34] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[35] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[36] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[37] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[38] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[39] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[40] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[41] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[42] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[43] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[44] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[45] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[46] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[47] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[48] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[49] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[50] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[51] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[52] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[53] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[54] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[55] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[56] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[57] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[58] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[59] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[60] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[61] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[62] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[63] = local_lvm_loadDataCounter_019_NO_SHIFT_REG[31];
assign local_bb2_idxprom[31:0] = local_lvm_loadDataCounter_019_NO_SHIFT_REG;

// Register node:
//  * latency = 320
//  * capacity = 320
 logic rnode_1to321_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to321_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to321_input_acl_hw_wg_id_0_NO_SHIFT_REG;
 logic rnode_1to321_input_acl_hw_wg_id_0_reg_321_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to321_input_acl_hw_wg_id_0_reg_321_NO_SHIFT_REG;
 logic rnode_1to321_input_acl_hw_wg_id_0_valid_out_reg_321_NO_SHIFT_REG;
 logic rnode_1to321_input_acl_hw_wg_id_0_stall_in_reg_321_NO_SHIFT_REG;
 logic rnode_1to321_input_acl_hw_wg_id_0_stall_out_reg_321_NO_SHIFT_REG;

acl_data_fifo rnode_1to321_input_acl_hw_wg_id_0_reg_321_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to321_input_acl_hw_wg_id_0_reg_321_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to321_input_acl_hw_wg_id_0_stall_in_reg_321_NO_SHIFT_REG),
	.valid_out(rnode_1to321_input_acl_hw_wg_id_0_valid_out_reg_321_NO_SHIFT_REG),
	.stall_out(rnode_1to321_input_acl_hw_wg_id_0_stall_out_reg_321_NO_SHIFT_REG),
	.data_in(local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG),
	.data_out(rnode_1to321_input_acl_hw_wg_id_0_reg_321_NO_SHIFT_REG)
);

defparam rnode_1to321_input_acl_hw_wg_id_0_reg_321_fifo.DEPTH = 321;
defparam rnode_1to321_input_acl_hw_wg_id_0_reg_321_fifo.DATA_WIDTH = 32;
defparam rnode_1to321_input_acl_hw_wg_id_0_reg_321_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to321_input_acl_hw_wg_id_0_reg_321_fifo.IMPL = "ram";

assign rnode_1to321_input_acl_hw_wg_id_0_reg_321_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_1_NO_SHIFT_REG;
assign merge_node_stall_in_1 = rnode_1to321_input_acl_hw_wg_id_0_stall_out_reg_321_NO_SHIFT_REG;
assign rnode_1to321_input_acl_hw_wg_id_0_NO_SHIFT_REG = rnode_1to321_input_acl_hw_wg_id_0_reg_321_NO_SHIFT_REG;
assign rnode_1to321_input_acl_hw_wg_id_0_stall_in_reg_321_NO_SHIFT_REG = rnode_1to321_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG;
assign rnode_1to321_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG = rnode_1to321_input_acl_hw_wg_id_0_valid_out_reg_321_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_c4_exe2_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_1_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_c4_exe2_0_stall_out_reg_2_NO_SHIFT_REG;
 reg rnode_1to2_c4_exe2_0_consumed_0_NO_SHIFT_REG;
 reg rnode_1to2_c4_exe2_0_consumed_1_NO_SHIFT_REG;
wire [63:0] rci_rcnode_1to319_rc3_mul16_0_reg_1;

acl_data_fifo rnode_1to2_c4_exe2_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_c4_exe2_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_c4_exe2_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_c4_exe2_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_c4_exe2_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_lvm_c4_exe2_NO_SHIFT_REG),
	.data_out(rnode_1to2_c4_exe2_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_c4_exe2_0_reg_2_fifo.DEPTH = 2;
defparam rnode_1to2_c4_exe2_0_reg_2_fifo.DATA_WIDTH = 1;
defparam rnode_1to2_c4_exe2_0_reg_2_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to2_c4_exe2_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_c4_exe2_0_reg_2_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_2_NO_SHIFT_REG;
assign merge_node_stall_in_2 = rnode_1to2_c4_exe2_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_c4_exe2_0_stall_in_0_reg_2_NO_SHIFT_REG = ((rnode_1to2_c4_exe2_0_stall_in_0_NO_SHIFT_REG & ~(rnode_1to2_c4_exe2_0_consumed_0_NO_SHIFT_REG)) | (rnode_1to2_c4_exe2_0_stall_in_1_NO_SHIFT_REG & ~(rnode_1to2_c4_exe2_0_consumed_1_NO_SHIFT_REG)));
assign rnode_1to2_c4_exe2_0_valid_out_0_NO_SHIFT_REG = (rnode_1to2_c4_exe2_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_c4_exe2_0_consumed_0_NO_SHIFT_REG));
assign rnode_1to2_c4_exe2_0_valid_out_1_NO_SHIFT_REG = (rnode_1to2_c4_exe2_0_valid_out_0_reg_2_NO_SHIFT_REG & ~(rnode_1to2_c4_exe2_0_consumed_1_NO_SHIFT_REG));
assign rnode_1to2_c4_exe2_0_NO_SHIFT_REG = rnode_1to2_c4_exe2_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_c4_exe2_1_NO_SHIFT_REG = rnode_1to2_c4_exe2_0_reg_2_NO_SHIFT_REG;
assign rci_rcnode_1to319_rc3_mul16_0_reg_1[31:0] = input_wii_mul16;
assign rci_rcnode_1to319_rc3_mul16_0_reg_1[63:32] = local_lvm_loadDataCounter_019_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_1to2_c4_exe2_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_1to2_c4_exe2_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_1to2_c4_exe2_0_consumed_0_NO_SHIFT_REG <= (rnode_1to2_c4_exe2_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_c4_exe2_0_consumed_0_NO_SHIFT_REG | ~(rnode_1to2_c4_exe2_0_stall_in_0_NO_SHIFT_REG)) & rnode_1to2_c4_exe2_0_stall_in_0_reg_2_NO_SHIFT_REG);
		rnode_1to2_c4_exe2_0_consumed_1_NO_SHIFT_REG <= (rnode_1to2_c4_exe2_0_valid_out_0_reg_2_NO_SHIFT_REG & (rnode_1to2_c4_exe2_0_consumed_1_NO_SHIFT_REG | ~(rnode_1to2_c4_exe2_0_stall_in_1_NO_SHIFT_REG)) & rnode_1to2_c4_exe2_0_stall_in_0_reg_2_NO_SHIFT_REG);
	end
end


// Register node:
//  * latency = 318
//  * capacity = 318
 logic rcnode_1to319_rc3_mul16_0_valid_out_NO_SHIFT_REG;
 logic rcnode_1to319_rc3_mul16_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rcnode_1to319_rc3_mul16_0_NO_SHIFT_REG;
 logic rcnode_1to319_rc3_mul16_0_reg_319_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rcnode_1to319_rc3_mul16_0_reg_319_NO_SHIFT_REG;
 logic rcnode_1to319_rc3_mul16_0_valid_out_reg_319_NO_SHIFT_REG;
 logic rcnode_1to319_rc3_mul16_0_stall_in_reg_319_NO_SHIFT_REG;
 logic rcnode_1to319_rc3_mul16_0_stall_out_reg_319_IP_NO_SHIFT_REG;
 logic rcnode_1to319_rc3_mul16_0_stall_out_reg_319_NO_SHIFT_REG;

acl_data_fifo rcnode_1to319_rc3_mul16_0_reg_319_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_1to319_rc3_mul16_0_reg_319_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_1to319_rc3_mul16_0_stall_in_reg_319_NO_SHIFT_REG),
	.valid_out(rcnode_1to319_rc3_mul16_0_valid_out_reg_319_NO_SHIFT_REG),
	.stall_out(rcnode_1to319_rc3_mul16_0_stall_out_reg_319_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_1to319_rc3_mul16_0_reg_1),
	.data_out(rcnode_1to319_rc3_mul16_0_reg_319_NO_SHIFT_REG)
);

defparam rcnode_1to319_rc3_mul16_0_reg_319_fifo.DEPTH = 319;
defparam rcnode_1to319_rc3_mul16_0_reg_319_fifo.DATA_WIDTH = 64;
defparam rcnode_1to319_rc3_mul16_0_reg_319_fifo.ALLOW_FULL_WRITE = 0;
defparam rcnode_1to319_rc3_mul16_0_reg_319_fifo.IMPL = "ram";

assign rcnode_1to319_rc3_mul16_0_reg_319_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_3_NO_SHIFT_REG;
assign rcnode_1to319_rc3_mul16_0_stall_out_reg_319_NO_SHIFT_REG = (~(rcnode_1to319_rc3_mul16_0_reg_319_inputs_ready_NO_SHIFT_REG) | rcnode_1to319_rc3_mul16_0_stall_out_reg_319_IP_NO_SHIFT_REG);
assign merge_node_stall_in_3 = rcnode_1to319_rc3_mul16_0_stall_out_reg_319_NO_SHIFT_REG;
assign rcnode_1to319_rc3_mul16_0_NO_SHIFT_REG = rcnode_1to319_rc3_mul16_0_reg_319_NO_SHIFT_REG;
assign rcnode_1to319_rc3_mul16_0_stall_in_reg_319_NO_SHIFT_REG = rcnode_1to319_rc3_mul16_0_stall_in_NO_SHIFT_REG;
assign rcnode_1to319_rc3_mul16_0_valid_out_NO_SHIFT_REG = rcnode_1to319_rc3_mul16_0_valid_out_reg_319_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb2_arrayidx_stall_local;
wire [63:0] local_bb2_arrayidx;

assign local_bb2_arrayidx = ((input_inputFeatureMap & 64'hFFFFFFFFFFFFFC00) + (local_bb2_idxprom << 6'h2));

// This section implements an unregistered operation.
// 
wire local_bb2_arrayidx_valid_out;
wire local_bb2_arrayidx_stall_in;
wire local_bb2_arrayidx11_valid_out;
wire local_bb2_arrayidx11_stall_in;
wire local_bb2_arrayidx11_inputs_ready;
wire local_bb2_arrayidx11_stall_local;
wire [63:0] local_bb2_arrayidx11;
 reg local_bb2_arrayidx_consumed_0_NO_SHIFT_REG;
 reg local_bb2_arrayidx11_consumed_0_NO_SHIFT_REG;

assign local_bb2_arrayidx11_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb2_arrayidx11 = ((input_outputFeatureMap & 64'hFFFFFFFFFFFFFC00) + (local_bb2_idxprom << 6'h2));
assign local_bb2_arrayidx11_stall_local = ((local_bb2_arrayidx_stall_in & ~(local_bb2_arrayidx_consumed_0_NO_SHIFT_REG)) | (local_bb2_arrayidx11_stall_in & ~(local_bb2_arrayidx11_consumed_0_NO_SHIFT_REG)));
assign local_bb2_arrayidx_valid_out = (local_bb2_arrayidx11_inputs_ready & ~(local_bb2_arrayidx_consumed_0_NO_SHIFT_REG));
assign local_bb2_arrayidx11_valid_out = (local_bb2_arrayidx11_inputs_ready & ~(local_bb2_arrayidx11_consumed_0_NO_SHIFT_REG));
assign merge_node_stall_in_0 = (|local_bb2_arrayidx11_stall_local);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_arrayidx_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_arrayidx11_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb2_arrayidx_consumed_0_NO_SHIFT_REG <= (local_bb2_arrayidx11_inputs_ready & (local_bb2_arrayidx_consumed_0_NO_SHIFT_REG | ~(local_bb2_arrayidx_stall_in)) & local_bb2_arrayidx11_stall_local);
		local_bb2_arrayidx11_consumed_0_NO_SHIFT_REG <= (local_bb2_arrayidx11_inputs_ready & (local_bb2_arrayidx11_consumed_0_NO_SHIFT_REG | ~(local_bb2_arrayidx11_stall_in)) & local_bb2_arrayidx11_stall_local);
	end
end


// Register node:
//  * latency = 159
//  * capacity = 159
 logic rnode_2to161_c4_exe2_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to161_c4_exe2_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to161_c4_exe2_0_NO_SHIFT_REG;
 logic rnode_2to161_c4_exe2_0_reg_161_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to161_c4_exe2_0_reg_161_NO_SHIFT_REG;
 logic rnode_2to161_c4_exe2_0_valid_out_reg_161_NO_SHIFT_REG;
 logic rnode_2to161_c4_exe2_0_stall_in_reg_161_NO_SHIFT_REG;
 logic rnode_2to161_c4_exe2_0_stall_out_reg_161_NO_SHIFT_REG;
wire [63:0] rci_rcnode_319to320_rc0_mul16_0_reg_319;

acl_data_fifo rnode_2to161_c4_exe2_0_reg_161_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to161_c4_exe2_0_reg_161_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to161_c4_exe2_0_stall_in_reg_161_NO_SHIFT_REG),
	.valid_out(rnode_2to161_c4_exe2_0_valid_out_reg_161_NO_SHIFT_REG),
	.stall_out(rnode_2to161_c4_exe2_0_stall_out_reg_161_NO_SHIFT_REG),
	.data_in(rnode_1to2_c4_exe2_1_NO_SHIFT_REG),
	.data_out(rnode_2to161_c4_exe2_0_reg_161_NO_SHIFT_REG)
);

defparam rnode_2to161_c4_exe2_0_reg_161_fifo.DEPTH = 160;
defparam rnode_2to161_c4_exe2_0_reg_161_fifo.DATA_WIDTH = 1;
defparam rnode_2to161_c4_exe2_0_reg_161_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_2to161_c4_exe2_0_reg_161_fifo.IMPL = "ram";

assign rnode_2to161_c4_exe2_0_reg_161_inputs_ready_NO_SHIFT_REG = rnode_1to2_c4_exe2_0_valid_out_1_NO_SHIFT_REG;
assign rnode_1to2_c4_exe2_0_stall_in_1_NO_SHIFT_REG = rnode_2to161_c4_exe2_0_stall_out_reg_161_NO_SHIFT_REG;
assign rnode_2to161_c4_exe2_0_NO_SHIFT_REG = rnode_2to161_c4_exe2_0_reg_161_NO_SHIFT_REG;
assign rnode_2to161_c4_exe2_0_stall_in_reg_161_NO_SHIFT_REG = rnode_2to161_c4_exe2_0_stall_in_NO_SHIFT_REG;
assign rnode_2to161_c4_exe2_0_valid_out_NO_SHIFT_REG = rnode_2to161_c4_exe2_0_valid_out_reg_161_NO_SHIFT_REG;
assign rci_rcnode_319to320_rc0_mul16_0_reg_319[31:0] = input_wii_mul16;
assign rci_rcnode_319to320_rc0_mul16_0_reg_319[63:32] = rcnode_1to319_rc3_mul16_0_NO_SHIFT_REG[63:32];

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_319to320_rc0_mul16_0_valid_out_NO_SHIFT_REG;
 logic rcnode_319to320_rc0_mul16_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rcnode_319to320_rc0_mul16_0_NO_SHIFT_REG;
 logic rcnode_319to320_rc0_mul16_0_reg_320_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rcnode_319to320_rc0_mul16_0_reg_320_NO_SHIFT_REG;
 logic rcnode_319to320_rc0_mul16_0_valid_out_reg_320_NO_SHIFT_REG;
 logic rcnode_319to320_rc0_mul16_0_stall_in_reg_320_NO_SHIFT_REG;
 logic rcnode_319to320_rc0_mul16_0_stall_out_reg_320_IP_NO_SHIFT_REG;
 logic rcnode_319to320_rc0_mul16_0_stall_out_reg_320_NO_SHIFT_REG;

acl_data_fifo rcnode_319to320_rc0_mul16_0_reg_320_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_319to320_rc0_mul16_0_reg_320_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_319to320_rc0_mul16_0_stall_in_reg_320_NO_SHIFT_REG),
	.valid_out(rcnode_319to320_rc0_mul16_0_valid_out_reg_320_NO_SHIFT_REG),
	.stall_out(rcnode_319to320_rc0_mul16_0_stall_out_reg_320_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_319to320_rc0_mul16_0_reg_319),
	.data_out(rcnode_319to320_rc0_mul16_0_reg_320_NO_SHIFT_REG)
);

defparam rcnode_319to320_rc0_mul16_0_reg_320_fifo.DEPTH = 1;
defparam rcnode_319to320_rc0_mul16_0_reg_320_fifo.DATA_WIDTH = 64;
defparam rcnode_319to320_rc0_mul16_0_reg_320_fifo.ALLOW_FULL_WRITE = 1;
defparam rcnode_319to320_rc0_mul16_0_reg_320_fifo.IMPL = "ll_reg";

assign rcnode_319to320_rc0_mul16_0_reg_320_inputs_ready_NO_SHIFT_REG = rcnode_1to319_rc3_mul16_0_valid_out_NO_SHIFT_REG;
assign rcnode_319to320_rc0_mul16_0_stall_out_reg_320_NO_SHIFT_REG = (~(rcnode_319to320_rc0_mul16_0_reg_320_inputs_ready_NO_SHIFT_REG) | rcnode_319to320_rc0_mul16_0_stall_out_reg_320_IP_NO_SHIFT_REG);
assign rcnode_1to319_rc3_mul16_0_stall_in_NO_SHIFT_REG = rcnode_319to320_rc0_mul16_0_stall_out_reg_320_NO_SHIFT_REG;
assign rcnode_319to320_rc0_mul16_0_NO_SHIFT_REG = rcnode_319to320_rc0_mul16_0_reg_320_NO_SHIFT_REG;
assign rcnode_319to320_rc0_mul16_0_stall_in_reg_320_NO_SHIFT_REG = rcnode_319to320_rc0_mul16_0_stall_in_NO_SHIFT_REG;
assign rcnode_319to320_rc0_mul16_0_valid_out_NO_SHIFT_REG = rcnode_319to320_rc0_mul16_0_valid_out_reg_320_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb2_arrayidx_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb2_arrayidx_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_1to2_bb2_arrayidx_0_NO_SHIFT_REG;
 logic rnode_1to2_bb2_arrayidx_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_1to2_bb2_arrayidx_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_arrayidx_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_arrayidx_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_arrayidx_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb2_arrayidx_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb2_arrayidx_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb2_arrayidx_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb2_arrayidx_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb2_arrayidx_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in((local_bb2_arrayidx & 64'hFFFFFFFFFFFFFFFC)),
	.data_out(rnode_1to2_bb2_arrayidx_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb2_arrayidx_0_reg_2_fifo.DEPTH = 2;
defparam rnode_1to2_bb2_arrayidx_0_reg_2_fifo.DATA_WIDTH = 64;
defparam rnode_1to2_bb2_arrayidx_0_reg_2_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to2_bb2_arrayidx_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_bb2_arrayidx_0_reg_2_inputs_ready_NO_SHIFT_REG = local_bb2_arrayidx_valid_out;
assign local_bb2_arrayidx_stall_in = rnode_1to2_bb2_arrayidx_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb2_arrayidx_0_NO_SHIFT_REG = rnode_1to2_bb2_arrayidx_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb2_arrayidx_0_stall_in_reg_2_NO_SHIFT_REG = rnode_1to2_bb2_arrayidx_0_stall_in_NO_SHIFT_REG;
assign rnode_1to2_bb2_arrayidx_0_valid_out_NO_SHIFT_REG = rnode_1to2_bb2_arrayidx_0_valid_out_reg_2_NO_SHIFT_REG;

// Register node:
//  * latency = 160
//  * capacity = 160
 logic rnode_1to161_bb2_arrayidx11_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to161_bb2_arrayidx11_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_1to161_bb2_arrayidx11_0_NO_SHIFT_REG;
 logic rnode_1to161_bb2_arrayidx11_0_reg_161_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_1to161_bb2_arrayidx11_0_reg_161_NO_SHIFT_REG;
 logic rnode_1to161_bb2_arrayidx11_0_valid_out_reg_161_NO_SHIFT_REG;
 logic rnode_1to161_bb2_arrayidx11_0_stall_in_reg_161_NO_SHIFT_REG;
 logic rnode_1to161_bb2_arrayidx11_0_stall_out_reg_161_NO_SHIFT_REG;

acl_data_fifo rnode_1to161_bb2_arrayidx11_0_reg_161_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to161_bb2_arrayidx11_0_reg_161_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to161_bb2_arrayidx11_0_stall_in_reg_161_NO_SHIFT_REG),
	.valid_out(rnode_1to161_bb2_arrayidx11_0_valid_out_reg_161_NO_SHIFT_REG),
	.stall_out(rnode_1to161_bb2_arrayidx11_0_stall_out_reg_161_NO_SHIFT_REG),
	.data_in((local_bb2_arrayidx11 & 64'hFFFFFFFFFFFFFFFC)),
	.data_out(rnode_1to161_bb2_arrayidx11_0_reg_161_NO_SHIFT_REG)
);

defparam rnode_1to161_bb2_arrayidx11_0_reg_161_fifo.DEPTH = 161;
defparam rnode_1to161_bb2_arrayidx11_0_reg_161_fifo.DATA_WIDTH = 64;
defparam rnode_1to161_bb2_arrayidx11_0_reg_161_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to161_bb2_arrayidx11_0_reg_161_fifo.IMPL = "ram";

assign rnode_1to161_bb2_arrayidx11_0_reg_161_inputs_ready_NO_SHIFT_REG = local_bb2_arrayidx11_valid_out;
assign local_bb2_arrayidx11_stall_in = rnode_1to161_bb2_arrayidx11_0_stall_out_reg_161_NO_SHIFT_REG;
assign rnode_1to161_bb2_arrayidx11_0_NO_SHIFT_REG = rnode_1to161_bb2_arrayidx11_0_reg_161_NO_SHIFT_REG;
assign rnode_1to161_bb2_arrayidx11_0_stall_in_reg_161_NO_SHIFT_REG = rnode_1to161_bb2_arrayidx11_0_stall_in_NO_SHIFT_REG;
assign rnode_1to161_bb2_arrayidx11_0_valid_out_NO_SHIFT_REG = rnode_1to161_bb2_arrayidx11_0_valid_out_reg_161_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_161to162_c4_exe2_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_161to162_c4_exe2_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_161to162_c4_exe2_0_NO_SHIFT_REG;
 logic rnode_161to162_c4_exe2_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_161to162_c4_exe2_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_161to162_c4_exe2_1_NO_SHIFT_REG;
 logic rnode_161to162_c4_exe2_0_reg_162_inputs_ready_NO_SHIFT_REG;
 logic rnode_161to162_c4_exe2_0_reg_162_NO_SHIFT_REG;
 logic rnode_161to162_c4_exe2_0_valid_out_0_reg_162_NO_SHIFT_REG;
 logic rnode_161to162_c4_exe2_0_stall_in_0_reg_162_NO_SHIFT_REG;
 logic rnode_161to162_c4_exe2_0_stall_out_reg_162_NO_SHIFT_REG;
 reg rnode_161to162_c4_exe2_0_consumed_0_NO_SHIFT_REG;
 reg rnode_161to162_c4_exe2_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_161to162_c4_exe2_0_reg_162_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_161to162_c4_exe2_0_reg_162_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_161to162_c4_exe2_0_stall_in_0_reg_162_NO_SHIFT_REG),
	.valid_out(rnode_161to162_c4_exe2_0_valid_out_0_reg_162_NO_SHIFT_REG),
	.stall_out(rnode_161to162_c4_exe2_0_stall_out_reg_162_NO_SHIFT_REG),
	.data_in(rnode_2to161_c4_exe2_0_NO_SHIFT_REG),
	.data_out(rnode_161to162_c4_exe2_0_reg_162_NO_SHIFT_REG)
);

defparam rnode_161to162_c4_exe2_0_reg_162_fifo.DEPTH = 2;
defparam rnode_161to162_c4_exe2_0_reg_162_fifo.DATA_WIDTH = 1;
defparam rnode_161to162_c4_exe2_0_reg_162_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_161to162_c4_exe2_0_reg_162_fifo.IMPL = "ll_reg";

assign rnode_161to162_c4_exe2_0_reg_162_inputs_ready_NO_SHIFT_REG = rnode_2to161_c4_exe2_0_valid_out_NO_SHIFT_REG;
assign rnode_2to161_c4_exe2_0_stall_in_NO_SHIFT_REG = rnode_161to162_c4_exe2_0_stall_out_reg_162_NO_SHIFT_REG;
assign rnode_161to162_c4_exe2_0_stall_in_0_reg_162_NO_SHIFT_REG = ((rnode_161to162_c4_exe2_0_stall_in_0_NO_SHIFT_REG & ~(rnode_161to162_c4_exe2_0_consumed_0_NO_SHIFT_REG)) | (rnode_161to162_c4_exe2_0_stall_in_1_NO_SHIFT_REG & ~(rnode_161to162_c4_exe2_0_consumed_1_NO_SHIFT_REG)));
assign rnode_161to162_c4_exe2_0_valid_out_0_NO_SHIFT_REG = (rnode_161to162_c4_exe2_0_valid_out_0_reg_162_NO_SHIFT_REG & ~(rnode_161to162_c4_exe2_0_consumed_0_NO_SHIFT_REG));
assign rnode_161to162_c4_exe2_0_valid_out_1_NO_SHIFT_REG = (rnode_161to162_c4_exe2_0_valid_out_0_reg_162_NO_SHIFT_REG & ~(rnode_161to162_c4_exe2_0_consumed_1_NO_SHIFT_REG));
assign rnode_161to162_c4_exe2_0_NO_SHIFT_REG = rnode_161to162_c4_exe2_0_reg_162_NO_SHIFT_REG;
assign rnode_161to162_c4_exe2_1_NO_SHIFT_REG = rnode_161to162_c4_exe2_0_reg_162_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_161to162_c4_exe2_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_161to162_c4_exe2_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_161to162_c4_exe2_0_consumed_0_NO_SHIFT_REG <= (rnode_161to162_c4_exe2_0_valid_out_0_reg_162_NO_SHIFT_REG & (rnode_161to162_c4_exe2_0_consumed_0_NO_SHIFT_REG | ~(rnode_161to162_c4_exe2_0_stall_in_0_NO_SHIFT_REG)) & rnode_161to162_c4_exe2_0_stall_in_0_reg_162_NO_SHIFT_REG);
		rnode_161to162_c4_exe2_0_consumed_1_NO_SHIFT_REG <= (rnode_161to162_c4_exe2_0_valid_out_0_reg_162_NO_SHIFT_REG & (rnode_161to162_c4_exe2_0_consumed_1_NO_SHIFT_REG | ~(rnode_161to162_c4_exe2_0_stall_in_1_NO_SHIFT_REG)) & rnode_161to162_c4_exe2_0_stall_in_0_reg_162_NO_SHIFT_REG);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb2_add18_valid_out;
wire local_bb2_add18_stall_in;
wire local_bb2_add18_inputs_ready;
wire local_bb2_add18_stall_local;
wire [31:0] local_bb2_add18;

assign local_bb2_add18_inputs_ready = rcnode_319to320_rc0_mul16_0_valid_out_NO_SHIFT_REG;
assign local_bb2_add18 = (input_wii_mul16 + rcnode_319to320_rc0_mul16_0_NO_SHIFT_REG[63:32]);
assign local_bb2_add18_valid_out = local_bb2_add18_inputs_ready;
assign local_bb2_add18_stall_local = local_bb2_add18_stall_in;
assign rcnode_319to320_rc0_mul16_0_stall_in_NO_SHIFT_REG = (|local_bb2_add18_stall_local);

// This section implements a registered operation.
// 
wire local_bb2_ld__inputs_ready;
 reg local_bb2_ld__valid_out_NO_SHIFT_REG;
wire local_bb2_ld__stall_in;
wire local_bb2_ld__output_regs_ready;
wire local_bb2_ld__fu_stall_out;
wire local_bb2_ld__fu_valid_out;
wire [31:0] local_bb2_ld__lsu_dataout;
 reg [31:0] local_bb2_ld__NO_SHIFT_REG;
wire local_bb2_ld__causedstall;

lsu_top lsu_local_bb2_ld_ (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb2_ld__fu_stall_out),
	.i_valid(local_bb2_ld__inputs_ready),
	.i_address((rnode_1to2_bb2_arrayidx_0_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFFFC)),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(rnode_1to2_c4_exe2_0_NO_SHIFT_REG),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb2_ld__output_regs_ready)),
	.o_valid(local_bb2_ld__fu_valid_out),
	.o_readdata(local_bb2_ld__lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb2_ld__active),
	.avm_address(avm_local_bb2_ld__address),
	.avm_read(avm_local_bb2_ld__read),
	.avm_enable(avm_local_bb2_ld__enable),
	.avm_readdata(avm_local_bb2_ld__readdata),
	.avm_write(avm_local_bb2_ld__write),
	.avm_writeack(avm_local_bb2_ld__writeack),
	.avm_burstcount(avm_local_bb2_ld__burstcount),
	.avm_writedata(avm_local_bb2_ld__writedata),
	.avm_byteenable(avm_local_bb2_ld__byteenable),
	.avm_waitrequest(avm_local_bb2_ld__waitrequest),
	.avm_readdatavalid(avm_local_bb2_ld__readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb2_ld_.AWIDTH = 32;
defparam lsu_local_bb2_ld_.WIDTH_BYTES = 4;
defparam lsu_local_bb2_ld_.MWIDTH_BYTES = 64;
defparam lsu_local_bb2_ld_.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb2_ld_.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb2_ld_.READ = 1;
defparam lsu_local_bb2_ld_.ATOMIC = 0;
defparam lsu_local_bb2_ld_.WIDTH = 32;
defparam lsu_local_bb2_ld_.MWIDTH = 512;
defparam lsu_local_bb2_ld_.ATOMIC_WIDTH = 3;
defparam lsu_local_bb2_ld_.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb2_ld_.KERNEL_SIDE_MEM_LATENCY = 160;
defparam lsu_local_bb2_ld_.MEMORY_SIDE_MEM_LATENCY = 83;
defparam lsu_local_bb2_ld_.USE_WRITE_ACK = 0;
defparam lsu_local_bb2_ld_.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb2_ld_.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb2_ld_.NUMBER_BANKS = 1;
defparam lsu_local_bb2_ld_.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb2_ld_.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb2_ld_.USEINPUTFIFO = 0;
defparam lsu_local_bb2_ld_.USECACHING = 0;
defparam lsu_local_bb2_ld_.USEOUTPUTFIFO = 1;
defparam lsu_local_bb2_ld_.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb2_ld_.ADDRSPACE = 1;
defparam lsu_local_bb2_ld_.STYLE = "BURST-COALESCED";

assign local_bb2_ld__inputs_ready = (rnode_1to2_bb2_arrayidx_0_valid_out_NO_SHIFT_REG & rnode_1to2_c4_exe2_0_valid_out_0_NO_SHIFT_REG);
assign local_bb2_ld__output_regs_ready = (&(~(local_bb2_ld__valid_out_NO_SHIFT_REG) | ~(local_bb2_ld__stall_in)));
assign rnode_1to2_bb2_arrayidx_0_stall_in_NO_SHIFT_REG = (local_bb2_ld__fu_stall_out | ~(local_bb2_ld__inputs_ready));
assign rnode_1to2_c4_exe2_0_stall_in_0_NO_SHIFT_REG = (local_bb2_ld__fu_stall_out | ~(local_bb2_ld__inputs_ready));
assign local_bb2_ld__causedstall = (local_bb2_ld__inputs_ready && (local_bb2_ld__fu_stall_out && !(~(local_bb2_ld__output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_ld__NO_SHIFT_REG <= 'x;
		local_bb2_ld__valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_ld__output_regs_ready)
		begin
			local_bb2_ld__NO_SHIFT_REG <= local_bb2_ld__lsu_dataout;
			local_bb2_ld__valid_out_NO_SHIFT_REG <= local_bb2_ld__fu_valid_out;
		end
		else
		begin
			if (~(local_bb2_ld__stall_in))
			begin
				local_bb2_ld__valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_161to162_bb2_arrayidx11_0_valid_out_NO_SHIFT_REG;
 logic rnode_161to162_bb2_arrayidx11_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_161to162_bb2_arrayidx11_0_NO_SHIFT_REG;
 logic rnode_161to162_bb2_arrayidx11_0_reg_162_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_161to162_bb2_arrayidx11_0_reg_162_NO_SHIFT_REG;
 logic rnode_161to162_bb2_arrayidx11_0_valid_out_reg_162_NO_SHIFT_REG;
 logic rnode_161to162_bb2_arrayidx11_0_stall_in_reg_162_NO_SHIFT_REG;
 logic rnode_161to162_bb2_arrayidx11_0_stall_out_reg_162_NO_SHIFT_REG;

acl_data_fifo rnode_161to162_bb2_arrayidx11_0_reg_162_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_161to162_bb2_arrayidx11_0_reg_162_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_161to162_bb2_arrayidx11_0_stall_in_reg_162_NO_SHIFT_REG),
	.valid_out(rnode_161to162_bb2_arrayidx11_0_valid_out_reg_162_NO_SHIFT_REG),
	.stall_out(rnode_161to162_bb2_arrayidx11_0_stall_out_reg_162_NO_SHIFT_REG),
	.data_in((rnode_1to161_bb2_arrayidx11_0_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFFFC)),
	.data_out(rnode_161to162_bb2_arrayidx11_0_reg_162_NO_SHIFT_REG)
);

defparam rnode_161to162_bb2_arrayidx11_0_reg_162_fifo.DEPTH = 2;
defparam rnode_161to162_bb2_arrayidx11_0_reg_162_fifo.DATA_WIDTH = 64;
defparam rnode_161to162_bb2_arrayidx11_0_reg_162_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_161to162_bb2_arrayidx11_0_reg_162_fifo.IMPL = "ll_reg";

assign rnode_161to162_bb2_arrayidx11_0_reg_162_inputs_ready_NO_SHIFT_REG = rnode_1to161_bb2_arrayidx11_0_valid_out_NO_SHIFT_REG;
assign rnode_1to161_bb2_arrayidx11_0_stall_in_NO_SHIFT_REG = rnode_161to162_bb2_arrayidx11_0_stall_out_reg_162_NO_SHIFT_REG;
assign rnode_161to162_bb2_arrayidx11_0_NO_SHIFT_REG = rnode_161to162_bb2_arrayidx11_0_reg_162_NO_SHIFT_REG;
assign rnode_161to162_bb2_arrayidx11_0_stall_in_reg_162_NO_SHIFT_REG = rnode_161to162_bb2_arrayidx11_0_stall_in_NO_SHIFT_REG;
assign rnode_161to162_bb2_arrayidx11_0_valid_out_NO_SHIFT_REG = rnode_161to162_bb2_arrayidx11_0_valid_out_reg_162_NO_SHIFT_REG;

// Register node:
//  * latency = 159
//  * capacity = 159
 logic rnode_162to321_c4_exe2_0_valid_out_NO_SHIFT_REG;
 logic rnode_162to321_c4_exe2_0_stall_in_NO_SHIFT_REG;
 logic rnode_162to321_c4_exe2_0_NO_SHIFT_REG;
 logic rnode_162to321_c4_exe2_0_reg_321_inputs_ready_NO_SHIFT_REG;
 logic rnode_162to321_c4_exe2_0_reg_321_NO_SHIFT_REG;
 logic rnode_162to321_c4_exe2_0_valid_out_reg_321_NO_SHIFT_REG;
 logic rnode_162to321_c4_exe2_0_stall_in_reg_321_NO_SHIFT_REG;
 logic rnode_162to321_c4_exe2_0_stall_out_reg_321_NO_SHIFT_REG;

acl_data_fifo rnode_162to321_c4_exe2_0_reg_321_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_162to321_c4_exe2_0_reg_321_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_162to321_c4_exe2_0_stall_in_reg_321_NO_SHIFT_REG),
	.valid_out(rnode_162to321_c4_exe2_0_valid_out_reg_321_NO_SHIFT_REG),
	.stall_out(rnode_162to321_c4_exe2_0_stall_out_reg_321_NO_SHIFT_REG),
	.data_in(rnode_161to162_c4_exe2_1_NO_SHIFT_REG),
	.data_out(rnode_162to321_c4_exe2_0_reg_321_NO_SHIFT_REG)
);

defparam rnode_162to321_c4_exe2_0_reg_321_fifo.DEPTH = 160;
defparam rnode_162to321_c4_exe2_0_reg_321_fifo.DATA_WIDTH = 1;
defparam rnode_162to321_c4_exe2_0_reg_321_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_162to321_c4_exe2_0_reg_321_fifo.IMPL = "ram";

assign rnode_162to321_c4_exe2_0_reg_321_inputs_ready_NO_SHIFT_REG = rnode_161to162_c4_exe2_0_valid_out_1_NO_SHIFT_REG;
assign rnode_161to162_c4_exe2_0_stall_in_1_NO_SHIFT_REG = rnode_162to321_c4_exe2_0_stall_out_reg_321_NO_SHIFT_REG;
assign rnode_162to321_c4_exe2_0_NO_SHIFT_REG = rnode_162to321_c4_exe2_0_reg_321_NO_SHIFT_REG;
assign rnode_162to321_c4_exe2_0_stall_in_reg_321_NO_SHIFT_REG = rnode_162to321_c4_exe2_0_stall_in_NO_SHIFT_REG;
assign rnode_162to321_c4_exe2_0_valid_out_NO_SHIFT_REG = rnode_162to321_c4_exe2_0_valid_out_reg_321_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_320to321_bb2_add18_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_320to321_bb2_add18_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_320to321_bb2_add18_0_NO_SHIFT_REG;
 logic rnode_320to321_bb2_add18_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_320to321_bb2_add18_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_320to321_bb2_add18_1_NO_SHIFT_REG;
 logic rnode_320to321_bb2_add18_0_reg_321_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_320to321_bb2_add18_0_reg_321_NO_SHIFT_REG;
 logic rnode_320to321_bb2_add18_0_valid_out_0_reg_321_NO_SHIFT_REG;
 logic rnode_320to321_bb2_add18_0_stall_in_0_reg_321_NO_SHIFT_REG;
 logic rnode_320to321_bb2_add18_0_stall_out_reg_321_NO_SHIFT_REG;
 reg rnode_320to321_bb2_add18_0_consumed_0_NO_SHIFT_REG;
 reg rnode_320to321_bb2_add18_0_consumed_1_NO_SHIFT_REG;

acl_data_fifo rnode_320to321_bb2_add18_0_reg_321_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_320to321_bb2_add18_0_reg_321_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_320to321_bb2_add18_0_stall_in_0_reg_321_NO_SHIFT_REG),
	.valid_out(rnode_320to321_bb2_add18_0_valid_out_0_reg_321_NO_SHIFT_REG),
	.stall_out(rnode_320to321_bb2_add18_0_stall_out_reg_321_NO_SHIFT_REG),
	.data_in(local_bb2_add18),
	.data_out(rnode_320to321_bb2_add18_0_reg_321_NO_SHIFT_REG)
);

defparam rnode_320to321_bb2_add18_0_reg_321_fifo.DEPTH = 1;
defparam rnode_320to321_bb2_add18_0_reg_321_fifo.DATA_WIDTH = 32;
defparam rnode_320to321_bb2_add18_0_reg_321_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_320to321_bb2_add18_0_reg_321_fifo.IMPL = "ll_reg";

assign rnode_320to321_bb2_add18_0_reg_321_inputs_ready_NO_SHIFT_REG = local_bb2_add18_valid_out;
assign local_bb2_add18_stall_in = rnode_320to321_bb2_add18_0_stall_out_reg_321_NO_SHIFT_REG;
assign rnode_320to321_bb2_add18_0_stall_in_0_reg_321_NO_SHIFT_REG = ((rnode_320to321_bb2_add18_0_stall_in_0_NO_SHIFT_REG & ~(rnode_320to321_bb2_add18_0_consumed_0_NO_SHIFT_REG)) | (rnode_320to321_bb2_add18_0_stall_in_1_NO_SHIFT_REG & ~(rnode_320to321_bb2_add18_0_consumed_1_NO_SHIFT_REG)));
assign rnode_320to321_bb2_add18_0_valid_out_0_NO_SHIFT_REG = (rnode_320to321_bb2_add18_0_valid_out_0_reg_321_NO_SHIFT_REG & ~(rnode_320to321_bb2_add18_0_consumed_0_NO_SHIFT_REG));
assign rnode_320to321_bb2_add18_0_valid_out_1_NO_SHIFT_REG = (rnode_320to321_bb2_add18_0_valid_out_0_reg_321_NO_SHIFT_REG & ~(rnode_320to321_bb2_add18_0_consumed_1_NO_SHIFT_REG));
assign rnode_320to321_bb2_add18_0_NO_SHIFT_REG = rnode_320to321_bb2_add18_0_reg_321_NO_SHIFT_REG;
assign rnode_320to321_bb2_add18_1_NO_SHIFT_REG = rnode_320to321_bb2_add18_0_reg_321_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rnode_320to321_bb2_add18_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rnode_320to321_bb2_add18_0_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rnode_320to321_bb2_add18_0_consumed_0_NO_SHIFT_REG <= (rnode_320to321_bb2_add18_0_valid_out_0_reg_321_NO_SHIFT_REG & (rnode_320to321_bb2_add18_0_consumed_0_NO_SHIFT_REG | ~(rnode_320to321_bb2_add18_0_stall_in_0_NO_SHIFT_REG)) & rnode_320to321_bb2_add18_0_stall_in_0_reg_321_NO_SHIFT_REG);
		rnode_320to321_bb2_add18_0_consumed_1_NO_SHIFT_REG <= (rnode_320to321_bb2_add18_0_valid_out_0_reg_321_NO_SHIFT_REG & (rnode_320to321_bb2_add18_0_consumed_1_NO_SHIFT_REG | ~(rnode_320to321_bb2_add18_0_stall_in_1_NO_SHIFT_REG)) & rnode_320to321_bb2_add18_0_stall_in_0_reg_321_NO_SHIFT_REG);
	end
end


// This section implements a staging register.
// 
wire rstag_162to162_bb2_ld__valid_out;
wire rstag_162to162_bb2_ld__stall_in;
wire rstag_162to162_bb2_ld__inputs_ready;
wire rstag_162to162_bb2_ld__stall_local;
 reg rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG;
wire rstag_162to162_bb2_ld__combined_valid;
 reg [31:0] rstag_162to162_bb2_ld__staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_162to162_bb2_ld_;

assign rstag_162to162_bb2_ld__inputs_ready = local_bb2_ld__valid_out_NO_SHIFT_REG;
assign rstag_162to162_bb2_ld_ = (rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG ? rstag_162to162_bb2_ld__staging_reg_NO_SHIFT_REG : local_bb2_ld__NO_SHIFT_REG);
assign rstag_162to162_bb2_ld__combined_valid = (rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG | rstag_162to162_bb2_ld__inputs_ready);
assign rstag_162to162_bb2_ld__valid_out = rstag_162to162_bb2_ld__combined_valid;
assign rstag_162to162_bb2_ld__stall_local = rstag_162to162_bb2_ld__stall_in;
assign local_bb2_ld__stall_in = (|rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_162to162_bb2_ld__staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_162to162_bb2_ld__stall_local)
		begin
			if (~(rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG))
			begin
				rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG <= rstag_162to162_bb2_ld__inputs_ready;
			end
		end
		else
		begin
			rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_162to162_bb2_ld__staging_valid_NO_SHIFT_REG))
		begin
			rstag_162to162_bb2_ld__staging_reg_NO_SHIFT_REG <= local_bb2_ld__NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb2_cmp20_valid_out;
wire local_bb2_cmp20_stall_in;
wire local_bb2_cmp20_inputs_ready;
wire local_bb2_cmp20_stall_local;
wire local_bb2_cmp20;
wire [64:0] rci_rcnode_321to322_rc1_bb2_add18_0_reg_321;

assign local_bb2_cmp20_inputs_ready = rnode_320to321_bb2_add18_0_valid_out_0_NO_SHIFT_REG;
assign local_bb2_cmp20 = ($signed(rnode_320to321_bb2_add18_0_NO_SHIFT_REG) >= $signed(input_wii_ld_));
assign local_bb2_cmp20_valid_out = local_bb2_cmp20_inputs_ready;
assign local_bb2_cmp20_stall_local = local_bb2_cmp20_stall_in;
assign rnode_320to321_bb2_add18_0_stall_in_0_NO_SHIFT_REG = (|local_bb2_cmp20_stall_local);
assign rci_rcnode_321to322_rc1_bb2_add18_0_reg_321[31:0] = rnode_320to321_bb2_add18_1_NO_SHIFT_REG;
assign rci_rcnode_321to322_rc1_bb2_add18_0_reg_321[63:32] = rnode_1to321_input_acl_hw_wg_id_0_NO_SHIFT_REG;
assign rci_rcnode_321to322_rc1_bb2_add18_0_reg_321[64] = rnode_162to321_c4_exe2_0_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rcnode_321to322_rc1_bb2_add18_0_valid_out_0_NO_SHIFT_REG;
 logic rcnode_321to322_rc1_bb2_add18_0_stall_in_0_NO_SHIFT_REG;
 logic [64:0] rcnode_321to322_rc1_bb2_add18_0_NO_SHIFT_REG;
 logic rcnode_321to322_rc1_bb2_add18_0_valid_out_1_NO_SHIFT_REG;
 logic rcnode_321to322_rc1_bb2_add18_0_stall_in_1_NO_SHIFT_REG;
 logic [64:0] rcnode_321to322_rc1_bb2_add18_1_NO_SHIFT_REG;
 logic rcnode_321to322_rc1_bb2_add18_0_reg_322_inputs_ready_NO_SHIFT_REG;
 logic [64:0] rcnode_321to322_rc1_bb2_add18_0_reg_322_NO_SHIFT_REG;
 logic rcnode_321to322_rc1_bb2_add18_0_valid_out_0_reg_322_NO_SHIFT_REG;
 logic rcnode_321to322_rc1_bb2_add18_0_stall_in_0_reg_322_NO_SHIFT_REG;
 logic rcnode_321to322_rc1_bb2_add18_0_stall_out_0_reg_322_IP_NO_SHIFT_REG;
 logic rcnode_321to322_rc1_bb2_add18_0_stall_out_0_reg_322_NO_SHIFT_REG;

acl_data_fifo rcnode_321to322_rc1_bb2_add18_0_reg_322_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rcnode_321to322_rc1_bb2_add18_0_reg_322_inputs_ready_NO_SHIFT_REG),
	.stall_in(rcnode_321to322_rc1_bb2_add18_0_stall_in_0_reg_322_NO_SHIFT_REG),
	.valid_out(rcnode_321to322_rc1_bb2_add18_0_valid_out_0_reg_322_NO_SHIFT_REG),
	.stall_out(rcnode_321to322_rc1_bb2_add18_0_stall_out_0_reg_322_IP_NO_SHIFT_REG),
	.data_in(rci_rcnode_321to322_rc1_bb2_add18_0_reg_321),
	.data_out(rcnode_321to322_rc1_bb2_add18_0_reg_322_NO_SHIFT_REG)
);

defparam rcnode_321to322_rc1_bb2_add18_0_reg_322_fifo.DEPTH = 1;
defparam rcnode_321to322_rc1_bb2_add18_0_reg_322_fifo.DATA_WIDTH = 65;
defparam rcnode_321to322_rc1_bb2_add18_0_reg_322_fifo.ALLOW_FULL_WRITE = 1;
defparam rcnode_321to322_rc1_bb2_add18_0_reg_322_fifo.IMPL = "ll_reg";

assign rcnode_321to322_rc1_bb2_add18_0_reg_322_inputs_ready_NO_SHIFT_REG = (rnode_320to321_bb2_add18_0_valid_out_1_NO_SHIFT_REG & rnode_1to321_input_acl_hw_wg_id_0_valid_out_NO_SHIFT_REG & rnode_162to321_c4_exe2_0_valid_out_NO_SHIFT_REG);
assign rcnode_321to322_rc1_bb2_add18_0_stall_out_0_reg_322_NO_SHIFT_REG = (~(rcnode_321to322_rc1_bb2_add18_0_reg_322_inputs_ready_NO_SHIFT_REG) | rcnode_321to322_rc1_bb2_add18_0_stall_out_0_reg_322_IP_NO_SHIFT_REG);
assign rnode_320to321_bb2_add18_0_stall_in_1_NO_SHIFT_REG = rcnode_321to322_rc1_bb2_add18_0_stall_out_0_reg_322_NO_SHIFT_REG;
assign rnode_1to321_input_acl_hw_wg_id_0_stall_in_NO_SHIFT_REG = rcnode_321to322_rc1_bb2_add18_0_stall_out_0_reg_322_NO_SHIFT_REG;
assign rnode_162to321_c4_exe2_0_stall_in_NO_SHIFT_REG = rcnode_321to322_rc1_bb2_add18_0_stall_out_0_reg_322_NO_SHIFT_REG;
assign rcnode_321to322_rc1_bb2_add18_0_stall_in_0_reg_322_NO_SHIFT_REG = (rcnode_321to322_rc1_bb2_add18_0_stall_in_0_NO_SHIFT_REG | rcnode_321to322_rc1_bb2_add18_0_stall_in_1_NO_SHIFT_REG);
assign rcnode_321to322_rc1_bb2_add18_0_valid_out_0_NO_SHIFT_REG = rcnode_321to322_rc1_bb2_add18_0_valid_out_0_reg_322_NO_SHIFT_REG;
assign rcnode_321to322_rc1_bb2_add18_0_valid_out_1_NO_SHIFT_REG = rcnode_321to322_rc1_bb2_add18_0_valid_out_0_reg_322_NO_SHIFT_REG;
assign rcnode_321to322_rc1_bb2_add18_0_NO_SHIFT_REG = rcnode_321to322_rc1_bb2_add18_0_reg_322_NO_SHIFT_REG;
assign rcnode_321to322_rc1_bb2_add18_1_NO_SHIFT_REG = rcnode_321to322_rc1_bb2_add18_0_reg_322_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb2_st__inputs_ready;
 reg local_bb2_st__valid_out_NO_SHIFT_REG;
wire local_bb2_st__stall_in;
wire local_bb2_st__output_regs_ready;
wire local_bb2_st__fu_stall_out;
wire local_bb2_st__fu_valid_out;
wire local_bb2_st__causedstall;

lsu_top lsu_local_bb2_st_ (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb2_st__fu_stall_out),
	.i_valid(local_bb2_st__inputs_ready),
	.i_address((rnode_161to162_bb2_arrayidx11_0_NO_SHIFT_REG & 64'hFFFFFFFFFFFFFFFC)),
	.i_writedata(rstag_162to162_bb2_ld_),
	.i_cmpdata(),
	.i_predicate(rnode_161to162_c4_exe2_0_NO_SHIFT_REG),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb2_st__output_regs_ready)),
	.o_valid(local_bb2_st__fu_valid_out),
	.o_readdata(),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb2_st__active),
	.avm_address(avm_local_bb2_st__address),
	.avm_read(avm_local_bb2_st__read),
	.avm_enable(avm_local_bb2_st__enable),
	.avm_readdata(avm_local_bb2_st__readdata),
	.avm_write(avm_local_bb2_st__write),
	.avm_writeack(avm_local_bb2_st__writeack),
	.avm_burstcount(avm_local_bb2_st__burstcount),
	.avm_writedata(avm_local_bb2_st__writedata),
	.avm_byteenable(avm_local_bb2_st__byteenable),
	.avm_waitrequest(avm_local_bb2_st__waitrequest),
	.avm_readdatavalid(avm_local_bb2_st__readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb2_st_.AWIDTH = 32;
defparam lsu_local_bb2_st_.WIDTH_BYTES = 4;
defparam lsu_local_bb2_st_.MWIDTH_BYTES = 64;
defparam lsu_local_bb2_st_.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb2_st_.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb2_st_.READ = 0;
defparam lsu_local_bb2_st_.ATOMIC = 0;
defparam lsu_local_bb2_st_.WIDTH = 32;
defparam lsu_local_bb2_st_.MWIDTH = 512;
defparam lsu_local_bb2_st_.ATOMIC_WIDTH = 3;
defparam lsu_local_bb2_st_.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb2_st_.KERNEL_SIDE_MEM_LATENCY = 160;
defparam lsu_local_bb2_st_.MEMORY_SIDE_MEM_LATENCY = 18;
defparam lsu_local_bb2_st_.USE_WRITE_ACK = 1;
defparam lsu_local_bb2_st_.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb2_st_.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb2_st_.NUMBER_BANKS = 1;
defparam lsu_local_bb2_st_.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb2_st_.INTENDED_DEVICE_FAMILY = "Stratix V";
defparam lsu_local_bb2_st_.USEINPUTFIFO = 0;
defparam lsu_local_bb2_st_.USECACHING = 0;
defparam lsu_local_bb2_st_.USEOUTPUTFIFO = 1;
defparam lsu_local_bb2_st_.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb2_st_.ADDRSPACE = 1;
defparam lsu_local_bb2_st_.STYLE = "BURST-COALESCED";
defparam lsu_local_bb2_st_.USE_BYTE_EN = 0;

assign local_bb2_st__inputs_ready = (rnode_161to162_c4_exe2_0_valid_out_0_NO_SHIFT_REG & rnode_161to162_bb2_arrayidx11_0_valid_out_NO_SHIFT_REG & rstag_162to162_bb2_ld__valid_out);
assign local_bb2_st__output_regs_ready = (&(~(local_bb2_st__valid_out_NO_SHIFT_REG) | ~(local_bb2_st__stall_in)));
assign rnode_161to162_c4_exe2_0_stall_in_0_NO_SHIFT_REG = (local_bb2_st__fu_stall_out | ~(local_bb2_st__inputs_ready));
assign rnode_161to162_bb2_arrayidx11_0_stall_in_NO_SHIFT_REG = (local_bb2_st__fu_stall_out | ~(local_bb2_st__inputs_ready));
assign rstag_162to162_bb2_ld__stall_in = (local_bb2_st__fu_stall_out | ~(local_bb2_st__inputs_ready));
assign local_bb2_st__causedstall = (local_bb2_st__inputs_ready && (local_bb2_st__fu_stall_out && !(~(local_bb2_st__output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_st__valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_st__output_regs_ready)
		begin
			local_bb2_st__valid_out_NO_SHIFT_REG <= local_bb2_st__fu_valid_out;
		end
		else
		begin
			if (~(local_bb2_st__stall_in))
			begin
				local_bb2_st__valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_321to322_bb2_cmp20_0_valid_out_NO_SHIFT_REG;
 logic rnode_321to322_bb2_cmp20_0_stall_in_NO_SHIFT_REG;
 logic rnode_321to322_bb2_cmp20_0_NO_SHIFT_REG;
 logic rnode_321to322_bb2_cmp20_0_reg_322_inputs_ready_NO_SHIFT_REG;
 logic rnode_321to322_bb2_cmp20_0_reg_322_NO_SHIFT_REG;
 logic rnode_321to322_bb2_cmp20_0_valid_out_reg_322_NO_SHIFT_REG;
 logic rnode_321to322_bb2_cmp20_0_stall_in_reg_322_NO_SHIFT_REG;
 logic rnode_321to322_bb2_cmp20_0_stall_out_reg_322_NO_SHIFT_REG;

acl_data_fifo rnode_321to322_bb2_cmp20_0_reg_322_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_321to322_bb2_cmp20_0_reg_322_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_321to322_bb2_cmp20_0_stall_in_reg_322_NO_SHIFT_REG),
	.valid_out(rnode_321to322_bb2_cmp20_0_valid_out_reg_322_NO_SHIFT_REG),
	.stall_out(rnode_321to322_bb2_cmp20_0_stall_out_reg_322_NO_SHIFT_REG),
	.data_in(local_bb2_cmp20),
	.data_out(rnode_321to322_bb2_cmp20_0_reg_322_NO_SHIFT_REG)
);

defparam rnode_321to322_bb2_cmp20_0_reg_322_fifo.DEPTH = 1;
defparam rnode_321to322_bb2_cmp20_0_reg_322_fifo.DATA_WIDTH = 1;
defparam rnode_321to322_bb2_cmp20_0_reg_322_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_321to322_bb2_cmp20_0_reg_322_fifo.IMPL = "ll_reg";

assign rnode_321to322_bb2_cmp20_0_reg_322_inputs_ready_NO_SHIFT_REG = local_bb2_cmp20_valid_out;
assign local_bb2_cmp20_stall_in = rnode_321to322_bb2_cmp20_0_stall_out_reg_322_NO_SHIFT_REG;
assign rnode_321to322_bb2_cmp20_0_NO_SHIFT_REG = rnode_321to322_bb2_cmp20_0_reg_322_NO_SHIFT_REG;
assign rnode_321to322_bb2_cmp20_0_stall_in_reg_322_NO_SHIFT_REG = rnode_321to322_bb2_cmp20_0_stall_in_NO_SHIFT_REG;
assign rnode_321to322_bb2_cmp20_0_valid_out_NO_SHIFT_REG = rnode_321to322_bb2_cmp20_0_valid_out_reg_322_NO_SHIFT_REG;

// This section implements a staging register.
// 
wire rstag_322to322_bb2_st__valid_out;
wire rstag_322to322_bb2_st__stall_in;
wire rstag_322to322_bb2_st__inputs_ready;
wire rstag_322to322_bb2_st__stall_local;
 reg rstag_322to322_bb2_st__staging_valid_NO_SHIFT_REG;
wire rstag_322to322_bb2_st__combined_valid;

assign rstag_322to322_bb2_st__inputs_ready = local_bb2_st__valid_out_NO_SHIFT_REG;
assign rstag_322to322_bb2_st__combined_valid = (rstag_322to322_bb2_st__staging_valid_NO_SHIFT_REG | rstag_322to322_bb2_st__inputs_ready);
assign rstag_322to322_bb2_st__valid_out = rstag_322to322_bb2_st__combined_valid;
assign rstag_322to322_bb2_st__stall_local = rstag_322to322_bb2_st__stall_in;
assign local_bb2_st__stall_in = (|rstag_322to322_bb2_st__staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_322to322_bb2_st__staging_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (rstag_322to322_bb2_st__stall_local)
		begin
			if (~(rstag_322to322_bb2_st__staging_valid_NO_SHIFT_REG))
			begin
				rstag_322to322_bb2_st__staging_valid_NO_SHIFT_REG <= rstag_322to322_bb2_st__inputs_ready;
			end
		end
		else
		begin
			rstag_322to322_bb2_st__staging_valid_NO_SHIFT_REG <= 1'b0;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb2_cmp20_GUARD_valid_out;
wire local_bb2_cmp20_GUARD_stall_in;
wire local_bb2_cmp20_GUARD_inputs_ready;
wire local_bb2_cmp20_GUARD_stall_local;
wire local_bb2_cmp20_GUARD;

assign local_bb2_cmp20_GUARD_inputs_ready = (rnode_321to322_bb2_cmp20_0_valid_out_NO_SHIFT_REG & rcnode_321to322_rc1_bb2_add18_0_valid_out_1_NO_SHIFT_REG);
assign local_bb2_cmp20_GUARD = (rnode_321to322_bb2_cmp20_0_NO_SHIFT_REG | rcnode_321to322_rc1_bb2_add18_0_NO_SHIFT_REG[64]);
assign local_bb2_cmp20_GUARD_valid_out = local_bb2_cmp20_GUARD_inputs_ready;
assign local_bb2_cmp20_GUARD_stall_local = local_bb2_cmp20_GUARD_stall_in;
assign rnode_321to322_bb2_cmp20_0_stall_in_NO_SHIFT_REG = (local_bb2_cmp20_GUARD_stall_local | ~(local_bb2_cmp20_GUARD_inputs_ready));
assign rcnode_321to322_rc1_bb2_add18_0_stall_in_1_NO_SHIFT_REG = (local_bb2_cmp20_GUARD_stall_local | ~(local_bb2_cmp20_GUARD_inputs_ready));

// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_0_NO_SHIFT_REG;
 reg branch_compare_result_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg lvb_c4_exe2_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb2_add18_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb2_cmp20_GUARD_valid_out & rcnode_321to322_rc1_bb2_add18_0_valid_out_0_NO_SHIFT_REG & rstag_322to322_bb2_st__valid_out);
assign branch_var__output_regs_ready = (~(branch_node_valid_out_0_NO_SHIFT_REG) | (((branch_compare_result_NO_SHIFT_REG != 1'b1) & ~(stall_in_1)) | (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & ~(stall_in_0))));
assign local_bb2_cmp20_GUARD_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rcnode_321to322_rc1_bb2_add18_0_stall_in_0_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rstag_322to322_bb2_st__stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_c4_exe2_0 = lvb_c4_exe2_0_reg_NO_SHIFT_REG;
assign lvb_c4_exe2_1 = lvb_c4_exe2_0_reg_NO_SHIFT_REG;
assign lvb_bb2_add18_0 = lvb_bb2_add18_0_reg_NO_SHIFT_REG;
assign lvb_bb2_add18_1 = lvb_bb2_add18_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_0 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign lvb_input_acl_hw_wg_id_1 = lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG;
assign valid_out_0 = (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG);
assign valid_out_1 = ((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG);
assign combined_branch_stall_in_signal = ((((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_1) | ((~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_0));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		lvb_c4_exe2_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb2_add18_0_reg_NO_SHIFT_REG <= 'x;
		lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= 'x;
		branch_compare_result_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_0_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_c4_exe2_0_reg_NO_SHIFT_REG <= rcnode_321to322_rc1_bb2_add18_0_NO_SHIFT_REG[64];
			lvb_bb2_add18_0_reg_NO_SHIFT_REG <= rcnode_321to322_rc1_bb2_add18_0_NO_SHIFT_REG[31:0];
			lvb_input_acl_hw_wg_id_0_reg_NO_SHIFT_REG <= rcnode_321to322_rc1_bb2_add18_0_NO_SHIFT_REG[63:32];
			branch_compare_result_NO_SHIFT_REG <= local_bb2_cmp20_GUARD;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module outputLayer_basic_block_3
	(
		input 		clock,
		input 		resetn,
		input 		valid_in,
		output 		stall_out,
		input [31:0] 		input_acl_hw_wg_id,
		output 		valid_out,
		input 		stall_in,
		output [31:0] 		lvb_input_acl_hw_wg_id,
		input [31:0] 		workgroup_size,
		input 		start
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in;
 reg merge_node_valid_out_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
 reg [31:0] local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = (|(merge_node_stall_in & merge_node_valid_out_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG <= input_acl_hw_wg_id;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG <= input_acl_hw_wg_id;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in))
			begin
				merge_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
wire branch_var__output_regs_ready;

assign branch_var__inputs_ready = merge_node_valid_out_NO_SHIFT_REG;
assign branch_var__output_regs_ready = ~(stall_in);
assign merge_node_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign valid_out = branch_var__inputs_ready;
assign lvb_input_acl_hw_wg_id = local_lvm_input_acl_hw_wg_id_NO_SHIFT_REG;

endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module outputLayer_function
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_global_id_0,
		input [31:0] 		input_global_id_1,
		input [31:0] 		input_global_id_2,
		input [31:0] 		input_acl_hw_wg_id,
		output 		stall_out,
		input 		valid_in,
		output [31:0] 		output_0,
		output 		valid_out,
		input 		stall_in,
		input [31:0] 		workgroup_size,
		output 		avm_local_bb0_ld__enable,
		input [511:0] 		avm_local_bb0_ld__readdata,
		input 		avm_local_bb0_ld__readdatavalid,
		input 		avm_local_bb0_ld__waitrequest,
		output [31:0] 		avm_local_bb0_ld__address,
		output 		avm_local_bb0_ld__read,
		output 		avm_local_bb0_ld__write,
		input 		avm_local_bb0_ld__writeack,
		output [511:0] 		avm_local_bb0_ld__writedata,
		output [63:0] 		avm_local_bb0_ld__byteenable,
		output [4:0] 		avm_local_bb0_ld__burstcount,
		output 		avm_local_bb2_ld__enable,
		input [511:0] 		avm_local_bb2_ld__readdata,
		input 		avm_local_bb2_ld__readdatavalid,
		input 		avm_local_bb2_ld__waitrequest,
		output [31:0] 		avm_local_bb2_ld__address,
		output 		avm_local_bb2_ld__read,
		output 		avm_local_bb2_ld__write,
		input 		avm_local_bb2_ld__writeack,
		output [511:0] 		avm_local_bb2_ld__writedata,
		output [63:0] 		avm_local_bb2_ld__byteenable,
		output [4:0] 		avm_local_bb2_ld__burstcount,
		output 		avm_local_bb2_st__enable,
		input [511:0] 		avm_local_bb2_st__readdata,
		input 		avm_local_bb2_st__readdatavalid,
		input 		avm_local_bb2_st__waitrequest,
		output [31:0] 		avm_local_bb2_st__address,
		output 		avm_local_bb2_st__read,
		output 		avm_local_bb2_st__write,
		input 		avm_local_bb2_st__writeack,
		output [511:0] 		avm_local_bb2_st__writedata,
		output [63:0] 		avm_local_bb2_st__byteenable,
		output [4:0] 		avm_local_bb2_st__burstcount,
		input 		clock2x,
		input 		start,
		input [63:0] 		input_param,
		input [31:0] 		input_global_size_2,
		input [31:0] 		input_global_size_1,
		input [31:0] 		input_global_size_0,
		input [63:0] 		input_inputFeatureMap,
		input [63:0] 		input_outputFeatureMap,
		output reg 		has_a_write_pending,
		output reg 		has_a_lsu_active
	);


wire [31:0] cur_cycle;
wire bb_0_stall_out;
wire bb_0_valid_out;
wire [31:0] bb_0_lvb_bb0_ld_;
wire [31:0] bb_0_lvb_bb0_mul16;
wire [31:0] bb_0_lvb_input_global_id_0;
wire [31:0] bb_0_lvb_input_global_id_1;
wire [31:0] bb_0_lvb_input_global_id_2;
wire [31:0] bb_0_lvb_input_acl_hw_wg_id;
wire bb_0_local_bb0_ld__active;
wire bb_1_stall_out;
wire bb_1_valid_out;
wire [31:0] bb_1_lvb_bb1_c4_exe1;
wire bb_1_lvb_bb1_c4_exe2;
wire [31:0] bb_1_lvb_input_acl_hw_wg_id;
wire bb_2_stall_out_0;
wire bb_2_stall_out_1;
wire bb_2_valid_out_0;
wire bb_2_lvb_c4_exe2_0;
wire [31:0] bb_2_lvb_bb2_add18_0;
wire [31:0] bb_2_lvb_input_acl_hw_wg_id_0;
wire bb_2_valid_out_1;
wire bb_2_lvb_c4_exe2_1;
wire [31:0] bb_2_lvb_bb2_add18_1;
wire [31:0] bb_2_lvb_input_acl_hw_wg_id_1;
wire bb_2_local_bb2_ld__active;
wire bb_2_local_bb2_st__active;
wire bb_3_stall_out;
wire bb_3_valid_out;
wire [31:0] bb_3_lvb_input_acl_hw_wg_id;
wire loop_limiter_0_stall_out;
wire loop_limiter_0_valid_out;
wire writes_pending;
wire [2:0] lsus_active;

acl_loop_limiter loop_limiter_0 (
	.clock(clock),
	.resetn(resetn),
	.i_valid(bb_1_valid_out),
	.i_stall(bb_2_stall_out_1),
	.i_valid_exit(bb_2_valid_out_0),
	.i_stall_exit(bb_3_stall_out),
	.o_valid(loop_limiter_0_valid_out),
	.o_stall(loop_limiter_0_stall_out)
);

defparam loop_limiter_0.ENTRY_WIDTH = 1;
defparam loop_limiter_0.EXIT_WIDTH = 1;
defparam loop_limiter_0.THRESHOLD = 323;

outputLayer_basic_block_0 outputLayer_basic_block_0 (
	.clock(clock),
	.resetn(resetn),
	.start(start),
	.input_param(input_param),
	.input_global_size_2(input_global_size_2),
	.input_global_size_1(input_global_size_1),
	.input_global_size_0(input_global_size_0),
	.valid_in(valid_in),
	.stall_out(bb_0_stall_out),
	.input_global_id_0(input_global_id_0),
	.input_global_id_1(input_global_id_1),
	.input_global_id_2(input_global_id_2),
	.input_acl_hw_wg_id(input_acl_hw_wg_id),
	.valid_out(bb_0_valid_out),
	.stall_in(bb_1_stall_out),
	.lvb_bb0_ld_(bb_0_lvb_bb0_ld_),
	.lvb_bb0_mul16(bb_0_lvb_bb0_mul16),
	.lvb_input_global_id_0(bb_0_lvb_input_global_id_0),
	.lvb_input_global_id_1(bb_0_lvb_input_global_id_1),
	.lvb_input_global_id_2(bb_0_lvb_input_global_id_2),
	.lvb_input_acl_hw_wg_id(bb_0_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.avm_local_bb0_ld__enable(avm_local_bb0_ld__enable),
	.avm_local_bb0_ld__readdata(avm_local_bb0_ld__readdata),
	.avm_local_bb0_ld__readdatavalid(avm_local_bb0_ld__readdatavalid),
	.avm_local_bb0_ld__waitrequest(avm_local_bb0_ld__waitrequest),
	.avm_local_bb0_ld__address(avm_local_bb0_ld__address),
	.avm_local_bb0_ld__read(avm_local_bb0_ld__read),
	.avm_local_bb0_ld__write(avm_local_bb0_ld__write),
	.avm_local_bb0_ld__writeack(avm_local_bb0_ld__writeack),
	.avm_local_bb0_ld__writedata(avm_local_bb0_ld__writedata),
	.avm_local_bb0_ld__byteenable(avm_local_bb0_ld__byteenable),
	.avm_local_bb0_ld__burstcount(avm_local_bb0_ld__burstcount),
	.local_bb0_ld__active(bb_0_local_bb0_ld__active),
	.clock2x(clock2x)
);


outputLayer_basic_block_1 outputLayer_basic_block_1 (
	.clock(clock),
	.resetn(resetn),
	.input_global_size_1(input_global_size_1),
	.input_global_size_2(input_global_size_2),
	.input_wii_ld_(bb_0_lvb_bb0_ld_),
	.input_wii_mul16(bb_0_lvb_bb0_mul16),
	.valid_in(bb_0_valid_out),
	.stall_out(bb_1_stall_out),
	.input_global_id_0(bb_0_lvb_input_global_id_0),
	.input_global_id_1(bb_0_lvb_input_global_id_1),
	.input_global_id_2(bb_0_lvb_input_global_id_2),
	.input_acl_hw_wg_id(bb_0_lvb_input_acl_hw_wg_id),
	.valid_out(bb_1_valid_out),
	.stall_in(loop_limiter_0_stall_out),
	.lvb_bb1_c4_exe1(bb_1_lvb_bb1_c4_exe1),
	.lvb_bb1_c4_exe2(bb_1_lvb_bb1_c4_exe2),
	.lvb_input_acl_hw_wg_id(bb_1_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.start(start)
);


outputLayer_basic_block_2 outputLayer_basic_block_2 (
	.clock(clock),
	.resetn(resetn),
	.input_inputFeatureMap(input_inputFeatureMap),
	.input_outputFeatureMap(input_outputFeatureMap),
	.input_wii_ld_(bb_0_lvb_bb0_ld_),
	.input_wii_mul16(bb_0_lvb_bb0_mul16),
	.valid_in_0(bb_2_valid_out_1),
	.stall_out_0(bb_2_stall_out_0),
	.input_c4_exe2_0(bb_2_lvb_c4_exe2_1),
	.input_loadDataCounter_019_0(bb_2_lvb_bb2_add18_1),
	.input_acl_hw_wg_id_0(bb_2_lvb_input_acl_hw_wg_id_1),
	.valid_in_1(loop_limiter_0_valid_out),
	.stall_out_1(bb_2_stall_out_1),
	.input_c4_exe2_1(bb_1_lvb_bb1_c4_exe2),
	.input_loadDataCounter_019_1(bb_1_lvb_bb1_c4_exe1),
	.input_acl_hw_wg_id_1(bb_1_lvb_input_acl_hw_wg_id),
	.valid_out_0(bb_2_valid_out_0),
	.stall_in_0(bb_3_stall_out),
	.lvb_c4_exe2_0(bb_2_lvb_c4_exe2_0),
	.lvb_bb2_add18_0(bb_2_lvb_bb2_add18_0),
	.lvb_input_acl_hw_wg_id_0(bb_2_lvb_input_acl_hw_wg_id_0),
	.valid_out_1(bb_2_valid_out_1),
	.stall_in_1(bb_2_stall_out_0),
	.lvb_c4_exe2_1(bb_2_lvb_c4_exe2_1),
	.lvb_bb2_add18_1(bb_2_lvb_bb2_add18_1),
	.lvb_input_acl_hw_wg_id_1(bb_2_lvb_input_acl_hw_wg_id_1),
	.workgroup_size(workgroup_size),
	.start(start),
	.avm_local_bb2_ld__enable(avm_local_bb2_ld__enable),
	.avm_local_bb2_ld__readdata(avm_local_bb2_ld__readdata),
	.avm_local_bb2_ld__readdatavalid(avm_local_bb2_ld__readdatavalid),
	.avm_local_bb2_ld__waitrequest(avm_local_bb2_ld__waitrequest),
	.avm_local_bb2_ld__address(avm_local_bb2_ld__address),
	.avm_local_bb2_ld__read(avm_local_bb2_ld__read),
	.avm_local_bb2_ld__write(avm_local_bb2_ld__write),
	.avm_local_bb2_ld__writeack(avm_local_bb2_ld__writeack),
	.avm_local_bb2_ld__writedata(avm_local_bb2_ld__writedata),
	.avm_local_bb2_ld__byteenable(avm_local_bb2_ld__byteenable),
	.avm_local_bb2_ld__burstcount(avm_local_bb2_ld__burstcount),
	.local_bb2_ld__active(bb_2_local_bb2_ld__active),
	.clock2x(clock2x),
	.avm_local_bb2_st__enable(avm_local_bb2_st__enable),
	.avm_local_bb2_st__readdata(avm_local_bb2_st__readdata),
	.avm_local_bb2_st__readdatavalid(avm_local_bb2_st__readdatavalid),
	.avm_local_bb2_st__waitrequest(avm_local_bb2_st__waitrequest),
	.avm_local_bb2_st__address(avm_local_bb2_st__address),
	.avm_local_bb2_st__read(avm_local_bb2_st__read),
	.avm_local_bb2_st__write(avm_local_bb2_st__write),
	.avm_local_bb2_st__writeack(avm_local_bb2_st__writeack),
	.avm_local_bb2_st__writedata(avm_local_bb2_st__writedata),
	.avm_local_bb2_st__byteenable(avm_local_bb2_st__byteenable),
	.avm_local_bb2_st__burstcount(avm_local_bb2_st__burstcount),
	.local_bb2_st__active(bb_2_local_bb2_st__active)
);


outputLayer_basic_block_3 outputLayer_basic_block_3 (
	.clock(clock),
	.resetn(resetn),
	.valid_in(bb_2_valid_out_0),
	.stall_out(bb_3_stall_out),
	.input_acl_hw_wg_id(bb_2_lvb_input_acl_hw_wg_id_0),
	.valid_out(bb_3_valid_out),
	.stall_in(stall_in),
	.lvb_input_acl_hw_wg_id(bb_3_lvb_input_acl_hw_wg_id),
	.workgroup_size(workgroup_size),
	.start(start)
);


outputLayer_sys_cycle_time system_cycle_time_module (
	.clock(clock),
	.resetn(resetn),
	.cur_cycle(cur_cycle)
);


assign valid_out = bb_3_valid_out;
assign output_0 = bb_3_lvb_input_acl_hw_wg_id;
assign stall_out = bb_0_stall_out;
assign writes_pending = bb_2_local_bb2_st__active;
assign lsus_active[0] = bb_0_local_bb0_ld__active;
assign lsus_active[1] = bb_2_local_bb2_ld__active;
assign lsus_active[2] = bb_2_local_bb2_st__active;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		has_a_write_pending <= 1'b0;
		has_a_lsu_active <= 1'b0;
	end
	else
	begin
		has_a_write_pending <= (|writes_pending);
		has_a_lsu_active <= (|lsus_active);
	end
end

endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module outputLayer_function_cra_slave
	(
		input 		clock,
		input 		resetn,
		output reg [255:0] 		kernel_arguments,
		output reg 		start,
		input 		finish,
		output reg [31:0] 		global_size_0,
		output reg [31:0] 		global_size_1,
		output reg [31:0] 		global_size_2,
		output reg [31:0] 		num_groups_0,
		output reg [31:0] 		num_groups_1,
		output reg [31:0] 		num_groups_2,
		output reg [31:0] 		local_size_0,
		output reg [31:0] 		local_size_1,
		output reg [31:0] 		local_size_2,
		output reg [31:0] 		global_offset_0,
		output reg [31:0] 		global_offset_1,
		output reg [31:0] 		global_offset_2,
		output reg [31:0] 		work_dim,
		output reg [31:0] 		workgroup_size,
		input 		has_a_lsu_active,
		input 		has_a_write_pending,
		input 		valid_in,
		input 		avs_cra_enable,
		input 		avs_cra_read,
		input 		avs_cra_write,
		input [4:0] 		avs_cra_address,
		input [63:0] 		avs_cra_writedata,
		input [7:0] 		avs_cra_byteenable,
		output reg [63:0] 		avs_cra_readdata,
		output reg 		avs_cra_readdatavalid,
		output 		cra_irq
	);


// This section of the wrapper implements an Avalon Slave Interface used to configure a kernel invocation.
// The few words words contain the status and the workgroup size registers.
// The remaining addressable space is reserved for kernel arguments.
 reg started_NO_SHIFT_REG;
 reg [31:0] status_NO_SHIFT_REG;
 reg [63:0] profile_data_NO_SHIFT_REG;
 reg [31:0] profile_ctrl_NO_SHIFT_REG;
 reg [63:0] profile_start_cycle_NO_SHIFT_REG;
 reg [63:0] profile_stop_cycle_NO_SHIFT_REG;
 reg [63:0] cra_readdata_st1_NO_SHIFT_REG;
 reg [4:0] cra_addr_st1_NO_SHIFT_REG;
 reg cra_read_st1_NO_SHIFT_REG;
wire [63:0] bitenable;

assign bitenable[7:0] = (avs_cra_byteenable[0] ? 8'hFF : 8'h0);
assign bitenable[15:8] = (avs_cra_byteenable[1] ? 8'hFF : 8'h0);
assign bitenable[23:16] = (avs_cra_byteenable[2] ? 8'hFF : 8'h0);
assign bitenable[31:24] = (avs_cra_byteenable[3] ? 8'hFF : 8'h0);
assign bitenable[39:32] = (avs_cra_byteenable[4] ? 8'hFF : 8'h0);
assign bitenable[47:40] = (avs_cra_byteenable[5] ? 8'hFF : 8'h0);
assign bitenable[55:48] = (avs_cra_byteenable[6] ? 8'hFF : 8'h0);
assign bitenable[63:56] = (avs_cra_byteenable[7] ? 8'hFF : 8'h0);
assign cra_irq = (status_NO_SHIFT_REG[1] | status_NO_SHIFT_REG[3]);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		start <= 1'b0;
		started_NO_SHIFT_REG <= 1'b0;
		kernel_arguments <= 256'h0;
		status_NO_SHIFT_REG <= 32'h30000;
		profile_ctrl_NO_SHIFT_REG <= 32'h4;
		profile_start_cycle_NO_SHIFT_REG <= 64'h0;
		profile_stop_cycle_NO_SHIFT_REG <= 64'hFFFFFFFFFFFFFFFF;
		work_dim <= 32'h0;
		workgroup_size <= 32'h0;
		global_size_0 <= 32'h0;
		global_size_1 <= 32'h0;
		global_size_2 <= 32'h0;
		num_groups_0 <= 32'h0;
		num_groups_1 <= 32'h0;
		num_groups_2 <= 32'h0;
		local_size_0 <= 32'h0;
		local_size_1 <= 32'h0;
		local_size_2 <= 32'h0;
		global_offset_0 <= 32'h0;
		global_offset_1 <= 32'h0;
		global_offset_2 <= 32'h0;
	end
	else
	begin
		if (avs_cra_write)
		begin
			case (avs_cra_address)
				5'h0:
				begin
					status_NO_SHIFT_REG[31:16] <= 16'h3;
					status_NO_SHIFT_REG[15:0] <= ((status_NO_SHIFT_REG[15:0] & ~(bitenable[15:0])) | (avs_cra_writedata[15:0] & bitenable[15:0]));
				end

				5'h1:
				begin
					profile_ctrl_NO_SHIFT_REG <= ((profile_ctrl_NO_SHIFT_REG & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h3:
				begin
					profile_start_cycle_NO_SHIFT_REG[31:0] <= ((profile_start_cycle_NO_SHIFT_REG[31:0] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					profile_start_cycle_NO_SHIFT_REG[63:32] <= ((profile_start_cycle_NO_SHIFT_REG[63:32] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h4:
				begin
					profile_stop_cycle_NO_SHIFT_REG[31:0] <= ((profile_stop_cycle_NO_SHIFT_REG[31:0] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					profile_stop_cycle_NO_SHIFT_REG[63:32] <= ((profile_stop_cycle_NO_SHIFT_REG[63:32] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h5:
				begin
					work_dim <= ((work_dim & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					workgroup_size <= ((workgroup_size & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h6:
				begin
					global_size_0 <= ((global_size_0 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					global_size_1 <= ((global_size_1 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h7:
				begin
					global_size_2 <= ((global_size_2 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					num_groups_0 <= ((num_groups_0 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h8:
				begin
					num_groups_1 <= ((num_groups_1 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					num_groups_2 <= ((num_groups_2 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'h9:
				begin
					local_size_0 <= ((local_size_0 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					local_size_1 <= ((local_size_1 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hA:
				begin
					local_size_2 <= ((local_size_2 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					global_offset_0 <= ((global_offset_0 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hB:
				begin
					global_offset_1 <= ((global_offset_1 & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					global_offset_2 <= ((global_offset_2 & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hC:
				begin
					kernel_arguments[31:0] <= ((kernel_arguments[31:0] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[63:32] <= ((kernel_arguments[63:32] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hD:
				begin
					kernel_arguments[95:64] <= ((kernel_arguments[95:64] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[127:96] <= ((kernel_arguments[127:96] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hE:
				begin
					kernel_arguments[159:128] <= ((kernel_arguments[159:128] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[191:160] <= ((kernel_arguments[191:160] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				5'hF:
				begin
					kernel_arguments[223:192] <= ((kernel_arguments[223:192] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments[255:224] <= ((kernel_arguments[255:224] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				default:
				begin
				end

			endcase
		end
		else
		begin
			if (status_NO_SHIFT_REG[0])
			begin
				start <= 1'b1;
			end
			if (start)
			begin
				status_NO_SHIFT_REG[0] <= 1'b0;
				started_NO_SHIFT_REG <= 1'b1;
			end
			if (started_NO_SHIFT_REG)
			begin
				start <= 1'b0;
			end
			if (finish)
			begin
				status_NO_SHIFT_REG[1] <= 1'b1;
				started_NO_SHIFT_REG <= 1'b0;
			end
		end
		status_NO_SHIFT_REG[11] <= 1'b0;
		status_NO_SHIFT_REG[12] <= (|has_a_lsu_active);
		status_NO_SHIFT_REG[13] <= (|has_a_write_pending);
		status_NO_SHIFT_REG[14] <= (|valid_in);
		status_NO_SHIFT_REG[15] <= started_NO_SHIFT_REG;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		cra_read_st1_NO_SHIFT_REG <= 1'b0;
		cra_addr_st1_NO_SHIFT_REG <= 5'h0;
		cra_readdata_st1_NO_SHIFT_REG <= 64'h0;
	end
	else
	begin
		cra_read_st1_NO_SHIFT_REG <= avs_cra_read;
		cra_addr_st1_NO_SHIFT_REG <= avs_cra_address;
		case (avs_cra_address)
			5'h0:
			begin
				cra_readdata_st1_NO_SHIFT_REG[31:0] <= status_NO_SHIFT_REG;
				cra_readdata_st1_NO_SHIFT_REG[63:32] <= 32'h0;
			end

			5'h1:
			begin
				cra_readdata_st1_NO_SHIFT_REG[31:0] <= 'x;
				cra_readdata_st1_NO_SHIFT_REG[63:32] <= 32'h0;
			end

			5'h2:
			begin
				cra_readdata_st1_NO_SHIFT_REG[63:0] <= 64'h0;
			end

			5'h3:
			begin
				cra_readdata_st1_NO_SHIFT_REG[63:0] <= 64'h0;
			end

			5'h4:
			begin
				cra_readdata_st1_NO_SHIFT_REG[63:0] <= 64'h0;
			end

			default:
			begin
				cra_readdata_st1_NO_SHIFT_REG <= status_NO_SHIFT_REG;
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		avs_cra_readdatavalid <= 1'b0;
		avs_cra_readdata <= 64'h0;
	end
	else
	begin
		avs_cra_readdatavalid <= cra_read_st1_NO_SHIFT_REG;
		case (cra_addr_st1_NO_SHIFT_REG)
			5'h2:
			begin
				avs_cra_readdata[63:0] <= profile_data_NO_SHIFT_REG;
			end

			default:
			begin
				avs_cra_readdata <= cra_readdata_st1_NO_SHIFT_REG;
			end

		endcase
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module outputLayer_function_wrapper
	(
		input 		clock,
		input 		resetn,
		input 		clock2x,
		input 		local_router_hang,
		output 		has_a_write_pending,
		output 		has_a_lsu_active,
		input [255:0] 		kernel_arguments,
		input 		start,
		input [31:0] 		global_offset_0,
		input [31:0] 		global_offset_1,
		input [31:0] 		global_offset_2,
		input [31:0] 		work_dim,
		output 		kernel_valid_out,
		input [31:0] 		workgroup_size,
		input [31:0] 		global_size_0,
		input [31:0] 		global_size_1,
		input [31:0] 		global_size_2,
		input [31:0] 		num_groups_0,
		input [31:0] 		num_groups_1,
		input [31:0] 		num_groups_2,
		input [31:0] 		local_size_0,
		input [31:0] 		local_size_1,
		input [31:0] 		local_size_2,
		input [31:0] 		local_id_0,
		input [31:0] 		local_id_1,
		input [31:0] 		local_id_2,
		input [31:0] 		global_id_0,
		input [31:0] 		global_id_1,
		input [31:0] 		global_id_2,
		input [31:0] 		group_id_0,
		input [31:0] 		group_id_1,
		input [31:0] 		group_id_2,
		output 		kernel_stall_out,
		input 		kernel_valid_in,
		output 		avm_local_bb0_ld__inst0_enable,
		input [511:0] 		avm_local_bb0_ld__inst0_readdata,
		input 		avm_local_bb0_ld__inst0_readdatavalid,
		input 		avm_local_bb0_ld__inst0_waitrequest,
		output [31:0] 		avm_local_bb0_ld__inst0_address,
		output 		avm_local_bb0_ld__inst0_read,
		output 		avm_local_bb0_ld__inst0_write,
		input 		avm_local_bb0_ld__inst0_writeack,
		output [511:0] 		avm_local_bb0_ld__inst0_writedata,
		output [63:0] 		avm_local_bb0_ld__inst0_byteenable,
		output [4:0] 		avm_local_bb0_ld__inst0_burstcount,
		output 		avm_local_bb2_ld__inst0_enable,
		input [511:0] 		avm_local_bb2_ld__inst0_readdata,
		input 		avm_local_bb2_ld__inst0_readdatavalid,
		input 		avm_local_bb2_ld__inst0_waitrequest,
		output [31:0] 		avm_local_bb2_ld__inst0_address,
		output 		avm_local_bb2_ld__inst0_read,
		output 		avm_local_bb2_ld__inst0_write,
		input 		avm_local_bb2_ld__inst0_writeack,
		output [511:0] 		avm_local_bb2_ld__inst0_writedata,
		output [63:0] 		avm_local_bb2_ld__inst0_byteenable,
		output [4:0] 		avm_local_bb2_ld__inst0_burstcount,
		output 		avm_local_bb2_st__inst0_enable,
		input [511:0] 		avm_local_bb2_st__inst0_readdata,
		input 		avm_local_bb2_st__inst0_readdatavalid,
		input 		avm_local_bb2_st__inst0_waitrequest,
		output [31:0] 		avm_local_bb2_st__inst0_address,
		output 		avm_local_bb2_st__inst0_read,
		output 		avm_local_bb2_st__inst0_write,
		input 		avm_local_bb2_st__inst0_writeack,
		output [511:0] 		avm_local_bb2_st__inst0_writedata,
		output [63:0] 		avm_local_bb2_st__inst0_byteenable,
		output [4:0] 		avm_local_bb2_st__inst0_burstcount
	);

// Responsible for interfacing a kernel with the outside world.

// twoXclock_consumer uses clock2x, even if nobody inside the kernel does. Keeps interface to acl_iface consistent for all kernels.
 reg twoXclock_consumer_NO_SHIFT_REG /* synthesis  preserve  noprune  */;
wire stall_in;
wire stall_out;
wire valid_in;
wire valid_out;

assign kernel_valid_out = valid_out;
assign valid_in = kernel_valid_in;
assign kernel_stall_out = stall_out;
assign stall_in = 1'b0;

always @(posedge clock2x or negedge resetn)
begin
	if (~(resetn))
	begin
		twoXclock_consumer_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		twoXclock_consumer_NO_SHIFT_REG <= 1'b1;
	end
end



// This section instantiates a kernel function block
outputLayer_function outputLayer_function_inst0 (
	.clock(clock),
	.resetn(resetn),
	.input_global_id_0(global_id_0),
	.input_global_id_1(global_id_1),
	.input_global_id_2(global_id_2),
	.input_acl_hw_wg_id(),
	.stall_out(stall_out),
	.valid_in(valid_in),
	.output_0(),
	.valid_out(valid_out),
	.stall_in(stall_in),
	.workgroup_size(workgroup_size),
	.avm_local_bb0_ld__enable(avm_local_bb0_ld__inst0_enable),
	.avm_local_bb0_ld__readdata(avm_local_bb0_ld__inst0_readdata),
	.avm_local_bb0_ld__readdatavalid(avm_local_bb0_ld__inst0_readdatavalid),
	.avm_local_bb0_ld__waitrequest(avm_local_bb0_ld__inst0_waitrequest),
	.avm_local_bb0_ld__address(avm_local_bb0_ld__inst0_address),
	.avm_local_bb0_ld__read(avm_local_bb0_ld__inst0_read),
	.avm_local_bb0_ld__write(avm_local_bb0_ld__inst0_write),
	.avm_local_bb0_ld__writeack(avm_local_bb0_ld__inst0_writeack),
	.avm_local_bb0_ld__writedata(avm_local_bb0_ld__inst0_writedata),
	.avm_local_bb0_ld__byteenable(avm_local_bb0_ld__inst0_byteenable),
	.avm_local_bb0_ld__burstcount(avm_local_bb0_ld__inst0_burstcount),
	.avm_local_bb2_ld__enable(avm_local_bb2_ld__inst0_enable),
	.avm_local_bb2_ld__readdata(avm_local_bb2_ld__inst0_readdata),
	.avm_local_bb2_ld__readdatavalid(avm_local_bb2_ld__inst0_readdatavalid),
	.avm_local_bb2_ld__waitrequest(avm_local_bb2_ld__inst0_waitrequest),
	.avm_local_bb2_ld__address(avm_local_bb2_ld__inst0_address),
	.avm_local_bb2_ld__read(avm_local_bb2_ld__inst0_read),
	.avm_local_bb2_ld__write(avm_local_bb2_ld__inst0_write),
	.avm_local_bb2_ld__writeack(avm_local_bb2_ld__inst0_writeack),
	.avm_local_bb2_ld__writedata(avm_local_bb2_ld__inst0_writedata),
	.avm_local_bb2_ld__byteenable(avm_local_bb2_ld__inst0_byteenable),
	.avm_local_bb2_ld__burstcount(avm_local_bb2_ld__inst0_burstcount),
	.avm_local_bb2_st__enable(avm_local_bb2_st__inst0_enable),
	.avm_local_bb2_st__readdata(avm_local_bb2_st__inst0_readdata),
	.avm_local_bb2_st__readdatavalid(avm_local_bb2_st__inst0_readdatavalid),
	.avm_local_bb2_st__waitrequest(avm_local_bb2_st__inst0_waitrequest),
	.avm_local_bb2_st__address(avm_local_bb2_st__inst0_address),
	.avm_local_bb2_st__read(avm_local_bb2_st__inst0_read),
	.avm_local_bb2_st__write(avm_local_bb2_st__inst0_write),
	.avm_local_bb2_st__writeack(avm_local_bb2_st__inst0_writeack),
	.avm_local_bb2_st__writedata(avm_local_bb2_st__inst0_writedata),
	.avm_local_bb2_st__byteenable(avm_local_bb2_st__inst0_byteenable),
	.avm_local_bb2_st__burstcount(avm_local_bb2_st__inst0_burstcount),
	.clock2x(clock2x),
	.start(start),
	.input_param(kernel_arguments[191:128]),
	.input_global_size_2(global_size_2),
	.input_global_size_1(global_size_1),
	.input_global_size_0(global_size_0),
	.input_inputFeatureMap(kernel_arguments[63:0]),
	.input_outputFeatureMap(kernel_arguments[127:64]),
	.has_a_write_pending(has_a_write_pending),
	.has_a_lsu_active(has_a_lsu_active)
);



endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

// altera message_off 10036
// altera message_off 10230
// altera message_off 10858
module outputLayer_sys_cycle_time
	(
		input 		clock,
		input 		resetn,
		output [31:0] 		cur_cycle
	);


 reg [31:0] cur_count_NO_SHIFT_REG;

assign cur_cycle = cur_count_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		cur_count_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		cur_count_NO_SHIFT_REG <= (cur_count_NO_SHIFT_REG + 32'h1);
	end
end

endmodule

